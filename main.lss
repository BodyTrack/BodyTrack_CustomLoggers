
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008eb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000009b4  00802000  00008eb6  00008f4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001f5f  008029b4  008029b4  000098fe  2**0
                  ALLOC
  3 .stab         00001770  00000000  00000000  00009900  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000428  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  0000b498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001315  00000000  00000000  0000b538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008435  00000000  00000000  0000c84d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000009e0  00000000  00000000  00014c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006409  00000000  00000000  00015662  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a80  00000000  00000000  0001ba6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000040b3  00000000  00000000  0001c4ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006206  00000000  00000000  0002059f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004f8  00000000  00000000  000267a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_25>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      bc:	0c 94 b8 25 	jmp	0x4b70	; 0x4b70 <__vector_47>
      c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d4:	0c 94 f1 37 	jmp	0x6fe2	; 0x6fe2 <__vector_53>
      d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ec:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      fc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     100:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     104:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     108:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     10c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     110:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     114:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     118:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     11c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     120:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     124:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     128:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     12c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     130:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     134:	0c 94 f6 29 	jmp	0x53ec	; 0x53ec <__vector_77>
     138:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     13c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     140:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     144:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     148:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     14c:	0c 94 68 2c 	jmp	0x58d0	; 0x58d0 <__vector_83>
     150:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     154:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     158:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     15c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     160:	0c 94 42 3d 	jmp	0x7a84	; 0x7a84 <__vector_88>
     164:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     168:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     16c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     170:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     174:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     178:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     17c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     180:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     184:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     188:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     18c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     190:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     194:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     198:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     19c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b0:	0c 94 e5 2a 	jmp	0x55ca	; 0x55ca <__vector_108>
     1b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e5       	ldi	r29, 0x5F	; 95
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	19 e2       	ldi	r17, 0x29	; 41
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	e6 eb       	ldi	r30, 0xB6	; 182
     200:	fe e8       	ldi	r31, 0x8E	; 142
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a4 3b       	cpi	r26, 0xB4	; 180
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	19 e4       	ldi	r17, 0x49	; 73
     214:	a4 eb       	ldi	r26, 0xB4	; 180
     216:	b9 e2       	ldi	r27, 0x29	; 41
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a3 31       	cpi	r26, 0x13	; 19
     21e:	b1 07       	cpc	r27, r17
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 5a 40 	call	0x80b4	; 0x80b4 <main>
     226:	0c 94 59 47 	jmp	0x8eb2	; 0x8eb2 <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <Debug_Init>:
volatile uint16_t  	Debug_readLocation = 0;
volatile uint16_t   Debug_writeLocation = 0;


void Debug_Init(void){
	Debug_Port.DIRSET = Debug_TX_pin_bm;
     22e:	e0 e4       	ldi	r30, 0x40	; 64
     230:	f6 e0       	ldi	r31, 0x06	; 6
     232:	88 e0       	ldi	r24, 0x08	; 8
     234:	81 83       	std	Z+1, r24	; 0x01
	Debug_Port.DIRCLR = Debug_RX_pin_bm;
     236:	84 e0       	ldi	r24, 0x04	; 4
     238:	82 83       	std	Z+2, r24	; 0x02
   
	Debug_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);	 	    				
     23a:	e0 ea       	ldi	r30, 0xA0	; 160
     23c:	f8 e0       	ldi	r31, 0x08	; 8
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	85 83       	std	Z+5, r24	; 0x05
	
	Debug_Usart.BAUDCTRLA = 95 & 0xFF;
     242:	8f e5       	ldi	r24, 0x5F	; 95
     244:	86 83       	std	Z+6, r24	; 0x06
	Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
     246:	17 82       	std	Z+7, r1	; 0x07
	
	
	Debug_Usart.CTRLB |= USART_RXEN_bm;
     248:	84 81       	ldd	r24, Z+4	; 0x04
     24a:	80 61       	ori	r24, 0x10	; 16
     24c:	84 83       	std	Z+4, r24	; 0x04
	Debug_Usart.CTRLB |= USART_TXEN_bm;
     24e:	84 81       	ldd	r24, Z+4	; 0x04
     250:	88 60       	ori	r24, 0x08	; 8
     252:	84 83       	std	Z+4, r24	; 0x04
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
     254:	83 81       	ldd	r24, Z+3	; 0x03
     256:	80 62       	ori	r24, 0x20	; 32
     258:	83 83       	std	Z+3, r24	; 0x03
}
     25a:	08 95       	ret

0000025c <Debug_CharReadyToRead>:



bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
     25c:	20 91 e2 29 	lds	r18, 0x29E2
     260:	30 91 e3 29 	lds	r19, 0x29E3
     264:	80 91 e0 29 	lds	r24, 0x29E0
     268:	90 91 e1 29 	lds	r25, 0x29E1
     26c:	40 e0       	ldi	r20, 0x00	; 0
     26e:	28 17       	cp	r18, r24
     270:	39 07       	cpc	r19, r25
     272:	09 f0       	breq	.+2      	; 0x276 <Debug_CharReadyToRead+0x1a>
     274:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     276:	84 2f       	mov	r24, r20
     278:	08 95       	ret

0000027a <Debug_GetByte>:

uint8_t Debug_GetByte(bool blocking){
	if(blocking){
     27a:	88 23       	and	r24, r24
     27c:	59 f0       	breq	.+22     	; 0x294 <Debug_GetByte+0x1a>
}



bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
     27e:	20 91 e2 29 	lds	r18, 0x29E2
     282:	30 91 e3 29 	lds	r19, 0x29E3
     286:	80 91 e0 29 	lds	r24, 0x29E0
     28a:	90 91 e1 29 	lds	r25, 0x29E1
     28e:	28 17       	cp	r18, r24
     290:	39 07       	cpc	r19, r25
     292:	a9 f3       	breq	.-22     	; 0x27e <Debug_GetByte+0x4>
uint8_t Debug_GetByte(bool blocking){
	if(blocking){
		while(!Debug_CharReadyToRead());
	}

	uint8_t tmp = DebugBuffer[Debug_readLocation];
     294:	e0 91 e0 29 	lds	r30, 0x29E0
     298:	f0 91 e1 29 	lds	r31, 0x29E1
     29c:	ee 51       	subi	r30, 0x1E	; 30
     29e:	f5 4c       	sbci	r31, 0xC5	; 197
     2a0:	e0 81       	ld	r30, Z
	Debug_readLocation++;
     2a2:	80 91 e0 29 	lds	r24, 0x29E0
     2a6:	90 91 e1 29 	lds	r25, 0x29E1
     2aa:	01 96       	adiw	r24, 0x01	; 1
     2ac:	80 93 e0 29 	sts	0x29E0, r24
     2b0:	90 93 e1 29 	sts	0x29E1, r25
	if(Debug_readLocation >= Debug_BufferSize){
     2b4:	80 91 e0 29 	lds	r24, 0x29E0
     2b8:	90 91 e1 29 	lds	r25, 0x29E1
     2bc:	80 50       	subi	r24, 0x00	; 0
     2be:	94 40       	sbci	r25, 0x04	; 4
     2c0:	20 f0       	brcs	.+8      	; 0x2ca <Debug_GetByte+0x50>
	  Debug_readLocation=0;
     2c2:	10 92 e0 29 	sts	0x29E0, r1
     2c6:	10 92 e1 29 	sts	0x29E1, r1
	}
	return tmp;
}
     2ca:	8e 2f       	mov	r24, r30
     2cc:	08 95       	ret

000002ce <Debug_SendByte>:


void Debug_SendByte(uint8_t data){
     2ce:	98 2f       	mov	r25, r24
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     2d0:	80 91 a1 08 	lds	r24, 0x08A1
     2d4:	85 ff       	sbrs	r24, 5
     2d6:	fc cf       	rjmp	.-8      	; 0x2d0 <Debug_SendByte+0x2>
	Debug_Usart.DATA = data;	
     2d8:	90 93 a0 08 	sts	0x08A0, r25
}
     2dc:	08 95       	ret

000002de <__vector_25>:
		Debug_SendByte(13);
		Debug_SendByte(10);
	}
}

ISR(USARTC0_RXC_vect){
     2de:	1f 92       	push	r1
     2e0:	0f 92       	push	r0
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	0f 92       	push	r0
     2e6:	0b b6       	in	r0, 0x3b	; 59
     2e8:	0f 92       	push	r0
     2ea:	11 24       	eor	r1, r1
     2ec:	2f 93       	push	r18
     2ee:	8f 93       	push	r24
     2f0:	9f 93       	push	r25
     2f2:	ef 93       	push	r30
     2f4:	ff 93       	push	r31
	DebugBuffer[Debug_writeLocation] = Debug_Usart.DATA;
     2f6:	e0 91 e2 29 	lds	r30, 0x29E2
     2fa:	f0 91 e3 29 	lds	r31, 0x29E3
     2fe:	80 91 a0 08 	lds	r24, 0x08A0
     302:	ee 51       	subi	r30, 0x1E	; 30
     304:	f5 4c       	sbci	r31, 0xC5	; 197
     306:	80 83       	st	Z, r24
	Debug_writeLocation++;
     308:	80 91 e2 29 	lds	r24, 0x29E2
     30c:	90 91 e3 29 	lds	r25, 0x29E3
     310:	01 96       	adiw	r24, 0x01	; 1
     312:	80 93 e2 29 	sts	0x29E2, r24
     316:	90 93 e3 29 	sts	0x29E3, r25
	if(Debug_writeLocation >= Debug_BufferSize){
     31a:	80 91 e2 29 	lds	r24, 0x29E2
     31e:	90 91 e3 29 	lds	r25, 0x29E3
     322:	80 50       	subi	r24, 0x00	; 0
     324:	94 40       	sbci	r25, 0x04	; 4
     326:	20 f0       	brcs	.+8      	; 0x330 <__vector_25+0x52>
		Debug_writeLocation = 0;
     328:	10 92 e2 29 	sts	0x29E2, r1
     32c:	10 92 e3 29 	sts	0x29E3, r1
	}
}
     330:	ff 91       	pop	r31
     332:	ef 91       	pop	r30
     334:	9f 91       	pop	r25
     336:	8f 91       	pop	r24
     338:	2f 91       	pop	r18
     33a:	0f 90       	pop	r0
     33c:	0b be       	out	0x3b, r0	; 59
     33e:	0f 90       	pop	r0
     340:	0f be       	out	0x3f, r0	; 63
     342:	0f 90       	pop	r0
     344:	1f 90       	pop	r1
     346:	18 95       	reti

00000348 <Wifi_Init>:
volatile char connectionStatus[3];
char macAddr[20];

void Wifi_Init(uint32_t baud){

	Wifi_Usart.CTRLB &= (~USART_RXEN_bm);
     348:	e0 ea       	ldi	r30, 0xA0	; 160
     34a:	fa e0       	ldi	r31, 0x0A	; 10
     34c:	80 91 a4 0a 	lds	r24, 0x0AA4
     350:	8f 7e       	andi	r24, 0xEF	; 239
     352:	84 83       	std	Z+4, r24	; 0x04
	Wifi_Usart.CTRLB &= (~USART_TXEN_bm);
     354:	80 91 a4 0a 	lds	r24, 0x0AA4
     358:	87 7f       	andi	r24, 0xF7	; 247
     35a:	84 83       	std	Z+4, r24	; 0x04
     35c:	80 e1       	ldi	r24, 0x10	; 16
     35e:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     360:	20 e7       	ldi	r18, 0x70	; 112
     362:	31 e0       	ldi	r19, 0x01	; 1
     364:	f9 01       	movw	r30, r18
     366:	31 97       	sbiw	r30, 0x01	; 1
     368:	f1 f7       	brne	.-4      	; 0x366 <Wifi_Init+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     36a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     36c:	d9 f7       	brne	.-10     	; 0x364 <Wifi_Init+0x1c>
	_delay_ms(1000);

	Wifi_Port.DIRSET = Wifi_TX_pin_bm;
     36e:	e0 e8       	ldi	r30, 0x80	; 128
     370:	f6 e0       	ldi	r31, 0x06	; 6
     372:	88 e0       	ldi	r24, 0x08	; 8
     374:	81 83       	std	Z+1, r24	; 0x01
	Wifi_Port.DIRCLR = Wifi_RX_pin_bm;
     376:	84 e0       	ldi	r24, 0x04	; 4
     378:	82 83       	std	Z+2, r24	; 0x02

	Wifi_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);
     37a:	e0 ea       	ldi	r30, 0xA0	; 160
     37c:	fa e0       	ldi	r31, 0x0A	; 10
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	85 83       	std	Z+5, r24	; 0x05
	 	    	

	Wifi_Usart.BAUDCTRLA = 95 & 0xFF;
     382:	8f e5       	ldi	r24, 0x5F	; 95
     384:	86 83       	std	Z+6, r24	; 0x06
	Wifi_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
     386:	17 82       	std	Z+7, r1	; 0x07

	
	Wifi_Usart.CTRLB |= USART_RXEN_bm;
     388:	80 91 a4 0a 	lds	r24, 0x0AA4
     38c:	80 61       	ori	r24, 0x10	; 16
     38e:	84 83       	std	Z+4, r24	; 0x04
	Wifi_Usart.CTRLB |= USART_TXEN_bm;
     390:	80 91 a4 0a 	lds	r24, 0x0AA4
     394:	88 60       	ori	r24, 0x08	; 8
     396:	84 83       	std	Z+4, r24	; 0x04
		
}
     398:	08 95       	ret

0000039a <Wifi_CharReadyToRead>:
		Wifi_readLocation = Wifi_writeLocation;
	}
}

bool Wifi_CharReadyToRead(void){
	Wifi_writeLocation  = DMA.CH0.DESTADDR1 << 8;
     39a:	20 91 1d 01 	lds	r18, 0x011D
     39e:	92 2f       	mov	r25, r18
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	80 93 e6 29 	sts	0x29E6, r24
     3a6:	90 93 e7 29 	sts	0x29E7, r25
	Wifi_writeLocation += DMA.CH0.DESTADDR0;
     3aa:	80 91 e6 29 	lds	r24, 0x29E6
     3ae:	90 91 e7 29 	lds	r25, 0x29E7
     3b2:	20 91 1c 01 	lds	r18, 0x011C
     3b6:	82 0f       	add	r24, r18
     3b8:	91 1d       	adc	r25, r1
     3ba:	80 93 e6 29 	sts	0x29E6, r24
     3be:	90 93 e7 29 	sts	0x29E7, r25
	Wifi_writeLocation -= (uint16_t)(&WifiBuffer[0]);
     3c2:	80 91 e6 29 	lds	r24, 0x29E6
     3c6:	90 91 e7 29 	lds	r25, 0x29E7
     3ca:	86 54       	subi	r24, 0x46	; 70
     3cc:	9d 42       	sbci	r25, 0x2D	; 45
     3ce:	80 93 e6 29 	sts	0x29E6, r24
     3d2:	90 93 e7 29 	sts	0x29E7, r25
	
	if(Wifi_writeLocation == Wifi_readLocation){
     3d6:	20 91 e6 29 	lds	r18, 0x29E6
     3da:	30 91 e7 29 	lds	r19, 0x29E7
     3de:	80 91 e4 29 	lds	r24, 0x29E4
     3e2:	90 91 e5 29 	lds	r25, 0x29E5
     3e6:	40 e0       	ldi	r20, 0x00	; 0
     3e8:	28 17       	cp	r18, r24
     3ea:	39 07       	cpc	r19, r25
     3ec:	09 f0       	breq	.+2      	; 0x3f0 <Wifi_CharReadyToRead+0x56>
     3ee:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     3f0:	84 2f       	mov	r24, r20
     3f2:	08 95       	ret

000003f4 <Wifi_ClearBuffer>:
	Wifi_Usart.CTRLB |= USART_TXEN_bm;
		
}

void Wifi_ClearBuffer(void){
	if(Wifi_CharReadyToRead()){
     3f4:	0e 94 cd 01 	call	0x39a	; 0x39a <Wifi_CharReadyToRead>
     3f8:	88 23       	and	r24, r24
     3fa:	31 f1       	breq	.+76     	; 0x448 <Wifi_ClearBuffer+0x54>
		Wifi_writeLocation  = DMA.CH0.DESTADDR1 << 8;
     3fc:	20 91 1d 01 	lds	r18, 0x011D
     400:	92 2f       	mov	r25, r18
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	80 93 e6 29 	sts	0x29E6, r24
     408:	90 93 e7 29 	sts	0x29E7, r25
		Wifi_writeLocation += DMA.CH0.DESTADDR0;
     40c:	80 91 e6 29 	lds	r24, 0x29E6
     410:	90 91 e7 29 	lds	r25, 0x29E7
     414:	20 91 1c 01 	lds	r18, 0x011C
     418:	82 0f       	add	r24, r18
     41a:	91 1d       	adc	r25, r1
     41c:	80 93 e6 29 	sts	0x29E6, r24
     420:	90 93 e7 29 	sts	0x29E7, r25
		Wifi_writeLocation -= (uint16_t)(&WifiBuffer[0]);
     424:	80 91 e6 29 	lds	r24, 0x29E6
     428:	90 91 e7 29 	lds	r25, 0x29E7
     42c:	86 54       	subi	r24, 0x46	; 70
     42e:	9d 42       	sbci	r25, 0x2D	; 45
     430:	80 93 e6 29 	sts	0x29E6, r24
     434:	90 93 e7 29 	sts	0x29E7, r25
		Wifi_readLocation = Wifi_writeLocation;
     438:	80 91 e6 29 	lds	r24, 0x29E6
     43c:	90 91 e7 29 	lds	r25, 0x29E7
     440:	80 93 e4 29 	sts	0x29E4, r24
     444:	90 93 e5 29 	sts	0x29E5, r25
     448:	08 95       	ret

0000044a <Wifi_GetByte>:
		return true;
	}
}

uint8_t Wifi_GetByte(bool blocking){
	if(blocking){
     44a:	88 23       	and	r24, r24
     44c:	21 f0       	breq	.+8      	; 0x456 <Wifi_GetByte+0xc>
		while(!Wifi_CharReadyToRead());
     44e:	0e 94 cd 01 	call	0x39a	; 0x39a <Wifi_CharReadyToRead>
     452:	88 23       	and	r24, r24
     454:	e1 f3       	breq	.-8      	; 0x44e <Wifi_GetByte+0x4>
	}

	uint8_t tmp = WifiBuffer[Wifi_readLocation];
     456:	e0 91 e4 29 	lds	r30, 0x29E4
     45a:	f0 91 e5 29 	lds	r31, 0x29E5
     45e:	ea 5b       	subi	r30, 0xBA	; 186
     460:	f2 4d       	sbci	r31, 0xD2	; 210
     462:	e0 81       	ld	r30, Z
	Wifi_readLocation++;
     464:	80 91 e4 29 	lds	r24, 0x29E4
     468:	90 91 e5 29 	lds	r25, 0x29E5
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	80 93 e4 29 	sts	0x29E4, r24
     472:	90 93 e5 29 	sts	0x29E5, r25
	if(Wifi_readLocation >= Wifi_BufferSize){
     476:	80 91 e4 29 	lds	r24, 0x29E4
     47a:	90 91 e5 29 	lds	r25, 0x29E5
     47e:	80 50       	subi	r24, 0x00	; 0
     480:	94 40       	sbci	r25, 0x04	; 4
     482:	20 f0       	brcs	.+8      	; 0x48c <Wifi_GetByte+0x42>
	  Wifi_readLocation=0;
     484:	10 92 e4 29 	sts	0x29E4, r1
     488:	10 92 e5 29 	sts	0x29E5, r1
	}
	return tmp;
}
     48c:	8e 2f       	mov	r24, r30
     48e:	08 95       	ret

00000490 <Wifi_SendByte>:


void Wifi_SendByte(uint8_t data){
     490:	98 2f       	mov	r25, r24
	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
     492:	80 91 a1 0a 	lds	r24, 0x0AA1
     496:	85 ff       	sbrs	r24, 5
     498:	fc cf       	rjmp	.-8      	; 0x492 <Wifi_SendByte+0x2>
	Wifi_Usart.DATA = data;
     49a:	90 93 a0 0a 	sts	0x0AA0, r25
}
     49e:	08 95       	ret

000004a0 <Dpad_Init>:




void Dpad_Init(void){
	Dpad_Port.PIN2CTRL = PORT_OPC_PULLUP_gc;
     4a0:	e0 ea       	ldi	r30, 0xA0	; 160
     4a2:	f6 e0       	ldi	r31, 0x06	; 6
     4a4:	88 e1       	ldi	r24, 0x18	; 24
     4a6:	82 8b       	std	Z+18, r24	; 0x12
	Dpad_Port.PIN3CTRL = PORT_OPC_PULLUP_gc;
     4a8:	83 8b       	std	Z+19, r24	; 0x13
	Dpad_Port.PIN4CTRL = PORT_OPC_PULLUP_gc;
     4aa:	84 8b       	std	Z+20, r24	; 0x14
	Dpad_Port.PIN5CTRL = PORT_OPC_PULLUP_gc;
     4ac:	85 8b       	std	Z+21, r24	; 0x15
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
     4ae:	86 8b       	std	Z+22, r24	; 0x16
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
     4b0:	82 81       	ldd	r24, Z+2	; 0x02
     4b2:	8c 67       	ori	r24, 0x7C	; 124
     4b4:	82 83       	std	Z+2, r24	; 0x02
}
     4b6:	08 95       	ret

000004b8 <Dpad_Read>:

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
     4b8:	e0 ea       	ldi	r30, 0xA0	; 160
     4ba:	f6 e0       	ldi	r31, 0x06	; 6
     4bc:	80 85       	ldd	r24, Z+8	; 0x08
}
     4be:	8c 77       	andi	r24, 0x7C	; 124
     4c0:	08 95       	ret

000004c2 <Dpad_CheckButton>:
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
     4c2:	40 91 a8 06 	lds	r20, 0x06A8
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	21 e0       	ldi	r18, 0x01	; 1
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <Dpad_CheckButton+0x10>
     4ce:	22 0f       	add	r18, r18
     4d0:	33 1f       	adc	r19, r19
     4d2:	8a 95       	dec	r24
     4d4:	e2 f7       	brpl	.-8      	; 0x4ce <Dpad_CheckButton+0xc>
     4d6:	4c 77       	andi	r20, 0x7C	; 124
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	24 23       	and	r18, r20
     4dc:	35 23       	and	r19, r21
     4de:	12 16       	cp	r1, r18
     4e0:	13 06       	cpc	r1, r19
     4e2:	0c f0       	brlt	.+2      	; 0x4e6 <Dpad_CheckButton+0x24>
     4e4:	91 e0       	ldi	r25, 0x01	; 1
	if((Dpad_Read() & (1<<direction)) >0 ){
		return false;
	} else {
		return true;
	}
}
     4e6:	89 2f       	mov	r24, r25
     4e8:	08 95       	ret

000004ea <Leds_Init>:



void Leds_Init(void){
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
     4ea:	e0 e2       	ldi	r30, 0x20	; 32
     4ec:	f6 e0       	ldi	r31, 0x06	; 6
     4ee:	81 81       	ldd	r24, Z+1	; 0x01
     4f0:	83 6f       	ori	r24, 0xF3	; 243
     4f2:	81 83       	std	Z+1, r24	; 0x01
}
     4f4:	08 95       	ret

000004f6 <Leds_Set>:

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
     4f6:	21 e0       	ldi	r18, 0x01	; 1
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <Leds_Set+0xa>
     4fc:	22 0f       	add	r18, r18
     4fe:	33 1f       	adc	r19, r19
     500:	8a 95       	dec	r24
     502:	e2 f7       	brpl	.-8      	; 0x4fc <Leds_Set+0x6>
     504:	e0 e2       	ldi	r30, 0x20	; 32
     506:	f6 e0       	ldi	r31, 0x06	; 6
     508:	25 83       	std	Z+5, r18	; 0x05
}
     50a:	08 95       	ret

0000050c <Leds_Clear>:

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
     50c:	21 e0       	ldi	r18, 0x01	; 1
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	02 c0       	rjmp	.+4      	; 0x516 <Leds_Clear+0xa>
     512:	22 0f       	add	r18, r18
     514:	33 1f       	adc	r19, r19
     516:	8a 95       	dec	r24
     518:	e2 f7       	brpl	.-8      	; 0x512 <Leds_Clear+0x6>
     51a:	e0 e2       	ldi	r30, 0x20	; 32
     51c:	f6 e0       	ldi	r31, 0x06	; 6
     51e:	26 83       	std	Z+6, r18	; 0x06
}
     520:	08 95       	ret

00000522 <Leds_Toggle>:

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
     522:	21 e0       	ldi	r18, 0x01	; 1
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	02 c0       	rjmp	.+4      	; 0x52c <Leds_Toggle+0xa>
     528:	22 0f       	add	r18, r18
     52a:	33 1f       	adc	r19, r19
     52c:	8a 95       	dec	r24
     52e:	e2 f7       	brpl	.-8      	; 0x528 <Leds_Toggle+0x6>
     530:	e0 e2       	ldi	r30, 0x20	; 32
     532:	f6 e0       	ldi	r31, 0x06	; 6
     534:	27 83       	std	Z+7, r18	; 0x07
}
     536:	08 95       	ret

00000538 <Rs232_Init>:
uint32_t smallCount;

volatile bool rs232Recording = false;

void Rs232_Init(void){
	Rs232_Port.DIRSET = Rs232_TX_pin_bm;
     538:	e0 e6       	ldi	r30, 0x60	; 96
     53a:	f6 e0       	ldi	r31, 0x06	; 6
     53c:	88 e0       	ldi	r24, 0x08	; 8
     53e:	81 83       	std	Z+1, r24	; 0x01
	Rs232_Port.DIRCLR = Rs232_RX_pin_bm;
     540:	84 e0       	ldi	r24, 0x04	; 4
     542:	82 83       	std	Z+2, r24	; 0x02
   
	Rs232_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);
     544:	e0 ea       	ldi	r30, 0xA0	; 160
     546:	f9 e0       	ldi	r31, 0x09	; 9
     548:	83 e0       	ldi	r24, 0x03	; 3
     54a:	85 83       	std	Z+5, r24	; 0x05
	 	    				
	Rs232_Usart.BAUDCTRLA = 95 & 0xFF;
     54c:	8f e5       	ldi	r24, 0x5F	; 95
     54e:	86 83       	std	Z+6, r24	; 0x06
	Rs232_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
     550:	17 82       	std	Z+7, r1	; 0x07
	
	Rs232_Usart.CTRLB |= USART_RXEN_bm;
     552:	84 81       	ldd	r24, Z+4	; 0x04
     554:	80 61       	ori	r24, 0x10	; 16
     556:	84 83       	std	Z+4, r24	; 0x04
	Rs232_Usart.CTRLB |= USART_TXEN_bm;
     558:	84 81       	ldd	r24, Z+4	; 0x04
     55a:	88 60       	ori	r24, 0x08	; 8
     55c:	84 83       	std	Z+4, r24	; 0x04
	
	Rs232_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
     55e:	83 81       	ldd	r24, Z+3	; 0x03
     560:	80 62       	ori	r24, 0x20	; 32
     562:	83 83       	std	Z+3, r24	; 0x03
}
     564:	08 95       	ret

00000566 <Rs232_CharReadyToRead>:



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     566:	20 91 f7 29 	lds	r18, 0x29F7
     56a:	30 91 f8 29 	lds	r19, 0x29F8
     56e:	80 91 f5 29 	lds	r24, 0x29F5
     572:	90 91 f6 29 	lds	r25, 0x29F6
     576:	40 e0       	ldi	r20, 0x00	; 0
     578:	28 17       	cp	r18, r24
     57a:	39 07       	cpc	r19, r25
     57c:	09 f0       	breq	.+2      	; 0x580 <Rs232_CharReadyToRead+0x1a>
     57e:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     580:	84 2f       	mov	r24, r20
     582:	08 95       	ret

00000584 <Rs232_GetByte>:

uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
     584:	88 23       	and	r24, r24
     586:	59 f0       	breq	.+22     	; 0x59e <Rs232_GetByte+0x1a>
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     588:	20 91 f7 29 	lds	r18, 0x29F7
     58c:	30 91 f8 29 	lds	r19, 0x29F8
     590:	80 91 f5 29 	lds	r24, 0x29F5
     594:	90 91 f6 29 	lds	r25, 0x29F6
     598:	28 17       	cp	r18, r24
     59a:	39 07       	cpc	r19, r25
     59c:	a9 f3       	breq	.-22     	; 0x588 <Rs232_GetByte+0x4>
uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
		while(!Rs232_CharReadyToRead());
	}

	uint8_t tmp = Rs232Buffer[Rs232_readLocation];
     59e:	e0 91 f5 29 	lds	r30, 0x29F5
     5a2:	f0 91 f6 29 	lds	r31, 0x29F6
     5a6:	e3 59       	subi	r30, 0x93	; 147
     5a8:	fb 4b       	sbci	r31, 0xBB	; 187
     5aa:	e0 81       	ld	r30, Z
	Rs232_readLocation++;
     5ac:	80 91 f5 29 	lds	r24, 0x29F5
     5b0:	90 91 f6 29 	lds	r25, 0x29F6
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	80 93 f5 29 	sts	0x29F5, r24
     5ba:	90 93 f6 29 	sts	0x29F6, r25
	if(Rs232_readLocation >= Rs232_BufferSize){
     5be:	80 91 f5 29 	lds	r24, 0x29F5
     5c2:	90 91 f6 29 	lds	r25, 0x29F6
     5c6:	80 50       	subi	r24, 0x00	; 0
     5c8:	94 40       	sbci	r25, 0x04	; 4
     5ca:	20 f0       	brcs	.+8      	; 0x5d4 <Rs232_GetByte+0x50>
	  Rs232_readLocation=0;
     5cc:	10 92 f5 29 	sts	0x29F5, r1
     5d0:	10 92 f6 29 	sts	0x29F6, r1
	}
	return tmp;
}
     5d4:	8e 2f       	mov	r24, r30
     5d6:	08 95       	ret

000005d8 <Rs232_ClearBuffer>:

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
     5d8:	80 91 f7 29 	lds	r24, 0x29F7
     5dc:	90 91 f8 29 	lds	r25, 0x29F8
     5e0:	80 93 f5 29 	sts	0x29F5, r24
     5e4:	90 93 f6 29 	sts	0x29F6, r25
}
     5e8:	08 95       	ret

000005ea <Rs232_SendByte>:

void Rs232_SendByte(uint8_t data){
     5ea:	98 2f       	mov	r25, r24
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
     5ec:	80 91 a1 09 	lds	r24, 0x09A1
     5f0:	85 ff       	sbrs	r24, 5
     5f2:	fc cf       	rjmp	.-8      	; 0x5ec <Rs232_SendByte+0x2>
	Rs232_Usart.DATA = data;	
     5f4:	90 93 a0 09 	sts	0x09A0, r25
}
     5f8:	08 95       	ret

000005fa <wait_ready>:
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     5fa:	82 e3       	ldi	r24, 0x32	; 50
     5fc:	80 93 1b 2a 	sts	0x2A1B, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     600:	8f ef       	ldi	r24, 0xFF	; 255
     602:	e0 ec       	ldi	r30, 0xC0	; 192
     604:	f9 e0       	ldi	r31, 0x09	; 9
     606:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     608:	80 91 c2 09 	lds	r24, 0x09C2
     60c:	87 ff       	sbrs	r24, 7
     60e:	fc cf       	rjmp	.-8      	; 0x608 <wait_ready+0xe>
	return SD_SPI.DATA;
     610:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     614:	e0 ec       	ldi	r30, 0xC0	; 192
     616:	f9 e0       	ldi	r31, 0x09	; 9
     618:	2f ef       	ldi	r18, 0xFF	; 255
     61a:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     61c:	80 91 c2 09 	lds	r24, 0x09C2
     620:	87 ff       	sbrs	r24, 7
     622:	fc cf       	rjmp	.-8      	; 0x61c <wait_ready+0x22>
	return SD_SPI.DATA;
     624:	90 91 c3 09 	lds	r25, 0x09C3

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
     628:	9f 3f       	cpi	r25, 0xFF	; 255
     62a:	21 f0       	breq	.+8      	; 0x634 <wait_ready+0x3a>
     62c:	80 91 1b 2a 	lds	r24, 0x2A1B
     630:	88 23       	and	r24, r24
     632:	99 f7       	brne	.-26     	; 0x61a <wait_ready+0x20>

	return res;
}
     634:	89 2f       	mov	r24, r25
     636:	08 95       	ret

00000638 <select>:
/* Select the card and wait ready                                        */
/*-----------------------------------------------------------------------*/

static
BOOL select (void)	/* TRUE:Successful, FALSE:Timeout */
{
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
	CS_LOW();
     63e:	c0 e6       	ldi	r28, 0x60	; 96
     640:	d6 e0       	ldi	r29, 0x06	; 6
     642:	10 e1       	ldi	r17, 0x10	; 16
     644:	1e 83       	std	Y+6, r17	; 0x06
	if (wait_ready() != 0xFF) {
     646:	0e 94 fd 02 	call	0x5fa	; 0x5fa <wait_ready>
     64a:	8f 3f       	cpi	r24, 0xFF	; 255
     64c:	11 f4       	brne	.+4      	; 0x652 <select+0x1a>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	0c c0       	rjmp	.+24     	; 0x66a <select+0x32>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     652:	1d 83       	std	Y+5, r17	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	e0 ec       	ldi	r30, 0xC0	; 192
     658:	f9 e0       	ldi	r31, 0x09	; 9
     65a:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     65c:	80 91 c2 09 	lds	r24, 0x09C2
     660:	87 ff       	sbrs	r24, 7
     662:	fc cf       	rjmp	.-8      	; 0x65c <select+0x24>
	return SD_SPI.DATA;
     664:	80 91 c3 09 	lds	r24, 0x09C3
     668:	80 e0       	ldi	r24, 0x00	; 0
	if (wait_ready() != 0xFF) {
		deselect();
		return FALSE;
	}
	return TRUE;
}
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	1f 91       	pop	r17
     670:	08 95       	ret

00000672 <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     672:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
     674:	84 e1       	ldi	r24, 0x14	; 20
     676:	80 93 1a 2a 	sts	0x2A1A, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     67a:	a0 ec       	ldi	r26, 0xC0	; 192
     67c:	b9 e0       	ldi	r27, 0x09	; 9
     67e:	9f ef       	ldi	r25, 0xFF	; 255
     680:	13 96       	adiw	r26, 0x03	; 3
     682:	9c 93       	st	X, r25
     684:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     686:	80 91 c2 09 	lds	r24, 0x09C2
     68a:	87 ff       	sbrs	r24, 7
     68c:	fc cf       	rjmp	.-8      	; 0x686 <rcvr_datablock+0x14>
	return SD_SPI.DATA;
     68e:	80 91 c3 09 	lds	r24, 0x09C3


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
     692:	8f 3f       	cpi	r24, 0xFF	; 255
     694:	29 f4       	brne	.+10     	; 0x6a0 <rcvr_datablock+0x2e>
     696:	80 91 1a 2a 	lds	r24, 0x2A1A
     69a:	88 23       	and	r24, r24
     69c:	89 f7       	brne	.-30     	; 0x680 <rcvr_datablock+0xe>
     69e:	49 c0       	rjmp	.+146    	; 0x732 <rcvr_datablock+0xc0>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
     6a0:	8e 3f       	cpi	r24, 0xFE	; 254
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <rcvr_datablock+0x34>
     6a4:	46 c0       	rjmp	.+140    	; 0x732 <rcvr_datablock+0xc0>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
     6a6:	a0 ec       	ldi	r26, 0xC0	; 192
     6a8:	b9 e0       	ldi	r27, 0x09	; 9
     6aa:	9f ef       	ldi	r25, 0xFF	; 255
     6ac:	13 96       	adiw	r26, 0x03	; 3
     6ae:	9c 93       	st	X, r25
     6b0:	13 97       	sbiw	r26, 0x03	; 3
     6b2:	80 91 c2 09 	lds	r24, 0x09C2
     6b6:	87 ff       	sbrs	r24, 7
     6b8:	fc cf       	rjmp	.-8      	; 0x6b2 <rcvr_datablock+0x40>
     6ba:	80 91 c3 09 	lds	r24, 0x09C3
     6be:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
     6c0:	13 96       	adiw	r26, 0x03	; 3
     6c2:	9c 93       	st	X, r25
     6c4:	13 97       	sbiw	r26, 0x03	; 3
     6c6:	80 91 c2 09 	lds	r24, 0x09C2
     6ca:	87 ff       	sbrs	r24, 7
     6cc:	fc cf       	rjmp	.-8      	; 0x6c6 <rcvr_datablock+0x54>
     6ce:	80 91 c3 09 	lds	r24, 0x09C3
     6d2:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
     6d4:	13 96       	adiw	r26, 0x03	; 3
     6d6:	9c 93       	st	X, r25
     6d8:	13 97       	sbiw	r26, 0x03	; 3
     6da:	80 91 c2 09 	lds	r24, 0x09C2
     6de:	87 ff       	sbrs	r24, 7
     6e0:	fc cf       	rjmp	.-8      	; 0x6da <rcvr_datablock+0x68>
     6e2:	80 91 c3 09 	lds	r24, 0x09C3
     6e6:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
     6e8:	13 96       	adiw	r26, 0x03	; 3
     6ea:	9c 93       	st	X, r25
     6ec:	13 97       	sbiw	r26, 0x03	; 3
     6ee:	80 91 c2 09 	lds	r24, 0x09C2
     6f2:	87 ff       	sbrs	r24, 7
     6f4:	fc cf       	rjmp	.-8      	; 0x6ee <rcvr_datablock+0x7c>
     6f6:	80 91 c3 09 	lds	r24, 0x09C3
     6fa:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
     6fc:	64 50       	subi	r22, 0x04	; 4
     6fe:	70 40       	sbci	r23, 0x00	; 0
     700:	11 f0       	breq	.+4      	; 0x706 <rcvr_datablock+0x94>
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     702:	34 96       	adiw	r30, 0x04	; 4
     704:	d3 cf       	rjmp	.-90     	; 0x6ac <rcvr_datablock+0x3a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     706:	8f ef       	ldi	r24, 0xFF	; 255
     708:	e0 ec       	ldi	r30, 0xC0	; 192
     70a:	f9 e0       	ldi	r31, 0x09	; 9
     70c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     70e:	80 91 c2 09 	lds	r24, 0x09C2
     712:	87 ff       	sbrs	r24, 7
     714:	fc cf       	rjmp	.-8      	; 0x70e <rcvr_datablock+0x9c>
	return SD_SPI.DATA;
     716:	80 91 c3 09 	lds	r24, 0x09C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     71a:	8f ef       	ldi	r24, 0xFF	; 255
     71c:	e0 ec       	ldi	r30, 0xC0	; 192
     71e:	f9 e0       	ldi	r31, 0x09	; 9
     720:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     722:	80 91 c2 09 	lds	r24, 0x09C2
     726:	87 ff       	sbrs	r24, 7
     728:	fc cf       	rjmp	.-8      	; 0x722 <rcvr_datablock+0xb0>
	return SD_SPI.DATA;
     72a:	80 91 c3 09 	lds	r24, 0x09C3
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	08 95       	ret
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
     732:	80 e0       	ldi	r24, 0x00	; 0
}
     734:	08 95       	ret

00000736 <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	ec 01       	movw	r28, r24
     73e:	16 2f       	mov	r17, r22
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
     740:	0e 94 fd 02 	call	0x5fa	; 0x5fa <wait_ready>
     744:	8f 3f       	cpi	r24, 0xFF	; 255
     746:	11 f0       	breq	.+4      	; 0x74c <xmit_datablock+0x16>
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	3f c0       	rjmp	.+126    	; 0x7ca <xmit_datablock+0x94>

	xmit_spi(token);					/* Xmit data token */
     74c:	e0 ec       	ldi	r30, 0xC0	; 192
     74e:	f9 e0       	ldi	r31, 0x09	; 9
     750:	13 83       	std	Z+3, r17	; 0x03
     752:	80 91 c2 09 	lds	r24, 0x09C2
     756:	87 ff       	sbrs	r24, 7
     758:	fc cf       	rjmp	.-8      	; 0x752 <xmit_datablock+0x1c>
	if (token != 0xFD) {	/* Is data token */
     75a:	1d 3f       	cpi	r17, 0xFD	; 253
     75c:	11 f4       	brne	.+4      	; 0x762 <xmit_datablock+0x2c>
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	34 c0       	rjmp	.+104    	; 0x7ca <xmit_datablock+0x94>
     762:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
     764:	e0 ec       	ldi	r30, 0xC0	; 192
     766:	f9 e0       	ldi	r31, 0x09	; 9
     768:	88 81       	ld	r24, Y
     76a:	83 83       	std	Z+3, r24	; 0x03
     76c:	80 91 c2 09 	lds	r24, 0x09C2
     770:	87 ff       	sbrs	r24, 7
     772:	fc cf       	rjmp	.-8      	; 0x76c <xmit_datablock+0x36>
			xmit_spi(*buff++);
     774:	89 81       	ldd	r24, Y+1	; 0x01
     776:	83 83       	std	Z+3, r24	; 0x03
     778:	80 91 c2 09 	lds	r24, 0x09C2
     77c:	87 ff       	sbrs	r24, 7
     77e:	fc cf       	rjmp	.-8      	; 0x778 <xmit_datablock+0x42>
		} while (--wc);
     780:	91 50       	subi	r25, 0x01	; 1
     782:	11 f0       	breq	.+4      	; 0x788 <xmit_datablock+0x52>
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     784:	22 96       	adiw	r28, 0x02	; 2
     786:	f0 cf       	rjmp	.-32     	; 0x768 <xmit_datablock+0x32>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
     788:	8f ef       	ldi	r24, 0xFF	; 255
     78a:	e0 ec       	ldi	r30, 0xC0	; 192
     78c:	f9 e0       	ldi	r31, 0x09	; 9
     78e:	83 83       	std	Z+3, r24	; 0x03
     790:	80 91 c2 09 	lds	r24, 0x09C2
     794:	87 ff       	sbrs	r24, 7
     796:	fc cf       	rjmp	.-8      	; 0x790 <xmit_datablock+0x5a>
		xmit_spi(0xFF);
     798:	8f ef       	ldi	r24, 0xFF	; 255
     79a:	e0 ec       	ldi	r30, 0xC0	; 192
     79c:	f9 e0       	ldi	r31, 0x09	; 9
     79e:	83 83       	std	Z+3, r24	; 0x03
     7a0:	80 91 c2 09 	lds	r24, 0x09C2
     7a4:	87 ff       	sbrs	r24, 7
     7a6:	fc cf       	rjmp	.-8      	; 0x7a0 <xmit_datablock+0x6a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	e0 ec       	ldi	r30, 0xC0	; 192
     7ac:	f9 e0       	ldi	r31, 0x09	; 9
     7ae:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     7b0:	80 91 c2 09 	lds	r24, 0x09C2
     7b4:	87 ff       	sbrs	r24, 7
     7b6:	fc cf       	rjmp	.-8      	; 0x7b0 <xmit_datablock+0x7a>
	return SD_SPI.DATA;
     7b8:	80 91 c3 09 	lds	r24, 0x09C3
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	8f 71       	andi	r24, 0x1F	; 31
     7c0:	85 30       	cpi	r24, 0x05	; 5
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <xmit_datablock+0x90>
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	98 27       	eor	r25, r24
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
}
     7ca:	89 2f       	mov	r24, r25
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	08 95       	ret

000007d4 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     7d4:	df 92       	push	r13
     7d6:	ef 92       	push	r14
     7d8:	ff 92       	push	r15
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	d8 2e       	mov	r13, r24
     7e0:	7a 01       	movw	r14, r20
     7e2:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     7e4:	87 ff       	sbrs	r24, 7
     7e6:	0c c0       	rjmp	.+24     	; 0x800 <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     7e8:	87 e7       	ldi	r24, 0x77	; 119
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
		if (res > 1) return res;
     7f6:	82 30       	cpi	r24, 0x02	; 2
     7f8:	08 f0       	brcs	.+2      	; 0x7fc <send_cmd+0x28>
     7fa:	72 c0       	rjmp	.+228    	; 0x8e0 <send_cmd+0x10c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     7fc:	8f e7       	ldi	r24, 0x7F	; 127
     7fe:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     800:	80 e1       	ldi	r24, 0x10	; 16
     802:	e0 e6       	ldi	r30, 0x60	; 96
     804:	f6 e0       	ldi	r31, 0x06	; 6
     806:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     808:	8f ef       	ldi	r24, 0xFF	; 255
     80a:	e0 ec       	ldi	r30, 0xC0	; 192
     80c:	f9 e0       	ldi	r31, 0x09	; 9
     80e:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     810:	80 91 c2 09 	lds	r24, 0x09C2
     814:	87 ff       	sbrs	r24, 7
     816:	fc cf       	rjmp	.-8      	; 0x810 <send_cmd+0x3c>
	return SD_SPI.DATA;
     818:	80 91 c3 09 	lds	r24, 0x09C3
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
     81c:	0e 94 1c 03 	call	0x638	; 0x638 <select>
     820:	88 23       	and	r24, r24
     822:	11 f4       	brne	.+4      	; 0x828 <send_cmd+0x54>
     824:	8f ef       	ldi	r24, 0xFF	; 255
     826:	5c c0       	rjmp	.+184    	; 0x8e0 <send_cmd+0x10c>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
     828:	e0 ec       	ldi	r30, 0xC0	; 192
     82a:	f9 e0       	ldi	r31, 0x09	; 9
     82c:	d3 82       	std	Z+3, r13	; 0x03
     82e:	80 91 c2 09 	lds	r24, 0x09C2
     832:	87 ff       	sbrs	r24, 7
     834:	fc cf       	rjmp	.-8      	; 0x82e <send_cmd+0x5a>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     836:	81 2f       	mov	r24, r17
     838:	99 27       	eor	r25, r25
     83a:	aa 27       	eor	r26, r26
     83c:	bb 27       	eor	r27, r27
     83e:	e0 ec       	ldi	r30, 0xC0	; 192
     840:	f9 e0       	ldi	r31, 0x09	; 9
     842:	83 83       	std	Z+3, r24	; 0x03
     844:	80 91 c2 09 	lds	r24, 0x09C2
     848:	87 ff       	sbrs	r24, 7
     84a:	fc cf       	rjmp	.-8      	; 0x844 <send_cmd+0x70>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     84c:	c8 01       	movw	r24, r16
     84e:	aa 27       	eor	r26, r26
     850:	bb 27       	eor	r27, r27
     852:	e0 ec       	ldi	r30, 0xC0	; 192
     854:	f9 e0       	ldi	r31, 0x09	; 9
     856:	83 83       	std	Z+3, r24	; 0x03
     858:	80 91 c2 09 	lds	r24, 0x09C2
     85c:	87 ff       	sbrs	r24, 7
     85e:	fc cf       	rjmp	.-8      	; 0x858 <send_cmd+0x84>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     860:	bb 27       	eor	r27, r27
     862:	a1 2f       	mov	r26, r17
     864:	90 2f       	mov	r25, r16
     866:	8f 2d       	mov	r24, r15
     868:	e0 ec       	ldi	r30, 0xC0	; 192
     86a:	f9 e0       	ldi	r31, 0x09	; 9
     86c:	83 83       	std	Z+3, r24	; 0x03
     86e:	80 91 c2 09 	lds	r24, 0x09C2
     872:	87 ff       	sbrs	r24, 7
     874:	fc cf       	rjmp	.-8      	; 0x86e <send_cmd+0x9a>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     876:	e0 ec       	ldi	r30, 0xC0	; 192
     878:	f9 e0       	ldi	r31, 0x09	; 9
     87a:	e3 82       	std	Z+3, r14	; 0x03
     87c:	80 91 c2 09 	lds	r24, 0x09C2
     880:	87 ff       	sbrs	r24, 7
     882:	fc cf       	rjmp	.-8      	; 0x87c <send_cmd+0xa8>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     884:	80 e4       	ldi	r24, 0x40	; 64
     886:	d8 16       	cp	r13, r24
     888:	11 f4       	brne	.+4      	; 0x88e <send_cmd+0xba>
     88a:	85 e9       	ldi	r24, 0x95	; 149
     88c:	06 c0       	rjmp	.+12     	; 0x89a <send_cmd+0xc6>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     88e:	88 e4       	ldi	r24, 0x48	; 72
     890:	d8 16       	cp	r13, r24
     892:	11 f4       	brne	.+4      	; 0x898 <send_cmd+0xc4>
     894:	87 e8       	ldi	r24, 0x87	; 135
     896:	01 c0       	rjmp	.+2      	; 0x89a <send_cmd+0xc6>
     898:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
     89a:	e0 ec       	ldi	r30, 0xC0	; 192
     89c:	f9 e0       	ldi	r31, 0x09	; 9
     89e:	83 83       	std	Z+3, r24	; 0x03
     8a0:	80 91 c2 09 	lds	r24, 0x09C2
     8a4:	87 ff       	sbrs	r24, 7
     8a6:	fc cf       	rjmp	.-8      	; 0x8a0 <send_cmd+0xcc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
     8a8:	8c e4       	ldi	r24, 0x4C	; 76
     8aa:	d8 16       	cp	r13, r24
     8ac:	51 f4       	brne	.+20     	; 0x8c2 <send_cmd+0xee>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     8ae:	8f ef       	ldi	r24, 0xFF	; 255
     8b0:	e0 ec       	ldi	r30, 0xC0	; 192
     8b2:	f9 e0       	ldi	r31, 0x09	; 9
     8b4:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     8b6:	80 91 c2 09 	lds	r24, 0x09C2
     8ba:	87 ff       	sbrs	r24, 7
     8bc:	fc cf       	rjmp	.-8      	; 0x8b6 <send_cmd+0xe2>
	return SD_SPI.DATA;
     8be:	80 91 c3 09 	lds	r24, 0x09C3
     8c2:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     8c4:	e0 ec       	ldi	r30, 0xC0	; 192
     8c6:	f9 e0       	ldi	r31, 0x09	; 9
     8c8:	2f ef       	ldi	r18, 0xFF	; 255
     8ca:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     8cc:	80 91 c2 09 	lds	r24, 0x09C2
     8d0:	87 ff       	sbrs	r24, 7
     8d2:	fc cf       	rjmp	.-8      	; 0x8cc <send_cmd+0xf8>
	return SD_SPI.DATA;
     8d4:	80 91 c3 09 	lds	r24, 0x09C3
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
     8d8:	87 ff       	sbrs	r24, 7
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <send_cmd+0x10c>
     8dc:	91 50       	subi	r25, 0x01	; 1
     8de:	a9 f7       	brne	.-22     	; 0x8ca <send_cmd+0xf6>
	return res;			/* Return with the response value */
}
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	df 90       	pop	r13
     8ea:	08 95       	ret

000008ec <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	df 93       	push	r29
     8f6:	cf 93       	push	r28
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	25 97       	sbiw	r28, 0x05	; 5
     8fe:	cd bf       	out	0x3d, r28	; 61
     900:	de bf       	out	0x3e, r29	; 62
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
     902:	88 23       	and	r24, r24
     904:	11 f0       	breq	.+4      	; 0x90a <disk_initialize+0x1e>
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	ed c0       	rjmp	.+474    	; 0xae4 <disk_initialize+0x1f8>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     90a:	80 91 b2 29 	lds	r24, 0x29B2
     90e:	81 fd       	sbrc	r24, 1
     910:	e7 c0       	rjmp	.+462    	; 0xae0 <disk_initialize+0x1f4>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     912:	e0 e6       	ldi	r30, 0x60	; 96
     914:	f6 e0       	ldi	r31, 0x06	; 6
     916:	80 eb       	ldi	r24, 0xB0	; 176
     918:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     91a:	88 e3       	ldi	r24, 0x38	; 56
     91c:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     91e:	14 82       	std	Z+4, r1	; 0x04
     920:	8c e2       	ldi	r24, 0x2C	; 44
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	20 e7       	ldi	r18, 0x70	; 112
     926:	31 e0       	ldi	r19, 0x01	; 1
     928:	f9 01       	movw	r30, r18
     92a:	31 97       	sbiw	r30, 0x01	; 1
     92c:	f1 f7       	brne	.-4      	; 0x92a <disk_initialize+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     92e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     930:	d9 f7       	brne	.-10     	; 0x928 <disk_initialize+0x3c>


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
     932:	8f b7       	in	r24, 0x3f	; 63
     934:	89 83       	std	Y+1, r24	; 0x01
    cli();
     936:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     938:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     93a:	24 e0       	ldi	r18, 0x04	; 4
     93c:	81 e4       	ldi	r24, 0x41	; 65
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	fc 01       	movw	r30, r24
     942:	08 ed       	ldi	r16, 0xD8	; 216
     944:	04 bf       	out	0x34, r16	; 52
     946:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	8f bf       	out	0x3f, r24	; 63
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	
	power_on();							/* Force socket power on */
	CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
     94c:	83 e5       	ldi	r24, 0x53	; 83
     94e:	80 93 c0 09 	sts	0x09C0, r24
     952:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     954:	e0 ec       	ldi	r30, 0xC0	; 192
     956:	f9 e0       	ldi	r31, 0x09	; 9
     958:	2f ef       	ldi	r18, 0xFF	; 255
     95a:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     95c:	80 91 c2 09 	lds	r24, 0x09C2
     960:	87 ff       	sbrs	r24, 7
     962:	fc cf       	rjmp	.-8      	; 0x95c <disk_initialize+0x70>
	return SD_SPI.DATA;
     964:	80 91 c3 09 	lds	r24, 0x09C3

	
	power_on();							/* Force socket power on */
	CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
     968:	91 50       	subi	r25, 0x01	; 1
     96a:	b9 f7       	brne	.-18     	; 0x95a <disk_initialize+0x6e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     96c:	80 e4       	ldi	r24, 0x40	; 64
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	09 f0       	breq	.+2      	; 0x980 <disk_initialize+0x94>
     97e:	88 c0       	rjmp	.+272    	; 0xa90 <disk_initialize+0x1a4>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     980:	84 e6       	ldi	r24, 0x64	; 100
     982:	80 93 1a 2a 	sts	0x2A1A, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
     986:	88 e4       	ldi	r24, 0x48	; 72
     988:	4a ea       	ldi	r20, 0xAA	; 170
     98a:	51 e0       	ldi	r21, 0x01	; 1
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	09 f0       	breq	.+2      	; 0x99a <disk_initialize+0xae>
     998:	54 c0       	rjmp	.+168    	; 0xa42 <disk_initialize+0x156>
     99a:	32 e0       	ldi	r19, 0x02	; 2
     99c:	e3 2e       	mov	r14, r19
     99e:	f1 2c       	mov	r15, r1
     9a0:	ec 0e       	add	r14, r28
     9a2:	fd 1e       	adc	r15, r29
     9a4:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     9a6:	e0 ec       	ldi	r30, 0xC0	; 192
     9a8:	f9 e0       	ldi	r31, 0x09	; 9
     9aa:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     9ac:	9e 01       	movw	r18, r28
     9ae:	2a 5f       	subi	r18, 0xFA	; 250
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     9b2:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     9b4:	80 91 c2 09 	lds	r24, 0x09C2
     9b8:	87 ff       	sbrs	r24, 7
     9ba:	fc cf       	rjmp	.-8      	; 0x9b4 <disk_initialize+0xc8>
	return SD_SPI.DATA;
     9bc:	80 91 c3 09 	lds	r24, 0x09C3

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     9c0:	d8 01       	movw	r26, r16
     9c2:	8d 93       	st	X+, r24
     9c4:	8d 01       	movw	r16, r26
     9c6:	a2 17       	cp	r26, r18
     9c8:	b3 07       	cpc	r27, r19
     9ca:	99 f7       	brne	.-26     	; 0x9b2 <disk_initialize+0xc6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     9cc:	8c 81       	ldd	r24, Y+4	; 0x04
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <disk_initialize+0xe8>
     9d2:	5e c0       	rjmp	.+188    	; 0xa90 <disk_initialize+0x1a4>
     9d4:	8d 81       	ldd	r24, Y+5	; 0x05
     9d6:	8a 3a       	cpi	r24, 0xAA	; 170
     9d8:	09 f0       	breq	.+2      	; 0x9dc <disk_initialize+0xf0>
     9da:	5a c0       	rjmp	.+180    	; 0xa90 <disk_initialize+0x1a4>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     9dc:	80 91 1a 2a 	lds	r24, 0x2A1A
     9e0:	88 23       	and	r24, r24
     9e2:	49 f0       	breq	.+18     	; 0x9f6 <disk_initialize+0x10a>
     9e4:	89 ee       	ldi	r24, 0xE9	; 233
     9e6:	40 e0       	ldi	r20, 0x00	; 0
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	70 e4       	ldi	r23, 0x40	; 64
     9ee:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
     9f2:	88 23       	and	r24, r24
     9f4:	99 f7       	brne	.-26     	; 0x9dc <disk_initialize+0xf0>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     9f6:	80 91 1a 2a 	lds	r24, 0x2A1A
     9fa:	88 23       	and	r24, r24
     9fc:	09 f4       	brne	.+2      	; 0xa00 <disk_initialize+0x114>
     9fe:	48 c0       	rjmp	.+144    	; 0xa90 <disk_initialize+0x1a4>
     a00:	8a e7       	ldi	r24, 0x7A	; 122
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
     a0e:	88 23       	and	r24, r24
     a10:	09 f0       	breq	.+2      	; 0xa14 <disk_initialize+0x128>
     a12:	3e c0       	rjmp	.+124    	; 0xa90 <disk_initialize+0x1a4>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a14:	e0 ec       	ldi	r30, 0xC0	; 192
     a16:	f9 e0       	ldi	r31, 0x09	; 9
     a18:	9f ef       	ldi	r25, 0xFF	; 255
     a1a:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     a1c:	80 91 c2 09 	lds	r24, 0x09C2
     a20:	87 ff       	sbrs	r24, 7
     a22:	fc cf       	rjmp	.-8      	; 0xa1c <disk_initialize+0x130>
	return SD_SPI.DATA;
     a24:	80 91 c3 09 	lds	r24, 0x09C3
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
     a28:	d7 01       	movw	r26, r14
     a2a:	8d 93       	st	X+, r24
     a2c:	7d 01       	movw	r14, r26
     a2e:	a0 17       	cp	r26, r16
     a30:	b1 07       	cpc	r27, r17
     a32:	99 f7       	brne	.-26     	; 0xa1a <disk_initialize+0x12e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     a34:	8a 81       	ldd	r24, Y+2	; 0x02
     a36:	86 fd       	sbrc	r24, 6
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <disk_initialize+0x152>
     a3a:	14 e0       	ldi	r17, 0x04	; 4
     a3c:	2a c0       	rjmp	.+84     	; 0xa92 <disk_initialize+0x1a6>
     a3e:	1c e0       	ldi	r17, 0x0C	; 12
     a40:	28 c0       	rjmp	.+80     	; 0xa92 <disk_initialize+0x1a6>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     a42:	89 ee       	ldi	r24, 0xE9	; 233
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
     a50:	82 30       	cpi	r24, 0x02	; 2
     a52:	18 f0       	brcs	.+6      	; 0xa5a <disk_initialize+0x16e>
     a54:	01 e4       	ldi	r16, 0x41	; 65
     a56:	11 e0       	ldi	r17, 0x01	; 1
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <disk_initialize+0x172>
     a5a:	09 ee       	ldi	r16, 0xE9	; 233
     a5c:	12 e0       	ldi	r17, 0x02	; 2
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     a5e:	80 91 1a 2a 	lds	r24, 0x2A1A
     a62:	88 23       	and	r24, r24
     a64:	49 f0       	breq	.+18     	; 0xa78 <disk_initialize+0x18c>
     a66:	80 2f       	mov	r24, r16
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
     a74:	88 23       	and	r24, r24
     a76:	99 f7       	brne	.-26     	; 0xa5e <disk_initialize+0x172>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     a78:	80 91 1a 2a 	lds	r24, 0x2A1A
     a7c:	88 23       	and	r24, r24
     a7e:	41 f0       	breq	.+16     	; 0xa90 <disk_initialize+0x1a4>
     a80:	80 e5       	ldi	r24, 0x50	; 80
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	52 e0       	ldi	r21, 0x02	; 2
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
     a8e:	81 11       	cpse	r24, r1
     a90:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
     a92:	10 93 1c 2a 	sts	0x2A1C, r17
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     a96:	80 e1       	ldi	r24, 0x10	; 16
     a98:	e0 e6       	ldi	r30, 0x60	; 96
     a9a:	f6 e0       	ldi	r31, 0x06	; 6
     a9c:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a9e:	8f ef       	ldi	r24, 0xFF	; 255
     aa0:	e0 ec       	ldi	r30, 0xC0	; 192
     aa2:	f9 e0       	ldi	r31, 0x09	; 9
     aa4:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     aa6:	80 91 c2 09 	lds	r24, 0x09C2
     aaa:	87 ff       	sbrs	r24, 7
     aac:	fc cf       	rjmp	.-8      	; 0xaa6 <disk_initialize+0x1ba>
	return SD_SPI.DATA;
     aae:	80 91 c3 09 	lds	r24, 0x09C3
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
     ab2:	11 23       	and	r17, r17
     ab4:	41 f0       	breq	.+16     	; 0xac6 <disk_initialize+0x1da>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     ab6:	80 91 b2 29 	lds	r24, 0x29B2
     aba:	8e 7f       	andi	r24, 0xFE	; 254
     abc:	80 93 b2 29 	sts	0x29B2, r24
		FCLK_FAST();
     ac0:	80 ed       	ldi	r24, 0xD0	; 208
     ac2:	80 93 c0 09 	sts	0x09C0, r24


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
     ac6:	8f b7       	in	r24, 0x3f	; 63
     ac8:	89 83       	std	Y+1, r24	; 0x01
    cli();
     aca:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     acc:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	81 e4       	ldi	r24, 0x41	; 65
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	fc 01       	movw	r30, r24
     ad6:	08 ed       	ldi	r16, 0xD8	; 216
     ad8:	04 bf       	out	0x34, r16	; 52
     ada:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	8f bf       	out	0x3f, r24	; 63
	} else {			/* Initialization failed */
		power_off();
	}

	CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc)); // 32MHz
	return Stat;
     ae0:	80 91 b2 29 	lds	r24, 0x29B2
}
     ae4:	25 96       	adiw	r28, 0x05	; 5
     ae6:	cd bf       	out	0x3d, r28	; 61
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	cf 91       	pop	r28
     aec:	df 91       	pop	r29
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	08 95       	ret

00000af8 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     af8:	88 23       	and	r24, r24
     afa:	11 f0       	breq	.+4      	; 0xb00 <disk_status+0x8>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	08 95       	ret
	return Stat;
     b00:	80 91 b2 29 	lds	r24, 0x29B2
}
     b04:	08 95       	ret

00000b06 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     b06:	0f 93       	push	r16
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     b0e:	88 23       	and	r24, r24
     b10:	09 f0       	breq	.+2      	; 0xb14 <disk_read+0xe>
     b12:	53 c0       	rjmp	.+166    	; 0xbba <disk_read+0xb4>
     b14:	00 23       	and	r16, r16
     b16:	09 f4       	brne	.+2      	; 0xb1a <disk_read+0x14>
     b18:	50 c0       	rjmp	.+160    	; 0xbba <disk_read+0xb4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     b1a:	80 91 b2 29 	lds	r24, 0x29B2
     b1e:	80 ff       	sbrs	r24, 0
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <disk_read+0x20>
     b22:	03 e0       	ldi	r16, 0x03	; 3
     b24:	4b c0       	rjmp	.+150    	; 0xbbc <disk_read+0xb6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     b26:	80 91 1c 2a 	lds	r24, 0x2A1C
     b2a:	83 fd       	sbrc	r24, 3
     b2c:	07 c0       	rjmp	.+14     	; 0xb3c <disk_read+0x36>
     b2e:	69 e0       	ldi	r22, 0x09	; 9
     b30:	22 0f       	add	r18, r18
     b32:	33 1f       	adc	r19, r19
     b34:	44 1f       	adc	r20, r20
     b36:	55 1f       	adc	r21, r21
     b38:	6a 95       	dec	r22
     b3a:	d1 f7       	brne	.-12     	; 0xb30 <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
     b3c:	01 30       	cpi	r16, 0x01	; 1
     b3e:	89 f4       	brne	.+34     	; 0xb62 <disk_read+0x5c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     b40:	81 e5       	ldi	r24, 0x51	; 81
     b42:	ba 01       	movw	r22, r20
     b44:	a9 01       	movw	r20, r18
     b46:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
     b4a:	88 23       	and	r24, r24
     b4c:	21 f5       	brne	.+72     	; 0xb96 <disk_read+0x90>
     b4e:	ce 01       	movw	r24, r28
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	72 e0       	ldi	r23, 0x02	; 2
     b54:	0e 94 39 03 	call	0x672	; 0x672 <rcvr_datablock>
     b58:	00 e0       	ldi	r16, 0x00	; 0
     b5a:	88 23       	and	r24, r24
     b5c:	e1 f4       	brne	.+56     	; 0xb96 <disk_read+0x90>
     b5e:	01 e0       	ldi	r16, 0x01	; 1
     b60:	1a c0       	rjmp	.+52     	; 0xb96 <disk_read+0x90>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     b62:	82 e5       	ldi	r24, 0x52	; 82
     b64:	ba 01       	movw	r22, r20
     b66:	a9 01       	movw	r20, r18
     b68:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
     b6c:	88 23       	and	r24, r24
     b6e:	99 f4       	brne	.+38     	; 0xb96 <disk_read+0x90>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     b70:	ce 01       	movw	r24, r28
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	72 e0       	ldi	r23, 0x02	; 2
     b76:	0e 94 39 03 	call	0x672	; 0x672 <rcvr_datablock>
     b7a:	88 23       	and	r24, r24
     b7c:	29 f0       	breq	.+10     	; 0xb88 <disk_read+0x82>
				buff += 512;
			} while (--count);
     b7e:	01 50       	subi	r16, 0x01	; 1
     b80:	19 f0       	breq	.+6      	; 0xb88 <disk_read+0x82>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
     b82:	c0 50       	subi	r28, 0x00	; 0
     b84:	de 4f       	sbci	r29, 0xFE	; 254
     b86:	f4 cf       	rjmp	.-24     	; 0xb70 <disk_read+0x6a>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     b88:	8c e4       	ldi	r24, 0x4C	; 76
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     b96:	80 e1       	ldi	r24, 0x10	; 16
     b98:	e0 e6       	ldi	r30, 0x60	; 96
     b9a:	f6 e0       	ldi	r31, 0x06	; 6
     b9c:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b9e:	8f ef       	ldi	r24, 0xFF	; 255
     ba0:	e0 ec       	ldi	r30, 0xC0	; 192
     ba2:	f9 e0       	ldi	r31, 0x09	; 9
     ba4:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     ba6:	80 91 c2 09 	lds	r24, 0x09C2
     baa:	87 ff       	sbrs	r24, 7
     bac:	fc cf       	rjmp	.-8      	; 0xba6 <disk_read+0xa0>
	return SD_SPI.DATA;
     bae:	80 91 c3 09 	lds	r24, 0x09C3
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     bb2:	00 23       	and	r16, r16
     bb4:	19 f0       	breq	.+6      	; 0xbbc <disk_read+0xb6>
     bb6:	01 e0       	ldi	r16, 0x01	; 1
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <disk_read+0xb6>
     bba:	04 e0       	ldi	r16, 0x04	; 4
}
     bbc:	80 2f       	mov	r24, r16
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	0f 91       	pop	r16
     bc4:	08 95       	ret

00000bc6 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     bc6:	cf 92       	push	r12
     bc8:	df 92       	push	r13
     bca:	ef 92       	push	r14
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	eb 01       	movw	r28, r22
     bd6:	69 01       	movw	r12, r18
     bd8:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     bda:	88 23       	and	r24, r24
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <disk_write+0x1a>
     bde:	61 c0       	rjmp	.+194    	; 0xca2 <disk_write+0xdc>
     be0:	00 23       	and	r16, r16
     be2:	09 f4       	brne	.+2      	; 0xbe6 <disk_write+0x20>
     be4:	5e c0       	rjmp	.+188    	; 0xca2 <disk_write+0xdc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     be6:	80 91 b2 29 	lds	r24, 0x29B2
     bea:	80 ff       	sbrs	r24, 0
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <disk_write+0x2c>
     bee:	03 e0       	ldi	r16, 0x03	; 3
     bf0:	59 c0       	rjmp	.+178    	; 0xca4 <disk_write+0xde>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     bf2:	80 91 b2 29 	lds	r24, 0x29B2
     bf6:	82 ff       	sbrs	r24, 2
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <disk_write+0x38>
     bfa:	02 e0       	ldi	r16, 0x02	; 2
     bfc:	53 c0       	rjmp	.+166    	; 0xca4 <disk_write+0xde>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     bfe:	80 91 1c 2a 	lds	r24, 0x2A1C
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	83 fd       	sbrc	r24, 3
     c06:	07 c0       	rjmp	.+14     	; 0xc16 <disk_write+0x50>
     c08:	79 e0       	ldi	r23, 0x09	; 9
     c0a:	cc 0c       	add	r12, r12
     c0c:	dd 1c       	adc	r13, r13
     c0e:	ee 1c       	adc	r14, r14
     c10:	ff 1c       	adc	r15, r15
     c12:	7a 95       	dec	r23
     c14:	d1 f7       	brne	.-12     	; 0xc0a <disk_write+0x44>

	if (count == 1) {	/* Single block write */
     c16:	01 30       	cpi	r16, 0x01	; 1
     c18:	69 f4       	brne	.+26     	; 0xc34 <disk_write+0x6e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     c1a:	88 e5       	ldi	r24, 0x58	; 88
     c1c:	b7 01       	movw	r22, r14
     c1e:	a6 01       	movw	r20, r12
     c20:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
     c24:	88 23       	and	r24, r24
     c26:	59 f5       	brne	.+86     	; 0xc7e <disk_write+0xb8>
     c28:	ce 01       	movw	r24, r28
     c2a:	6e ef       	ldi	r22, 0xFE	; 254
     c2c:	0e 94 9b 03 	call	0x736	; 0x736 <xmit_datablock>
     c30:	00 e0       	ldi	r16, 0x00	; 0
     c32:	22 c0       	rjmp	.+68     	; 0xc78 <disk_write+0xb2>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     c34:	86 70       	andi	r24, 0x06	; 6
     c36:	90 70       	andi	r25, 0x00	; 0
     c38:	89 2b       	or	r24, r25
     c3a:	39 f0       	breq	.+14     	; 0xc4a <disk_write+0x84>
     c3c:	40 2f       	mov	r20, r16
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	87 ed       	ldi	r24, 0xD7	; 215
     c46:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     c4a:	89 e5       	ldi	r24, 0x59	; 89
     c4c:	b7 01       	movw	r22, r14
     c4e:	a6 01       	movw	r20, r12
     c50:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
     c54:	88 23       	and	r24, r24
     c56:	99 f4       	brne	.+38     	; 0xc7e <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     c58:	ce 01       	movw	r24, r28
     c5a:	6c ef       	ldi	r22, 0xFC	; 252
     c5c:	0e 94 9b 03 	call	0x736	; 0x736 <xmit_datablock>
     c60:	88 23       	and	r24, r24
     c62:	29 f0       	breq	.+10     	; 0xc6e <disk_write+0xa8>
				buff += 512;
			} while (--count);
     c64:	01 50       	subi	r16, 0x01	; 1
     c66:	19 f0       	breq	.+6      	; 0xc6e <disk_write+0xa8>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
     c68:	c0 50       	subi	r28, 0x00	; 0
     c6a:	de 4f       	sbci	r29, 0xFE	; 254
     c6c:	f5 cf       	rjmp	.-22     	; 0xc58 <disk_write+0x92>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	6d ef       	ldi	r22, 0xFD	; 253
     c74:	0e 94 9b 03 	call	0x736	; 0x736 <xmit_datablock>
     c78:	88 23       	and	r24, r24
     c7a:	09 f4       	brne	.+2      	; 0xc7e <disk_write+0xb8>
     c7c:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     c7e:	80 e1       	ldi	r24, 0x10	; 16
     c80:	e0 e6       	ldi	r30, 0x60	; 96
     c82:	f6 e0       	ldi	r31, 0x06	; 6
     c84:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c86:	8f ef       	ldi	r24, 0xFF	; 255
     c88:	e0 ec       	ldi	r30, 0xC0	; 192
     c8a:	f9 e0       	ldi	r31, 0x09	; 9
     c8c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c8e:	80 91 c2 09 	lds	r24, 0x09C2
     c92:	87 ff       	sbrs	r24, 7
     c94:	fc cf       	rjmp	.-8      	; 0xc8e <disk_write+0xc8>
	return SD_SPI.DATA;
     c96:	80 91 c3 09 	lds	r24, 0x09C3
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     c9a:	00 23       	and	r16, r16
     c9c:	19 f0       	breq	.+6      	; 0xca4 <disk_write+0xde>
     c9e:	01 e0       	ldi	r16, 0x01	; 1
     ca0:	01 c0       	rjmp	.+2      	; 0xca4 <disk_write+0xde>
     ca2:	04 e0       	ldi	r16, 0x04	; 4
}
     ca4:	80 2f       	mov	r24, r16
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	df 90       	pop	r13
     cb2:	cf 90       	pop	r12
     cb4:	08 95       	ret

00000cb6 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	60 97       	sbiw	r28, 0x10	; 16
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
     ccc:	88 23       	and	r24, r24
     cce:	09 f0       	breq	.+2      	; 0xcd2 <disk_ioctl+0x1c>
     cd0:	b8 c1       	rjmp	.+880    	; 0x1042 <disk_ioctl+0x38c>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     cd2:	64 30       	cpi	r22, 0x04	; 4
     cd4:	01 f5       	brne	.+64     	; 0xd16 <disk_ioctl+0x60>
		switch (*ptr) {
     cd6:	fa 01       	movw	r30, r20
     cd8:	80 81       	ld	r24, Z
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	39 f0       	breq	.+14     	; 0xcec <disk_ioctl+0x36>
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	08 f4       	brcc	.+2      	; 0xce4 <disk_ioctl+0x2e>
     ce2:	b1 c1       	rjmp	.+866    	; 0x1046 <disk_ioctl+0x390>
     ce4:	82 30       	cpi	r24, 0x02	; 2
     ce6:	09 f0       	breq	.+2      	; 0xcea <disk_ioctl+0x34>
     ce8:	ac c1       	rjmp	.+856    	; 0x1042 <disk_ioctl+0x38c>
     cea:	11 c0       	rjmp	.+34     	; 0xd0e <disk_ioctl+0x58>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     cec:	e0 e6       	ldi	r30, 0x60	; 96
     cee:	f6 e0       	ldi	r31, 0x06	; 6
     cf0:	80 eb       	ldi	r24, 0xB0	; 176
     cf2:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     cf4:	88 e3       	ldi	r24, 0x38	; 56
     cf6:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     cf8:	14 82       	std	Z+4, r1	; 0x04
     cfa:	8c e2       	ldi	r24, 0x2C	; 44
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	20 e7       	ldi	r18, 0x70	; 112
     d00:	31 e0       	ldi	r19, 0x01	; 1
     d02:	f9 01       	movw	r30, r18
     d04:	31 97       	sbiw	r30, 0x01	; 1
     d06:	f1 f7       	brne	.-4      	; 0xd04 <disk_ioctl+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d08:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d0a:	d9 f7       	brne	.-10     	; 0xd02 <disk_ioctl+0x4c>
     d0c:	9c c1       	rjmp	.+824    	; 0x1046 <disk_ioctl+0x390>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	fa 01       	movw	r30, r20
     d12:	81 83       	std	Z+1, r24	; 0x01
     d14:	98 c1       	rjmp	.+816    	; 0x1046 <disk_ioctl+0x390>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     d16:	80 91 b2 29 	lds	r24, 0x29B2
     d1a:	80 ff       	sbrs	r24, 0
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <disk_ioctl+0x6c>
     d1e:	93 e0       	ldi	r25, 0x03	; 3
     d20:	93 c1       	rjmp	.+806    	; 0x1048 <disk_ioctl+0x392>

		switch (ctrl) {
     d22:	6a 30       	cpi	r22, 0x0A	; 10
     d24:	09 f4       	brne	.+2      	; 0xd28 <disk_ioctl+0x72>
     d26:	2f c1       	rjmp	.+606    	; 0xf86 <disk_ioctl+0x2d0>
     d28:	6b 30       	cpi	r22, 0x0B	; 11
     d2a:	50 f4       	brcc	.+20     	; 0xd40 <disk_ioctl+0x8a>
     d2c:	61 30       	cpi	r22, 0x01	; 1
     d2e:	51 f1       	breq	.+84     	; 0xd84 <disk_ioctl+0xce>
     d30:	61 30       	cpi	r22, 0x01	; 1
     d32:	a0 f0       	brcs	.+40     	; 0xd5c <disk_ioctl+0xa6>
     d34:	62 30       	cpi	r22, 0x02	; 2
     d36:	09 f4       	brne	.+2      	; 0xd3a <disk_ioctl+0x84>
     d38:	86 c0       	rjmp	.+268    	; 0xe46 <disk_ioctl+0x190>
     d3a:	63 30       	cpi	r22, 0x03	; 3
     d3c:	69 f4       	brne	.+26     	; 0xd58 <disk_ioctl+0xa2>
     d3e:	89 c0       	rjmp	.+274    	; 0xe52 <disk_ioctl+0x19c>
     d40:	6c 30       	cpi	r22, 0x0C	; 12
     d42:	09 f4       	brne	.+2      	; 0xd46 <disk_ioctl+0x90>
     d44:	27 c1       	rjmp	.+590    	; 0xf94 <disk_ioctl+0x2de>
     d46:	6c 30       	cpi	r22, 0x0C	; 12
     d48:	08 f4       	brcc	.+2      	; 0xd4c <disk_ioctl+0x96>
     d4a:	22 c1       	rjmp	.+580    	; 0xf90 <disk_ioctl+0x2da>
     d4c:	6d 30       	cpi	r22, 0x0D	; 13
     d4e:	09 f4       	brne	.+2      	; 0xd52 <disk_ioctl+0x9c>
     d50:	2e c1       	rjmp	.+604    	; 0xfae <disk_ioctl+0x2f8>
     d52:	6e 30       	cpi	r22, 0x0E	; 14
     d54:	09 f4       	brne	.+2      	; 0xd58 <disk_ioctl+0xa2>
     d56:	4a c1       	rjmp	.+660    	; 0xfec <disk_ioctl+0x336>
     d58:	94 e0       	ldi	r25, 0x04	; 4
     d5a:	64 c1       	rjmp	.+712    	; 0x1024 <disk_ioctl+0x36e>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
     d5c:	0e 94 1c 03 	call	0x638	; 0x638 <select>
     d60:	88 23       	and	r24, r24
     d62:	09 f4       	brne	.+2      	; 0xd66 <disk_ioctl+0xb0>
     d64:	5e c1       	rjmp	.+700    	; 0x1022 <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     d66:	80 e1       	ldi	r24, 0x10	; 16
     d68:	e0 e6       	ldi	r30, 0x60	; 96
     d6a:	f6 e0       	ldi	r31, 0x06	; 6
     d6c:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     d6e:	8f ef       	ldi	r24, 0xFF	; 255
     d70:	e0 ec       	ldi	r30, 0xC0	; 192
     d72:	f9 e0       	ldi	r31, 0x09	; 9
     d74:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     d76:	80 91 c2 09 	lds	r24, 0x09C2
     d7a:	87 ff       	sbrs	r24, 7
     d7c:	fc cf       	rjmp	.-8      	; 0xd76 <disk_ioctl+0xc0>
	return SD_SPI.DATA;
     d7e:	80 91 c3 09 	lds	r24, 0x09C3
     d82:	ff c0       	rjmp	.+510    	; 0xf82 <disk_ioctl+0x2cc>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     d84:	89 e4       	ldi	r24, 0x49	; 73
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
     d92:	88 23       	and	r24, r24
     d94:	09 f0       	breq	.+2      	; 0xd98 <disk_ioctl+0xe2>
     d96:	45 c1       	rjmp	.+650    	; 0x1022 <disk_ioctl+0x36c>
     d98:	ce 01       	movw	r24, r28
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	60 e1       	ldi	r22, 0x10	; 16
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	0e 94 39 03 	call	0x672	; 0x672 <rcvr_datablock>
     da4:	88 23       	and	r24, r24
     da6:	09 f4       	brne	.+2      	; 0xdaa <disk_ioctl+0xf4>
     da8:	3c c1       	rjmp	.+632    	; 0x1022 <disk_ioctl+0x36c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	82 95       	swap	r24
     dae:	86 95       	lsr	r24
     db0:	86 95       	lsr	r24
     db2:	83 70       	andi	r24, 0x03	; 3
     db4:	7a 85       	ldd	r23, Y+10	; 0x0a
     db6:	49 85       	ldd	r20, Y+9	; 0x09
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	89 f4       	brne	.+34     	; 0xdde <disk_ioctl+0x128>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
     dbc:	87 2f       	mov	r24, r23
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	34 2f       	mov	r19, r20
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	82 0f       	add	r24, r18
     dc8:	93 1f       	adc	r25, r19
     dca:	a0 e0       	ldi	r26, 0x00	; 0
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	2a e0       	ldi	r18, 0x0A	; 10
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	aa 1f       	adc	r26, r26
     dd6:	bb 1f       	adc	r27, r27
     dd8:	2a 95       	dec	r18
     dda:	d1 f7       	brne	.-12     	; 0xdd0 <disk_ioctl+0x11a>
     ddc:	cd c0       	rjmp	.+410    	; 0xf78 <disk_ioctl+0x2c2>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
     dde:	42 95       	swap	r20
     de0:	46 95       	lsr	r20
     de2:	46 95       	lsr	r20
     de4:	43 70       	andi	r20, 0x03	; 3
     de6:	28 85       	ldd	r18, Y+8	; 0x08
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	22 0f       	add	r18, r18
     dec:	33 1f       	adc	r19, r19
     dee:	22 0f       	add	r18, r18
     df0:	33 1f       	adc	r19, r19
     df2:	24 0f       	add	r18, r20
     df4:	31 1d       	adc	r19, r1
     df6:	2f 5f       	subi	r18, 0xFF	; 255
     df8:	3f 4f       	sbci	r19, 0xFF	; 255
     dfa:	8f 81       	ldd	r24, Y+7	; 0x07
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	83 70       	andi	r24, 0x03	; 3
     e00:	90 70       	andi	r25, 0x00	; 0
     e02:	98 2f       	mov	r25, r24
     e04:	88 27       	eor	r24, r24
     e06:	99 0f       	add	r25, r25
     e08:	99 0f       	add	r25, r25
     e0a:	28 0f       	add	r18, r24
     e0c:	39 1f       	adc	r19, r25
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	50 e0       	ldi	r21, 0x00	; 0
     e12:	8e 81       	ldd	r24, Y+6	; 0x06
     e14:	8f 70       	andi	r24, 0x0F	; 15
     e16:	6b 85       	ldd	r22, Y+11	; 0x0b
     e18:	66 1f       	adc	r22, r22
     e1a:	66 27       	eor	r22, r22
     e1c:	66 1f       	adc	r22, r22
     e1e:	86 0f       	add	r24, r22
     e20:	8e 5f       	subi	r24, 0xFE	; 254
     e22:	73 70       	andi	r23, 0x03	; 3
     e24:	77 0f       	add	r23, r23
     e26:	87 0f       	add	r24, r23
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	09 97       	sbiw	r24, 0x09	; 9
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <disk_ioctl+0x180>
     e2e:	22 0f       	add	r18, r18
     e30:	33 1f       	adc	r19, r19
     e32:	44 1f       	adc	r20, r20
     e34:	55 1f       	adc	r21, r21
     e36:	8a 95       	dec	r24
     e38:	d2 f7       	brpl	.-12     	; 0xe2e <disk_ioctl+0x178>
     e3a:	f8 01       	movw	r30, r16
     e3c:	20 83       	st	Z, r18
     e3e:	31 83       	std	Z+1, r19	; 0x01
     e40:	42 83       	std	Z+2, r20	; 0x02
     e42:	53 83       	std	Z+3, r21	; 0x03
     e44:	9e c0       	rjmp	.+316    	; 0xf82 <disk_ioctl+0x2cc>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	92 e0       	ldi	r25, 0x02	; 2
     e4a:	fa 01       	movw	r30, r20
     e4c:	80 83       	st	Z, r24
     e4e:	91 83       	std	Z+1, r25	; 0x01
     e50:	98 c0       	rjmp	.+304    	; 0xf82 <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
     e52:	80 91 1c 2a 	lds	r24, 0x2A1C
     e56:	f8 2e       	mov	r15, r24
     e58:	82 ff       	sbrs	r24, 2
     e5a:	39 c0       	rjmp	.+114    	; 0xece <disk_ioctl+0x218>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
     e5c:	8d ec       	ldi	r24, 0xCD	; 205
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	50 e0       	ldi	r21, 0x00	; 0
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
     e6a:	88 23       	and	r24, r24
     e6c:	09 f0       	breq	.+2      	; 0xe70 <disk_ioctl+0x1ba>
     e6e:	d9 c0       	rjmp	.+434    	; 0x1022 <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	e0 ec       	ldi	r30, 0xC0	; 192
     e74:	f9 e0       	ldi	r31, 0x09	; 9
     e76:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     e78:	80 91 c2 09 	lds	r24, 0x09C2
     e7c:	87 ff       	sbrs	r24, 7
     e7e:	fc cf       	rjmp	.-8      	; 0xe78 <disk_ioctl+0x1c2>
	return SD_SPI.DATA;
     e80:	80 91 c3 09 	lds	r24, 0x09C3

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
     e84:	ce 01       	movw	r24, r28
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	60 e1       	ldi	r22, 0x10	; 16
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	0e 94 39 03 	call	0x672	; 0x672 <rcvr_datablock>
     e90:	88 23       	and	r24, r24
     e92:	09 f4       	brne	.+2      	; 0xe96 <disk_ioctl+0x1e0>
     e94:	c6 c0       	rjmp	.+396    	; 0x1022 <disk_ioctl+0x36c>
     e96:	90 e3       	ldi	r25, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     e98:	e0 ec       	ldi	r30, 0xC0	; 192
     e9a:	f9 e0       	ldi	r31, 0x09	; 9
     e9c:	2f ef       	ldi	r18, 0xFF	; 255
     e9e:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     ea0:	80 91 c2 09 	lds	r24, 0x09C2
     ea4:	87 ff       	sbrs	r24, 7
     ea6:	fc cf       	rjmp	.-8      	; 0xea0 <disk_ioctl+0x1ea>
	return SD_SPI.DATA;
     ea8:	80 91 c3 09 	lds	r24, 0x09C3
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
     eac:	91 50       	subi	r25, 0x01	; 1
     eae:	b9 f7       	brne	.-18     	; 0xe9e <disk_ioctl+0x1e8>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
     eb0:	2b 85       	ldd	r18, Y+11	; 0x0b
     eb2:	22 95       	swap	r18
     eb4:	2f 70       	andi	r18, 0x0F	; 15
     eb6:	80 e1       	ldi	r24, 0x10	; 16
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	a0 e0       	ldi	r26, 0x00	; 0
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	04 c0       	rjmp	.+8      	; 0xec8 <disk_ioctl+0x212>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	aa 1f       	adc	r26, r26
     ec6:	bb 1f       	adc	r27, r27
     ec8:	2a 95       	dec	r18
     eca:	d2 f7       	brpl	.-12     	; 0xec0 <disk_ioctl+0x20a>
     ecc:	55 c0       	rjmp	.+170    	; 0xf78 <disk_ioctl+0x2c2>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
     ece:	89 e4       	ldi	r24, 0x49	; 73
     ed0:	40 e0       	ldi	r20, 0x00	; 0
     ed2:	50 e0       	ldi	r21, 0x00	; 0
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
     edc:	88 23       	and	r24, r24
     ede:	09 f0       	breq	.+2      	; 0xee2 <disk_ioctl+0x22c>
     ee0:	a0 c0       	rjmp	.+320    	; 0x1022 <disk_ioctl+0x36c>
     ee2:	ce 01       	movw	r24, r28
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	60 e1       	ldi	r22, 0x10	; 16
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	0e 94 39 03 	call	0x672	; 0x672 <rcvr_datablock>
     eee:	88 23       	and	r24, r24
     ef0:	09 f4       	brne	.+2      	; 0xef4 <disk_ioctl+0x23e>
     ef2:	97 c0       	rjmp	.+302    	; 0x1022 <disk_ioctl+0x36c>
     ef4:	4b 85       	ldd	r20, Y+11	; 0x0b
     ef6:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
     ef8:	f1 fe       	sbrs	r15, 1
     efa:	1b c0       	rjmp	.+54     	; 0xf32 <disk_ioctl+0x27c>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
     efc:	88 1f       	adc	r24, r24
     efe:	88 27       	eor	r24, r24
     f00:	88 1f       	adc	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	24 2f       	mov	r18, r20
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	2f 73       	andi	r18, 0x3F	; 63
     f0c:	30 70       	andi	r19, 0x00	; 0
     f0e:	22 0f       	add	r18, r18
     f10:	33 1f       	adc	r19, r19
     f12:	82 0f       	add	r24, r18
     f14:	93 1f       	adc	r25, r19
     f16:	2e 85       	ldd	r18, Y+14	; 0x0e
     f18:	22 95       	swap	r18
     f1a:	26 95       	lsr	r18
     f1c:	26 95       	lsr	r18
     f1e:	23 70       	andi	r18, 0x03	; 3
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	21 50       	subi	r18, 0x01	; 1
     f24:	30 40       	sbci	r19, 0x00	; 0
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <disk_ioctl+0x276>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	2a 95       	dec	r18
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <disk_ioctl+0x272>
     f30:	21 c0       	rjmp	.+66     	; 0xf74 <disk_ioctl+0x2be>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	23 70       	andi	r18, 0x03	; 3
     f38:	30 70       	andi	r19, 0x00	; 0
     f3a:	f3 e0       	ldi	r31, 0x03	; 3
     f3c:	22 0f       	add	r18, r18
     f3e:	33 1f       	adc	r19, r19
     f40:	fa 95       	dec	r31
     f42:	e1 f7       	brne	.-8      	; 0xf3c <disk_ioctl+0x286>
     f44:	82 95       	swap	r24
     f46:	86 95       	lsr	r24
     f48:	87 70       	andi	r24, 0x07	; 7
     f4a:	28 0f       	add	r18, r24
     f4c:	31 1d       	adc	r19, r1
     f4e:	2f 5f       	subi	r18, 0xFF	; 255
     f50:	3f 4f       	sbci	r19, 0xFF	; 255
     f52:	84 2f       	mov	r24, r20
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	8c 77       	andi	r24, 0x7C	; 124
     f58:	90 70       	andi	r25, 0x00	; 0
     f5a:	95 95       	asr	r25
     f5c:	87 95       	ror	r24
     f5e:	95 95       	asr	r25
     f60:	87 95       	ror	r24
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	ac 01       	movw	r20, r24
     f66:	24 9f       	mul	r18, r20
     f68:	c0 01       	movw	r24, r0
     f6a:	25 9f       	mul	r18, r21
     f6c:	90 0d       	add	r25, r0
     f6e:	34 9f       	mul	r19, r20
     f70:	90 0d       	add	r25, r0
     f72:	11 24       	eor	r1, r1
     f74:	a0 e0       	ldi	r26, 0x00	; 0
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	f8 01       	movw	r30, r16
     f7a:	80 83       	st	Z, r24
     f7c:	91 83       	std	Z+1, r25	; 0x01
     f7e:	a2 83       	std	Z+2, r26	; 0x02
     f80:	b3 83       	std	Z+3, r27	; 0x03
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	4f c0       	rjmp	.+158    	; 0x1024 <disk_ioctl+0x36e>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
     f86:	80 91 1c 2a 	lds	r24, 0x2A1C
     f8a:	fa 01       	movw	r30, r20
     f8c:	80 83       	st	Z, r24
     f8e:	f9 cf       	rjmp	.-14     	; 0xf82 <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
     f90:	89 e4       	ldi	r24, 0x49	; 73
     f92:	01 c0       	rjmp	.+2      	; 0xf96 <disk_ioctl+0x2e0>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
     f94:	8a e4       	ldi	r24, 0x4A	; 74
     f96:	40 e0       	ldi	r20, 0x00	; 0
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
     fa2:	88 23       	and	r24, r24
     fa4:	f1 f5       	brne	.+124    	; 0x1022 <disk_ioctl+0x36c>
     fa6:	c8 01       	movw	r24, r16
     fa8:	60 e1       	ldi	r22, 0x10	; 16
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	35 c0       	rjmp	.+106    	; 0x1018 <disk_ioctl+0x362>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
     fae:	8a e7       	ldi	r24, 0x7A	; 122
     fb0:	40 e0       	ldi	r20, 0x00	; 0
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
     fbc:	88 23       	and	r24, r24
     fbe:	89 f5       	brne	.+98     	; 0x1022 <disk_ioctl+0x36c>
     fc0:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     fc2:	a0 ec       	ldi	r26, 0xC0	; 192
     fc4:	b9 e0       	ldi	r27, 0x09	; 9
     fc6:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
     fc8:	98 01       	movw	r18, r16
     fca:	2d 5f       	subi	r18, 0xFD	; 253
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     fce:	13 96       	adiw	r26, 0x03	; 3
     fd0:	9c 93       	st	X, r25
     fd2:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     fd4:	80 91 c2 09 	lds	r24, 0x09C2
     fd8:	87 ff       	sbrs	r24, 7
     fda:	fc cf       	rjmp	.-8      	; 0xfd4 <disk_ioctl+0x31e>
	return SD_SPI.DATA;
     fdc:	80 91 c3 09 	lds	r24, 0x09C3
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
     fe0:	80 83       	st	Z, r24
     fe2:	e2 17       	cp	r30, r18
     fe4:	f3 07       	cpc	r31, r19
     fe6:	69 f2       	breq	.-102    	; 0xf82 <disk_ioctl+0x2cc>
     fe8:	31 96       	adiw	r30, 0x01	; 1
     fea:	f1 cf       	rjmp	.-30     	; 0xfce <disk_ioctl+0x318>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
     fec:	8d ec       	ldi	r24, 0xCD	; 205
     fee:	40 e0       	ldi	r20, 0x00	; 0
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <send_cmd>
     ffa:	88 23       	and	r24, r24
     ffc:	91 f4       	brne	.+36     	; 0x1022 <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	e0 ec       	ldi	r30, 0xC0	; 192
    1002:	f9 e0       	ldi	r31, 0x09	; 9
    1004:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1006:	80 91 c2 09 	lds	r24, 0x09C2
    100a:	87 ff       	sbrs	r24, 7
    100c:	fc cf       	rjmp	.-8      	; 0x1006 <disk_ioctl+0x350>
	return SD_SPI.DATA;
    100e:	80 91 c3 09 	lds	r24, 0x09C3
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
    1012:	c8 01       	movw	r24, r16
    1014:	60 e4       	ldi	r22, 0x40	; 64
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	0e 94 39 03 	call	0x672	; 0x672 <rcvr_datablock>
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	88 23       	and	r24, r24
    1020:	09 f4       	brne	.+2      	; 0x1024 <disk_ioctl+0x36e>
    1022:	91 e0       	ldi	r25, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    1024:	80 e1       	ldi	r24, 0x10	; 16
    1026:	e0 e6       	ldi	r30, 0x60	; 96
    1028:	f6 e0       	ldi	r31, 0x06	; 6
    102a:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    102c:	8f ef       	ldi	r24, 0xFF	; 255
    102e:	e0 ec       	ldi	r30, 0xC0	; 192
    1030:	f9 e0       	ldi	r31, 0x09	; 9
    1032:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1034:	80 91 c2 09 	lds	r24, 0x09C2
    1038:	87 ff       	sbrs	r24, 7
    103a:	fc cf       	rjmp	.-8      	; 0x1034 <disk_ioctl+0x37e>
	return SD_SPI.DATA;
    103c:	80 91 c3 09 	lds	r24, 0x09C3
    1040:	03 c0       	rjmp	.+6      	; 0x1048 <disk_ioctl+0x392>
    1042:	94 e0       	ldi	r25, 0x04	; 4
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <disk_ioctl+0x392>
    1046:	90 e0       	ldi	r25, 0x00	; 0

		deselect();
	}

	return res;
}
    1048:	89 2f       	mov	r24, r25
    104a:	60 96       	adiw	r28, 0x10	; 16
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	ff 90       	pop	r15
    105a:	08 95       	ret

0000105c <disk_timerproc>:

void disk_timerproc (void)
{
    BYTE n, s;

    n = Timer1;    /* 100Hz decrement timer */
    105c:	80 91 1a 2a 	lds	r24, 0x2A1A
    if (n) Timer1 = --n;
    1060:	88 23       	and	r24, r24
    1062:	19 f0       	breq	.+6      	; 0x106a <disk_timerproc+0xe>
    1064:	81 50       	subi	r24, 0x01	; 1
    1066:	80 93 1a 2a 	sts	0x2A1A, r24
    n = Timer2;
    106a:	80 91 1b 2a 	lds	r24, 0x2A1B
    if (n) Timer2 = --n;
    106e:	88 23       	and	r24, r24
    1070:	19 f0       	breq	.+6      	; 0x1078 <disk_timerproc+0x1c>
    1072:	81 50       	subi	r24, 0x01	; 1
    1074:	80 93 1b 2a 	sts	0x2A1B, r24

	s = Stat;
    1078:	80 91 b2 29 	lds	r24, 0x29B2

    s &= ~STA_NODISK;
    s &= ~STA_PROTECT;
    107c:	89 7f       	andi	r24, 0xF9	; 249

    Stat = s;
    107e:	80 93 b2 29 	sts	0x29B2, r24
}
    1082:	08 95       	ret

00001084 <get_fattime>:


DWORD get_fattime (void)
{
	return 0;
}
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	08 95       	ret

0000108e <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    108e:	6f 92       	push	r6
    1090:	7f 92       	push	r7
    1092:	8f 92       	push	r8
    1094:	9f 92       	push	r9
    1096:	af 92       	push	r10
    1098:	bf 92       	push	r11
    109a:	cf 92       	push	r12
    109c:	df 92       	push	r13
    109e:	ef 92       	push	r14
    10a0:	ff 92       	push	r15
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	ec 01       	movw	r28, r24
    10ac:	4a 01       	movw	r8, r20
    10ae:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    10b0:	ca a4       	ldd	r12, Y+42	; 0x2a
    10b2:	db a4       	ldd	r13, Y+43	; 0x2b
    10b4:	ec a4       	ldd	r14, Y+44	; 0x2c
    10b6:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    10b8:	c4 16       	cp	r12, r20
    10ba:	d5 06       	cpc	r13, r21
    10bc:	e6 06       	cpc	r14, r22
    10be:	f7 06       	cpc	r15, r23
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <move_window+0x36>
    10c2:	4e c0       	rjmp	.+156    	; 0x1160 <move_window+0xd2>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	88 23       	and	r24, r24
    10c8:	a1 f1       	breq	.+104    	; 0x1132 <move_window+0xa4>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
    10ca:	3e e2       	ldi	r19, 0x2E	; 46
    10cc:	63 2e       	mov	r6, r19
    10ce:	71 2c       	mov	r7, r1
    10d0:	6c 0e       	add	r6, r28
    10d2:	7d 1e       	adc	r7, r29
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	b3 01       	movw	r22, r6
    10d8:	a7 01       	movw	r20, r14
    10da:	96 01       	movw	r18, r12
    10dc:	01 e0       	ldi	r16, 0x01	; 1
    10de:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <disk_write>
    10e2:	88 23       	and	r24, r24
    10e4:	d9 f5       	brne	.+118    	; 0x115c <move_window+0xce>
				return FR_DISK_ERR;
			fs->wflag = 0;
    10e6:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    10e8:	8e 89       	ldd	r24, Y+22	; 0x16
    10ea:	9f 89       	ldd	r25, Y+23	; 0x17
    10ec:	a8 8d       	ldd	r26, Y+24	; 0x18
    10ee:	b9 8d       	ldd	r27, Y+25	; 0x19
    10f0:	2e 8d       	ldd	r18, Y+30	; 0x1e
    10f2:	3f 8d       	ldd	r19, Y+31	; 0x1f
    10f4:	48 a1       	ldd	r20, Y+32	; 0x20
    10f6:	59 a1       	ldd	r21, Y+33	; 0x21
    10f8:	82 0f       	add	r24, r18
    10fa:	93 1f       	adc	r25, r19
    10fc:	a4 1f       	adc	r26, r20
    10fe:	b5 1f       	adc	r27, r21
    1100:	c8 16       	cp	r12, r24
    1102:	d9 06       	cpc	r13, r25
    1104:	ea 06       	cpc	r14, r26
    1106:	fb 06       	cpc	r15, r27
    1108:	a0 f4       	brcc	.+40     	; 0x1132 <move_window+0xa4>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    110a:	1b 81       	ldd	r17, Y+3	; 0x03
    110c:	10 c0       	rjmp	.+32     	; 0x112e <move_window+0xa0>
					wsect += fs->sects_fat;
    110e:	8e 89       	ldd	r24, Y+22	; 0x16
    1110:	9f 89       	ldd	r25, Y+23	; 0x17
    1112:	a8 8d       	ldd	r26, Y+24	; 0x18
    1114:	b9 8d       	ldd	r27, Y+25	; 0x19
    1116:	c8 0e       	add	r12, r24
    1118:	d9 1e       	adc	r13, r25
    111a:	ea 1e       	adc	r14, r26
    111c:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	b3 01       	movw	r22, r6
    1122:	a7 01       	movw	r20, r14
    1124:	96 01       	movw	r18, r12
    1126:	01 e0       	ldi	r16, 0x01	; 1
    1128:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    112c:	11 50       	subi	r17, 0x01	; 1
    112e:	12 30       	cpi	r17, 0x02	; 2
    1130:	70 f7       	brcc	.-36     	; 0x110e <move_window+0x80>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    1132:	81 14       	cp	r8, r1
    1134:	91 04       	cpc	r9, r1
    1136:	a1 04       	cpc	r10, r1
    1138:	b1 04       	cpc	r11, r1
    113a:	91 f0       	breq	.+36     	; 0x1160 <move_window+0xd2>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    113c:	be 01       	movw	r22, r28
    113e:	62 5d       	subi	r22, 0xD2	; 210
    1140:	7f 4f       	sbci	r23, 0xFF	; 255
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	a5 01       	movw	r20, r10
    1146:	94 01       	movw	r18, r8
    1148:	01 e0       	ldi	r16, 0x01	; 1
    114a:	0e 94 83 05 	call	0xb06	; 0xb06 <disk_read>
    114e:	88 23       	and	r24, r24
    1150:	29 f4       	brne	.+10     	; 0x115c <move_window+0xce>
				return FR_DISK_ERR;
			fs->winsect = sector;
    1152:	8a a6       	std	Y+42, r8	; 0x2a
    1154:	9b a6       	std	Y+43, r9	; 0x2b
    1156:	ac a6       	std	Y+44, r10	; 0x2c
    1158:	bd a6       	std	Y+45, r11	; 0x2d
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <move_window+0xd4>
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <move_window+0xd4>
    1160:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	ff 90       	pop	r15
    116c:	ef 90       	pop	r14
    116e:	df 90       	pop	r13
    1170:	cf 90       	pop	r12
    1172:	bf 90       	pop	r11
    1174:	af 90       	pop	r10
    1176:	9f 90       	pop	r9
    1178:	8f 90       	pop	r8
    117a:	7f 90       	pop	r7
    117c:	6f 90       	pop	r6
    117e:	08 95       	ret

00001180 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    1180:	0f 93       	push	r16
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    1188:	40 e0       	ldi	r20, 0x00	; 0
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	60 e0       	ldi	r22, 0x00	; 0
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
	if (res == FR_OK) {
    1194:	88 23       	and	r24, r24
    1196:	09 f0       	breq	.+2      	; 0x119a <sync+0x1a>
    1198:	7e c0       	rjmp	.+252    	; 0x1296 <sync+0x116>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    119a:	88 81       	ld	r24, Y
    119c:	83 30       	cpi	r24, 0x03	; 3
    119e:	09 f0       	breq	.+2      	; 0x11a2 <sync+0x22>
    11a0:	72 c0       	rjmp	.+228    	; 0x1286 <sync+0x106>
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	88 23       	and	r24, r24
    11a6:	09 f4       	brne	.+2      	; 0x11aa <sync+0x2a>
    11a8:	6e c0       	rjmp	.+220    	; 0x1286 <sync+0x106>
			fs->winsect = 0;
    11aa:	1a a6       	std	Y+42, r1	; 0x2a
    11ac:	1b a6       	std	Y+43, r1	; 0x2b
    11ae:	1c a6       	std	Y+44, r1	; 0x2c
    11b0:	1d a6       	std	Y+45, r1	; 0x2d
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    11b2:	be 01       	movw	r22, r28
    11b4:	62 5d       	subi	r22, 0xD2	; 210
    11b6:	7f 4f       	sbci	r23, 0xFF	; 255
    11b8:	fb 01       	movw	r30, r22
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	92 e0       	ldi	r25, 0x02	; 2
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <sync+0x42>
	while (cnt--) *d++ = (char)val;
    11c0:	11 92       	st	Z+, r1
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	2f ef       	ldi	r18, 0xFF	; 255
    11c6:	8f 3f       	cpi	r24, 0xFF	; 255
    11c8:	92 07       	cpc	r25, r18
    11ca:	d1 f7       	brne	.-12     	; 0x11c0 <sync+0x40>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    11cc:	c4 5d       	subi	r28, 0xD4	; 212
    11ce:	dd 4f       	sbci	r29, 0xFD	; 253
    11d0:	85 e5       	ldi	r24, 0x55	; 85
    11d2:	89 93       	st	Y+, r24
    11d4:	8a ea       	ldi	r24, 0xAA	; 170
    11d6:	88 83       	st	Y, r24
    11d8:	cd 52       	subi	r28, 0x2D	; 45
    11da:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    11dc:	82 e5       	ldi	r24, 0x52	; 82
    11de:	8e a7       	std	Y+46, r24	; 0x2e
    11e0:	8f a7       	std	Y+47, r24	; 0x2f
    11e2:	21 e6       	ldi	r18, 0x61	; 97
    11e4:	28 ab       	std	Y+48, r18	; 0x30
    11e6:	91 e4       	ldi	r25, 0x41	; 65
    11e8:	99 ab       	std	Y+49, r25	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    11ea:	ce 5e       	subi	r28, 0xEE	; 238
    11ec:	dd 4f       	sbci	r29, 0xFD	; 253
    11ee:	82 e7       	ldi	r24, 0x72	; 114
    11f0:	89 93       	st	Y+, r24
    11f2:	89 93       	st	Y+, r24
    11f4:	99 93       	st	Y+, r25
    11f6:	28 83       	st	Y, r18
    11f8:	c5 51       	subi	r28, 0x15	; 21
    11fa:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    11fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    11fe:	ca 5e       	subi	r28, 0xEA	; 234
    1200:	dd 4f       	sbci	r29, 0xFD	; 253
    1202:	88 83       	st	Y, r24
    1204:	c6 51       	subi	r28, 0x16	; 22
    1206:	d2 40       	sbci	r29, 0x02	; 2
    1208:	8f 85       	ldd	r24, Y+15	; 0x0f
    120a:	c9 5e       	subi	r28, 0xE9	; 233
    120c:	dd 4f       	sbci	r29, 0xFD	; 253
    120e:	88 83       	st	Y, r24
    1210:	c7 51       	subi	r28, 0x17	; 23
    1212:	d2 40       	sbci	r29, 0x02	; 2
    1214:	8e 85       	ldd	r24, Y+14	; 0x0e
    1216:	9f 85       	ldd	r25, Y+15	; 0x0f
    1218:	a8 89       	ldd	r26, Y+16	; 0x10
    121a:	b9 89       	ldd	r27, Y+17	; 0x11
    121c:	9d 01       	movw	r18, r26
    121e:	44 27       	eor	r20, r20
    1220:	55 27       	eor	r21, r21
    1222:	c8 5e       	subi	r28, 0xE8	; 232
    1224:	dd 4f       	sbci	r29, 0xFD	; 253
    1226:	28 83       	st	Y, r18
    1228:	21 96       	adiw	r28, 0x01	; 1
    122a:	8b 2f       	mov	r24, r27
    122c:	99 27       	eor	r25, r25
    122e:	aa 27       	eor	r26, r26
    1230:	bb 27       	eor	r27, r27
    1232:	88 83       	st	Y, r24
    1234:	c9 51       	subi	r28, 0x19	; 25
    1236:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    1238:	8a 85       	ldd	r24, Y+10	; 0x0a
    123a:	c6 5e       	subi	r28, 0xE6	; 230
    123c:	dd 4f       	sbci	r29, 0xFD	; 253
    123e:	88 83       	st	Y, r24
    1240:	ca 51       	subi	r28, 0x1A	; 26
    1242:	d2 40       	sbci	r29, 0x02	; 2
    1244:	8b 85       	ldd	r24, Y+11	; 0x0b
    1246:	c5 5e       	subi	r28, 0xE5	; 229
    1248:	dd 4f       	sbci	r29, 0xFD	; 253
    124a:	88 83       	st	Y, r24
    124c:	cb 51       	subi	r28, 0x1B	; 27
    124e:	d2 40       	sbci	r29, 0x02	; 2
    1250:	8a 85       	ldd	r24, Y+10	; 0x0a
    1252:	9b 85       	ldd	r25, Y+11	; 0x0b
    1254:	ac 85       	ldd	r26, Y+12	; 0x0c
    1256:	bd 85       	ldd	r27, Y+13	; 0x0d
    1258:	9d 01       	movw	r18, r26
    125a:	44 27       	eor	r20, r20
    125c:	55 27       	eor	r21, r21
    125e:	c4 5e       	subi	r28, 0xE4	; 228
    1260:	dd 4f       	sbci	r29, 0xFD	; 253
    1262:	28 83       	st	Y, r18
    1264:	21 96       	adiw	r28, 0x01	; 1
    1266:	8b 2f       	mov	r24, r27
    1268:	99 27       	eor	r25, r25
    126a:	aa 27       	eor	r26, r26
    126c:	bb 27       	eor	r27, r27
    126e:	88 83       	st	Y, r24
    1270:	cd 51       	subi	r28, 0x1D	; 29
    1272:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    1274:	2a 89       	ldd	r18, Y+18	; 0x12
    1276:	3b 89       	ldd	r19, Y+19	; 0x13
    1278:	4c 89       	ldd	r20, Y+20	; 0x14
    127a:	5d 89       	ldd	r21, Y+21	; 0x15
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	01 e0       	ldi	r16, 0x01	; 1
    1280:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <disk_write>
			fs->fsi_flag = 0;
    1284:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <disk_ioctl>
    1292:	81 11       	cpse	r24, r1
    1294:	81 e0       	ldi	r24, 0x01	; 1
			res = FR_DISK_ERR;
	}

	return res;
}
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	0f 91       	pop	r16
    129c:	08 95       	ret

0000129e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    129e:	7f 92       	push	r7
    12a0:	8f 92       	push	r8
    12a2:	9f 92       	push	r9
    12a4:	af 92       	push	r10
    12a6:	bf 92       	push	r11
    12a8:	cf 92       	push	r12
    12aa:	df 92       	push	r13
    12ac:	ef 92       	push	r14
    12ae:	ff 92       	push	r15
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	4c 01       	movw	r8, r24
    12ba:	7a 01       	movw	r14, r20
    12bc:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    12be:	42 30       	cpi	r20, 0x02	; 2
    12c0:	51 05       	cpc	r21, r1
    12c2:	61 05       	cpc	r22, r1
    12c4:	71 05       	cpc	r23, r1
    12c6:	08 f4       	brcc	.+2      	; 0x12ca <get_fat+0x2c>
    12c8:	bb c0       	rjmp	.+374    	; 0x1440 <get_fat+0x1a2>
    12ca:	f4 01       	movw	r30, r8
    12cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    12ce:	93 8d       	ldd	r25, Z+27	; 0x1b
    12d0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    12d2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    12d4:	48 17       	cp	r20, r24
    12d6:	59 07       	cpc	r21, r25
    12d8:	6a 07       	cpc	r22, r26
    12da:	7b 07       	cpc	r23, r27
    12dc:	08 f0       	brcs	.+2      	; 0x12e0 <get_fat+0x42>
    12de:	b0 c0       	rjmp	.+352    	; 0x1440 <get_fat+0x1a2>
		return 1;

	fsect = fs->fatbase;
    12e0:	a6 8c       	ldd	r10, Z+30	; 0x1e
    12e2:	b7 8c       	ldd	r11, Z+31	; 0x1f
    12e4:	c0 a0       	ldd	r12, Z+32	; 0x20
    12e6:	d1 a0       	ldd	r13, Z+33	; 0x21
	switch (fs->fs_type) {
    12e8:	80 81       	ld	r24, Z
    12ea:	82 30       	cpi	r24, 0x02	; 2
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <get_fat+0x52>
    12ee:	4d c0       	rjmp	.+154    	; 0x138a <get_fat+0xec>
    12f0:	83 30       	cpi	r24, 0x03	; 3
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <get_fat+0x58>
    12f4:	68 c0       	rjmp	.+208    	; 0x13c6 <get_fat+0x128>
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	09 f0       	breq	.+2      	; 0x12fc <get_fat+0x5e>
    12fa:	a7 c0       	rjmp	.+334    	; 0x144a <get_fat+0x1ac>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
    12fc:	ea 01       	movw	r28, r20
    12fe:	d6 95       	lsr	r29
    1300:	c7 95       	ror	r28
    1302:	c4 0f       	add	r28, r20
    1304:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    1306:	ae 01       	movw	r20, r28
    1308:	45 2f       	mov	r20, r21
    130a:	55 27       	eor	r21, r21
    130c:	46 95       	lsr	r20
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	4a 0d       	add	r20, r10
    1314:	5b 1d       	adc	r21, r11
    1316:	6c 1d       	adc	r22, r12
    1318:	7d 1d       	adc	r23, r13
    131a:	c4 01       	movw	r24, r8
    131c:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    1320:	88 23       	and	r24, r24
    1322:	09 f0       	breq	.+2      	; 0x1326 <get_fat+0x88>
    1324:	92 c0       	rjmp	.+292    	; 0x144a <get_fat+0x1ac>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    1326:	fe 01       	movw	r30, r28
    1328:	f1 70       	andi	r31, 0x01	; 1
    132a:	e8 0d       	add	r30, r8
    132c:	f9 1d       	adc	r31, r9
    132e:	76 a4       	ldd	r7, Z+46	; 0x2e
    1330:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    1332:	ae 01       	movw	r20, r28
    1334:	45 2f       	mov	r20, r21
    1336:	55 27       	eor	r21, r21
    1338:	46 95       	lsr	r20
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	4a 0d       	add	r20, r10
    1340:	5b 1d       	adc	r21, r11
    1342:	6c 1d       	adc	r22, r12
    1344:	7d 1d       	adc	r23, r13
    1346:	c4 01       	movw	r24, r8
    1348:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    134c:	88 23       	and	r24, r24
    134e:	09 f0       	breq	.+2      	; 0x1352 <get_fat+0xb4>
    1350:	7c c0       	rjmp	.+248    	; 0x144a <get_fat+0x1ac>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    1352:	67 2d       	mov	r22, r7
    1354:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    1356:	d1 70       	andi	r29, 0x01	; 1
    1358:	c8 0d       	add	r28, r8
    135a:	d9 1d       	adc	r29, r9
    135c:	9e a5       	ldd	r25, Y+46	; 0x2e
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	68 2b       	or	r22, r24
    1362:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1364:	c7 01       	movw	r24, r14
    1366:	81 70       	andi	r24, 0x01	; 1
    1368:	90 70       	andi	r25, 0x00	; 0
    136a:	89 2b       	or	r24, r25
    136c:	39 f0       	breq	.+14     	; 0x137c <get_fat+0xde>
    136e:	44 e0       	ldi	r20, 0x04	; 4
    1370:	76 95       	lsr	r23
    1372:	67 95       	ror	r22
    1374:	4a 95       	dec	r20
    1376:	e1 f7       	brne	.-8      	; 0x1370 <get_fat+0xd2>
    1378:	9b 01       	movw	r18, r22
    137a:	22 c0       	rjmp	.+68     	; 0x13c0 <get_fat+0x122>
    137c:	9b 01       	movw	r18, r22
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	50 e0       	ldi	r21, 0x00	; 0
    1382:	3f 70       	andi	r19, 0x0F	; 15
    1384:	40 70       	andi	r20, 0x00	; 0
    1386:	50 70       	andi	r21, 0x00	; 0
    1388:	64 c0       	rjmp	.+200    	; 0x1452 <get_fat+0x1b4>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    138a:	45 2f       	mov	r20, r21
    138c:	56 2f       	mov	r21, r22
    138e:	67 2f       	mov	r22, r23
    1390:	77 27       	eor	r23, r23
    1392:	4a 0d       	add	r20, r10
    1394:	5b 1d       	adc	r21, r11
    1396:	6c 1d       	adc	r22, r12
    1398:	7d 1d       	adc	r23, r13
    139a:	c4 01       	movw	r24, r8
    139c:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    13a0:	88 23       	and	r24, r24
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <get_fat+0x108>
    13a4:	52 c0       	rjmp	.+164    	; 0x144a <get_fat+0x1ac>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    13a6:	f7 01       	movw	r30, r14
    13a8:	ee 0f       	add	r30, r30
    13aa:	ff 1f       	adc	r31, r31
    13ac:	f1 70       	andi	r31, 0x01	; 1
    13ae:	e8 0d       	add	r30, r8
    13b0:	f9 1d       	adc	r31, r9
    13b2:	97 a5       	ldd	r25, Z+47	; 0x2f
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	26 a5       	ldd	r18, Z+46	; 0x2e
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	82 2b       	or	r24, r18
    13bc:	93 2b       	or	r25, r19
    13be:	9c 01       	movw	r18, r24
    13c0:	40 e0       	ldi	r20, 0x00	; 0
    13c2:	50 e0       	ldi	r21, 0x00	; 0
    13c4:	46 c0       	rjmp	.+140    	; 0x1452 <get_fat+0x1b4>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    13c6:	97 e0       	ldi	r25, 0x07	; 7
    13c8:	76 95       	lsr	r23
    13ca:	67 95       	ror	r22
    13cc:	57 95       	ror	r21
    13ce:	47 95       	ror	r20
    13d0:	9a 95       	dec	r25
    13d2:	d1 f7       	brne	.-12     	; 0x13c8 <get_fat+0x12a>
    13d4:	4a 0d       	add	r20, r10
    13d6:	5b 1d       	adc	r21, r11
    13d8:	6c 1d       	adc	r22, r12
    13da:	7d 1d       	adc	r23, r13
    13dc:	c4 01       	movw	r24, r8
    13de:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    13e2:	88 23       	and	r24, r24
    13e4:	91 f5       	brne	.+100    	; 0x144a <get_fat+0x1ac>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    13e6:	f7 01       	movw	r30, r14
    13e8:	ee 0f       	add	r30, r30
    13ea:	ff 1f       	adc	r31, r31
    13ec:	ee 0f       	add	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	f1 70       	andi	r31, 0x01	; 1
    13f2:	e8 0d       	add	r30, r8
    13f4:	f9 1d       	adc	r31, r9
    13f6:	81 a9       	ldd	r24, Z+49	; 0x31
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	a0 e0       	ldi	r26, 0x00	; 0
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	58 2f       	mov	r21, r24
    1400:	44 27       	eor	r20, r20
    1402:	33 27       	eor	r19, r19
    1404:	22 27       	eor	r18, r18
    1406:	80 a9       	ldd	r24, Z+48	; 0x30
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a0 e0       	ldi	r26, 0x00	; 0
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	dc 01       	movw	r26, r24
    1410:	99 27       	eor	r25, r25
    1412:	88 27       	eor	r24, r24
    1414:	28 2b       	or	r18, r24
    1416:	39 2b       	or	r19, r25
    1418:	4a 2b       	or	r20, r26
    141a:	5b 2b       	or	r21, r27
    141c:	86 a5       	ldd	r24, Z+46	; 0x2e
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a0 e0       	ldi	r26, 0x00	; 0
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	28 2b       	or	r18, r24
    1426:	39 2b       	or	r19, r25
    1428:	4a 2b       	or	r20, r26
    142a:	5b 2b       	or	r21, r27
    142c:	97 a5       	ldd	r25, Z+47	; 0x2f
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	a0 e0       	ldi	r26, 0x00	; 0
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	28 2b       	or	r18, r24
    1436:	39 2b       	or	r19, r25
    1438:	4a 2b       	or	r20, r26
    143a:	5b 2b       	or	r21, r27
    143c:	5f 70       	andi	r21, 0x0F	; 15
    143e:	09 c0       	rjmp	.+18     	; 0x1452 <get_fat+0x1b4>
    1440:	21 e0       	ldi	r18, 0x01	; 1
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	40 e0       	ldi	r20, 0x00	; 0
    1446:	50 e0       	ldi	r21, 0x00	; 0
    1448:	04 c0       	rjmp	.+8      	; 0x1452 <get_fat+0x1b4>
    144a:	2f ef       	ldi	r18, 0xFF	; 255
    144c:	3f ef       	ldi	r19, 0xFF	; 255
    144e:	4f ef       	ldi	r20, 0xFF	; 255
    1450:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    1452:	b9 01       	movw	r22, r18
    1454:	ca 01       	movw	r24, r20
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	df 90       	pop	r13
    1464:	cf 90       	pop	r12
    1466:	bf 90       	pop	r11
    1468:	af 90       	pop	r10
    146a:	9f 90       	pop	r9
    146c:	8f 90       	pop	r8
    146e:	7f 90       	pop	r7
    1470:	08 95       	ret

00001472 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1472:	2f 92       	push	r2
    1474:	3f 92       	push	r3
    1476:	4f 92       	push	r4
    1478:	5f 92       	push	r5
    147a:	6f 92       	push	r6
    147c:	7f 92       	push	r7
    147e:	8f 92       	push	r8
    1480:	9f 92       	push	r9
    1482:	af 92       	push	r10
    1484:	bf 92       	push	r11
    1486:	cf 92       	push	r12
    1488:	df 92       	push	r13
    148a:	ef 92       	push	r14
    148c:	ff 92       	push	r15
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	3c 01       	movw	r6, r24
    1498:	6a 01       	movw	r12, r20
    149a:	7b 01       	movw	r14, r22
    149c:	48 01       	movw	r8, r16
    149e:	59 01       	movw	r10, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
    14a0:	42 30       	cpi	r20, 0x02	; 2
    14a2:	51 05       	cpc	r21, r1
    14a4:	61 05       	cpc	r22, r1
    14a6:	71 05       	cpc	r23, r1
    14a8:	08 f4       	brcc	.+2      	; 0x14ac <put_fat+0x3a>
    14aa:	ba c0       	rjmp	.+372    	; 0x1620 <put_fat+0x1ae>
    14ac:	f3 01       	movw	r30, r6
    14ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    14b0:	93 8d       	ldd	r25, Z+27	; 0x1b
    14b2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    14b4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    14b6:	48 17       	cp	r20, r24
    14b8:	59 07       	cpc	r21, r25
    14ba:	6a 07       	cpc	r22, r26
    14bc:	7b 07       	cpc	r23, r27
    14be:	08 f0       	brcs	.+2      	; 0x14c2 <put_fat+0x50>
    14c0:	af c0       	rjmp	.+350    	; 0x1620 <put_fat+0x1ae>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
    14c2:	26 8c       	ldd	r2, Z+30	; 0x1e
    14c4:	37 8c       	ldd	r3, Z+31	; 0x1f
    14c6:	40 a0       	ldd	r4, Z+32	; 0x20
    14c8:	51 a0       	ldd	r5, Z+33	; 0x21
		switch (fs->fs_type) {
    14ca:	80 81       	ld	r24, Z
    14cc:	82 30       	cpi	r24, 0x02	; 2
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <put_fat+0x60>
    14d0:	64 c0       	rjmp	.+200    	; 0x159a <put_fat+0x128>
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <put_fat+0x66>
    14d6:	7a c0       	rjmp	.+244    	; 0x15cc <put_fat+0x15a>
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	11 f0       	breq	.+4      	; 0x14e0 <put_fat+0x6e>
    14dc:	22 e0       	ldi	r18, 0x02	; 2
    14de:	9c c0       	rjmp	.+312    	; 0x1618 <put_fat+0x1a6>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    14e0:	ea 01       	movw	r28, r20
    14e2:	d6 95       	lsr	r29
    14e4:	c7 95       	ror	r28
    14e6:	c4 0f       	add	r28, r20
    14e8:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
    14ea:	ae 01       	movw	r20, r28
    14ec:	45 2f       	mov	r20, r21
    14ee:	55 27       	eor	r21, r21
    14f0:	46 95       	lsr	r20
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	42 0d       	add	r20, r2
    14f8:	53 1d       	adc	r21, r3
    14fa:	64 1d       	adc	r22, r4
    14fc:	75 1d       	adc	r23, r5
    14fe:	c3 01       	movw	r24, r6
    1500:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    1504:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1506:	88 23       	and	r24, r24
    1508:	09 f0       	breq	.+2      	; 0x150c <put_fat+0x9a>
    150a:	86 c0       	rjmp	.+268    	; 0x1618 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    150c:	de 01       	movw	r26, r28
    150e:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1510:	86 01       	movw	r16, r12
    1512:	01 70       	andi	r16, 0x01	; 1
    1514:	10 70       	andi	r17, 0x00	; 0
    1516:	01 15       	cp	r16, r1
    1518:	11 05       	cpc	r17, r1
    151a:	51 f0       	breq	.+20     	; 0x1530 <put_fat+0xbe>
    151c:	f3 01       	movw	r30, r6
    151e:	ea 0f       	add	r30, r26
    1520:	fb 1f       	adc	r31, r27
    1522:	86 a5       	ldd	r24, Z+46	; 0x2e
    1524:	8f 70       	andi	r24, 0x0F	; 15
    1526:	98 2d       	mov	r25, r8
    1528:	92 95       	swap	r25
    152a:	90 7f       	andi	r25, 0xF0	; 240
    152c:	98 2b       	or	r25, r24
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <put_fat+0xc0>
    1530:	98 2d       	mov	r25, r8
    1532:	a6 0d       	add	r26, r6
    1534:	b7 1d       	adc	r27, r7
    1536:	9e 96       	adiw	r26, 0x2e	; 46
    1538:	9c 93       	st	X, r25
			bc++;
    153a:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	f3 01       	movw	r30, r6
    1540:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
    1542:	ae 01       	movw	r20, r28
    1544:	45 2f       	mov	r20, r21
    1546:	55 27       	eor	r21, r21
    1548:	46 95       	lsr	r20
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	42 0d       	add	r20, r2
    1550:	53 1d       	adc	r21, r3
    1552:	64 1d       	adc	r22, r4
    1554:	75 1d       	adc	r23, r5
    1556:	c3 01       	movw	r24, r6
    1558:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    155c:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    155e:	88 23       	and	r24, r24
    1560:	09 f0       	breq	.+2      	; 0x1564 <put_fat+0xf2>
    1562:	5a c0       	rjmp	.+180    	; 0x1618 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    1564:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1566:	01 2b       	or	r16, r17
    1568:	49 f0       	breq	.+18     	; 0x157c <put_fat+0x10a>
    156a:	64 e0       	ldi	r22, 0x04	; 4
    156c:	b6 94       	lsr	r11
    156e:	a7 94       	ror	r10
    1570:	97 94       	ror	r9
    1572:	87 94       	ror	r8
    1574:	6a 95       	dec	r22
    1576:	d1 f7       	brne	.-12     	; 0x156c <put_fat+0xfa>
    1578:	48 2d       	mov	r20, r8
    157a:	0b c0       	rjmp	.+22     	; 0x1592 <put_fat+0x120>
    157c:	f3 01       	movw	r30, r6
    157e:	ec 0f       	add	r30, r28
    1580:	fd 1f       	adc	r31, r29
    1582:	46 a5       	ldd	r20, Z+46	; 0x2e
    1584:	40 7f       	andi	r20, 0xF0	; 240
    1586:	bb 27       	eor	r27, r27
    1588:	ab 2d       	mov	r26, r11
    158a:	9a 2d       	mov	r25, r10
    158c:	89 2d       	mov	r24, r9
    158e:	8f 70       	andi	r24, 0x0F	; 15
    1590:	48 2b       	or	r20, r24
    1592:	c6 0d       	add	r28, r6
    1594:	d7 1d       	adc	r29, r7
    1596:	4e a7       	std	Y+46, r20	; 0x2e
    1598:	3f c0       	rjmp	.+126    	; 0x1618 <put_fat+0x1a6>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
    159a:	77 27       	eor	r23, r23
    159c:	6f 2d       	mov	r22, r15
    159e:	5e 2d       	mov	r21, r14
    15a0:	4d 2d       	mov	r20, r13
    15a2:	42 0d       	add	r20, r2
    15a4:	53 1d       	adc	r21, r3
    15a6:	64 1d       	adc	r22, r4
    15a8:	75 1d       	adc	r23, r5
    15aa:	c3 01       	movw	r24, r6
    15ac:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    15b0:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    15b2:	88 23       	and	r24, r24
    15b4:	89 f5       	brne	.+98     	; 0x1618 <put_fat+0x1a6>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
    15b6:	f6 01       	movw	r30, r12
    15b8:	ee 0f       	add	r30, r30
    15ba:	ff 1f       	adc	r31, r31
    15bc:	f1 70       	andi	r31, 0x01	; 1
    15be:	e6 0d       	add	r30, r6
    15c0:	f7 1d       	adc	r31, r7
    15c2:	86 a6       	std	Z+46, r8	; 0x2e
    15c4:	89 2d       	mov	r24, r9
    15c6:	99 27       	eor	r25, r25
    15c8:	87 a7       	std	Z+47, r24	; 0x2f
    15ca:	26 c0       	rjmp	.+76     	; 0x1618 <put_fat+0x1a6>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
    15cc:	87 e0       	ldi	r24, 0x07	; 7
    15ce:	76 95       	lsr	r23
    15d0:	67 95       	ror	r22
    15d2:	57 95       	ror	r21
    15d4:	47 95       	ror	r20
    15d6:	8a 95       	dec	r24
    15d8:	d1 f7       	brne	.-12     	; 0x15ce <put_fat+0x15c>
    15da:	42 0d       	add	r20, r2
    15dc:	53 1d       	adc	r21, r3
    15de:	64 1d       	adc	r22, r4
    15e0:	75 1d       	adc	r23, r5
    15e2:	c3 01       	movw	r24, r6
    15e4:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    15e8:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    15ea:	88 23       	and	r24, r24
    15ec:	a9 f4       	brne	.+42     	; 0x1618 <put_fat+0x1a6>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
    15ee:	f6 01       	movw	r30, r12
    15f0:	ee 0f       	add	r30, r30
    15f2:	ff 1f       	adc	r31, r31
    15f4:	ee 0f       	add	r30, r30
    15f6:	ff 1f       	adc	r31, r31
    15f8:	f1 70       	andi	r31, 0x01	; 1
    15fa:	e6 0d       	add	r30, r6
    15fc:	f7 1d       	adc	r31, r7
    15fe:	86 a6       	std	Z+46, r8	; 0x2e
    1600:	89 2d       	mov	r24, r9
    1602:	99 27       	eor	r25, r25
    1604:	87 a7       	std	Z+47, r24	; 0x2f
    1606:	c5 01       	movw	r24, r10
    1608:	aa 27       	eor	r26, r26
    160a:	bb 27       	eor	r27, r27
    160c:	80 ab       	std	Z+48, r24	; 0x30
    160e:	8b 2d       	mov	r24, r11
    1610:	99 27       	eor	r25, r25
    1612:	aa 27       	eor	r26, r26
    1614:	bb 27       	eor	r27, r27
    1616:	81 ab       	std	Z+49, r24	; 0x31
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	f3 01       	movw	r30, r6
    161c:	84 83       	std	Z+4, r24	; 0x04
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <put_fat+0x1b0>
    1620:	22 e0       	ldi	r18, 0x02	; 2
	}

	return res;
}
    1622:	82 2f       	mov	r24, r18
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	1f 91       	pop	r17
    162a:	0f 91       	pop	r16
    162c:	ff 90       	pop	r15
    162e:	ef 90       	pop	r14
    1630:	df 90       	pop	r13
    1632:	cf 90       	pop	r12
    1634:	bf 90       	pop	r11
    1636:	af 90       	pop	r10
    1638:	9f 90       	pop	r9
    163a:	8f 90       	pop	r8
    163c:	7f 90       	pop	r7
    163e:	6f 90       	pop	r6
    1640:	5f 90       	pop	r5
    1642:	4f 90       	pop	r4
    1644:	3f 90       	pop	r3
    1646:	2f 90       	pop	r2
    1648:	08 95       	ret

0000164a <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    164a:	9f 92       	push	r9
    164c:	af 92       	push	r10
    164e:	bf 92       	push	r11
    1650:	cf 92       	push	r12
    1652:	df 92       	push	r13
    1654:	ef 92       	push	r14
    1656:	ff 92       	push	r15
    1658:	0f 93       	push	r16
    165a:	1f 93       	push	r17
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	ec 01       	movw	r28, r24
    1662:	7a 01       	movw	r14, r20
    1664:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    1666:	42 30       	cpi	r20, 0x02	; 2
    1668:	51 05       	cpc	r21, r1
    166a:	61 05       	cpc	r22, r1
    166c:	71 05       	cpc	r23, r1
    166e:	08 f4       	brcc	.+2      	; 0x1672 <remove_chain+0x28>
    1670:	58 c0       	rjmp	.+176    	; 0x1722 <remove_chain+0xd8>
    1672:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1674:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1676:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1678:	bd 8d       	ldd	r27, Y+29	; 0x1d
    167a:	48 17       	cp	r20, r24
    167c:	59 07       	cpc	r21, r25
    167e:	6a 07       	cpc	r22, r26
    1680:	7b 07       	cpc	r23, r27
    1682:	08 f4       	brcc	.+2      	; 0x1686 <remove_chain+0x3c>
    1684:	41 c0       	rjmp	.+130    	; 0x1708 <remove_chain+0xbe>
    1686:	4d c0       	rjmp	.+154    	; 0x1722 <remove_chain+0xd8>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1688:	ce 01       	movw	r24, r28
    168a:	b8 01       	movw	r22, r16
    168c:	a7 01       	movw	r20, r14
    168e:	0e 94 4f 09 	call	0x129e	; 0x129e <get_fat>
    1692:	5b 01       	movw	r10, r22
    1694:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    1696:	61 15       	cp	r22, r1
    1698:	71 05       	cpc	r23, r1
    169a:	81 05       	cpc	r24, r1
    169c:	91 05       	cpc	r25, r1
    169e:	09 f4       	brne	.+2      	; 0x16a2 <remove_chain+0x58>
    16a0:	42 c0       	rjmp	.+132    	; 0x1726 <remove_chain+0xdc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	a8 16       	cp	r10, r24
    16a6:	b1 04       	cpc	r11, r1
    16a8:	c1 04       	cpc	r12, r1
    16aa:	d1 04       	cpc	r13, r1
    16ac:	d1 f1       	breq	.+116    	; 0x1722 <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    16ae:	2f ef       	ldi	r18, 0xFF	; 255
    16b0:	a2 16       	cp	r10, r18
    16b2:	2f ef       	ldi	r18, 0xFF	; 255
    16b4:	b2 06       	cpc	r11, r18
    16b6:	2f ef       	ldi	r18, 0xFF	; 255
    16b8:	c2 06       	cpc	r12, r18
    16ba:	2f ef       	ldi	r18, 0xFF	; 255
    16bc:	d2 06       	cpc	r13, r18
    16be:	11 f4       	brne	.+4      	; 0x16c4 <remove_chain+0x7a>
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	32 c0       	rjmp	.+100    	; 0x1728 <remove_chain+0xde>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    16c4:	ce 01       	movw	r24, r28
    16c6:	b8 01       	movw	r22, r16
    16c8:	a7 01       	movw	r20, r14
    16ca:	00 e0       	ldi	r16, 0x00	; 0
    16cc:	10 e0       	ldi	r17, 0x00	; 0
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	0e 94 39 0a 	call	0x1472	; 0x1472 <put_fat>
			if (res != FR_OK) break;
    16d6:	88 23       	and	r24, r24
    16d8:	39 f5       	brne	.+78     	; 0x1728 <remove_chain+0xde>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    16da:	8e 85       	ldd	r24, Y+14	; 0x0e
    16dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    16de:	a8 89       	ldd	r26, Y+16	; 0x10
    16e0:	b9 89       	ldd	r27, Y+17	; 0x11
    16e2:	8f 3f       	cpi	r24, 0xFF	; 255
    16e4:	2f ef       	ldi	r18, 0xFF	; 255
    16e6:	92 07       	cpc	r25, r18
    16e8:	2f ef       	ldi	r18, 0xFF	; 255
    16ea:	a2 07       	cpc	r26, r18
    16ec:	2f ef       	ldi	r18, 0xFF	; 255
    16ee:	b2 07       	cpc	r27, r18
    16f0:	41 f0       	breq	.+16     	; 0x1702 <remove_chain+0xb8>
				fs->free_clust++;
    16f2:	01 96       	adiw	r24, 0x01	; 1
    16f4:	a1 1d       	adc	r26, r1
    16f6:	b1 1d       	adc	r27, r1
    16f8:	8e 87       	std	Y+14, r24	; 0x0e
    16fa:	9f 87       	std	Y+15, r25	; 0x0f
    16fc:	a8 8b       	std	Y+16, r26	; 0x10
    16fe:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    1700:	9d 82       	std	Y+5, r9	; 0x05
    1702:	86 01       	movw	r16, r12
    1704:	75 01       	movw	r14, r10
    1706:	02 c0       	rjmp	.+4      	; 0x170c <remove_chain+0xc2>
    1708:	99 24       	eor	r9, r9
    170a:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    170c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    170e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1710:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1712:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1714:	e8 16       	cp	r14, r24
    1716:	f9 06       	cpc	r15, r25
    1718:	0a 07       	cpc	r16, r26
    171a:	1b 07       	cpc	r17, r27
    171c:	08 f4       	brcc	.+2      	; 0x1720 <remove_chain+0xd6>
    171e:	b4 cf       	rjmp	.-152    	; 0x1688 <remove_chain+0x3e>
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <remove_chain+0xdc>
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	01 c0       	rjmp	.+2      	; 0x1728 <remove_chain+0xde>
    1726:	80 e0       	ldi	r24, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	1f 91       	pop	r17
    172e:	0f 91       	pop	r16
    1730:	ff 90       	pop	r15
    1732:	ef 90       	pop	r14
    1734:	df 90       	pop	r13
    1736:	cf 90       	pop	r12
    1738:	bf 90       	pop	r11
    173a:	af 90       	pop	r10
    173c:	9f 90       	pop	r9
    173e:	08 95       	ret

00001740 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1740:	2f 92       	push	r2
    1742:	3f 92       	push	r3
    1744:	4f 92       	push	r4
    1746:	5f 92       	push	r5
    1748:	6f 92       	push	r6
    174a:	7f 92       	push	r7
    174c:	8f 92       	push	r8
    174e:	9f 92       	push	r9
    1750:	af 92       	push	r10
    1752:	bf 92       	push	r11
    1754:	cf 92       	push	r12
    1756:	df 92       	push	r13
    1758:	ef 92       	push	r14
    175a:	ff 92       	push	r15
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	00 d0       	rcall	.+0      	; 0x1766 <create_chain+0x26>
    1766:	0f 92       	push	r0
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	1c 01       	movw	r2, r24
    176e:	2a 01       	movw	r4, r20
    1770:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
    1772:	dc 01       	movw	r26, r24
    1774:	5a 96       	adiw	r26, 0x1a	; 26
    1776:	8d 91       	ld	r24, X+
    1778:	9d 91       	ld	r25, X+
    177a:	0d 90       	ld	r0, X+
    177c:	bc 91       	ld	r27, X
    177e:	a0 2d       	mov	r26, r0
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	9a 83       	std	Y+2, r25	; 0x02
    1784:	ab 83       	std	Y+3, r26	; 0x03
    1786:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
    1788:	41 15       	cp	r20, r1
    178a:	51 05       	cpc	r21, r1
    178c:	61 05       	cpc	r22, r1
    178e:	71 05       	cpc	r23, r1
    1790:	81 f4       	brne	.+32     	; 0x17b2 <create_chain+0x72>
		scl = fs->last_clust;			/* Get suggested start point */
    1792:	f1 01       	movw	r30, r2
    1794:	82 84       	ldd	r8, Z+10	; 0x0a
    1796:	93 84       	ldd	r9, Z+11	; 0x0b
    1798:	a4 84       	ldd	r10, Z+12	; 0x0c
    179a:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
    179c:	81 14       	cp	r8, r1
    179e:	91 04       	cpc	r9, r1
    17a0:	a1 04       	cpc	r10, r1
    17a2:	b1 04       	cpc	r11, r1
    17a4:	11 f1       	breq	.+68     	; 0x17ea <create_chain+0xaa>
    17a6:	88 16       	cp	r8, r24
    17a8:	99 06       	cpc	r9, r25
    17aa:	aa 06       	cpc	r10, r26
    17ac:	bb 06       	cpc	r11, r27
    17ae:	e8 f4       	brcc	.+58     	; 0x17ea <create_chain+0xaa>
    17b0:	21 c0       	rjmp	.+66     	; 0x17f4 <create_chain+0xb4>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    17b2:	c1 01       	movw	r24, r2
    17b4:	0e 94 4f 09 	call	0x129e	; 0x129e <get_fat>
    17b8:	9b 01       	movw	r18, r22
    17ba:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    17bc:	62 30       	cpi	r22, 0x02	; 2
    17be:	71 05       	cpc	r23, r1
    17c0:	81 05       	cpc	r24, r1
    17c2:	91 05       	cpc	r25, r1
    17c4:	28 f4       	brcc	.+10     	; 0x17d0 <create_chain+0x90>
    17c6:	21 e0       	ldi	r18, 0x01	; 1
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	50 e0       	ldi	r21, 0x00	; 0
    17ce:	93 c0       	rjmp	.+294    	; 0x18f6 <create_chain+0x1b6>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	9a 81       	ldd	r25, Y+2	; 0x02
    17d4:	ab 81       	ldd	r26, Y+3	; 0x03
    17d6:	bc 81       	ldd	r27, Y+4	; 0x04
    17d8:	28 17       	cp	r18, r24
    17da:	39 07       	cpc	r19, r25
    17dc:	4a 07       	cpc	r20, r26
    17de:	5b 07       	cpc	r21, r27
    17e0:	08 f4       	brcc	.+2      	; 0x17e4 <create_chain+0xa4>
    17e2:	89 c0       	rjmp	.+274    	; 0x18f6 <create_chain+0x1b6>
    17e4:	53 01       	movw	r10, r6
    17e6:	42 01       	movw	r8, r4
    17e8:	05 c0       	rjmp	.+10     	; 0x17f4 <create_chain+0xb4>
    17ea:	b1 e0       	ldi	r27, 0x01	; 1
    17ec:	8b 2e       	mov	r8, r27
    17ee:	91 2c       	mov	r9, r1
    17f0:	a1 2c       	mov	r10, r1
    17f2:	b1 2c       	mov	r11, r1
    17f4:	75 01       	movw	r14, r10
    17f6:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    17f8:	08 94       	sec
    17fa:	c1 1c       	adc	r12, r1
    17fc:	d1 1c       	adc	r13, r1
    17fe:	e1 1c       	adc	r14, r1
    1800:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	ab 81       	ldd	r26, Y+3	; 0x03
    1808:	bc 81       	ldd	r27, Y+4	; 0x04
    180a:	c8 16       	cp	r12, r24
    180c:	d9 06       	cpc	r13, r25
    180e:	ea 06       	cpc	r14, r26
    1810:	fb 06       	cpc	r15, r27
    1812:	60 f0       	brcs	.+24     	; 0x182c <create_chain+0xec>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    1814:	92 e0       	ldi	r25, 0x02	; 2
    1816:	89 16       	cp	r8, r25
    1818:	91 04       	cpc	r9, r1
    181a:	a1 04       	cpc	r10, r1
    181c:	b1 04       	cpc	r11, r1
    181e:	08 f4       	brcc	.+2      	; 0x1822 <create_chain+0xe2>
    1820:	61 c0       	rjmp	.+194    	; 0x18e4 <create_chain+0x1a4>
    1822:	a2 e0       	ldi	r26, 0x02	; 2
    1824:	ca 2e       	mov	r12, r26
    1826:	d1 2c       	mov	r13, r1
    1828:	e1 2c       	mov	r14, r1
    182a:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    182c:	c1 01       	movw	r24, r2
    182e:	b7 01       	movw	r22, r14
    1830:	a6 01       	movw	r20, r12
    1832:	0e 94 4f 09 	call	0x129e	; 0x129e <get_fat>
    1836:	9b 01       	movw	r18, r22
    1838:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    183a:	61 15       	cp	r22, r1
    183c:	71 05       	cpc	r23, r1
    183e:	81 05       	cpc	r24, r1
    1840:	91 05       	cpc	r25, r1
    1842:	a9 f0       	breq	.+42     	; 0x186e <create_chain+0x12e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    1844:	6f 3f       	cpi	r22, 0xFF	; 255
    1846:	af ef       	ldi	r26, 0xFF	; 255
    1848:	7a 07       	cpc	r23, r26
    184a:	af ef       	ldi	r26, 0xFF	; 255
    184c:	8a 07       	cpc	r24, r26
    184e:	af ef       	ldi	r26, 0xFF	; 255
    1850:	9a 07       	cpc	r25, r26
    1852:	09 f4       	brne	.+2      	; 0x1856 <create_chain+0x116>
    1854:	50 c0       	rjmp	.+160    	; 0x18f6 <create_chain+0x1b6>
    1856:	61 30       	cpi	r22, 0x01	; 1
    1858:	71 05       	cpc	r23, r1
    185a:	81 05       	cpc	r24, r1
    185c:	91 05       	cpc	r25, r1
    185e:	09 f4       	brne	.+2      	; 0x1862 <create_chain+0x122>
    1860:	4a c0       	rjmp	.+148    	; 0x18f6 <create_chain+0x1b6>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    1862:	c8 14       	cp	r12, r8
    1864:	d9 04       	cpc	r13, r9
    1866:	ea 04       	cpc	r14, r10
    1868:	fb 04       	cpc	r15, r11
    186a:	31 f6       	brne	.-116    	; 0x17f8 <create_chain+0xb8>
    186c:	3b c0       	rjmp	.+118    	; 0x18e4 <create_chain+0x1a4>
    186e:	bc 2c       	mov	r11, r12
    1870:	ad 2c       	mov	r10, r13
    1872:	9e 2c       	mov	r9, r14
    1874:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    1876:	c1 01       	movw	r24, r2
    1878:	a6 01       	movw	r20, r12
    187a:	b7 01       	movw	r22, r14
    187c:	0f ef       	ldi	r16, 0xFF	; 255
    187e:	1f ef       	ldi	r17, 0xFF	; 255
    1880:	2f ef       	ldi	r18, 0xFF	; 255
    1882:	3f e0       	ldi	r19, 0x0F	; 15
    1884:	0e 94 39 0a 	call	0x1472	; 0x1472 <put_fat>
    1888:	88 23       	and	r24, r24
    188a:	89 f5       	brne	.+98     	; 0x18ee <create_chain+0x1ae>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    188c:	41 14       	cp	r4, r1
    188e:	51 04       	cpc	r5, r1
    1890:	61 04       	cpc	r6, r1
    1892:	71 04       	cpc	r7, r1
    1894:	49 f0       	breq	.+18     	; 0x18a8 <create_chain+0x168>
		if (put_fat(fs, clst, ncl))
    1896:	c1 01       	movw	r24, r2
    1898:	b3 01       	movw	r22, r6
    189a:	a2 01       	movw	r20, r4
    189c:	86 01       	movw	r16, r12
    189e:	97 01       	movw	r18, r14
    18a0:	0e 94 39 0a 	call	0x1472	; 0x1472 <put_fat>
    18a4:	88 23       	and	r24, r24
    18a6:	19 f5       	brne	.+70     	; 0x18ee <create_chain+0x1ae>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    18a8:	f1 01       	movw	r30, r2
    18aa:	b2 86       	std	Z+10, r11	; 0x0a
    18ac:	a3 86       	std	Z+11, r10	; 0x0b
    18ae:	94 86       	std	Z+12, r9	; 0x0c
    18b0:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    18b2:	86 85       	ldd	r24, Z+14	; 0x0e
    18b4:	97 85       	ldd	r25, Z+15	; 0x0f
    18b6:	a0 89       	ldd	r26, Z+16	; 0x10
    18b8:	b1 89       	ldd	r27, Z+17	; 0x11
    18ba:	8f 3f       	cpi	r24, 0xFF	; 255
    18bc:	ff ef       	ldi	r31, 0xFF	; 255
    18be:	9f 07       	cpc	r25, r31
    18c0:	ff ef       	ldi	r31, 0xFF	; 255
    18c2:	af 07       	cpc	r26, r31
    18c4:	ff ef       	ldi	r31, 0xFF	; 255
    18c6:	bf 07       	cpc	r27, r31
    18c8:	51 f0       	breq	.+20     	; 0x18de <create_chain+0x19e>
		fs->free_clust--;
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	a1 09       	sbc	r26, r1
    18ce:	b1 09       	sbc	r27, r1
    18d0:	f1 01       	movw	r30, r2
    18d2:	86 87       	std	Z+14, r24	; 0x0e
    18d4:	97 87       	std	Z+15, r25	; 0x0f
    18d6:	a0 8b       	std	Z+16, r26	; 0x10
    18d8:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	85 83       	std	Z+5, r24	; 0x05
    18de:	a7 01       	movw	r20, r14
    18e0:	96 01       	movw	r18, r12
    18e2:	09 c0       	rjmp	.+18     	; 0x18f6 <create_chain+0x1b6>
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	50 e0       	ldi	r21, 0x00	; 0
    18ec:	04 c0       	rjmp	.+8      	; 0x18f6 <create_chain+0x1b6>
    18ee:	2f ef       	ldi	r18, 0xFF	; 255
    18f0:	3f ef       	ldi	r19, 0xFF	; 255
    18f2:	4f ef       	ldi	r20, 0xFF	; 255
    18f4:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    18f6:	b9 01       	movw	r22, r18
    18f8:	ca 01       	movw	r24, r20
    18fa:	24 96       	adiw	r28, 0x04	; 4
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	1f 91       	pop	r17
    1906:	0f 91       	pop	r16
    1908:	ff 90       	pop	r15
    190a:	ef 90       	pop	r14
    190c:	df 90       	pop	r13
    190e:	cf 90       	pop	r12
    1910:	bf 90       	pop	r11
    1912:	af 90       	pop	r10
    1914:	9f 90       	pop	r9
    1916:	8f 90       	pop	r8
    1918:	7f 90       	pop	r7
    191a:	6f 90       	pop	r6
    191c:	5f 90       	pop	r5
    191e:	4f 90       	pop	r4
    1920:	3f 90       	pop	r3
    1922:	2f 90       	pop	r2
    1924:	08 95       	ret

00001926 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	ec 01       	movw	r28, r24
    1934:	7a 01       	movw	r14, r20
    1936:	8b 01       	movw	r16, r22
	clst -= 2;
    1938:	8e ef       	ldi	r24, 0xFE	; 254
    193a:	9f ef       	ldi	r25, 0xFF	; 255
    193c:	af ef       	ldi	r26, 0xFF	; 255
    193e:	bf ef       	ldi	r27, 0xFF	; 255
    1940:	e8 0e       	add	r14, r24
    1942:	f9 1e       	adc	r15, r25
    1944:	0a 1f       	adc	r16, r26
    1946:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1948:	8a 8d       	ldd	r24, Y+26	; 0x1a
    194a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    194c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    194e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1950:	02 97       	sbiw	r24, 0x02	; 2
    1952:	a1 09       	sbc	r26, r1
    1954:	b1 09       	sbc	r27, r1
    1956:	e8 16       	cp	r14, r24
    1958:	f9 06       	cpc	r15, r25
    195a:	0a 07       	cpc	r16, r26
    195c:	1b 07       	cpc	r17, r27
    195e:	28 f0       	brcs	.+10     	; 0x196a <clust2sect+0x44>
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	50 e0       	ldi	r21, 0x00	; 0
    1968:	12 c0       	rjmp	.+36     	; 0x198e <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    196a:	2a 81       	ldd	r18, Y+2	; 0x02
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	c8 01       	movw	r24, r16
    1974:	b7 01       	movw	r22, r14
    1976:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    197a:	9b 01       	movw	r18, r22
    197c:	ac 01       	movw	r20, r24
    197e:	8e a1       	ldd	r24, Y+38	; 0x26
    1980:	9f a1       	ldd	r25, Y+39	; 0x27
    1982:	a8 a5       	ldd	r26, Y+40	; 0x28
    1984:	b9 a5       	ldd	r27, Y+41	; 0x29
    1986:	28 0f       	add	r18, r24
    1988:	39 1f       	adc	r19, r25
    198a:	4a 1f       	adc	r20, r26
    198c:	5b 1f       	adc	r21, r27
}
    198e:	b9 01       	movw	r22, r18
    1990:	ca 01       	movw	r24, r20
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	1f 91       	pop	r17
    1998:	0f 91       	pop	r16
    199a:	ff 90       	pop	r15
    199c:	ef 90       	pop	r14
    199e:	08 95       	ret

000019a0 <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    19a0:	af 92       	push	r10
    19a2:	bf 92       	push	r11
    19a4:	cf 92       	push	r12
    19a6:	df 92       	push	r13
    19a8:	ef 92       	push	r14
    19aa:	ff 92       	push	r15
    19ac:	0f 93       	push	r16
    19ae:	1f 93       	push	r17
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	5c 01       	movw	r10, r24
    19b6:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    19b8:	dc 01       	movw	r26, r24
    19ba:	14 96       	adiw	r26, 0x04	; 4
    19bc:	6d 93       	st	X+, r22
    19be:	7c 93       	st	X, r23
    19c0:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    19c2:	16 96       	adiw	r26, 0x06	; 6
    19c4:	4d 91       	ld	r20, X+
    19c6:	5d 91       	ld	r21, X+
    19c8:	6d 91       	ld	r22, X+
    19ca:	7c 91       	ld	r23, X
    19cc:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    19ce:	41 30       	cpi	r20, 0x01	; 1
    19d0:	51 05       	cpc	r21, r1
    19d2:	61 05       	cpc	r22, r1
    19d4:	71 05       	cpc	r23, r1
    19d6:	09 f4       	brne	.+2      	; 0x19da <dir_seek+0x3a>
    19d8:	d3 c0       	rjmp	.+422    	; 0x1b80 <dir_seek+0x1e0>
    19da:	ed 91       	ld	r30, X+
    19dc:	fc 91       	ld	r31, X
    19de:	82 8d       	ldd	r24, Z+26	; 0x1a
    19e0:	93 8d       	ldd	r25, Z+27	; 0x1b
    19e2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    19e4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    19e6:	48 17       	cp	r20, r24
    19e8:	59 07       	cpc	r21, r25
    19ea:	6a 07       	cpc	r22, r26
    19ec:	7b 07       	cpc	r23, r27
    19ee:	08 f0       	brcs	.+2      	; 0x19f2 <dir_seek+0x52>
    19f0:	c7 c0       	rjmp	.+398    	; 0x1b80 <dir_seek+0x1e0>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    19f2:	41 15       	cp	r20, r1
    19f4:	51 05       	cpc	r21, r1
    19f6:	61 05       	cpc	r22, r1
    19f8:	71 05       	cpc	r23, r1
    19fa:	81 f5       	brne	.+96     	; 0x1a5c <dir_seek+0xbc>
    19fc:	80 81       	ld	r24, Z
    19fe:	83 30       	cpi	r24, 0x03	; 3
    1a00:	49 f4       	brne	.+18     	; 0x1a14 <dir_seek+0x74>
		clst = dj->fs->dirbase;
    1a02:	42 a1       	ldd	r20, Z+34	; 0x22
    1a04:	53 a1       	ldd	r21, Z+35	; 0x23
    1a06:	64 a1       	ldd	r22, Z+36	; 0x24
    1a08:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table */
    1a0a:	41 15       	cp	r20, r1
    1a0c:	51 05       	cpc	r21, r1
    1a0e:	61 05       	cpc	r22, r1
    1a10:	71 05       	cpc	r23, r1
    1a12:	21 f5       	brne	.+72     	; 0x1a5c <dir_seek+0xbc>
		dj->clust = clst;
    1a14:	f5 01       	movw	r30, r10
    1a16:	12 86       	std	Z+10, r1	; 0x0a
    1a18:	13 86       	std	Z+11, r1	; 0x0b
    1a1a:	14 86       	std	Z+12, r1	; 0x0c
    1a1c:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1a1e:	01 90       	ld	r0, Z+
    1a20:	f0 81       	ld	r31, Z
    1a22:	e0 2d       	mov	r30, r0
    1a24:	80 85       	ldd	r24, Z+8	; 0x08
    1a26:	91 85       	ldd	r25, Z+9	; 0x09
    1a28:	c8 16       	cp	r12, r24
    1a2a:	d9 06       	cpc	r13, r25
    1a2c:	08 f0       	brcs	.+2      	; 0x1a30 <dir_seek+0x90>
    1a2e:	a8 c0       	rjmp	.+336    	; 0x1b80 <dir_seek+0x1e0>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    1a30:	c6 01       	movw	r24, r12
    1a32:	24 e0       	ldi	r18, 0x04	; 4
    1a34:	96 95       	lsr	r25
    1a36:	87 95       	ror	r24
    1a38:	2a 95       	dec	r18
    1a3a:	e1 f7       	brne	.-8      	; 0x1a34 <dir_seek+0x94>
    1a3c:	a0 e0       	ldi	r26, 0x00	; 0
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	22 a1       	ldd	r18, Z+34	; 0x22
    1a42:	33 a1       	ldd	r19, Z+35	; 0x23
    1a44:	44 a1       	ldd	r20, Z+36	; 0x24
    1a46:	55 a1       	ldd	r21, Z+37	; 0x25
    1a48:	82 0f       	add	r24, r18
    1a4a:	93 1f       	adc	r25, r19
    1a4c:	a4 1f       	adc	r26, r20
    1a4e:	b5 1f       	adc	r27, r21
    1a50:	f5 01       	movw	r30, r10
    1a52:	86 87       	std	Z+14, r24	; 0x0e
    1a54:	97 87       	std	Z+15, r25	; 0x0f
    1a56:	a0 8b       	std	Z+16, r26	; 0x10
    1a58:	b1 8b       	std	Z+17, r27	; 0x11
    1a5a:	7a c0       	rjmp	.+244    	; 0x1b50 <dir_seek+0x1b0>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    1a5c:	82 81       	ldd	r24, Z+2	; 0x02
    1a5e:	08 2f       	mov	r16, r24
    1a60:	10 e0       	ldi	r17, 0x00	; 0
    1a62:	94 e0       	ldi	r25, 0x04	; 4
    1a64:	00 0f       	add	r16, r16
    1a66:	11 1f       	adc	r17, r17
    1a68:	9a 95       	dec	r25
    1a6a:	e1 f7       	brne	.-8      	; 0x1a64 <dir_seek+0xc4>
    1a6c:	24 c0       	rjmp	.+72     	; 0x1ab6 <dir_seek+0x116>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1a6e:	ce 01       	movw	r24, r28
    1a70:	0e 94 4f 09 	call	0x129e	; 0x129e <get_fat>
    1a74:	ab 01       	movw	r20, r22
    1a76:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1a78:	4f 3f       	cpi	r20, 0xFF	; 255
    1a7a:	ff ef       	ldi	r31, 0xFF	; 255
    1a7c:	5f 07       	cpc	r21, r31
    1a7e:	ff ef       	ldi	r31, 0xFF	; 255
    1a80:	6f 07       	cpc	r22, r31
    1a82:	ff ef       	ldi	r31, 0xFF	; 255
    1a84:	7f 07       	cpc	r23, r31
    1a86:	11 f4       	brne	.+4      	; 0x1a8c <dir_seek+0xec>
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	7b c0       	rjmp	.+246    	; 0x1b82 <dir_seek+0x1e2>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    1a8c:	42 30       	cpi	r20, 0x02	; 2
    1a8e:	51 05       	cpc	r21, r1
    1a90:	61 05       	cpc	r22, r1
    1a92:	71 05       	cpc	r23, r1
    1a94:	08 f4       	brcc	.+2      	; 0x1a98 <dir_seek+0xf8>
    1a96:	74 c0       	rjmp	.+232    	; 0x1b80 <dir_seek+0x1e0>
    1a98:	d5 01       	movw	r26, r10
    1a9a:	ed 91       	ld	r30, X+
    1a9c:	fc 91       	ld	r31, X
    1a9e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1aa0:	93 8d       	ldd	r25, Z+27	; 0x1b
    1aa2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1aa4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1aa6:	48 17       	cp	r20, r24
    1aa8:	59 07       	cpc	r21, r25
    1aaa:	6a 07       	cpc	r22, r26
    1aac:	7b 07       	cpc	r23, r27
    1aae:	08 f0       	brcs	.+2      	; 0x1ab2 <dir_seek+0x112>
    1ab0:	67 c0       	rjmp	.+206    	; 0x1b80 <dir_seek+0x1e0>
				return FR_INT_ERR;
			idx -= ic;
    1ab2:	c0 1a       	sub	r12, r16
    1ab4:	d1 0a       	sbc	r13, r17
    1ab6:	f5 01       	movw	r30, r10
    1ab8:	c0 81       	ld	r28, Z
    1aba:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1abc:	c0 16       	cp	r12, r16
    1abe:	d1 06       	cpc	r13, r17
    1ac0:	b0 f6       	brcc	.-84     	; 0x1a6e <dir_seek+0xce>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1ac2:	d5 01       	movw	r26, r10
    1ac4:	1a 96       	adiw	r26, 0x0a	; 10
    1ac6:	4d 93       	st	X+, r20
    1ac8:	5d 93       	st	X+, r21
    1aca:	6d 93       	st	X+, r22
    1acc:	7c 93       	st	X, r23
    1ace:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1ad0:	8e ef       	ldi	r24, 0xFE	; 254
    1ad2:	e8 2e       	mov	r14, r24
    1ad4:	8f ef       	ldi	r24, 0xFF	; 255
    1ad6:	f8 2e       	mov	r15, r24
    1ad8:	8f ef       	ldi	r24, 0xFF	; 255
    1ada:	08 2f       	mov	r16, r24
    1adc:	8f ef       	ldi	r24, 0xFF	; 255
    1ade:	18 2f       	mov	r17, r24
    1ae0:	e4 0e       	add	r14, r20
    1ae2:	f5 1e       	adc	r15, r21
    1ae4:	06 1f       	adc	r16, r22
    1ae6:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1ae8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1aea:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1aec:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1aee:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1af0:	02 97       	sbiw	r24, 0x02	; 2
    1af2:	a1 09       	sbc	r26, r1
    1af4:	b1 09       	sbc	r27, r1
    1af6:	e8 16       	cp	r14, r24
    1af8:	f9 06       	cpc	r15, r25
    1afa:	0a 07       	cpc	r16, r26
    1afc:	1b 07       	cpc	r17, r27
    1afe:	28 f0       	brcs	.+10     	; 0x1b0a <dir_seek+0x16a>
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	50 e0       	ldi	r21, 0x00	; 0
    1b08:	12 c0       	rjmp	.+36     	; 0x1b2e <dir_seek+0x18e>
	return clst * fs->csize + fs->database;
    1b0a:	2a 81       	ldd	r18, Y+2	; 0x02
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e0       	ldi	r20, 0x00	; 0
    1b10:	50 e0       	ldi	r21, 0x00	; 0
    1b12:	c8 01       	movw	r24, r16
    1b14:	b7 01       	movw	r22, r14
    1b16:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    1b1a:	9b 01       	movw	r18, r22
    1b1c:	ac 01       	movw	r20, r24
    1b1e:	8e a1       	ldd	r24, Y+38	; 0x26
    1b20:	9f a1       	ldd	r25, Y+39	; 0x27
    1b22:	a8 a5       	ldd	r26, Y+40	; 0x28
    1b24:	b9 a5       	ldd	r27, Y+41	; 0x29
    1b26:	28 0f       	add	r18, r24
    1b28:	39 1f       	adc	r19, r25
    1b2a:	4a 1f       	adc	r20, r26
    1b2c:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    1b2e:	c6 01       	movw	r24, r12
    1b30:	04 e0       	ldi	r16, 0x04	; 4
    1b32:	96 95       	lsr	r25
    1b34:	87 95       	ror	r24
    1b36:	0a 95       	dec	r16
    1b38:	e1 f7       	brne	.-8      	; 0x1b32 <dir_seek+0x192>
    1b3a:	a0 e0       	ldi	r26, 0x00	; 0
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	28 0f       	add	r18, r24
    1b40:	39 1f       	adc	r19, r25
    1b42:	4a 1f       	adc	r20, r26
    1b44:	5b 1f       	adc	r21, r27
    1b46:	f5 01       	movw	r30, r10
    1b48:	26 87       	std	Z+14, r18	; 0x0e
    1b4a:	37 87       	std	Z+15, r19	; 0x0f
    1b4c:	40 8b       	std	Z+16, r20	; 0x10
    1b4e:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    1b50:	ff e0       	ldi	r31, 0x0F	; 15
    1b52:	cf 22       	and	r12, r31
    1b54:	dd 24       	eor	r13, r13
    1b56:	15 e0       	ldi	r17, 0x05	; 5
    1b58:	cc 0c       	add	r12, r12
    1b5a:	dd 1c       	adc	r13, r13
    1b5c:	1a 95       	dec	r17
    1b5e:	e1 f7       	brne	.-8      	; 0x1b58 <dir_seek+0x1b8>
    1b60:	8e e2       	ldi	r24, 0x2E	; 46
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	c8 0e       	add	r12, r24
    1b66:	d9 1e       	adc	r13, r25
    1b68:	d5 01       	movw	r26, r10
    1b6a:	8d 91       	ld	r24, X+
    1b6c:	9c 91       	ld	r25, X
    1b6e:	11 97       	sbiw	r26, 0x01	; 1
    1b70:	8c 0d       	add	r24, r12
    1b72:	9d 1d       	adc	r25, r13
    1b74:	52 96       	adiw	r26, 0x12	; 18
    1b76:	8d 93       	st	X+, r24
    1b78:	9c 93       	st	X, r25
    1b7a:	53 97       	sbiw	r26, 0x13	; 19
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	01 c0       	rjmp	.+2      	; 0x1b82 <dir_seek+0x1e2>

	return FR_OK;	/* Seek succeeded */
    1b80:	82 e0       	ldi	r24, 0x02	; 2
}
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	1f 91       	pop	r17
    1b88:	0f 91       	pop	r16
    1b8a:	ff 90       	pop	r15
    1b8c:	ef 90       	pop	r14
    1b8e:	df 90       	pop	r13
    1b90:	cf 90       	pop	r12
    1b92:	bf 90       	pop	r11
    1b94:	af 90       	pop	r10
    1b96:	08 95       	ret

00001b98 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    1b98:	4f 92       	push	r4
    1b9a:	5f 92       	push	r5
    1b9c:	6f 92       	push	r6
    1b9e:	7f 92       	push	r7
    1ba0:	8f 92       	push	r8
    1ba2:	9f 92       	push	r9
    1ba4:	af 92       	push	r10
    1ba6:	bf 92       	push	r11
    1ba8:	cf 92       	push	r12
    1baa:	df 92       	push	r13
    1bac:	ef 92       	push	r14
    1bae:	ff 92       	push	r15
    1bb0:	0f 93       	push	r16
    1bb2:	1f 93       	push	r17
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	ec 01       	movw	r28, r24
    1bba:	d6 2e       	mov	r13, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    1bbc:	6c 80       	ldd	r6, Y+4	; 0x04
    1bbe:	7d 80       	ldd	r7, Y+5	; 0x05
    1bc0:	08 94       	sec
    1bc2:	61 1c       	adc	r6, r1
    1bc4:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1bc6:	61 14       	cp	r6, r1
    1bc8:	71 04       	cpc	r7, r1
    1bca:	09 f4       	brne	.+2      	; 0x1bce <dir_next+0x36>
    1bcc:	4c c1       	rjmp	.+664    	; 0x1e66 <dir_next+0x2ce>
    1bce:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bd0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bd2:	a8 89       	ldd	r26, Y+16	; 0x10
    1bd4:	b9 89       	ldd	r27, Y+17	; 0x11
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	a1 05       	cpc	r26, r1
    1bda:	b1 05       	cpc	r27, r1
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <dir_next+0x48>
    1bde:	43 c1       	rjmp	.+646    	; 0x1e66 <dir_next+0x2ce>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    1be0:	1f e0       	ldi	r17, 0x0F	; 15
    1be2:	41 2e       	mov	r4, r17
    1be4:	51 2c       	mov	r5, r1
    1be6:	46 20       	and	r4, r6
    1be8:	57 20       	and	r5, r7
    1bea:	41 14       	cp	r4, r1
    1bec:	51 04       	cpc	r5, r1
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <dir_next+0x5a>
    1bf0:	27 c1       	rjmp	.+590    	; 0x1e40 <dir_next+0x2a8>
		dj->sect++;					/* Next sector */
    1bf2:	01 96       	adiw	r24, 0x01	; 1
    1bf4:	a1 1d       	adc	r26, r1
    1bf6:	b1 1d       	adc	r27, r1
    1bf8:	8e 87       	std	Y+14, r24	; 0x0e
    1bfa:	9f 87       	std	Y+15, r25	; 0x0f
    1bfc:	a8 8b       	std	Y+16, r26	; 0x10
    1bfe:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1c00:	4a 85       	ldd	r20, Y+10	; 0x0a
    1c02:	5b 85       	ldd	r21, Y+11	; 0x0b
    1c04:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c06:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c08:	e8 81       	ld	r30, Y
    1c0a:	f9 81       	ldd	r31, Y+1	; 0x01
    1c0c:	41 15       	cp	r20, r1
    1c0e:	51 05       	cpc	r21, r1
    1c10:	61 05       	cpc	r22, r1
    1c12:	71 05       	cpc	r23, r1
    1c14:	39 f4       	brne	.+14     	; 0x1c24 <dir_next+0x8c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1c16:	80 85       	ldd	r24, Z+8	; 0x08
    1c18:	91 85       	ldd	r25, Z+9	; 0x09
    1c1a:	68 16       	cp	r6, r24
    1c1c:	79 06       	cpc	r7, r25
    1c1e:	08 f4       	brcc	.+2      	; 0x1c22 <dir_next+0x8a>
    1c20:	0f c1       	rjmp	.+542    	; 0x1e40 <dir_next+0x2a8>
    1c22:	21 c1       	rjmp	.+578    	; 0x1e66 <dir_next+0x2ce>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	93 01       	movw	r18, r6
    1c2c:	a4 e0       	ldi	r26, 0x04	; 4
    1c2e:	36 95       	lsr	r19
    1c30:	27 95       	ror	r18
    1c32:	aa 95       	dec	r26
    1c34:	e1 f7       	brne	.-8      	; 0x1c2e <dir_next+0x96>
    1c36:	82 23       	and	r24, r18
    1c38:	93 23       	and	r25, r19
    1c3a:	89 2b       	or	r24, r25
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <dir_next+0xa8>
    1c3e:	00 c1       	rjmp	.+512    	; 0x1e40 <dir_next+0x2a8>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    1c40:	cf 01       	movw	r24, r30
    1c42:	0e 94 4f 09 	call	0x129e	; 0x129e <get_fat>
    1c46:	7b 01       	movw	r14, r22
    1c48:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    1c4a:	62 30       	cpi	r22, 0x02	; 2
    1c4c:	71 05       	cpc	r23, r1
    1c4e:	81 05       	cpc	r24, r1
    1c50:	91 05       	cpc	r25, r1
    1c52:	08 f4       	brcc	.+2      	; 0x1c56 <dir_next+0xbe>
    1c54:	0a c1       	rjmp	.+532    	; 0x1e6a <dir_next+0x2d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1c56:	8f ef       	ldi	r24, 0xFF	; 255
    1c58:	e8 16       	cp	r14, r24
    1c5a:	8f ef       	ldi	r24, 0xFF	; 255
    1c5c:	f8 06       	cpc	r15, r24
    1c5e:	8f ef       	ldi	r24, 0xFF	; 255
    1c60:	08 07       	cpc	r16, r24
    1c62:	8f ef       	ldi	r24, 0xFF	; 255
    1c64:	18 07       	cpc	r17, r24
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <dir_next+0xd2>
    1c68:	02 c1       	rjmp	.+516    	; 0x1e6e <dir_next+0x2d6>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    1c6a:	e8 81       	ld	r30, Y
    1c6c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c6e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c70:	93 8d       	ldd	r25, Z+27	; 0x1b
    1c72:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1c74:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1c76:	e8 16       	cp	r14, r24
    1c78:	f9 06       	cpc	r15, r25
    1c7a:	0a 07       	cpc	r16, r26
    1c7c:	1b 07       	cpc	r17, r27
    1c7e:	08 f4       	brcc	.+2      	; 0x1c82 <dir_next+0xea>
    1c80:	a6 c0       	rjmp	.+332    	; 0x1dce <dir_next+0x236>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    1c82:	dd 20       	and	r13, r13
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <dir_next+0xf0>
    1c86:	ef c0       	rjmp	.+478    	; 0x1e66 <dir_next+0x2ce>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    1c88:	4a 85       	ldd	r20, Y+10	; 0x0a
    1c8a:	5b 85       	ldd	r21, Y+11	; 0x0b
    1c8c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c8e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c90:	cf 01       	movw	r24, r30
    1c92:	0e 94 a0 0b 	call	0x1740	; 0x1740 <create_chain>
    1c96:	7b 01       	movw	r14, r22
    1c98:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1c9a:	61 15       	cp	r22, r1
    1c9c:	71 05       	cpc	r23, r1
    1c9e:	81 05       	cpc	r24, r1
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	11 f4       	brne	.+4      	; 0x1ca8 <dir_next+0x110>
    1ca4:	87 e0       	ldi	r24, 0x07	; 7
    1ca6:	e4 c0       	rjmp	.+456    	; 0x1e70 <dir_next+0x2d8>
					if (clst == 1) return FR_INT_ERR;
    1ca8:	91 e0       	ldi	r25, 0x01	; 1
    1caa:	e9 16       	cp	r14, r25
    1cac:	f1 04       	cpc	r15, r1
    1cae:	01 05       	cpc	r16, r1
    1cb0:	11 05       	cpc	r17, r1
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <dir_next+0x11e>
    1cb4:	da c0       	rjmp	.+436    	; 0x1e6a <dir_next+0x2d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1cb6:	af ef       	ldi	r26, 0xFF	; 255
    1cb8:	ea 16       	cp	r14, r26
    1cba:	af ef       	ldi	r26, 0xFF	; 255
    1cbc:	fa 06       	cpc	r15, r26
    1cbe:	af ef       	ldi	r26, 0xFF	; 255
    1cc0:	0a 07       	cpc	r16, r26
    1cc2:	af ef       	ldi	r26, 0xFF	; 255
    1cc4:	1a 07       	cpc	r17, r26
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <dir_next+0x132>
    1cc8:	d2 c0       	rjmp	.+420    	; 0x1e6e <dir_next+0x2d6>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    1cca:	88 81       	ld	r24, Y
    1ccc:	99 81       	ldd	r25, Y+1	; 0x01
    1cce:	40 e0       	ldi	r20, 0x00	; 0
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	70 e0       	ldi	r23, 0x00	; 0
    1cd6:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    1cda:	88 23       	and	r24, r24
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <dir_next+0x148>
    1cde:	c7 c0       	rjmp	.+398    	; 0x1e6e <dir_next+0x2d6>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1ce0:	e8 81       	ld	r30, Y
    1ce2:	f9 81       	ldd	r31, Y+1	; 0x01
    1ce4:	be 96       	adiw	r30, 0x2e	; 46
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	92 e0       	ldi	r25, 0x02	; 2
    1cea:	01 c0       	rjmp	.+2      	; 0x1cee <dir_next+0x156>
	while (cnt--) *d++ = (char)val;
    1cec:	11 92       	st	Z+, r1
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	bf ef       	ldi	r27, 0xFF	; 255
    1cf2:	8f 3f       	cpi	r24, 0xFF	; 255
    1cf4:	9b 07       	cpc	r25, r27
    1cf6:	d1 f7       	brne	.-12     	; 0x1cec <dir_next+0x154>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1cf8:	88 80       	ld	r8, Y
    1cfa:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1cfc:	4e ef       	ldi	r20, 0xFE	; 254
    1cfe:	a4 2e       	mov	r10, r20
    1d00:	4f ef       	ldi	r20, 0xFF	; 255
    1d02:	b4 2e       	mov	r11, r20
    1d04:	4f ef       	ldi	r20, 0xFF	; 255
    1d06:	c4 2e       	mov	r12, r20
    1d08:	4f ef       	ldi	r20, 0xFF	; 255
    1d0a:	d4 2e       	mov	r13, r20
    1d0c:	ae 0c       	add	r10, r14
    1d0e:	bf 1c       	adc	r11, r15
    1d10:	c0 1e       	adc	r12, r16
    1d12:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1d14:	f4 01       	movw	r30, r8
    1d16:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d18:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d1a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1d1c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1d1e:	02 97       	sbiw	r24, 0x02	; 2
    1d20:	a1 09       	sbc	r26, r1
    1d22:	b1 09       	sbc	r27, r1
    1d24:	a8 16       	cp	r10, r24
    1d26:	b9 06       	cpc	r11, r25
    1d28:	ca 06       	cpc	r12, r26
    1d2a:	db 06       	cpc	r13, r27
    1d2c:	28 f0       	brcs	.+10     	; 0x1d38 <dir_next+0x1a0>
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e0       	ldi	r20, 0x00	; 0
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	15 c0       	rjmp	.+42     	; 0x1d62 <dir_next+0x1ca>
	return clst * fs->csize + fs->database;
    1d38:	d4 01       	movw	r26, r8
    1d3a:	12 96       	adiw	r26, 0x02	; 2
    1d3c:	2c 91       	ld	r18, X
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	c6 01       	movw	r24, r12
    1d46:	b5 01       	movw	r22, r10
    1d48:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    1d4c:	9b 01       	movw	r18, r22
    1d4e:	ac 01       	movw	r20, r24
    1d50:	f4 01       	movw	r30, r8
    1d52:	86 a1       	ldd	r24, Z+38	; 0x26
    1d54:	97 a1       	ldd	r25, Z+39	; 0x27
    1d56:	a0 a5       	ldd	r26, Z+40	; 0x28
    1d58:	b1 a5       	ldd	r27, Z+41	; 0x29
    1d5a:	28 0f       	add	r18, r24
    1d5c:	39 1f       	adc	r19, r25
    1d5e:	4a 1f       	adc	r20, r26
    1d60:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1d62:	d4 01       	movw	r26, r8
    1d64:	9a 96       	adiw	r26, 0x2a	; 42
    1d66:	2d 93       	st	X+, r18
    1d68:	3d 93       	st	X+, r19
    1d6a:	4d 93       	st	X+, r20
    1d6c:	5c 93       	st	X, r21
    1d6e:	9d 97       	sbiw	r26, 0x2d	; 45
    1d70:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    1d72:	cc 24       	eor	r12, r12
    1d74:	c3 94       	inc	r12
    1d76:	1a c0       	rjmp	.+52     	; 0x1dac <dir_next+0x214>
    1d78:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1d7a:	88 81       	ld	r24, Y
    1d7c:	99 81       	ldd	r25, Y+1	; 0x01
    1d7e:	40 e0       	ldi	r20, 0x00	; 0
    1d80:	50 e0       	ldi	r21, 0x00	; 0
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	70 e0       	ldi	r23, 0x00	; 0
    1d86:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    1d8a:	88 23       	and	r24, r24
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <dir_next+0x1f8>
    1d8e:	6f c0       	rjmp	.+222    	; 0x1e6e <dir_next+0x2d6>
						dj->fs->winsect++;
    1d90:	e8 81       	ld	r30, Y
    1d92:	f9 81       	ldd	r31, Y+1	; 0x01
    1d94:	82 a5       	ldd	r24, Z+42	; 0x2a
    1d96:	93 a5       	ldd	r25, Z+43	; 0x2b
    1d98:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1d9a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	a1 1d       	adc	r26, r1
    1da0:	b1 1d       	adc	r27, r1
    1da2:	82 a7       	std	Z+42, r24	; 0x2a
    1da4:	93 a7       	std	Z+43, r25	; 0x2b
    1da6:	a4 a7       	std	Z+44, r26	; 0x2c
    1da8:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1daa:	d3 94       	inc	r13
    1dac:	e8 81       	ld	r30, Y
    1dae:	f9 81       	ldd	r31, Y+1	; 0x01
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	d8 16       	cp	r13, r24
    1db4:	08 f3       	brcs	.-62     	; 0x1d78 <dir_next+0x1e0>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    1db6:	82 a5       	ldd	r24, Z+42	; 0x2a
    1db8:	93 a5       	ldd	r25, Z+43	; 0x2b
    1dba:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1dbc:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1dbe:	8d 19       	sub	r24, r13
    1dc0:	91 09       	sbc	r25, r1
    1dc2:	a1 09       	sbc	r26, r1
    1dc4:	b1 09       	sbc	r27, r1
    1dc6:	82 a7       	std	Z+42, r24	; 0x2a
    1dc8:	93 a7       	std	Z+43, r25	; 0x2b
    1dca:	a4 a7       	std	Z+44, r26	; 0x2c
    1dcc:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    1dce:	ea 86       	std	Y+10, r14	; 0x0a
    1dd0:	fb 86       	std	Y+11, r15	; 0x0b
    1dd2:	0c 87       	std	Y+12, r16	; 0x0c
    1dd4:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    1dd6:	c8 80       	ld	r12, Y
    1dd8:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1dda:	8e ef       	ldi	r24, 0xFE	; 254
    1ddc:	9f ef       	ldi	r25, 0xFF	; 255
    1dde:	af ef       	ldi	r26, 0xFF	; 255
    1de0:	bf ef       	ldi	r27, 0xFF	; 255
    1de2:	e8 0e       	add	r14, r24
    1de4:	f9 1e       	adc	r15, r25
    1de6:	0a 1f       	adc	r16, r26
    1de8:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1dea:	f6 01       	movw	r30, r12
    1dec:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dee:	93 8d       	ldd	r25, Z+27	; 0x1b
    1df0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1df2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1df4:	02 97       	sbiw	r24, 0x02	; 2
    1df6:	a1 09       	sbc	r26, r1
    1df8:	b1 09       	sbc	r27, r1
    1dfa:	e8 16       	cp	r14, r24
    1dfc:	f9 06       	cpc	r15, r25
    1dfe:	0a 07       	cpc	r16, r26
    1e00:	1b 07       	cpc	r17, r27
    1e02:	28 f0       	brcs	.+10     	; 0x1e0e <dir_next+0x276>
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	50 e0       	ldi	r21, 0x00	; 0
    1e0c:	15 c0       	rjmp	.+42     	; 0x1e38 <dir_next+0x2a0>
	return clst * fs->csize + fs->database;
    1e0e:	d6 01       	movw	r26, r12
    1e10:	12 96       	adiw	r26, 0x02	; 2
    1e12:	2c 91       	ld	r18, X
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e0       	ldi	r20, 0x00	; 0
    1e18:	50 e0       	ldi	r21, 0x00	; 0
    1e1a:	c8 01       	movw	r24, r16
    1e1c:	b7 01       	movw	r22, r14
    1e1e:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    1e22:	9b 01       	movw	r18, r22
    1e24:	ac 01       	movw	r20, r24
    1e26:	f6 01       	movw	r30, r12
    1e28:	86 a1       	ldd	r24, Z+38	; 0x26
    1e2a:	97 a1       	ldd	r25, Z+39	; 0x27
    1e2c:	a0 a5       	ldd	r26, Z+40	; 0x28
    1e2e:	b1 a5       	ldd	r27, Z+41	; 0x29
    1e30:	28 0f       	add	r18, r24
    1e32:	39 1f       	adc	r19, r25
    1e34:	4a 1f       	adc	r20, r26
    1e36:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    1e38:	2e 87       	std	Y+14, r18	; 0x0e
    1e3a:	3f 87       	std	Y+15, r19	; 0x0f
    1e3c:	48 8b       	std	Y+16, r20	; 0x10
    1e3e:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    1e40:	6c 82       	std	Y+4, r6	; 0x04
    1e42:	7d 82       	std	Y+5, r7	; 0x05
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    1e44:	35 e0       	ldi	r19, 0x05	; 5
    1e46:	44 0c       	add	r4, r4
    1e48:	55 1c       	adc	r5, r5
    1e4a:	3a 95       	dec	r19
    1e4c:	e1 f7       	brne	.-8      	; 0x1e46 <dir_next+0x2ae>
    1e4e:	8e e2       	ldi	r24, 0x2E	; 46
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	48 0e       	add	r4, r24
    1e54:	59 1e       	adc	r5, r25
    1e56:	88 81       	ld	r24, Y
    1e58:	99 81       	ldd	r25, Y+1	; 0x01
    1e5a:	84 0d       	add	r24, r4
    1e5c:	95 1d       	adc	r25, r5
    1e5e:	8a 8b       	std	Y+18, r24	; 0x12
    1e60:	9b 8b       	std	Y+19, r25	; 0x13
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	05 c0       	rjmp	.+10     	; 0x1e70 <dir_next+0x2d8>

	return FR_OK;
    1e66:	84 e0       	ldi	r24, 0x04	; 4
    1e68:	03 c0       	rjmp	.+6      	; 0x1e70 <dir_next+0x2d8>
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	01 c0       	rjmp	.+2      	; 0x1e70 <dir_next+0x2d8>
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
}
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	ff 90       	pop	r15
    1e7a:	ef 90       	pop	r14
    1e7c:	df 90       	pop	r13
    1e7e:	cf 90       	pop	r12
    1e80:	bf 90       	pop	r11
    1e82:	af 90       	pop	r10
    1e84:	9f 90       	pop	r9
    1e86:	8f 90       	pop	r8
    1e88:	7f 90       	pop	r7
    1e8a:	6f 90       	pop	r6
    1e8c:	5f 90       	pop	r5
    1e8e:	4f 90       	pop	r4
    1e90:	08 95       	ret

00001e92 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	ec 01       	movw	r28, r24
    1e98:	94 e0       	ldi	r25, 0x04	; 4
    1e9a:	1a c0       	rjmp	.+52     	; 0x1ed0 <dir_read+0x3e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    1e9c:	88 81       	ld	r24, Y
    1e9e:	99 81       	ldd	r25, Y+1	; 0x01
    1ea0:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    1ea4:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    1ea6:	88 23       	and	r24, r24
    1ea8:	f1 f4       	brne	.+60     	; 0x1ee6 <dir_read+0x54>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    1eaa:	ea 89       	ldd	r30, Y+18	; 0x12
    1eac:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    1eae:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1eb0:	88 23       	and	r24, r24
    1eb2:	09 f1       	breq	.+66     	; 0x1ef6 <dir_read+0x64>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    1eb4:	85 3e       	cpi	r24, 0xE5	; 229
    1eb6:	29 f0       	breq	.+10     	; 0x1ec2 <dir_read+0x30>
    1eb8:	8e 32       	cpi	r24, 0x2E	; 46
    1eba:	19 f0       	breq	.+6      	; 0x1ec2 <dir_read+0x30>
    1ebc:	83 85       	ldd	r24, Z+11	; 0x0b
    1ebe:	83 ff       	sbrs	r24, 3
    1ec0:	16 c0       	rjmp	.+44     	; 0x1eee <dir_read+0x5c>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <dir_next>
    1eca:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    1ecc:	88 23       	and	r24, r24
    1ece:	59 f4       	brne	.+22     	; 0x1ee6 <dir_read+0x54>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    1ed0:	4e 85       	ldd	r20, Y+14	; 0x0e
    1ed2:	5f 85       	ldd	r21, Y+15	; 0x0f
    1ed4:	68 89       	ldd	r22, Y+16	; 0x10
    1ed6:	79 89       	ldd	r23, Y+17	; 0x11
    1ed8:	41 15       	cp	r20, r1
    1eda:	51 05       	cpc	r21, r1
    1edc:	61 05       	cpc	r22, r1
    1ede:	71 05       	cpc	r23, r1
    1ee0:	e9 f6       	brne	.-70     	; 0x1e9c <dir_read+0xa>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    1ee2:	99 23       	and	r25, r25
    1ee4:	21 f0       	breq	.+8      	; 0x1eee <dir_read+0x5c>
    1ee6:	1e 86       	std	Y+14, r1	; 0x0e
    1ee8:	1f 86       	std	Y+15, r1	; 0x0f
    1eea:	18 8a       	std	Y+16, r1	; 0x10
    1eec:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    1eee:	89 2f       	mov	r24, r25
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	08 95       	ret
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    1ef6:	94 e0       	ldi	r25, 0x04	; 4
    1ef8:	f6 cf       	rjmp	.-20     	; 0x1ee6 <dir_read+0x54>

00001efa <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	70 e0       	ldi	r23, 0x00	; 0
    1f04:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <dir_seek>
    1f08:	48 2f       	mov	r20, r24
	if (res == FR_OK) {
    1f0a:	88 23       	and	r24, r24
    1f0c:	e9 f5       	brne	.+122    	; 0x1f88 <dir_register+0x8e>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    1f0e:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f10:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f12:	68 89       	ldd	r22, Y+16	; 0x10
    1f14:	79 89       	ldd	r23, Y+17	; 0x11
    1f16:	88 81       	ld	r24, Y
    1f18:	99 81       	ldd	r25, Y+1	; 0x01
    1f1a:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    1f1e:	48 2f       	mov	r20, r24
			if (res != FR_OK) break;
    1f20:	88 23       	and	r24, r24
    1f22:	91 f5       	brne	.+100    	; 0x1f88 <dir_register+0x8e>
			c = *dj->dir;
    1f24:	ea 89       	ldd	r30, Y+18	; 0x12
    1f26:	fb 89       	ldd	r31, Y+19	; 0x13
    1f28:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    1f2a:	e5 3e       	cpi	r30, 0xE5	; 229
    1f2c:	89 f1       	breq	.+98     	; 0x1f90 <dir_register+0x96>
    1f2e:	ee 23       	and	r30, r30
    1f30:	79 f1       	breq	.+94     	; 0x1f90 <dir_register+0x96>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    1f32:	ce 01       	movw	r24, r28
    1f34:	61 e0       	ldi	r22, 0x01	; 1
    1f36:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <dir_next>
    1f3a:	e6 cf       	rjmp	.-52     	; 0x1f08 <dir_register+0xe>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    1f3c:	6a 89       	ldd	r22, Y+18	; 0x12
    1f3e:	7b 89       	ldd	r23, Y+19	; 0x13
    1f40:	fb 01       	movw	r30, r22
    1f42:	80 e2       	ldi	r24, 0x20	; 32
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	01 c0       	rjmp	.+2      	; 0x1f4a <dir_register+0x50>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1f48:	11 92       	st	Z+, r1
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	2f ef       	ldi	r18, 0xFF	; 255
    1f4e:	8f 3f       	cpi	r24, 0xFF	; 255
    1f50:	92 07       	cpc	r25, r18
    1f52:	d1 f7       	brne	.-12     	; 0x1f48 <dir_register+0x4e>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    1f54:	8c 89       	ldd	r24, Y+20	; 0x14
    1f56:	9d 89       	ldd	r25, Y+21	; 0x15
    1f58:	9c 01       	movw	r18, r24
    1f5a:	d9 01       	movw	r26, r18
    1f5c:	fb 01       	movw	r30, r22
    1f5e:	2b e0       	ldi	r18, 0x0B	; 11
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <dir_register+0x6e>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    1f64:	8d 91       	ld	r24, X+
    1f66:	81 93       	st	Z+, r24
    1f68:	21 50       	subi	r18, 0x01	; 1
    1f6a:	30 40       	sbci	r19, 0x00	; 0
    1f6c:	8f ef       	ldi	r24, 0xFF	; 255
    1f6e:	2f 3f       	cpi	r18, 0xFF	; 255
    1f70:	38 07       	cpc	r19, r24
    1f72:	c1 f7       	brne	.-16     	; 0x1f64 <dir_register+0x6a>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    1f74:	ec 89       	ldd	r30, Y+20	; 0x14
    1f76:	fd 89       	ldd	r31, Y+21	; 0x15
    1f78:	83 85       	ldd	r24, Z+11	; 0x0b
    1f7a:	88 71       	andi	r24, 0x18	; 24
    1f7c:	fb 01       	movw	r30, r22
    1f7e:	84 87       	std	Z+12, r24	; 0x0c
			dj->fs->wflag = 1;
    1f80:	e8 81       	ld	r30, Y
    1f82:	f9 81       	ldd	r31, Y+1	; 0x01
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    1f88:	84 2f       	mov	r24, r20
    1f8a:	df 91       	pop	r29
    1f8c:	cf 91       	pop	r28
    1f8e:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    1f90:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f92:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f94:	68 89       	ldd	r22, Y+16	; 0x10
    1f96:	79 89       	ldd	r23, Y+17	; 0x11
    1f98:	88 81       	ld	r24, Y
    1f9a:	99 81       	ldd	r25, Y+1	; 0x01
    1f9c:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    1fa0:	48 2f       	mov	r20, r24
		if (res == FR_OK) {
    1fa2:	88 23       	and	r24, r24
    1fa4:	59 f2       	breq	.-106    	; 0x1f3c <dir_register+0x42>
    1fa6:	f0 cf       	rjmp	.-32     	; 0x1f88 <dir_register+0x8e>

00001fa8 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
    1fae:	6c 81       	ldd	r22, Y+4	; 0x04
    1fb0:	7d 81       	ldd	r23, Y+5	; 0x05
    1fb2:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <dir_seek>
    1fb6:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    1fb8:	88 23       	and	r24, r24
    1fba:	99 f4       	brne	.+38     	; 0x1fe2 <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    1fbc:	4e 85       	ldd	r20, Y+14	; 0x0e
    1fbe:	5f 85       	ldd	r21, Y+15	; 0x0f
    1fc0:	68 89       	ldd	r22, Y+16	; 0x10
    1fc2:	79 89       	ldd	r23, Y+17	; 0x11
    1fc4:	88 81       	ld	r24, Y
    1fc6:	99 81       	ldd	r25, Y+1	; 0x01
    1fc8:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    1fcc:	98 2f       	mov	r25, r24
		if (res == FR_OK) {
    1fce:	88 23       	and	r24, r24
    1fd0:	41 f4       	brne	.+16     	; 0x1fe2 <dir_remove+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    1fd2:	ea 89       	ldd	r30, Y+18	; 0x12
    1fd4:	fb 89       	ldd	r31, Y+19	; 0x13
    1fd6:	85 ee       	ldi	r24, 0xE5	; 229
    1fd8:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    1fda:	e8 81       	ld	r30, Y
    1fdc:	f9 81       	ldd	r31, Y+1	; 0x01
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    1fe2:	89 2f       	mov	r24, r25
    1fe4:	df 91       	pop	r29
    1fe6:	cf 91       	pop	r28
    1fe8:	08 95       	ret

00001fea <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    1fea:	ef 92       	push	r14
    1fec:	ff 92       	push	r15
    1fee:	0f 93       	push	r16
    1ff0:	1f 93       	push	r17
    1ff2:	cf 93       	push	r28
    1ff4:	df 93       	push	r29
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	7b 01       	movw	r14, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    1ffa:	eb 01       	movw	r28, r22
    1ffc:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    1ffe:	86 85       	ldd	r24, Z+14	; 0x0e
    2000:	97 85       	ldd	r25, Z+15	; 0x0f
    2002:	a0 89       	ldd	r26, Z+16	; 0x10
    2004:	b1 89       	ldd	r27, Z+17	; 0x11
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	a1 05       	cpc	r26, r1
    200a:	b1 05       	cpc	r27, r1
    200c:	09 f4       	brne	.+2      	; 0x2010 <get_fileinfo+0x26>
    200e:	71 c0       	rjmp	.+226    	; 0x20f2 <get_fileinfo+0x108>
		dir = dj->dir;
    2010:	62 89       	ldd	r22, Z+18	; 0x12
    2012:	73 89       	ldd	r23, Z+19	; 0x13
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	90 e0       	ldi	r25, 0x00	; 0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    2018:	fb 01       	movw	r30, r22
    201a:	e8 0f       	add	r30, r24
    201c:	f9 1f       	adc	r31, r25
    201e:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    2020:	e0 32       	cpi	r30, 0x20	; 32
    2022:	41 f0       	breq	.+16     	; 0x2034 <get_fileinfo+0x4a>
			if (c == 0x05) c = 0xE5;
    2024:	e5 30       	cpi	r30, 0x05	; 5
    2026:	09 f4       	brne	.+2      	; 0x202a <get_fileinfo+0x40>
    2028:	e5 ee       	ldi	r30, 0xE5	; 229
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
    202a:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    202c:	01 96       	adiw	r24, 0x01	; 1
    202e:	88 30       	cpi	r24, 0x08	; 8
    2030:	91 05       	cpc	r25, r1
    2032:	91 f7       	brne	.-28     	; 0x2018 <get_fileinfo+0x2e>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    2034:	db 01       	movw	r26, r22
    2036:	18 96       	adiw	r26, 0x08	; 8
    2038:	8c 91       	ld	r24, X
    203a:	80 32       	cpi	r24, 0x20	; 32
    203c:	11 f4       	brne	.+4      	; 0x2042 <get_fileinfo+0x58>
    203e:	8e 01       	movw	r16, r28
    2040:	12 c0       	rjmp	.+36     	; 0x2066 <get_fileinfo+0x7c>
			*p++ = '.';
    2042:	8e e2       	ldi	r24, 0x2E	; 46
    2044:	fe 01       	movw	r30, r28
    2046:	81 93       	st	Z+, r24
    2048:	8f 01       	movw	r16, r30
    204a:	fb 01       	movw	r30, r22
			for (i = 8; i < 11; i++) {
    204c:	9e 01       	movw	r18, r28
    204e:	2c 5f       	subi	r18, 0xFC	; 252
    2050:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
    2052:	80 85       	ldd	r24, Z+8	; 0x08
				if (c == ' ') break;
    2054:	80 32       	cpi	r24, 0x20	; 32
    2056:	39 f0       	breq	.+14     	; 0x2066 <get_fileinfo+0x7c>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
    2058:	d8 01       	movw	r26, r16
    205a:	8d 93       	st	X+, r24
    205c:	8d 01       	movw	r16, r26
    205e:	31 96       	adiw	r30, 0x01	; 1
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    2060:	a2 17       	cp	r26, r18
    2062:	b3 07       	cpc	r27, r19
    2064:	b1 f7       	brne	.-20     	; 0x2052 <get_fileinfo+0x68>
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    2066:	fb 01       	movw	r30, r22
    2068:	83 85       	ldd	r24, Z+11	; 0x0b
    206a:	d7 01       	movw	r26, r14
    206c:	18 96       	adiw	r26, 0x08	; 8
    206e:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    2070:	27 8d       	ldd	r18, Z+31	; 0x1f
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e0       	ldi	r20, 0x00	; 0
    2076:	50 e0       	ldi	r21, 0x00	; 0
    2078:	52 2f       	mov	r21, r18
    207a:	44 27       	eor	r20, r20
    207c:	33 27       	eor	r19, r19
    207e:	22 27       	eor	r18, r18
    2080:	86 8d       	ldd	r24, Z+30	; 0x1e
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	a0 e0       	ldi	r26, 0x00	; 0
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	dc 01       	movw	r26, r24
    208a:	99 27       	eor	r25, r25
    208c:	88 27       	eor	r24, r24
    208e:	28 2b       	or	r18, r24
    2090:	39 2b       	or	r19, r25
    2092:	4a 2b       	or	r20, r26
    2094:	5b 2b       	or	r21, r27
    2096:	84 8d       	ldd	r24, Z+28	; 0x1c
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	a0 e0       	ldi	r26, 0x00	; 0
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	28 2b       	or	r18, r24
    20a0:	39 2b       	or	r19, r25
    20a2:	4a 2b       	or	r20, r26
    20a4:	5b 2b       	or	r21, r27
    20a6:	95 8d       	ldd	r25, Z+29	; 0x1d
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	a0 e0       	ldi	r26, 0x00	; 0
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	28 2b       	or	r18, r24
    20b0:	39 2b       	or	r19, r25
    20b2:	4a 2b       	or	r20, r26
    20b4:	5b 2b       	or	r21, r27
    20b6:	f7 01       	movw	r30, r14
    20b8:	20 83       	st	Z, r18
    20ba:	31 83       	std	Z+1, r19	; 0x01
    20bc:	42 83       	std	Z+2, r20	; 0x02
    20be:	53 83       	std	Z+3, r21	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    20c0:	db 01       	movw	r26, r22
    20c2:	59 96       	adiw	r26, 0x19	; 25
    20c4:	9c 91       	ld	r25, X
    20c6:	59 97       	sbiw	r26, 0x19	; 25
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	58 96       	adiw	r26, 0x18	; 24
    20cc:	2c 91       	ld	r18, X
    20ce:	58 97       	sbiw	r26, 0x18	; 24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	82 2b       	or	r24, r18
    20d4:	93 2b       	or	r25, r19
    20d6:	84 83       	std	Z+4, r24	; 0x04
    20d8:	95 83       	std	Z+5, r25	; 0x05
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    20da:	57 96       	adiw	r26, 0x17	; 23
    20dc:	9c 91       	ld	r25, X
    20de:	57 97       	sbiw	r26, 0x17	; 23
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	56 96       	adiw	r26, 0x16	; 22
    20e4:	2c 91       	ld	r18, X
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	82 2b       	or	r24, r18
    20ea:	93 2b       	or	r25, r19
    20ec:	86 83       	std	Z+6, r24	; 0x06
    20ee:	97 83       	std	Z+7, r25	; 0x07
    20f0:	e8 01       	movw	r28, r16
	}
	*p = 0;
    20f2:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	1f 91       	pop	r17
    20fa:	0f 91       	pop	r16
    20fc:	ff 90       	pop	r15
    20fe:	ef 90       	pop	r14
    2100:	08 95       	ret

00002102 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    2102:	5f 92       	push	r5
    2104:	6f 92       	push	r6
    2106:	7f 92       	push	r7
    2108:	8f 92       	push	r8
    210a:	9f 92       	push	r9
    210c:	af 92       	push	r10
    210e:	bf 92       	push	r11
    2110:	cf 92       	push	r12
    2112:	df 92       	push	r13
    2114:	ef 92       	push	r14
    2116:	ff 92       	push	r15
    2118:	0f 93       	push	r16
    211a:	1f 93       	push	r17
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	ec 01       	movw	r28, r24
    2122:	7b 01       	movw	r14, r22
    2124:	03 c0       	rjmp	.+6      	; 0x212c <follow_path+0x2a>
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    2126:	08 94       	sec
    2128:	e1 1c       	adc	r14, r1
    212a:	f1 1c       	adc	r15, r1
    212c:	f7 01       	movw	r30, r14
    212e:	80 81       	ld	r24, Z
    2130:	80 32       	cpi	r24, 0x20	; 32
    2132:	c9 f3       	breq	.-14     	; 0x2126 <follow_path+0x24>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    2134:	8f 32       	cpi	r24, 0x2F	; 47
    2136:	11 f0       	breq	.+4      	; 0x213c <follow_path+0x3a>
    2138:	8c 35       	cpi	r24, 0x5C	; 92
    213a:	19 f4       	brne	.+6      	; 0x2142 <follow_path+0x40>
		path++;
    213c:	08 94       	sec
    213e:	e1 1c       	adc	r14, r1
    2140:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Start from the root dir */
    2142:	1e 82       	std	Y+6, r1	; 0x06
    2144:	1f 82       	std	Y+7, r1	; 0x07
    2146:	18 86       	std	Y+8, r1	; 0x08
    2148:	19 86       	std	Y+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    214a:	f7 01       	movw	r30, r14
    214c:	80 81       	ld	r24, Z
    214e:	80 32       	cpi	r24, 0x20	; 32
    2150:	40 f4       	brcc	.+16     	; 0x2162 <follow_path+0x60>
		res = dir_seek(dj, 0);
    2152:	ce 01       	movw	r24, r28
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	70 e0       	ldi	r23, 0x00	; 0
    2158:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <dir_seek>
		dj->dir = NULL;
    215c:	1a 8a       	std	Y+18, r1	; 0x12
    215e:	1b 8a       	std	Y+19, r1	; 0x13
    2160:	13 c1       	rjmp	.+550    	; 0x2388 <follow_path+0x286>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2162:	00 e2       	ldi	r16, 0x20	; 32
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    2164:	45 e0       	ldi	r20, 0x05	; 5
    2166:	54 2e       	mov	r5, r20
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    2168:	ac 89       	ldd	r26, Y+20	; 0x14
    216a:	bd 89       	ldd	r27, Y+21	; 0x15
    216c:	fd 01       	movw	r30, r26
    216e:	8b e0       	ldi	r24, 0x0B	; 11
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	01 c0       	rjmp	.+2      	; 0x2176 <follow_path+0x74>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2174:	01 93       	st	Z+, r16
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	2f ef       	ldi	r18, 0xFF	; 255
    217a:	8f 3f       	cpi	r24, 0xFF	; 255
    217c:	92 07       	cpc	r25, r18
    217e:	d1 f7       	brne	.-12     	; 0x2174 <follow_path+0x72>
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	50 e0       	ldi	r21, 0x00	; 0
    2184:	cc 24       	eor	r12, r12
    2186:	dd 24       	eor	r13, r13
    2188:	38 e0       	ldi	r19, 0x08	; 8
    218a:	a3 2e       	mov	r10, r19
    218c:	b1 2c       	mov	r11, r1
    218e:	10 e0       	ldi	r17, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    2190:	f7 01       	movw	r30, r14
    2192:	ec 0d       	add	r30, r12
    2194:	fd 1d       	adc	r31, r13
    2196:	20 81       	ld	r18, Z
    2198:	08 94       	sec
    219a:	c1 1c       	adc	r12, r1
    219c:	d1 1c       	adc	r13, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    219e:	21 32       	cpi	r18, 0x21	; 33
    21a0:	08 f4       	brcc	.+2      	; 0x21a4 <follow_path+0xa2>
    21a2:	66 c0       	rjmp	.+204    	; 0x2270 <follow_path+0x16e>
    21a4:	2f 32       	cpi	r18, 0x2F	; 47
    21a6:	09 f4       	brne	.+2      	; 0x21aa <follow_path+0xa8>
    21a8:	ff c0       	rjmp	.+510    	; 0x23a8 <follow_path+0x2a6>
    21aa:	2c 35       	cpi	r18, 0x5C	; 92
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <follow_path+0xae>
    21ae:	fc c0       	rjmp	.+504    	; 0x23a8 <follow_path+0x2a6>
		if (c == '.' || i >= ni) {
    21b0:	2e 32       	cpi	r18, 0x2E	; 46
    21b2:	19 f0       	breq	.+6      	; 0x21ba <follow_path+0xb8>
    21b4:	4a 15       	cp	r20, r10
    21b6:	5b 05       	cpc	r21, r11
    21b8:	84 f0       	brlt	.+32     	; 0x21da <follow_path+0xd8>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    21ba:	88 e0       	ldi	r24, 0x08	; 8
    21bc:	a8 16       	cp	r10, r24
    21be:	b1 04       	cpc	r11, r1
    21c0:	09 f0       	breq	.+2      	; 0x21c4 <follow_path+0xc2>
    21c2:	dd c0       	rjmp	.+442    	; 0x237e <follow_path+0x27c>
    21c4:	2e 32       	cpi	r18, 0x2E	; 46
    21c6:	09 f0       	breq	.+2      	; 0x21ca <follow_path+0xc8>
    21c8:	da c0       	rjmp	.+436    	; 0x237e <follow_path+0x27c>
			i = 8; ni = 11;
			b <<= 2; continue;
    21ca:	11 0f       	add	r17, r17
    21cc:	11 0f       	add	r17, r17
    21ce:	48 e0       	ldi	r20, 0x08	; 8
    21d0:	50 e0       	ldi	r21, 0x00	; 0
    21d2:	2b e0       	ldi	r18, 0x0B	; 11
    21d4:	a2 2e       	mov	r10, r18
    21d6:	b1 2c       	mov	r11, r1
    21d8:	db cf       	rjmp	.-74     	; 0x2190 <follow_path+0x8e>
		}
		if (c >= 0x80) {				/* Extended char */
    21da:	27 fd       	sbrc	r18, 7
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    21dc:	13 60       	ori	r17, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    21de:	82 2f       	mov	r24, r18
    21e0:	81 58       	subi	r24, 0x81	; 129
    21e2:	8f 31       	cpi	r24, 0x1F	; 31
    21e4:	18 f0       	brcs	.+6      	; 0x21ec <follow_path+0xea>
    21e6:	8f 55       	subi	r24, 0x5F	; 95
    21e8:	8d 31       	cpi	r24, 0x1D	; 29
    21ea:	08 f5       	brcc	.+66     	; 0x222e <follow_path+0x12c>
			d = p[si++];				/* Get 2nd byte */
    21ec:	f7 01       	movw	r30, r14
    21ee:	ec 0d       	add	r30, r12
    21f0:	fd 1d       	adc	r31, r13
    21f2:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    21f4:	83 2f       	mov	r24, r19
    21f6:	80 54       	subi	r24, 0x40	; 64
    21f8:	8f 33       	cpi	r24, 0x3F	; 63
    21fa:	20 f0       	brcs	.+8      	; 0x2204 <follow_path+0x102>
    21fc:	80 54       	subi	r24, 0x40	; 64
    21fe:	8d 37       	cpi	r24, 0x7D	; 125
    2200:	08 f0       	brcs	.+2      	; 0x2204 <follow_path+0x102>
    2202:	bd c0       	rjmp	.+378    	; 0x237e <follow_path+0x27c>
    2204:	c5 01       	movw	r24, r10
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	48 17       	cp	r20, r24
    220a:	59 07       	cpc	r21, r25
    220c:	0c f0       	brlt	.+2      	; 0x2210 <follow_path+0x10e>
    220e:	b7 c0       	rjmp	.+366    	; 0x237e <follow_path+0x27c>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    2210:	08 94       	sec
    2212:	c1 1c       	adc	r12, r1
    2214:	d1 1c       	adc	r13, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    2216:	fd 01       	movw	r30, r26
    2218:	e4 0f       	add	r30, r20
    221a:	f5 1f       	adc	r31, r21
    221c:	20 83       	st	Z, r18
    221e:	ca 01       	movw	r24, r20
    2220:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    2222:	fd 01       	movw	r30, r26
    2224:	e8 0f       	add	r30, r24
    2226:	f9 1f       	adc	r31, r25
    2228:	30 83       	st	Z, r19
    222a:	ac 01       	movw	r20, r24
    222c:	1e c0       	rjmp	.+60     	; 0x226a <follow_path+0x168>
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    222e:	62 2f       	mov	r22, r18
    2230:	70 e0       	ldi	r23, 0x00	; 0
    2232:	e0 e0       	ldi	r30, 0x00	; 0
    2234:	f0 e2       	ldi	r31, 0x20	; 32
    2236:	01 c0       	rjmp	.+2      	; 0x223a <follow_path+0x138>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    2238:	31 96       	adiw	r30, 0x01	; 1
    223a:	80 81       	ld	r24, Z
    223c:	88 23       	and	r24, r24
    223e:	29 f0       	breq	.+10     	; 0x224a <follow_path+0x148>
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	86 17       	cp	r24, r22
    2244:	97 07       	cpc	r25, r23
    2246:	c1 f7       	brne	.-16     	; 0x2238 <follow_path+0x136>
    2248:	9a c0       	rjmp	.+308    	; 0x237e <follow_path+0x27c>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    224a:	82 2f       	mov	r24, r18
    224c:	81 54       	subi	r24, 0x41	; 65
    224e:	8a 31       	cpi	r24, 0x1A	; 26
    2250:	10 f4       	brcc	.+4      	; 0x2256 <follow_path+0x154>
				b |= 2;
    2252:	12 60       	ori	r17, 0x02	; 2
    2254:	06 c0       	rjmp	.+12     	; 0x2262 <follow_path+0x160>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    2256:	82 2f       	mov	r24, r18
    2258:	81 56       	subi	r24, 0x61	; 97
    225a:	8a 31       	cpi	r24, 0x1A	; 26
    225c:	10 f4       	brcc	.+4      	; 0x2262 <follow_path+0x160>
					b |= 1; c -= 0x20;
    225e:	11 60       	ori	r17, 0x01	; 1
    2260:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    2262:	fd 01       	movw	r30, r26
    2264:	e4 0f       	add	r30, r20
    2266:	f5 1f       	adc	r31, r21
    2268:	20 83       	st	Z, r18
    226a:	4f 5f       	subi	r20, 0xFF	; 255
    226c:	5f 4f       	sbci	r21, 0xFF	; 255
    226e:	90 cf       	rjmp	.-224    	; 0x2190 <follow_path+0x8e>
    2270:	91 2f       	mov	r25, r17
    2272:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    2274:	45 2b       	or	r20, r21
    2276:	09 f4       	brne	.+2      	; 0x227a <follow_path+0x178>
    2278:	82 c0       	rjmp	.+260    	; 0x237e <follow_path+0x27c>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    227a:	8c 91       	ld	r24, X
    227c:	85 3e       	cpi	r24, 0xE5	; 229
    227e:	09 f4       	brne	.+2      	; 0x2282 <follow_path+0x180>
    2280:	5c 92       	st	X, r5

	if (ni == 8) b <<= 2;
    2282:	e8 e0       	ldi	r30, 0x08	; 8
    2284:	ae 16       	cp	r10, r30
    2286:	b1 04       	cpc	r11, r1
    2288:	19 f4       	brne	.+6      	; 0x2290 <follow_path+0x18e>
    228a:	91 2f       	mov	r25, r17
    228c:	99 0f       	add	r25, r25
    228e:	99 0f       	add	r25, r25
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    2290:	29 2f       	mov	r18, r25
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	c9 01       	movw	r24, r18
    2296:	83 70       	andi	r24, 0x03	; 3
    2298:	90 70       	andi	r25, 0x00	; 0
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	09 f4       	brne	.+2      	; 0x22a0 <follow_path+0x19e>
    229e:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    22a0:	2c 70       	andi	r18, 0x0C	; 12
    22a2:	30 70       	andi	r19, 0x00	; 0
    22a4:	24 30       	cpi	r18, 0x04	; 4
    22a6:	31 05       	cpc	r19, r1
    22a8:	09 f4       	brne	.+2      	; 0x22ac <follow_path+0x1aa>
    22aa:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    22ac:	1b 96       	adiw	r26, 0x0b	; 11
    22ae:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    22b0:	ce 01       	movw	r24, r28
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	70 e0       	ldi	r23, 0x00	; 0
    22b6:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <dir_seek>
    22ba:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    22bc:	88 23       	and	r24, r24
    22be:	71 f5       	brne	.+92     	; 0x231c <follow_path+0x21a>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    22c0:	4e 85       	ldd	r20, Y+14	; 0x0e
    22c2:	5f 85       	ldd	r21, Y+15	; 0x0f
    22c4:	68 89       	ldd	r22, Y+16	; 0x10
    22c6:	79 89       	ldd	r23, Y+17	; 0x11
    22c8:	88 81       	ld	r24, Y
    22ca:	99 81       	ldd	r25, Y+1	; 0x01
    22cc:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    22d0:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    22d2:	88 23       	and	r24, r24
    22d4:	19 f5       	brne	.+70     	; 0x231c <follow_path+0x21a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    22d6:	ea 89       	ldd	r30, Y+18	; 0x12
    22d8:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    22da:	80 81       	ld	r24, Z
    22dc:	88 23       	and	r24, r24
    22de:	11 f4       	brne	.+4      	; 0x22e4 <follow_path+0x1e2>
    22e0:	44 e0       	ldi	r20, 0x04	; 4
    22e2:	1c c0       	rjmp	.+56     	; 0x231c <follow_path+0x21a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    22e4:	83 85       	ldd	r24, Z+11	; 0x0b
    22e6:	83 fd       	sbrc	r24, 3
    22e8:	14 c0       	rjmp	.+40     	; 0x2312 <follow_path+0x210>
    22ea:	df 01       	movw	r26, r30
    22ec:	8c 89       	ldd	r24, Y+20	; 0x14
    22ee:	9d 89       	ldd	r25, Y+21	; 0x15
    22f0:	9c 01       	movw	r18, r24
    22f2:	f9 01       	movw	r30, r18
    22f4:	2b e0       	ldi	r18, 0x0B	; 11
    22f6:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    22f8:	21 50       	subi	r18, 0x01	; 1
    22fa:	30 40       	sbci	r19, 0x00	; 0
    22fc:	8f ef       	ldi	r24, 0xFF	; 255
    22fe:	2f 3f       	cpi	r18, 0xFF	; 255
    2300:	38 07       	cpc	r19, r24
    2302:	61 f0       	breq	.+24     	; 0x231c <follow_path+0x21a>
    2304:	9c 91       	ld	r25, X
    2306:	80 81       	ld	r24, Z
    2308:	98 17       	cp	r25, r24
    230a:	19 f4       	brne	.+6      	; 0x2312 <follow_path+0x210>
    230c:	11 96       	adiw	r26, 0x01	; 1
    230e:	31 96       	adiw	r30, 0x01	; 1
    2310:	f3 cf       	rjmp	.-26     	; 0x22f8 <follow_path+0x1f6>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    2312:	ce 01       	movw	r24, r28
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <dir_next>
    231a:	cf cf       	rjmp	.-98     	; 0x22ba <follow_path+0x1b8>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    231c:	ec 89       	ldd	r30, Y+20	; 0x14
    231e:	fd 89       	ldd	r31, Y+21	; 0x15
    2320:	93 85       	ldd	r25, Z+11	; 0x0b
    2322:	94 70       	andi	r25, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    2324:	44 23       	and	r20, r20
    2326:	31 f0       	breq	.+12     	; 0x2334 <follow_path+0x232>
    2328:	84 2f       	mov	r24, r20
				if (res == FR_NO_FILE && !last)
    232a:	44 30       	cpi	r20, 0x04	; 4
    232c:	51 f5       	brne	.+84     	; 0x2382 <follow_path+0x280>
    232e:	99 23       	and	r25, r25
    2330:	51 f1       	breq	.+84     	; 0x2386 <follow_path+0x284>
    2332:	2a c0       	rjmp	.+84     	; 0x2388 <follow_path+0x286>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    2334:	99 23       	and	r25, r25
    2336:	29 f5       	brne	.+74     	; 0x2382 <follow_path+0x280>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    2338:	ea 89       	ldd	r30, Y+18	; 0x12
    233a:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    233c:	83 85       	ldd	r24, Z+11	; 0x0b
    233e:	84 ff       	sbrs	r24, 4
    2340:	22 c0       	rjmp	.+68     	; 0x2386 <follow_path+0x284>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    2342:	ec 0c       	add	r14, r12
    2344:	fd 1c       	adc	r15, r13
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    2346:	75 88       	ldd	r7, Z+21	; 0x15
    2348:	66 24       	eor	r6, r6
    234a:	24 89       	ldd	r18, Z+20	; 0x14
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	26 29       	or	r18, r6
    2350:	37 29       	or	r19, r7
    2352:	40 e0       	ldi	r20, 0x00	; 0
    2354:	50 e0       	ldi	r21, 0x00	; 0
    2356:	a9 01       	movw	r20, r18
    2358:	33 27       	eor	r19, r19
    235a:	22 27       	eor	r18, r18
    235c:	93 8c       	ldd	r9, Z+27	; 0x1b
    235e:	88 24       	eor	r8, r8
    2360:	82 8d       	ldd	r24, Z+26	; 0x1a
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	88 29       	or	r24, r8
    2366:	99 29       	or	r25, r9
    2368:	a0 e0       	ldi	r26, 0x00	; 0
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	28 2b       	or	r18, r24
    236e:	39 2b       	or	r19, r25
    2370:	4a 2b       	or	r20, r26
    2372:	5b 2b       	or	r21, r27
    2374:	2e 83       	std	Y+6, r18	; 0x06
    2376:	3f 83       	std	Y+7, r19	; 0x07
    2378:	48 87       	std	Y+8, r20	; 0x08
    237a:	59 87       	std	Y+9, r21	; 0x09
    237c:	f5 ce       	rjmp	.-534    	; 0x2168 <follow_path+0x66>
		}
    237e:	86 e0       	ldi	r24, 0x06	; 6
    2380:	03 c0       	rjmp	.+6      	; 0x2388 <follow_path+0x286>
    2382:	84 2f       	mov	r24, r20
    2384:	01 c0       	rjmp	.+2      	; 0x2388 <follow_path+0x286>
    2386:	85 e0       	ldi	r24, 0x05	; 5
	}

	return res;
}
    2388:	df 91       	pop	r29
    238a:	cf 91       	pop	r28
    238c:	1f 91       	pop	r17
    238e:	0f 91       	pop	r16
    2390:	ff 90       	pop	r15
    2392:	ef 90       	pop	r14
    2394:	df 90       	pop	r13
    2396:	cf 90       	pop	r12
    2398:	bf 90       	pop	r11
    239a:	af 90       	pop	r10
    239c:	9f 90       	pop	r9
    239e:	8f 90       	pop	r8
    23a0:	7f 90       	pop	r7
    23a2:	6f 90       	pop	r6
    23a4:	5f 90       	pop	r5
    23a6:	08 95       	ret
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
    23a8:	91 2f       	mov	r25, r17
    23aa:	60 e0       	ldi	r22, 0x00	; 0
    23ac:	63 cf       	rjmp	.-314    	; 0x2274 <follow_path+0x172>

000023ae <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    23ae:	0f 93       	push	r16
    23b0:	cf 93       	push	r28
    23b2:	df 93       	push	r29
    23b4:	ec 01       	movw	r28, r24
    23b6:	9a 01       	movw	r18, r20
    23b8:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    23ba:	bc 01       	movw	r22, r24
    23bc:	62 5d       	subi	r22, 0xD2	; 210
    23be:	7f 4f       	sbci	r23, 0xFF	; 255
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	01 e0       	ldi	r16, 0x01	; 1
    23c4:	0e 94 83 05 	call	0xb06	; 0xb06 <disk_read>
    23c8:	88 23       	and	r24, r24
    23ca:	11 f0       	breq	.+4      	; 0x23d0 <check_fs+0x22>
    23cc:	63 e0       	ldi	r22, 0x03	; 3
    23ce:	6d c0       	rjmp	.+218    	; 0x24aa <check_fs+0xfc>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    23d0:	c3 5d       	subi	r28, 0xD3	; 211
    23d2:	dd 4f       	sbci	r29, 0xFD	; 253
    23d4:	98 81       	ld	r25, Y
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	2a 91       	ld	r18, -Y
    23da:	cc 52       	subi	r28, 0x2C	; 44
    23dc:	d2 40       	sbci	r29, 0x02	; 2
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	82 2b       	or	r24, r18
    23e2:	93 2b       	or	r25, r19
    23e4:	85 55       	subi	r24, 0x55	; 85
    23e6:	9a 4a       	sbci	r25, 0xAA	; 170
    23e8:	11 f0       	breq	.+4      	; 0x23ee <check_fs+0x40>
    23ea:	62 e0       	ldi	r22, 0x02	; 2
    23ec:	5e c0       	rjmp	.+188    	; 0x24aa <check_fs+0xfc>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    23ee:	c9 59       	subi	r28, 0x99	; 153
    23f0:	df 4f       	sbci	r29, 0xFF	; 255
    23f2:	28 81       	ld	r18, Y
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e0       	ldi	r20, 0x00	; 0
    23f8:	50 e0       	ldi	r21, 0x00	; 0
    23fa:	52 2f       	mov	r21, r18
    23fc:	44 27       	eor	r20, r20
    23fe:	33 27       	eor	r19, r19
    2400:	22 27       	eor	r18, r18
    2402:	8a 91       	ld	r24, -Y
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	a0 e0       	ldi	r26, 0x00	; 0
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	dc 01       	movw	r26, r24
    240c:	99 27       	eor	r25, r25
    240e:	88 27       	eor	r24, r24
    2410:	28 2b       	or	r18, r24
    2412:	39 2b       	or	r19, r25
    2414:	4a 2b       	or	r20, r26
    2416:	5b 2b       	or	r21, r27
    2418:	22 97       	sbiw	r28, 0x02	; 2
    241a:	89 91       	ld	r24, Y+
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	a0 e0       	ldi	r26, 0x00	; 0
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	28 2b       	or	r18, r24
    2424:	39 2b       	or	r19, r25
    2426:	4a 2b       	or	r20, r26
    2428:	5b 2b       	or	r21, r27
    242a:	98 81       	ld	r25, Y
    242c:	c5 56       	subi	r28, 0x65	; 101
    242e:	d0 40       	sbci	r29, 0x00	; 0
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	a0 e0       	ldi	r26, 0x00	; 0
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	28 2b       	or	r18, r24
    2438:	39 2b       	or	r19, r25
    243a:	4a 2b       	or	r20, r26
    243c:	5b 2b       	or	r21, r27
    243e:	50 70       	andi	r21, 0x00	; 0
    2440:	26 54       	subi	r18, 0x46	; 70
    2442:	31 44       	sbci	r19, 0x41	; 65
    2444:	44 45       	sbci	r20, 0x54	; 84
    2446:	50 40       	sbci	r21, 0x00	; 0
    2448:	11 f4       	brne	.+4      	; 0x244e <check_fs+0xa0>
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	2e c0       	rjmp	.+92     	; 0x24aa <check_fs+0xfc>
    244e:	60 e0       	ldi	r22, 0x00	; 0
    2450:	cd 57       	subi	r28, 0x7D	; 125
    2452:	df 4f       	sbci	r29, 0xFF	; 255
    2454:	28 81       	ld	r18, Y
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e0       	ldi	r20, 0x00	; 0
    245a:	50 e0       	ldi	r21, 0x00	; 0
    245c:	52 2f       	mov	r21, r18
    245e:	44 27       	eor	r20, r20
    2460:	33 27       	eor	r19, r19
    2462:	22 27       	eor	r18, r18
    2464:	8a 91       	ld	r24, -Y
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	a0 e0       	ldi	r26, 0x00	; 0
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	dc 01       	movw	r26, r24
    246e:	99 27       	eor	r25, r25
    2470:	88 27       	eor	r24, r24
    2472:	28 2b       	or	r18, r24
    2474:	39 2b       	or	r19, r25
    2476:	4a 2b       	or	r20, r26
    2478:	5b 2b       	or	r21, r27
    247a:	22 97       	sbiw	r28, 0x02	; 2
    247c:	89 91       	ld	r24, Y+
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	a0 e0       	ldi	r26, 0x00	; 0
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	28 2b       	or	r18, r24
    2486:	39 2b       	or	r19, r25
    2488:	4a 2b       	or	r20, r26
    248a:	5b 2b       	or	r21, r27
    248c:	98 81       	ld	r25, Y
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	a0 e0       	ldi	r26, 0x00	; 0
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	28 2b       	or	r18, r24
    2496:	39 2b       	or	r19, r25
    2498:	4a 2b       	or	r20, r26
    249a:	5b 2b       	or	r21, r27
    249c:	50 70       	andi	r21, 0x00	; 0
    249e:	26 54       	subi	r18, 0x46	; 70
    24a0:	31 44       	sbci	r19, 0x41	; 65
    24a2:	44 45       	sbci	r20, 0x54	; 84
    24a4:	50 40       	sbci	r21, 0x00	; 0
    24a6:	09 f0       	breq	.+2      	; 0x24aa <check_fs+0xfc>
    24a8:	61 e0       	ldi	r22, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    24aa:	86 2f       	mov	r24, r22
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	0f 91       	pop	r16
    24b2:	08 95       	ret

000024b4 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    24b4:	6f 92       	push	r6
    24b6:	7f 92       	push	r7
    24b8:	8f 92       	push	r8
    24ba:	9f 92       	push	r9
    24bc:	af 92       	push	r10
    24be:	bf 92       	push	r11
    24c0:	cf 92       	push	r12
    24c2:	df 92       	push	r13
    24c4:	ef 92       	push	r14
    24c6:	ff 92       	push	r15
    24c8:	0f 93       	push	r16
    24ca:	1f 93       	push	r17
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
    24d0:	dc 01       	movw	r26, r24
    24d2:	14 2f       	mov	r17, r20
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    24d4:	ed 91       	ld	r30, X+
    24d6:	fc 91       	ld	r31, X
    24d8:	11 97       	sbiw	r26, 0x01	; 1
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    24da:	80 81       	ld	r24, Z
    24dc:	28 2f       	mov	r18, r24
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	20 53       	subi	r18, 0x30	; 48
    24e2:	30 40       	sbci	r19, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    24e4:	2a 30       	cpi	r18, 0x0A	; 10
    24e6:	31 05       	cpc	r19, r1
    24e8:	50 f4       	brcc	.+20     	; 0x24fe <chk_mounted+0x4a>
    24ea:	81 81       	ldd	r24, Z+1	; 0x01
    24ec:	8a 33       	cpi	r24, 0x3A	; 58
    24ee:	39 f4       	brne	.+14     	; 0x24fe <chk_mounted+0x4a>
		p += 2; *path = p;			/* Return pointer to the path name */
    24f0:	32 96       	adiw	r30, 0x02	; 2
    24f2:	ed 93       	st	X+, r30
    24f4:	fc 93       	st	X, r31
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    24f6:	23 2b       	or	r18, r19
    24f8:	11 f0       	breq	.+4      	; 0x24fe <chk_mounted+0x4a>
    24fa:	8b e0       	ldi	r24, 0x0B	; 11
    24fc:	79 c2       	rjmp	.+1266   	; 0x29f0 <chk_mounted+0x53c>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    24fe:	c0 91 1d 2a 	lds	r28, 0x2A1D
    2502:	d0 91 1e 2a 	lds	r29, 0x2A1E
    2506:	fb 01       	movw	r30, r22
    2508:	c0 83       	st	Z, r28
    250a:	d1 83       	std	Z+1, r29	; 0x01
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    250c:	20 97       	sbiw	r28, 0x00	; 0
    250e:	11 f4       	brne	.+4      	; 0x2514 <chk_mounted+0x60>
    2510:	8c e0       	ldi	r24, 0x0C	; 12
    2512:	6e c2       	rjmp	.+1244   	; 0x29f0 <chk_mounted+0x53c>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    2514:	88 81       	ld	r24, Y
    2516:	88 23       	and	r24, r24
    2518:	79 f0       	breq	.+30     	; 0x2538 <chk_mounted+0x84>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	88 23       	and	r24, r24
    251e:	11 f0       	breq	.+4      	; 0x2524 <chk_mounted+0x70>
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <chk_mounted+0x74>
	return Stat;
    2524:	80 91 b2 29 	lds	r24, 0x29B2
		stat = disk_status(fs->drive);
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    2528:	80 fd       	sbrc	r24, 0
    252a:	06 c0       	rjmp	.+12     	; 0x2538 <chk_mounted+0x84>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    252c:	11 23       	and	r17, r17
    252e:	09 f4       	brne	.+2      	; 0x2532 <chk_mounted+0x7e>
    2530:	5c c2       	rjmp	.+1208   	; 0x29ea <chk_mounted+0x536>
    2532:	82 fd       	sbrc	r24, 2
    2534:	58 c2       	rjmp	.+1200   	; 0x29e6 <chk_mounted+0x532>
    2536:	59 c2       	rjmp	.+1202   	; 0x29ea <chk_mounted+0x536>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    2538:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    253a:	19 82       	std	Y+1, r1	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	0e 94 76 04 	call	0x8ec	; 0x8ec <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    2542:	80 ff       	sbrs	r24, 0
    2544:	02 c0       	rjmp	.+4      	; 0x254a <chk_mounted+0x96>
    2546:	83 e0       	ldi	r24, 0x03	; 3
    2548:	53 c2       	rjmp	.+1190   	; 0x29f0 <chk_mounted+0x53c>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    254a:	11 23       	and	r17, r17
    254c:	11 f0       	breq	.+4      	; 0x2552 <chk_mounted+0x9e>
    254e:	82 fd       	sbrc	r24, 2
    2550:	4a c2       	rjmp	.+1172   	; 0x29e6 <chk_mounted+0x532>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    2552:	ce 01       	movw	r24, r28
    2554:	40 e0       	ldi	r20, 0x00	; 0
    2556:	50 e0       	ldi	r21, 0x00	; 0
    2558:	60 e0       	ldi	r22, 0x00	; 0
    255a:	70 e0       	ldi	r23, 0x00	; 0
    255c:	0e 94 d7 11 	call	0x23ae	; 0x23ae <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    2560:	81 30       	cpi	r24, 0x01	; 1
    2562:	21 f0       	breq	.+8      	; 0x256c <chk_mounted+0xb8>
    2564:	aa 24       	eor	r10, r10
    2566:	bb 24       	eor	r11, r11
    2568:	65 01       	movw	r12, r10
    256a:	2f c0       	rjmp	.+94     	; 0x25ca <chk_mounted+0x116>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    256c:	fe 01       	movw	r30, r28
    256e:	e4 51       	subi	r30, 0x14	; 20
    2570:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
    2572:	84 81       	ldd	r24, Z+4	; 0x04
    2574:	88 23       	and	r24, r24
    2576:	09 f4       	brne	.+2      	; 0x257a <chk_mounted+0xc6>
    2578:	3a c2       	rjmp	.+1140   	; 0x29ee <chk_mounted+0x53a>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    257a:	83 85       	ldd	r24, Z+11	; 0x0b
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	a0 e0       	ldi	r26, 0x00	; 0
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	d8 2e       	mov	r13, r24
    2584:	cc 24       	eor	r12, r12
    2586:	bb 24       	eor	r11, r11
    2588:	aa 24       	eor	r10, r10
    258a:	82 85       	ldd	r24, Z+10	; 0x0a
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	a0 e0       	ldi	r26, 0x00	; 0
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	dc 01       	movw	r26, r24
    2594:	99 27       	eor	r25, r25
    2596:	88 27       	eor	r24, r24
    2598:	a8 2a       	or	r10, r24
    259a:	b9 2a       	or	r11, r25
    259c:	ca 2a       	or	r12, r26
    259e:	db 2a       	or	r13, r27
    25a0:	80 85       	ldd	r24, Z+8	; 0x08
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	a0 e0       	ldi	r26, 0x00	; 0
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	a8 2a       	or	r10, r24
    25aa:	b9 2a       	or	r11, r25
    25ac:	ca 2a       	or	r12, r26
    25ae:	db 2a       	or	r13, r27
    25b0:	91 85       	ldd	r25, Z+9	; 0x09
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	a0 e0       	ldi	r26, 0x00	; 0
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	a8 2a       	or	r10, r24
    25ba:	b9 2a       	or	r11, r25
    25bc:	ca 2a       	or	r12, r26
    25be:	db 2a       	or	r13, r27
			fmt = check_fs(fs, bsect);					/* Check the partition */
    25c0:	ce 01       	movw	r24, r28
    25c2:	b6 01       	movw	r22, r12
    25c4:	a5 01       	movw	r20, r10
    25c6:	0e 94 d7 11 	call	0x23ae	; 0x23ae <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    25ca:	83 30       	cpi	r24, 0x03	; 3
    25cc:	11 f4       	brne	.+4      	; 0x25d2 <chk_mounted+0x11e>
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	0f c2       	rjmp	.+1054   	; 0x29f0 <chk_mounted+0x53c>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    25d2:	88 23       	and	r24, r24
    25d4:	09 f0       	breq	.+2      	; 0x25d8 <chk_mounted+0x124>
    25d6:	0b c2       	rjmp	.+1046   	; 0x29ee <chk_mounted+0x53a>
    25d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	29 ad       	ldd	r18, Y+57	; 0x39
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	82 2b       	or	r24, r18
    25e2:	93 2b       	or	r25, r19
    25e4:	80 50       	subi	r24, 0x00	; 0
    25e6:	92 40       	sbci	r25, 0x02	; 2
    25e8:	09 f0       	breq	.+2      	; 0x25ec <chk_mounted+0x138>
    25ea:	01 c2       	rjmp	.+1026   	; 0x29ee <chk_mounted+0x53a>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    25ec:	cb 5b       	subi	r28, 0xBB	; 187
    25ee:	df 4f       	sbci	r29, 0xFF	; 255
    25f0:	98 81       	ld	r25, Y
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	2a 91       	ld	r18, -Y
    25f6:	c4 54       	subi	r28, 0x44	; 68
    25f8:	d0 40       	sbci	r29, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	82 2b       	or	r24, r18
    25fe:	93 2b       	or	r25, r19
    2600:	7c 01       	movw	r14, r24
    2602:	00 e0       	ldi	r16, 0x00	; 0
    2604:	10 e0       	ldi	r17, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    2606:	e1 14       	cp	r14, r1
    2608:	f1 04       	cpc	r15, r1
    260a:	01 05       	cpc	r16, r1
    260c:	11 05       	cpc	r17, r1
    260e:	41 f5       	brne	.+80     	; 0x2660 <chk_mounted+0x1ac>
    2610:	cb 5a       	subi	r28, 0xAB	; 171
    2612:	df 4f       	sbci	r29, 0xFF	; 255
    2614:	88 81       	ld	r24, Y
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	a0 e0       	ldi	r26, 0x00	; 0
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	18 2f       	mov	r17, r24
    261e:	00 27       	eor	r16, r16
    2620:	ff 24       	eor	r15, r15
    2622:	ee 24       	eor	r14, r14
    2624:	8a 91       	ld	r24, -Y
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	a0 e0       	ldi	r26, 0x00	; 0
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	dc 01       	movw	r26, r24
    262e:	99 27       	eor	r25, r25
    2630:	88 27       	eor	r24, r24
    2632:	e8 2a       	or	r14, r24
    2634:	f9 2a       	or	r15, r25
    2636:	0a 2b       	or	r16, r26
    2638:	1b 2b       	or	r17, r27
    263a:	22 97       	sbiw	r28, 0x02	; 2
    263c:	89 91       	ld	r24, Y+
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	a0 e0       	ldi	r26, 0x00	; 0
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	e8 2a       	or	r14, r24
    2646:	f9 2a       	or	r15, r25
    2648:	0a 2b       	or	r16, r26
    264a:	1b 2b       	or	r17, r27
    264c:	98 81       	ld	r25, Y
    264e:	c3 55       	subi	r28, 0x53	; 83
    2650:	d0 40       	sbci	r29, 0x00	; 0
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	a0 e0       	ldi	r26, 0x00	; 0
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	e8 2a       	or	r14, r24
    265a:	f9 2a       	or	r15, r25
    265c:	0a 2b       	or	r16, r26
    265e:	1b 2b       	or	r17, r27
	fs->sects_fat = fsize;
    2660:	ee 8a       	std	Y+22, r14	; 0x16
    2662:	ff 8a       	std	Y+23, r15	; 0x17
    2664:	08 8f       	std	Y+24, r16	; 0x18
    2666:	19 8f       	std	Y+25, r17	; 0x19
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    2668:	2e ad       	ldd	r18, Y+62	; 0x3e
    266a:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e0       	ldi	r20, 0x00	; 0
    2670:	50 e0       	ldi	r21, 0x00	; 0
    2672:	c8 01       	movw	r24, r16
    2674:	b7 01       	movw	r22, r14
    2676:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    267a:	3b 01       	movw	r6, r22
    267c:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    267e:	9d ad       	ldd	r25, Y+61	; 0x3d
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	2c ad       	ldd	r18, Y+60	; 0x3c
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	82 2b       	or	r24, r18
    2688:	93 2b       	or	r25, r19
    268a:	a0 e0       	ldi	r26, 0x00	; 0
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	8a 0d       	add	r24, r10
    2690:	9b 1d       	adc	r25, r11
    2692:	ac 1d       	adc	r26, r12
    2694:	bd 1d       	adc	r27, r13
    2696:	8e 8f       	std	Y+30, r24	; 0x1e
    2698:	9f 8f       	std	Y+31, r25	; 0x1f
    269a:	a8 a3       	std	Y+32, r26	; 0x20
    269c:	b9 a3       	std	Y+33, r27	; 0x21
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    269e:	8b ad       	ldd	r24, Y+59	; 0x3b
    26a0:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    26a2:	c0 5c       	subi	r28, 0xC0	; 192
    26a4:	df 4f       	sbci	r29, 0xFF	; 255
    26a6:	98 81       	ld	r25, Y
    26a8:	c0 54       	subi	r28, 0x40	; 64
    26aa:	d0 40       	sbci	r29, 0x00	; 0
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	2f ad       	ldd	r18, Y+63	; 0x3f
    26b0:	42 2f       	mov	r20, r18
    26b2:	50 e0       	ldi	r21, 0x00	; 0
    26b4:	48 2b       	or	r20, r24
    26b6:	59 2b       	or	r21, r25
    26b8:	48 87       	std	Y+8, r20	; 0x08
    26ba:	59 87       	std	Y+9, r21	; 0x09
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    26bc:	ce 5b       	subi	r28, 0xBE	; 190
    26be:	df 4f       	sbci	r29, 0xFF	; 255
    26c0:	98 81       	ld	r25, Y
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	2a 91       	ld	r18, -Y
    26c6:	c1 54       	subi	r28, 0x41	; 65
    26c8:	d0 40       	sbci	r29, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	82 2b       	or	r24, r18
    26ce:	93 2b       	or	r25, r19
    26d0:	7c 01       	movw	r14, r24
    26d2:	00 e0       	ldi	r16, 0x00	; 0
    26d4:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    26d6:	e1 14       	cp	r14, r1
    26d8:	f1 04       	cpc	r15, r1
    26da:	01 05       	cpc	r16, r1
    26dc:	11 05       	cpc	r17, r1
    26de:	41 f5       	brne	.+80     	; 0x2730 <chk_mounted+0x27c>
    26e0:	cf 5a       	subi	r28, 0xAF	; 175
    26e2:	df 4f       	sbci	r29, 0xFF	; 255
    26e4:	88 81       	ld	r24, Y
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	a0 e0       	ldi	r26, 0x00	; 0
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	18 2f       	mov	r17, r24
    26ee:	00 27       	eor	r16, r16
    26f0:	ff 24       	eor	r15, r15
    26f2:	ee 24       	eor	r14, r14
    26f4:	8a 91       	ld	r24, -Y
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	a0 e0       	ldi	r26, 0x00	; 0
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	dc 01       	movw	r26, r24
    26fe:	99 27       	eor	r25, r25
    2700:	88 27       	eor	r24, r24
    2702:	e8 2a       	or	r14, r24
    2704:	f9 2a       	or	r15, r25
    2706:	0a 2b       	or	r16, r26
    2708:	1b 2b       	or	r17, r27
    270a:	22 97       	sbiw	r28, 0x02	; 2
    270c:	89 91       	ld	r24, Y+
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	a0 e0       	ldi	r26, 0x00	; 0
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e8 2a       	or	r14, r24
    2716:	f9 2a       	or	r15, r25
    2718:	0a 2b       	or	r16, r26
    271a:	1b 2b       	or	r17, r27
    271c:	98 81       	ld	r25, Y
    271e:	cf 54       	subi	r28, 0x4F	; 79
    2720:	d0 40       	sbci	r29, 0x00	; 0
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	a0 e0       	ldi	r26, 0x00	; 0
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	e8 2a       	or	r14, r24
    272a:	f9 2a       	or	r15, r25
    272c:	0a 2b       	or	r16, r26
    272e:	1b 2b       	or	r17, r27
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    2730:	9d ad       	ldd	r25, Y+61	; 0x3d
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	2c ad       	ldd	r18, Y+60	; 0x3c
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	82 2b       	or	r24, r18
    273a:	93 2b       	or	r25, r19
    273c:	a0 e0       	ldi	r26, 0x00	; 0
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	e8 1a       	sub	r14, r24
    2742:	f9 0a       	sbc	r15, r25
    2744:	0a 0b       	sbc	r16, r26
    2746:	1b 0b       	sbc	r17, r27
    2748:	e6 18       	sub	r14, r6
    274a:	f7 08       	sbc	r15, r7
    274c:	08 09       	sbc	r16, r8
    274e:	19 09       	sbc	r17, r9
    2750:	f4 e0       	ldi	r31, 0x04	; 4
    2752:	56 95       	lsr	r21
    2754:	47 95       	ror	r20
    2756:	fa 95       	dec	r31
    2758:	e1 f7       	brne	.-8      	; 0x2752 <chk_mounted+0x29e>
    275a:	ca 01       	movw	r24, r20
    275c:	a0 e0       	ldi	r26, 0x00	; 0
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e8 1a       	sub	r14, r24
    2762:	f9 0a       	sbc	r15, r25
    2764:	0a 0b       	sbc	r16, r26
    2766:	1b 0b       	sbc	r17, r27
    2768:	2a 81       	ldd	r18, Y+2	; 0x02
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e0       	ldi	r20, 0x00	; 0
    276e:	50 e0       	ldi	r21, 0x00	; 0
    2770:	c8 01       	movw	r24, r16
    2772:	b7 01       	movw	r22, r14
    2774:	0e 94 87 43 	call	0x870e	; 0x870e <__udivmodsi4>
    2778:	2e 5f       	subi	r18, 0xFE	; 254
    277a:	3f 4f       	sbci	r19, 0xFF	; 255
    277c:	4f 4f       	sbci	r20, 0xFF	; 255
    277e:	5f 4f       	sbci	r21, 0xFF	; 255
    2780:	2a 8f       	std	Y+26, r18	; 0x1a
    2782:	3b 8f       	std	Y+27, r19	; 0x1b
    2784:	4c 8f       	std	Y+28, r20	; 0x1c
    2786:	5d 8f       	std	Y+29, r21	; 0x1d
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    2788:	27 3f       	cpi	r18, 0xF7	; 247
    278a:	8f e0       	ldi	r24, 0x0F	; 15
    278c:	38 07       	cpc	r19, r24
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	48 07       	cpc	r20, r24
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	58 07       	cpc	r21, r24
    2796:	10 f4       	brcc	.+4      	; 0x279c <chk_mounted+0x2e8>
    2798:	11 e0       	ldi	r17, 0x01	; 1
    279a:	07 c0       	rjmp	.+14     	; 0x27aa <chk_mounted+0x2f6>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    279c:	27 5f       	subi	r18, 0xF7	; 247
    279e:	3f 4f       	sbci	r19, 0xFF	; 255
    27a0:	40 40       	sbci	r20, 0x00	; 0
    27a2:	50 40       	sbci	r21, 0x00	; 0
    27a4:	08 f0       	brcs	.+2      	; 0x27a8 <chk_mounted+0x2f4>
    27a6:	33 c1       	rjmp	.+614    	; 0x2a0e <chk_mounted+0x55a>
    27a8:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    27aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27ae:	a8 a1       	ldd	r26, Y+32	; 0x20
    27b0:	b9 a1       	ldd	r27, Y+33	; 0x21
    27b2:	86 0d       	add	r24, r6
    27b4:	97 1d       	adc	r25, r7
    27b6:	a8 1d       	adc	r26, r8
    27b8:	b9 1d       	adc	r27, r9
    27ba:	8a a3       	std	Y+34, r24	; 0x22
    27bc:	9b a3       	std	Y+35, r25	; 0x23
    27be:	ac a3       	std	Y+36, r26	; 0x24
    27c0:	bd a3       	std	Y+37, r27	; 0x25
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    27c2:	88 85       	ldd	r24, Y+8	; 0x08
    27c4:	99 85       	ldd	r25, Y+9	; 0x09
    27c6:	e4 e0       	ldi	r30, 0x04	; 4
    27c8:	96 95       	lsr	r25
    27ca:	87 95       	ror	r24
    27cc:	ea 95       	dec	r30
    27ce:	e1 f7       	brne	.-8      	; 0x27c8 <chk_mounted+0x314>
    27d0:	a0 e0       	ldi	r26, 0x00	; 0
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    27d6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    27d8:	48 a1       	ldd	r20, Y+32	; 0x20
    27da:	59 a1       	ldd	r21, Y+33	; 0x21
    27dc:	82 0f       	add	r24, r18
    27de:	93 1f       	adc	r25, r19
    27e0:	a4 1f       	adc	r26, r20
    27e2:	b5 1f       	adc	r27, r21
    27e4:	86 0d       	add	r24, r6
    27e6:	97 1d       	adc	r25, r7
    27e8:	a8 1d       	adc	r26, r8
    27ea:	b9 1d       	adc	r27, r9
    27ec:	8e a3       	std	Y+38, r24	; 0x26
    27ee:	9f a3       	std	Y+39, r25	; 0x27
    27f0:	a8 a7       	std	Y+40, r26	; 0x28
    27f2:	b9 a7       	std	Y+41, r27	; 0x29

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    27f4:	8f ef       	ldi	r24, 0xFF	; 255
    27f6:	9f ef       	ldi	r25, 0xFF	; 255
    27f8:	af ef       	ldi	r26, 0xFF	; 255
    27fa:	bf ef       	ldi	r27, 0xFF	; 255
    27fc:	8e 87       	std	Y+14, r24	; 0x0e
    27fe:	9f 87       	std	Y+15, r25	; 0x0f
    2800:	a8 8b       	std	Y+16, r26	; 0x10
    2802:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    2804:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    2806:	13 30       	cpi	r17, 0x03	; 3
    2808:	09 f0       	breq	.+2      	; 0x280c <chk_mounted+0x358>
    280a:	dc c0       	rjmp	.+440    	; 0x29c4 <chk_mounted+0x510>
	 	fs->fsi_flag = 0;
    280c:	1d 82       	std	Y+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    280e:	c1 5a       	subi	r28, 0xA1	; 161
    2810:	df 4f       	sbci	r29, 0xFF	; 255
    2812:	38 81       	ld	r19, Y
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	8a 91       	ld	r24, -Y
    2818:	ce 55       	subi	r28, 0x5E	; 94
    281a:	d0 40       	sbci	r29, 0x00	; 0
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	28 2b       	or	r18, r24
    2820:	39 2b       	or	r19, r25
    2822:	40 e0       	ldi	r20, 0x00	; 0
    2824:	50 e0       	ldi	r21, 0x00	; 0
    2826:	2a 0d       	add	r18, r10
    2828:	3b 1d       	adc	r19, r11
    282a:	4c 1d       	adc	r20, r12
    282c:	5d 1d       	adc	r21, r13
    282e:	2a 8b       	std	Y+18, r18	; 0x12
    2830:	3b 8b       	std	Y+19, r19	; 0x13
    2832:	4c 8b       	std	Y+20, r20	; 0x14
    2834:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    2836:	be 01       	movw	r22, r28
    2838:	62 5d       	subi	r22, 0xD2	; 210
    283a:	7f 4f       	sbci	r23, 0xFF	; 255
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	01 e0       	ldi	r16, 0x01	; 1
    2840:	0e 94 83 05 	call	0xb06	; 0xb06 <disk_read>
    2844:	88 23       	and	r24, r24
    2846:	09 f0       	breq	.+2      	; 0x284a <chk_mounted+0x396>
    2848:	bd c0       	rjmp	.+378    	; 0x29c4 <chk_mounted+0x510>
    284a:	c3 5d       	subi	r28, 0xD3	; 211
    284c:	dd 4f       	sbci	r29, 0xFD	; 253
    284e:	98 81       	ld	r25, Y
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	2a 91       	ld	r18, -Y
    2854:	cc 52       	subi	r28, 0x2C	; 44
    2856:	d2 40       	sbci	r29, 0x02	; 2
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	82 2b       	or	r24, r18
    285c:	93 2b       	or	r25, r19
    285e:	85 55       	subi	r24, 0x55	; 85
    2860:	9a 4a       	sbci	r25, 0xAA	; 170
    2862:	09 f0       	breq	.+2      	; 0x2866 <chk_mounted+0x3b2>
    2864:	af c0       	rjmp	.+350    	; 0x29c4 <chk_mounted+0x510>
    2866:	29 a9       	ldd	r18, Y+49	; 0x31
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	40 e0       	ldi	r20, 0x00	; 0
    286c:	50 e0       	ldi	r21, 0x00	; 0
    286e:	52 2f       	mov	r21, r18
    2870:	44 27       	eor	r20, r20
    2872:	33 27       	eor	r19, r19
    2874:	22 27       	eor	r18, r18
    2876:	88 a9       	ldd	r24, Y+48	; 0x30
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	a0 e0       	ldi	r26, 0x00	; 0
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	dc 01       	movw	r26, r24
    2880:	99 27       	eor	r25, r25
    2882:	88 27       	eor	r24, r24
    2884:	28 2b       	or	r18, r24
    2886:	39 2b       	or	r19, r25
    2888:	4a 2b       	or	r20, r26
    288a:	5b 2b       	or	r21, r27
    288c:	8e a5       	ldd	r24, Y+46	; 0x2e
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	a0 e0       	ldi	r26, 0x00	; 0
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	28 2b       	or	r18, r24
    2896:	39 2b       	or	r19, r25
    2898:	4a 2b       	or	r20, r26
    289a:	5b 2b       	or	r21, r27
    289c:	9f a5       	ldd	r25, Y+47	; 0x2f
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	a0 e0       	ldi	r26, 0x00	; 0
    28a2:	b0 e0       	ldi	r27, 0x00	; 0
    28a4:	28 2b       	or	r18, r24
    28a6:	39 2b       	or	r19, r25
    28a8:	4a 2b       	or	r20, r26
    28aa:	5b 2b       	or	r21, r27
    28ac:	22 55       	subi	r18, 0x52	; 82
    28ae:	32 45       	sbci	r19, 0x52	; 82
    28b0:	41 46       	sbci	r20, 0x61	; 97
    28b2:	51 44       	sbci	r21, 0x41	; 65
    28b4:	09 f0       	breq	.+2      	; 0x28b8 <chk_mounted+0x404>
    28b6:	86 c0       	rjmp	.+268    	; 0x29c4 <chk_mounted+0x510>
    28b8:	cb 5e       	subi	r28, 0xEB	; 235
    28ba:	dd 4f       	sbci	r29, 0xFD	; 253
    28bc:	28 81       	ld	r18, Y
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e0       	ldi	r20, 0x00	; 0
    28c2:	50 e0       	ldi	r21, 0x00	; 0
    28c4:	52 2f       	mov	r21, r18
    28c6:	44 27       	eor	r20, r20
    28c8:	33 27       	eor	r19, r19
    28ca:	22 27       	eor	r18, r18
    28cc:	8a 91       	ld	r24, -Y
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	a0 e0       	ldi	r26, 0x00	; 0
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	dc 01       	movw	r26, r24
    28d6:	99 27       	eor	r25, r25
    28d8:	88 27       	eor	r24, r24
    28da:	28 2b       	or	r18, r24
    28dc:	39 2b       	or	r19, r25
    28de:	4a 2b       	or	r20, r26
    28e0:	5b 2b       	or	r21, r27
    28e2:	22 97       	sbiw	r28, 0x02	; 2
    28e4:	89 91       	ld	r24, Y+
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	a0 e0       	ldi	r26, 0x00	; 0
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	28 2b       	or	r18, r24
    28ee:	39 2b       	or	r19, r25
    28f0:	4a 2b       	or	r20, r26
    28f2:	5b 2b       	or	r21, r27
    28f4:	98 81       	ld	r25, Y
    28f6:	c3 51       	subi	r28, 0x13	; 19
    28f8:	d2 40       	sbci	r29, 0x02	; 2
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	a0 e0       	ldi	r26, 0x00	; 0
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	28 2b       	or	r18, r24
    2902:	39 2b       	or	r19, r25
    2904:	4a 2b       	or	r20, r26
    2906:	5b 2b       	or	r21, r27
    2908:	22 57       	subi	r18, 0x72	; 114
    290a:	32 47       	sbci	r19, 0x72	; 114
    290c:	41 44       	sbci	r20, 0x41	; 65
    290e:	51 46       	sbci	r21, 0x61	; 97
    2910:	09 f0       	breq	.+2      	; 0x2914 <chk_mounted+0x460>
    2912:	58 c0       	rjmp	.+176    	; 0x29c4 <chk_mounted+0x510>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    2914:	c3 5e       	subi	r28, 0xE3	; 227
    2916:	dd 4f       	sbci	r29, 0xFD	; 253
    2918:	28 81       	ld	r18, Y
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e0       	ldi	r20, 0x00	; 0
    291e:	50 e0       	ldi	r21, 0x00	; 0
    2920:	52 2f       	mov	r21, r18
    2922:	44 27       	eor	r20, r20
    2924:	33 27       	eor	r19, r19
    2926:	22 27       	eor	r18, r18
    2928:	8a 91       	ld	r24, -Y
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	a0 e0       	ldi	r26, 0x00	; 0
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	dc 01       	movw	r26, r24
    2932:	99 27       	eor	r25, r25
    2934:	88 27       	eor	r24, r24
    2936:	28 2b       	or	r18, r24
    2938:	39 2b       	or	r19, r25
    293a:	4a 2b       	or	r20, r26
    293c:	5b 2b       	or	r21, r27
    293e:	22 97       	sbiw	r28, 0x02	; 2
    2940:	89 91       	ld	r24, Y+
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	a0 e0       	ldi	r26, 0x00	; 0
    2946:	b0 e0       	ldi	r27, 0x00	; 0
    2948:	28 2b       	or	r18, r24
    294a:	39 2b       	or	r19, r25
    294c:	4a 2b       	or	r20, r26
    294e:	5b 2b       	or	r21, r27
    2950:	98 81       	ld	r25, Y
    2952:	cb 51       	subi	r28, 0x1B	; 27
    2954:	d2 40       	sbci	r29, 0x02	; 2
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	a0 e0       	ldi	r26, 0x00	; 0
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	28 2b       	or	r18, r24
    295e:	39 2b       	or	r19, r25
    2960:	4a 2b       	or	r20, r26
    2962:	5b 2b       	or	r21, r27
    2964:	2a 87       	std	Y+10, r18	; 0x0a
    2966:	3b 87       	std	Y+11, r19	; 0x0b
    2968:	4c 87       	std	Y+12, r20	; 0x0c
    296a:	5d 87       	std	Y+13, r21	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    296c:	c7 5e       	subi	r28, 0xE7	; 231
    296e:	dd 4f       	sbci	r29, 0xFD	; 253
    2970:	28 81       	ld	r18, Y
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e0       	ldi	r20, 0x00	; 0
    2976:	50 e0       	ldi	r21, 0x00	; 0
    2978:	52 2f       	mov	r21, r18
    297a:	44 27       	eor	r20, r20
    297c:	33 27       	eor	r19, r19
    297e:	22 27       	eor	r18, r18
    2980:	8a 91       	ld	r24, -Y
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	a0 e0       	ldi	r26, 0x00	; 0
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	dc 01       	movw	r26, r24
    298a:	99 27       	eor	r25, r25
    298c:	88 27       	eor	r24, r24
    298e:	28 2b       	or	r18, r24
    2990:	39 2b       	or	r19, r25
    2992:	4a 2b       	or	r20, r26
    2994:	5b 2b       	or	r21, r27
    2996:	22 97       	sbiw	r28, 0x02	; 2
    2998:	89 91       	ld	r24, Y+
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	a0 e0       	ldi	r26, 0x00	; 0
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	28 2b       	or	r18, r24
    29a2:	39 2b       	or	r19, r25
    29a4:	4a 2b       	or	r20, r26
    29a6:	5b 2b       	or	r21, r27
    29a8:	98 81       	ld	r25, Y
    29aa:	c7 51       	subi	r28, 0x17	; 23
    29ac:	d2 40       	sbci	r29, 0x02	; 2
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	a0 e0       	ldi	r26, 0x00	; 0
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	28 2b       	or	r18, r24
    29b6:	39 2b       	or	r19, r25
    29b8:	4a 2b       	or	r20, r26
    29ba:	5b 2b       	or	r21, r27
    29bc:	2e 87       	std	Y+14, r18	; 0x0e
    29be:	3f 87       	std	Y+15, r19	; 0x0f
    29c0:	48 8b       	std	Y+16, r20	; 0x10
    29c2:	59 8b       	std	Y+17, r21	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    29c4:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    29c6:	1a a6       	std	Y+42, r1	; 0x2a
    29c8:	1b a6       	std	Y+43, r1	; 0x2b
    29ca:	1c a6       	std	Y+44, r1	; 0x2c
    29cc:	1d a6       	std	Y+45, r1	; 0x2d
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    29ce:	80 91 1f 2a 	lds	r24, 0x2A1F
    29d2:	90 91 20 2a 	lds	r25, 0x2A20
    29d6:	01 96       	adiw	r24, 0x01	; 1
    29d8:	80 93 1f 2a 	sts	0x2A1F, r24
    29dc:	90 93 20 2a 	sts	0x2A20, r25
    29e0:	8e 83       	std	Y+6, r24	; 0x06
    29e2:	9f 83       	std	Y+7, r25	; 0x07
    29e4:	02 c0       	rjmp	.+4      	; 0x29ea <chk_mounted+0x536>

	return FR_OK;
    29e6:	8a e0       	ldi	r24, 0x0A	; 10
    29e8:	03 c0       	rjmp	.+6      	; 0x29f0 <chk_mounted+0x53c>
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	01 c0       	rjmp	.+2      	; 0x29f0 <chk_mounted+0x53c>
    29ee:	8d e0       	ldi	r24, 0x0D	; 13
}
    29f0:	df 91       	pop	r29
    29f2:	cf 91       	pop	r28
    29f4:	1f 91       	pop	r17
    29f6:	0f 91       	pop	r16
    29f8:	ff 90       	pop	r15
    29fa:	ef 90       	pop	r14
    29fc:	df 90       	pop	r13
    29fe:	cf 90       	pop	r12
    2a00:	bf 90       	pop	r11
    2a02:	af 90       	pop	r10
    2a04:	9f 90       	pop	r9
    2a06:	8f 90       	pop	r8
    2a08:	7f 90       	pop	r7
    2a0a:	6f 90       	pop	r6
    2a0c:	08 95       	ret
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2a0e:	c3 5a       	subi	r28, 0xA3	; 163
    2a10:	df 4f       	sbci	r29, 0xFF	; 255
    2a12:	28 81       	ld	r18, Y
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	40 e0       	ldi	r20, 0x00	; 0
    2a18:	50 e0       	ldi	r21, 0x00	; 0
    2a1a:	52 2f       	mov	r21, r18
    2a1c:	44 27       	eor	r20, r20
    2a1e:	33 27       	eor	r19, r19
    2a20:	22 27       	eor	r18, r18
    2a22:	8a 91       	ld	r24, -Y
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	a0 e0       	ldi	r26, 0x00	; 0
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	99 27       	eor	r25, r25
    2a2e:	88 27       	eor	r24, r24
    2a30:	28 2b       	or	r18, r24
    2a32:	39 2b       	or	r19, r25
    2a34:	4a 2b       	or	r20, r26
    2a36:	5b 2b       	or	r21, r27
    2a38:	22 97       	sbiw	r28, 0x02	; 2
    2a3a:	89 91       	ld	r24, Y+
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	a0 e0       	ldi	r26, 0x00	; 0
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	28 2b       	or	r18, r24
    2a44:	39 2b       	or	r19, r25
    2a46:	4a 2b       	or	r20, r26
    2a48:	5b 2b       	or	r21, r27
    2a4a:	98 81       	ld	r25, Y
    2a4c:	cb 55       	subi	r28, 0x5B	; 91
    2a4e:	d0 40       	sbci	r29, 0x00	; 0
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	a0 e0       	ldi	r26, 0x00	; 0
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	28 2b       	or	r18, r24
    2a58:	39 2b       	or	r19, r25
    2a5a:	4a 2b       	or	r20, r26
    2a5c:	5b 2b       	or	r21, r27
    2a5e:	2a a3       	std	Y+34, r18	; 0x22
    2a60:	3b a3       	std	Y+35, r19	; 0x23
    2a62:	4c a3       	std	Y+36, r20	; 0x24
    2a64:	5d a3       	std	Y+37, r21	; 0x25
    2a66:	13 e0       	ldi	r17, 0x03	; 3
    2a68:	ac ce       	rjmp	.-680    	; 0x27c2 <chk_mounted+0x30e>

00002a6a <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    2a6a:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    2a6c:	00 97       	sbiw	r24, 0x00	; 0
    2a6e:	a9 f0       	breq	.+42     	; 0x2a9a <validate+0x30>
    2a70:	80 81       	ld	r24, Z
    2a72:	88 23       	and	r24, r24
    2a74:	91 f0       	breq	.+36     	; 0x2a9a <validate+0x30>
    2a76:	86 81       	ldd	r24, Z+6	; 0x06
    2a78:	97 81       	ldd	r25, Z+7	; 0x07
    2a7a:	86 17       	cp	r24, r22
    2a7c:	97 07       	cpc	r25, r23
    2a7e:	69 f4       	brne	.+26     	; 0x2a9a <validate+0x30>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2a80:	81 81       	ldd	r24, Z+1	; 0x01
    2a82:	88 23       	and	r24, r24
    2a84:	11 f0       	breq	.+4      	; 0x2a8a <validate+0x20>
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	02 c0       	rjmp	.+4      	; 0x2a8e <validate+0x24>
	return Stat;
    2a8a:	80 91 b2 29 	lds	r24, 0x29B2
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    2a8e:	80 fd       	sbrc	r24, 0
    2a90:	02 c0       	rjmp	.+4      	; 0x2a96 <validate+0x2c>
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	08 95       	ret
    2a96:	83 e0       	ldi	r24, 0x03	; 3
    2a98:	08 95       	ret
    2a9a:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    2a9c:	08 95       	ret

00002a9e <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    2a9e:	db 01       	movw	r26, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    2aa0:	88 23       	and	r24, r24
    2aa2:	11 f0       	breq	.+4      	; 0x2aa8 <f_mount+0xa>
    2aa4:	8b e0       	ldi	r24, 0x0B	; 11
    2aa6:	08 95       	ret
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    2aa8:	e0 91 1d 2a 	lds	r30, 0x2A1D
    2aac:	f0 91 1e 2a 	lds	r31, 0x2A1E

	if (rfs) {
    2ab0:	30 97       	sbiw	r30, 0x00	; 0
    2ab2:	09 f0       	breq	.+2      	; 0x2ab6 <f_mount+0x18>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    2ab4:	10 82       	st	Z, r1
	}

	if (fs) {
    2ab6:	10 97       	sbiw	r26, 0x00	; 0
    2ab8:	09 f0       	breq	.+2      	; 0x2abc <f_mount+0x1e>
		fs->fs_type = 0;			/* Clear new fs object */
    2aba:	1c 92       	st	X, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    2abc:	a0 93 1d 2a 	sts	0x2A1D, r26
    2ac0:	b0 93 1e 2a 	sts	0x2A1E, r27
    2ac4:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    2ac6:	08 95       	ret

00002ac8 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2ac8:	5f 92       	push	r5
    2aca:	6f 92       	push	r6
    2acc:	7f 92       	push	r7
    2ace:	8f 92       	push	r8
    2ad0:	9f 92       	push	r9
    2ad2:	af 92       	push	r10
    2ad4:	bf 92       	push	r11
    2ad6:	cf 92       	push	r12
    2ad8:	df 92       	push	r13
    2ada:	ef 92       	push	r14
    2adc:	ff 92       	push	r15
    2ade:	0f 93       	push	r16
    2ae0:	1f 93       	push	r17
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	cd b7       	in	r28, 0x3d	; 61
    2ae8:	de b7       	in	r29, 0x3e	; 62
    2aea:	a4 97       	sbiw	r28, 0x24	; 36
    2aec:	cd bf       	out	0x3d, r28	; 61
    2aee:	de bf       	out	0x3e, r29	; 62
    2af0:	3c 01       	movw	r6, r24
    2af2:	6b a3       	std	Y+35, r22	; 0x23
    2af4:	7c a3       	std	Y+36, r23	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    2af6:	dc 01       	movw	r26, r24
    2af8:	1d 92       	st	X+, r1
    2afa:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    2afc:	3f e1       	ldi	r19, 0x1F	; 31
    2afe:	53 2e       	mov	r5, r19
    2b00:	54 22       	and	r5, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    2b02:	8e 01       	movw	r16, r28
    2b04:	03 5f       	subi	r16, 0xF3	; 243
    2b06:	1f 4f       	sbci	r17, 0xFF	; 255
    2b08:	4e 71       	andi	r20, 0x1E	; 30
    2b0a:	ce 01       	movw	r24, r28
    2b0c:	83 96       	adiw	r24, 0x23	; 35
    2b0e:	b8 01       	movw	r22, r16
    2b10:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2b14:	88 23       	and	r24, r24
    2b16:	11 f0       	breq	.+4      	; 0x2b1c <f_open+0x54>
    2b18:	28 2f       	mov	r18, r24
    2b1a:	32 c1       	rjmp	.+612    	; 0x2d80 <f_open+0x2b8>
	INITBUF(dj, sfn, lfn);
    2b1c:	ce 01       	movw	r24, r28
    2b1e:	01 96       	adiw	r24, 0x01	; 1
    2b20:	89 a3       	std	Y+33, r24	; 0x21
    2b22:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);	/* Follow the file path */
    2b24:	6b a1       	ldd	r22, Y+35	; 0x23
    2b26:	7c a1       	ldd	r23, Y+36	; 0x24
    2b28:	c8 01       	movw	r24, r16
    2b2a:	0e 94 81 10 	call	0x2102	; 0x2102 <follow_path>
    2b2e:	28 2f       	mov	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2b30:	45 2d       	mov	r20, r5
    2b32:	50 e0       	ldi	r21, 0x00	; 0
    2b34:	ca 01       	movw	r24, r20
    2b36:	8c 71       	andi	r24, 0x1C	; 28
    2b38:	90 70       	andi	r25, 0x00	; 0
    2b3a:	89 2b       	or	r24, r25
    2b3c:	09 f4       	brne	.+2      	; 0x2b40 <f_open+0x78>
    2b3e:	84 c0       	rjmp	.+264    	; 0x2c48 <f_open+0x180>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    2b40:	22 23       	and	r18, r18
    2b42:	79 f0       	breq	.+30     	; 0x2b62 <f_open+0x9a>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    2b44:	24 30       	cpi	r18, 0x04	; 4
    2b46:	09 f0       	breq	.+2      	; 0x2b4a <f_open+0x82>
    2b48:	1b c1       	rjmp	.+566    	; 0x2d80 <f_open+0x2b8>
				res = dir_register(&dj);
    2b4a:	c8 01       	movw	r24, r16
    2b4c:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <dir_register>
    2b50:	28 2f       	mov	r18, r24
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2b52:	88 23       	and	r24, r24
    2b54:	09 f0       	breq	.+2      	; 0x2b58 <f_open+0x90>
    2b56:	14 c1       	rjmp	.+552    	; 0x2d80 <f_open+0x2b8>
			mode |= FA_CREATE_ALWAYS;
    2b58:	b8 e0       	ldi	r27, 0x08	; 8
    2b5a:	5b 2a       	or	r5, r27
			dir = dj.dir;			/* Created entry (SFN entry) */
    2b5c:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2b5e:	18 a1       	ldd	r17, Y+32	; 0x20
    2b60:	5b c0       	rjmp	.+182    	; 0x2c18 <f_open+0x150>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    2b62:	52 fe       	sbrs	r5, 2
    2b64:	02 c0       	rjmp	.+4      	; 0x2b6a <f_open+0xa2>
    2b66:	28 e0       	ldi	r18, 0x08	; 8
    2b68:	0b c1       	rjmp	.+534    	; 0x2d80 <f_open+0x2b8>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    2b6a:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2b6c:	18 a1       	ldd	r17, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    2b6e:	01 15       	cp	r16, r1
    2b70:	11 05       	cpc	r17, r1
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <f_open+0xae>
    2b74:	02 c1       	rjmp	.+516    	; 0x2d7a <f_open+0x2b2>
    2b76:	f8 01       	movw	r30, r16
    2b78:	83 85       	ldd	r24, Z+11	; 0x0b
    2b7a:	81 71       	andi	r24, 0x11	; 17
    2b7c:	09 f0       	breq	.+2      	; 0x2b80 <f_open+0xb8>
    2b7e:	fd c0       	rjmp	.+506    	; 0x2d7a <f_open+0x2b2>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    2b80:	53 fe       	sbrs	r5, 3
    2b82:	4a c0       	rjmp	.+148    	; 0x2c18 <f_open+0x150>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    2b84:	95 89       	ldd	r25, Z+21	; 0x15
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	24 89       	ldd	r18, Z+20	; 0x14
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	82 2b       	or	r24, r18
    2b8e:	93 2b       	or	r25, r19
    2b90:	a0 e0       	ldi	r26, 0x00	; 0
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	7c 01       	movw	r14, r24
    2b96:	dd 24       	eor	r13, r13
    2b98:	cc 24       	eor	r12, r12
    2b9a:	93 8d       	ldd	r25, Z+27	; 0x1b
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	82 2b       	or	r24, r18
    2ba4:	93 2b       	or	r25, r19
    2ba6:	a0 e0       	ldi	r26, 0x00	; 0
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	c8 2a       	or	r12, r24
    2bac:	d9 2a       	or	r13, r25
    2bae:	ea 2a       	or	r14, r26
    2bb0:	fb 2a       	or	r15, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    2bb2:	14 8a       	std	Z+20, r1	; 0x14
    2bb4:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    2bb6:	12 8e       	std	Z+26, r1	; 0x1a
    2bb8:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    2bba:	14 8e       	std	Z+28, r1	; 0x1c
    2bbc:	15 8e       	std	Z+29, r1	; 0x1d
    2bbe:	16 8e       	std	Z+30, r1	; 0x1e
    2bc0:	17 8e       	std	Z+31, r1	; 0x1f
				dj.fs->wflag = 1;
    2bc2:	ed 85       	ldd	r30, Y+13	; 0x0d
    2bc4:	fe 85       	ldd	r31, Y+14	; 0x0e
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    2bca:	82 a4       	ldd	r8, Z+42	; 0x2a
    2bcc:	93 a4       	ldd	r9, Z+43	; 0x2b
    2bce:	a4 a4       	ldd	r10, Z+44	; 0x2c
    2bd0:	b5 a4       	ldd	r11, Z+45	; 0x2d
				if (cl) {
    2bd2:	c1 14       	cp	r12, r1
    2bd4:	d1 04       	cpc	r13, r1
    2bd6:	e1 04       	cpc	r14, r1
    2bd8:	f1 04       	cpc	r15, r1
    2bda:	a1 f0       	breq	.+40     	; 0x2c04 <f_open+0x13c>
					res = remove_chain(dj.fs, cl);
    2bdc:	cf 01       	movw	r24, r30
    2bde:	b7 01       	movw	r22, r14
    2be0:	a6 01       	movw	r20, r12
    2be2:	0e 94 25 0b 	call	0x164a	; 0x164a <remove_chain>
    2be6:	28 2f       	mov	r18, r24
					if (res) LEAVE_FF(dj.fs, res);
    2be8:	88 23       	and	r24, r24
    2bea:	09 f0       	breq	.+2      	; 0x2bee <f_open+0x126>
    2bec:	c9 c0       	rjmp	.+402    	; 0x2d80 <f_open+0x2b8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2bee:	ed 85       	ldd	r30, Y+13	; 0x0d
    2bf0:	fe 85       	ldd	r31, Y+14	; 0x0e
    2bf2:	08 94       	sec
    2bf4:	c1 08       	sbc	r12, r1
    2bf6:	d1 08       	sbc	r13, r1
    2bf8:	e1 08       	sbc	r14, r1
    2bfa:	f1 08       	sbc	r15, r1
    2bfc:	c2 86       	std	Z+10, r12	; 0x0a
    2bfe:	d3 86       	std	Z+11, r13	; 0x0b
    2c00:	e4 86       	std	Z+12, r14	; 0x0c
    2c02:	f5 86       	std	Z+13, r15	; 0x0d
				}
				res = move_window(dj.fs, ps);
    2c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c08:	b5 01       	movw	r22, r10
    2c0a:	a4 01       	movw	r20, r8
    2c0c:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    2c10:	28 2f       	mov	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2c12:	88 23       	and	r24, r24
    2c14:	09 f0       	breq	.+2      	; 0x2c18 <f_open+0x150>
    2c16:	b4 c0       	rjmp	.+360    	; 0x2d80 <f_open+0x2b8>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    2c18:	53 fe       	sbrs	r5, 3
    2c1a:	27 c0       	rjmp	.+78     	; 0x2c6a <f_open+0x1a2>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    2c1c:	d8 01       	movw	r26, r16
    2c1e:	1b 96       	adiw	r26, 0x0b	; 11
    2c20:	1c 92       	st	X, r1
    2c22:	1b 97       	sbiw	r26, 0x0b	; 11
			ps = get_fattime();
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    2c24:	1e 96       	adiw	r26, 0x0e	; 14
    2c26:	1c 92       	st	X, r1
    2c28:	1e 97       	sbiw	r26, 0x0e	; 14
    2c2a:	1f 96       	adiw	r26, 0x0f	; 15
    2c2c:	1c 92       	st	X, r1
    2c2e:	1f 97       	sbiw	r26, 0x0f	; 15
    2c30:	50 96       	adiw	r26, 0x10	; 16
    2c32:	1c 92       	st	X, r1
    2c34:	50 97       	sbiw	r26, 0x10	; 16
    2c36:	51 96       	adiw	r26, 0x11	; 17
    2c38:	1c 92       	st	X, r1
			dj.fs->wflag = 1;
    2c3a:	ed 85       	ldd	r30, Y+13	; 0x0d
    2c3c:	fe 85       	ldd	r31, Y+14	; 0x0e
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    2c42:	b0 e2       	ldi	r27, 0x20	; 32
    2c44:	5b 2a       	or	r5, r27
    2c46:	11 c0       	rjmp	.+34     	; 0x2c6a <f_open+0x1a2>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    2c48:	22 23       	and	r18, r18
    2c4a:	09 f0       	breq	.+2      	; 0x2c4e <f_open+0x186>
    2c4c:	99 c0       	rjmp	.+306    	; 0x2d80 <f_open+0x2b8>
		dir = dj.dir;
    2c4e:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2c50:	18 a1       	ldd	r17, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    2c52:	01 15       	cp	r16, r1
    2c54:	11 05       	cpc	r17, r1
    2c56:	09 f4       	brne	.+2      	; 0x2c5a <f_open+0x192>
    2c58:	92 c0       	rjmp	.+292    	; 0x2d7e <f_open+0x2b6>
    2c5a:	f8 01       	movw	r30, r16
    2c5c:	83 85       	ldd	r24, Z+11	; 0x0b
    2c5e:	84 fd       	sbrc	r24, 4
    2c60:	8e c0       	rjmp	.+284    	; 0x2d7e <f_open+0x2b6>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2c62:	51 fe       	sbrs	r5, 1
    2c64:	02 c0       	rjmp	.+4      	; 0x2c6a <f_open+0x1a2>
    2c66:	80 fd       	sbrc	r24, 0
    2c68:	88 c0       	rjmp	.+272    	; 0x2d7a <f_open+0x2b2>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    2c6a:	ed 85       	ldd	r30, Y+13	; 0x0d
    2c6c:	fe 85       	ldd	r31, Y+14	; 0x0e
    2c6e:	22 a5       	ldd	r18, Z+42	; 0x2a
    2c70:	33 a5       	ldd	r19, Z+43	; 0x2b
    2c72:	44 a5       	ldd	r20, Z+44	; 0x2c
    2c74:	55 a5       	ldd	r21, Z+45	; 0x2d
    2c76:	d3 01       	movw	r26, r6
    2c78:	5a 96       	adiw	r26, 0x1a	; 26
    2c7a:	2d 93       	st	X+, r18
    2c7c:	3d 93       	st	X+, r19
    2c7e:	4d 93       	st	X+, r20
    2c80:	5c 93       	st	X, r21
    2c82:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    2c84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c86:	98 a1       	ldd	r25, Y+32	; 0x20
    2c88:	5e 96       	adiw	r26, 0x1e	; 30
    2c8a:	8d 93       	st	X+, r24
    2c8c:	9c 93       	st	X, r25
    2c8e:	5f 97       	sbiw	r26, 0x1f	; 31
#endif
	fp->flag = mode;					/* File access mode */
    2c90:	14 96       	adiw	r26, 0x04	; 4
    2c92:	5c 92       	st	X, r5
	fp->org_clust =						/* File start cluster */
    2c94:	d8 01       	movw	r26, r16
    2c96:	55 96       	adiw	r26, 0x15	; 21
    2c98:	3c 91       	ld	r19, X
    2c9a:	55 97       	sbiw	r26, 0x15	; 21
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	54 96       	adiw	r26, 0x14	; 20
    2ca0:	8c 91       	ld	r24, X
    2ca2:	54 97       	sbiw	r26, 0x14	; 20
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	28 2b       	or	r18, r24
    2ca8:	39 2b       	or	r19, r25
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	50 e0       	ldi	r21, 0x00	; 0
    2cae:	a9 01       	movw	r20, r18
    2cb0:	33 27       	eor	r19, r19
    2cb2:	22 27       	eor	r18, r18
    2cb4:	5b 96       	adiw	r26, 0x1b	; 27
    2cb6:	9c 91       	ld	r25, X
    2cb8:	5b 97       	sbiw	r26, 0x1b	; 27
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	5a 96       	adiw	r26, 0x1a	; 26
    2cbe:	6c 91       	ld	r22, X
    2cc0:	70 e0       	ldi	r23, 0x00	; 0
    2cc2:	86 2b       	or	r24, r22
    2cc4:	97 2b       	or	r25, r23
    2cc6:	a0 e0       	ldi	r26, 0x00	; 0
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	28 2b       	or	r18, r24
    2ccc:	39 2b       	or	r19, r25
    2cce:	4a 2b       	or	r20, r26
    2cd0:	5b 2b       	or	r21, r27
    2cd2:	d3 01       	movw	r26, r6
    2cd4:	1e 96       	adiw	r26, 0x0e	; 14
    2cd6:	2d 93       	st	X+, r18
    2cd8:	3d 93       	st	X+, r19
    2cda:	4d 93       	st	X+, r20
    2cdc:	5c 93       	st	X, r21
    2cde:	51 97       	sbiw	r26, 0x11	; 17
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2ce0:	d8 01       	movw	r26, r16
    2ce2:	5f 96       	adiw	r26, 0x1f	; 31
    2ce4:	2c 91       	ld	r18, X
    2ce6:	5f 97       	sbiw	r26, 0x1f	; 31
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	40 e0       	ldi	r20, 0x00	; 0
    2cec:	50 e0       	ldi	r21, 0x00	; 0
    2cee:	52 2f       	mov	r21, r18
    2cf0:	44 27       	eor	r20, r20
    2cf2:	33 27       	eor	r19, r19
    2cf4:	22 27       	eor	r18, r18
    2cf6:	5e 96       	adiw	r26, 0x1e	; 30
    2cf8:	8c 91       	ld	r24, X
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	a0 e0       	ldi	r26, 0x00	; 0
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	dc 01       	movw	r26, r24
    2d02:	99 27       	eor	r25, r25
    2d04:	88 27       	eor	r24, r24
    2d06:	28 2b       	or	r18, r24
    2d08:	39 2b       	or	r19, r25
    2d0a:	4a 2b       	or	r20, r26
    2d0c:	5b 2b       	or	r21, r27
    2d0e:	d8 01       	movw	r26, r16
    2d10:	5c 96       	adiw	r26, 0x1c	; 28
    2d12:	8c 91       	ld	r24, X
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	a0 e0       	ldi	r26, 0x00	; 0
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	28 2b       	or	r18, r24
    2d1c:	39 2b       	or	r19, r25
    2d1e:	4a 2b       	or	r20, r26
    2d20:	5b 2b       	or	r21, r27
    2d22:	d8 01       	movw	r26, r16
    2d24:	5d 96       	adiw	r26, 0x1d	; 29
    2d26:	9c 91       	ld	r25, X
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	a0 e0       	ldi	r26, 0x00	; 0
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	28 2b       	or	r18, r24
    2d30:	39 2b       	or	r19, r25
    2d32:	4a 2b       	or	r20, r26
    2d34:	5b 2b       	or	r21, r27
    2d36:	d3 01       	movw	r26, r6
    2d38:	1a 96       	adiw	r26, 0x0a	; 10
    2d3a:	2d 93       	st	X+, r18
    2d3c:	3d 93       	st	X+, r19
    2d3e:	4d 93       	st	X+, r20
    2d40:	5c 93       	st	X, r21
    2d42:	1d 97       	sbiw	r26, 0x0d	; 13
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    2d44:	16 96       	adiw	r26, 0x06	; 6
    2d46:	1d 92       	st	X+, r1
    2d48:	1d 92       	st	X+, r1
    2d4a:	1d 92       	st	X+, r1
    2d4c:	1c 92       	st	X, r1
    2d4e:	19 97       	sbiw	r26, 0x09	; 9
    2d50:	8f ef       	ldi	r24, 0xFF	; 255
    2d52:	15 96       	adiw	r26, 0x05	; 5
    2d54:	8c 93       	st	X, r24
    2d56:	15 97       	sbiw	r26, 0x05	; 5
	fp->dsect = 0;
    2d58:	56 96       	adiw	r26, 0x16	; 22
    2d5a:	1d 92       	st	X+, r1
    2d5c:	1d 92       	st	X+, r1
    2d5e:	1d 92       	st	X+, r1
    2d60:	1c 92       	st	X, r1
    2d62:	59 97       	sbiw	r26, 0x19	; 25
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    2d64:	ed 93       	st	X+, r30
    2d66:	fc 93       	st	X, r31
    2d68:	11 97       	sbiw	r26, 0x01	; 1
    2d6a:	86 81       	ldd	r24, Z+6	; 0x06
    2d6c:	97 81       	ldd	r25, Z+7	; 0x07
    2d6e:	12 96       	adiw	r26, 0x02	; 2
    2d70:	8d 93       	st	X+, r24
    2d72:	9c 93       	st	X, r25
    2d74:	13 97       	sbiw	r26, 0x03	; 3
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	03 c0       	rjmp	.+6      	; 0x2d80 <f_open+0x2b8>

	LEAVE_FF(dj.fs, FR_OK);
    2d7a:	27 e0       	ldi	r18, 0x07	; 7
    2d7c:	01 c0       	rjmp	.+2      	; 0x2d80 <f_open+0x2b8>
    2d7e:	24 e0       	ldi	r18, 0x04	; 4
}
    2d80:	82 2f       	mov	r24, r18
    2d82:	a4 96       	adiw	r28, 0x24	; 36
    2d84:	cd bf       	out	0x3d, r28	; 61
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	cf 91       	pop	r28
    2d8a:	df 91       	pop	r29
    2d8c:	1f 91       	pop	r17
    2d8e:	0f 91       	pop	r16
    2d90:	ff 90       	pop	r15
    2d92:	ef 90       	pop	r14
    2d94:	df 90       	pop	r13
    2d96:	cf 90       	pop	r12
    2d98:	bf 90       	pop	r11
    2d9a:	af 90       	pop	r10
    2d9c:	9f 90       	pop	r9
    2d9e:	8f 90       	pop	r8
    2da0:	7f 90       	pop	r7
    2da2:	6f 90       	pop	r6
    2da4:	5f 90       	pop	r5
    2da6:	08 95       	ret

00002da8 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    2da8:	2f 92       	push	r2
    2daa:	3f 92       	push	r3
    2dac:	4f 92       	push	r4
    2dae:	5f 92       	push	r5
    2db0:	6f 92       	push	r6
    2db2:	7f 92       	push	r7
    2db4:	8f 92       	push	r8
    2db6:	9f 92       	push	r9
    2db8:	af 92       	push	r10
    2dba:	bf 92       	push	r11
    2dbc:	cf 92       	push	r12
    2dbe:	df 92       	push	r13
    2dc0:	ef 92       	push	r14
    2dc2:	ff 92       	push	r15
    2dc4:	0f 93       	push	r16
    2dc6:	1f 93       	push	r17
    2dc8:	df 93       	push	r29
    2dca:	cf 93       	push	r28
    2dcc:	00 d0       	rcall	.+0      	; 0x2dce <f_read+0x26>
    2dce:	0f 92       	push	r0
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
    2dd4:	8b 83       	std	Y+3, r24	; 0x03
    2dd6:	9c 83       	std	Y+4, r25	; 0x04
    2dd8:	16 2f       	mov	r17, r22
    2dda:	07 2f       	mov	r16, r23
    2ddc:	4a 01       	movw	r8, r20
    2dde:	29 83       	std	Y+1, r18	; 0x01
    2de0:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
    2de2:	d9 01       	movw	r26, r18
    2de4:	1d 92       	st	X+, r1
    2de6:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    2de8:	fc 01       	movw	r30, r24
    2dea:	62 81       	ldd	r22, Z+2	; 0x02
    2dec:	73 81       	ldd	r23, Z+3	; 0x03
    2dee:	80 81       	ld	r24, Z
    2df0:	91 81       	ldd	r25, Z+1	; 0x01
    2df2:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <validate>
    2df6:	78 2e       	mov	r7, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2df8:	88 23       	and	r24, r24
    2dfa:	09 f0       	breq	.+2      	; 0x2dfe <f_read+0x56>
    2dfc:	b4 c1       	rjmp	.+872    	; 0x3166 <f_read+0x3be>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    2dfe:	ab 81       	ldd	r26, Y+3	; 0x03
    2e00:	bc 81       	ldd	r27, Y+4	; 0x04
    2e02:	14 96       	adiw	r26, 0x04	; 4
    2e04:	8c 91       	ld	r24, X
    2e06:	87 fd       	sbrc	r24, 7
    2e08:	66 c0       	rjmp	.+204    	; 0x2ed6 <f_read+0x12e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    2e0a:	80 fd       	sbrc	r24, 0
    2e0c:	03 c0       	rjmp	.+6      	; 0x2e14 <f_read+0x6c>
    2e0e:	a7 e0       	ldi	r26, 0x07	; 7
    2e10:	7a 2e       	mov	r7, r26
    2e12:	a9 c1       	rjmp	.+850    	; 0x3166 <f_read+0x3be>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    2e14:	eb 81       	ldd	r30, Y+3	; 0x03
    2e16:	fc 81       	ldd	r31, Y+4	; 0x04
    2e18:	22 85       	ldd	r18, Z+10	; 0x0a
    2e1a:	33 85       	ldd	r19, Z+11	; 0x0b
    2e1c:	44 85       	ldd	r20, Z+12	; 0x0c
    2e1e:	55 85       	ldd	r21, Z+13	; 0x0d
    2e20:	86 81       	ldd	r24, Z+6	; 0x06
    2e22:	97 81       	ldd	r25, Z+7	; 0x07
    2e24:	a0 85       	ldd	r26, Z+8	; 0x08
    2e26:	b1 85       	ldd	r27, Z+9	; 0x09
    2e28:	28 1b       	sub	r18, r24
    2e2a:	39 0b       	sbc	r19, r25
    2e2c:	4a 0b       	sbc	r20, r26
    2e2e:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    2e30:	c4 01       	movw	r24, r8
    2e32:	a0 e0       	ldi	r26, 0x00	; 0
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	28 17       	cp	r18, r24
    2e38:	39 07       	cpc	r19, r25
    2e3a:	4a 07       	cpc	r20, r26
    2e3c:	5b 07       	cpc	r21, r27
    2e3e:	08 f4       	brcc	.+2      	; 0x2e42 <f_read+0x9a>
    2e40:	49 01       	movw	r8, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    2e42:	81 2f       	mov	r24, r17
    2e44:	90 2f       	mov	r25, r16
    2e46:	9c 01       	movw	r18, r24
    2e48:	29 01       	movw	r4, r18

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    2e4a:	f0 e2       	ldi	r31, 0x20	; 32
    2e4c:	2f 2e       	mov	r2, r31
    2e4e:	31 2c       	mov	r3, r1
    2e50:	6b 81       	ldd	r22, Y+3	; 0x03
    2e52:	7c 81       	ldd	r23, Y+4	; 0x04
    2e54:	26 0e       	add	r2, r22
    2e56:	37 1e       	adc	r3, r23
    2e58:	82 c1       	rjmp	.+772    	; 0x315e <f_read+0x3b6>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    2e5a:	ab 81       	ldd	r26, Y+3	; 0x03
    2e5c:	bc 81       	ldd	r27, Y+4	; 0x04
    2e5e:	16 96       	adiw	r26, 0x06	; 6
    2e60:	2d 91       	ld	r18, X+
    2e62:	3d 91       	ld	r19, X+
    2e64:	4d 91       	ld	r20, X+
    2e66:	5c 91       	ld	r21, X
    2e68:	19 97       	sbiw	r26, 0x09	; 9
    2e6a:	da 01       	movw	r26, r20
    2e6c:	c9 01       	movw	r24, r18
    2e6e:	91 70       	andi	r25, 0x01	; 1
    2e70:	a0 70       	andi	r26, 0x00	; 0
    2e72:	b0 70       	andi	r27, 0x00	; 0
    2e74:	00 97       	sbiw	r24, 0x00	; 0
    2e76:	a1 05       	cpc	r26, r1
    2e78:	b1 05       	cpc	r27, r1
    2e7a:	09 f0       	breq	.+2      	; 0x2e7e <f_read+0xd6>
    2e7c:	2c c1       	rjmp	.+600    	; 0x30d6 <f_read+0x32e>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    2e7e:	ab 81       	ldd	r26, Y+3	; 0x03
    2e80:	bc 81       	ldd	r27, Y+4	; 0x04
    2e82:	ed 91       	ld	r30, X+
    2e84:	fc 91       	ld	r31, X
    2e86:	11 97       	sbiw	r26, 0x01	; 1
    2e88:	15 96       	adiw	r26, 0x05	; 5
    2e8a:	9c 91       	ld	r25, X
    2e8c:	15 97       	sbiw	r26, 0x05	; 5
    2e8e:	82 81       	ldd	r24, Z+2	; 0x02
    2e90:	98 17       	cp	r25, r24
    2e92:	a0 f1       	brcs	.+104    	; 0x2efc <f_read+0x154>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    2e94:	21 15       	cp	r18, r1
    2e96:	31 05       	cpc	r19, r1
    2e98:	41 05       	cpc	r20, r1
    2e9a:	51 05       	cpc	r21, r1
    2e9c:	39 f4       	brne	.+14     	; 0x2eac <f_read+0x104>
    2e9e:	1e 96       	adiw	r26, 0x0e	; 14
    2ea0:	6d 91       	ld	r22, X+
    2ea2:	7d 91       	ld	r23, X+
    2ea4:	8d 91       	ld	r24, X+
    2ea6:	9c 91       	ld	r25, X
    2ea8:	51 97       	sbiw	r26, 0x11	; 17
    2eaa:	0b c0       	rjmp	.+22     	; 0x2ec2 <f_read+0x11a>
    2eac:	ab 81       	ldd	r26, Y+3	; 0x03
    2eae:	bc 81       	ldd	r27, Y+4	; 0x04
    2eb0:	52 96       	adiw	r26, 0x12	; 18
    2eb2:	4d 91       	ld	r20, X+
    2eb4:	5d 91       	ld	r21, X+
    2eb6:	6d 91       	ld	r22, X+
    2eb8:	7c 91       	ld	r23, X
    2eba:	55 97       	sbiw	r26, 0x15	; 21
    2ebc:	cf 01       	movw	r24, r30
    2ebe:	0e 94 4f 09 	call	0x129e	; 0x129e <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    2ec2:	62 30       	cpi	r22, 0x02	; 2
    2ec4:	71 05       	cpc	r23, r1
    2ec6:	81 05       	cpc	r24, r1
    2ec8:	91 05       	cpc	r25, r1
    2eca:	40 f4       	brcc	.+16     	; 0x2edc <f_read+0x134>
    2ecc:	eb 81       	ldd	r30, Y+3	; 0x03
    2ece:	fc 81       	ldd	r31, Y+4	; 0x04
    2ed0:	84 81       	ldd	r24, Z+4	; 0x04
    2ed2:	80 68       	ori	r24, 0x80	; 128
    2ed4:	84 83       	std	Z+4, r24	; 0x04
    2ed6:	e2 e0       	ldi	r30, 0x02	; 2
    2ed8:	7e 2e       	mov	r7, r30
    2eda:	45 c1       	rjmp	.+650    	; 0x3166 <f_read+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2edc:	6f 3f       	cpi	r22, 0xFF	; 255
    2ede:	ff ef       	ldi	r31, 0xFF	; 255
    2ee0:	7f 07       	cpc	r23, r31
    2ee2:	ff ef       	ldi	r31, 0xFF	; 255
    2ee4:	8f 07       	cpc	r24, r31
    2ee6:	ff ef       	ldi	r31, 0xFF	; 255
    2ee8:	9f 07       	cpc	r25, r31
    2eea:	09 f4       	brne	.+2      	; 0x2eee <f_read+0x146>
    2eec:	e0 c0       	rjmp	.+448    	; 0x30ae <f_read+0x306>
				fp->curr_clust = clst;				/* Update current cluster */
    2eee:	eb 81       	ldd	r30, Y+3	; 0x03
    2ef0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ef2:	62 8b       	std	Z+18, r22	; 0x12
    2ef4:	73 8b       	std	Z+19, r23	; 0x13
    2ef6:	84 8b       	std	Z+20, r24	; 0x14
    2ef8:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    2efa:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    2efc:	ab 81       	ldd	r26, Y+3	; 0x03
    2efe:	bc 81       	ldd	r27, Y+4	; 0x04
    2f00:	0d 91       	ld	r16, X+
    2f02:	1c 91       	ld	r17, X
    2f04:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2f06:	52 96       	adiw	r26, 0x12	; 18
    2f08:	2d 91       	ld	r18, X+
    2f0a:	3d 91       	ld	r19, X+
    2f0c:	4d 91       	ld	r20, X+
    2f0e:	5c 91       	ld	r21, X
    2f10:	55 97       	sbiw	r26, 0x15	; 21
    2f12:	22 50       	subi	r18, 0x02	; 2
    2f14:	30 40       	sbci	r19, 0x00	; 0
    2f16:	40 40       	sbci	r20, 0x00	; 0
    2f18:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    2f1a:	f8 01       	movw	r30, r16
    2f1c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f1e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2f20:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2f22:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2f24:	02 97       	sbiw	r24, 0x02	; 2
    2f26:	a1 09       	sbc	r26, r1
    2f28:	b1 09       	sbc	r27, r1
    2f2a:	28 17       	cp	r18, r24
    2f2c:	39 07       	cpc	r19, r25
    2f2e:	4a 07       	cpc	r20, r26
    2f30:	5b 07       	cpc	r21, r27
    2f32:	b8 f4       	brcc	.+46     	; 0x2f62 <f_read+0x1ba>
	return clst * fs->csize + fs->database;
    2f34:	62 80       	ldd	r6, Z+2	; 0x02
    2f36:	66 2d       	mov	r22, r6
    2f38:	70 e0       	ldi	r23, 0x00	; 0
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    2f42:	9b 01       	movw	r18, r22
    2f44:	ac 01       	movw	r20, r24
    2f46:	f8 01       	movw	r30, r16
    2f48:	86 a1       	ldd	r24, Z+38	; 0x26
    2f4a:	97 a1       	ldd	r25, Z+39	; 0x27
    2f4c:	a0 a5       	ldd	r26, Z+40	; 0x28
    2f4e:	b1 a5       	ldd	r27, Z+41	; 0x29
    2f50:	28 0f       	add	r18, r24
    2f52:	39 1f       	adc	r19, r25
    2f54:	4a 1f       	adc	r20, r26
    2f56:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2f58:	21 15       	cp	r18, r1
    2f5a:	31 05       	cpc	r19, r1
    2f5c:	41 05       	cpc	r20, r1
    2f5e:	51 05       	cpc	r21, r1
    2f60:	49 f4       	brne	.+18     	; 0x2f74 <f_read+0x1cc>
    2f62:	ab 81       	ldd	r26, Y+3	; 0x03
    2f64:	bc 81       	ldd	r27, Y+4	; 0x04
    2f66:	14 96       	adiw	r26, 0x04	; 4
    2f68:	8c 91       	ld	r24, X
    2f6a:	14 97       	sbiw	r26, 0x04	; 4
    2f6c:	80 68       	ori	r24, 0x80	; 128
    2f6e:	14 96       	adiw	r26, 0x04	; 4
    2f70:	8c 93       	st	X, r24
    2f72:	b1 cf       	rjmp	.-158    	; 0x2ed6 <f_read+0x12e>
			sect += fp->csect;
    2f74:	eb 81       	ldd	r30, Y+3	; 0x03
    2f76:	fc 81       	ldd	r31, Y+4	; 0x04
    2f78:	85 81       	ldd	r24, Z+5	; 0x05
    2f7a:	59 01       	movw	r10, r18
    2f7c:	6a 01       	movw	r12, r20
    2f7e:	a8 0e       	add	r10, r24
    2f80:	b1 1c       	adc	r11, r1
    2f82:	c1 1c       	adc	r12, r1
    2f84:	d1 1c       	adc	r13, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    2f86:	74 01       	movw	r14, r8
    2f88:	ef 2c       	mov	r14, r15
    2f8a:	ff 24       	eor	r15, r15
    2f8c:	e6 94       	lsr	r14
			if (cc) {								/* Read maximum contiguous sectors directly */
    2f8e:	e1 14       	cp	r14, r1
    2f90:	f1 04       	cpc	r15, r1
    2f92:	09 f4       	brne	.+2      	; 0x2f96 <f_read+0x1ee>
    2f94:	53 c0       	rjmp	.+166    	; 0x303c <f_read+0x294>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2f96:	28 2f       	mov	r18, r24
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	c7 01       	movw	r24, r14
    2f9c:	82 0f       	add	r24, r18
    2f9e:	93 1f       	adc	r25, r19
    2fa0:	66 2d       	mov	r22, r6
    2fa2:	70 e0       	ldi	r23, 0x00	; 0
    2fa4:	68 17       	cp	r22, r24
    2fa6:	79 07       	cpc	r23, r25
    2fa8:	18 f4       	brcc	.+6      	; 0x2fb0 <f_read+0x208>
					cc = fp->fs->csize - fp->csect;
    2faa:	7b 01       	movw	r14, r22
    2fac:	e2 1a       	sub	r14, r18
    2fae:	f3 0a       	sbc	r15, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    2fb0:	d8 01       	movw	r26, r16
    2fb2:	11 96       	adiw	r26, 0x01	; 1
    2fb4:	8c 91       	ld	r24, X
    2fb6:	b2 01       	movw	r22, r4
    2fb8:	a6 01       	movw	r20, r12
    2fba:	95 01       	movw	r18, r10
    2fbc:	0e 2d       	mov	r16, r14
    2fbe:	0e 94 83 05 	call	0xb06	; 0xb06 <disk_read>
    2fc2:	eb 81       	ldd	r30, Y+3	; 0x03
    2fc4:	fc 81       	ldd	r31, Y+4	; 0x04
    2fc6:	94 81       	ldd	r25, Z+4	; 0x04
    2fc8:	88 23       	and	r24, r24
    2fca:	19 f0       	breq	.+6      	; 0x2fd2 <f_read+0x22a>
					ABORT(fp->fs, FR_DISK_ERR);
    2fcc:	90 68       	ori	r25, 0x80	; 128
    2fce:	94 83       	std	Z+4, r25	; 0x04
    2fd0:	76 c0       	rjmp	.+236    	; 0x30be <f_read+0x316>
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
    2fd2:	96 ff       	sbrs	r25, 6
    2fd4:	29 c0       	rjmp	.+82     	; 0x3028 <f_read+0x280>
    2fd6:	ab 81       	ldd	r26, Y+3	; 0x03
    2fd8:	bc 81       	ldd	r27, Y+4	; 0x04
    2fda:	56 96       	adiw	r26, 0x16	; 22
    2fdc:	2d 91       	ld	r18, X+
    2fde:	3d 91       	ld	r19, X+
    2fe0:	4d 91       	ld	r20, X+
    2fe2:	5c 91       	ld	r21, X
    2fe4:	59 97       	sbiw	r26, 0x19	; 25
    2fe6:	2a 19       	sub	r18, r10
    2fe8:	3b 09       	sbc	r19, r11
    2fea:	4c 09       	sbc	r20, r12
    2fec:	5d 09       	sbc	r21, r13
    2fee:	c7 01       	movw	r24, r14
    2ff0:	a0 e0       	ldi	r26, 0x00	; 0
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	28 17       	cp	r18, r24
    2ff6:	39 07       	cpc	r19, r25
    2ff8:	4a 07       	cpc	r20, r26
    2ffa:	5b 07       	cpc	r21, r27
    2ffc:	a8 f4       	brcc	.+42     	; 0x3028 <f_read+0x280>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    2ffe:	69 e0       	ldi	r22, 0x09	; 9
    3000:	22 0f       	add	r18, r18
    3002:	33 1f       	adc	r19, r19
    3004:	44 1f       	adc	r20, r20
    3006:	55 1f       	adc	r21, r21
    3008:	6a 95       	dec	r22
    300a:	d1 f7       	brne	.-12     	; 0x3000 <f_read+0x258>
    300c:	c2 01       	movw	r24, r4
    300e:	82 0f       	add	r24, r18
    3010:	93 1f       	adc	r25, r19
    3012:	d1 01       	movw	r26, r2
    3014:	fc 01       	movw	r30, r24
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    3016:	9c 01       	movw	r18, r24
    3018:	20 50       	subi	r18, 0x00	; 0
    301a:	3e 4f       	sbci	r19, 0xFE	; 254
    301c:	02 c0       	rjmp	.+4      	; 0x3022 <f_read+0x27a>
    301e:	8d 91       	ld	r24, X+
    3020:	81 93       	st	Z+, r24
    3022:	e2 17       	cp	r30, r18
    3024:	f3 07       	cpc	r31, r19
    3026:	d9 f7       	brne	.-10     	; 0x301e <f_read+0x276>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    3028:	eb 81       	ldd	r30, Y+3	; 0x03
    302a:	fc 81       	ldd	r31, Y+4	; 0x04
    302c:	85 81       	ldd	r24, Z+5	; 0x05
    302e:	8e 0d       	add	r24, r14
    3030:	85 83       	std	Z+5, r24	; 0x05
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    3032:	b7 01       	movw	r22, r14
    3034:	76 2f       	mov	r23, r22
    3036:	66 27       	eor	r22, r22
    3038:	77 0f       	add	r23, r23
    303a:	74 c0       	rjmp	.+232    	; 0x3124 <f_read+0x37c>
				continue;
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
    303c:	ab 81       	ldd	r26, Y+3	; 0x03
    303e:	bc 81       	ldd	r27, Y+4	; 0x04
    3040:	14 96       	adiw	r26, 0x04	; 4
    3042:	8c 91       	ld	r24, X
    3044:	14 97       	sbiw	r26, 0x04	; 4
    3046:	86 ff       	sbrs	r24, 6
    3048:	1b c0       	rjmp	.+54     	; 0x3080 <f_read+0x2d8>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    304a:	56 96       	adiw	r26, 0x16	; 22
    304c:	2d 91       	ld	r18, X+
    304e:	3d 91       	ld	r19, X+
    3050:	4d 91       	ld	r20, X+
    3052:	5c 91       	ld	r21, X
    3054:	59 97       	sbiw	r26, 0x19	; 25
    3056:	f8 01       	movw	r30, r16
    3058:	81 81       	ldd	r24, Z+1	; 0x01
    305a:	b1 01       	movw	r22, r2
    305c:	01 e0       	ldi	r16, 0x01	; 1
    305e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <disk_write>
    3062:	ab 81       	ldd	r26, Y+3	; 0x03
    3064:	bc 81       	ldd	r27, Y+4	; 0x04
    3066:	14 96       	adiw	r26, 0x04	; 4
    3068:	9c 91       	ld	r25, X
    306a:	14 97       	sbiw	r26, 0x04	; 4
    306c:	88 23       	and	r24, r24
    306e:	21 f0       	breq	.+8      	; 0x3078 <f_read+0x2d0>
					ABORT(fp->fs, FR_DISK_ERR);
    3070:	90 68       	ori	r25, 0x80	; 128
    3072:	14 96       	adiw	r26, 0x04	; 4
    3074:	9c 93       	st	X, r25
    3076:	23 c0       	rjmp	.+70     	; 0x30be <f_read+0x316>
				fp->flag &= ~FA__DIRTY;
    3078:	9f 7b       	andi	r25, 0xBF	; 191
    307a:	eb 81       	ldd	r30, Y+3	; 0x03
    307c:	fc 81       	ldd	r31, Y+4	; 0x04
    307e:	94 83       	std	Z+4, r25	; 0x04
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
    3080:	eb 81       	ldd	r30, Y+3	; 0x03
    3082:	fc 81       	ldd	r31, Y+4	; 0x04
    3084:	86 89       	ldd	r24, Z+22	; 0x16
    3086:	97 89       	ldd	r25, Z+23	; 0x17
    3088:	a0 8d       	ldd	r26, Z+24	; 0x18
    308a:	b1 8d       	ldd	r27, Z+25	; 0x19
    308c:	8a 15       	cp	r24, r10
    308e:	9b 05       	cpc	r25, r11
    3090:	ac 05       	cpc	r26, r12
    3092:	bd 05       	cpc	r27, r13
    3094:	b9 f0       	breq	.+46     	; 0x30c4 <f_read+0x31c>
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
    3096:	01 90       	ld	r0, Z+
    3098:	f0 81       	ld	r31, Z
    309a:	e0 2d       	mov	r30, r0
    309c:	81 81       	ldd	r24, Z+1	; 0x01
    309e:	b1 01       	movw	r22, r2
    30a0:	a6 01       	movw	r20, r12
    30a2:	95 01       	movw	r18, r10
    30a4:	01 e0       	ldi	r16, 0x01	; 1
    30a6:	0e 94 83 05 	call	0xb06	; 0xb06 <disk_read>
    30aa:	88 23       	and	r24, r24
    30ac:	59 f0       	breq	.+22     	; 0x30c4 <f_read+0x31c>
					ABORT(fp->fs, FR_DISK_ERR);
    30ae:	ab 81       	ldd	r26, Y+3	; 0x03
    30b0:	bc 81       	ldd	r27, Y+4	; 0x04
    30b2:	14 96       	adiw	r26, 0x04	; 4
    30b4:	8c 91       	ld	r24, X
    30b6:	14 97       	sbiw	r26, 0x04	; 4
    30b8:	80 68       	ori	r24, 0x80	; 128
    30ba:	14 96       	adiw	r26, 0x04	; 4
    30bc:	8c 93       	st	X, r24
    30be:	77 24       	eor	r7, r7
    30c0:	73 94       	inc	r7
    30c2:	51 c0       	rjmp	.+162    	; 0x3166 <f_read+0x3be>
			}
#endif
			fp->dsect = sect;
    30c4:	eb 81       	ldd	r30, Y+3	; 0x03
    30c6:	fc 81       	ldd	r31, Y+4	; 0x04
    30c8:	a6 8a       	std	Z+22, r10	; 0x16
    30ca:	b7 8a       	std	Z+23, r11	; 0x17
    30cc:	c0 8e       	std	Z+24, r12	; 0x18
    30ce:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    30d0:	85 81       	ldd	r24, Z+5	; 0x05
    30d2:	8f 5f       	subi	r24, 0xFF	; 255
    30d4:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    30d6:	ab 81       	ldd	r26, Y+3	; 0x03
    30d8:	bc 81       	ldd	r27, Y+4	; 0x04
    30da:	16 96       	adiw	r26, 0x06	; 6
    30dc:	2d 91       	ld	r18, X+
    30de:	3d 91       	ld	r19, X+
    30e0:	4d 91       	ld	r20, X+
    30e2:	5c 91       	ld	r21, X
    30e4:	19 97       	sbiw	r26, 0x09	; 9
    30e6:	c9 01       	movw	r24, r18
    30e8:	91 70       	andi	r25, 0x01	; 1
    30ea:	e0 e0       	ldi	r30, 0x00	; 0
    30ec:	f2 e0       	ldi	r31, 0x02	; 2
    30ee:	e8 1b       	sub	r30, r24
    30f0:	f9 0b       	sbc	r31, r25
    30f2:	b4 01       	movw	r22, r8
    30f4:	e8 15       	cp	r30, r8
    30f6:	f9 05       	cpc	r31, r9
    30f8:	08 f4       	brcc	.+2      	; 0x30fc <f_read+0x354>
    30fa:	bf 01       	movw	r22, r30
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    30fc:	8b 01       	movw	r16, r22

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    30fe:	f9 01       	movw	r30, r18
    3100:	f1 70       	andi	r31, 0x01	; 1
    3102:	b0 96       	adiw	r30, 0x20	; 32
    3104:	8b 81       	ldd	r24, Y+3	; 0x03
    3106:	9c 81       	ldd	r25, Y+4	; 0x04
    3108:	e8 0f       	add	r30, r24
    310a:	f9 1f       	adc	r31, r25
    310c:	92 01       	movw	r18, r4
    310e:	04 c0       	rjmp	.+8      	; 0x3118 <f_read+0x370>
	while (cnt--) *d++ = *s++;
    3110:	81 91       	ld	r24, Z+
    3112:	d9 01       	movw	r26, r18
    3114:	8d 93       	st	X+, r24
    3116:	9d 01       	movw	r18, r26
    3118:	01 50       	subi	r16, 0x01	; 1
    311a:	10 40       	sbci	r17, 0x00	; 0
    311c:	bf ef       	ldi	r27, 0xFF	; 255
    311e:	0f 3f       	cpi	r16, 0xFF	; 255
    3120:	1b 07       	cpc	r17, r27
    3122:	b1 f7       	brne	.-20     	; 0x3110 <f_read+0x368>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    3124:	46 0e       	add	r4, r22
    3126:	57 1e       	adc	r5, r23
    3128:	cb 01       	movw	r24, r22
    312a:	a0 e0       	ldi	r26, 0x00	; 0
    312c:	b0 e0       	ldi	r27, 0x00	; 0
    312e:	eb 81       	ldd	r30, Y+3	; 0x03
    3130:	fc 81       	ldd	r31, Y+4	; 0x04
    3132:	26 81       	ldd	r18, Z+6	; 0x06
    3134:	37 81       	ldd	r19, Z+7	; 0x07
    3136:	40 85       	ldd	r20, Z+8	; 0x08
    3138:	51 85       	ldd	r21, Z+9	; 0x09
    313a:	28 0f       	add	r18, r24
    313c:	39 1f       	adc	r19, r25
    313e:	4a 1f       	adc	r20, r26
    3140:	5b 1f       	adc	r21, r27
    3142:	26 83       	std	Z+6, r18	; 0x06
    3144:	37 83       	std	Z+7, r19	; 0x07
    3146:	40 87       	std	Z+8, r20	; 0x08
    3148:	51 87       	std	Z+9, r21	; 0x09
    314a:	e9 81       	ldd	r30, Y+1	; 0x01
    314c:	fa 81       	ldd	r31, Y+2	; 0x02
    314e:	80 81       	ld	r24, Z
    3150:	91 81       	ldd	r25, Z+1	; 0x01
    3152:	86 0f       	add	r24, r22
    3154:	97 1f       	adc	r25, r23
    3156:	80 83       	st	Z, r24
    3158:	91 83       	std	Z+1, r25	; 0x01
    315a:	86 1a       	sub	r8, r22
    315c:	97 0a       	sbc	r9, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    315e:	81 14       	cp	r8, r1
    3160:	91 04       	cpc	r9, r1
    3162:	09 f0       	breq	.+2      	; 0x3166 <f_read+0x3be>
    3164:	7a ce       	rjmp	.-780    	; 0x2e5a <f_read+0xb2>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    3166:	87 2d       	mov	r24, r7
    3168:	24 96       	adiw	r28, 0x04	; 4
    316a:	cd bf       	out	0x3d, r28	; 61
    316c:	de bf       	out	0x3e, r29	; 62
    316e:	cf 91       	pop	r28
    3170:	df 91       	pop	r29
    3172:	1f 91       	pop	r17
    3174:	0f 91       	pop	r16
    3176:	ff 90       	pop	r15
    3178:	ef 90       	pop	r14
    317a:	df 90       	pop	r13
    317c:	cf 90       	pop	r12
    317e:	bf 90       	pop	r11
    3180:	af 90       	pop	r10
    3182:	9f 90       	pop	r9
    3184:	8f 90       	pop	r8
    3186:	7f 90       	pop	r7
    3188:	6f 90       	pop	r6
    318a:	5f 90       	pop	r5
    318c:	4f 90       	pop	r4
    318e:	3f 90       	pop	r3
    3190:	2f 90       	pop	r2
    3192:	08 95       	ret

00003194 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    3194:	2f 92       	push	r2
    3196:	3f 92       	push	r3
    3198:	4f 92       	push	r4
    319a:	5f 92       	push	r5
    319c:	6f 92       	push	r6
    319e:	7f 92       	push	r7
    31a0:	8f 92       	push	r8
    31a2:	9f 92       	push	r9
    31a4:	af 92       	push	r10
    31a6:	bf 92       	push	r11
    31a8:	cf 92       	push	r12
    31aa:	df 92       	push	r13
    31ac:	ef 92       	push	r14
    31ae:	ff 92       	push	r15
    31b0:	0f 93       	push	r16
    31b2:	1f 93       	push	r17
    31b4:	df 93       	push	r29
    31b6:	cf 93       	push	r28
    31b8:	00 d0       	rcall	.+0      	; 0x31ba <f_write+0x26>
    31ba:	0f 92       	push	r0
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
    31c0:	8b 83       	std	Y+3, r24	; 0x03
    31c2:	9c 83       	std	Y+4, r25	; 0x04
    31c4:	16 2f       	mov	r17, r22
    31c6:	07 2f       	mov	r16, r23
    31c8:	4a 01       	movw	r8, r20
    31ca:	29 83       	std	Y+1, r18	; 0x01
    31cc:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    31ce:	d9 01       	movw	r26, r18
    31d0:	1d 92       	st	X+, r1
    31d2:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    31d4:	fc 01       	movw	r30, r24
    31d6:	62 81       	ldd	r22, Z+2	; 0x02
    31d8:	73 81       	ldd	r23, Z+3	; 0x03
    31da:	80 81       	ld	r24, Z
    31dc:	91 81       	ldd	r25, Z+1	; 0x01
    31de:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <validate>
    31e2:	68 2e       	mov	r6, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    31e4:	88 23       	and	r24, r24
    31e6:	09 f0       	breq	.+2      	; 0x31ea <f_write+0x56>
    31e8:	02 c2       	rjmp	.+1028   	; 0x35ee <f_write+0x45a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    31ea:	ab 81       	ldd	r26, Y+3	; 0x03
    31ec:	bc 81       	ldd	r27, Y+4	; 0x04
    31ee:	14 96       	adiw	r26, 0x04	; 4
    31f0:	8c 91       	ld	r24, X
    31f2:	87 fd       	sbrc	r24, 7
    31f4:	7c c0       	rjmp	.+248    	; 0x32ee <f_write+0x15a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    31f6:	81 fd       	sbrc	r24, 1
    31f8:	03 c0       	rjmp	.+6      	; 0x3200 <f_write+0x6c>
    31fa:	47 e0       	ldi	r20, 0x07	; 7
    31fc:	64 2e       	mov	r6, r20
    31fe:	f7 c1       	rjmp	.+1006   	; 0x35ee <f_write+0x45a>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    3200:	eb 81       	ldd	r30, Y+3	; 0x03
    3202:	fc 81       	ldd	r31, Y+4	; 0x04
    3204:	22 85       	ldd	r18, Z+10	; 0x0a
    3206:	33 85       	ldd	r19, Z+11	; 0x0b
    3208:	44 85       	ldd	r20, Z+12	; 0x0c
    320a:	55 85       	ldd	r21, Z+13	; 0x0d
    320c:	c4 01       	movw	r24, r8
    320e:	a0 e0       	ldi	r26, 0x00	; 0
    3210:	b0 e0       	ldi	r27, 0x00	; 0
    3212:	82 0f       	add	r24, r18
    3214:	93 1f       	adc	r25, r19
    3216:	a4 1f       	adc	r26, r20
    3218:	b5 1f       	adc	r27, r21
    321a:	82 17       	cp	r24, r18
    321c:	93 07       	cpc	r25, r19
    321e:	a4 07       	cpc	r26, r20
    3220:	b5 07       	cpc	r27, r21
    3222:	10 f4       	brcc	.+4      	; 0x3228 <f_write+0x94>
    3224:	88 24       	eor	r8, r8
    3226:	99 24       	eor	r9, r9
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    3228:	81 2f       	mov	r24, r17
    322a:	90 2f       	mov	r25, r16
    322c:	9c 01       	movw	r18, r24
    322e:	29 01       	movw	r4, r18
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3230:	30 e2       	ldi	r19, 0x20	; 32
    3232:	23 2e       	mov	r2, r19
    3234:	31 2c       	mov	r3, r1
    3236:	6b 81       	ldd	r22, Y+3	; 0x03
    3238:	7c 81       	ldd	r23, Y+4	; 0x04
    323a:	26 0e       	add	r2, r22
    323c:	37 1e       	adc	r3, r23
    323e:	b2 c1       	rjmp	.+868    	; 0x35a4 <f_write+0x410>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    3240:	ab 81       	ldd	r26, Y+3	; 0x03
    3242:	bc 81       	ldd	r27, Y+4	; 0x04
    3244:	16 96       	adiw	r26, 0x06	; 6
    3246:	2d 91       	ld	r18, X+
    3248:	3d 91       	ld	r19, X+
    324a:	4d 91       	ld	r20, X+
    324c:	5c 91       	ld	r21, X
    324e:	19 97       	sbiw	r26, 0x09	; 9
    3250:	da 01       	movw	r26, r20
    3252:	c9 01       	movw	r24, r18
    3254:	91 70       	andi	r25, 0x01	; 1
    3256:	a0 70       	andi	r26, 0x00	; 0
    3258:	b0 70       	andi	r27, 0x00	; 0
    325a:	00 97       	sbiw	r24, 0x00	; 0
    325c:	a1 05       	cpc	r26, r1
    325e:	b1 05       	cpc	r27, r1
    3260:	09 f0       	breq	.+2      	; 0x3264 <f_write+0xd0>
    3262:	58 c1       	rjmp	.+688    	; 0x3514 <f_write+0x380>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    3264:	ab 81       	ldd	r26, Y+3	; 0x03
    3266:	bc 81       	ldd	r27, Y+4	; 0x04
    3268:	ed 91       	ld	r30, X+
    326a:	fc 91       	ld	r31, X
    326c:	11 97       	sbiw	r26, 0x01	; 1
    326e:	15 96       	adiw	r26, 0x05	; 5
    3270:	9c 91       	ld	r25, X
    3272:	15 97       	sbiw	r26, 0x05	; 5
    3274:	82 81       	ldd	r24, Z+2	; 0x02
    3276:	98 17       	cp	r25, r24
    3278:	08 f4       	brcc	.+2      	; 0x327c <f_write+0xe8>
    327a:	54 c0       	rjmp	.+168    	; 0x3324 <f_write+0x190>
				if (fp->fptr == 0) {				/* On the top of the file? */
    327c:	21 15       	cp	r18, r1
    327e:	31 05       	cpc	r19, r1
    3280:	41 05       	cpc	r20, r1
    3282:	51 05       	cpc	r21, r1
    3284:	c9 f4       	brne	.+50     	; 0x32b8 <f_write+0x124>
					clst = fp->org_clust;			/* Follow from the origin */
    3286:	1e 96       	adiw	r26, 0x0e	; 14
    3288:	6d 91       	ld	r22, X+
    328a:	7d 91       	ld	r23, X+
    328c:	8d 91       	ld	r24, X+
    328e:	9c 91       	ld	r25, X
    3290:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    3292:	61 15       	cp	r22, r1
    3294:	71 05       	cpc	r23, r1
    3296:	81 05       	cpc	r24, r1
    3298:	91 05       	cpc	r25, r1
    329a:	f9 f4       	brne	.+62     	; 0x32da <f_write+0x146>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    329c:	cf 01       	movw	r24, r30
    329e:	40 e0       	ldi	r20, 0x00	; 0
    32a0:	50 e0       	ldi	r21, 0x00	; 0
    32a2:	60 e0       	ldi	r22, 0x00	; 0
    32a4:	70 e0       	ldi	r23, 0x00	; 0
    32a6:	0e 94 a0 0b 	call	0x1740	; 0x1740 <create_chain>
    32aa:	eb 81       	ldd	r30, Y+3	; 0x03
    32ac:	fc 81       	ldd	r31, Y+4	; 0x04
    32ae:	66 87       	std	Z+14, r22	; 0x0e
    32b0:	77 87       	std	Z+15, r23	; 0x0f
    32b2:	80 8b       	std	Z+16, r24	; 0x10
    32b4:	91 8b       	std	Z+17, r25	; 0x11
    32b6:	0b c0       	rjmp	.+22     	; 0x32ce <f_write+0x13a>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    32b8:	ab 81       	ldd	r26, Y+3	; 0x03
    32ba:	bc 81       	ldd	r27, Y+4	; 0x04
    32bc:	52 96       	adiw	r26, 0x12	; 18
    32be:	4d 91       	ld	r20, X+
    32c0:	5d 91       	ld	r21, X+
    32c2:	6d 91       	ld	r22, X+
    32c4:	7c 91       	ld	r23, X
    32c6:	55 97       	sbiw	r26, 0x15	; 21
    32c8:	cf 01       	movw	r24, r30
    32ca:	0e 94 a0 0b 	call	0x1740	; 0x1740 <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    32ce:	61 15       	cp	r22, r1
    32d0:	71 05       	cpc	r23, r1
    32d2:	81 05       	cpc	r24, r1
    32d4:	91 05       	cpc	r25, r1
    32d6:	09 f4       	brne	.+2      	; 0x32da <f_write+0x146>
    32d8:	69 c1       	rjmp	.+722    	; 0x35ac <f_write+0x418>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    32da:	61 30       	cpi	r22, 0x01	; 1
    32dc:	71 05       	cpc	r23, r1
    32de:	81 05       	cpc	r24, r1
    32e0:	91 05       	cpc	r25, r1
    32e2:	41 f4       	brne	.+16     	; 0x32f4 <f_write+0x160>
    32e4:	eb 81       	ldd	r30, Y+3	; 0x03
    32e6:	fc 81       	ldd	r31, Y+4	; 0x04
    32e8:	84 81       	ldd	r24, Z+4	; 0x04
    32ea:	80 68       	ori	r24, 0x80	; 128
    32ec:	84 83       	std	Z+4, r24	; 0x04
    32ee:	22 e0       	ldi	r18, 0x02	; 2
    32f0:	62 2e       	mov	r6, r18
    32f2:	7d c1       	rjmp	.+762    	; 0x35ee <f_write+0x45a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    32f4:	6f 3f       	cpi	r22, 0xFF	; 255
    32f6:	ff ef       	ldi	r31, 0xFF	; 255
    32f8:	7f 07       	cpc	r23, r31
    32fa:	ff ef       	ldi	r31, 0xFF	; 255
    32fc:	8f 07       	cpc	r24, r31
    32fe:	ff ef       	ldi	r31, 0xFF	; 255
    3300:	9f 07       	cpc	r25, r31
    3302:	49 f4       	brne	.+18     	; 0x3316 <f_write+0x182>
    3304:	ab 81       	ldd	r26, Y+3	; 0x03
    3306:	bc 81       	ldd	r27, Y+4	; 0x04
    3308:	14 96       	adiw	r26, 0x04	; 4
    330a:	8c 91       	ld	r24, X
    330c:	14 97       	sbiw	r26, 0x04	; 4
    330e:	80 68       	ori	r24, 0x80	; 128
    3310:	14 96       	adiw	r26, 0x04	; 4
    3312:	8c 93       	st	X, r24
    3314:	ee c0       	rjmp	.+476    	; 0x34f2 <f_write+0x35e>
				fp->curr_clust = clst;				/* Update current cluster */
    3316:	eb 81       	ldd	r30, Y+3	; 0x03
    3318:	fc 81       	ldd	r31, Y+4	; 0x04
    331a:	62 8b       	std	Z+18, r22	; 0x12
    331c:	73 8b       	std	Z+19, r23	; 0x13
    331e:	84 8b       	std	Z+20, r24	; 0x14
    3320:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    3322:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
    3324:	ab 81       	ldd	r26, Y+3	; 0x03
    3326:	bc 81       	ldd	r27, Y+4	; 0x04
    3328:	14 96       	adiw	r26, 0x04	; 4
    332a:	8c 91       	ld	r24, X
    332c:	14 97       	sbiw	r26, 0x04	; 4
    332e:	86 ff       	sbrs	r24, 6
    3330:	1b c0       	rjmp	.+54     	; 0x3368 <f_write+0x1d4>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3332:	ed 91       	ld	r30, X+
    3334:	fc 91       	ld	r31, X
    3336:	11 97       	sbiw	r26, 0x01	; 1
    3338:	56 96       	adiw	r26, 0x16	; 22
    333a:	2d 91       	ld	r18, X+
    333c:	3d 91       	ld	r19, X+
    333e:	4d 91       	ld	r20, X+
    3340:	5c 91       	ld	r21, X
    3342:	59 97       	sbiw	r26, 0x19	; 25
    3344:	81 81       	ldd	r24, Z+1	; 0x01
    3346:	b1 01       	movw	r22, r2
    3348:	01 e0       	ldi	r16, 0x01	; 1
    334a:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <disk_write>
    334e:	eb 81       	ldd	r30, Y+3	; 0x03
    3350:	fc 81       	ldd	r31, Y+4	; 0x04
    3352:	94 81       	ldd	r25, Z+4	; 0x04
    3354:	88 23       	and	r24, r24
    3356:	19 f0       	breq	.+6      	; 0x335e <f_write+0x1ca>
					ABORT(fp->fs, FR_DISK_ERR);
    3358:	90 68       	ori	r25, 0x80	; 128
    335a:	94 83       	std	Z+4, r25	; 0x04
    335c:	ca c0       	rjmp	.+404    	; 0x34f2 <f_write+0x35e>
				fp->flag &= ~FA__DIRTY;
    335e:	9f 7b       	andi	r25, 0xBF	; 191
    3360:	ab 81       	ldd	r26, Y+3	; 0x03
    3362:	bc 81       	ldd	r27, Y+4	; 0x04
    3364:	14 96       	adiw	r26, 0x04	; 4
    3366:	9c 93       	st	X, r25
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    3368:	eb 81       	ldd	r30, Y+3	; 0x03
    336a:	fc 81       	ldd	r31, Y+4	; 0x04
    336c:	00 81       	ld	r16, Z
    336e:	11 81       	ldd	r17, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3370:	22 89       	ldd	r18, Z+18	; 0x12
    3372:	33 89       	ldd	r19, Z+19	; 0x13
    3374:	44 89       	ldd	r20, Z+20	; 0x14
    3376:	55 89       	ldd	r21, Z+21	; 0x15
    3378:	22 50       	subi	r18, 0x02	; 2
    337a:	30 40       	sbci	r19, 0x00	; 0
    337c:	40 40       	sbci	r20, 0x00	; 0
    337e:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3380:	f8 01       	movw	r30, r16
    3382:	82 8d       	ldd	r24, Z+26	; 0x1a
    3384:	93 8d       	ldd	r25, Z+27	; 0x1b
    3386:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3388:	b5 8d       	ldd	r27, Z+29	; 0x1d
    338a:	02 97       	sbiw	r24, 0x02	; 2
    338c:	a1 09       	sbc	r26, r1
    338e:	b1 09       	sbc	r27, r1
    3390:	28 17       	cp	r18, r24
    3392:	39 07       	cpc	r19, r25
    3394:	4a 07       	cpc	r20, r26
    3396:	5b 07       	cpc	r21, r27
    3398:	b8 f4       	brcc	.+46     	; 0x33c8 <f_write+0x234>
	return clst * fs->csize + fs->database;
    339a:	72 80       	ldd	r7, Z+2	; 0x02
    339c:	67 2d       	mov	r22, r7
    339e:	70 e0       	ldi	r23, 0x00	; 0
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    33a8:	9b 01       	movw	r18, r22
    33aa:	ac 01       	movw	r20, r24
    33ac:	f8 01       	movw	r30, r16
    33ae:	86 a1       	ldd	r24, Z+38	; 0x26
    33b0:	97 a1       	ldd	r25, Z+39	; 0x27
    33b2:	a0 a5       	ldd	r26, Z+40	; 0x28
    33b4:	b1 a5       	ldd	r27, Z+41	; 0x29
    33b6:	28 0f       	add	r18, r24
    33b8:	39 1f       	adc	r19, r25
    33ba:	4a 1f       	adc	r20, r26
    33bc:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    33be:	21 15       	cp	r18, r1
    33c0:	31 05       	cpc	r19, r1
    33c2:	41 05       	cpc	r20, r1
    33c4:	51 05       	cpc	r21, r1
    33c6:	49 f4       	brne	.+18     	; 0x33da <f_write+0x246>
    33c8:	ab 81       	ldd	r26, Y+3	; 0x03
    33ca:	bc 81       	ldd	r27, Y+4	; 0x04
    33cc:	14 96       	adiw	r26, 0x04	; 4
    33ce:	8c 91       	ld	r24, X
    33d0:	14 97       	sbiw	r26, 0x04	; 4
    33d2:	80 68       	ori	r24, 0x80	; 128
    33d4:	14 96       	adiw	r26, 0x04	; 4
    33d6:	8c 93       	st	X, r24
    33d8:	8a cf       	rjmp	.-236    	; 0x32ee <f_write+0x15a>
			sect += fp->csect;
    33da:	eb 81       	ldd	r30, Y+3	; 0x03
    33dc:	fc 81       	ldd	r31, Y+4	; 0x04
    33de:	85 81       	ldd	r24, Z+5	; 0x05
    33e0:	69 01       	movw	r12, r18
    33e2:	7a 01       	movw	r14, r20
    33e4:	c8 0e       	add	r12, r24
    33e6:	d1 1c       	adc	r13, r1
    33e8:	e1 1c       	adc	r14, r1
    33ea:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    33ec:	54 01       	movw	r10, r8
    33ee:	ab 2c       	mov	r10, r11
    33f0:	bb 24       	eor	r11, r11
    33f2:	a6 94       	lsr	r10
			if (cc) {								/* Write maximum contiguous sectors directly */
    33f4:	a1 14       	cp	r10, r1
    33f6:	b1 04       	cpc	r11, r1
    33f8:	09 f4       	brne	.+2      	; 0x33fc <f_write+0x268>
    33fa:	53 c0       	rjmp	.+166    	; 0x34a2 <f_write+0x30e>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    33fc:	28 2f       	mov	r18, r24
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	c5 01       	movw	r24, r10
    3402:	82 0f       	add	r24, r18
    3404:	93 1f       	adc	r25, r19
    3406:	67 2d       	mov	r22, r7
    3408:	70 e0       	ldi	r23, 0x00	; 0
    340a:	68 17       	cp	r22, r24
    340c:	79 07       	cpc	r23, r25
    340e:	18 f4       	brcc	.+6      	; 0x3416 <f_write+0x282>
					cc = fp->fs->csize - fp->csect;
    3410:	5b 01       	movw	r10, r22
    3412:	a2 1a       	sub	r10, r18
    3414:	b3 0a       	sbc	r11, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    3416:	d8 01       	movw	r26, r16
    3418:	11 96       	adiw	r26, 0x01	; 1
    341a:	8c 91       	ld	r24, X
    341c:	b2 01       	movw	r22, r4
    341e:	a7 01       	movw	r20, r14
    3420:	96 01       	movw	r18, r12
    3422:	0a 2d       	mov	r16, r10
    3424:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <disk_write>
    3428:	88 23       	and	r24, r24
    342a:	09 f0       	breq	.+2      	; 0x342e <f_write+0x29a>
    342c:	5d c0       	rjmp	.+186    	; 0x34e8 <f_write+0x354>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
    342e:	ab 81       	ldd	r26, Y+3	; 0x03
    3430:	bc 81       	ldd	r27, Y+4	; 0x04
    3432:	56 96       	adiw	r26, 0x16	; 22
    3434:	2d 91       	ld	r18, X+
    3436:	3d 91       	ld	r19, X+
    3438:	4d 91       	ld	r20, X+
    343a:	5c 91       	ld	r21, X
    343c:	59 97       	sbiw	r26, 0x19	; 25
    343e:	2c 19       	sub	r18, r12
    3440:	3d 09       	sbc	r19, r13
    3442:	4e 09       	sbc	r20, r14
    3444:	5f 09       	sbc	r21, r15
    3446:	c5 01       	movw	r24, r10
    3448:	a0 e0       	ldi	r26, 0x00	; 0
    344a:	b0 e0       	ldi	r27, 0x00	; 0
    344c:	28 17       	cp	r18, r24
    344e:	39 07       	cpc	r19, r25
    3450:	4a 07       	cpc	r20, r26
    3452:	5b 07       	cpc	r21, r27
    3454:	c8 f4       	brcc	.+50     	; 0x3488 <f_write+0x2f4>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    3456:	19 e0       	ldi	r17, 0x09	; 9
    3458:	22 0f       	add	r18, r18
    345a:	33 1f       	adc	r19, r19
    345c:	44 1f       	adc	r20, r20
    345e:	55 1f       	adc	r21, r21
    3460:	1a 95       	dec	r17
    3462:	d1 f7       	brne	.-12     	; 0x3458 <f_write+0x2c4>
    3464:	f2 01       	movw	r30, r4
    3466:	e2 0f       	add	r30, r18
    3468:	f3 1f       	adc	r31, r19
    346a:	d1 01       	movw	r26, r2
	while (cnt--) *d++ = *s++;
    346c:	9f 01       	movw	r18, r30
    346e:	20 50       	subi	r18, 0x00	; 0
    3470:	3e 4f       	sbci	r19, 0xFE	; 254
    3472:	02 c0       	rjmp	.+4      	; 0x3478 <f_write+0x2e4>
    3474:	81 91       	ld	r24, Z+
    3476:	8d 93       	st	X+, r24
    3478:	e2 17       	cp	r30, r18
    347a:	f3 07       	cpc	r31, r19
    347c:	d9 f7       	brne	.-10     	; 0x3474 <f_write+0x2e0>
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
    347e:	eb 81       	ldd	r30, Y+3	; 0x03
    3480:	fc 81       	ldd	r31, Y+4	; 0x04
    3482:	84 81       	ldd	r24, Z+4	; 0x04
    3484:	8f 7b       	andi	r24, 0xBF	; 191
    3486:	84 83       	std	Z+4, r24	; 0x04
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    3488:	ab 81       	ldd	r26, Y+3	; 0x03
    348a:	bc 81       	ldd	r27, Y+4	; 0x04
    348c:	15 96       	adiw	r26, 0x05	; 5
    348e:	8c 91       	ld	r24, X
    3490:	15 97       	sbiw	r26, 0x05	; 5
    3492:	8a 0d       	add	r24, r10
    3494:	15 96       	adiw	r26, 0x05	; 5
    3496:	8c 93       	st	X, r24
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    3498:	b5 01       	movw	r22, r10
    349a:	76 2f       	mov	r23, r22
    349c:	66 27       	eor	r22, r22
    349e:	77 0f       	add	r23, r23
    34a0:	64 c0       	rjmp	.+200    	; 0x356a <f_write+0x3d6>
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
    34a2:	eb 81       	ldd	r30, Y+3	; 0x03
    34a4:	fc 81       	ldd	r31, Y+4	; 0x04
    34a6:	86 89       	ldd	r24, Z+22	; 0x16
    34a8:	97 89       	ldd	r25, Z+23	; 0x17
    34aa:	a0 8d       	ldd	r26, Z+24	; 0x18
    34ac:	b1 8d       	ldd	r27, Z+25	; 0x19
    34ae:	8c 15       	cp	r24, r12
    34b0:	9d 05       	cpc	r25, r13
    34b2:	ae 05       	cpc	r26, r14
    34b4:	bf 05       	cpc	r27, r15
    34b6:	01 f1       	breq	.+64     	; 0x34f8 <f_write+0x364>
				if (fp->fptr < fp->fsize &&
    34b8:	26 81       	ldd	r18, Z+6	; 0x06
    34ba:	37 81       	ldd	r19, Z+7	; 0x07
    34bc:	40 85       	ldd	r20, Z+8	; 0x08
    34be:	51 85       	ldd	r21, Z+9	; 0x09
    34c0:	82 85       	ldd	r24, Z+10	; 0x0a
    34c2:	93 85       	ldd	r25, Z+11	; 0x0b
    34c4:	a4 85       	ldd	r26, Z+12	; 0x0c
    34c6:	b5 85       	ldd	r27, Z+13	; 0x0d
    34c8:	28 17       	cp	r18, r24
    34ca:	39 07       	cpc	r19, r25
    34cc:	4a 07       	cpc	r20, r26
    34ce:	5b 07       	cpc	r21, r27
    34d0:	98 f4       	brcc	.+38     	; 0x34f8 <f_write+0x364>
    34d2:	d8 01       	movw	r26, r16
    34d4:	11 96       	adiw	r26, 0x01	; 1
    34d6:	8c 91       	ld	r24, X
    34d8:	b1 01       	movw	r22, r2
    34da:	a7 01       	movw	r20, r14
    34dc:	96 01       	movw	r18, r12
    34de:	01 e0       	ldi	r16, 0x01	; 1
    34e0:	0e 94 83 05 	call	0xb06	; 0xb06 <disk_read>
    34e4:	88 23       	and	r24, r24
    34e6:	41 f0       	breq	.+16     	; 0x34f8 <f_write+0x364>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    34e8:	eb 81       	ldd	r30, Y+3	; 0x03
    34ea:	fc 81       	ldd	r31, Y+4	; 0x04
    34ec:	84 81       	ldd	r24, Z+4	; 0x04
    34ee:	80 68       	ori	r24, 0x80	; 128
    34f0:	84 83       	std	Z+4, r24	; 0x04
    34f2:	66 24       	eor	r6, r6
    34f4:	63 94       	inc	r6
    34f6:	7b c0       	rjmp	.+246    	; 0x35ee <f_write+0x45a>
			}
#endif
			fp->dsect = sect;
    34f8:	ab 81       	ldd	r26, Y+3	; 0x03
    34fa:	bc 81       	ldd	r27, Y+4	; 0x04
    34fc:	56 96       	adiw	r26, 0x16	; 22
    34fe:	cd 92       	st	X+, r12
    3500:	dd 92       	st	X+, r13
    3502:	ed 92       	st	X+, r14
    3504:	fc 92       	st	X, r15
    3506:	59 97       	sbiw	r26, 0x19	; 25
			fp->csect++;							/* Next sector address in the cluster */
    3508:	15 96       	adiw	r26, 0x05	; 5
    350a:	8c 91       	ld	r24, X
    350c:	15 97       	sbiw	r26, 0x05	; 5
    350e:	8f 5f       	subi	r24, 0xFF	; 255
    3510:	15 96       	adiw	r26, 0x05	; 5
    3512:	8c 93       	st	X, r24
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    3514:	eb 81       	ldd	r30, Y+3	; 0x03
    3516:	fc 81       	ldd	r31, Y+4	; 0x04
    3518:	26 81       	ldd	r18, Z+6	; 0x06
    351a:	37 81       	ldd	r19, Z+7	; 0x07
    351c:	40 85       	ldd	r20, Z+8	; 0x08
    351e:	51 85       	ldd	r21, Z+9	; 0x09
    3520:	c9 01       	movw	r24, r18
    3522:	91 70       	andi	r25, 0x01	; 1
    3524:	60 e0       	ldi	r22, 0x00	; 0
    3526:	72 e0       	ldi	r23, 0x02	; 2
    3528:	68 1b       	sub	r22, r24
    352a:	79 0b       	sbc	r23, r25
    352c:	cb 01       	movw	r24, r22
    352e:	b4 01       	movw	r22, r8
    3530:	88 15       	cp	r24, r8
    3532:	99 05       	cpc	r25, r9
    3534:	08 f4       	brcc	.+2      	; 0x3538 <f_write+0x3a4>
    3536:	bc 01       	movw	r22, r24
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    3538:	8b 01       	movw	r16, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    353a:	f9 01       	movw	r30, r18
    353c:	f1 70       	andi	r31, 0x01	; 1
    353e:	b0 96       	adiw	r30, 0x20	; 32
    3540:	8b 81       	ldd	r24, Y+3	; 0x03
    3542:	9c 81       	ldd	r25, Y+4	; 0x04
    3544:	e8 0f       	add	r30, r24
    3546:	f9 1f       	adc	r31, r25
    3548:	92 01       	movw	r18, r4
    354a:	04 c0       	rjmp	.+8      	; 0x3554 <f_write+0x3c0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    354c:	d9 01       	movw	r26, r18
    354e:	8d 91       	ld	r24, X+
    3550:	9d 01       	movw	r18, r26
    3552:	81 93       	st	Z+, r24
    3554:	01 50       	subi	r16, 0x01	; 1
    3556:	10 40       	sbci	r17, 0x00	; 0
    3558:	bf ef       	ldi	r27, 0xFF	; 255
    355a:	0f 3f       	cpi	r16, 0xFF	; 255
    355c:	1b 07       	cpc	r17, r27
    355e:	b1 f7       	brne	.-20     	; 0x354c <f_write+0x3b8>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
    3560:	eb 81       	ldd	r30, Y+3	; 0x03
    3562:	fc 81       	ldd	r31, Y+4	; 0x04
    3564:	84 81       	ldd	r24, Z+4	; 0x04
    3566:	80 64       	ori	r24, 0x40	; 64
    3568:	84 83       	std	Z+4, r24	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    356a:	46 0e       	add	r4, r22
    356c:	57 1e       	adc	r5, r23
    356e:	cb 01       	movw	r24, r22
    3570:	a0 e0       	ldi	r26, 0x00	; 0
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	eb 81       	ldd	r30, Y+3	; 0x03
    3576:	fc 81       	ldd	r31, Y+4	; 0x04
    3578:	26 81       	ldd	r18, Z+6	; 0x06
    357a:	37 81       	ldd	r19, Z+7	; 0x07
    357c:	40 85       	ldd	r20, Z+8	; 0x08
    357e:	51 85       	ldd	r21, Z+9	; 0x09
    3580:	28 0f       	add	r18, r24
    3582:	39 1f       	adc	r19, r25
    3584:	4a 1f       	adc	r20, r26
    3586:	5b 1f       	adc	r21, r27
    3588:	26 83       	std	Z+6, r18	; 0x06
    358a:	37 83       	std	Z+7, r19	; 0x07
    358c:	40 87       	std	Z+8, r20	; 0x08
    358e:	51 87       	std	Z+9, r21	; 0x09
    3590:	e9 81       	ldd	r30, Y+1	; 0x01
    3592:	fa 81       	ldd	r31, Y+2	; 0x02
    3594:	80 81       	ld	r24, Z
    3596:	91 81       	ldd	r25, Z+1	; 0x01
    3598:	86 0f       	add	r24, r22
    359a:	97 1f       	adc	r25, r23
    359c:	80 83       	st	Z, r24
    359e:	91 83       	std	Z+1, r25	; 0x01
    35a0:	86 1a       	sub	r8, r22
    35a2:	97 0a       	sbc	r9, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    35a4:	81 14       	cp	r8, r1
    35a6:	91 04       	cpc	r9, r1
    35a8:	09 f0       	breq	.+2      	; 0x35ac <f_write+0x418>
    35aa:	4a ce       	rjmp	.-876    	; 0x3240 <f_write+0xac>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    35ac:	ab 81       	ldd	r26, Y+3	; 0x03
    35ae:	bc 81       	ldd	r27, Y+4	; 0x04
    35b0:	16 96       	adiw	r26, 0x06	; 6
    35b2:	2d 91       	ld	r18, X+
    35b4:	3d 91       	ld	r19, X+
    35b6:	4d 91       	ld	r20, X+
    35b8:	5c 91       	ld	r21, X
    35ba:	19 97       	sbiw	r26, 0x09	; 9
    35bc:	1a 96       	adiw	r26, 0x0a	; 10
    35be:	8d 91       	ld	r24, X+
    35c0:	9d 91       	ld	r25, X+
    35c2:	0d 90       	ld	r0, X+
    35c4:	bc 91       	ld	r27, X
    35c6:	a0 2d       	mov	r26, r0
    35c8:	82 17       	cp	r24, r18
    35ca:	93 07       	cpc	r25, r19
    35cc:	a4 07       	cpc	r26, r20
    35ce:	b5 07       	cpc	r27, r21
    35d0:	30 f4       	brcc	.+12     	; 0x35de <f_write+0x44a>
    35d2:	eb 81       	ldd	r30, Y+3	; 0x03
    35d4:	fc 81       	ldd	r31, Y+4	; 0x04
    35d6:	22 87       	std	Z+10, r18	; 0x0a
    35d8:	33 87       	std	Z+11, r19	; 0x0b
    35da:	44 87       	std	Z+12, r20	; 0x0c
    35dc:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    35de:	ab 81       	ldd	r26, Y+3	; 0x03
    35e0:	bc 81       	ldd	r27, Y+4	; 0x04
    35e2:	14 96       	adiw	r26, 0x04	; 4
    35e4:	8c 91       	ld	r24, X
    35e6:	14 97       	sbiw	r26, 0x04	; 4
    35e8:	80 62       	ori	r24, 0x20	; 32
    35ea:	14 96       	adiw	r26, 0x04	; 4
    35ec:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    35ee:	86 2d       	mov	r24, r6
    35f0:	24 96       	adiw	r28, 0x04	; 4
    35f2:	cd bf       	out	0x3d, r28	; 61
    35f4:	de bf       	out	0x3e, r29	; 62
    35f6:	cf 91       	pop	r28
    35f8:	df 91       	pop	r29
    35fa:	1f 91       	pop	r17
    35fc:	0f 91       	pop	r16
    35fe:	ff 90       	pop	r15
    3600:	ef 90       	pop	r14
    3602:	df 90       	pop	r13
    3604:	cf 90       	pop	r12
    3606:	bf 90       	pop	r11
    3608:	af 90       	pop	r10
    360a:	9f 90       	pop	r9
    360c:	8f 90       	pop	r8
    360e:	7f 90       	pop	r7
    3610:	6f 90       	pop	r6
    3612:	5f 90       	pop	r5
    3614:	4f 90       	pop	r4
    3616:	3f 90       	pop	r3
    3618:	2f 90       	pop	r2
    361a:	08 95       	ret

0000361c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    361c:	0f 93       	push	r16
    361e:	cf 93       	push	r28
    3620:	df 93       	push	r29
    3622:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3624:	6a 81       	ldd	r22, Y+2	; 0x02
    3626:	7b 81       	ldd	r23, Y+3	; 0x03
    3628:	88 81       	ld	r24, Y
    362a:	99 81       	ldd	r25, Y+1	; 0x01
    362c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <validate>
    3630:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    3632:	88 23       	and	r24, r24
    3634:	09 f0       	breq	.+2      	; 0x3638 <f_sync+0x1c>
    3636:	65 c0       	rjmp	.+202    	; 0x3702 <f_sync+0xe6>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    3638:	8c 81       	ldd	r24, Y+4	; 0x04
    363a:	85 ff       	sbrs	r24, 5
    363c:	62 c0       	rjmp	.+196    	; 0x3702 <f_sync+0xe6>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    363e:	86 ff       	sbrs	r24, 6
    3640:	14 c0       	rjmp	.+40     	; 0x366a <f_sync+0x4e>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3642:	e8 81       	ld	r30, Y
    3644:	f9 81       	ldd	r31, Y+1	; 0x01
    3646:	be 01       	movw	r22, r28
    3648:	60 5e       	subi	r22, 0xE0	; 224
    364a:	7f 4f       	sbci	r23, 0xFF	; 255
    364c:	2e 89       	ldd	r18, Y+22	; 0x16
    364e:	3f 89       	ldd	r19, Y+23	; 0x17
    3650:	48 8d       	ldd	r20, Y+24	; 0x18
    3652:	59 8d       	ldd	r21, Y+25	; 0x19
    3654:	81 81       	ldd	r24, Z+1	; 0x01
    3656:	01 e0       	ldi	r16, 0x01	; 1
    3658:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <disk_write>
    365c:	88 23       	and	r24, r24
    365e:	11 f0       	breq	.+4      	; 0x3664 <f_sync+0x48>
    3660:	91 e0       	ldi	r25, 0x01	; 1
    3662:	4f c0       	rjmp	.+158    	; 0x3702 <f_sync+0xe6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    3664:	8c 81       	ldd	r24, Y+4	; 0x04
    3666:	8f 7b       	andi	r24, 0xBF	; 191
    3668:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    366a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    366c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    366e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3670:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3672:	88 81       	ld	r24, Y
    3674:	99 81       	ldd	r25, Y+1	; 0x01
    3676:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    367a:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    367c:	88 23       	and	r24, r24
    367e:	09 f0       	breq	.+2      	; 0x3682 <f_sync+0x66>
    3680:	40 c0       	rjmp	.+128    	; 0x3702 <f_sync+0xe6>
				dir = fp->dir_ptr;
    3682:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3684:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    3686:	83 85       	ldd	r24, Z+11	; 0x0b
    3688:	80 62       	ori	r24, 0x20	; 32
    368a:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    368c:	8a 85       	ldd	r24, Y+10	; 0x0a
    368e:	84 8f       	std	Z+28, r24	; 0x1c
    3690:	8b 85       	ldd	r24, Y+11	; 0x0b
    3692:	85 8f       	std	Z+29, r24	; 0x1d
    3694:	8a 85       	ldd	r24, Y+10	; 0x0a
    3696:	9b 85       	ldd	r25, Y+11	; 0x0b
    3698:	ac 85       	ldd	r26, Y+12	; 0x0c
    369a:	bd 85       	ldd	r27, Y+13	; 0x0d
    369c:	cd 01       	movw	r24, r26
    369e:	aa 27       	eor	r26, r26
    36a0:	bb 27       	eor	r27, r27
    36a2:	86 8f       	std	Z+30, r24	; 0x1e
    36a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    36a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    36a8:	ac 85       	ldd	r26, Y+12	; 0x0c
    36aa:	bd 85       	ldd	r27, Y+13	; 0x0d
    36ac:	8b 2f       	mov	r24, r27
    36ae:	99 27       	eor	r25, r25
    36b0:	aa 27       	eor	r26, r26
    36b2:	bb 27       	eor	r27, r27
    36b4:	87 8f       	std	Z+31, r24	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    36b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    36b8:	82 8f       	std	Z+26, r24	; 0x1a
    36ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    36bc:	83 8f       	std	Z+27, r24	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    36be:	8e 85       	ldd	r24, Y+14	; 0x0e
    36c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    36c2:	a8 89       	ldd	r26, Y+16	; 0x10
    36c4:	b9 89       	ldd	r27, Y+17	; 0x11
    36c6:	cd 01       	movw	r24, r26
    36c8:	aa 27       	eor	r26, r26
    36ca:	bb 27       	eor	r27, r27
    36cc:	84 8b       	std	Z+20, r24	; 0x14
    36ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    36d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    36d2:	a8 89       	ldd	r26, Y+16	; 0x10
    36d4:	b9 89       	ldd	r27, Y+17	; 0x11
    36d6:	cd 01       	movw	r24, r26
    36d8:	aa 27       	eor	r26, r26
    36da:	bb 27       	eor	r27, r27
    36dc:	89 2f       	mov	r24, r25
    36de:	99 27       	eor	r25, r25
    36e0:	85 8b       	std	Z+21, r24	; 0x15
				tim = get_fattime();			/* Updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
    36e2:	16 8a       	std	Z+22, r1	; 0x16
    36e4:	17 8a       	std	Z+23, r1	; 0x17
    36e6:	10 8e       	std	Z+24, r1	; 0x18
    36e8:	11 8e       	std	Z+25, r1	; 0x19
				fp->flag &= ~FA__WRITTEN;
    36ea:	8c 81       	ldd	r24, Y+4	; 0x04
    36ec:	8f 7d       	andi	r24, 0xDF	; 223
    36ee:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    36f0:	e8 81       	ld	r30, Y
    36f2:	f9 81       	ldd	r31, Y+1	; 0x01
    36f4:	81 e0       	ldi	r24, 0x01	; 1
    36f6:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    36f8:	88 81       	ld	r24, Y
    36fa:	99 81       	ldd	r25, Y+1	; 0x01
    36fc:	0e 94 c0 08 	call	0x1180	; 0x1180 <sync>
    3700:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    3702:	89 2f       	mov	r24, r25
    3704:	df 91       	pop	r29
    3706:	cf 91       	pop	r28
    3708:	0f 91       	pop	r16
    370a:	08 95       	ret

0000370c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    370c:	cf 93       	push	r28
    370e:	df 93       	push	r29
    3710:	ec 01       	movw	r28, r24
    FATFS *fs = fp->fs;
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fs, res);
#else
	res = f_sync(fp);
    3712:	0e 94 0e 1b 	call	0x361c	; 0x361c <f_sync>
	if (res == FR_OK) fp->fs = NULL;
    3716:	88 23       	and	r24, r24
    3718:	11 f4       	brne	.+4      	; 0x371e <f_close+0x12>
    371a:	18 82       	st	Y, r1
    371c:	19 82       	std	Y+1, r1	; 0x01
	return res;
#endif
}
    371e:	df 91       	pop	r29
    3720:	cf 91       	pop	r28
    3722:	08 95       	ret

00003724 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    3724:	2f 92       	push	r2
    3726:	3f 92       	push	r3
    3728:	4f 92       	push	r4
    372a:	5f 92       	push	r5
    372c:	6f 92       	push	r6
    372e:	7f 92       	push	r7
    3730:	8f 92       	push	r8
    3732:	9f 92       	push	r9
    3734:	af 92       	push	r10
    3736:	bf 92       	push	r11
    3738:	cf 92       	push	r12
    373a:	df 92       	push	r13
    373c:	0f 93       	push	r16
    373e:	1f 93       	push	r17
    3740:	df 93       	push	r29
    3742:	cf 93       	push	r28
    3744:	cd b7       	in	r28, 0x3d	; 61
    3746:	de b7       	in	r29, 0x3e	; 62
    3748:	28 97       	sbiw	r28, 0x08	; 8
    374a:	cd bf       	out	0x3d, r28	; 61
    374c:	de bf       	out	0x3e, r29	; 62
    374e:	8f 83       	std	Y+7, r24	; 0x07
    3750:	98 87       	std	Y+8, r25	; 0x08
    3752:	3a 01       	movw	r6, r20
    3754:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3756:	dc 01       	movw	r26, r24
    3758:	12 96       	adiw	r26, 0x02	; 2
    375a:	6d 91       	ld	r22, X+
    375c:	7c 91       	ld	r23, X
    375e:	13 97       	sbiw	r26, 0x03	; 3
    3760:	8d 91       	ld	r24, X+
    3762:	9c 91       	ld	r25, X
    3764:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <validate>
    3768:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    376a:	88 23       	and	r24, r24
    376c:	09 f0       	breq	.+2      	; 0x3770 <f_lseek+0x4c>
    376e:	f3 c1       	rjmp	.+998    	; 0x3b56 <f_lseek+0x432>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    3770:	ef 81       	ldd	r30, Y+7	; 0x07
    3772:	f8 85       	ldd	r31, Y+8	; 0x08
    3774:	84 81       	ldd	r24, Z+4	; 0x04
    3776:	87 fd       	sbrc	r24, 7
    3778:	98 c0       	rjmp	.+304    	; 0x38aa <f_lseek+0x186>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    377a:	af 81       	ldd	r26, Y+7	; 0x07
    377c:	b8 85       	ldd	r27, Y+8	; 0x08
    377e:	1a 96       	adiw	r26, 0x0a	; 10
    3780:	ad 90       	ld	r10, X+
    3782:	bd 90       	ld	r11, X+
    3784:	cd 90       	ld	r12, X+
    3786:	dc 90       	ld	r13, X
    3788:	1d 97       	sbiw	r26, 0x0d	; 13
    378a:	a6 14       	cp	r10, r6
    378c:	b7 04       	cpc	r11, r7
    378e:	c8 04       	cpc	r12, r8
    3790:	d9 04       	cpc	r13, r9
    3792:	10 f4       	brcc	.+4      	; 0x3798 <f_lseek+0x74>
    3794:	81 ff       	sbrs	r24, 1
    3796:	02 c0       	rjmp	.+4      	; 0x379c <f_lseek+0x78>
    3798:	64 01       	movw	r12, r8
    379a:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    379c:	ef 81       	ldd	r30, Y+7	; 0x07
    379e:	f8 85       	ldd	r31, Y+8	; 0x08
    37a0:	26 81       	ldd	r18, Z+6	; 0x06
    37a2:	37 81       	ldd	r19, Z+7	; 0x07
    37a4:	40 85       	ldd	r20, Z+8	; 0x08
    37a6:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    37a8:	16 82       	std	Z+6, r1	; 0x06
    37aa:	17 82       	std	Z+7, r1	; 0x07
    37ac:	10 86       	std	Z+8, r1	; 0x08
    37ae:	11 86       	std	Z+9, r1	; 0x09
    37b0:	8f ef       	ldi	r24, 0xFF	; 255
    37b2:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    37b4:	a1 14       	cp	r10, r1
    37b6:	b1 04       	cpc	r11, r1
    37b8:	c1 04       	cpc	r12, r1
    37ba:	d1 04       	cpc	r13, r1
    37bc:	09 f4       	brne	.+2      	; 0x37c0 <f_lseek+0x9c>
    37be:	5f c1       	rjmp	.+702    	; 0x3a7e <f_lseek+0x35a>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    37c0:	01 90       	ld	r0, Z+
    37c2:	f0 81       	ld	r31, Z
    37c4:	e0 2d       	mov	r30, r0
    37c6:	e9 83       	std	Y+1, r30	; 0x01
    37c8:	fa 83       	std	Y+2, r31	; 0x02
    37ca:	82 81       	ldd	r24, Z+2	; 0x02
    37cc:	68 2e       	mov	r6, r24
    37ce:	77 24       	eor	r7, r7
    37d0:	88 24       	eor	r8, r8
    37d2:	99 24       	eor	r9, r9
    37d4:	89 e0       	ldi	r24, 0x09	; 9
    37d6:	66 0c       	add	r6, r6
    37d8:	77 1c       	adc	r7, r7
    37da:	88 1c       	adc	r8, r8
    37dc:	99 1c       	adc	r9, r9
    37de:	8a 95       	dec	r24
    37e0:	d1 f7       	brne	.-12     	; 0x37d6 <f_lseek+0xb2>
		if (ifptr > 0 &&
    37e2:	21 15       	cp	r18, r1
    37e4:	31 05       	cpc	r19, r1
    37e6:	41 05       	cpc	r20, r1
    37e8:	51 05       	cpc	r21, r1
    37ea:	f1 f1       	breq	.+124    	; 0x3868 <f_lseek+0x144>
    37ec:	19 01       	movw	r2, r18
    37ee:	2a 01       	movw	r4, r20
    37f0:	08 94       	sec
    37f2:	21 08       	sbc	r2, r1
    37f4:	31 08       	sbc	r3, r1
    37f6:	41 08       	sbc	r4, r1
    37f8:	51 08       	sbc	r5, r1
    37fa:	c6 01       	movw	r24, r12
    37fc:	b5 01       	movw	r22, r10
    37fe:	61 50       	subi	r22, 0x01	; 1
    3800:	70 40       	sbci	r23, 0x00	; 0
    3802:	80 40       	sbci	r24, 0x00	; 0
    3804:	90 40       	sbci	r25, 0x00	; 0
    3806:	a4 01       	movw	r20, r8
    3808:	93 01       	movw	r18, r6
    380a:	0e 94 87 43 	call	0x870e	; 0x870e <__udivmodsi4>
    380e:	2b 83       	std	Y+3, r18	; 0x03
    3810:	3c 83       	std	Y+4, r19	; 0x04
    3812:	4d 83       	std	Y+5, r20	; 0x05
    3814:	5e 83       	std	Y+6, r21	; 0x06
    3816:	c2 01       	movw	r24, r4
    3818:	b1 01       	movw	r22, r2
    381a:	a4 01       	movw	r20, r8
    381c:	93 01       	movw	r18, r6
    381e:	0e 94 87 43 	call	0x870e	; 0x870e <__udivmodsi4>
    3822:	8b 81       	ldd	r24, Y+3	; 0x03
    3824:	9c 81       	ldd	r25, Y+4	; 0x04
    3826:	ad 81       	ldd	r26, Y+5	; 0x05
    3828:	be 81       	ldd	r27, Y+6	; 0x06
    382a:	82 17       	cp	r24, r18
    382c:	93 07       	cpc	r25, r19
    382e:	a4 07       	cpc	r26, r20
    3830:	b5 07       	cpc	r27, r21
    3832:	d0 f0       	brcs	.+52     	; 0x3868 <f_lseek+0x144>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    3834:	88 27       	eor	r24, r24
    3836:	99 27       	eor	r25, r25
    3838:	dc 01       	movw	r26, r24
    383a:	86 19       	sub	r24, r6
    383c:	97 09       	sbc	r25, r7
    383e:	a8 09       	sbc	r26, r8
    3840:	b9 09       	sbc	r27, r9
    3842:	82 21       	and	r24, r2
    3844:	93 21       	and	r25, r3
    3846:	a4 21       	and	r26, r4
    3848:	b5 21       	and	r27, r5
    384a:	ef 81       	ldd	r30, Y+7	; 0x07
    384c:	f8 85       	ldd	r31, Y+8	; 0x08
    384e:	86 83       	std	Z+6, r24	; 0x06
    3850:	97 83       	std	Z+7, r25	; 0x07
    3852:	a0 87       	std	Z+8, r26	; 0x08
    3854:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    3856:	a8 1a       	sub	r10, r24
    3858:	b9 0a       	sbc	r11, r25
    385a:	ca 0a       	sbc	r12, r26
    385c:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    385e:	42 89       	ldd	r20, Z+18	; 0x12
    3860:	53 89       	ldd	r21, Z+19	; 0x13
    3862:	64 89       	ldd	r22, Z+20	; 0x14
    3864:	75 89       	ldd	r23, Z+21	; 0x15
    3866:	39 c0       	rjmp	.+114    	; 0x38da <f_lseek+0x1b6>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    3868:	af 81       	ldd	r26, Y+7	; 0x07
    386a:	b8 85       	ldd	r27, Y+8	; 0x08
    386c:	1e 96       	adiw	r26, 0x0e	; 14
    386e:	4d 91       	ld	r20, X+
    3870:	5d 91       	ld	r21, X+
    3872:	6d 91       	ld	r22, X+
    3874:	7c 91       	ld	r23, X
    3876:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    3878:	41 15       	cp	r20, r1
    387a:	51 05       	cpc	r21, r1
    387c:	61 05       	cpc	r22, r1
    387e:	71 05       	cpc	r23, r1
    3880:	21 f5       	brne	.+72     	; 0x38ca <f_lseek+0x1a6>
				clst = create_chain(fp->fs, 0);
    3882:	89 81       	ldd	r24, Y+1	; 0x01
    3884:	9a 81       	ldd	r25, Y+2	; 0x02
    3886:	40 e0       	ldi	r20, 0x00	; 0
    3888:	50 e0       	ldi	r21, 0x00	; 0
    388a:	60 e0       	ldi	r22, 0x00	; 0
    388c:	70 e0       	ldi	r23, 0x00	; 0
    388e:	0e 94 a0 0b 	call	0x1740	; 0x1740 <create_chain>
    3892:	ab 01       	movw	r20, r22
    3894:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3896:	41 30       	cpi	r20, 0x01	; 1
    3898:	51 05       	cpc	r21, r1
    389a:	61 05       	cpc	r22, r1
    389c:	71 05       	cpc	r23, r1
    389e:	39 f4       	brne	.+14     	; 0x38ae <f_lseek+0x18a>
    38a0:	ef 81       	ldd	r30, Y+7	; 0x07
    38a2:	f8 85       	ldd	r31, Y+8	; 0x08
    38a4:	84 81       	ldd	r24, Z+4	; 0x04
    38a6:	80 68       	ori	r24, 0x80	; 128
    38a8:	84 83       	std	Z+4, r24	; 0x04
    38aa:	12 e0       	ldi	r17, 0x02	; 2
    38ac:	54 c1       	rjmp	.+680    	; 0x3b56 <f_lseek+0x432>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    38ae:	4f 3f       	cpi	r20, 0xFF	; 255
    38b0:	ff ef       	ldi	r31, 0xFF	; 255
    38b2:	5f 07       	cpc	r21, r31
    38b4:	ff ef       	ldi	r31, 0xFF	; 255
    38b6:	6f 07       	cpc	r22, r31
    38b8:	ff ef       	ldi	r31, 0xFF	; 255
    38ba:	7f 07       	cpc	r23, r31
    38bc:	b1 f1       	breq	.+108    	; 0x392a <f_lseek+0x206>
				fp->org_clust = clst;
    38be:	ef 81       	ldd	r30, Y+7	; 0x07
    38c0:	f8 85       	ldd	r31, Y+8	; 0x08
    38c2:	46 87       	std	Z+14, r20	; 0x0e
    38c4:	57 87       	std	Z+15, r21	; 0x0f
    38c6:	60 8b       	std	Z+16, r22	; 0x10
    38c8:	71 8b       	std	Z+17, r23	; 0x11
			}
#endif
			fp->curr_clust = clst;
    38ca:	af 81       	ldd	r26, Y+7	; 0x07
    38cc:	b8 85       	ldd	r27, Y+8	; 0x08
    38ce:	52 96       	adiw	r26, 0x12	; 18
    38d0:	4d 93       	st	X+, r20
    38d2:	5d 93       	st	X+, r21
    38d4:	6d 93       	st	X+, r22
    38d6:	7c 93       	st	X, r23
    38d8:	55 97       	sbiw	r26, 0x15	; 21
		}
		if (clst != 0) {
    38da:	41 15       	cp	r20, r1
    38dc:	51 05       	cpc	r21, r1
    38de:	61 05       	cpc	r22, r1
    38e0:	71 05       	cpc	r23, r1
    38e2:	09 f0       	breq	.+2      	; 0x38e6 <f_lseek+0x1c2>
    38e4:	58 c0       	rjmp	.+176    	; 0x3996 <f_lseek+0x272>
    38e6:	cb c0       	rjmp	.+406    	; 0x3a7e <f_lseek+0x35a>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    38e8:	ef 81       	ldd	r30, Y+7	; 0x07
    38ea:	f8 85       	ldd	r31, Y+8	; 0x08
    38ec:	84 81       	ldd	r24, Z+4	; 0x04
    38ee:	20 81       	ld	r18, Z
    38f0:	31 81       	ldd	r19, Z+1	; 0x01
    38f2:	81 ff       	sbrs	r24, 1
    38f4:	0d c0       	rjmp	.+26     	; 0x3910 <f_lseek+0x1ec>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    38f6:	c9 01       	movw	r24, r18
    38f8:	0e 94 a0 0b 	call	0x1740	; 0x1740 <create_chain>
    38fc:	ab 01       	movw	r20, r22
    38fe:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    3900:	41 15       	cp	r20, r1
    3902:	51 05       	cpc	r21, r1
    3904:	61 05       	cpc	r22, r1
    3906:	71 05       	cpc	r23, r1
    3908:	41 f4       	brne	.+16     	; 0x391a <f_lseek+0x1f6>
    390a:	64 01       	movw	r12, r8
    390c:	53 01       	movw	r10, r6
    390e:	49 c0       	rjmp	.+146    	; 0x39a2 <f_lseek+0x27e>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3910:	c9 01       	movw	r24, r18
    3912:	0e 94 4f 09 	call	0x129e	; 0x129e <get_fat>
    3916:	ab 01       	movw	r20, r22
    3918:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    391a:	4f 3f       	cpi	r20, 0xFF	; 255
    391c:	ff ef       	ldi	r31, 0xFF	; 255
    391e:	5f 07       	cpc	r21, r31
    3920:	ff ef       	ldi	r31, 0xFF	; 255
    3922:	6f 07       	cpc	r22, r31
    3924:	ff ef       	ldi	r31, 0xFF	; 255
    3926:	7f 07       	cpc	r23, r31
    3928:	49 f4       	brne	.+18     	; 0x393c <f_lseek+0x218>
    392a:	af 81       	ldd	r26, Y+7	; 0x07
    392c:	b8 85       	ldd	r27, Y+8	; 0x08
    392e:	14 96       	adiw	r26, 0x04	; 4
    3930:	8c 91       	ld	r24, X
    3932:	14 97       	sbiw	r26, 0x04	; 4
    3934:	80 68       	ori	r24, 0x80	; 128
    3936:	14 96       	adiw	r26, 0x04	; 4
    3938:	8c 93       	st	X, r24
    393a:	ed c0       	rjmp	.+474    	; 0x3b16 <f_lseek+0x3f2>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    393c:	42 30       	cpi	r20, 0x02	; 2
    393e:	51 05       	cpc	r21, r1
    3940:	61 05       	cpc	r22, r1
    3942:	71 05       	cpc	r23, r1
    3944:	08 f4       	brcc	.+2      	; 0x3948 <f_lseek+0x224>
    3946:	ac cf       	rjmp	.-168    	; 0x38a0 <f_lseek+0x17c>
    3948:	af 81       	ldd	r26, Y+7	; 0x07
    394a:	b8 85       	ldd	r27, Y+8	; 0x08
    394c:	ed 91       	ld	r30, X+
    394e:	fc 91       	ld	r31, X
    3950:	82 8d       	ldd	r24, Z+26	; 0x1a
    3952:	93 8d       	ldd	r25, Z+27	; 0x1b
    3954:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3956:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3958:	48 17       	cp	r20, r24
    395a:	59 07       	cpc	r21, r25
    395c:	6a 07       	cpc	r22, r26
    395e:	7b 07       	cpc	r23, r27
    3960:	08 f0       	brcs	.+2      	; 0x3964 <f_lseek+0x240>
    3962:	9e cf       	rjmp	.-196    	; 0x38a0 <f_lseek+0x17c>
				fp->curr_clust = clst;
    3964:	af 81       	ldd	r26, Y+7	; 0x07
    3966:	b8 85       	ldd	r27, Y+8	; 0x08
    3968:	52 96       	adiw	r26, 0x12	; 18
    396a:	4d 93       	st	X+, r20
    396c:	5d 93       	st	X+, r21
    396e:	6d 93       	st	X+, r22
    3970:	7c 93       	st	X, r23
    3972:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    3974:	fd 01       	movw	r30, r26
    3976:	86 81       	ldd	r24, Z+6	; 0x06
    3978:	97 81       	ldd	r25, Z+7	; 0x07
    397a:	a0 85       	ldd	r26, Z+8	; 0x08
    397c:	b1 85       	ldd	r27, Z+9	; 0x09
    397e:	86 0d       	add	r24, r6
    3980:	97 1d       	adc	r25, r7
    3982:	a8 1d       	adc	r26, r8
    3984:	b9 1d       	adc	r27, r9
    3986:	86 83       	std	Z+6, r24	; 0x06
    3988:	97 83       	std	Z+7, r25	; 0x07
    398a:	a0 87       	std	Z+8, r26	; 0x08
    398c:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    398e:	a6 18       	sub	r10, r6
    3990:	b7 08       	sbc	r11, r7
    3992:	c8 08       	sbc	r12, r8
    3994:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    3996:	6a 14       	cp	r6, r10
    3998:	7b 04       	cpc	r7, r11
    399a:	8c 04       	cpc	r8, r12
    399c:	9d 04       	cpc	r9, r13
    399e:	08 f4       	brcc	.+2      	; 0x39a2 <f_lseek+0x27e>
    39a0:	a3 cf       	rjmp	.-186    	; 0x38e8 <f_lseek+0x1c4>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    39a2:	ef 81       	ldd	r30, Y+7	; 0x07
    39a4:	f8 85       	ldd	r31, Y+8	; 0x08
    39a6:	86 81       	ldd	r24, Z+6	; 0x06
    39a8:	97 81       	ldd	r25, Z+7	; 0x07
    39aa:	a0 85       	ldd	r26, Z+8	; 0x08
    39ac:	b1 85       	ldd	r27, Z+9	; 0x09
    39ae:	8a 0d       	add	r24, r10
    39b0:	9b 1d       	adc	r25, r11
    39b2:	ac 1d       	adc	r26, r12
    39b4:	bd 1d       	adc	r27, r13
    39b6:	86 83       	std	Z+6, r24	; 0x06
    39b8:	97 83       	std	Z+7, r25	; 0x07
    39ba:	a0 87       	std	Z+8, r26	; 0x08
    39bc:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    39be:	d6 01       	movw	r26, r12
    39c0:	c5 01       	movw	r24, r10
    39c2:	09 e0       	ldi	r16, 0x09	; 9
    39c4:	b6 95       	lsr	r27
    39c6:	a7 95       	ror	r26
    39c8:	97 95       	ror	r25
    39ca:	87 95       	ror	r24
    39cc:	0a 95       	dec	r16
    39ce:	d1 f7       	brne	.-12     	; 0x39c4 <f_lseek+0x2a0>
    39d0:	08 2f       	mov	r16, r24
    39d2:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    39d4:	8f ef       	ldi	r24, 0xFF	; 255
    39d6:	91 e0       	ldi	r25, 0x01	; 1
    39d8:	a0 e0       	ldi	r26, 0x00	; 0
    39da:	b0 e0       	ldi	r27, 0x00	; 0
    39dc:	a8 22       	and	r10, r24
    39de:	b9 22       	and	r11, r25
    39e0:	ca 22       	and	r12, r26
    39e2:	db 22       	and	r13, r27
    39e4:	a1 14       	cp	r10, r1
    39e6:	b1 04       	cpc	r11, r1
    39e8:	c1 04       	cpc	r12, r1
    39ea:	d1 04       	cpc	r13, r1
    39ec:	09 f4       	brne	.+2      	; 0x39f0 <f_lseek+0x2cc>
    39ee:	47 c0       	rjmp	.+142    	; 0x3a7e <f_lseek+0x35a>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    39f0:	80 80       	ld	r8, Z
    39f2:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    39f4:	3e ef       	ldi	r19, 0xFE	; 254
    39f6:	a3 2e       	mov	r10, r19
    39f8:	3f ef       	ldi	r19, 0xFF	; 255
    39fa:	b3 2e       	mov	r11, r19
    39fc:	3f ef       	ldi	r19, 0xFF	; 255
    39fe:	c3 2e       	mov	r12, r19
    3a00:	3f ef       	ldi	r19, 0xFF	; 255
    3a02:	d3 2e       	mov	r13, r19
    3a04:	a4 0e       	add	r10, r20
    3a06:	b5 1e       	adc	r11, r21
    3a08:	c6 1e       	adc	r12, r22
    3a0a:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3a0c:	f4 01       	movw	r30, r8
    3a0e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a10:	93 8d       	ldd	r25, Z+27	; 0x1b
    3a12:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3a14:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3a16:	02 97       	sbiw	r24, 0x02	; 2
    3a18:	a1 09       	sbc	r26, r1
    3a1a:	b1 09       	sbc	r27, r1
    3a1c:	a8 16       	cp	r10, r24
    3a1e:	b9 06       	cpc	r11, r25
    3a20:	ca 06       	cpc	r12, r26
    3a22:	db 06       	cpc	r13, r27
    3a24:	c0 f4       	brcc	.+48     	; 0x3a56 <f_lseek+0x332>
	return clst * fs->csize + fs->database;
    3a26:	22 81       	ldd	r18, Z+2	; 0x02
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	40 e0       	ldi	r20, 0x00	; 0
    3a2c:	50 e0       	ldi	r21, 0x00	; 0
    3a2e:	c6 01       	movw	r24, r12
    3a30:	b5 01       	movw	r22, r10
    3a32:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    3a36:	9b 01       	movw	r18, r22
    3a38:	ac 01       	movw	r20, r24
    3a3a:	f4 01       	movw	r30, r8
    3a3c:	86 a1       	ldd	r24, Z+38	; 0x26
    3a3e:	97 a1       	ldd	r25, Z+39	; 0x27
    3a40:	a0 a5       	ldd	r26, Z+40	; 0x28
    3a42:	b1 a5       	ldd	r27, Z+41	; 0x29
    3a44:	28 0f       	add	r18, r24
    3a46:	39 1f       	adc	r19, r25
    3a48:	4a 1f       	adc	r20, r26
    3a4a:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    3a4c:	21 15       	cp	r18, r1
    3a4e:	31 05       	cpc	r19, r1
    3a50:	41 05       	cpc	r20, r1
    3a52:	51 05       	cpc	r21, r1
    3a54:	49 f4       	brne	.+18     	; 0x3a68 <f_lseek+0x344>
    3a56:	af 81       	ldd	r26, Y+7	; 0x07
    3a58:	b8 85       	ldd	r27, Y+8	; 0x08
    3a5a:	14 96       	adiw	r26, 0x04	; 4
    3a5c:	8c 91       	ld	r24, X
    3a5e:	14 97       	sbiw	r26, 0x04	; 4
    3a60:	80 68       	ori	r24, 0x80	; 128
    3a62:	14 96       	adiw	r26, 0x04	; 4
    3a64:	8c 93       	st	X, r24
    3a66:	21 cf       	rjmp	.-446    	; 0x38aa <f_lseek+0x186>
				nsect += fp->csect;
    3a68:	59 01       	movw	r10, r18
    3a6a:	6a 01       	movw	r12, r20
    3a6c:	a0 0e       	add	r10, r16
    3a6e:	b1 1c       	adc	r11, r1
    3a70:	c1 1c       	adc	r12, r1
    3a72:	d1 1c       	adc	r13, r1
				fp->csect++;
    3a74:	0f 5f       	subi	r16, 0xFF	; 255
    3a76:	ef 81       	ldd	r30, Y+7	; 0x07
    3a78:	f8 85       	ldd	r31, Y+8	; 0x08
    3a7a:	05 83       	std	Z+5, r16	; 0x05
    3a7c:	03 c0       	rjmp	.+6      	; 0x3a84 <f_lseek+0x360>
    3a7e:	aa 24       	eor	r10, r10
    3a80:	bb 24       	eor	r11, r11
    3a82:	65 01       	movw	r12, r10
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    3a84:	ef 81       	ldd	r30, Y+7	; 0x07
    3a86:	f8 85       	ldd	r31, Y+8	; 0x08
    3a88:	86 81       	ldd	r24, Z+6	; 0x06
    3a8a:	97 81       	ldd	r25, Z+7	; 0x07
    3a8c:	a0 85       	ldd	r26, Z+8	; 0x08
    3a8e:	b1 85       	ldd	r27, Z+9	; 0x09
    3a90:	91 70       	andi	r25, 0x01	; 1
    3a92:	a0 70       	andi	r26, 0x00	; 0
    3a94:	b0 70       	andi	r27, 0x00	; 0
    3a96:	00 97       	sbiw	r24, 0x00	; 0
    3a98:	a1 05       	cpc	r26, r1
    3a9a:	b1 05       	cpc	r27, r1
    3a9c:	09 f4       	brne	.+2      	; 0x3aa0 <f_lseek+0x37c>
    3a9e:	45 c0       	rjmp	.+138    	; 0x3b2a <f_lseek+0x406>
    3aa0:	26 89       	ldd	r18, Z+22	; 0x16
    3aa2:	37 89       	ldd	r19, Z+23	; 0x17
    3aa4:	40 8d       	ldd	r20, Z+24	; 0x18
    3aa6:	51 8d       	ldd	r21, Z+25	; 0x19
    3aa8:	a2 16       	cp	r10, r18
    3aaa:	b3 06       	cpc	r11, r19
    3aac:	c4 06       	cpc	r12, r20
    3aae:	d5 06       	cpc	r13, r21
    3ab0:	e1 f1       	breq	.+120    	; 0x3b2a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
    3ab2:	84 81       	ldd	r24, Z+4	; 0x04
    3ab4:	86 ff       	sbrs	r24, 6
    3ab6:	1a c0       	rjmp	.+52     	; 0x3aec <f_lseek+0x3c8>
			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3ab8:	01 90       	ld	r0, Z+
    3aba:	f0 81       	ld	r31, Z
    3abc:	e0 2d       	mov	r30, r0
    3abe:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac0:	78 85       	ldd	r23, Y+8	; 0x08
    3ac2:	60 5e       	subi	r22, 0xE0	; 224
    3ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ac6:	81 81       	ldd	r24, Z+1	; 0x01
    3ac8:	01 e0       	ldi	r16, 0x01	; 1
    3aca:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <disk_write>
    3ace:	af 81       	ldd	r26, Y+7	; 0x07
    3ad0:	b8 85       	ldd	r27, Y+8	; 0x08
    3ad2:	14 96       	adiw	r26, 0x04	; 4
    3ad4:	9c 91       	ld	r25, X
    3ad6:	14 97       	sbiw	r26, 0x04	; 4
    3ad8:	88 23       	and	r24, r24
    3ada:	21 f0       	breq	.+8      	; 0x3ae4 <f_lseek+0x3c0>
				ABORT(fp->fs, FR_DISK_ERR);
    3adc:	90 68       	ori	r25, 0x80	; 128
    3ade:	14 96       	adiw	r26, 0x04	; 4
    3ae0:	9c 93       	st	X, r25
    3ae2:	19 c0       	rjmp	.+50     	; 0x3b16 <f_lseek+0x3f2>
			fp->flag &= ~FA__DIRTY;
    3ae4:	9f 7b       	andi	r25, 0xBF	; 191
    3ae6:	ef 81       	ldd	r30, Y+7	; 0x07
    3ae8:	f8 85       	ldd	r31, Y+8	; 0x08
    3aea:	94 83       	std	Z+4, r25	; 0x04
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
    3aec:	af 81       	ldd	r26, Y+7	; 0x07
    3aee:	b8 85       	ldd	r27, Y+8	; 0x08
    3af0:	ed 91       	ld	r30, X+
    3af2:	fc 91       	ld	r31, X
    3af4:	11 97       	sbiw	r26, 0x01	; 1
    3af6:	bd 01       	movw	r22, r26
    3af8:	60 5e       	subi	r22, 0xE0	; 224
    3afa:	7f 4f       	sbci	r23, 0xFF	; 255
    3afc:	81 81       	ldd	r24, Z+1	; 0x01
    3afe:	a6 01       	movw	r20, r12
    3b00:	95 01       	movw	r18, r10
    3b02:	01 e0       	ldi	r16, 0x01	; 1
    3b04:	0e 94 83 05 	call	0xb06	; 0xb06 <disk_read>
    3b08:	88 23       	and	r24, r24
    3b0a:	39 f0       	breq	.+14     	; 0x3b1a <f_lseek+0x3f6>
			ABORT(fp->fs, FR_DISK_ERR);
    3b0c:	ef 81       	ldd	r30, Y+7	; 0x07
    3b0e:	f8 85       	ldd	r31, Y+8	; 0x08
    3b10:	84 81       	ldd	r24, Z+4	; 0x04
    3b12:	80 68       	ori	r24, 0x80	; 128
    3b14:	84 83       	std	Z+4, r24	; 0x04
    3b16:	11 e0       	ldi	r17, 0x01	; 1
    3b18:	1e c0       	rjmp	.+60     	; 0x3b56 <f_lseek+0x432>
#endif
		fp->dsect = nsect;
    3b1a:	af 81       	ldd	r26, Y+7	; 0x07
    3b1c:	b8 85       	ldd	r27, Y+8	; 0x08
    3b1e:	56 96       	adiw	r26, 0x16	; 22
    3b20:	ad 92       	st	X+, r10
    3b22:	bd 92       	st	X+, r11
    3b24:	cd 92       	st	X+, r12
    3b26:	dc 92       	st	X, r13
    3b28:	59 97       	sbiw	r26, 0x19	; 25
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    3b2a:	ef 81       	ldd	r30, Y+7	; 0x07
    3b2c:	f8 85       	ldd	r31, Y+8	; 0x08
    3b2e:	26 81       	ldd	r18, Z+6	; 0x06
    3b30:	37 81       	ldd	r19, Z+7	; 0x07
    3b32:	40 85       	ldd	r20, Z+8	; 0x08
    3b34:	51 85       	ldd	r21, Z+9	; 0x09
    3b36:	82 85       	ldd	r24, Z+10	; 0x0a
    3b38:	93 85       	ldd	r25, Z+11	; 0x0b
    3b3a:	a4 85       	ldd	r26, Z+12	; 0x0c
    3b3c:	b5 85       	ldd	r27, Z+13	; 0x0d
    3b3e:	82 17       	cp	r24, r18
    3b40:	93 07       	cpc	r25, r19
    3b42:	a4 07       	cpc	r26, r20
    3b44:	b5 07       	cpc	r27, r21
    3b46:	38 f4       	brcc	.+14     	; 0x3b56 <f_lseek+0x432>
		fp->fsize = fp->fptr;
    3b48:	22 87       	std	Z+10, r18	; 0x0a
    3b4a:	33 87       	std	Z+11, r19	; 0x0b
    3b4c:	44 87       	std	Z+12, r20	; 0x0c
    3b4e:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    3b50:	84 81       	ldd	r24, Z+4	; 0x04
    3b52:	80 62       	ori	r24, 0x20	; 32
    3b54:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    3b56:	81 2f       	mov	r24, r17
    3b58:	28 96       	adiw	r28, 0x08	; 8
    3b5a:	cd bf       	out	0x3d, r28	; 61
    3b5c:	de bf       	out	0x3e, r29	; 62
    3b5e:	cf 91       	pop	r28
    3b60:	df 91       	pop	r29
    3b62:	1f 91       	pop	r17
    3b64:	0f 91       	pop	r16
    3b66:	df 90       	pop	r13
    3b68:	cf 90       	pop	r12
    3b6a:	bf 90       	pop	r11
    3b6c:	af 90       	pop	r10
    3b6e:	9f 90       	pop	r9
    3b70:	8f 90       	pop	r8
    3b72:	7f 90       	pop	r7
    3b74:	6f 90       	pop	r6
    3b76:	5f 90       	pop	r5
    3b78:	4f 90       	pop	r4
    3b7a:	3f 90       	pop	r3
    3b7c:	2f 90       	pop	r2
    3b7e:	08 95       	ret

00003b80 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    3b80:	0f 93       	push	r16
    3b82:	1f 93       	push	r17
    3b84:	df 93       	push	r29
    3b86:	cf 93       	push	r28
    3b88:	cd b7       	in	r28, 0x3d	; 61
    3b8a:	de b7       	in	r29, 0x3e	; 62
    3b8c:	2e 97       	sbiw	r28, 0x0e	; 14
    3b8e:	cd bf       	out	0x3d, r28	; 61
    3b90:	de bf       	out	0x3e, r29	; 62
    3b92:	8c 01       	movw	r16, r24
    3b94:	6d 87       	std	Y+13, r22	; 0x0d
    3b96:	7e 87       	std	Y+14, r23	; 0x0e
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
    3b98:	ce 01       	movw	r24, r28
    3b9a:	0d 96       	adiw	r24, 0x0d	; 13
    3b9c:	b8 01       	movw	r22, r16
    3b9e:	40 e0       	ldi	r20, 0x00	; 0
    3ba0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <chk_mounted>
	if (res == FR_OK) {
    3ba4:	88 23       	and	r24, r24
    3ba6:	09 f0       	breq	.+2      	; 0x3baa <f_opendir+0x2a>
    3ba8:	46 c0       	rjmp	.+140    	; 0x3c36 <f_opendir+0xb6>
		INITBUF((*dj), sfn, lfn);
    3baa:	ce 01       	movw	r24, r28
    3bac:	01 96       	adiw	r24, 0x01	; 1
    3bae:	d8 01       	movw	r26, r16
    3bb0:	54 96       	adiw	r26, 0x14	; 20
    3bb2:	8d 93       	st	X+, r24
    3bb4:	9c 93       	st	X, r25
    3bb6:	55 97       	sbiw	r26, 0x15	; 21
		res = follow_path(dj, path);			/* Follow the path to the directory */
    3bb8:	6d 85       	ldd	r22, Y+13	; 0x0d
    3bba:	7e 85       	ldd	r23, Y+14	; 0x0e
    3bbc:	c8 01       	movw	r24, r16
    3bbe:	0e 94 81 10 	call	0x2102	; 0x2102 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    3bc2:	88 23       	and	r24, r24
    3bc4:	a9 f5       	brne	.+106    	; 0x3c30 <f_opendir+0xb0>
			dir = dj->dir;
    3bc6:	d8 01       	movw	r26, r16
    3bc8:	52 96       	adiw	r26, 0x12	; 18
    3bca:	ed 91       	ld	r30, X+
    3bcc:	fc 91       	ld	r31, X
    3bce:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    3bd0:	30 97       	sbiw	r30, 0x00	; 0
    3bd2:	f9 f0       	breq	.+62     	; 0x3c12 <f_opendir+0x92>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    3bd4:	83 85       	ldd	r24, Z+11	; 0x0b
    3bd6:	84 ff       	sbrs	r24, 4
    3bd8:	2d c0       	rjmp	.+90     	; 0x3c34 <f_opendir+0xb4>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    3bda:	35 89       	ldd	r19, Z+21	; 0x15
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	84 89       	ldd	r24, Z+20	; 0x14
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	28 2b       	or	r18, r24
    3be4:	39 2b       	or	r19, r25
    3be6:	40 e0       	ldi	r20, 0x00	; 0
    3be8:	50 e0       	ldi	r21, 0x00	; 0
    3bea:	a9 01       	movw	r20, r18
    3bec:	33 27       	eor	r19, r19
    3bee:	22 27       	eor	r18, r18
    3bf0:	93 8d       	ldd	r25, Z+27	; 0x1b
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	62 8d       	ldd	r22, Z+26	; 0x1a
    3bf6:	70 e0       	ldi	r23, 0x00	; 0
    3bf8:	86 2b       	or	r24, r22
    3bfa:	97 2b       	or	r25, r23
    3bfc:	a0 e0       	ldi	r26, 0x00	; 0
    3bfe:	b0 e0       	ldi	r27, 0x00	; 0
    3c00:	28 2b       	or	r18, r24
    3c02:	39 2b       	or	r19, r25
    3c04:	4a 2b       	or	r20, r26
    3c06:	5b 2b       	or	r21, r27
    3c08:	f8 01       	movw	r30, r16
    3c0a:	26 83       	std	Z+6, r18	; 0x06
    3c0c:	37 83       	std	Z+7, r19	; 0x07
    3c0e:	40 87       	std	Z+8, r20	; 0x08
    3c10:	51 87       	std	Z+9, r21	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    3c12:	d8 01       	movw	r26, r16
    3c14:	ed 91       	ld	r30, X+
    3c16:	fc 91       	ld	r31, X
    3c18:	11 97       	sbiw	r26, 0x01	; 1
    3c1a:	86 81       	ldd	r24, Z+6	; 0x06
    3c1c:	97 81       	ldd	r25, Z+7	; 0x07
    3c1e:	12 96       	adiw	r26, 0x02	; 2
    3c20:	8d 93       	st	X+, r24
    3c22:	9c 93       	st	X, r25
    3c24:	13 97       	sbiw	r26, 0x03	; 3
				res = dir_seek(dj, 0);			/* Rewind dir */
    3c26:	c8 01       	movw	r24, r16
    3c28:	60 e0       	ldi	r22, 0x00	; 0
    3c2a:	70 e0       	ldi	r23, 0x00	; 0
    3c2c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <dir_seek>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3c30:	84 30       	cpi	r24, 0x04	; 4
    3c32:	09 f4       	brne	.+2      	; 0x3c36 <f_opendir+0xb6>
    3c34:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj->fs, res);
}
    3c36:	2e 96       	adiw	r28, 0x0e	; 14
    3c38:	cd bf       	out	0x3d, r28	; 61
    3c3a:	de bf       	out	0x3e, r29	; 62
    3c3c:	cf 91       	pop	r28
    3c3e:	df 91       	pop	r29
    3c40:	1f 91       	pop	r17
    3c42:	0f 91       	pop	r16
    3c44:	08 95       	ret

00003c46 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3c46:	ef 92       	push	r14
    3c48:	ff 92       	push	r15
    3c4a:	0f 93       	push	r16
    3c4c:	1f 93       	push	r17
    3c4e:	df 93       	push	r29
    3c50:	cf 93       	push	r28
    3c52:	cd b7       	in	r28, 0x3d	; 61
    3c54:	de b7       	in	r29, 0x3e	; 62
    3c56:	2c 97       	sbiw	r28, 0x0c	; 12
    3c58:	cd bf       	out	0x3d, r28	; 61
    3c5a:	de bf       	out	0x3e, r29	; 62
    3c5c:	8c 01       	movw	r16, r24
    3c5e:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    3c60:	fc 01       	movw	r30, r24
    3c62:	62 81       	ldd	r22, Z+2	; 0x02
    3c64:	73 81       	ldd	r23, Z+3	; 0x03
    3c66:	80 81       	ld	r24, Z
    3c68:	91 81       	ldd	r25, Z+1	; 0x01
    3c6a:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <validate>
	if (res == FR_OK) {
    3c6e:	88 23       	and	r24, r24
    3c70:	59 f5       	brne	.+86     	; 0x3cc8 <f_readdir+0x82>
		INITBUF((*dj), sfn, lfn);
    3c72:	ce 01       	movw	r24, r28
    3c74:	01 96       	adiw	r24, 0x01	; 1
    3c76:	f8 01       	movw	r30, r16
    3c78:	84 8b       	std	Z+20, r24	; 0x14
    3c7a:	95 8b       	std	Z+21, r25	; 0x15
		if (!fno) {
    3c7c:	e1 14       	cp	r14, r1
    3c7e:	f1 04       	cpc	r15, r1
    3c80:	31 f4       	brne	.+12     	; 0x3c8e <f_readdir+0x48>
			res = dir_seek(dj, 0);
    3c82:	c8 01       	movw	r24, r16
    3c84:	60 e0       	ldi	r22, 0x00	; 0
    3c86:	70 e0       	ldi	r23, 0x00	; 0
    3c88:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <dir_seek>
    3c8c:	1d c0       	rjmp	.+58     	; 0x3cc8 <f_readdir+0x82>
		} else {
			res = dir_read(dj);
    3c8e:	c8 01       	movw	r24, r16
    3c90:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <dir_read>
			if (res == FR_NO_FILE) {
    3c94:	84 30       	cpi	r24, 0x04	; 4
    3c96:	31 f4       	brne	.+12     	; 0x3ca4 <f_readdir+0x5e>
				dj->sect = 0;
    3c98:	f8 01       	movw	r30, r16
    3c9a:	16 86       	std	Z+14, r1	; 0x0e
    3c9c:	17 86       	std	Z+15, r1	; 0x0f
    3c9e:	10 8a       	std	Z+16, r1	; 0x10
    3ca0:	11 8a       	std	Z+17, r1	; 0x11
    3ca2:	02 c0       	rjmp	.+4      	; 0x3ca8 <f_readdir+0x62>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    3ca4:	88 23       	and	r24, r24
    3ca6:	81 f4       	brne	.+32     	; 0x3cc8 <f_readdir+0x82>
				get_fileinfo(dj, fno);		/* Get the object information */
    3ca8:	c8 01       	movw	r24, r16
    3caa:	b7 01       	movw	r22, r14
    3cac:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
    3cb0:	c8 01       	movw	r24, r16
    3cb2:	60 e0       	ldi	r22, 0x00	; 0
    3cb4:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <dir_next>
				if (res == FR_NO_FILE) {
    3cb8:	84 30       	cpi	r24, 0x04	; 4
    3cba:	31 f4       	brne	.+12     	; 0x3cc8 <f_readdir+0x82>
					dj->sect = 0;
    3cbc:	f8 01       	movw	r30, r16
    3cbe:	16 86       	std	Z+14, r1	; 0x0e
    3cc0:	17 86       	std	Z+15, r1	; 0x0f
    3cc2:	10 8a       	std	Z+16, r1	; 0x10
    3cc4:	11 8a       	std	Z+17, r1	; 0x11
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    3cc8:	2c 96       	adiw	r28, 0x0c	; 12
    3cca:	cd bf       	out	0x3d, r28	; 61
    3ccc:	de bf       	out	0x3e, r29	; 62
    3cce:	cf 91       	pop	r28
    3cd0:	df 91       	pop	r29
    3cd2:	1f 91       	pop	r17
    3cd4:	0f 91       	pop	r16
    3cd6:	ff 90       	pop	r15
    3cd8:	ef 90       	pop	r14
    3cda:	08 95       	ret

00003cdc <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3cdc:	cf 92       	push	r12
    3cde:	df 92       	push	r13
    3ce0:	ef 92       	push	r14
    3ce2:	ff 92       	push	r15
    3ce4:	1f 93       	push	r17
    3ce6:	df 93       	push	r29
    3ce8:	cf 93       	push	r28
    3cea:	cd b7       	in	r28, 0x3d	; 61
    3cec:	de b7       	in	r29, 0x3e	; 62
    3cee:	a4 97       	sbiw	r28, 0x24	; 36
    3cf0:	cd bf       	out	0x3d, r28	; 61
    3cf2:	de bf       	out	0x3e, r29	; 62
    3cf4:	8b a3       	std	Y+35, r24	; 0x23
    3cf6:	9c a3       	std	Y+36, r25	; 0x24
    3cf8:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = chk_mounted(&path, &dj.fs, 0);
    3cfa:	2d e0       	ldi	r18, 0x0D	; 13
    3cfc:	e2 2e       	mov	r14, r18
    3cfe:	f1 2c       	mov	r15, r1
    3d00:	ec 0e       	add	r14, r28
    3d02:	fd 1e       	adc	r15, r29
    3d04:	ce 01       	movw	r24, r28
    3d06:	83 96       	adiw	r24, 0x23	; 35
    3d08:	b7 01       	movw	r22, r14
    3d0a:	40 e0       	ldi	r20, 0x00	; 0
    3d0c:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <chk_mounted>
    3d10:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3d12:	88 23       	and	r24, r24
    3d14:	b1 f4       	brne	.+44     	; 0x3d42 <f_stat+0x66>
		INITBUF(dj, sfn, lfn);
    3d16:	ce 01       	movw	r24, r28
    3d18:	01 96       	adiw	r24, 0x01	; 1
    3d1a:	89 a3       	std	Y+33, r24	; 0x21
    3d1c:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    3d1e:	6b a1       	ldd	r22, Y+35	; 0x23
    3d20:	7c a1       	ldd	r23, Y+36	; 0x24
    3d22:	c7 01       	movw	r24, r14
    3d24:	0e 94 81 10 	call	0x2102	; 0x2102 <follow_path>
    3d28:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follwo completed */
    3d2a:	88 23       	and	r24, r24
    3d2c:	51 f4       	brne	.+20     	; 0x3d42 <f_stat+0x66>
			if (dj.dir)	/* Found an object */
    3d2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d30:	98 a1       	ldd	r25, Y+32	; 0x20
    3d32:	89 2b       	or	r24, r25
    3d34:	11 f4       	brne	.+4      	; 0x3d3a <f_stat+0x5e>
    3d36:	16 e0       	ldi	r17, 0x06	; 6
    3d38:	04 c0       	rjmp	.+8      	; 0x3d42 <f_stat+0x66>
				get_fileinfo(&dj, fno);
    3d3a:	c7 01       	movw	r24, r14
    3d3c:	b6 01       	movw	r22, r12
    3d3e:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <get_fileinfo>
				res = FR_INVALID_NAME;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3d42:	81 2f       	mov	r24, r17
    3d44:	a4 96       	adiw	r28, 0x24	; 36
    3d46:	cd bf       	out	0x3d, r28	; 61
    3d48:	de bf       	out	0x3e, r29	; 62
    3d4a:	cf 91       	pop	r28
    3d4c:	df 91       	pop	r29
    3d4e:	1f 91       	pop	r17
    3d50:	ff 90       	pop	r15
    3d52:	ef 90       	pop	r14
    3d54:	df 90       	pop	r13
    3d56:	cf 90       	pop	r12
    3d58:	08 95       	ret

00003d5a <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    3d5a:	2f 92       	push	r2
    3d5c:	3f 92       	push	r3
    3d5e:	4f 92       	push	r4
    3d60:	5f 92       	push	r5
    3d62:	6f 92       	push	r6
    3d64:	7f 92       	push	r7
    3d66:	8f 92       	push	r8
    3d68:	9f 92       	push	r9
    3d6a:	af 92       	push	r10
    3d6c:	bf 92       	push	r11
    3d6e:	cf 92       	push	r12
    3d70:	df 92       	push	r13
    3d72:	ef 92       	push	r14
    3d74:	ff 92       	push	r15
    3d76:	0f 93       	push	r16
    3d78:	1f 93       	push	r17
    3d7a:	df 93       	push	r29
    3d7c:	cf 93       	push	r28
    3d7e:	cd b7       	in	r28, 0x3d	; 61
    3d80:	de b7       	in	r29, 0x3e	; 62
    3d82:	29 97       	sbiw	r28, 0x09	; 9
    3d84:	cd bf       	out	0x3d, r28	; 61
    3d86:	de bf       	out	0x3e, r29	; 62
    3d88:	89 83       	std	Y+1, r24	; 0x01
    3d8a:	9a 83       	std	Y+2, r25	; 0x02
    3d8c:	6c 83       	std	Y+4, r22	; 0x04
    3d8e:	7d 83       	std	Y+5, r23	; 0x05
    3d90:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    3d92:	ce 01       	movw	r24, r28
    3d94:	01 96       	adiw	r24, 0x01	; 1
    3d96:	ba 01       	movw	r22, r20
    3d98:	40 e0       	ldi	r20, 0x00	; 0
    3d9a:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
    3d9e:	88 23       	and	r24, r24
    3da0:	09 f0       	breq	.+2      	; 0x3da4 <f_getfree+0x4a>
    3da2:	eb c0       	rjmp	.+470    	; 0x3f7a <f_getfree+0x220>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
    3da4:	d2 01       	movw	r26, r4
    3da6:	ed 91       	ld	r30, X+
    3da8:	fc 91       	ld	r31, X
    3daa:	26 85       	ldd	r18, Z+14	; 0x0e
    3dac:	37 85       	ldd	r19, Z+15	; 0x0f
    3dae:	40 89       	ldd	r20, Z+16	; 0x10
    3db0:	51 89       	ldd	r21, Z+17	; 0x11
    3db2:	e2 8c       	ldd	r14, Z+26	; 0x1a
    3db4:	f3 8c       	ldd	r15, Z+27	; 0x1b
    3db6:	04 8d       	ldd	r16, Z+28	; 0x1c
    3db8:	15 8d       	ldd	r17, Z+29	; 0x1d
    3dba:	d8 01       	movw	r26, r16
    3dbc:	c7 01       	movw	r24, r14
    3dbe:	02 97       	sbiw	r24, 0x02	; 2
    3dc0:	a1 09       	sbc	r26, r1
    3dc2:	b1 09       	sbc	r27, r1
    3dc4:	82 17       	cp	r24, r18
    3dc6:	93 07       	cpc	r25, r19
    3dc8:	a4 07       	cpc	r26, r20
    3dca:	b5 07       	cpc	r27, r21
    3dcc:	38 f0       	brcs	.+14     	; 0x3ddc <f_getfree+0x82>
		*nclst = (*fatfs)->free_clust;
    3dce:	ec 81       	ldd	r30, Y+4	; 0x04
    3dd0:	fd 81       	ldd	r31, Y+5	; 0x05
    3dd2:	20 83       	st	Z, r18
    3dd4:	31 83       	std	Z+1, r19	; 0x01
    3dd6:	42 83       	std	Z+2, r20	; 0x02
    3dd8:	53 83       	std	Z+3, r21	; 0x03
    3dda:	ce c0       	rjmp	.+412    	; 0x3f78 <f_getfree+0x21e>
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
    3ddc:	30 80       	ld	r3, Z
    3dde:	3b 82       	std	Y+3, r3	; 0x03
	n = 0;
	if (fat == FS_FAT12) {
    3de0:	23 2d       	mov	r18, r3
    3de2:	21 30       	cpi	r18, 0x01	; 1
    3de4:	e1 f5       	brne	.+120    	; 0x3e5e <f_getfree+0x104>
    3de6:	aa 24       	eor	r10, r10
    3de8:	bb 24       	eor	r11, r11
    3dea:	65 01       	movw	r12, r10
    3dec:	92 e0       	ldi	r25, 0x02	; 2
    3dee:	e9 2e       	mov	r14, r25
    3df0:	f1 2c       	mov	r15, r1
    3df2:	01 2d       	mov	r16, r1
    3df4:	11 2d       	mov	r17, r1
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
    3df6:	d2 01       	movw	r26, r4
    3df8:	8d 91       	ld	r24, X+
    3dfa:	9c 91       	ld	r25, X
    3dfc:	b8 01       	movw	r22, r16
    3dfe:	a7 01       	movw	r20, r14
    3e00:	0e 94 4f 09 	call	0x129e	; 0x129e <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
    3e04:	6f 3f       	cpi	r22, 0xFF	; 255
    3e06:	bf ef       	ldi	r27, 0xFF	; 255
    3e08:	7b 07       	cpc	r23, r27
    3e0a:	bf ef       	ldi	r27, 0xFF	; 255
    3e0c:	8b 07       	cpc	r24, r27
    3e0e:	bf ef       	ldi	r27, 0xFF	; 255
    3e10:	9b 07       	cpc	r25, r27
    3e12:	11 f4       	brne	.+4      	; 0x3e18 <f_getfree+0xbe>
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	b1 c0       	rjmp	.+354    	; 0x3f7a <f_getfree+0x220>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
    3e18:	61 30       	cpi	r22, 0x01	; 1
    3e1a:	71 05       	cpc	r23, r1
    3e1c:	81 05       	cpc	r24, r1
    3e1e:	91 05       	cpc	r25, r1
    3e20:	11 f4       	brne	.+4      	; 0x3e26 <f_getfree+0xcc>
    3e22:	82 e0       	ldi	r24, 0x02	; 2
    3e24:	aa c0       	rjmp	.+340    	; 0x3f7a <f_getfree+0x220>
			if (stat == 0) n++;
    3e26:	61 15       	cp	r22, r1
    3e28:	71 05       	cpc	r23, r1
    3e2a:	81 05       	cpc	r24, r1
    3e2c:	91 05       	cpc	r25, r1
    3e2e:	29 f4       	brne	.+10     	; 0x3e3a <f_getfree+0xe0>
    3e30:	08 94       	sec
    3e32:	a1 1c       	adc	r10, r1
    3e34:	b1 1c       	adc	r11, r1
    3e36:	c1 1c       	adc	r12, r1
    3e38:	d1 1c       	adc	r13, r1
		} while (++clst < (*fatfs)->max_clust);
    3e3a:	08 94       	sec
    3e3c:	e1 1c       	adc	r14, r1
    3e3e:	f1 1c       	adc	r15, r1
    3e40:	01 1d       	adc	r16, r1
    3e42:	11 1d       	adc	r17, r1
    3e44:	d2 01       	movw	r26, r4
    3e46:	ed 91       	ld	r30, X+
    3e48:	fc 91       	ld	r31, X
    3e4a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3e4c:	93 8d       	ldd	r25, Z+27	; 0x1b
    3e4e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3e50:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3e52:	e8 16       	cp	r14, r24
    3e54:	f9 06       	cpc	r15, r25
    3e56:	0a 07       	cpc	r16, r26
    3e58:	1b 07       	cpc	r17, r27
    3e5a:	68 f2       	brcs	.-102    	; 0x3df6 <f_getfree+0x9c>
    3e5c:	7b c0       	rjmp	.+246    	; 0x3f54 <f_getfree+0x1fa>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
    3e5e:	66 8c       	ldd	r6, Z+30	; 0x1e
    3e60:	77 8c       	ldd	r7, Z+31	; 0x1f
    3e62:	80 a0       	ldd	r8, Z+32	; 0x20
    3e64:	91 a0       	ldd	r9, Z+33	; 0x21
    3e66:	aa 24       	eor	r10, r10
    3e68:	bb 24       	eor	r11, r11
    3e6a:	65 01       	movw	r12, r10
    3e6c:	60 e0       	ldi	r22, 0x00	; 0
    3e6e:	70 e0       	ldi	r23, 0x00	; 0
    3e70:	e0 e0       	ldi	r30, 0x00	; 0
    3e72:	f0 e0       	ldi	r31, 0x00	; 0
		i = 0; p = 0;
		do {
			if (!i) {
    3e74:	61 15       	cp	r22, r1
    3e76:	71 05       	cpc	r23, r1
    3e78:	a9 f4       	brne	.+42     	; 0x3ea4 <f_getfree+0x14a>
				res = move_window(*fatfs, sect++);
    3e7a:	f2 01       	movw	r30, r4
    3e7c:	80 81       	ld	r24, Z
    3e7e:	91 81       	ldd	r25, Z+1	; 0x01
    3e80:	b4 01       	movw	r22, r8
    3e82:	a3 01       	movw	r20, r6
    3e84:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
				if (res != FR_OK)
    3e88:	88 23       	and	r24, r24
    3e8a:	09 f0       	breq	.+2      	; 0x3e8e <f_getfree+0x134>
    3e8c:	76 c0       	rjmp	.+236    	; 0x3f7a <f_getfree+0x220>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
    3e8e:	08 94       	sec
    3e90:	61 1c       	adc	r6, r1
    3e92:	71 1c       	adc	r7, r1
    3e94:	81 1c       	adc	r8, r1
    3e96:	91 1c       	adc	r9, r1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
    3e98:	d2 01       	movw	r26, r4
    3e9a:	ed 91       	ld	r30, X+
    3e9c:	fc 91       	ld	r31, X
    3e9e:	be 96       	adiw	r30, 0x2e	; 46
    3ea0:	60 e0       	ldi	r22, 0x00	; 0
    3ea2:	72 e0       	ldi	r23, 0x02	; 2
    3ea4:	b1 81       	ldd	r27, Z+1	; 0x01
    3ea6:	b8 87       	std	Y+8, r27	; 0x08
    3ea8:	20 81       	ld	r18, Z
    3eaa:	29 87       	std	Y+9, r18	; 0x09
				i = SS(*fatfs);
			}
			if (fat == FS_FAT16) {
    3eac:	3b 81       	ldd	r19, Y+3	; 0x03
    3eae:	32 30       	cpi	r19, 0x02	; 2
    3eb0:	99 f4       	brne	.+38     	; 0x3ed8 <f_getfree+0x17e>
				if (LD_WORD(p) == 0) n++;
    3eb2:	bf 83       	std	Y+7, r27	; 0x07
    3eb4:	1e 82       	std	Y+6, r1	; 0x06
    3eb6:	82 2f       	mov	r24, r18
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	ae 81       	ldd	r26, Y+6	; 0x06
    3ebc:	bf 81       	ldd	r27, Y+7	; 0x07
    3ebe:	8a 2b       	or	r24, r26
    3ec0:	9b 2b       	or	r25, r27
    3ec2:	89 2b       	or	r24, r25
    3ec4:	29 f4       	brne	.+10     	; 0x3ed0 <f_getfree+0x176>
    3ec6:	08 94       	sec
    3ec8:	a1 1c       	adc	r10, r1
    3eca:	b1 1c       	adc	r11, r1
    3ecc:	c1 1c       	adc	r12, r1
    3ece:	d1 1c       	adc	r13, r1
				p += 2; i -= 2;
    3ed0:	32 96       	adiw	r30, 0x02	; 2
    3ed2:	62 50       	subi	r22, 0x02	; 2
    3ed4:	70 40       	sbci	r23, 0x00	; 0
    3ed6:	33 c0       	rjmp	.+102    	; 0x3f3e <f_getfree+0x1e4>
			} else {
				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    3ed8:	23 81       	ldd	r18, Z+3	; 0x03
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	40 e0       	ldi	r20, 0x00	; 0
    3ede:	50 e0       	ldi	r21, 0x00	; 0
    3ee0:	52 2f       	mov	r21, r18
    3ee2:	44 27       	eor	r20, r20
    3ee4:	33 27       	eor	r19, r19
    3ee6:	22 27       	eor	r18, r18
    3ee8:	82 81       	ldd	r24, Z+2	; 0x02
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	a0 e0       	ldi	r26, 0x00	; 0
    3eee:	b0 e0       	ldi	r27, 0x00	; 0
    3ef0:	dc 01       	movw	r26, r24
    3ef2:	99 27       	eor	r25, r25
    3ef4:	88 27       	eor	r24, r24
    3ef6:	28 2b       	or	r18, r24
    3ef8:	39 2b       	or	r19, r25
    3efa:	4a 2b       	or	r20, r26
    3efc:	5b 2b       	or	r21, r27
    3efe:	39 84       	ldd	r3, Y+9	; 0x09
    3f00:	83 2d       	mov	r24, r3
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	a0 e0       	ldi	r26, 0x00	; 0
    3f06:	b0 e0       	ldi	r27, 0x00	; 0
    3f08:	28 2b       	or	r18, r24
    3f0a:	39 2b       	or	r19, r25
    3f0c:	4a 2b       	or	r20, r26
    3f0e:	5b 2b       	or	r21, r27
    3f10:	38 84       	ldd	r3, Y+8	; 0x08
    3f12:	22 24       	eor	r2, r2
    3f14:	c1 01       	movw	r24, r2
    3f16:	a0 e0       	ldi	r26, 0x00	; 0
    3f18:	b0 e0       	ldi	r27, 0x00	; 0
    3f1a:	28 2b       	or	r18, r24
    3f1c:	39 2b       	or	r19, r25
    3f1e:	4a 2b       	or	r20, r26
    3f20:	5b 2b       	or	r21, r27
    3f22:	5f 70       	andi	r21, 0x0F	; 15
    3f24:	21 15       	cp	r18, r1
    3f26:	31 05       	cpc	r19, r1
    3f28:	41 05       	cpc	r20, r1
    3f2a:	51 05       	cpc	r21, r1
    3f2c:	29 f4       	brne	.+10     	; 0x3f38 <f_getfree+0x1de>
    3f2e:	08 94       	sec
    3f30:	a1 1c       	adc	r10, r1
    3f32:	b1 1c       	adc	r11, r1
    3f34:	c1 1c       	adc	r12, r1
    3f36:	d1 1c       	adc	r13, r1
				p += 4; i -= 4;
    3f38:	34 96       	adiw	r30, 0x04	; 4
    3f3a:	64 50       	subi	r22, 0x04	; 4
    3f3c:	70 40       	sbci	r23, 0x00	; 0
			}
		} while (--clst);
    3f3e:	08 94       	sec
    3f40:	e1 08       	sbc	r14, r1
    3f42:	f1 08       	sbc	r15, r1
    3f44:	01 09       	sbc	r16, r1
    3f46:	11 09       	sbc	r17, r1
    3f48:	e1 14       	cp	r14, r1
    3f4a:	f1 04       	cpc	r15, r1
    3f4c:	01 05       	cpc	r16, r1
    3f4e:	11 05       	cpc	r17, r1
    3f50:	09 f0       	breq	.+2      	; 0x3f54 <f_getfree+0x1fa>
    3f52:	90 cf       	rjmp	.-224    	; 0x3e74 <f_getfree+0x11a>
	}
	(*fatfs)->free_clust = n;
    3f54:	d2 01       	movw	r26, r4
    3f56:	ed 91       	ld	r30, X+
    3f58:	fc 91       	ld	r31, X
    3f5a:	a6 86       	std	Z+14, r10	; 0x0e
    3f5c:	b7 86       	std	Z+15, r11	; 0x0f
    3f5e:	c0 8a       	std	Z+16, r12	; 0x10
    3f60:	d1 8a       	std	Z+17, r13	; 0x11
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    3f62:	bb 81       	ldd	r27, Y+3	; 0x03
    3f64:	b3 30       	cpi	r27, 0x03	; 3
    3f66:	11 f4       	brne	.+4      	; 0x3f6c <f_getfree+0x212>
    3f68:	81 e0       	ldi	r24, 0x01	; 1
    3f6a:	85 83       	std	Z+5, r24	; 0x05
	*nclst = n;
    3f6c:	ec 81       	ldd	r30, Y+4	; 0x04
    3f6e:	fd 81       	ldd	r31, Y+5	; 0x05
    3f70:	a0 82       	st	Z, r10
    3f72:	b1 82       	std	Z+1, r11	; 0x01
    3f74:	c2 82       	std	Z+2, r12	; 0x02
    3f76:	d3 82       	std	Z+3, r13	; 0x03
    3f78:	80 e0       	ldi	r24, 0x00	; 0

	LEAVE_FF(*fatfs, FR_OK);
}
    3f7a:	29 96       	adiw	r28, 0x09	; 9
    3f7c:	cd bf       	out	0x3d, r28	; 61
    3f7e:	de bf       	out	0x3e, r29	; 62
    3f80:	cf 91       	pop	r28
    3f82:	df 91       	pop	r29
    3f84:	1f 91       	pop	r17
    3f86:	0f 91       	pop	r16
    3f88:	ff 90       	pop	r15
    3f8a:	ef 90       	pop	r14
    3f8c:	df 90       	pop	r13
    3f8e:	cf 90       	pop	r12
    3f90:	bf 90       	pop	r11
    3f92:	af 90       	pop	r10
    3f94:	9f 90       	pop	r9
    3f96:	8f 90       	pop	r8
    3f98:	7f 90       	pop	r7
    3f9a:	6f 90       	pop	r6
    3f9c:	5f 90       	pop	r5
    3f9e:	4f 90       	pop	r4
    3fa0:	3f 90       	pop	r3
    3fa2:	2f 90       	pop	r2
    3fa4:	08 95       	ret

00003fa6 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    3fa6:	cf 92       	push	r12
    3fa8:	df 92       	push	r13
    3faa:	ef 92       	push	r14
    3fac:	ff 92       	push	r15
    3fae:	0f 93       	push	r16
    3fb0:	1f 93       	push	r17
    3fb2:	cf 93       	push	r28
    3fb4:	df 93       	push	r29
    3fb6:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3fb8:	6a 81       	ldd	r22, Y+2	; 0x02
    3fba:	7b 81       	ldd	r23, Y+3	; 0x03
    3fbc:	88 81       	ld	r24, Y
    3fbe:	99 81       	ldd	r25, Y+1	; 0x01
    3fc0:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <validate>
    3fc4:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3fc6:	88 23       	and	r24, r24
    3fc8:	09 f0       	breq	.+2      	; 0x3fcc <f_truncate+0x26>
    3fca:	6e c0       	rjmp	.+220    	; 0x40a8 <f_truncate+0x102>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    3fcc:	6c 81       	ldd	r22, Y+4	; 0x04
    3fce:	67 ff       	sbrs	r22, 7
    3fd0:	02 c0       	rjmp	.+4      	; 0x3fd6 <f_truncate+0x30>
    3fd2:	12 e0       	ldi	r17, 0x02	; 2
    3fd4:	69 c0       	rjmp	.+210    	; 0x40a8 <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
    3fd6:	61 fd       	sbrc	r22, 1
    3fd8:	02 c0       	rjmp	.+4      	; 0x3fde <f_truncate+0x38>
    3fda:	17 e0       	ldi	r17, 0x07	; 7
    3fdc:	65 c0       	rjmp	.+202    	; 0x40a8 <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
    3fde:	2e 81       	ldd	r18, Y+6	; 0x06
    3fe0:	3f 81       	ldd	r19, Y+7	; 0x07
    3fe2:	48 85       	ldd	r20, Y+8	; 0x08
    3fe4:	59 85       	ldd	r21, Y+9	; 0x09
    3fe6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fe8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3fea:	ac 85       	ldd	r26, Y+12	; 0x0c
    3fec:	bd 85       	ldd	r27, Y+13	; 0x0d
    3fee:	28 17       	cp	r18, r24
    3ff0:	39 07       	cpc	r19, r25
    3ff2:	4a 07       	cpc	r20, r26
    3ff4:	5b 07       	cpc	r21, r27
    3ff6:	08 f0       	brcs	.+2      	; 0x3ffa <f_truncate+0x54>
    3ff8:	57 c0       	rjmp	.+174    	; 0x40a8 <f_truncate+0x102>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    3ffa:	2a 87       	std	Y+10, r18	; 0x0a
    3ffc:	3b 87       	std	Y+11, r19	; 0x0b
    3ffe:	4c 87       	std	Y+12, r20	; 0x0c
    4000:	5d 87       	std	Y+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    4002:	60 62       	ori	r22, 0x20	; 32
    4004:	6c 83       	std	Y+4, r22	; 0x04
    4006:	88 81       	ld	r24, Y
    4008:	99 81       	ldd	r25, Y+1	; 0x01
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    400a:	21 15       	cp	r18, r1
    400c:	31 05       	cpc	r19, r1
    400e:	41 05       	cpc	r20, r1
    4010:	51 05       	cpc	r21, r1
    4012:	61 f4       	brne	.+24     	; 0x402c <f_truncate+0x86>
			res = remove_chain(fp->fs, fp->org_clust);
    4014:	4e 85       	ldd	r20, Y+14	; 0x0e
    4016:	5f 85       	ldd	r21, Y+15	; 0x0f
    4018:	68 89       	ldd	r22, Y+16	; 0x10
    401a:	79 89       	ldd	r23, Y+17	; 0x11
    401c:	0e 94 25 0b 	call	0x164a	; 0x164a <remove_chain>
    4020:	18 2f       	mov	r17, r24
			fp->org_clust = 0;
    4022:	1e 86       	std	Y+14, r1	; 0x0e
    4024:	1f 86       	std	Y+15, r1	; 0x0f
    4026:	18 8a       	std	Y+16, r1	; 0x10
    4028:	19 8a       	std	Y+17, r1	; 0x11
    402a:	39 c0       	rjmp	.+114    	; 0x409e <f_truncate+0xf8>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
    402c:	4a 89       	ldd	r20, Y+18	; 0x12
    402e:	5b 89       	ldd	r21, Y+19	; 0x13
    4030:	6c 89       	ldd	r22, Y+20	; 0x14
    4032:	7d 89       	ldd	r23, Y+21	; 0x15
    4034:	0e 94 4f 09 	call	0x129e	; 0x129e <get_fat>
    4038:	6b 01       	movw	r12, r22
    403a:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    403c:	8f ef       	ldi	r24, 0xFF	; 255
    403e:	c8 16       	cp	r12, r24
    4040:	8f ef       	ldi	r24, 0xFF	; 255
    4042:	d8 06       	cpc	r13, r24
    4044:	8f ef       	ldi	r24, 0xFF	; 255
    4046:	e8 06       	cpc	r14, r24
    4048:	8f ef       	ldi	r24, 0xFF	; 255
    404a:	f8 06       	cpc	r15, r24
    404c:	b9 f1       	breq	.+110    	; 0x40bc <f_truncate+0x116>
			if (ncl == 1) res = FR_INT_ERR;
    404e:	81 e0       	ldi	r24, 0x01	; 1
    4050:	c8 16       	cp	r12, r24
    4052:	d1 04       	cpc	r13, r1
    4054:	e1 04       	cpc	r14, r1
    4056:	f1 04       	cpc	r15, r1
    4058:	11 f4       	brne	.+4      	; 0x405e <f_truncate+0xb8>
    405a:	12 e0       	ldi	r17, 0x02	; 2
    405c:	22 c0       	rjmp	.+68     	; 0x40a2 <f_truncate+0xfc>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
    405e:	e8 81       	ld	r30, Y
    4060:	f9 81       	ldd	r31, Y+1	; 0x01
    4062:	82 8d       	ldd	r24, Z+26	; 0x1a
    4064:	93 8d       	ldd	r25, Z+27	; 0x1b
    4066:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4068:	b5 8d       	ldd	r27, Z+29	; 0x1d
    406a:	c8 16       	cp	r12, r24
    406c:	d9 06       	cpc	r13, r25
    406e:	ea 06       	cpc	r14, r26
    4070:	fb 06       	cpc	r15, r27
    4072:	d0 f4       	brcc	.+52     	; 0x40a8 <f_truncate+0x102>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    4074:	4a 89       	ldd	r20, Y+18	; 0x12
    4076:	5b 89       	ldd	r21, Y+19	; 0x13
    4078:	6c 89       	ldd	r22, Y+20	; 0x14
    407a:	7d 89       	ldd	r23, Y+21	; 0x15
    407c:	cf 01       	movw	r24, r30
    407e:	0f ef       	ldi	r16, 0xFF	; 255
    4080:	1f ef       	ldi	r17, 0xFF	; 255
    4082:	2f ef       	ldi	r18, 0xFF	; 255
    4084:	3f e0       	ldi	r19, 0x0F	; 15
    4086:	0e 94 39 0a 	call	0x1472	; 0x1472 <put_fat>
    408a:	18 2f       	mov	r17, r24
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    408c:	88 23       	and	r24, r24
    408e:	49 f4       	brne	.+18     	; 0x40a2 <f_truncate+0xfc>
    4090:	88 81       	ld	r24, Y
    4092:	99 81       	ldd	r25, Y+1	; 0x01
    4094:	b7 01       	movw	r22, r14
    4096:	a6 01       	movw	r20, r12
    4098:	0e 94 25 0b 	call	0x164a	; 0x164a <remove_chain>
    409c:	18 2f       	mov	r17, r24
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    409e:	11 23       	and	r17, r17
    40a0:	19 f0       	breq	.+6      	; 0x40a8 <f_truncate+0x102>
    40a2:	8c 81       	ldd	r24, Y+4	; 0x04
    40a4:	80 68       	ori	r24, 0x80	; 128
    40a6:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, res);
}
    40a8:	81 2f       	mov	r24, r17
    40aa:	df 91       	pop	r29
    40ac:	cf 91       	pop	r28
    40ae:	1f 91       	pop	r17
    40b0:	0f 91       	pop	r16
    40b2:	ff 90       	pop	r15
    40b4:	ef 90       	pop	r14
    40b6:	df 90       	pop	r13
    40b8:	cf 90       	pop	r12
    40ba:	08 95       	ret
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    40bc:	11 e0       	ldi	r17, 0x01	; 1
    40be:	f1 cf       	rjmp	.-30     	; 0x40a2 <f_truncate+0xfc>

000040c0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
    40c0:	cf 92       	push	r12
    40c2:	df 92       	push	r13
    40c4:	ef 92       	push	r14
    40c6:	ff 92       	push	r15
    40c8:	0f 93       	push	r16
    40ca:	1f 93       	push	r17
    40cc:	df 93       	push	r29
    40ce:	cf 93       	push	r28
    40d0:	cd b7       	in	r28, 0x3d	; 61
    40d2:	de b7       	in	r29, 0x3e	; 62
    40d4:	ea 97       	sbiw	r28, 0x3a	; 58
    40d6:	cd bf       	out	0x3d, r28	; 61
    40d8:	de bf       	out	0x3e, r29	; 62
    40da:	89 af       	std	Y+57, r24	; 0x39
    40dc:	9a af       	std	Y+58, r25	; 0x3a
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = chk_mounted(&path, &dj.fs, 1);
    40de:	4d e0       	ldi	r20, 0x0D	; 13
    40e0:	c4 2e       	mov	r12, r20
    40e2:	d1 2c       	mov	r13, r1
    40e4:	cc 0e       	add	r12, r28
    40e6:	dd 1e       	adc	r13, r29
    40e8:	ce 01       	movw	r24, r28
    40ea:	c9 96       	adiw	r24, 0x39	; 57
    40ec:	b6 01       	movw	r22, r12
    40ee:	41 e0       	ldi	r20, 0x01	; 1
    40f0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    40f4:	88 23       	and	r24, r24
    40f6:	09 f0       	breq	.+2      	; 0x40fa <f_unlink+0x3a>
    40f8:	71 c0       	rjmp	.+226    	; 0x41dc <f_unlink+0x11c>

	INITBUF(dj, sfn, lfn);
    40fa:	ce 01       	movw	r24, r28
    40fc:	01 96       	adiw	r24, 0x01	; 1
    40fe:	89 a3       	std	Y+33, r24	; 0x21
    4100:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    4102:	69 ad       	ldd	r22, Y+57	; 0x39
    4104:	7a ad       	ldd	r23, Y+58	; 0x3a
    4106:	c6 01       	movw	r24, r12
    4108:	0e 94 81 10 	call	0x2102	; 0x2102 <follow_path>
	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
    410c:	88 23       	and	r24, r24
    410e:	09 f0       	breq	.+2      	; 0x4112 <f_unlink+0x52>
    4110:	65 c0       	rjmp	.+202    	; 0x41dc <f_unlink+0x11c>

	dir = dj.dir;
    4112:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4114:	f8 a1       	ldd	r31, Y+32	; 0x20
	if (!dir)								/* Is it the root directory? */
    4116:	30 97       	sbiw	r30, 0x00	; 0
    4118:	11 f4       	brne	.+4      	; 0x411e <f_unlink+0x5e>
    411a:	86 e0       	ldi	r24, 0x06	; 6
    411c:	5f c0       	rjmp	.+190    	; 0x41dc <f_unlink+0x11c>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
    411e:	83 85       	ldd	r24, Z+11	; 0x0b
    4120:	48 2f       	mov	r20, r24
    4122:	80 fd       	sbrc	r24, 0
    4124:	5a c0       	rjmp	.+180    	; 0x41da <f_unlink+0x11a>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    4126:	95 89       	ldd	r25, Z+21	; 0x15
    4128:	80 e0       	ldi	r24, 0x00	; 0
    412a:	24 89       	ldd	r18, Z+20	; 0x14
    412c:	30 e0       	ldi	r19, 0x00	; 0
    412e:	82 2b       	or	r24, r18
    4130:	93 2b       	or	r25, r19
    4132:	a0 e0       	ldi	r26, 0x00	; 0
    4134:	b0 e0       	ldi	r27, 0x00	; 0
    4136:	8c 01       	movw	r16, r24
    4138:	ff 24       	eor	r15, r15
    413a:	ee 24       	eor	r14, r14
    413c:	93 8d       	ldd	r25, Z+27	; 0x1b
    413e:	80 e0       	ldi	r24, 0x00	; 0
    4140:	22 8d       	ldd	r18, Z+26	; 0x1a
    4142:	30 e0       	ldi	r19, 0x00	; 0
    4144:	82 2b       	or	r24, r18
    4146:	93 2b       	or	r25, r19
    4148:	a0 e0       	ldi	r26, 0x00	; 0
    414a:	b0 e0       	ldi	r27, 0x00	; 0
    414c:	e8 2a       	or	r14, r24
    414e:	f9 2a       	or	r15, r25
    4150:	0a 2b       	or	r16, r26
    4152:	1b 2b       	or	r17, r27

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    4154:	44 ff       	sbrs	r20, 4
    4156:	29 c0       	rjmp	.+82     	; 0x41aa <f_unlink+0xea>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
    4158:	82 e0       	ldi	r24, 0x02	; 2
    415a:	e8 16       	cp	r14, r24
    415c:	f1 04       	cpc	r15, r1
    415e:	01 05       	cpc	r16, r1
    4160:	11 05       	cpc	r17, r1
    4162:	10 f4       	brcc	.+4      	; 0x4168 <f_unlink+0xa8>
    4164:	82 e0       	ldi	r24, 0x02	; 2
    4166:	3a c0       	rjmp	.+116    	; 0x41dc <f_unlink+0x11c>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    4168:	de 01       	movw	r26, r28
    416a:	93 96       	adiw	r26, 0x23	; 35
	const char *s = (const char *)src;
    416c:	f6 01       	movw	r30, r12
	while (cnt--) *d++ = *s++;
    416e:	9d 01       	movw	r18, r26
    4170:	02 c0       	rjmp	.+4      	; 0x4176 <f_unlink+0xb6>
    4172:	81 91       	ld	r24, Z+
    4174:	8d 93       	st	X+, r24
    4176:	e2 17       	cp	r30, r18
    4178:	f3 07       	cpc	r31, r19
    417a:	d9 f7       	brne	.-10     	; 0x4172 <f_unlink+0xb2>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
    417c:	e9 a6       	std	Y+41, r14	; 0x29
    417e:	fa a6       	std	Y+42, r15	; 0x2a
    4180:	0b a7       	std	Y+43, r16	; 0x2b
    4182:	1c a7       	std	Y+44, r17	; 0x2c
		res = dir_seek(&sdj, 2);
    4184:	23 e2       	ldi	r18, 0x23	; 35
    4186:	c2 2e       	mov	r12, r18
    4188:	d1 2c       	mov	r13, r1
    418a:	cc 0e       	add	r12, r28
    418c:	dd 1e       	adc	r13, r29
    418e:	c6 01       	movw	r24, r12
    4190:	62 e0       	ldi	r22, 0x02	; 2
    4192:	70 e0       	ldi	r23, 0x00	; 0
    4194:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <dir_seek>
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
    4198:	88 23       	and	r24, r24
    419a:	01 f5       	brne	.+64     	; 0x41dc <f_unlink+0x11c>
		res = dir_read(&sdj);
    419c:	c6 01       	movw	r24, r12
    419e:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <dir_read>
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
    41a2:	88 23       	and	r24, r24
    41a4:	d1 f0       	breq	.+52     	; 0x41da <f_unlink+0x11a>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
    41a6:	84 30       	cpi	r24, 0x04	; 4
    41a8:	c9 f4       	brne	.+50     	; 0x41dc <f_unlink+0x11c>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
    41aa:	ce 01       	movw	r24, r28
    41ac:	0d 96       	adiw	r24, 0x0d	; 13
    41ae:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <dir_remove>
	if (res == FR_OK) {
    41b2:	88 23       	and	r24, r24
    41b4:	99 f4       	brne	.+38     	; 0x41dc <f_unlink+0x11c>
		if (dclst)
    41b6:	e1 14       	cp	r14, r1
    41b8:	f1 04       	cpc	r15, r1
    41ba:	01 05       	cpc	r16, r1
    41bc:	11 05       	cpc	r17, r1
    41be:	41 f0       	breq	.+16     	; 0x41d0 <f_unlink+0x110>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
    41c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    41c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    41c4:	b8 01       	movw	r22, r16
    41c6:	a7 01       	movw	r20, r14
    41c8:	0e 94 25 0b 	call	0x164a	; 0x164a <remove_chain>
		if (res == FR_OK) res = sync(dj.fs);
    41cc:	88 23       	and	r24, r24
    41ce:	31 f4       	brne	.+12     	; 0x41dc <f_unlink+0x11c>
    41d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    41d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    41d4:	0e 94 c0 08 	call	0x1180	; 0x1180 <sync>
    41d8:	01 c0       	rjmp	.+2      	; 0x41dc <f_unlink+0x11c>
    41da:	87 e0       	ldi	r24, 0x07	; 7
	}

	LEAVE_FF(dj.fs, res);
}
    41dc:	ea 96       	adiw	r28, 0x3a	; 58
    41de:	cd bf       	out	0x3d, r28	; 61
    41e0:	de bf       	out	0x3e, r29	; 62
    41e2:	cf 91       	pop	r28
    41e4:	df 91       	pop	r29
    41e6:	1f 91       	pop	r17
    41e8:	0f 91       	pop	r16
    41ea:	ff 90       	pop	r15
    41ec:	ef 90       	pop	r14
    41ee:	df 90       	pop	r13
    41f0:	cf 90       	pop	r12
    41f2:	08 95       	ret

000041f4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
    41f4:	2f 92       	push	r2
    41f6:	3f 92       	push	r3
    41f8:	4f 92       	push	r4
    41fa:	5f 92       	push	r5
    41fc:	6f 92       	push	r6
    41fe:	7f 92       	push	r7
    4200:	8f 92       	push	r8
    4202:	9f 92       	push	r9
    4204:	af 92       	push	r10
    4206:	bf 92       	push	r11
    4208:	cf 92       	push	r12
    420a:	df 92       	push	r13
    420c:	ef 92       	push	r14
    420e:	ff 92       	push	r15
    4210:	0f 93       	push	r16
    4212:	1f 93       	push	r17
    4214:	df 93       	push	r29
    4216:	cf 93       	push	r28
    4218:	cd b7       	in	r28, 0x3d	; 61
    421a:	de b7       	in	r29, 0x3e	; 62
    421c:	a8 97       	sbiw	r28, 0x28	; 40
    421e:	cd bf       	out	0x3d, r28	; 61
    4220:	de bf       	out	0x3e, r29	; 62
    4222:	8b a3       	std	Y+35, r24	; 0x23
    4224:	9c a3       	std	Y+36, r25	; 0x24
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = chk_mounted(&path, &dj.fs, 1);
    4226:	3d e0       	ldi	r19, 0x0D	; 13
    4228:	e3 2e       	mov	r14, r19
    422a:	f1 2c       	mov	r15, r1
    422c:	ec 0e       	add	r14, r28
    422e:	fd 1e       	adc	r15, r29
    4230:	ce 01       	movw	r24, r28
    4232:	83 96       	adiw	r24, 0x23	; 35
    4234:	b7 01       	movw	r22, r14
    4236:	41 e0       	ldi	r20, 0x01	; 1
    4238:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <chk_mounted>
    423c:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    423e:	88 23       	and	r24, r24
    4240:	09 f0       	breq	.+2      	; 0x4244 <f_mkdir+0x50>
    4242:	38 c1       	rjmp	.+624    	; 0x44b4 <f_mkdir+0x2c0>

	INITBUF(dj, sfn, lfn);
    4244:	ce 01       	movw	r24, r28
    4246:	01 96       	adiw	r24, 0x01	; 1
    4248:	89 a3       	std	Y+33, r24	; 0x21
    424a:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    424c:	6b a1       	ldd	r22, Y+35	; 0x23
    424e:	7c a1       	ldd	r23, Y+36	; 0x24
    4250:	c7 01       	movw	r24, r14
    4252:	0e 94 81 10 	call	0x2102	; 0x2102 <follow_path>
    4256:	18 2f       	mov	r17, r24
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
    4258:	88 23       	and	r24, r24
    425a:	11 f4       	brne	.+4      	; 0x4260 <f_mkdir+0x6c>
    425c:	18 e0       	ldi	r17, 0x08	; 8
    425e:	2a c1       	rjmp	.+596    	; 0x44b4 <f_mkdir+0x2c0>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
    4260:	84 30       	cpi	r24, 0x04	; 4
    4262:	09 f0       	breq	.+2      	; 0x4266 <f_mkdir+0x72>
    4264:	27 c1       	rjmp	.+590    	; 0x44b4 <f_mkdir+0x2c0>
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
    4266:	8d 85       	ldd	r24, Y+13	; 0x0d
    4268:	9e 85       	ldd	r25, Y+14	; 0x0e
    426a:	40 e0       	ldi	r20, 0x00	; 0
    426c:	50 e0       	ldi	r21, 0x00	; 0
    426e:	60 e0       	ldi	r22, 0x00	; 0
    4270:	70 e0       	ldi	r23, 0x00	; 0
    4272:	0e 94 a0 0b 	call	0x1740	; 0x1740 <create_chain>
    4276:	4b 01       	movw	r8, r22
    4278:	5c 01       	movw	r10, r24
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
    427a:	61 15       	cp	r22, r1
    427c:	71 05       	cpc	r23, r1
    427e:	81 05       	cpc	r24, r1
    4280:	91 05       	cpc	r25, r1
    4282:	11 f4       	brne	.+4      	; 0x4288 <f_mkdir+0x94>
    4284:	17 e0       	ldi	r17, 0x07	; 7
    4286:	16 c1       	rjmp	.+556    	; 0x44b4 <f_mkdir+0x2c0>
	if (dclst == 1) res = FR_INT_ERR;
    4288:	61 30       	cpi	r22, 0x01	; 1
    428a:	71 05       	cpc	r23, r1
    428c:	81 05       	cpc	r24, r1
    428e:	91 05       	cpc	r25, r1
    4290:	11 f4       	brne	.+4      	; 0x4296 <f_mkdir+0xa2>
    4292:	12 e0       	ldi	r17, 0x02	; 2
    4294:	0f c1       	rjmp	.+542    	; 0x44b4 <f_mkdir+0x2c0>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
    4296:	6f 3f       	cpi	r22, 0xFF	; 255
    4298:	3f ef       	ldi	r19, 0xFF	; 255
    429a:	73 07       	cpc	r23, r19
    429c:	3f ef       	ldi	r19, 0xFF	; 255
    429e:	83 07       	cpc	r24, r19
    42a0:	3f ef       	ldi	r19, 0xFF	; 255
    42a2:	93 07       	cpc	r25, r19
    42a4:	09 f4       	brne	.+2      	; 0x42a8 <f_mkdir+0xb4>
    42a6:	1d c1       	rjmp	.+570    	; 0x44e2 <f_mkdir+0x2ee>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
    42a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    42aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ac:	40 e0       	ldi	r20, 0x00	; 0
    42ae:	50 e0       	ldi	r21, 0x00	; 0
    42b0:	60 e0       	ldi	r22, 0x00	; 0
    42b2:	70 e0       	ldi	r23, 0x00	; 0
    42b4:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    42b8:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    42ba:	88 23       	and	r24, r24
    42bc:	09 f0       	breq	.+2      	; 0x42c0 <f_mkdir+0xcc>
    42be:	fa c0       	rjmp	.+500    	; 0x44b4 <f_mkdir+0x2c0>
	dsect = clust2sect(dj.fs, dclst);
    42c0:	0d 85       	ldd	r16, Y+13	; 0x0d
    42c2:	1e 85       	ldd	r17, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    42c4:	2e ef       	ldi	r18, 0xFE	; 254
    42c6:	c2 2e       	mov	r12, r18
    42c8:	2f ef       	ldi	r18, 0xFF	; 255
    42ca:	d2 2e       	mov	r13, r18
    42cc:	2f ef       	ldi	r18, 0xFF	; 255
    42ce:	e2 2e       	mov	r14, r18
    42d0:	2f ef       	ldi	r18, 0xFF	; 255
    42d2:	f2 2e       	mov	r15, r18
    42d4:	c8 0c       	add	r12, r8
    42d6:	d9 1c       	adc	r13, r9
    42d8:	ea 1c       	adc	r14, r10
    42da:	fb 1c       	adc	r15, r11
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    42dc:	f8 01       	movw	r30, r16
    42de:	82 8d       	ldd	r24, Z+26	; 0x1a
    42e0:	93 8d       	ldd	r25, Z+27	; 0x1b
    42e2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    42e4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    42e6:	02 97       	sbiw	r24, 0x02	; 2
    42e8:	a1 09       	sbc	r26, r1
    42ea:	b1 09       	sbc	r27, r1
    42ec:	c8 16       	cp	r12, r24
    42ee:	d9 06       	cpc	r13, r25
    42f0:	ea 06       	cpc	r14, r26
    42f2:	fb 06       	cpc	r15, r27
    42f4:	20 f0       	brcs	.+8      	; 0x42fe <f_mkdir+0x10a>
    42f6:	44 24       	eor	r4, r4
    42f8:	55 24       	eor	r5, r5
    42fa:	32 01       	movw	r6, r4
    42fc:	14 c0       	rjmp	.+40     	; 0x4326 <f_mkdir+0x132>
	return clst * fs->csize + fs->database;
    42fe:	f8 01       	movw	r30, r16
    4300:	22 81       	ldd	r18, Z+2	; 0x02
    4302:	30 e0       	ldi	r19, 0x00	; 0
    4304:	40 e0       	ldi	r20, 0x00	; 0
    4306:	50 e0       	ldi	r21, 0x00	; 0
    4308:	c7 01       	movw	r24, r14
    430a:	b6 01       	movw	r22, r12
    430c:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    4310:	2b 01       	movw	r4, r22
    4312:	3c 01       	movw	r6, r24
    4314:	f8 01       	movw	r30, r16
    4316:	86 a1       	ldd	r24, Z+38	; 0x26
    4318:	97 a1       	ldd	r25, Z+39	; 0x27
    431a:	a0 a5       	ldd	r26, Z+40	; 0x28
    431c:	b1 a5       	ldd	r27, Z+41	; 0x29
    431e:	48 0e       	add	r4, r24
    4320:	59 1e       	adc	r5, r25
    4322:	6a 1e       	adc	r6, r26
    4324:	7b 1e       	adc	r7, r27
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
    4326:	9e e2       	ldi	r25, 0x2E	; 46
    4328:	29 2e       	mov	r2, r25
    432a:	31 2c       	mov	r3, r1
    432c:	20 0e       	add	r2, r16
    432e:	31 1e       	adc	r3, r17
    4330:	f1 01       	movw	r30, r2
    4332:	80 e0       	ldi	r24, 0x00	; 0
    4334:	92 e0       	ldi	r25, 0x02	; 2
    4336:	01 c0       	rjmp	.+2      	; 0x433a <f_mkdir+0x146>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    4338:	11 92       	st	Z+, r1
    433a:	01 97       	sbiw	r24, 0x01	; 1
    433c:	2f ef       	ldi	r18, 0xFF	; 255
    433e:	8f 3f       	cpi	r24, 0xFF	; 255
    4340:	92 07       	cpc	r25, r18
    4342:	d1 f7       	brne	.-12     	; 0x4338 <f_mkdir+0x144>
    4344:	f1 01       	movw	r30, r2
    4346:	8b e0       	ldi	r24, 0x0B	; 11
    4348:	90 e0       	ldi	r25, 0x00	; 0
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
    434a:	20 e2       	ldi	r18, 0x20	; 32
    434c:	01 c0       	rjmp	.+2      	; 0x4350 <f_mkdir+0x15c>
    434e:	21 93       	st	Z+, r18
    4350:	01 97       	sbiw	r24, 0x01	; 1
    4352:	3f ef       	ldi	r19, 0xFF	; 255
    4354:	8f 3f       	cpi	r24, 0xFF	; 255
    4356:	93 07       	cpc	r25, r19
    4358:	d1 f7       	brne	.-12     	; 0x434e <f_mkdir+0x15a>
    435a:	8e e2       	ldi	r24, 0x2E	; 46
    435c:	f8 01       	movw	r30, r16
    435e:	86 a7       	std	Z+46, r24	; 0x2e
	dir[DIR_Attr] = AM_DIR;
    4360:	80 e1       	ldi	r24, 0x10	; 16
    4362:	81 af       	std	Z+57, r24	; 0x39
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
    4364:	0c 5b       	subi	r16, 0xBC	; 188
    4366:	1f 4f       	sbci	r17, 0xFF	; 255
    4368:	f8 01       	movw	r30, r16
    436a:	11 92       	st	Z+, r1
    436c:	11 92       	st	Z+, r1
    436e:	11 92       	st	Z+, r1
    4370:	11 92       	st	Z+, r1
	ST_WORD(dir+DIR_FstClusLO, dclst);
    4372:	88 a6       	std	Y+40, r8	; 0x28
    4374:	81 92       	st	Z+, r8
    4376:	8f 01       	movw	r16, r30
    4378:	89 2d       	mov	r24, r9
    437a:	99 27       	eor	r25, r25
    437c:	8f a3       	std	Y+39, r24	; 0x27
    437e:	80 83       	st	Z, r24
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    4380:	c5 01       	movw	r24, r10
    4382:	aa 27       	eor	r26, r26
    4384:	bb 27       	eor	r27, r27
    4386:	8e a3       	std	Y+38, r24	; 0x26
    4388:	07 50       	subi	r16, 0x07	; 7
    438a:	10 40       	sbci	r17, 0x00	; 0
    438c:	f8 01       	movw	r30, r16
    438e:	81 93       	st	Z+, r24
    4390:	8f 01       	movw	r16, r30
    4392:	89 2f       	mov	r24, r25
    4394:	99 27       	eor	r25, r25
    4396:	8d a3       	std	Y+37, r24	; 0x25
    4398:	80 83       	st	Z, r24
    439a:	03 54       	subi	r16, 0x43	; 67
    439c:	10 40       	sbci	r17, 0x00	; 0
    439e:	f1 01       	movw	r30, r2
    43a0:	20 e2       	ldi	r18, 0x20	; 32
    43a2:	30 e0       	ldi	r19, 0x00	; 0
    43a4:	03 c0       	rjmp	.+6      	; 0x43ac <f_mkdir+0x1b8>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    43a6:	80 81       	ld	r24, Z
    43a8:	80 a3       	std	Z+32, r24	; 0x20
    43aa:	31 96       	adiw	r30, 0x01	; 1
    43ac:	21 50       	subi	r18, 0x01	; 1
    43ae:	30 40       	sbci	r19, 0x00	; 0
    43b0:	8f ef       	ldi	r24, 0xFF	; 255
    43b2:	2f 3f       	cpi	r18, 0xFF	; 255
    43b4:	38 07       	cpc	r19, r24
    43b6:	b9 f7       	brne	.-18     	; 0x43a6 <f_mkdir+0x1b2>
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
    43b8:	01 5b       	subi	r16, 0xB1	; 177
    43ba:	1f 4f       	sbci	r17, 0xFF	; 255
    43bc:	8e e2       	ldi	r24, 0x2E	; 46
    43be:	f8 01       	movw	r30, r16
    43c0:	80 83       	st	Z, r24
    43c2:	0f 54       	subi	r16, 0x4F	; 79
    43c4:	10 40       	sbci	r17, 0x00	; 0
	pclst = dj.sclust;
    43c6:	2b 89       	ldd	r18, Y+19	; 0x13
    43c8:	3c 89       	ldd	r19, Y+20	; 0x14
    43ca:	4d 89       	ldd	r20, Y+21	; 0x15
    43cc:	5e 89       	ldd	r21, Y+22	; 0x16
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
    43ce:	ed 85       	ldd	r30, Y+13	; 0x0d
    43d0:	fe 85       	ldd	r31, Y+14	; 0x0e
    43d2:	80 81       	ld	r24, Z
    43d4:	83 30       	cpi	r24, 0x03	; 3
    43d6:	69 f4       	brne	.+26     	; 0x43f2 <f_mkdir+0x1fe>
    43d8:	82 a1       	ldd	r24, Z+34	; 0x22
    43da:	93 a1       	ldd	r25, Z+35	; 0x23
    43dc:	a4 a1       	ldd	r26, Z+36	; 0x24
    43de:	b5 a1       	ldd	r27, Z+37	; 0x25
    43e0:	28 17       	cp	r18, r24
    43e2:	39 07       	cpc	r19, r25
    43e4:	4a 07       	cpc	r20, r26
    43e6:	5b 07       	cpc	r21, r27
    43e8:	21 f4       	brne	.+8      	; 0x43f2 <f_mkdir+0x1fe>
    43ea:	20 e0       	ldi	r18, 0x00	; 0
    43ec:	30 e0       	ldi	r19, 0x00	; 0
    43ee:	40 e0       	ldi	r20, 0x00	; 0
    43f0:	50 e0       	ldi	r21, 0x00	; 0
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
    43f2:	08 59       	subi	r16, 0x98	; 152
    43f4:	1f 4f       	sbci	r17, 0xFF	; 255
    43f6:	f8 01       	movw	r30, r16
    43f8:	21 93       	st	Z+, r18
    43fa:	8f 01       	movw	r16, r30
    43fc:	83 2f       	mov	r24, r19
    43fe:	99 27       	eor	r25, r25
    4400:	80 83       	st	Z, r24
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
    4402:	ca 01       	movw	r24, r20
    4404:	aa 27       	eor	r26, r26
    4406:	bb 27       	eor	r27, r27
    4408:	07 50       	subi	r16, 0x07	; 7
    440a:	10 40       	sbci	r17, 0x00	; 0
    440c:	f8 01       	movw	r30, r16
    440e:	81 93       	st	Z+, r24
    4410:	89 2f       	mov	r24, r25
    4412:	99 27       	eor	r25, r25
    4414:	80 83       	st	Z, r24
    4416:	73 01       	movw	r14, r6
    4418:	62 01       	movw	r12, r4
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
		dj.fs->wflag = 1;
    441a:	01 e0       	ldi	r16, 0x01	; 1
    441c:	1e c0       	rjmp	.+60     	; 0x445a <f_mkdir+0x266>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    441e:	c2 a6       	std	Z+42, r12	; 0x2a
    4420:	d3 a6       	std	Z+43, r13	; 0x2b
    4422:	e4 a6       	std	Z+44, r14	; 0x2c
    4424:	f5 a6       	std	Z+45, r15	; 0x2d
		dj.fs->wflag = 1;
    4426:	04 83       	std	Z+4, r16	; 0x04
		res = move_window(dj.fs, 0);
    4428:	cf 01       	movw	r24, r30
    442a:	40 e0       	ldi	r20, 0x00	; 0
    442c:	50 e0       	ldi	r21, 0x00	; 0
    442e:	60 e0       	ldi	r22, 0x00	; 0
    4430:	70 e0       	ldi	r23, 0x00	; 0
    4432:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
    4436:	18 2f       	mov	r17, r24
		if (res) LEAVE_FF(dj.fs, res);
    4438:	88 23       	and	r24, r24
    443a:	e1 f5       	brne	.+120    	; 0x44b4 <f_mkdir+0x2c0>
    443c:	f1 01       	movw	r30, r2
    443e:	80 e0       	ldi	r24, 0x00	; 0
    4440:	92 e0       	ldi	r25, 0x02	; 2
    4442:	01 c0       	rjmp	.+2      	; 0x4446 <f_mkdir+0x252>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    4444:	11 92       	st	Z+, r1
    4446:	01 97       	sbiw	r24, 0x01	; 1
    4448:	2f ef       	ldi	r18, 0xFF	; 255
    444a:	8f 3f       	cpi	r24, 0xFF	; 255
    444c:	92 07       	cpc	r25, r18
    444e:	d1 f7       	brne	.-12     	; 0x4444 <f_mkdir+0x250>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    4450:	08 94       	sec
    4452:	c1 1c       	adc	r12, r1
    4454:	d1 1c       	adc	r13, r1
    4456:	e1 1c       	adc	r14, r1
    4458:	f1 1c       	adc	r15, r1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
    445a:	ed 85       	ldd	r30, Y+13	; 0x0d
    445c:	fe 85       	ldd	r31, Y+14	; 0x0e
    445e:	9c 2d       	mov	r25, r12
    4460:	94 19       	sub	r25, r4
    4462:	82 81       	ldd	r24, Z+2	; 0x02
    4464:	98 17       	cp	r25, r24
    4466:	d8 f2       	brcs	.-74     	; 0x441e <f_mkdir+0x22a>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
    4468:	ce 01       	movw	r24, r28
    446a:	0d 96       	adiw	r24, 0x0d	; 13
    446c:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <dir_register>
    4470:	18 2f       	mov	r17, r24
	if (res != FR_OK) {
    4472:	88 23       	and	r24, r24
    4474:	39 f0       	breq	.+14     	; 0x4484 <f_mkdir+0x290>
		remove_chain(dj.fs, dclst);
    4476:	8d 85       	ldd	r24, Y+13	; 0x0d
    4478:	9e 85       	ldd	r25, Y+14	; 0x0e
    447a:	b5 01       	movw	r22, r10
    447c:	a4 01       	movw	r20, r8
    447e:	0e 94 25 0b 	call	0x164a	; 0x164a <remove_chain>
    4482:	18 c0       	rjmp	.+48     	; 0x44b4 <f_mkdir+0x2c0>
	} else {
		dir = dj.dir;
    4484:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4486:	f8 a1       	ldd	r31, Y+32	; 0x20
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
    4488:	80 e1       	ldi	r24, 0x10	; 16
    448a:	83 87       	std	Z+11, r24	; 0x0b
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
    448c:	16 8a       	std	Z+22, r1	; 0x16
    448e:	17 8a       	std	Z+23, r1	; 0x17
    4490:	10 8e       	std	Z+24, r1	; 0x18
    4492:	11 8e       	std	Z+25, r1	; 0x19
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
    4494:	38 a5       	ldd	r19, Y+40	; 0x28
    4496:	32 8f       	std	Z+26, r19	; 0x1a
    4498:	8f a1       	ldd	r24, Y+39	; 0x27
    449a:	83 8f       	std	Z+27, r24	; 0x1b
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    449c:	2e a1       	ldd	r18, Y+38	; 0x26
    449e:	24 8b       	std	Z+20, r18	; 0x14
    44a0:	3d a1       	ldd	r19, Y+37	; 0x25
    44a2:	35 8b       	std	Z+21, r19	; 0x15
		dj.fs->wflag = 1;
    44a4:	ed 85       	ldd	r30, Y+13	; 0x0d
    44a6:	fe 85       	ldd	r31, Y+14	; 0x0e
    44a8:	81 e0       	ldi	r24, 0x01	; 1
    44aa:	84 83       	std	Z+4, r24	; 0x04
		res = sync(dj.fs);
    44ac:	cf 01       	movw	r24, r30
    44ae:	0e 94 c0 08 	call	0x1180	; 0x1180 <sync>
    44b2:	18 2f       	mov	r17, r24
	}

	LEAVE_FF(dj.fs, res);
}
    44b4:	81 2f       	mov	r24, r17
    44b6:	a8 96       	adiw	r28, 0x28	; 40
    44b8:	cd bf       	out	0x3d, r28	; 61
    44ba:	de bf       	out	0x3e, r29	; 62
    44bc:	cf 91       	pop	r28
    44be:	df 91       	pop	r29
    44c0:	1f 91       	pop	r17
    44c2:	0f 91       	pop	r16
    44c4:	ff 90       	pop	r15
    44c6:	ef 90       	pop	r14
    44c8:	df 90       	pop	r13
    44ca:	cf 90       	pop	r12
    44cc:	bf 90       	pop	r11
    44ce:	af 90       	pop	r10
    44d0:	9f 90       	pop	r9
    44d2:	8f 90       	pop	r8
    44d4:	7f 90       	pop	r7
    44d6:	6f 90       	pop	r6
    44d8:	5f 90       	pop	r5
    44da:	4f 90       	pop	r4
    44dc:	3f 90       	pop	r3
    44de:	2f 90       	pop	r2
    44e0:	08 95       	ret
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
		dj.fs->wflag = 1;
		res = sync(dj.fs);
    44e2:	11 e0       	ldi	r17, 0x01	; 1
    44e4:	e7 cf       	rjmp	.-50     	; 0x44b4 <f_mkdir+0x2c0>

000044e6 <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    44e6:	ef 92       	push	r14
    44e8:	ff 92       	push	r15
    44ea:	0f 93       	push	r16
    44ec:	1f 93       	push	r17
    44ee:	df 93       	push	r29
    44f0:	cf 93       	push	r28
    44f2:	cd b7       	in	r28, 0x3d	; 61
    44f4:	de b7       	in	r29, 0x3e	; 62
    44f6:	a4 97       	sbiw	r28, 0x24	; 36
    44f8:	cd bf       	out	0x3d, r28	; 61
    44fa:	de bf       	out	0x3e, r29	; 62
    44fc:	8b a3       	std	Y+35, r24	; 0x23
    44fe:	9c a3       	std	Y+36, r25	; 0x24
    4500:	e6 2e       	mov	r14, r22
    4502:	f4 2e       	mov	r15, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    4504:	8e 01       	movw	r16, r28
    4506:	03 5f       	subi	r16, 0xF3	; 243
    4508:	1f 4f       	sbci	r17, 0xFF	; 255
    450a:	ce 01       	movw	r24, r28
    450c:	83 96       	adiw	r24, 0x23	; 35
    450e:	b8 01       	movw	r22, r16
    4510:	41 e0       	ldi	r20, 0x01	; 1
    4512:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <chk_mounted>
	if (res == FR_OK) {
    4516:	88 23       	and	r24, r24
    4518:	09 f5       	brne	.+66     	; 0x455c <f_chmod+0x76>
		INITBUF(dj, sfn, lfn);
    451a:	ce 01       	movw	r24, r28
    451c:	01 96       	adiw	r24, 0x01	; 1
    451e:	89 a3       	std	Y+33, r24	; 0x21
    4520:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    4522:	6b a1       	ldd	r22, Y+35	; 0x23
    4524:	7c a1       	ldd	r23, Y+36	; 0x24
    4526:	c8 01       	movw	r24, r16
    4528:	0e 94 81 10 	call	0x2102	; 0x2102 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    452c:	88 23       	and	r24, r24
    452e:	b1 f4       	brne	.+44     	; 0x455c <f_chmod+0x76>
			dir = dj.dir;
    4530:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4532:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    4534:	30 97       	sbiw	r30, 0x00	; 0
    4536:	11 f4       	brne	.+4      	; 0x453c <f_chmod+0x56>
    4538:	86 e0       	ldi	r24, 0x06	; 6
    453a:	10 c0       	rjmp	.+32     	; 0x455c <f_chmod+0x76>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    453c:	9f 2d       	mov	r25, r15
    453e:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    4540:	89 2f       	mov	r24, r25
    4542:	80 95       	com	r24
    4544:	23 85       	ldd	r18, Z+11	; 0x0b
    4546:	82 23       	and	r24, r18
    4548:	9e 21       	and	r25, r14
    454a:	89 2b       	or	r24, r25
    454c:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    454e:	ed 85       	ldd	r30, Y+13	; 0x0d
    4550:	fe 85       	ldd	r31, Y+14	; 0x0e
    4552:	81 e0       	ldi	r24, 0x01	; 1
    4554:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    4556:	cf 01       	movw	r24, r30
    4558:	0e 94 c0 08 	call	0x1180	; 0x1180 <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    455c:	a4 96       	adiw	r28, 0x24	; 36
    455e:	cd bf       	out	0x3d, r28	; 61
    4560:	de bf       	out	0x3e, r29	; 62
    4562:	cf 91       	pop	r28
    4564:	df 91       	pop	r29
    4566:	1f 91       	pop	r17
    4568:	0f 91       	pop	r16
    456a:	ff 90       	pop	r15
    456c:	ef 90       	pop	r14
    456e:	08 95       	ret

00004570 <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
    4570:	ef 92       	push	r14
    4572:	ff 92       	push	r15
    4574:	0f 93       	push	r16
    4576:	1f 93       	push	r17
    4578:	df 93       	push	r29
    457a:	cf 93       	push	r28
    457c:	cd b7       	in	r28, 0x3d	; 61
    457e:	de b7       	in	r29, 0x3e	; 62
    4580:	a4 97       	sbiw	r28, 0x24	; 36
    4582:	cd bf       	out	0x3d, r28	; 61
    4584:	de bf       	out	0x3e, r29	; 62
    4586:	8b a3       	std	Y+35, r24	; 0x23
    4588:	9c a3       	std	Y+36, r25	; 0x24
    458a:	8b 01       	movw	r16, r22
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    458c:	4d e0       	ldi	r20, 0x0D	; 13
    458e:	e4 2e       	mov	r14, r20
    4590:	f1 2c       	mov	r15, r1
    4592:	ec 0e       	add	r14, r28
    4594:	fd 1e       	adc	r15, r29
    4596:	ce 01       	movw	r24, r28
    4598:	83 96       	adiw	r24, 0x23	; 35
    459a:	b7 01       	movw	r22, r14
    459c:	41 e0       	ldi	r20, 0x01	; 1
    459e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <chk_mounted>
	if (res == FR_OK) {
    45a2:	88 23       	and	r24, r24
    45a4:	41 f5       	brne	.+80     	; 0x45f6 <f_utime+0x86>
		INITBUF(dj, sfn, lfn);
    45a6:	ce 01       	movw	r24, r28
    45a8:	01 96       	adiw	r24, 0x01	; 1
    45aa:	89 a3       	std	Y+33, r24	; 0x21
    45ac:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    45ae:	6b a1       	ldd	r22, Y+35	; 0x23
    45b0:	7c a1       	ldd	r23, Y+36	; 0x24
    45b2:	c7 01       	movw	r24, r14
    45b4:	0e 94 81 10 	call	0x2102	; 0x2102 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    45b8:	88 23       	and	r24, r24
    45ba:	e9 f4       	brne	.+58     	; 0x45f6 <f_utime+0x86>
			dir = dj.dir;
    45bc:	ef 8d       	ldd	r30, Y+31	; 0x1f
    45be:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {				/* Root directory */
    45c0:	30 97       	sbiw	r30, 0x00	; 0
    45c2:	11 f4       	brne	.+4      	; 0x45c8 <f_utime+0x58>
    45c4:	86 e0       	ldi	r24, 0x06	; 6
    45c6:	17 c0       	rjmp	.+46     	; 0x45f6 <f_utime+0x86>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    45c8:	d8 01       	movw	r26, r16
    45ca:	16 96       	adiw	r26, 0x06	; 6
    45cc:	8c 91       	ld	r24, X
    45ce:	16 97       	sbiw	r26, 0x06	; 6
    45d0:	86 8b       	std	Z+22, r24	; 0x16
    45d2:	17 96       	adiw	r26, 0x07	; 7
    45d4:	8c 91       	ld	r24, X
    45d6:	17 97       	sbiw	r26, 0x07	; 7
    45d8:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    45da:	14 96       	adiw	r26, 0x04	; 4
    45dc:	8c 91       	ld	r24, X
    45de:	14 97       	sbiw	r26, 0x04	; 4
    45e0:	80 8f       	std	Z+24, r24	; 0x18
    45e2:	15 96       	adiw	r26, 0x05	; 5
    45e4:	8c 91       	ld	r24, X
    45e6:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    45e8:	ed 85       	ldd	r30, Y+13	; 0x0d
    45ea:	fe 85       	ldd	r31, Y+14	; 0x0e
    45ec:	81 e0       	ldi	r24, 0x01	; 1
    45ee:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    45f0:	cf 01       	movw	r24, r30
    45f2:	0e 94 c0 08 	call	0x1180	; 0x1180 <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    45f6:	a4 96       	adiw	r28, 0x24	; 36
    45f8:	cd bf       	out	0x3d, r28	; 61
    45fa:	de bf       	out	0x3e, r29	; 62
    45fc:	cf 91       	pop	r28
    45fe:	df 91       	pop	r29
    4600:	1f 91       	pop	r17
    4602:	0f 91       	pop	r16
    4604:	ff 90       	pop	r15
    4606:	ef 90       	pop	r14
    4608:	08 95       	ret

0000460a <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
    460a:	cf 92       	push	r12
    460c:	df 92       	push	r13
    460e:	ef 92       	push	r14
    4610:	ff 92       	push	r15
    4612:	0f 93       	push	r16
    4614:	1f 93       	push	r17
    4616:	df 93       	push	r29
    4618:	cf 93       	push	r28
    461a:	cd b7       	in	r28, 0x3d	; 61
    461c:	de b7       	in	r29, 0x3e	; 62
    461e:	cf 54       	subi	r28, 0x4F	; 79
    4620:	d0 40       	sbci	r29, 0x00	; 0
    4622:	cd bf       	out	0x3d, r28	; 61
    4624:	de bf       	out	0x3e, r29	; 62
    4626:	8e 01       	movw	r16, r28
    4628:	02 5b       	subi	r16, 0xB2	; 178
    462a:	1f 4f       	sbci	r17, 0xFF	; 255
    462c:	d8 01       	movw	r26, r16
    462e:	8d 93       	st	X+, r24
    4630:	9c 93       	st	X, r25
    4632:	6b 01       	movw	r12, r22
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
    4634:	ce 01       	movw	r24, r28
    4636:	01 96       	adiw	r24, 0x01	; 1
    4638:	8e ab       	std	Y+54, r24	; 0x36
    463a:	9f ab       	std	Y+55, r25	; 0x37
	res = chk_mounted(&path_old, &dj_old.fs, 1);
    463c:	a2 e2       	ldi	r26, 0x22	; 34
    463e:	ea 2e       	mov	r14, r26
    4640:	f1 2c       	mov	r15, r1
    4642:	ec 0e       	add	r14, r28
    4644:	fd 1e       	adc	r15, r29
    4646:	c8 01       	movw	r24, r16
    4648:	b7 01       	movw	r22, r14
    464a:	41 e0       	ldi	r20, 0x01	; 1
    464c:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <chk_mounted>
	if (res == FR_OK) {
    4650:	88 23       	and	r24, r24
    4652:	09 f0       	breq	.+2      	; 0x4656 <f_rename+0x4c>
    4654:	f4 c0       	rjmp	.+488    	; 0x483e <f_rename+0x234>
		dj_new.fs = dj_old.fs;
    4656:	8a a1       	ldd	r24, Y+34	; 0x22
    4658:	9b a1       	ldd	r25, Y+35	; 0x23
    465a:	88 af       	std	Y+56, r24	; 0x38
    465c:	99 af       	std	Y+57, r25	; 0x39
		res = follow_path(&dj_old, path_old);	/* Check old object */
    465e:	f8 01       	movw	r30, r16
    4660:	60 81       	ld	r22, Z
    4662:	71 81       	ldd	r23, Z+1	; 0x01
    4664:	c7 01       	movw	r24, r14
    4666:	0e 94 81 10 	call	0x2102	; 0x2102 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
    466a:	88 23       	and	r24, r24
    466c:	09 f0       	breq	.+2      	; 0x4670 <f_rename+0x66>
    466e:	e7 c0       	rjmp	.+462    	; 0x483e <f_rename+0x234>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
    4670:	8c a9       	ldd	r24, Y+52	; 0x34
    4672:	9d a9       	ldd	r25, Y+53	; 0x35
    4674:	00 97       	sbiw	r24, 0x00	; 0
    4676:	11 f4       	brne	.+4      	; 0x467c <f_rename+0x72>
    4678:	84 e0       	ldi	r24, 0x04	; 4
    467a:	e1 c0       	rjmp	.+450    	; 0x483e <f_rename+0x234>
    467c:	dc 01       	movw	r26, r24
    467e:	fe 01       	movw	r30, r28
    4680:	3d 96       	adiw	r30, 0x0d	; 13
    4682:	04 c0       	rjmp	.+8      	; 0x468c <f_rename+0x82>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4684:	1a 96       	adiw	r26, 0x0a	; 10
    4686:	8c 91       	ld	r24, X
    4688:	1a 97       	sbiw	r26, 0x0a	; 10
    468a:	81 93       	st	Z+, r24
    468c:	11 96       	adiw	r26, 0x01	; 1
    468e:	ee 15       	cp	r30, r14
    4690:	ff 05       	cpc	r31, r15
    4692:	c1 f7       	brne	.-16     	; 0x4684 <f_rename+0x7a>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    4694:	de 01       	movw	r26, r28
    4696:	d8 96       	adiw	r26, 0x38	; 56
	const char *s = (const char *)src;
    4698:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = *s++;
    469a:	9d 01       	movw	r18, r26
    469c:	02 c0       	rjmp	.+4      	; 0x46a2 <f_rename+0x98>
    469e:	81 91       	ld	r24, Z+
    46a0:	8d 93       	st	X+, r24
    46a2:	e2 17       	cp	r30, r18
    46a4:	f3 07       	cpc	r31, r19
    46a6:	d9 f7       	brne	.-10     	; 0x469e <f_rename+0x94>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
    46a8:	8e 01       	movw	r16, r28
    46aa:	08 5c       	subi	r16, 0xC8	; 200
    46ac:	1f 4f       	sbci	r17, 0xFF	; 255
    46ae:	c8 01       	movw	r24, r16
    46b0:	b6 01       	movw	r22, r12
    46b2:	0e 94 81 10 	call	0x2102	; 0x2102 <follow_path>
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    46b6:	88 23       	and	r24, r24
    46b8:	11 f4       	brne	.+4      	; 0x46be <f_rename+0xb4>
    46ba:	88 e0       	ldi	r24, 0x08	; 8
    46bc:	c0 c0       	rjmp	.+384    	; 0x483e <f_rename+0x234>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    46be:	84 30       	cpi	r24, 0x04	; 4
    46c0:	09 f0       	breq	.+2      	; 0x46c4 <f_rename+0xba>
    46c2:	bd c0       	rjmp	.+378    	; 0x483e <f_rename+0x234>
		res = dir_register(&dj_new);			/* Register the new object */
    46c4:	c8 01       	movw	r24, r16
    46c6:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <dir_register>
		if (res == FR_OK) {
    46ca:	88 23       	and	r24, r24
    46cc:	09 f0       	breq	.+2      	; 0x46d0 <f_rename+0xc6>
    46ce:	b7 c0       	rjmp	.+366    	; 0x483e <f_rename+0x234>
			dir = dj_new.dir;					/* Copy object information into new entry */
    46d0:	fe 01       	movw	r30, r28
    46d2:	e6 5b       	subi	r30, 0xB6	; 182
    46d4:	ff 4f       	sbci	r31, 0xFF	; 255
    46d6:	40 81       	ld	r20, Z
    46d8:	51 81       	ldd	r21, Z+1	; 0x01
    46da:	da 01       	movw	r26, r20
    46dc:	fe 01       	movw	r30, r28
    46de:	3f 96       	adiw	r30, 0x0f	; 15
    46e0:	04 c0       	rjmp	.+8      	; 0x46ea <f_rename+0xe0>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    46e2:	81 91       	ld	r24, Z+
    46e4:	1c 96       	adiw	r26, 0x0c	; 12
    46e6:	8c 93       	st	X, r24
    46e8:	1c 97       	sbiw	r26, 0x0c	; 12
    46ea:	11 96       	adiw	r26, 0x01	; 1
    46ec:	ee 15       	cp	r30, r14
    46ee:	ff 05       	cpc	r31, r15
    46f0:	c1 f7       	brne	.-16     	; 0x46e2 <f_rename+0xd8>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
    46f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    46f4:	80 62       	ori	r24, 0x20	; 32
    46f6:	da 01       	movw	r26, r20
    46f8:	1b 96       	adiw	r26, 0x0b	; 11
    46fa:	8c 93       	st	X, r24
    46fc:	1b 97       	sbiw	r26, 0x0b	; 11
			dj_old.fs->wflag = 1;
    46fe:	ea a1       	ldd	r30, Y+34	; 0x22
    4700:	fb a1       	ldd	r31, Y+35	; 0x23
    4702:	81 e0       	ldi	r24, 0x01	; 1
    4704:	84 83       	std	Z+4, r24	; 0x04
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
    4706:	1b 96       	adiw	r26, 0x0b	; 11
    4708:	8c 91       	ld	r24, X
    470a:	1b 97       	sbiw	r26, 0x0b	; 11
    470c:	84 ff       	sbrs	r24, 4
    470e:	8b c0       	rjmp	.+278    	; 0x4826 <f_rename+0x21c>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    4710:	c8 ac       	ldd	r12, Y+56	; 0x38
    4712:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    4714:	5a 96       	adiw	r26, 0x1a	; 26
    4716:	2c 91       	ld	r18, X
    4718:	5a 97       	sbiw	r26, 0x1a	; 26
    471a:	30 e0       	ldi	r19, 0x00	; 0
    471c:	54 96       	adiw	r26, 0x14	; 20
    471e:	8c 91       	ld	r24, X
    4720:	54 97       	sbiw	r26, 0x14	; 20
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	28 2b       	or	r18, r24
    4726:	39 2b       	or	r19, r25
    4728:	55 96       	adiw	r26, 0x15	; 21
    472a:	9c 91       	ld	r25, X
    472c:	55 97       	sbiw	r26, 0x15	; 21
    472e:	80 e0       	ldi	r24, 0x00	; 0
    4730:	28 2b       	or	r18, r24
    4732:	39 2b       	or	r19, r25
    4734:	5b 96       	adiw	r26, 0x1b	; 27
    4736:	9c 91       	ld	r25, X
    4738:	80 e0       	ldi	r24, 0x00	; 0
    473a:	28 2b       	or	r18, r24
    473c:	39 2b       	or	r19, r25
    473e:	79 01       	movw	r14, r18
    4740:	00 e0       	ldi	r16, 0x00	; 0
    4742:	10 e0       	ldi	r17, 0x00	; 0
    4744:	8e ef       	ldi	r24, 0xFE	; 254
    4746:	9f ef       	ldi	r25, 0xFF	; 255
    4748:	af ef       	ldi	r26, 0xFF	; 255
    474a:	bf ef       	ldi	r27, 0xFF	; 255
    474c:	e8 0e       	add	r14, r24
    474e:	f9 1e       	adc	r15, r25
    4750:	0a 1f       	adc	r16, r26
    4752:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    4754:	f6 01       	movw	r30, r12
    4756:	82 8d       	ldd	r24, Z+26	; 0x1a
    4758:	93 8d       	ldd	r25, Z+27	; 0x1b
    475a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    475c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    475e:	02 97       	sbiw	r24, 0x02	; 2
    4760:	a1 09       	sbc	r26, r1
    4762:	b1 09       	sbc	r27, r1
    4764:	e8 16       	cp	r14, r24
    4766:	f9 06       	cpc	r15, r25
    4768:	0a 07       	cpc	r16, r26
    476a:	1b 07       	cpc	r17, r27
    476c:	08 f0       	brcs	.+2      	; 0x4770 <f_rename+0x166>
    476e:	66 c0       	rjmp	.+204    	; 0x483c <f_rename+0x232>
	return clst * fs->csize + fs->database;
    4770:	22 81       	ldd	r18, Z+2	; 0x02
    4772:	30 e0       	ldi	r19, 0x00	; 0
    4774:	40 e0       	ldi	r20, 0x00	; 0
    4776:	50 e0       	ldi	r21, 0x00	; 0
    4778:	c8 01       	movw	r24, r16
    477a:	b7 01       	movw	r22, r14
    477c:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    4780:	ab 01       	movw	r20, r22
    4782:	bc 01       	movw	r22, r24
    4784:	f6 01       	movw	r30, r12
    4786:	86 a1       	ldd	r24, Z+38	; 0x26
    4788:	97 a1       	ldd	r25, Z+39	; 0x27
    478a:	a0 a5       	ldd	r26, Z+40	; 0x28
    478c:	b1 a5       	ldd	r27, Z+41	; 0x29
    478e:	48 0f       	add	r20, r24
    4790:	59 1f       	adc	r21, r25
    4792:	6a 1f       	adc	r22, r26
    4794:	7b 1f       	adc	r23, r27
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
    4796:	41 15       	cp	r20, r1
    4798:	51 05       	cpc	r21, r1
    479a:	61 05       	cpc	r22, r1
    479c:	71 05       	cpc	r23, r1
    479e:	09 f4       	brne	.+2      	; 0x47a2 <f_rename+0x198>
    47a0:	4d c0       	rjmp	.+154    	; 0x483c <f_rename+0x232>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
    47a2:	c6 01       	movw	r24, r12
    47a4:	0e 94 47 08 	call	0x108e	; 0x108e <move_window>
					dir = dj_new.fs->win+32;
    47a8:	a8 ad       	ldd	r26, Y+56	; 0x38
    47aa:	b9 ad       	ldd	r27, Y+57	; 0x39
					if (res == FR_OK && dir[1] == '.') {
    47ac:	88 23       	and	r24, r24
    47ae:	09 f0       	breq	.+2      	; 0x47b2 <f_rename+0x1a8>
    47b0:	46 c0       	rjmp	.+140    	; 0x483e <f_rename+0x234>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
    47b2:	bd 01       	movw	r22, r26
    47b4:	62 5b       	subi	r22, 0xB2	; 178
    47b6:	7f 4f       	sbci	r23, 0xFF	; 255
					if (res == FR_OK && dir[1] == '.') {
    47b8:	fb 01       	movw	r30, r22
    47ba:	81 81       	ldd	r24, Z+1	; 0x01
    47bc:	8e 32       	cpi	r24, 0x2E	; 46
    47be:	99 f5       	brne	.+102    	; 0x4826 <f_rename+0x21c>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
    47c0:	8c 91       	ld	r24, X
    47c2:	83 30       	cpi	r24, 0x03	; 3
    47c4:	b1 f4       	brne	.+44     	; 0x47f2 <f_rename+0x1e8>
    47c6:	fe 01       	movw	r30, r28
    47c8:	fe 96       	adiw	r30, 0x3e	; 62
    47ca:	20 81       	ld	r18, Z
    47cc:	31 81       	ldd	r19, Z+1	; 0x01
    47ce:	42 81       	ldd	r20, Z+2	; 0x02
    47d0:	53 81       	ldd	r21, Z+3	; 0x03
    47d2:	92 96       	adiw	r26, 0x22	; 34
    47d4:	8d 91       	ld	r24, X+
    47d6:	9d 91       	ld	r25, X+
    47d8:	0d 90       	ld	r0, X+
    47da:	bc 91       	ld	r27, X
    47dc:	a0 2d       	mov	r26, r0
    47de:	28 17       	cp	r18, r24
    47e0:	39 07       	cpc	r19, r25
    47e2:	4a 07       	cpc	r20, r26
    47e4:	5b 07       	cpc	r21, r27
    47e6:	29 f4       	brne	.+10     	; 0x47f2 <f_rename+0x1e8>
    47e8:	20 e0       	ldi	r18, 0x00	; 0
    47ea:	30 e0       	ldi	r19, 0x00	; 0
    47ec:	40 e0       	ldi	r20, 0x00	; 0
    47ee:	50 e0       	ldi	r21, 0x00	; 0
    47f0:	06 c0       	rjmp	.+12     	; 0x47fe <f_rename+0x1f4>
    47f2:	fe 01       	movw	r30, r28
    47f4:	fe 96       	adiw	r30, 0x3e	; 62
    47f6:	20 81       	ld	r18, Z
    47f8:	31 81       	ldd	r19, Z+1	; 0x01
    47fa:	42 81       	ldd	r20, Z+2	; 0x02
    47fc:	53 81       	ldd	r21, Z+3	; 0x03
						ST_WORD(dir+DIR_FstClusLO, dw);
    47fe:	db 01       	movw	r26, r22
    4800:	5a 96       	adiw	r26, 0x1a	; 26
    4802:	2c 93       	st	X, r18
    4804:	5a 97       	sbiw	r26, 0x1a	; 26
    4806:	83 2f       	mov	r24, r19
    4808:	99 27       	eor	r25, r25
    480a:	5b 96       	adiw	r26, 0x1b	; 27
    480c:	8c 93       	st	X, r24
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    480e:	ca 01       	movw	r24, r20
    4810:	aa 27       	eor	r26, r26
    4812:	bb 27       	eor	r27, r27
    4814:	fb 01       	movw	r30, r22
    4816:	84 8b       	std	Z+20, r24	; 0x14
    4818:	89 2f       	mov	r24, r25
    481a:	99 27       	eor	r25, r25
    481c:	85 8b       	std	Z+21, r24	; 0x15
						dj_new.fs->wflag = 1;
    481e:	e8 ad       	ldd	r30, Y+56	; 0x38
    4820:	f9 ad       	ldd	r31, Y+57	; 0x39
    4822:	81 e0       	ldi	r24, 0x01	; 1
    4824:	84 83       	std	Z+4, r24	; 0x04
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
    4826:	ce 01       	movw	r24, r28
    4828:	82 96       	adiw	r24, 0x22	; 34
    482a:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <dir_remove>
				if (res == FR_OK)
    482e:	88 23       	and	r24, r24
    4830:	31 f4       	brne	.+12     	; 0x483e <f_rename+0x234>
					res = sync(dj_old.fs);
    4832:	8a a1       	ldd	r24, Y+34	; 0x22
    4834:	9b a1       	ldd	r25, Y+35	; 0x23
    4836:	0e 94 c0 08 	call	0x1180	; 0x1180 <sync>
    483a:	01 c0       	rjmp	.+2      	; 0x483e <f_rename+0x234>
    483c:	82 e0       	ldi	r24, 0x02	; 2
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
    483e:	c1 5b       	subi	r28, 0xB1	; 177
    4840:	df 4f       	sbci	r29, 0xFF	; 255
    4842:	cd bf       	out	0x3d, r28	; 61
    4844:	de bf       	out	0x3e, r29	; 62
    4846:	cf 91       	pop	r28
    4848:	df 91       	pop	r29
    484a:	1f 91       	pop	r17
    484c:	0f 91       	pop	r16
    484e:	ff 90       	pop	r15
    4850:	ef 90       	pop	r14
    4852:	df 90       	pop	r13
    4854:	cf 90       	pop	r12
    4856:	08 95       	ret

00004858 <f_gets>:
char* f_gets (
	char* buff,	/* Pointer to the string buffer to read */
	int len,	/* Size of string buffer */
	FIL* fil	/* Pointer to the file object */
)
{
    4858:	6f 92       	push	r6
    485a:	7f 92       	push	r7
    485c:	8f 92       	push	r8
    485e:	9f 92       	push	r9
    4860:	af 92       	push	r10
    4862:	bf 92       	push	r11
    4864:	cf 92       	push	r12
    4866:	df 92       	push	r13
    4868:	ef 92       	push	r14
    486a:	ff 92       	push	r15
    486c:	0f 93       	push	r16
    486e:	1f 93       	push	r17
    4870:	df 93       	push	r29
    4872:	cf 93       	push	r28
    4874:	0f 92       	push	r0
    4876:	0f 92       	push	r0
    4878:	cd b7       	in	r28, 0x3d	; 61
    487a:	de b7       	in	r29, 0x3e	; 62
    487c:	5c 01       	movw	r10, r24
    487e:	6b 01       	movw	r12, r22
    4880:	4a 01       	movw	r8, r20
    4882:	8c 01       	movw	r16, r24
    4884:	ee 24       	eor	r14, r14
    4886:	ff 24       	eor	r15, r15
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    4888:	08 94       	sec
    488a:	c1 08       	sbc	r12, r1
    488c:	d1 08       	sbc	r13, r1
		f_read(fil, p, 1, &rc);
    488e:	3e 01       	movw	r6, r28
    4890:	08 94       	sec
    4892:	61 1c       	adc	r6, r1
    4894:	71 1c       	adc	r7, r1
    4896:	13 c0       	rjmp	.+38     	; 0x48be <f_gets+0x66>
    4898:	c4 01       	movw	r24, r8
    489a:	b8 01       	movw	r22, r16
    489c:	41 e0       	ldi	r20, 0x01	; 1
    489e:	50 e0       	ldi	r21, 0x00	; 0
    48a0:	93 01       	movw	r18, r6
    48a2:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <f_read>
		if (rc != 1) break;			/* Break when no data to read */
    48a6:	89 81       	ldd	r24, Y+1	; 0x01
    48a8:	9a 81       	ldd	r25, Y+2	; 0x02
    48aa:	01 97       	sbiw	r24, 0x01	; 1
    48ac:	59 f4       	brne	.+22     	; 0x48c4 <f_gets+0x6c>
#if _USE_STRFUNC >= 2
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
    48ae:	08 94       	sec
    48b0:	e1 1c       	adc	r14, r1
    48b2:	f1 1c       	adc	r15, r1
		if (*p++ == '\n') break;	/* Break when reached end of line */
    48b4:	f8 01       	movw	r30, r16
    48b6:	81 91       	ld	r24, Z+
    48b8:	8f 01       	movw	r16, r30
    48ba:	8a 30       	cpi	r24, 0x0A	; 10
    48bc:	19 f0       	breq	.+6      	; 0x48c4 <f_gets+0x6c>
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    48be:	ec 14       	cp	r14, r12
    48c0:	fd 04       	cpc	r15, r13
    48c2:	54 f3       	brlt	.-44     	; 0x4898 <f_gets+0x40>
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
		if (*p++ == '\n') break;	/* Break when reached end of line */
	}
	*p = 0;
    48c4:	f8 01       	movw	r30, r16
    48c6:	10 82       	st	Z, r1
	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
    48c8:	ef 28       	or	r14, r15
    48ca:	11 f4       	brne	.+4      	; 0x48d0 <f_gets+0x78>
    48cc:	aa 24       	eor	r10, r10
    48ce:	bb 24       	eor	r11, r11
}
    48d0:	c5 01       	movw	r24, r10
    48d2:	0f 90       	pop	r0
    48d4:	0f 90       	pop	r0
    48d6:	cf 91       	pop	r28
    48d8:	df 91       	pop	r29
    48da:	1f 91       	pop	r17
    48dc:	0f 91       	pop	r16
    48de:	ff 90       	pop	r15
    48e0:	ef 90       	pop	r14
    48e2:	df 90       	pop	r13
    48e4:	cf 90       	pop	r12
    48e6:	bf 90       	pop	r11
    48e8:	af 90       	pop	r10
    48ea:	9f 90       	pop	r9
    48ec:	8f 90       	pop	r8
    48ee:	7f 90       	pop	r7
    48f0:	6f 90       	pop	r6
    48f2:	08 95       	ret

000048f4 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	int chr,	/* A character to be output */
	FIL* fil	/* Ponter to the file object */
)
{
    48f4:	0f 93       	push	r16
    48f6:	1f 93       	push	r17
    48f8:	df 93       	push	r29
    48fa:	cf 93       	push	r28
    48fc:	00 d0       	rcall	.+0      	; 0x48fe <f_putc+0xa>
    48fe:	cd b7       	in	r28, 0x3d	; 61
    4900:	de b7       	in	r29, 0x3e	; 62
    4902:	8c 01       	movw	r16, r24


#if _USE_STRFUNC >= 2
	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
#endif
	if (!fil) {	/* Special value may be used to switch the destination to any other device */
    4904:	61 15       	cp	r22, r1
    4906:	71 05       	cpc	r23, r1
    4908:	91 f0       	breq	.+36     	; 0x492e <f_putc+0x3a>
	/*	put_console(chr);	*/
		return chr;
	}
	c = (char)chr;
    490a:	89 83       	std	Y+1, r24	; 0x01
	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
    490c:	cb 01       	movw	r24, r22
    490e:	be 01       	movw	r22, r28
    4910:	6f 5f       	subi	r22, 0xFF	; 255
    4912:	7f 4f       	sbci	r23, 0xFF	; 255
    4914:	41 e0       	ldi	r20, 0x01	; 1
    4916:	50 e0       	ldi	r21, 0x00	; 0
    4918:	9e 01       	movw	r18, r28
    491a:	2e 5f       	subi	r18, 0xFE	; 254
    491c:	3f 4f       	sbci	r19, 0xFF	; 255
    491e:	0e 94 ca 18 	call	0x3194	; 0x3194 <f_write>
	return bw ? chr : EOF;		/* Return the result */
    4922:	8a 81       	ldd	r24, Y+2	; 0x02
    4924:	9b 81       	ldd	r25, Y+3	; 0x03
    4926:	89 2b       	or	r24, r25
    4928:	11 f4       	brne	.+4      	; 0x492e <f_putc+0x3a>
    492a:	0f ef       	ldi	r16, 0xFF	; 255
    492c:	1f ef       	ldi	r17, 0xFF	; 255
}
    492e:	c8 01       	movw	r24, r16
    4930:	23 96       	adiw	r28, 0x03	; 3
    4932:	cd bf       	out	0x3d, r28	; 61
    4934:	de bf       	out	0x3e, r29	; 62
    4936:	cf 91       	pop	r28
    4938:	df 91       	pop	r29
    493a:	1f 91       	pop	r17
    493c:	0f 91       	pop	r16
    493e:	08 95       	ret

00004940 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const char* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    4940:	ef 92       	push	r14
    4942:	ff 92       	push	r15
    4944:	0f 93       	push	r16
    4946:	1f 93       	push	r17
    4948:	cf 93       	push	r28
    494a:	df 93       	push	r29
    494c:	8c 01       	movw	r16, r24
    494e:	7b 01       	movw	r14, r22
    4950:	c0 e0       	ldi	r28, 0x00	; 0
    4952:	d0 e0       	ldi	r29, 0x00	; 0
    4954:	0d c0       	rjmp	.+26     	; 0x4970 <f_puts+0x30>
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	b7 01       	movw	r22, r14
    495a:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <f_putc>
    495e:	8f 5f       	subi	r24, 0xFF	; 255
    4960:	9f 4f       	sbci	r25, 0xFF	; 255
    4962:	19 f4       	brne	.+6      	; 0x496a <f_puts+0x2a>
    4964:	cf ef       	ldi	r28, 0xFF	; 255
    4966:	df ef       	ldi	r29, 0xFF	; 255
    4968:	07 c0       	rjmp	.+14     	; 0x4978 <f_puts+0x38>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    496a:	0f 5f       	subi	r16, 0xFF	; 255
    496c:	1f 4f       	sbci	r17, 0xFF	; 255
    496e:	21 96       	adiw	r28, 0x01	; 1
    4970:	f8 01       	movw	r30, r16
    4972:	80 81       	ld	r24, Z
    4974:	88 23       	and	r24, r24
    4976:	79 f7       	brne	.-34     	; 0x4956 <f_puts+0x16>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
    4978:	ce 01       	movw	r24, r28
    497a:	df 91       	pop	r29
    497c:	cf 91       	pop	r28
    497e:	1f 91       	pop	r17
    4980:	0f 91       	pop	r16
    4982:	ff 90       	pop	r15
    4984:	ef 90       	pop	r14
    4986:	08 95       	ret

00004988 <SD_Close>:
	Debug_SendString(string,true);
	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);	
}

void SD_Close(void){
	f_close(&Log_File);
    4988:	8a ee       	ldi	r24, 0xEA	; 234
    498a:	9e e3       	ldi	r25, 0x3E	; 62
    498c:	0e 94 86 1b 	call	0x370c	; 0x370c <f_close>
}
    4990:	08 95       	ret

00004992 <SD_Inserted>:

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    4992:	80 91 a8 06 	lds	r24, 0x06A8
    4996:	90 e0       	ldi	r25, 0x00	; 0
    4998:	80 ff       	sbrs	r24, 0
    499a:	91 e0       	ldi	r25, 0x01	; 1
		return false;
	} else {
		return true;
	}
}
    499c:	89 2f       	mov	r24, r25
    499e:	08 95       	ret

000049a0 <SD_WriteBuffer>:
            CRC = (CRC>>1) ^ (0xEDB88320 * (CRC & 1)) ; 
         } 
     } 
}

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    49a0:	6f 92       	push	r6
    49a2:	7f 92       	push	r7
    49a4:	8f 92       	push	r8
    49a6:	9f 92       	push	r9
    49a8:	bf 92       	push	r11
    49aa:	cf 92       	push	r12
    49ac:	df 92       	push	r13
    49ae:	ef 92       	push	r14
    49b0:	ff 92       	push	r15
    49b2:	0f 93       	push	r16
    49b4:	1f 93       	push	r17
    49b6:	df 93       	push	r29
    49b8:	cf 93       	push	r28
    49ba:	0f 92       	push	r0
    49bc:	0f 92       	push	r0
    49be:	cd b7       	in	r28, 0x3d	; 61
    49c0:	de b7       	in	r29, 0x3e	; 62
    49c2:	3c 01       	movw	r6, r24
    49c4:	4b 01       	movw	r8, r22
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);
    49c6:	8a ee       	ldi	r24, 0xEA	; 234
    49c8:	9e e3       	ldi	r25, 0x3E	; 62
    49ca:	b3 01       	movw	r22, r6
    49cc:	a4 01       	movw	r20, r8
    49ce:	9e 01       	movw	r18, r28
    49d0:	2f 5f       	subi	r18, 0xFF	; 255
    49d2:	3f 4f       	sbci	r19, 0xFF	; 255
    49d4:	0e 94 ca 18 	call	0x3194	; 0x3194 <f_write>
    49d8:	cc 24       	eor	r12, r12
    49da:	dd 24       	eor	r13, r13
    49dc:	4d c0       	rjmp	.+154    	; 0x4a78 <SD_WriteBuffer+0xd8>

    for (uint16_t i=0; i<length; i++)
      { 
      CRC = CRC ^ buffer[i] ; 
    49de:	20 91 69 44 	lds	r18, 0x4469
    49e2:	30 91 6a 44 	lds	r19, 0x446A
    49e6:	40 91 6b 44 	lds	r20, 0x446B
    49ea:	50 91 6c 44 	lds	r21, 0x446C
    49ee:	f3 01       	movw	r30, r6
    49f0:	ec 0d       	add	r30, r12
    49f2:	fd 1d       	adc	r31, r13
    49f4:	80 81       	ld	r24, Z
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	a0 e0       	ldi	r26, 0x00	; 0
    49fa:	b0 e0       	ldi	r27, 0x00	; 0
    49fc:	82 27       	eor	r24, r18
    49fe:	93 27       	eor	r25, r19
    4a00:	a4 27       	eor	r26, r20
    4a02:	b5 27       	eor	r27, r21
    4a04:	80 93 69 44 	sts	0x4469, r24
    4a08:	90 93 6a 44 	sts	0x446A, r25
    4a0c:	a0 93 6b 44 	sts	0x446B, r26
    4a10:	b0 93 6c 44 	sts	0x446C, r27
    4a14:	bb 24       	eor	r11, r11
      for (uint8_t j=0; j<8; j++) 
         { 
            CRC = (CRC>>1) ^ (0xEDB88320 * (CRC & 1)) ; 
    4a16:	e0 90 69 44 	lds	r14, 0x4469
    4a1a:	f0 90 6a 44 	lds	r15, 0x446A
    4a1e:	00 91 6b 44 	lds	r16, 0x446B
    4a22:	10 91 6c 44 	lds	r17, 0x446C
    4a26:	60 91 69 44 	lds	r22, 0x4469
    4a2a:	70 91 6a 44 	lds	r23, 0x446A
    4a2e:	80 91 6b 44 	lds	r24, 0x446B
    4a32:	90 91 6c 44 	lds	r25, 0x446C
    4a36:	61 70       	andi	r22, 0x01	; 1
    4a38:	70 70       	andi	r23, 0x00	; 0
    4a3a:	80 70       	andi	r24, 0x00	; 0
    4a3c:	90 70       	andi	r25, 0x00	; 0
    4a3e:	20 e2       	ldi	r18, 0x20	; 32
    4a40:	33 e8       	ldi	r19, 0x83	; 131
    4a42:	48 eb       	ldi	r20, 0xB8	; 184
    4a44:	5d ee       	ldi	r21, 0xED	; 237
    4a46:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    4a4a:	16 95       	lsr	r17
    4a4c:	07 95       	ror	r16
    4a4e:	f7 94       	ror	r15
    4a50:	e7 94       	ror	r14
    4a52:	e6 26       	eor	r14, r22
    4a54:	f7 26       	eor	r15, r23
    4a56:	08 27       	eor	r16, r24
    4a58:	19 27       	eor	r17, r25
    4a5a:	e0 92 69 44 	sts	0x4469, r14
    4a5e:	f0 92 6a 44 	sts	0x446A, r15
    4a62:	00 93 6b 44 	sts	0x446B, r16
    4a66:	10 93 6c 44 	sts	0x446C, r17
    f_write (&Log_File, buffer, length, &tmp);

    for (uint16_t i=0; i<length; i++)
      { 
      CRC = CRC ^ buffer[i] ; 
      for (uint8_t j=0; j<8; j++) 
    4a6a:	b3 94       	inc	r11
    4a6c:	88 e0       	ldi	r24, 0x08	; 8
    4a6e:	b8 16       	cp	r11, r24
    4a70:	91 f6       	brne	.-92     	; 0x4a16 <SD_WriteBuffer+0x76>

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);

    for (uint16_t i=0; i<length; i++)
    4a72:	08 94       	sec
    4a74:	c1 1c       	adc	r12, r1
    4a76:	d1 1c       	adc	r13, r1
    4a78:	c8 14       	cp	r12, r8
    4a7a:	d9 04       	cpc	r13, r9
    4a7c:	08 f4       	brcc	.+2      	; 0x4a80 <SD_WriteBuffer+0xe0>
    4a7e:	af cf       	rjmp	.-162    	; 0x49de <SD_WriteBuffer+0x3e>
      for (uint8_t j=0; j<8; j++) 
         { 
            CRC = (CRC>>1) ^ (0xEDB88320 * (CRC & 1)) ; 
         } 
     } 
}
    4a80:	0f 90       	pop	r0
    4a82:	0f 90       	pop	r0
    4a84:	cf 91       	pop	r28
    4a86:	df 91       	pop	r29
    4a88:	1f 91       	pop	r17
    4a8a:	0f 91       	pop	r16
    4a8c:	ff 90       	pop	r15
    4a8e:	ef 90       	pop	r14
    4a90:	df 90       	pop	r13
    4a92:	cf 90       	pop	r12
    4a94:	bf 90       	pop	r11
    4a96:	9f 90       	pop	r9
    4a98:	8f 90       	pop	r8
    4a9a:	7f 90       	pop	r7
    4a9c:	6f 90       	pop	r6
    4a9e:	08 95       	ret

00004aa0 <SD_Write32>:
	tmp16[1] = (uint8_t)(var >> 8);
	SD_WriteBuffer(tmp16,2);
}

void SD_Write32(uint32_t var){
	tmp32[0] = (uint8_t)(var >> 0);
    4aa0:	60 93 56 35 	sts	0x3556, r22
	tmp32[1] = (uint8_t)(var >> 8);
    4aa4:	27 2f       	mov	r18, r23
    4aa6:	38 2f       	mov	r19, r24
    4aa8:	49 2f       	mov	r20, r25
    4aaa:	55 27       	eor	r21, r21
    4aac:	20 93 57 35 	sts	0x3557, r18
	tmp32[2] = (uint8_t)(var >> 16);
    4ab0:	9c 01       	movw	r18, r24
    4ab2:	44 27       	eor	r20, r20
    4ab4:	55 27       	eor	r21, r21
    4ab6:	20 93 58 35 	sts	0x3558, r18
	tmp32[3] = (uint8_t)(var >> 24);
    4aba:	69 2f       	mov	r22, r25
    4abc:	77 27       	eor	r23, r23
    4abe:	88 27       	eor	r24, r24
    4ac0:	99 27       	eor	r25, r25
    4ac2:	60 93 59 35 	sts	0x3559, r22
	SD_WriteBuffer(tmp32,4);
    4ac6:	86 e5       	ldi	r24, 0x56	; 86
    4ac8:	95 e3       	ldi	r25, 0x35	; 53
    4aca:	64 e0       	ldi	r22, 0x04	; 4
    4acc:	70 e0       	ldi	r23, 0x00	; 0
    4ace:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <SD_WriteBuffer>
}
    4ad2:	08 95       	ret

00004ad4 <SD_Write16>:
	tmp8[0] = (uint8_t)var;
	SD_WriteBuffer(tmp8,1);
}

void SD_Write16(uint16_t var){
	tmp16[0] = (uint8_t)(var >> 0);
    4ad4:	80 93 11 49 	sts	0x4911, r24
	tmp16[1] = (uint8_t)(var >> 8);
    4ad8:	90 93 12 49 	sts	0x4912, r25
	SD_WriteBuffer(tmp16,2);
    4adc:	81 e1       	ldi	r24, 0x11	; 17
    4ade:	99 e4       	ldi	r25, 0x49	; 73
    4ae0:	62 e0       	ldi	r22, 0x02	; 2
    4ae2:	70 e0       	ldi	r23, 0x00	; 0
    4ae4:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <SD_WriteBuffer>
}
    4ae8:	08 95       	ret

00004aea <SD_Write8>:
	}
}

void SD_Write8(uint8_t var){

	tmp8[0] = (uint8_t)var;
    4aea:	80 93 e0 3a 	sts	0x3AE0, r24
	SD_WriteBuffer(tmp8,1);
    4aee:	80 ee       	ldi	r24, 0xE0	; 224
    4af0:	9a e3       	ldi	r25, 0x3A	; 58
    4af2:	61 e0       	ldi	r22, 0x01	; 1
    4af4:	70 e0       	ldi	r23, 0x00	; 0
    4af6:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <SD_WriteBuffer>
}
    4afa:	08 95       	ret

00004afc <SD_ClearCRC>:
         } 
     } 
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    4afc:	8f ef       	ldi	r24, 0xFF	; 255
    4afe:	9f ef       	ldi	r25, 0xFF	; 255
    4b00:	af ef       	ldi	r26, 0xFF	; 255
    4b02:	bf ef       	ldi	r27, 0xFF	; 255
    4b04:	80 93 69 44 	sts	0x4469, r24
    4b08:	90 93 6a 44 	sts	0x446A, r25
    4b0c:	a0 93 6b 44 	sts	0x446B, r26
    4b10:	b0 93 6c 44 	sts	0x446C, r27
}
    4b14:	08 95       	ret

00004b16 <SD_WriteCRC>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
    4b16:	60 91 69 44 	lds	r22, 0x4469
    4b1a:	70 91 6a 44 	lds	r23, 0x446A
    4b1e:	80 91 6b 44 	lds	r24, 0x446B
    4b22:	90 91 6c 44 	lds	r25, 0x446C
    4b26:	60 95       	com	r22
    4b28:	70 95       	com	r23
    4b2a:	80 95       	com	r24
    4b2c:	90 95       	com	r25
    4b2e:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
}
    4b32:	08 95       	ret

00004b34 <SD_Timer_Init>:
	// div  = 256
	// per  = 576
	// => 14745600/256/576 => 100 samples per second
	
	// Set period/TOP value
	TCE0.PER = 576;
    4b34:	e0 e0       	ldi	r30, 0x00	; 0
    4b36:	fa e0       	ldi	r31, 0x0A	; 10
    4b38:	80 e4       	ldi	r24, 0x40	; 64
    4b3a:	92 e0       	ldi	r25, 0x02	; 2
    4b3c:	86 a3       	std	Z+38, r24	; 0x26
    4b3e:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCE0.CTRLA = (TCE0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV256_gc;
    4b40:	80 81       	ld	r24, Z
    4b42:	80 7f       	andi	r24, 0xF0	; 240
    4b44:	86 60       	ori	r24, 0x06	; 6
    4b46:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	TCE0.INTCTRLA = (TCE0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    4b48:	86 81       	ldd	r24, Z+6	; 0x06
    4b4a:	8c 7f       	andi	r24, 0xFC	; 252
    4b4c:	82 60       	ori	r24, 0x02	; 2
    4b4e:	86 83       	std	Z+6, r24	; 0x06
	
}
    4b50:	08 95       	ret

00004b52 <SD_Init>:
volatile uint32_t CRC;



void SD_Init(void){
	SD_CD_Port.SD_CD_CNTL = PORT_OPC_PULLUP_gc;
    4b52:	88 e1       	ldi	r24, 0x18	; 24
    4b54:	e0 ea       	ldi	r30, 0xA0	; 160
    4b56:	f6 e0       	ldi	r31, 0x06	; 6
    4b58:	80 8b       	std	Z+16, r24	; 0x10
	SD_Timer_Init();
    4b5a:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <SD_Timer_Init>
	disk_initialize(0);
    4b5e:	80 e0       	ldi	r24, 0x00	; 0
    4b60:	0e 94 76 04 	call	0x8ec	; 0x8ec <disk_initialize>
	f_mount(0, &file_system_object);
    4b64:	80 e0       	ldi	r24, 0x00	; 0
    4b66:	61 e2       	ldi	r22, 0x21	; 33
    4b68:	7a e2       	ldi	r23, 0x2A	; 42
    4b6a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <f_mount>
}
    4b6e:	08 95       	ret

00004b70 <__vector_47>:
}


// Called every 10 ms (100 Hz)
ISR(TCE0_OVF_vect)
{
    4b70:	1f 92       	push	r1
    4b72:	0f 92       	push	r0
    4b74:	0f b6       	in	r0, 0x3f	; 63
    4b76:	0f 92       	push	r0
    4b78:	0b b6       	in	r0, 0x3b	; 59
    4b7a:	0f 92       	push	r0
    4b7c:	11 24       	eor	r1, r1
    4b7e:	2f 93       	push	r18
    4b80:	3f 93       	push	r19
    4b82:	4f 93       	push	r20
    4b84:	5f 93       	push	r21
    4b86:	6f 93       	push	r22
    4b88:	7f 93       	push	r23
    4b8a:	8f 93       	push	r24
    4b8c:	9f 93       	push	r25
    4b8e:	af 93       	push	r26
    4b90:	bf 93       	push	r27
    4b92:	ef 93       	push	r30
    4b94:	ff 93       	push	r31
	disk_timerproc();
    4b96:	0e 94 2e 08 	call	0x105c	; 0x105c <disk_timerproc>
}
    4b9a:	ff 91       	pop	r31
    4b9c:	ef 91       	pop	r30
    4b9e:	bf 91       	pop	r27
    4ba0:	af 91       	pop	r26
    4ba2:	9f 91       	pop	r25
    4ba4:	8f 91       	pop	r24
    4ba6:	7f 91       	pop	r23
    4ba8:	6f 91       	pop	r22
    4baa:	5f 91       	pop	r21
    4bac:	4f 91       	pop	r20
    4bae:	3f 91       	pop	r19
    4bb0:	2f 91       	pop	r18
    4bb2:	0f 90       	pop	r0
    4bb4:	0b be       	out	0x3b, r0	; 59
    4bb6:	0f 90       	pop	r0
    4bb8:	0f be       	out	0x3f, r0	; 63
    4bba:	0f 90       	pop	r0
    4bbc:	1f 90       	pop	r1
    4bbe:	18 95       	reti

00004bc0 <CCPWrite>:



// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    4bc0:	0f 93       	push	r16
    4bc2:	df 93       	push	r29
    4bc4:	cf 93       	push	r28
    4bc6:	0f 92       	push	r0
    4bc8:	cd b7       	in	r28, 0x3d	; 61
    4bca:	de b7       	in	r29, 0x3e	; 62
    uint8_t volatile saved_sreg = SREG;
    4bcc:	2f b7       	in	r18, 0x3f	; 63
    4bce:	29 83       	std	Y+1, r18	; 0x01
    cli();
    4bd0:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    4bd2:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    4bd4:	fc 01       	movw	r30, r24
    4bd6:	08 ed       	ldi	r16, 0xD8	; 216
    4bd8:	04 bf       	out	0x34, r16	; 52
    4bda:	60 83       	st	Z, r22
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    4bdc:	89 81       	ldd	r24, Y+1	; 0x01
    4bde:	8f bf       	out	0x3f, r24	; 63
}
    4be0:	0f 90       	pop	r0
    4be2:	cf 91       	pop	r28
    4be4:	df 91       	pop	r29
    4be6:	0f 91       	pop	r16
    4be8:	08 95       	ret

00004bea <display_sendCommand>:
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4bea:	94 e0       	ldi	r25, 0x04	; 4
    4bec:	e0 e2       	ldi	r30, 0x20	; 32
    4bee:	f6 e0       	ldi	r31, 0x06	; 6
    4bf0:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    4bf2:	e0 ec       	ldi	r30, 0xC0	; 192
    4bf4:	f8 e0       	ldi	r31, 0x08	; 8
    4bf6:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4bf8:	80 91 c2 08 	lds	r24, 0x08C2
    4bfc:	87 ff       	sbrs	r24, 7
    4bfe:	fc cf       	rjmp	.-8      	; 0x4bf8 <display_sendCommand+0xe>
}
    4c00:	08 95       	ret

00004c02 <display_sendData>:

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    4c02:	94 e0       	ldi	r25, 0x04	; 4
    4c04:	e0 e2       	ldi	r30, 0x20	; 32
    4c06:	f6 e0       	ldi	r31, 0x06	; 6
    4c08:	95 83       	std	Z+5, r25	; 0x05
	Display_SPI.DATA = dataByte;
    4c0a:	e0 ec       	ldi	r30, 0xC0	; 192
    4c0c:	f8 e0       	ldi	r31, 0x08	; 8
    4c0e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4c10:	80 91 c2 08 	lds	r24, 0x08C2
    4c14:	87 ff       	sbrs	r24, 7
    4c16:	fc cf       	rjmp	.-8      	; 0x4c10 <display_sendData+0xe>
}
    4c18:	08 95       	ret

00004c1a <display_setCursor>:



void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
    4c1a:	80 6b       	ori	r24, 0xB0	; 176
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4c1c:	94 e0       	ldi	r25, 0x04	; 4
    4c1e:	e0 e2       	ldi	r30, 0x20	; 32
    4c20:	f6 e0       	ldi	r31, 0x06	; 6
    4c22:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    4c24:	e0 ec       	ldi	r30, 0xC0	; 192
    4c26:	f8 e0       	ldi	r31, 0x08	; 8
    4c28:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4c2a:	80 91 c2 08 	lds	r24, 0x08C2
    4c2e:	87 ff       	sbrs	r24, 7
    4c30:	fc cf       	rjmp	.-8      	; 0x4c2a <display_setCursor+0x10>

void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
    4c32:	96 2f       	mov	r25, r22
    4c34:	9f 70       	andi	r25, 0x0F	; 15
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4c36:	84 e0       	ldi	r24, 0x04	; 4
    4c38:	e0 e2       	ldi	r30, 0x20	; 32
    4c3a:	f6 e0       	ldi	r31, 0x06	; 6
    4c3c:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4c3e:	e0 ec       	ldi	r30, 0xC0	; 192
    4c40:	f8 e0       	ldi	r31, 0x08	; 8
    4c42:	93 83       	std	Z+3, r25	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4c44:	80 91 c2 08 	lds	r24, 0x08C2
    4c48:	87 ff       	sbrs	r24, 7
    4c4a:	fc cf       	rjmp	.-8      	; 0x4c44 <display_setCursor+0x2a>
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
    4c4c:	62 95       	swap	r22
    4c4e:	6f 70       	andi	r22, 0x0F	; 15
    4c50:	60 61       	ori	r22, 0x10	; 16
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4c52:	84 e0       	ldi	r24, 0x04	; 4
    4c54:	e0 e2       	ldi	r30, 0x20	; 32
    4c56:	f6 e0       	ldi	r31, 0x06	; 6
    4c58:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4c5a:	e0 ec       	ldi	r30, 0xC0	; 192
    4c5c:	f8 e0       	ldi	r31, 0x08	; 8
    4c5e:	63 83       	std	Z+3, r22	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4c60:	80 91 c2 08 	lds	r24, 0x08C2
    4c64:	87 ff       	sbrs	r24, 7
    4c66:	fc cf       	rjmp	.-8      	; 0x4c60 <display_setCursor+0x46>
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
}
    4c68:	08 95       	ret

00004c6a <display_writeBufferToScreen>:


void display_writeBufferToScreen(void) {
    4c6a:	bf 92       	push	r11
    4c6c:	cf 92       	push	r12
    4c6e:	df 92       	push	r13
    4c70:	ef 92       	push	r14
    4c72:	ff 92       	push	r15
    4c74:	0f 93       	push	r16
    4c76:	1f 93       	push	r17
    4c78:	cf 93       	push	r28
    4c7a:	df 93       	push	r29
    4c7c:	c0 e0       	ldi	r28, 0x00	; 0
    4c7e:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
    4c80:	76 e6       	ldi	r23, 0x66	; 102
    4c82:	c7 2e       	mov	r12, r23
    4c84:	d1 2c       	mov	r13, r1
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    4c86:	60 e2       	ldi	r22, 0x20	; 32
    4c88:	e6 2e       	mov	r14, r22
    4c8a:	66 e0       	ldi	r22, 0x06	; 6
    4c8c:	f6 2e       	mov	r15, r22
    4c8e:	54 e0       	ldi	r21, 0x04	; 4
    4c90:	b5 2e       	mov	r11, r21
	Display_SPI.DATA = dataByte;
    4c92:	00 ec       	ldi	r16, 0xC0	; 192
    4c94:	18 e0       	ldi	r17, 0x08	; 8


void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
    4c96:	8c 2f       	mov	r24, r28
    4c98:	60 e0       	ldi	r22, 0x00	; 0
    4c9a:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <display_setCursor>
    4c9e:	20 e0       	ldi	r18, 0x00	; 0
    4ca0:	30 e0       	ldi	r19, 0x00	; 0
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
    4ca2:	cc 9d       	mul	r28, r12
    4ca4:	a0 01       	movw	r20, r0
    4ca6:	cd 9d       	mul	r28, r13
    4ca8:	50 0d       	add	r21, r0
    4caa:	dc 9d       	mul	r29, r12
    4cac:	50 0d       	add	r21, r0
    4cae:	11 24       	eor	r1, r1
    4cb0:	fa 01       	movw	r30, r20
    4cb2:	e2 0f       	add	r30, r18
    4cb4:	f3 1f       	adc	r31, r19
    4cb6:	e7 5c       	subi	r30, 0xC7	; 199
    4cb8:	fe 4b       	sbci	r31, 0xBE	; 190
    4cba:	80 81       	ld	r24, Z
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    4cbc:	f7 01       	movw	r30, r14
    4cbe:	b5 82       	std	Z+5, r11	; 0x05
	Display_SPI.DATA = dataByte;
    4cc0:	f8 01       	movw	r30, r16
    4cc2:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4cc4:	80 91 c2 08 	lds	r24, 0x08C2
    4cc8:	87 ff       	sbrs	r24, 7
    4cca:	fc cf       	rjmp	.-8      	; 0x4cc4 <display_writeBufferToScreen+0x5a>
    4ccc:	2f 5f       	subi	r18, 0xFF	; 255
    4cce:	3f 4f       	sbci	r19, 0xFF	; 255

void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
    4cd0:	26 36       	cpi	r18, 0x66	; 102
    4cd2:	31 05       	cpc	r19, r1
    4cd4:	69 f7       	brne	.-38     	; 0x4cb0 <display_writeBufferToScreen+0x46>
    4cd6:	21 96       	adiw	r28, 0x01	; 1
}


void display_writeBufferToScreen(void) {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
    4cd8:	c8 30       	cpi	r28, 0x08	; 8
    4cda:	d1 05       	cpc	r29, r1
    4cdc:	e1 f6       	brne	.-72     	; 0x4c96 <display_writeBufferToScreen+0x2c>
		display_setCursor(i,0);
		for (j = 0; j < DISPLAY_COLS; j++) {
			display_sendData(displayBuffer[i][j]);
		}
	}	
}
    4cde:	df 91       	pop	r29
    4ce0:	cf 91       	pop	r28
    4ce2:	1f 91       	pop	r17
    4ce4:	0f 91       	pop	r16
    4ce6:	ff 90       	pop	r15
    4ce8:	ef 90       	pop	r14
    4cea:	df 90       	pop	r13
    4cec:	cf 90       	pop	r12
    4cee:	bf 90       	pop	r11
    4cf0:	08 95       	ret

00004cf2 <display_clearPage>:


void display_clearPage(uint8_t page) {
    4cf2:	40 e0       	ldi	r20, 0x00	; 0
    4cf4:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t j;
	for (j = 0; j < DISPLAY_COLS; j++) displayBuffer[page][j] = 0x0A;
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	26 e6       	ldi	r18, 0x66	; 102
    4cfa:	30 e0       	ldi	r19, 0x00	; 0
    4cfc:	82 9f       	mul	r24, r18
    4cfe:	b0 01       	movw	r22, r0
    4d00:	83 9f       	mul	r24, r19
    4d02:	70 0d       	add	r23, r0
    4d04:	92 9f       	mul	r25, r18
    4d06:	70 0d       	add	r23, r0
    4d08:	11 24       	eor	r1, r1
    4d0a:	8a e0       	ldi	r24, 0x0A	; 10
    4d0c:	fb 01       	movw	r30, r22
    4d0e:	e4 0f       	add	r30, r20
    4d10:	f5 1f       	adc	r31, r21
    4d12:	e7 5c       	subi	r30, 0xC7	; 199
    4d14:	fe 4b       	sbci	r31, 0xBE	; 190
    4d16:	80 83       	st	Z, r24
    4d18:	4f 5f       	subi	r20, 0xFF	; 255
    4d1a:	5f 4f       	sbci	r21, 0xFF	; 255
    4d1c:	46 36       	cpi	r20, 0x66	; 102
    4d1e:	51 05       	cpc	r21, r1
    4d20:	a9 f7       	brne	.-22     	; 0x4d0c <display_clearPage+0x1a>
}
    4d22:	08 95       	ret

00004d24 <display_clearBuffer>:


void display_clearBuffer() {
    4d24:	20 e0       	ldi	r18, 0x00	; 0
    4d26:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
			displayBuffer[i][j] = 0x00;
    4d28:	66 e6       	ldi	r22, 0x66	; 102
    4d2a:	70 e0       	ldi	r23, 0x00	; 0
    4d2c:	0f c0       	rjmp	.+30     	; 0x4d4c <display_clearBuffer+0x28>
    4d2e:	fa 01       	movw	r30, r20
    4d30:	e8 0f       	add	r30, r24
    4d32:	f9 1f       	adc	r31, r25
    4d34:	e7 5c       	subi	r30, 0xC7	; 199
    4d36:	fe 4b       	sbci	r31, 0xBE	; 190
    4d38:	10 82       	st	Z, r1
    4d3a:	01 96       	adiw	r24, 0x01	; 1


void display_clearBuffer() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
    4d3c:	86 36       	cpi	r24, 0x66	; 102
    4d3e:	91 05       	cpc	r25, r1
    4d40:	b1 f7       	brne	.-20     	; 0x4d2e <display_clearBuffer+0xa>
    4d42:	2f 5f       	subi	r18, 0xFF	; 255
    4d44:	3f 4f       	sbci	r19, 0xFF	; 255
}


void display_clearBuffer() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
    4d46:	28 30       	cpi	r18, 0x08	; 8
    4d48:	31 05       	cpc	r19, r1
    4d4a:	51 f0       	breq	.+20     	; 0x4d60 <display_clearBuffer+0x3c>
    4d4c:	80 e0       	ldi	r24, 0x00	; 0
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
		for (j = 0; j < DISPLAY_COLS; j++) {
			displayBuffer[i][j] = 0x00;
    4d50:	26 9f       	mul	r18, r22
    4d52:	a0 01       	movw	r20, r0
    4d54:	27 9f       	mul	r18, r23
    4d56:	50 0d       	add	r21, r0
    4d58:	36 9f       	mul	r19, r22
    4d5a:	50 0d       	add	r21, r0
    4d5c:	11 24       	eor	r1, r1
    4d5e:	e7 cf       	rjmp	.-50     	; 0x4d2e <display_clearBuffer+0xa>
    4d60:	08 95       	ret

00004d62 <display_init>:
#define DISPLAY_PAGES		(DISPLAY_ROWS/8)

volatile uint8_t displayBuffer[DISPLAY_PAGES][DISPLAY_COLS];


void display_init() {
    4d62:	cf 93       	push	r28
    4d64:	df 93       	push	r29
	//Set SS to wired and pull up
	Display_Port.Display_SS_CTRL = PORT_OPC_WIREDANDPULL_gc;
    4d66:	40 e4       	ldi	r20, 0x40	; 64
    4d68:	56 e0       	ldi	r21, 0x06	; 6
    4d6a:	88 e3       	ldi	r24, 0x38	; 56
    4d6c:	fa 01       	movw	r30, r20
    4d6e:	84 8b       	std	Z+20, r24	; 0x14
	Display_CDPort.Display_CD_CTRL = PORT_OPC_WIREDANDPULL_gc;
    4d70:	a0 e2       	ldi	r26, 0x20	; 32
    4d72:	b6 e0       	ldi	r27, 0x06	; 6
    4d74:	53 96       	adiw	r26, 0x13	; 19
    4d76:	8c 93       	st	X, r24
    4d78:	53 97       	sbiw	r26, 0x13	; 19

	
	Display_ResetPort.DIRSET = Display_Reset_bm;
    4d7a:	e0 e6       	ldi	r30, 0x60	; 96
    4d7c:	f6 e0       	ldi	r31, 0x06	; 6
    4d7e:	21 e0       	ldi	r18, 0x01	; 1
    4d80:	21 83       	std	Z+1, r18	; 0x01

	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    4d82:	25 83       	std	Z+5, r18	; 0x05
    4d84:	80 e0       	ldi	r24, 0x00	; 0
    4d86:	90 e9       	ldi	r25, 0x90	; 144
    4d88:	ec 01       	movw	r28, r24
    4d8a:	21 97       	sbiw	r28, 0x01	; 1
    4d8c:	f1 f7       	brne	.-4      	; 0x4d8a <display_init+0x28>

	_delay_ms(10);
	Display_ResetPort.OUTCLR = Display_Reset_bm; 	// reset
    4d8e:	26 83       	std	Z+6, r18	; 0x06
    4d90:	ec 01       	movw	r28, r24
    4d92:	21 97       	sbiw	r28, 0x01	; 1
    4d94:	f1 f7       	brne	.-4      	; 0x4d92 <display_init+0x30>

	_delay_ms(10);
	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    4d96:	25 83       	std	Z+5, r18	; 0x05
    4d98:	01 97       	sbiw	r24, 0x01	; 1
    4d9a:	f1 f7       	brne	.-4      	; 0x4d98 <display_init+0x36>

	_delay_ms(10);
	//Double clock, enable SPI, MSB sent first, set as master, mode 3, clk/16
	Display_SPI.CTRL = SPI_CLK2X_bm 
    4d9c:	8e ed       	ldi	r24, 0xDE	; 222
    4d9e:	80 93 c0 08 	sts	0x08C0, r24
				| SPI_ENABLE_bm 
				| SPI_MASTER_bm 
				| SPI_MODE_3_gc 
				| SPI_PRESCALER_DIV64_gc; //Can be 4, 16, 64 or 128

	Display_Port.DIRSET = Display_MOSI_bm | Display_SCK_bm | Display_SS_bm;
    4da2:	80 eb       	ldi	r24, 0xB0	; 176
    4da4:	fa 01       	movw	r30, r20
    4da6:	81 83       	std	Z+1, r24	; 0x01
	Display_CDPort.DIRSET = Display_CD_bm;
    4da8:	94 e0       	ldi	r25, 0x04	; 4
    4daa:	11 96       	adiw	r26, 0x01	; 1
    4dac:	9c 93       	st	X, r25
    4dae:	11 97       	sbiw	r26, 0x01	; 1



	
	//Enable display (write a 0 to SS)
	Display_Port.OUTCLR = Display_SS_bm;
    4db0:	80 e1       	ldi	r24, 0x10	; 16
    4db2:	86 83       	std	Z+6, r24	; 0x06
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4db4:	16 96       	adiw	r26, 0x06	; 6
    4db6:	9c 93       	st	X, r25
	Display_SPI.DATA = dataByte;
    4db8:	80 e4       	ldi	r24, 0x40	; 64
    4dba:	e0 ec       	ldi	r30, 0xC0	; 192
    4dbc:	f8 e0       	ldi	r31, 0x08	; 8
    4dbe:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4dc0:	80 91 c2 08 	lds	r24, 0x08C2
    4dc4:	87 ff       	sbrs	r24, 7
    4dc6:	fc cf       	rjmp	.-8      	; 0x4dc0 <display_init+0x5e>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4dc8:	84 e0       	ldi	r24, 0x04	; 4
    4dca:	e0 e2       	ldi	r30, 0x20	; 32
    4dcc:	f6 e0       	ldi	r31, 0x06	; 6
    4dce:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4dd0:	81 ea       	ldi	r24, 0xA1	; 161
    4dd2:	e0 ec       	ldi	r30, 0xC0	; 192
    4dd4:	f8 e0       	ldi	r31, 0x08	; 8
    4dd6:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4dd8:	80 91 c2 08 	lds	r24, 0x08C2
    4ddc:	87 ff       	sbrs	r24, 7
    4dde:	fc cf       	rjmp	.-8      	; 0x4dd8 <display_init+0x76>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4de0:	84 e0       	ldi	r24, 0x04	; 4
    4de2:	e0 e2       	ldi	r30, 0x20	; 32
    4de4:	f6 e0       	ldi	r31, 0x06	; 6
    4de6:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4de8:	80 ec       	ldi	r24, 0xC0	; 192
    4dea:	e0 ec       	ldi	r30, 0xC0	; 192
    4dec:	f8 e0       	ldi	r31, 0x08	; 8
    4dee:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4df0:	80 91 c2 08 	lds	r24, 0x08C2
    4df4:	87 ff       	sbrs	r24, 7
    4df6:	fc cf       	rjmp	.-8      	; 0x4df0 <display_init+0x8e>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4df8:	84 e0       	ldi	r24, 0x04	; 4
    4dfa:	e0 e2       	ldi	r30, 0x20	; 32
    4dfc:	f6 e0       	ldi	r31, 0x06	; 6
    4dfe:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4e00:	84 ea       	ldi	r24, 0xA4	; 164
    4e02:	e0 ec       	ldi	r30, 0xC0	; 192
    4e04:	f8 e0       	ldi	r31, 0x08	; 8
    4e06:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4e08:	80 91 c2 08 	lds	r24, 0x08C2
    4e0c:	87 ff       	sbrs	r24, 7
    4e0e:	fc cf       	rjmp	.-8      	; 0x4e08 <display_init+0xa6>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4e10:	84 e0       	ldi	r24, 0x04	; 4
    4e12:	e0 e2       	ldi	r30, 0x20	; 32
    4e14:	f6 e0       	ldi	r31, 0x06	; 6
    4e16:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4e18:	86 ea       	ldi	r24, 0xA6	; 166
    4e1a:	e0 ec       	ldi	r30, 0xC0	; 192
    4e1c:	f8 e0       	ldi	r31, 0x08	; 8
    4e1e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4e20:	80 91 c2 08 	lds	r24, 0x08C2
    4e24:	87 ff       	sbrs	r24, 7
    4e26:	fc cf       	rjmp	.-8      	; 0x4e20 <display_init+0xbe>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4e28:	84 e0       	ldi	r24, 0x04	; 4
    4e2a:	e0 e2       	ldi	r30, 0x20	; 32
    4e2c:	f6 e0       	ldi	r31, 0x06	; 6
    4e2e:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4e30:	8f e2       	ldi	r24, 0x2F	; 47
    4e32:	e0 ec       	ldi	r30, 0xC0	; 192
    4e34:	f8 e0       	ldi	r31, 0x08	; 8
    4e36:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4e38:	80 91 c2 08 	lds	r24, 0x08C2
    4e3c:	87 ff       	sbrs	r24, 7
    4e3e:	fc cf       	rjmp	.-8      	; 0x4e38 <display_init+0xd6>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4e40:	84 e0       	ldi	r24, 0x04	; 4
    4e42:	e0 e2       	ldi	r30, 0x20	; 32
    4e44:	f6 e0       	ldi	r31, 0x06	; 6
    4e46:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4e48:	87 e2       	ldi	r24, 0x27	; 39
    4e4a:	e0 ec       	ldi	r30, 0xC0	; 192
    4e4c:	f8 e0       	ldi	r31, 0x08	; 8
    4e4e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4e50:	80 91 c2 08 	lds	r24, 0x08C2
    4e54:	87 ff       	sbrs	r24, 7
    4e56:	fc cf       	rjmp	.-8      	; 0x4e50 <display_init+0xee>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4e58:	84 e0       	ldi	r24, 0x04	; 4
    4e5a:	e0 e2       	ldi	r30, 0x20	; 32
    4e5c:	f6 e0       	ldi	r31, 0x06	; 6
    4e5e:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4e60:	8a ef       	ldi	r24, 0xFA	; 250
    4e62:	e0 ec       	ldi	r30, 0xC0	; 192
    4e64:	f8 e0       	ldi	r31, 0x08	; 8
    4e66:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4e68:	80 91 c2 08 	lds	r24, 0x08C2
    4e6c:	87 ff       	sbrs	r24, 7
    4e6e:	fc cf       	rjmp	.-8      	; 0x4e68 <display_init+0x106>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4e70:	84 e0       	ldi	r24, 0x04	; 4
    4e72:	e0 e2       	ldi	r30, 0x20	; 32
    4e74:	f6 e0       	ldi	r31, 0x06	; 6
    4e76:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4e78:	80 e9       	ldi	r24, 0x90	; 144
    4e7a:	e0 ec       	ldi	r30, 0xC0	; 192
    4e7c:	f8 e0       	ldi	r31, 0x08	; 8
    4e7e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4e80:	80 91 c2 08 	lds	r24, 0x08C2
    4e84:	87 ff       	sbrs	r24, 7
    4e86:	fc cf       	rjmp	.-8      	; 0x4e80 <display_init+0x11e>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4e88:	84 e0       	ldi	r24, 0x04	; 4
    4e8a:	e0 e2       	ldi	r30, 0x20	; 32
    4e8c:	f6 e0       	ldi	r31, 0x06	; 6
    4e8e:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4e90:	80 e4       	ldi	r24, 0x40	; 64
    4e92:	e0 ec       	ldi	r30, 0xC0	; 192
    4e94:	f8 e0       	ldi	r31, 0x08	; 8
    4e96:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4e98:	80 91 c2 08 	lds	r24, 0x08C2
    4e9c:	87 ff       	sbrs	r24, 7
    4e9e:	fc cf       	rjmp	.-8      	; 0x4e98 <display_init+0x136>
    4ea0:	8c ed       	ldi	r24, 0xDC	; 220
    4ea2:	95 e0       	ldi	r25, 0x05	; 5
    4ea4:	20 e7       	ldi	r18, 0x70	; 112
    4ea6:	31 e0       	ldi	r19, 0x01	; 1
    4ea8:	f9 01       	movw	r30, r18
    4eaa:	31 97       	sbiw	r30, 0x01	; 1
    4eac:	f1 f7       	brne	.-4      	; 0x4eaa <display_init+0x148>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eb0:	d9 f7       	brne	.-10     	; 0x4ea8 <display_init+0x146>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4eb2:	84 e0       	ldi	r24, 0x04	; 4
    4eb4:	e0 e2       	ldi	r30, 0x20	; 32
    4eb6:	f6 e0       	ldi	r31, 0x06	; 6
    4eb8:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4eba:	82 ea       	ldi	r24, 0xA2	; 162
    4ebc:	e0 ec       	ldi	r30, 0xC0	; 192
    4ebe:	f8 e0       	ldi	r31, 0x08	; 8
    4ec0:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4ec2:	80 91 c2 08 	lds	r24, 0x08C2
    4ec6:	87 ff       	sbrs	r24, 7
    4ec8:	fc cf       	rjmp	.-8      	; 0x4ec2 <display_init+0x160>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4eca:	84 e0       	ldi	r24, 0x04	; 4
    4ecc:	e0 e2       	ldi	r30, 0x20	; 32
    4ece:	f6 e0       	ldi	r31, 0x06	; 6
    4ed0:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4ed2:	81 e8       	ldi	r24, 0x81	; 129
    4ed4:	e0 ec       	ldi	r30, 0xC0	; 192
    4ed6:	f8 e0       	ldi	r31, 0x08	; 8
    4ed8:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4eda:	80 91 c2 08 	lds	r24, 0x08C2
    4ede:	87 ff       	sbrs	r24, 7
    4ee0:	fc cf       	rjmp	.-8      	; 0x4eda <display_init+0x178>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4ee2:	84 e0       	ldi	r24, 0x04	; 4
    4ee4:	e0 e2       	ldi	r30, 0x20	; 32
    4ee6:	f6 e0       	ldi	r31, 0x06	; 6
    4ee8:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4eea:	88 e0       	ldi	r24, 0x08	; 8
    4eec:	e0 ec       	ldi	r30, 0xC0	; 192
    4eee:	f8 e0       	ldi	r31, 0x08	; 8
    4ef0:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4ef2:	80 91 c2 08 	lds	r24, 0x08C2
    4ef6:	87 ff       	sbrs	r24, 7
    4ef8:	fc cf       	rjmp	.-8      	; 0x4ef2 <display_init+0x190>
	display_writeBufferToScreen();
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    4efa:	84 e0       	ldi	r24, 0x04	; 4
    4efc:	e0 e2       	ldi	r30, 0x20	; 32
    4efe:	f6 e0       	ldi	r31, 0x06	; 6
    4f00:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    4f02:	8f ea       	ldi	r24, 0xAF	; 175
    4f04:	e0 ec       	ldi	r30, 0xC0	; 192
    4f06:	f8 e0       	ldi	r31, 0x08	; 8
    4f08:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    4f0a:	80 91 c2 08 	lds	r24, 0x08C2
    4f0e:	87 ff       	sbrs	r24, 7
    4f10:	fc cf       	rjmp	.-8      	; 0x4f0a <display_init+0x1a8>




	
	display_clearBuffer();
    4f12:	0e 94 92 26 	call	0x4d24	; 0x4d24 <display_clearBuffer>
	display_writeBufferToScreen();
    4f16:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
}
    4f1a:	df 91       	pop	r29
    4f1c:	cf 91       	pop	r28
    4f1e:	08 95       	ret

00004f20 <display_putString>:
		}
	}
}


void display_putString(char* text, uint8_t page, uint8_t column, uint8_t* fontTable) {
    4f20:	2f 92       	push	r2
    4f22:	3f 92       	push	r3
    4f24:	4f 92       	push	r4
    4f26:	5f 92       	push	r5
    4f28:	6f 92       	push	r6
    4f2a:	7f 92       	push	r7
    4f2c:	8f 92       	push	r8
    4f2e:	9f 92       	push	r9
    4f30:	af 92       	push	r10
    4f32:	bf 92       	push	r11
    4f34:	cf 92       	push	r12
    4f36:	df 92       	push	r13
    4f38:	ef 92       	push	r14
    4f3a:	ff 92       	push	r15
    4f3c:	0f 93       	push	r16
    4f3e:	1f 93       	push	r17
    4f40:	df 93       	push	r29
    4f42:	cf 93       	push	r28
    4f44:	cd b7       	in	r28, 0x3d	; 61
    4f46:	de b7       	in	r29, 0x3e	; 62
    4f48:	28 97       	sbiw	r28, 0x08	; 8
    4f4a:	cd bf       	out	0x3d, r28	; 61
    4f4c:	de bf       	out	0x3e, r29	; 62
    4f4e:	1c 01       	movw	r2, r24
    4f50:	4c 83       	std	Y+4, r20	; 0x04
    4f52:	2f 83       	std	Y+7, r18	; 0x07
    4f54:	38 87       	std	Y+8, r19	; 0x08
 uint8_t i,j,k, offset;
 uint8_t fontHeight = fontTable[FONT_HEIGHT];
    4f56:	d9 01       	movw	r26, r18
    4f58:	13 96       	adiw	r26, 0x03	; 3
    4f5a:	bc 91       	ld	r27, X
    4f5c:	bb 83       	std	Y+3, r27	; 0x03
 uint8_t firstChar = fontTable[FONT_FIRST_CHAR];
    4f5e:	f9 01       	movw	r30, r18
    4f60:	f4 81       	ldd	r31, Z+4	; 0x04
    4f62:	fa 83       	std	Y+2, r31	; 0x02
 uint8_t charCount = fontTable[FONT_CHAR_COUNT];
    4f64:	d9 01       	movw	r26, r18
    4f66:	15 96       	adiw	r26, 0x05	; 5
    4f68:	2c 91       	ld	r18, X
 uint8_t bytes = (fontHeight+7)/8;
    4f6a:	bb 81       	ldd	r27, Y+3	; 0x03
    4f6c:	0b 2f       	mov	r16, r27
    4f6e:	10 e0       	ldi	r17, 0x00	; 0
    4f70:	c8 01       	movw	r24, r16
    4f72:	07 96       	adiw	r24, 0x07	; 7
    4f74:	a3 e0       	ldi	r26, 0x03	; 3
    4f76:	95 95       	asr	r25
    4f78:	87 95       	ror	r24
    4f7a:	aa 95       	dec	r26
    4f7c:	e1 f7       	brne	.-8      	; 0x4f76 <display_putString+0x56>
    4f7e:	89 83       	std	Y+1, r24	; 0x01
    4f80:	cc 24       	eor	r12, r12
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    4f82:	e2 2e       	mov	r14, r18
    4f84:	ff 24       	eor	r15, r15
    4f86:	e6 e0       	ldi	r30, 0x06	; 6
    4f88:	f0 e0       	ldi	r31, 0x00	; 0
    4f8a:	ee 0e       	add	r14, r30
    4f8c:	ff 1e       	adc	r15, r31
 			data = fontTable[charIndex+k];
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
 				data >>= (i+1)*8-fontHeight;
 			}
 			displayBuffer[page+i][offset] = data;
    4f8e:	46 2e       	mov	r4, r22
    4f90:	55 24       	eor	r5, r5
    4f92:	6d c0       	rjmp	.+218    	; 0x506e <display_putString+0x14e>
 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
 		ch = text[j] - firstChar;
    4f94:	7e 2f       	mov	r23, r30
    4f96:	fa 81       	ldd	r31, Y+2	; 0x02
    4f98:	7f 1b       	sub	r23, r31

 
  		charIndex = 0;
 		if (fontTable[FONT_LENGTH] == 0) {
    4f9a:	af 81       	ldd	r26, Y+7	; 0x07
    4f9c:	b8 85       	ldd	r27, Y+8	; 0x08
    4f9e:	8c 91       	ld	r24, X
    4fa0:	88 23       	and	r24, r24
    4fa2:	39 f4       	brne	.+14     	; 0x4fb2 <display_putString+0x92>
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
    4fa4:	12 96       	adiw	r26, 0x02	; 2
    4fa6:	4c 91       	ld	r20, X
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
    4fa8:	74 9f       	mul	r23, r20
    4faa:	f0 01       	movw	r30, r0
    4fac:	11 24       	eor	r1, r1
    4fae:	36 96       	adiw	r30, 0x06	; 6
    4fb0:	2b c0       	rjmp	.+86     	; 0x5008 <display_putString+0xe8>
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
    4fb2:	ef 81       	ldd	r30, Y+7	; 0x07
    4fb4:	f8 85       	ldd	r31, Y+8	; 0x08
    4fb6:	e7 0f       	add	r30, r23
    4fb8:	f1 1d       	adc	r31, r1
    4fba:	46 81       	ldd	r20, Z+6	; 0x06
    4fbc:	ef 81       	ldd	r30, Y+7	; 0x07
    4fbe:	f8 85       	ldd	r31, Y+8	; 0x08
    4fc0:	ed 83       	std	Y+5, r30	; 0x05
    4fc2:	fe 83       	std	Y+6, r31	; 0x06
    4fc4:	50 e0       	ldi	r21, 0x00	; 0
    4fc6:	a0 e0       	ldi	r26, 0x00	; 0
    4fc8:	b0 e0       	ldi	r27, 0x00	; 0
    4fca:	0a c0       	rjmp	.+20     	; 0x4fe0 <display_putString+0xc0>
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
    4fcc:	ed 81       	ldd	r30, Y+5	; 0x05
    4fce:	fe 81       	ldd	r31, Y+6	; 0x06
    4fd0:	85 81       	ldd	r24, Z+5	; 0x05
    4fd2:	f9 81       	ldd	r31, Y+1	; 0x01
    4fd4:	f8 9f       	mul	r31, r24
    4fd6:	c0 01       	movw	r24, r0
    4fd8:	11 24       	eor	r1, r1
    4fda:	a8 0f       	add	r26, r24
    4fdc:	b9 1f       	adc	r27, r25
 		if (fontTable[FONT_LENGTH] == 0) {
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
    4fde:	5f 5f       	subi	r21, 0xFF	; 255
    4fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    4fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    4fe4:	01 96       	adiw	r24, 0x01	; 1
    4fe6:	8d 83       	std	Y+5, r24	; 0x05
    4fe8:	9e 83       	std	Y+6, r25	; 0x06
    4fea:	57 17       	cp	r21, r23
    4fec:	78 f3       	brcs	.-34     	; 0x4fcc <display_putString+0xac>
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    4fee:	84 2f       	mov	r24, r20
    4ff0:	90 e0       	ldi	r25, 0x00	; 0
    4ff2:	82 9f       	mul	r24, r18
    4ff4:	f0 01       	movw	r30, r0
    4ff6:	83 9f       	mul	r24, r19
    4ff8:	f0 0d       	add	r31, r0
    4ffa:	92 9f       	mul	r25, r18
    4ffc:	f0 0d       	add	r31, r0
    4ffe:	11 24       	eor	r1, r1
    5000:	ee 0d       	add	r30, r14
    5002:	ff 1d       	adc	r31, r15
    5004:	ea 0f       	add	r30, r26
    5006:	fb 1f       	adc	r31, r27
    5008:	af 81       	ldd	r26, Y+7	; 0x07
    500a:	b8 85       	ldd	r27, Y+8	; 0x08
    500c:	ae 0f       	add	r26, r30
    500e:	bf 1f       	adc	r27, r31
    5010:	50 e0       	ldi	r21, 0x00	; 0
    5012:	16 c0       	rjmp	.+44     	; 0x5040 <display_putString+0x120>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
    5014:	8c 91       	ld	r24, X
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    5016:	9b 81       	ldd	r25, Y+3	; 0x03
    5018:	99 30       	cpi	r25, 0x09	; 9
    501a:	50 f0       	brcs	.+20     	; 0x5030 <display_putString+0x110>
    501c:	08 15       	cp	r16, r8
    501e:	19 05       	cpc	r17, r9
    5020:	3c f4       	brge	.+14     	; 0x5030 <display_putString+0x110>
 				data >>= (i+1)*8-fontHeight;
    5022:	90 e0       	ldi	r25, 0x00	; 0
    5024:	06 2c       	mov	r0, r6
    5026:	02 c0       	rjmp	.+4      	; 0x502c <display_putString+0x10c>
    5028:	95 95       	asr	r25
    502a:	87 95       	ror	r24
    502c:	0a 94       	dec	r0
    502e:	e2 f7       	brpl	.-8      	; 0x5028 <display_putString+0x108>
 			}
 			displayBuffer[page+i][offset] = data;
    5030:	f5 01       	movw	r30, r10
    5032:	e7 0f       	add	r30, r23
    5034:	f1 1d       	adc	r31, r1
    5036:	e7 5c       	subi	r30, 0xC7	; 199
    5038:	fe 4b       	sbci	r31, 0xBE	; 190
    503a:	80 83       	st	Z, r24
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
    503c:	5f 5f       	subi	r21, 0xFF	; 255
    503e:	11 96       	adiw	r26, 0x01	; 1
    5040:	75 2f       	mov	r23, r21
    5042:	76 0f       	add	r23, r22
    5044:	54 17       	cp	r21, r20
    5046:	30 f3       	brcs	.-52     	; 0x5014 <display_putString+0xf4>
    5048:	84 2f       	mov	r24, r20
    504a:	86 0f       	add	r24, r22
 			displayBuffer[page+i][offset] = data;
 			offset++;
		}

		//Add a 1px gap between characters
		displayBuffer[page+i][offset+1] = 0x00;
    504c:	f5 01       	movw	r30, r10
    504e:	e8 0f       	add	r30, r24
    5050:	f1 1d       	adc	r31, r1
    5052:	e6 5c       	subi	r30, 0xC6	; 198
    5054:	fe 4b       	sbci	r31, 0xBE	; 190
    5056:	10 82       	st	Z, r1
		offset++;
    5058:	68 2f       	mov	r22, r24
    505a:	6f 5f       	subi	r22, 0xFF	; 255
 	
 		j++;
    505c:	d3 94       	inc	r13

 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
    505e:	f1 01       	movw	r30, r2
    5060:	ed 0d       	add	r30, r13
    5062:	f1 1d       	adc	r31, r1
    5064:	e0 81       	ld	r30, Z
    5066:	ee 23       	and	r30, r30
    5068:	09 f0       	breq	.+2      	; 0x506c <display_putString+0x14c>
    506a:	94 cf       	rjmp	.-216    	; 0x4f94 <display_putString+0x74>
		displayBuffer[page+i][offset+1] = 0x00;
		offset++;
 	
 		j++;
 	} 	
 	i++;
    506c:	c3 94       	inc	r12
 uint8_t charWidth, ch, data;


 i = 0;

 while (i*8 < fontHeight) {
    506e:	2c 2d       	mov	r18, r12
    5070:	30 e0       	ldi	r19, 0x00	; 0
    5072:	c9 01       	movw	r24, r18
    5074:	f3 e0       	ldi	r31, 0x03	; 3
    5076:	88 0f       	add	r24, r24
    5078:	99 1f       	adc	r25, r25
    507a:	fa 95       	dec	r31
    507c:	e1 f7       	brne	.-8      	; 0x5076 <display_putString+0x156>
    507e:	80 17       	cp	r24, r16
    5080:	91 07       	cpc	r25, r17
    5082:	e4 f4       	brge	.+56     	; 0x50bc <display_putString+0x19c>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    5084:	2f 5f       	subi	r18, 0xFF	; 255
    5086:	3f 4f       	sbci	r19, 0xFF	; 255
    5088:	49 01       	movw	r8, r18
    508a:	e3 e0       	ldi	r30, 0x03	; 3
    508c:	88 0c       	add	r8, r8
    508e:	99 1c       	adc	r9, r9
    5090:	ea 95       	dec	r30
    5092:	e1 f7       	brne	.-8      	; 0x508c <display_putString+0x16c>
    5094:	21 50       	subi	r18, 0x01	; 1
    5096:	30 40       	sbci	r19, 0x00	; 0
 				data >>= (i+1)*8-fontHeight;
    5098:	34 01       	movw	r6, r8
    509a:	60 1a       	sub	r6, r16
    509c:	71 0a       	sbc	r7, r17
    509e:	6c 81       	ldd	r22, Y+4	; 0x04
    50a0:	dd 24       	eor	r13, r13
 			}
 			displayBuffer[page+i][offset] = data;
    50a2:	c9 01       	movw	r24, r18
    50a4:	84 0d       	add	r24, r4
    50a6:	95 1d       	adc	r25, r5
    50a8:	a6 e6       	ldi	r26, 0x66	; 102
    50aa:	b0 e0       	ldi	r27, 0x00	; 0
    50ac:	8a 9f       	mul	r24, r26
    50ae:	50 01       	movw	r10, r0
    50b0:	8b 9f       	mul	r24, r27
    50b2:	b0 0c       	add	r11, r0
    50b4:	9a 9f       	mul	r25, r26
    50b6:	b0 0c       	add	r11, r0
    50b8:	11 24       	eor	r1, r1
    50ba:	d1 cf       	rjmp	.-94     	; 0x505e <display_putString+0x13e>
 		j++;
 	} 	
 	i++;
 }

}
    50bc:	28 96       	adiw	r28, 0x08	; 8
    50be:	cd bf       	out	0x3d, r28	; 61
    50c0:	de bf       	out	0x3e, r29	; 62
    50c2:	cf 91       	pop	r28
    50c4:	df 91       	pop	r29
    50c6:	1f 91       	pop	r17
    50c8:	0f 91       	pop	r16
    50ca:	ff 90       	pop	r15
    50cc:	ef 90       	pop	r14
    50ce:	df 90       	pop	r13
    50d0:	cf 90       	pop	r12
    50d2:	bf 90       	pop	r11
    50d4:	af 90       	pop	r10
    50d6:	9f 90       	pop	r9
    50d8:	8f 90       	pop	r8
    50da:	7f 90       	pop	r7
    50dc:	6f 90       	pop	r6
    50de:	5f 90       	pop	r5
    50e0:	4f 90       	pop	r4
    50e2:	3f 90       	pop	r3
    50e4:	2f 90       	pop	r2
    50e6:	08 95       	ret

000050e8 <display_drawPixel>:

void display_drawPixel(uint8_t row, uint8_t column, bool black) {
    50e8:	28 2f       	mov	r18, r24
    50ea:	26 95       	lsr	r18
    50ec:	26 95       	lsr	r18
    50ee:	26 95       	lsr	r18
    50f0:	70 e0       	ldi	r23, 0x00	; 0
    50f2:	a8 2f       	mov	r26, r24
    50f4:	b0 e0       	ldi	r27, 0x00	; 0
	if (black) displayBuffer[row/DISPLAY_PAGES][column] |= (0x01 << row%8);
    50f6:	44 23       	and	r20, r20
    50f8:	d9 f0       	breq	.+54     	; 0x5130 <display_drawPixel+0x48>
    50fa:	30 e0       	ldi	r19, 0x00	; 0
    50fc:	86 e6       	ldi	r24, 0x66	; 102
    50fe:	90 e0       	ldi	r25, 0x00	; 0
    5100:	28 9f       	mul	r18, r24
    5102:	f0 01       	movw	r30, r0
    5104:	29 9f       	mul	r18, r25
    5106:	f0 0d       	add	r31, r0
    5108:	38 9f       	mul	r19, r24
    510a:	f0 0d       	add	r31, r0
    510c:	11 24       	eor	r1, r1
    510e:	e6 0f       	add	r30, r22
    5110:	f7 1f       	adc	r31, r23
    5112:	e7 5c       	subi	r30, 0xC7	; 199
    5114:	fe 4b       	sbci	r31, 0xBE	; 190
    5116:	20 81       	ld	r18, Z
    5118:	a7 70       	andi	r26, 0x07	; 7
    511a:	b0 70       	andi	r27, 0x00	; 0
    511c:	81 e0       	ldi	r24, 0x01	; 1
    511e:	90 e0       	ldi	r25, 0x00	; 0
    5120:	02 c0       	rjmp	.+4      	; 0x5126 <display_drawPixel+0x3e>
    5122:	88 0f       	add	r24, r24
    5124:	99 1f       	adc	r25, r25
    5126:	aa 95       	dec	r26
    5128:	e2 f7       	brpl	.-8      	; 0x5122 <display_drawPixel+0x3a>
    512a:	28 2b       	or	r18, r24
    512c:	20 83       	st	Z, r18
    512e:	08 95       	ret
	else displayBuffer[row/DISPLAY_PAGES][column] &= ~(0x01 << row%8);
    5130:	30 e0       	ldi	r19, 0x00	; 0
    5132:	86 e6       	ldi	r24, 0x66	; 102
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	28 9f       	mul	r18, r24
    5138:	f0 01       	movw	r30, r0
    513a:	29 9f       	mul	r18, r25
    513c:	f0 0d       	add	r31, r0
    513e:	38 9f       	mul	r19, r24
    5140:	f0 0d       	add	r31, r0
    5142:	11 24       	eor	r1, r1
    5144:	e6 0f       	add	r30, r22
    5146:	f7 1f       	adc	r31, r23
    5148:	e7 5c       	subi	r30, 0xC7	; 199
    514a:	fe 4b       	sbci	r31, 0xBE	; 190
    514c:	20 81       	ld	r18, Z
    514e:	a7 70       	andi	r26, 0x07	; 7
    5150:	b0 70       	andi	r27, 0x00	; 0
    5152:	81 e0       	ldi	r24, 0x01	; 1
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	02 c0       	rjmp	.+4      	; 0x515c <display_drawPixel+0x74>
    5158:	88 0f       	add	r24, r24
    515a:	99 1f       	adc	r25, r25
    515c:	aa 95       	dec	r26
    515e:	e2 f7       	brpl	.-8      	; 0x5158 <display_drawPixel+0x70>
    5160:	80 95       	com	r24
    5162:	82 23       	and	r24, r18
    5164:	80 83       	st	Z, r24
    5166:	08 95       	ret

00005168 <swap>:
}

void swap(uint8_t* val1, uint8_t* val2) {
    5168:	dc 01       	movw	r26, r24
    516a:	fb 01       	movw	r30, r22
	uint8_t tempVal = *val2;
    516c:	90 81       	ld	r25, Z
	*val2 = *val1;
    516e:	8c 91       	ld	r24, X
    5170:	80 83       	st	Z, r24
	*val1 = tempVal;
    5172:	9c 93       	st	X, r25
}
    5174:	08 95       	ret

00005176 <display_drawLine>:

void display_drawLine(uint8_t row1, uint8_t column1, uint8_t row2, uint8_t column2, bool black) {
    5176:	df 92       	push	r13
    5178:	ef 92       	push	r14
    517a:	ff 92       	push	r15
    517c:	0f 93       	push	r16
    517e:	1f 93       	push	r17
    5180:	cf 93       	push	r28
    5182:	df 93       	push	r29
    5184:	f8 2e       	mov	r15, r24
    5186:	e6 2e       	mov	r14, r22
		}

	}
	*/

	if (row1 == row2) {
    5188:	84 17       	cp	r24, r20
    518a:	d9 f4       	brne	.+54     	; 0x51c2 <display_drawLine+0x4c>
		//Draw horizontal line
		if (column1 > column2) step = -1;
    518c:	26 17       	cp	r18, r22
    518e:	18 f4       	brcc	.+6      	; 0x5196 <display_drawLine+0x20>
    5190:	dd 24       	eor	r13, r13
    5192:	da 94       	dec	r13
    5194:	02 c0       	rjmp	.+4      	; 0x519a <display_drawLine+0x24>
    5196:	dd 24       	eor	r13, r13
    5198:	d3 94       	inc	r13
		j = column1;
    519a:	1e 2d       	mov	r17, r14
		while (j != column2) {
    519c:	c2 2f       	mov	r28, r18
    519e:	d0 e0       	ldi	r29, 0x00	; 0
    51a0:	06 c0       	rjmp	.+12     	; 0x51ae <display_drawLine+0x38>
			display_drawPixel(row1,j,black);
    51a2:	8f 2d       	mov	r24, r15
    51a4:	61 2f       	mov	r22, r17
    51a6:	40 2f       	mov	r20, r16
    51a8:	0e 94 74 28 	call	0x50e8	; 0x50e8 <display_drawPixel>
    51ac:	1d 0d       	add	r17, r13

	if (row1 == row2) {
		//Draw horizontal line
		if (column1 > column2) step = -1;
		j = column1;
		while (j != column2) {
    51ae:	81 2f       	mov	r24, r17
    51b0:	99 27       	eor	r25, r25
    51b2:	87 fd       	sbrc	r24, 7
    51b4:	90 95       	com	r25
    51b6:	8c 17       	cp	r24, r28
    51b8:	9d 07       	cpc	r25, r29
    51ba:	99 f7       	brne	.-26     	; 0x51a2 <display_drawLine+0x2c>
			display_drawPixel(row1,j,black);
			j += step;
		}
		display_drawPixel(row1,j,black);
    51bc:	8f 2d       	mov	r24, r15
    51be:	61 2f       	mov	r22, r17
    51c0:	1c c0       	rjmp	.+56     	; 0x51fa <display_drawLine+0x84>
	
	} else if (column1 == column2) {
    51c2:	62 17       	cp	r22, r18
    51c4:	e9 f4       	brne	.+58     	; 0x5200 <display_drawLine+0x8a>
		//Draw vertical line
		if (row1 > row2) step = -1;
    51c6:	48 17       	cp	r20, r24
    51c8:	18 f4       	brcc	.+6      	; 0x51d0 <display_drawLine+0x5a>
    51ca:	dd 24       	eor	r13, r13
    51cc:	da 94       	dec	r13
    51ce:	02 c0       	rjmp	.+4      	; 0x51d4 <display_drawLine+0x5e>
    51d0:	dd 24       	eor	r13, r13
    51d2:	d3 94       	inc	r13
		i = row1;
    51d4:	1f 2d       	mov	r17, r15
		while(i != row2) {
    51d6:	c4 2f       	mov	r28, r20
    51d8:	d0 e0       	ldi	r29, 0x00	; 0
    51da:	06 c0       	rjmp	.+12     	; 0x51e8 <display_drawLine+0x72>
			display_drawPixel(i,column1,black);
    51dc:	81 2f       	mov	r24, r17
    51de:	6e 2d       	mov	r22, r14
    51e0:	40 2f       	mov	r20, r16
    51e2:	0e 94 74 28 	call	0x50e8	; 0x50e8 <display_drawPixel>
    51e6:	1d 0d       	add	r17, r13
	
	} else if (column1 == column2) {
		//Draw vertical line
		if (row1 > row2) step = -1;
		i = row1;
		while(i != row2) {
    51e8:	81 2f       	mov	r24, r17
    51ea:	99 27       	eor	r25, r25
    51ec:	87 fd       	sbrc	r24, 7
    51ee:	90 95       	com	r25
    51f0:	8c 17       	cp	r24, r28
    51f2:	9d 07       	cpc	r25, r29
    51f4:	99 f7       	brne	.-26     	; 0x51dc <display_drawLine+0x66>
			display_drawPixel(i,column1,black);
			i += step;
		}
		display_drawPixel(i,column1,black);
    51f6:	81 2f       	mov	r24, r17
    51f8:	6e 2d       	mov	r22, r14
    51fa:	40 2f       	mov	r20, r16
    51fc:	0e 94 74 28 	call	0x50e8	; 0x50e8 <display_drawPixel>
			
			
		}
		*/
	}
}
    5200:	df 91       	pop	r29
    5202:	cf 91       	pop	r28
    5204:	1f 91       	pop	r17
    5206:	0f 91       	pop	r16
    5208:	ff 90       	pop	r15
    520a:	ef 90       	pop	r14
    520c:	df 90       	pop	r13
    520e:	08 95       	ret

00005210 <display_drawRectangle>:


void display_drawRectangle(uint8_t topRow, uint8_t leftColumn, uint8_t height, uint8_t width, bool filled, bool invertOrig, bool blackBorder) {
    5210:	6f 92       	push	r6
    5212:	7f 92       	push	r7
    5214:	8f 92       	push	r8
    5216:	9f 92       	push	r9
    5218:	bf 92       	push	r11
    521a:	cf 92       	push	r12
    521c:	df 92       	push	r13
    521e:	ef 92       	push	r14
    5220:	ff 92       	push	r15
    5222:	0f 93       	push	r16
    5224:	1f 93       	push	r17
    5226:	cf 93       	push	r28
    5228:	df 93       	push	r29
    522a:	18 2f       	mov	r17, r24
    522c:	b6 2e       	mov	r11, r22
    522e:	d2 2e       	mov	r13, r18
    5230:	d6 0e       	add	r13, r22
    5232:	f4 2e       	mov	r15, r20
    5234:	f8 0e       	add	r15, r24
	uint8_t i,j, remainder, bottom, right, byteOut, page;

	if (!filled) {
    5236:	00 23       	and	r16, r16
    5238:	c1 f4       	brne	.+48     	; 0x526a <display_drawRectangle+0x5a>
		display_drawLine(topRow,leftColumn,topRow,leftColumn+width,blackBorder); //Top
    523a:	41 2f       	mov	r20, r17
    523c:	2d 2d       	mov	r18, r13
    523e:	0c 2d       	mov	r16, r12
    5240:	0e 94 bb 28 	call	0x5176	; 0x5176 <display_drawLine>
		display_drawLine(topRow+height,leftColumn,topRow+height,leftColumn+width,blackBorder); //Bottom
    5244:	8f 2d       	mov	r24, r15
    5246:	6b 2d       	mov	r22, r11
    5248:	4f 2d       	mov	r20, r15
    524a:	2d 2d       	mov	r18, r13
    524c:	0e 94 bb 28 	call	0x5176	; 0x5176 <display_drawLine>
		display_drawLine(topRow,leftColumn,topRow+height,leftColumn,blackBorder); //Left
    5250:	81 2f       	mov	r24, r17
    5252:	6b 2d       	mov	r22, r11
    5254:	4f 2d       	mov	r20, r15
    5256:	2b 2d       	mov	r18, r11
    5258:	0e 94 bb 28 	call	0x5176	; 0x5176 <display_drawLine>
		display_drawLine(topRow,leftColumn+width,topRow+height,leftColumn+width,blackBorder); //Right
    525c:	81 2f       	mov	r24, r17
    525e:	6d 2d       	mov	r22, r13
    5260:	4f 2d       	mov	r20, r15
    5262:	2d 2d       	mov	r18, r13
    5264:	0e 94 bb 28 	call	0x5176	; 0x5176 <display_drawLine>
    5268:	63 c0       	rjmp	.+198    	; 0x5330 <display_drawRectangle+0x120>
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
    526a:	58 2f       	mov	r21, r24
		while (i <= topRow + height) {
    526c:	08 2f       	mov	r16, r24
    526e:	10 e0       	ldi	r17, 0x00	; 0
    5270:	04 0f       	add	r16, r20
    5272:	11 1d       	adc	r17, r1
			remainder = i%8;
			if (i+(7-remainder) <= bottom) {
    5274:	cf 2d       	mov	r28, r15
    5276:	d0 e0       	ldi	r29, 0x00	; 0
				//Deals with first page and middle pages
				byteOut = 0xFF << remainder;
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
    5278:	a7 e0       	ldi	r26, 0x07	; 7
    527a:	b0 e0       	ldi	r27, 0x00	; 0
    527c:	ac 1b       	sub	r26, r28
    527e:	bd 0b       	sbc	r27, r29
    5280:	3f ef       	ldi	r19, 0xFF	; 255
    5282:	83 2e       	mov	r8, r19
    5284:	91 2c       	mov	r9, r1
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
    5286:	26 e6       	ldi	r18, 0x66	; 102
    5288:	62 2e       	mov	r6, r18
    528a:	71 2c       	mov	r7, r1
				}
			}
			i += (8 - remainder);	
    528c:	98 e0       	ldi	r25, 0x08	; 8
    528e:	c9 2e       	mov	r12, r25
    5290:	49 c0       	rjmp	.+146    	; 0x5324 <display_drawRectangle+0x114>
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
		while (i <= topRow + height) {
			remainder = i%8;
    5292:	87 e0       	ldi	r24, 0x07	; 7
    5294:	f8 2e       	mov	r15, r24
    5296:	f5 22       	and	r15, r21
			if (i+(7-remainder) <= bottom) {
    5298:	6f 2d       	mov	r22, r15
    529a:	70 e0       	ldi	r23, 0x00	; 0
    529c:	c9 01       	movw	r24, r18
    529e:	07 96       	adiw	r24, 0x07	; 7
    52a0:	86 1b       	sub	r24, r22
    52a2:	97 0b       	sbc	r25, r23
    52a4:	c8 17       	cp	r28, r24
    52a6:	d9 07       	cpc	r29, r25
    52a8:	44 f0       	brlt	.+16     	; 0x52ba <display_drawRectangle+0xaa>
				//Deals with first page and middle pages
				byteOut = 0xFF << remainder;
    52aa:	c4 01       	movw	r24, r8
    52ac:	0f 2c       	mov	r0, r15
    52ae:	02 c0       	rjmp	.+4      	; 0x52b4 <display_drawRectangle+0xa4>
    52b0:	88 0f       	add	r24, r24
    52b2:	99 1f       	adc	r25, r25
    52b4:	0a 94       	dec	r0
    52b6:	e2 f7       	brpl	.-8      	; 0x52b0 <display_drawRectangle+0xa0>
    52b8:	08 c0       	rjmp	.+16     	; 0x52ca <display_drawRectangle+0xba>
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
    52ba:	2a 0f       	add	r18, r26
    52bc:	3b 1f       	adc	r19, r27
    52be:	c4 01       	movw	r24, r8
    52c0:	02 c0       	rjmp	.+4      	; 0x52c6 <display_drawRectangle+0xb6>
    52c2:	95 95       	asr	r25
    52c4:	87 95       	ror	r24
    52c6:	2a 95       	dec	r18
    52c8:	e2 f7       	brpl	.-8      	; 0x52c2 <display_drawRectangle+0xb2>
    52ca:	28 2f       	mov	r18, r24
			}
			page = i/8;
    52cc:	85 2f       	mov	r24, r21
    52ce:	86 95       	lsr	r24
    52d0:	86 95       	lsr	r24
    52d2:	86 95       	lsr	r24
    52d4:	3b 2d       	mov	r19, r11
    52d6:	90 e0       	ldi	r25, 0x00	; 0
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
    52d8:	86 9d       	mul	r24, r6
    52da:	b0 01       	movw	r22, r0
    52dc:	87 9d       	mul	r24, r7
    52de:	70 0d       	add	r23, r0
    52e0:	96 9d       	mul	r25, r6
    52e2:	70 0d       	add	r23, r0
    52e4:	11 24       	eor	r1, r1
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
    52e6:	42 2f       	mov	r20, r18
    52e8:	40 95       	com	r20
    52ea:	17 c0       	rjmp	.+46     	; 0x531a <display_drawRectangle+0x10a>
    52ec:	e3 2f       	mov	r30, r19
    52ee:	f0 e0       	ldi	r31, 0x00	; 0
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
				if (invertOrig) {
    52f0:	ee 20       	and	r14, r14
    52f2:	69 f0       	breq	.+26     	; 0x530e <display_drawRectangle+0xfe>
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
    52f4:	e6 0f       	add	r30, r22
    52f6:	f7 1f       	adc	r31, r23
    52f8:	e7 5c       	subi	r30, 0xC7	; 199
    52fa:	fe 4b       	sbci	r31, 0xBE	; 190
    52fc:	80 81       	ld	r24, Z
    52fe:	90 81       	ld	r25, Z
    5300:	82 23       	and	r24, r18
    5302:	80 95       	com	r24
    5304:	82 23       	and	r24, r18
    5306:	94 23       	and	r25, r20
    5308:	89 2b       	or	r24, r25
    530a:	80 83       	st	Z, r24
    530c:	05 c0       	rjmp	.+10     	; 0x5318 <display_drawRectangle+0x108>
				} else {
					displayBuffer[page][j] = byteOut;	
    530e:	e6 0f       	add	r30, r22
    5310:	f7 1f       	adc	r31, r23
    5312:	e7 5c       	subi	r30, 0xC7	; 199
    5314:	fe 4b       	sbci	r31, 0xBE	; 190
    5316:	20 83       	st	Z, r18
			} else {
				//Final page is a little tricky
				byteOut = 0xFF >> (7-(bottom-i));
			}
			page = i/8;
			for (j = leftColumn; j <= right; j++) {
    5318:	3f 5f       	subi	r19, 0xFF	; 255
    531a:	d3 16       	cp	r13, r19
    531c:	38 f7       	brcc	.-50     	; 0x52ec <display_drawRectangle+0xdc>
					displayBuffer[page][j] = ((~(displayBuffer[page][j] & byteOut)) & byteOut) | (displayBuffer[page][j] & ~byteOut);
				} else {
					displayBuffer[page][j] = byteOut;	
				}
			}
			i += (8 - remainder);	
    531e:	8c 2d       	mov	r24, r12
    5320:	8f 19       	sub	r24, r15
    5322:	58 0f       	add	r21, r24
		display_drawLine(topRow,leftColumn+width,topRow+height,leftColumn+width,blackBorder); //Right
	} else {
		i = topRow;
		bottom = topRow + height;
		right = leftColumn + width;
		while (i <= topRow + height) {
    5324:	25 2f       	mov	r18, r21
    5326:	30 e0       	ldi	r19, 0x00	; 0
    5328:	02 17       	cp	r16, r18
    532a:	13 07       	cpc	r17, r19
    532c:	0c f0       	brlt	.+2      	; 0x5330 <display_drawRectangle+0x120>
    532e:	b1 cf       	rjmp	.-158    	; 0x5292 <display_drawRectangle+0x82>
			i += (8 - remainder);	
		}
	
	}
			
}
    5330:	df 91       	pop	r29
    5332:	cf 91       	pop	r28
    5334:	1f 91       	pop	r17
    5336:	0f 91       	pop	r16
    5338:	ff 90       	pop	r15
    533a:	ef 90       	pop	r14
    533c:	df 90       	pop	r13
    533e:	cf 90       	pop	r12
    5340:	bf 90       	pop	r11
    5342:	9f 90       	pop	r9
    5344:	8f 90       	pop	r8
    5346:	7f 90       	pop	r7
    5348:	6f 90       	pop	r6
    534a:	08 95       	ret

0000534c <Time_Init>:
	// fclk = 14745600
	// div  = 14400
	// => 14745600/14400/1024 => 1 samples per second
	
	// Set period/TOP value
	TCD0.PER = 14400;
    534c:	e0 e0       	ldi	r30, 0x00	; 0
    534e:	f9 e0       	ldi	r31, 0x09	; 9
    5350:	80 e4       	ldi	r24, 0x40	; 64
    5352:	98 e3       	ldi	r25, 0x38	; 56
    5354:	86 a3       	std	Z+38, r24	; 0x26
    5356:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCD0.CTRLA = (TCD0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    5358:	80 81       	ld	r24, Z
    535a:	80 7f       	andi	r24, 0xF0	; 240
    535c:	87 60       	ori	r24, 0x07	; 7
    535e:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	TCD0.INTCTRLA = (TCD0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    5360:	86 81       	ldd	r24, Z+6	; 0x06
    5362:	8c 7f       	andi	r24, 0xFC	; 252
    5364:	82 60       	ori	r24, 0x02	; 2
    5366:	86 83       	std	Z+6, r24	; 0x06
	
	// 32 bit counter
  /* We need to set up the event user
   * Which event channel should be input for the peripheral, and what should be the action. */
  
  TCC1.CTRLA = TC_CLKSEL_EVCH0_gc; //Select event channel 0 as clock source for TCC1.
    5368:	88 e0       	ldi	r24, 0x08	; 8
    536a:	80 93 40 08 	sts	0x0840, r24
   * event channel used */
  
   /* Select TCC0 overflow as event channel 0 multiplexer input.
    * This is all code required to configure one event channel */
  
  EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    536e:	80 ec       	ldi	r24, 0xC0	; 192
    5370:	80 93 80 01 	sts	0x0180, r24
    
  /* TCC0 is used as the 16 LSB for the timer. This runs from the normal (prescaled) Peripheral Clock */  
  
  //Select system clock divided by 8 as clock source for TCC0.
  TCC0.PER = 0xFFFF;
    5374:	e0 e0       	ldi	r30, 0x00	; 0
    5376:	f8 e0       	ldi	r31, 0x08	; 8
    5378:	8f ef       	ldi	r24, 0xFF	; 255
    537a:	9f ef       	ldi	r25, 0xFF	; 255
    537c:	86 a3       	std	Z+38, r24	; 0x26
    537e:	97 a3       	std	Z+39, r25	; 0x27
  TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;   // 1.8432 megehertz
    5380:	80 81       	ld	r24, Z
    5382:	80 7f       	andi	r24, 0xF0	; 240
    5384:	84 60       	ori	r24, 0x04	; 4
    5386:	80 83       	st	Z, r24
  
	
	
}
    5388:	08 95       	ret

0000538a <Time_Set>:

void Time_Set(uint32_t time){
  UNIX_time = time;
    538a:	60 93 fb 29 	sts	0x29FB, r22
    538e:	70 93 fc 29 	sts	0x29FC, r23
    5392:	80 93 fd 29 	sts	0x29FD, r24
    5396:	90 93 fe 29 	sts	0x29FE, r25
}
    539a:	08 95       	ret

0000539c <Time_Get32BitTimer>:

uint32_t Time_Get32BitTimer(void){
  cli();
    539c:	f8 94       	cli
  uint16_t high = TCC1_CNT;
    539e:	20 91 60 08 	lds	r18, 0x0860
    53a2:	30 91 61 08 	lds	r19, 0x0861
  uint16_t low  = TCC0_CNT;
    53a6:	60 91 20 08 	lds	r22, 0x0820
    53aa:	70 91 21 08 	lds	r23, 0x0821
  uint32_t result = 0;

  if(high != TCC1_CNT){
    53ae:	80 91 60 08 	lds	r24, 0x0860
    53b2:	90 91 61 08 	lds	r25, 0x0861
    53b6:	28 17       	cp	r18, r24
    53b8:	39 07       	cpc	r19, r25
    53ba:	41 f0       	breq	.+16     	; 0x53cc <Time_Get32BitTimer+0x30>
	 high = TCC1_CNT;
    53bc:	20 91 60 08 	lds	r18, 0x0860
    53c0:	30 91 61 08 	lds	r19, 0x0861
	 low  = TCC0_CNT;
    53c4:	60 91 20 08 	lds	r22, 0x0820
    53c8:	70 91 21 08 	lds	r23, 0x0821
  }
  result = high * 65536 + low;
  sei();
    53cc:	78 94       	sei
    53ce:	40 e0       	ldi	r20, 0x00	; 0
    53d0:	50 e0       	ldi	r21, 0x00	; 0
    53d2:	a9 01       	movw	r20, r18
    53d4:	33 27       	eor	r19, r19
    53d6:	22 27       	eor	r18, r18
    53d8:	cb 01       	movw	r24, r22
    53da:	a0 e0       	ldi	r26, 0x00	; 0
    53dc:	b0 e0       	ldi	r27, 0x00	; 0
    53de:	28 0f       	add	r18, r24
    53e0:	39 1f       	adc	r19, r25
    53e2:	4a 1f       	adc	r20, r26
    53e4:	5b 1f       	adc	r21, r27
  return result;
}
    53e6:	b9 01       	movw	r22, r18
    53e8:	ca 01       	movw	r24, r20
    53ea:	08 95       	ret

000053ec <__vector_77>:


ISR(TCD0_OVF_vect)
{
    53ec:	1f 92       	push	r1
    53ee:	0f 92       	push	r0
    53f0:	0f b6       	in	r0, 0x3f	; 63
    53f2:	0f 92       	push	r0
    53f4:	11 24       	eor	r1, r1
    53f6:	8f 93       	push	r24
    53f8:	9f 93       	push	r25
    53fa:	af 93       	push	r26
    53fc:	bf 93       	push	r27
	UNIX_time++;
    53fe:	80 91 fb 29 	lds	r24, 0x29FB
    5402:	90 91 fc 29 	lds	r25, 0x29FC
    5406:	a0 91 fd 29 	lds	r26, 0x29FD
    540a:	b0 91 fe 29 	lds	r27, 0x29FE
    540e:	01 96       	adiw	r24, 0x01	; 1
    5410:	a1 1d       	adc	r26, r1
    5412:	b1 1d       	adc	r27, r1
    5414:	80 93 fb 29 	sts	0x29FB, r24
    5418:	90 93 fc 29 	sts	0x29FC, r25
    541c:	a0 93 fd 29 	sts	0x29FD, r26
    5420:	b0 93 fe 29 	sts	0x29FE, r27
 }
    5424:	bf 91       	pop	r27
    5426:	af 91       	pop	r26
    5428:	9f 91       	pop	r25
    542a:	8f 91       	pop	r24
    542c:	0f 90       	pop	r0
    542e:	0f be       	out	0x3f, r0	; 63
    5430:	0f 90       	pop	r0
    5432:	1f 90       	pop	r1
    5434:	18 95       	reti

00005436 <Sensors_Init>:

uint32_t result[4];

void Sensors_Init(void){
	
	ADCA.temperatureChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    5436:	e0 e0       	ldi	r30, 0x00	; 0
    5438:	f2 e0       	ldi	r31, 0x02	; 2
    543a:	92 e0       	ldi	r25, 0x02	; 2
    543c:	90 a3       	std	Z+32, r25	; 0x20
	ADCA.temperatureChannel.MUXCTRL = temperatureMUXPos | ground_temperatureMUXPos;
    543e:	8a e2       	ldi	r24, 0x2A	; 42
    5440:	81 a3       	std	Z+33, r24	; 0x21

	ADCA.humidityChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    5442:	90 a7       	std	Z+40, r25	; 0x28
	ADCA.humidityChannel.MUXCTRL = humidityMUXPos | ground_humidityMUXPos;
    5444:	83 e2       	ldi	r24, 0x23	; 35
    5446:	81 a7       	std	Z+41, r24	; 0x29

	ADCA.microphoneChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    5448:	90 af       	std	Z+56, r25	; 0x38
	ADCA.microphoneChannel.MUXCTRL = microphoneMUXPos | ground_microphoneMUXPos;
    544a:	88 e3       	ldi	r24, 0x38	; 56
    544c:	81 af       	std	Z+57, r24	; 0x39

	ADCA.pressureChannel.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// set input mode
    544e:	90 ab       	std	Z+48, r25	; 0x30
	ADCA.pressureChannel.MUXCTRL = pressureMUXPos | ground_pressureMUXPos;
    5450:	81 e3       	ldi	r24, 0x31	; 49
    5452:	81 ab       	std	Z+49, r24	; 0x31

	ADCA.PRESCALER = (ADCA.PRESCALER & (~ADC_PRESCALER_gm)) | ADC_PRESCALER_DIV64_gc;
    5454:	84 81       	ldd	r24, Z+4	; 0x04
    5456:	88 7f       	andi	r24, 0xF8	; 248
    5458:	84 60       	ori	r24, 0x04	; 4
    545a:	84 83       	std	Z+4, r24	; 0x04

	ADCA.REFCTRL = ADC_REFSEL_VCC_gc;
    545c:	80 e1       	ldi	r24, 0x10	; 16
    545e:	82 83       	std	Z+2, r24	; 0x02
	ADCA.EVCTRL = (ADCA.EVCTRL & (~ADC_SWEEP_gm)) | ADC_SWEEP_0123_gc;
    5460:	83 81       	ldd	r24, Z+3	; 0x03
    5462:	80 6c       	ori	r24, 0xC0	; 192
    5464:	83 83       	std	Z+3, r24	; 0x03

	ADCA.CTRLB |= ADC_FREERUN_bm | ADC_CONMODE_bm; // free running mode
    5466:	81 81       	ldd	r24, Z+1	; 0x01
    5468:	88 61       	ori	r24, 0x18	; 24
    546a:	81 83       	std	Z+1, r24	; 0x01
	

	ADCA.temperatureChannel.CTRL |= ADC_CH_START_bm;
    546c:	80 a1       	ldd	r24, Z+32	; 0x20
    546e:	80 68       	ori	r24, 0x80	; 128
    5470:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.humidityChannel.CTRL |= ADC_CH_START_bm;
    5472:	80 a5       	ldd	r24, Z+40	; 0x28
    5474:	80 68       	ori	r24, 0x80	; 128
    5476:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.microphoneChannel.CTRL |= ADC_CH_START_bm;
    5478:	80 ad       	ldd	r24, Z+56	; 0x38
    547a:	80 68       	ori	r24, 0x80	; 128
    547c:	80 af       	std	Z+56, r24	; 0x38
	ADCA.pressureChannel.CTRL |= ADC_CH_START_bm;
    547e:	80 a9       	ldd	r24, Z+48	; 0x30
    5480:	80 68       	ori	r24, 0x80	; 128
    5482:	80 ab       	std	Z+48, r24	; 0x30

	ADCA.CTRLA = ADC_ENABLE_bm;							// enable adc w/o calibrating
    5484:	81 e0       	ldi	r24, 0x01	; 1
    5486:	80 83       	st	Z, r24
	// div  = 1024
	// per  = 15625
	// => 14745600/14400/1024 => 1 samples per second
	
	// Set period/TOP value
	TCD1.PER = 14400;
    5488:	e0 e4       	ldi	r30, 0x40	; 64
    548a:	f9 e0       	ldi	r31, 0x09	; 9
    548c:	80 e4       	ldi	r24, 0x40	; 64
    548e:	98 e3       	ldi	r25, 0x38	; 56
    5490:	86 a3       	std	Z+38, r24	; 0x26
    5492:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCD1.CTRLA = (TCD1.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    5494:	80 81       	ld	r24, Z
    5496:	80 7f       	andi	r24, 0xF0	; 240
    5498:	87 60       	ori	r24, 0x07	; 7
    549a:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	TCD1.INTCTRLA = (TCD1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    549c:	86 81       	ldd	r24, Z+6	; 0x06
    549e:	83 60       	ori	r24, 0x03	; 3
    54a0:	86 83       	std	Z+6, r24	; 0x06
	// per  = 256
	// => 14745600/8/256 => 8000 samples per second

	// Set period/TOP value

	TCF0.PER = 256; 				// 7.2khz
    54a2:	e0 e0       	ldi	r30, 0x00	; 0
    54a4:	fb e0       	ldi	r31, 0x0B	; 11
    54a6:	80 e0       	ldi	r24, 0x00	; 0
    54a8:	91 e0       	ldi	r25, 0x01	; 1
    54aa:	86 a3       	std	Z+38, r24	; 0x26
    54ac:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCF0.CTRLA = (TCF0.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;
    54ae:	80 81       	ld	r24, Z
    54b0:	80 7f       	andi	r24, 0xF0	; 240
    54b2:	84 60       	ori	r24, 0x04	; 4
    54b4:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCF0.INTCTRLA = (TCF0.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    54b6:	86 81       	ldd	r24, Z+6	; 0x06
    54b8:	83 60       	ori	r24, 0x03	; 3
    54ba:	86 83       	std	Z+6, r24	; 0x06

}
    54bc:	08 95       	ret

000054be <Sensors_ReadTemperature>:

uint16_t Sensors_ReadTemperature(void){
	uint32_t tmp =  ADCA.temperatureResult; //ADCA.groundResult;
    54be:	e0 e0       	ldi	r30, 0x00	; 0
    54c0:	f2 e0       	ldi	r31, 0x02	; 2
    54c2:	60 89       	ldd	r22, Z+16	; 0x10
    54c4:	71 89       	ldd	r23, Z+17	; 0x11
    54c6:	80 e0       	ldi	r24, 0x00	; 0
    54c8:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t tmp2 = 0;

	tmp *= 206250;
    54ca:	2a ea       	ldi	r18, 0xAA	; 170
    54cc:	35 e2       	ldi	r19, 0x25	; 37
    54ce:	43 e0       	ldi	r20, 0x03	; 3
    54d0:	50 e0       	ldi	r21, 0x00	; 0
    54d2:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    54d6:	67 5f       	subi	r22, 0xF7	; 247
    54d8:	7a 40       	sbci	r23, 0x0A	; 10
    54da:	88 4e       	sbci	r24, 0xE8	; 232
    54dc:	91 40       	sbci	r25, 0x01	; 1
    54de:	21 e5       	ldi	r18, 0x51	; 81
    54e0:	37 e7       	ldi	r19, 0x77	; 119
    54e2:	45 e0       	ldi	r20, 0x05	; 5
    54e4:	50 e0       	ldi	r21, 0x00	; 0
    54e6:	0e 94 87 43 	call	0x870e	; 0x870e <__udivmodsi4>
    54ea:	c9 01       	movw	r24, r18
	tmp -= 31984375;
	tmp2 = tmp / 358225;

	return tmp2;
}
    54ec:	08 95       	ret

000054ee <Sensors_ReadHumidity>:

uint8_t Sensors_ReadHumidity(void){
	uint32_t tmp =  ADCA.humidityResult;
    54ee:	e0 e0       	ldi	r30, 0x00	; 0
    54f0:	f2 e0       	ldi	r31, 0x02	; 2
    54f2:	62 89       	ldd	r22, Z+18	; 0x12
    54f4:	73 89       	ldd	r23, Z+19	; 0x13
    54f6:	80 e0       	ldi	r24, 0x00	; 0
    54f8:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t tmp2 = 0;

	tmp *= 7623;
    54fa:	27 ec       	ldi	r18, 0xC7	; 199
    54fc:	3d e1       	ldi	r19, 0x1D	; 29
    54fe:	40 e0       	ldi	r20, 0x00	; 0
    5500:	50 e0       	ldi	r21, 0x00	; 0
    5502:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    5506:	6c 59       	subi	r22, 0x9C	; 156
    5508:	7c 41       	sbci	r23, 0x1C	; 28
    550a:	8b 41       	sbci	r24, 0x1B	; 27
    550c:	90 40       	sbci	r25, 0x00	; 0
    550e:	28 ed       	ldi	r18, 0xD8	; 216
    5510:	3f e3       	ldi	r19, 0x3F	; 63
    5512:	41 e0       	ldi	r20, 0x01	; 1
    5514:	50 e0       	ldi	r21, 0x00	; 0
    5516:	0e 94 87 43 	call	0x870e	; 0x870e <__udivmodsi4>
    551a:	82 2f       	mov	r24, r18
	tmp -= 1776796;
	tmp2 = tmp / 81880;

	return tmp2;
}
    551c:	08 95       	ret

0000551e <Sensors_ReadMicrophone>:

uint8_t Sensors_ReadMicrophone(void){
	return ADCA.microphoneResult/16;
    551e:	e0 e0       	ldi	r30, 0x00	; 0
    5520:	f2 e0       	ldi	r31, 0x02	; 2
    5522:	86 89       	ldd	r24, Z+22	; 0x16
    5524:	97 89       	ldd	r25, Z+23	; 0x17
    5526:	f4 e0       	ldi	r31, 0x04	; 4
    5528:	96 95       	lsr	r25
    552a:	87 95       	ror	r24
    552c:	fa 95       	dec	r31
    552e:	e1 f7       	brne	.-8      	; 0x5528 <Sensors_ReadMicrophone+0xa>
}
    5530:	08 95       	ret

00005532 <Sensors_ReadPressure>:

uint8_t Sensors_ReadPressure(void){
	uint32_t tmp =  ADCA.pressureResult;
    5532:	e0 e0       	ldi	r30, 0x00	; 0
    5534:	f2 e0       	ldi	r31, 0x02	; 2
    5536:	64 89       	ldd	r22, Z+20	; 0x14
    5538:	75 89       	ldd	r23, Z+21	; 0x15
    553a:	80 e0       	ldi	r24, 0x00	; 0
    553c:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t tmp2 = 0;

	tmp *= 41250;
    553e:	22 e2       	ldi	r18, 0x22	; 34
    5540:	31 ea       	ldi	r19, 0xA1	; 161
    5542:	40 e0       	ldi	r20, 0x00	; 0
    5544:	50 e0       	ldi	r21, 0x00	; 0
    5546:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    554a:	6f 53       	subi	r22, 0x3F	; 63
    554c:	74 41       	sbci	r23, 0x14	; 20
    554e:	8e 49       	sbci	r24, 0x9E	; 158
    5550:	9f 4f       	sbci	r25, 0xFF	; 255
    5552:	27 ed       	ldi	r18, 0xD7	; 215
    5554:	36 e4       	ldi	r19, 0x46	; 70
    5556:	49 e0       	ldi	r20, 0x09	; 9
    5558:	50 e0       	ldi	r21, 0x00	; 0
    555a:	0e 94 87 43 	call	0x870e	; 0x870e <__udivmodsi4>
    555e:	82 2f       	mov	r24, r18
	tmp += 6417345;
	tmp2 = tmp / 607959;

	return tmp2;
}
    5560:	08 95       	ret

00005562 <Sensors_ResetTemperatureBuffers>:

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    5562:	10 92 04 2a 	sts	0x2A04, r1
  	temperatureBufferToWriteTo = 1;
    5566:	81 e0       	ldi	r24, 0x01	; 1
    5568:	80 93 ef 26 	sts	0x26EF, r24
	okToSendTemperatureBuffer1 = false;
    556c:	10 92 02 2a 	sts	0x2A02, r1
	okToSendTemperatureBuffer2 = false;
    5570:	10 92 03 2a 	sts	0x2A03, r1
}
    5574:	08 95       	ret

00005576 <Sensors_ResetPressureBuffers>:

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    5576:	10 92 07 2a 	sts	0x2A07, r1
	pressureBufferToWriteTo = 1;
    557a:	81 e0       	ldi	r24, 0x01	; 1
    557c:	80 93 f0 26 	sts	0x26F0, r24
	okToSendPressureBuffer1 = false;
    5580:	10 92 05 2a 	sts	0x2A05, r1
	okToSendPressureBuffer2 = false;
    5584:	10 92 06 2a 	sts	0x2A06, r1
}
    5588:	08 95       	ret

0000558a <Sensors_ResetHumidityBuffers>:

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    558a:	10 92 0a 2a 	sts	0x2A0A, r1
	humidityBufferToWriteTo = 1;
    558e:	81 e0       	ldi	r24, 0x01	; 1
    5590:	80 93 f1 26 	sts	0x26F1, r24
	okToSendHumidityBuffer1 = false;
    5594:	10 92 08 2a 	sts	0x2A08, r1
	okToSendHumidityBuffer2 = false;
    5598:	10 92 09 2a 	sts	0x2A09, r1
}
    559c:	08 95       	ret

0000559e <Sensors_ResetMicrophoneBuffers>:

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    559e:	10 92 0d 2a 	sts	0x2A0D, r1
    55a2:	10 92 0e 2a 	sts	0x2A0E, r1
	microphoneBufferToWriteTo = 1;
    55a6:	81 e0       	ldi	r24, 0x01	; 1
    55a8:	80 93 f2 26 	sts	0x26F2, r24
	okToSendMicrophoneBuffer1 = false;
    55ac:	10 92 0b 2a 	sts	0x2A0B, r1
	okToSendMicrophoneBuffer2 = false;
    55b0:	10 92 0c 2a 	sts	0x2A0C, r1
}
    55b4:	08 95       	ret

000055b6 <Sensors_ResetLightBuffers>:

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    55b6:	10 92 11 2a 	sts	0x2A11, r1
	lightBufferToWriteTo = 1;
    55ba:	81 e0       	ldi	r24, 0x01	; 1
    55bc:	80 93 f3 26 	sts	0x26F3, r24
	okToSendLightBuffer1 = false;
    55c0:	10 92 0f 2a 	sts	0x2A0F, r1
	okToSendLightBuffer2 = false;
    55c4:	10 92 10 2a 	sts	0x2A10, r1
}
    55c8:	08 95       	ret

000055ca <__vector_108>:

	} 
}

ISR(TCF0_OVF_vect)
{
    55ca:	1f 92       	push	r1
    55cc:	0f 92       	push	r0
    55ce:	0f b6       	in	r0, 0x3f	; 63
    55d0:	0f 92       	push	r0
    55d2:	0b b6       	in	r0, 0x3b	; 59
    55d4:	0f 92       	push	r0
    55d6:	11 24       	eor	r1, r1
    55d8:	0f 93       	push	r16
    55da:	1f 93       	push	r17
    55dc:	2f 93       	push	r18
    55de:	3f 93       	push	r19
    55e0:	4f 93       	push	r20
    55e2:	5f 93       	push	r21
    55e4:	6f 93       	push	r22
    55e6:	7f 93       	push	r23
    55e8:	8f 93       	push	r24
    55ea:	9f 93       	push	r25
    55ec:	af 93       	push	r26
    55ee:	bf 93       	push	r27
    55f0:	ef 93       	push	r30
    55f2:	ff 93       	push	r31
	if(recording && wantToRecordMicrophone){
    55f4:	80 91 00 2a 	lds	r24, 0x2A00
    55f8:	88 23       	and	r24, r24
    55fa:	09 f4       	brne	.+2      	; 0x55fe <__vector_108+0x34>
    55fc:	6b c0       	rjmp	.+214    	; 0x56d4 <__vector_108+0x10a>
    55fe:	80 91 14 2a 	lds	r24, 0x2A14
    5602:	88 23       	and	r24, r24
    5604:	09 f4       	brne	.+2      	; 0x5608 <__vector_108+0x3e>
    5606:	66 c0       	rjmp	.+204    	; 0x56d4 <__vector_108+0x10a>
	  if(microphoneBufferToWriteTo == 1){
    5608:	80 91 f2 26 	lds	r24, 0x26F2
    560c:	81 30       	cpi	r24, 0x01	; 1
    560e:	89 f5       	brne	.+98     	; 0x5672 <__vector_108+0xa8>
	    if(microphoneBufferCounter == 0){
    5610:	80 91 0d 2a 	lds	r24, 0x2A0D
    5614:	90 91 0e 2a 	lds	r25, 0x2A0E
    5618:	89 2b       	or	r24, r25
    561a:	51 f4       	brne	.+20     	; 0x5630 <__vector_108+0x66>
	    	microphoneSampleStartTime1 = Time_Get32BitTimer();
    561c:	0e 94 ce 29 	call	0x539c	; 0x539c <Time_Get32BitTimer>
    5620:	60 93 cc 29 	sts	0x29CC, r22
    5624:	70 93 cd 29 	sts	0x29CD, r23
    5628:	80 93 ce 29 	sts	0x29CE, r24
    562c:	90 93 cf 29 	sts	0x29CF, r25
	    }
	    microphoneBuffer1[microphoneBufferCounter] = Sensors_ReadMicrophone();
    5630:	00 91 0d 2a 	lds	r16, 0x2A0D
    5634:	10 91 0e 2a 	lds	r17, 0x2A0E
    5638:	0e 94 8f 2a 	call	0x551e	; 0x551e <Sensors_ReadMicrophone>
    563c:	04 5d       	subi	r16, 0xD4	; 212
    563e:	19 4c       	sbci	r17, 0xC9	; 201
    5640:	f8 01       	movw	r30, r16
    5642:	80 83       	st	Z, r24
	    microphoneBufferCounter++;
    5644:	80 91 0d 2a 	lds	r24, 0x2A0D
    5648:	90 91 0e 2a 	lds	r25, 0x2A0E
    564c:	01 96       	adiw	r24, 0x01	; 1
    564e:	80 93 0d 2a 	sts	0x2A0D, r24
    5652:	90 93 0e 2a 	sts	0x2A0E, r25
	    if(microphoneBufferCounter == microphoneNumberOfSamples){
    5656:	88 5e       	subi	r24, 0xE8	; 232
    5658:	93 40       	sbci	r25, 0x03	; 3
    565a:	e1 f5       	brne	.+120    	; 0x56d4 <__vector_108+0x10a>
	    	microphoneBufferCounter=0;
    565c:	10 92 0d 2a 	sts	0x2A0D, r1
    5660:	10 92 0e 2a 	sts	0x2A0E, r1
	    	microphoneBufferToWriteTo = 2;
    5664:	82 e0       	ldi	r24, 0x02	; 2
    5666:	80 93 f2 26 	sts	0x26F2, r24
	    	okToSendMicrophoneBuffer1 = true;
    566a:	81 e0       	ldi	r24, 0x01	; 1
    566c:	80 93 0b 2a 	sts	0x2A0B, r24
    5670:	31 c0       	rjmp	.+98     	; 0x56d4 <__vector_108+0x10a>
	    }
	  } else if (microphoneBufferToWriteTo == 2){
    5672:	82 30       	cpi	r24, 0x02	; 2
    5674:	79 f5       	brne	.+94     	; 0x56d4 <__vector_108+0x10a>
	    if(microphoneBufferCounter == 0){
    5676:	80 91 0d 2a 	lds	r24, 0x2A0D
    567a:	90 91 0e 2a 	lds	r25, 0x2A0E
    567e:	89 2b       	or	r24, r25
    5680:	51 f4       	brne	.+20     	; 0x5696 <__vector_108+0xcc>
	    	microphoneSampleStartTime2 = Time_Get32BitTimer();
    5682:	0e 94 ce 29 	call	0x539c	; 0x539c <Time_Get32BitTimer>
    5686:	60 93 d0 29 	sts	0x29D0, r22
    568a:	70 93 d1 29 	sts	0x29D1, r23
    568e:	80 93 d2 29 	sts	0x29D2, r24
    5692:	90 93 d3 29 	sts	0x29D3, r25
	    }
	    microphoneBuffer2[microphoneBufferCounter] = Sensors_ReadMicrophone();
    5696:	00 91 0d 2a 	lds	r16, 0x2A0D
    569a:	10 91 0e 2a 	lds	r17, 0x2A0E
    569e:	0e 94 8f 2a 	call	0x551e	; 0x551e <Sensors_ReadMicrophone>
    56a2:	0a 5b       	subi	r16, 0xBA	; 186
    56a4:	1e 4c       	sbci	r17, 0xCE	; 206
    56a6:	f8 01       	movw	r30, r16
    56a8:	80 83       	st	Z, r24
	    microphoneBufferCounter++;
    56aa:	80 91 0d 2a 	lds	r24, 0x2A0D
    56ae:	90 91 0e 2a 	lds	r25, 0x2A0E
    56b2:	01 96       	adiw	r24, 0x01	; 1
    56b4:	80 93 0d 2a 	sts	0x2A0D, r24
    56b8:	90 93 0e 2a 	sts	0x2A0E, r25
	    if(microphoneBufferCounter == microphoneNumberOfSamples){
    56bc:	88 5e       	subi	r24, 0xE8	; 232
    56be:	93 40       	sbci	r25, 0x03	; 3
    56c0:	49 f4       	brne	.+18     	; 0x56d4 <__vector_108+0x10a>
	    	microphoneBufferCounter=0;
    56c2:	10 92 0d 2a 	sts	0x2A0D, r1
    56c6:	10 92 0e 2a 	sts	0x2A0E, r1
	    	microphoneBufferToWriteTo = 1;
    56ca:	81 e0       	ldi	r24, 0x01	; 1
    56cc:	80 93 f2 26 	sts	0x26F2, r24
	    	okToSendMicrophoneBuffer2 = true;
    56d0:	80 93 0c 2a 	sts	0x2A0C, r24
	    }
	  }
	}
}
    56d4:	ff 91       	pop	r31
    56d6:	ef 91       	pop	r30
    56d8:	bf 91       	pop	r27
    56da:	af 91       	pop	r26
    56dc:	9f 91       	pop	r25
    56de:	8f 91       	pop	r24
    56e0:	7f 91       	pop	r23
    56e2:	6f 91       	pop	r22
    56e4:	5f 91       	pop	r21
    56e6:	4f 91       	pop	r20
    56e8:	3f 91       	pop	r19
    56ea:	2f 91       	pop	r18
    56ec:	1f 91       	pop	r17
    56ee:	0f 91       	pop	r16
    56f0:	0f 90       	pop	r0
    56f2:	0b be       	out	0x3b, r0	; 59
    56f4:	0f 90       	pop	r0
    56f6:	0f be       	out	0x3f, r0	; 63
    56f8:	0f 90       	pop	r0
    56fa:	1f 90       	pop	r1
    56fc:	18 95       	reti

000056fe <Light_readByte>:
uint8_t Light_readByte(uint8_t location){
	uint8_t tmp;


	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    56fe:	30 91 e1 3a 	lds	r19, 0x3AE1
    5702:	93 2f       	mov	r25, r19
    5704:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | location;
    5706:	28 2f       	mov	r18, r24
    5708:	20 68       	ori	r18, 0x80	; 128
    570a:	20 93 38 41 	sts	0x4138, r18


	LightPort.MASTER.ADDR = writeAddress;
    570e:	e0 e8       	ldi	r30, 0x80	; 128
    5710:	f4 e0       	ldi	r31, 0x04	; 4
    5712:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    5714:	80 91 84 04 	lds	r24, 0x0484
    5718:	86 ff       	sbrs	r24, 6
    571a:	fc cf       	rjmp	.-8      	; 0x5714 <Light_readByte+0x16>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    571c:	e0 e8       	ldi	r30, 0x80	; 128
    571e:	f4 e0       	ldi	r31, 0x04	; 4
    5720:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    5722:	80 91 84 04 	lds	r24, 0x0484
    5726:	86 ff       	sbrs	r24, 6
    5728:	fc cf       	rjmp	.-8      	; 0x5722 <Light_readByte+0x24>
				//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    572a:	83 2f       	mov	r24, r19
    572c:	81 60       	ori	r24, 0x01	; 1
    572e:	80 93 8c 3a 	sts	0x3A8C, r24
	LightPort.MASTER.ADDR = writeAddress;
    5732:	e0 e8       	ldi	r30, 0x80	; 128
    5734:	f4 e0       	ldi	r31, 0x04	; 4
    5736:	86 83       	std	Z+6, r24	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    5738:	80 91 84 04 	lds	r24, 0x0484
    573c:	87 ff       	sbrs	r24, 7
    573e:	fc cf       	rjmp	.-8      	; 0x5738 <Light_readByte+0x3a>
				//Wait for Read flag to come on
	}

	tmp = LightPort.MASTER.DATA;
    5740:	80 91 87 04 	lds	r24, 0x0487

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    5744:	97 e0       	ldi	r25, 0x07	; 7
    5746:	e0 e8       	ldi	r30, 0x80	; 128
    5748:	f4 e0       	ldi	r31, 0x04	; 4
    574a:	93 83       	std	Z+3, r25	; 0x03

	return tmp;
}
    574c:	08 95       	ret

0000574e <Light_readColors>:

void Light_readColors(void){

	while(Light_readByte(Control) && ADC_Valid_bm == 0);
    574e:	80 e0       	ldi	r24, 0x00	; 0
    5750:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <Light_readByte>

	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    5754:	20 91 e1 3a 	lds	r18, 0x3AE1
    5758:	92 2f       	mov	r25, r18
    575a:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | 0x10;
    575c:	80 e9       	ldi	r24, 0x90	; 144
    575e:	80 93 38 41 	sts	0x4138, r24

	LightPort.MASTER.ADDR = writeAddress;
    5762:	e0 e8       	ldi	r30, 0x80	; 128
    5764:	f4 e0       	ldi	r31, 0x04	; 4
    5766:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    5768:	80 91 84 04 	lds	r24, 0x0484
    576c:	86 ff       	sbrs	r24, 6
    576e:	fc cf       	rjmp	.-8      	; 0x5768 <Light_readColors+0x1a>
					//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    5770:	80 e9       	ldi	r24, 0x90	; 144
    5772:	e0 e8       	ldi	r30, 0x80	; 128
    5774:	f4 e0       	ldi	r31, 0x04	; 4
    5776:	87 83       	std	Z+7, r24	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    5778:	80 91 84 04 	lds	r24, 0x0484
    577c:	86 ff       	sbrs	r24, 6
    577e:	fc cf       	rjmp	.-8      	; 0x5778 <Light_readColors+0x2a>
					//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    5780:	82 2f       	mov	r24, r18
    5782:	81 60       	ori	r24, 0x01	; 1
    5784:	80 93 8c 3a 	sts	0x3A8C, r24
	LightPort.MASTER.ADDR = writeAddress;
    5788:	e0 e8       	ldi	r30, 0x80	; 128
    578a:	f4 e0       	ldi	r31, 0x04	; 4
    578c:	86 83       	std	Z+6, r24	; 0x06
    578e:	e4 ec       	ldi	r30, 0xC4	; 196
    5790:	fa e3       	ldi	r31, 0x3A	; 58
    5792:	90 e0       	ldi	r25, 0x00	; 0


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    5794:	a0 e8       	ldi	r26, 0x80	; 128
    5796:	b4 e0       	ldi	r27, 0x04	; 4
		}

		colors8[i] = LightPort.MASTER.DATA;
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    5798:	22 e0       	ldi	r18, 0x02	; 2
	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    579a:	80 91 84 04 	lds	r24, 0x0484
    579e:	87 ff       	sbrs	r24, 7
    57a0:	fc cf       	rjmp	.-8      	; 0x579a <Light_readColors+0x4c>
				//Wait for Read flag to come on
		}

		colors8[i] = LightPort.MASTER.DATA;
    57a2:	80 91 87 04 	lds	r24, 0x0487
    57a6:	80 83       	st	Z, r24
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
    57a8:	97 30       	cpi	r25, 0x07	; 7
    57aa:	19 f0       	breq	.+6      	; 0x57b2 <Light_readColors+0x64>
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    57ac:	13 96       	adiw	r26, 0x03	; 3
    57ae:	2c 93       	st	X, r18
    57b0:	13 97       	sbiw	r26, 0x03	; 3

	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
    57b2:	9f 5f       	subi	r25, 0xFF	; 255
    57b4:	31 96       	adiw	r30, 0x01	; 1
    57b6:	98 30       	cpi	r25, 0x08	; 8
    57b8:	81 f7       	brne	.-32     	; 0x579a <Light_readColors+0x4c>
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		}
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    57ba:	87 e0       	ldi	r24, 0x07	; 7
    57bc:	e0 e8       	ldi	r30, 0x80	; 128
    57be:	f4 e0       	ldi	r31, 0x04	; 4
    57c0:	83 83       	std	Z+3, r24	; 0x03

	colors[green] = colors8[1]*256 + colors8[0];
    57c2:	90 91 c5 3a 	lds	r25, 0x3AC5
    57c6:	80 e0       	ldi	r24, 0x00	; 0
    57c8:	20 91 c4 3a 	lds	r18, 0x3AC4
    57cc:	82 0f       	add	r24, r18
    57ce:	91 1d       	adc	r25, r1
    57d0:	80 93 e7 2c 	sts	0x2CE7, r24
    57d4:	90 93 e8 2c 	sts	0x2CE8, r25
	colors[red]   = colors8[3]*256 + colors8[2];
    57d8:	90 91 c7 3a 	lds	r25, 0x3AC7
    57dc:	80 e0       	ldi	r24, 0x00	; 0
    57de:	20 91 c6 3a 	lds	r18, 0x3AC6
    57e2:	82 0f       	add	r24, r18
    57e4:	91 1d       	adc	r25, r1
    57e6:	80 93 e9 2c 	sts	0x2CE9, r24
    57ea:	90 93 ea 2c 	sts	0x2CEA, r25
	colors[blue]  = colors8[5]*256 + colors8[4];
    57ee:	90 91 c9 3a 	lds	r25, 0x3AC9
    57f2:	80 e0       	ldi	r24, 0x00	; 0
    57f4:	20 91 c8 3a 	lds	r18, 0x3AC8
    57f8:	82 0f       	add	r24, r18
    57fa:	91 1d       	adc	r25, r1
    57fc:	80 93 eb 2c 	sts	0x2CEB, r24
    5800:	90 93 ec 2c 	sts	0x2CEC, r25
	colors[clear] = colors8[7]*256 + colors8[6];
    5804:	90 91 cb 3a 	lds	r25, 0x3ACB
    5808:	80 e0       	ldi	r24, 0x00	; 0
    580a:	20 91 ca 3a 	lds	r18, 0x3ACA
    580e:	82 0f       	add	r24, r18
    5810:	91 1d       	adc	r25, r1
    5812:	80 93 ed 2c 	sts	0x2CED, r24
    5816:	90 93 ee 2c 	sts	0x2CEE, r25
}
    581a:	08 95       	ret

0000581c <Light_returnColor>:

uint16_t Light_returnColor(uint8_t color){
    581c:	e8 2f       	mov	r30, r24
    581e:	f0 e0       	ldi	r31, 0x00	; 0
    5820:	ee 0f       	add	r30, r30
    5822:	ff 1f       	adc	r31, r31
    5824:	e9 51       	subi	r30, 0x19	; 25
    5826:	f3 4d       	sbci	r31, 0xD3	; 211
	return colors[color];
}
    5828:	80 81       	ld	r24, Z
    582a:	91 81       	ldd	r25, Z+1	; 0x01
    582c:	08 95       	ret

0000582e <Light_writeByte>:

void Light_writeByte(uint8_t location, uint8_t toSend){
	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    582e:	90 91 e1 3a 	lds	r25, 0x3AE1
    5832:	9e 7f       	andi	r25, 0xFE	; 254
    5834:	90 93 8c 3a 	sts	0x3A8C, r25
	commandCode = 0b10000000 | location;
    5838:	28 2f       	mov	r18, r24
    583a:	20 68       	ori	r18, 0x80	; 128
    583c:	20 93 38 41 	sts	0x4138, r18

	LightPort.MASTER.ADDR = writeAddress;
    5840:	e0 e8       	ldi	r30, 0x80	; 128
    5842:	f4 e0       	ldi	r31, 0x04	; 4
    5844:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    5846:	80 91 84 04 	lds	r24, 0x0484
    584a:	86 ff       	sbrs	r24, 6
    584c:	fc cf       	rjmp	.-8      	; 0x5846 <Light_writeByte+0x18>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    584e:	e0 e8       	ldi	r30, 0x80	; 128
    5850:	f4 e0       	ldi	r31, 0x04	; 4
    5852:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    5854:	80 91 84 04 	lds	r24, 0x0484
    5858:	86 ff       	sbrs	r24, 6
    585a:	fc cf       	rjmp	.-8      	; 0x5854 <Light_writeByte+0x26>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = toSend;
    585c:	e0 e8       	ldi	r30, 0x80	; 128
    585e:	f4 e0       	ldi	r31, 0x04	; 4
    5860:	67 83       	std	Z+7, r22	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    5862:	80 91 84 04 	lds	r24, 0x0484
    5866:	86 ff       	sbrs	r24, 6
    5868:	fc cf       	rjmp	.-8      	; 0x5862 <Light_writeByte+0x34>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    586a:	87 e0       	ldi	r24, 0x07	; 7
    586c:	e0 e8       	ldi	r30, 0x80	; 128
    586e:	f4 e0       	ldi	r31, 0x04	; 4
    5870:	83 83       	std	Z+3, r24	; 0x03

}
    5872:	08 95       	ret

00005874 <Light_setGain>:


void Light_setGain(void){
	Light_writeByte(Control, Power_bm);
    5874:	80 e0       	ldi	r24, 0x00	; 0
    5876:	61 e0       	ldi	r22, 0x01	; 1
    5878:	0e 94 17 2c 	call	0x582e	; 0x582e <Light_writeByte>
	Light_writeByte(Timing, (integrationTime[gainSelector] | Integ_Mode_Auto_bm));
    587c:	80 91 ff 29 	lds	r24, 0x29FF
    5880:	e9 eb       	ldi	r30, 0xB9	; 185
    5882:	f6 e2       	ldi	r31, 0x26	; 38
    5884:	e8 0f       	add	r30, r24
    5886:	f1 1d       	adc	r31, r1
    5888:	81 e0       	ldi	r24, 0x01	; 1
    588a:	60 81       	ld	r22, Z
    588c:	0e 94 17 2c 	call	0x582e	; 0x582e <Light_writeByte>
	Light_writeByte(Gain, (gainSetting[gainSelector]));
    5890:	80 91 ff 29 	lds	r24, 0x29FF
    5894:	e2 ec       	ldi	r30, 0xC2	; 194
    5896:	f6 e2       	ldi	r31, 0x26	; 38
    5898:	e8 0f       	add	r30, r24
    589a:	f1 1d       	adc	r31, r1
    589c:	87 e0       	ldi	r24, 0x07	; 7
    589e:	60 81       	ld	r22, Z
    58a0:	0e 94 17 2c 	call	0x582e	; 0x582e <Light_writeByte>
	Light_writeByte(Control, (ADC_En_bm | Power_bm));
    58a4:	80 e0       	ldi	r24, 0x00	; 0
    58a6:	63 e0       	ldi	r22, 0x03	; 3
    58a8:	0e 94 17 2c 	call	0x582e	; 0x582e <Light_writeByte>
}
    58ac:	08 95       	ret

000058ae <Light_Init>:
uint8_t  colors8[8];



void Light_Init(uint8_t address){
	deviceAddress = address;
    58ae:	80 93 e1 3a 	sts	0x3AE1, r24

	LightPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    58b2:	e0 e8       	ldi	r30, 0x80	; 128
    58b4:	f4 e0       	ldi	r31, 0x04	; 4
    58b6:	88 e0       	ldi	r24, 0x08	; 8
    58b8:	81 83       	std	Z+1, r24	; 0x01

	//Set Master Read Acknowledge Action to ACK
	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    58ba:	84 e0       	ldi	r24, 0x04	; 4
    58bc:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//14.7456Mhz/(2*400kHz) - 5 = 13
	LightPort.MASTER.BAUD = 13;
    58be:	8d e0       	ldi	r24, 0x0D	; 13
    58c0:	85 83       	std	Z+5, r24	; 0x05

	LightPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    58c2:	81 e0       	ldi	r24, 0x01	; 1
    58c4:	84 83       	std	Z+4, r24	; 0x04

	gainSelector = 0;
    58c6:	10 92 ff 29 	sts	0x29FF, r1
	Light_setGain();
    58ca:	0e 94 3a 2c 	call	0x5874	; 0x5874 <Light_setGain>
}
    58ce:	08 95       	ret

000058d0 <__vector_83>:
	okToSendLightBuffer2 = false;
}


ISR(TCD1_OVF_vect)
{
    58d0:	1f 92       	push	r1
    58d2:	0f 92       	push	r0
    58d4:	0f b6       	in	r0, 0x3f	; 63
    58d6:	0f 92       	push	r0
    58d8:	0b b6       	in	r0, 0x3b	; 59
    58da:	0f 92       	push	r0
    58dc:	11 24       	eor	r1, r1
    58de:	6f 92       	push	r6
    58e0:	7f 92       	push	r7
    58e2:	8f 92       	push	r8
    58e4:	9f 92       	push	r9
    58e6:	af 92       	push	r10
    58e8:	bf 92       	push	r11
    58ea:	cf 92       	push	r12
    58ec:	df 92       	push	r13
    58ee:	ef 92       	push	r14
    58f0:	ff 92       	push	r15
    58f2:	0f 93       	push	r16
    58f4:	1f 93       	push	r17
    58f6:	2f 93       	push	r18
    58f8:	3f 93       	push	r19
    58fa:	4f 93       	push	r20
    58fc:	5f 93       	push	r21
    58fe:	6f 93       	push	r22
    5900:	7f 93       	push	r23
    5902:	8f 93       	push	r24
    5904:	9f 93       	push	r25
    5906:	af 93       	push	r26
    5908:	bf 93       	push	r27
    590a:	cf 93       	push	r28
    590c:	df 93       	push	r29
    590e:	ef 93       	push	r30
    5910:	ff 93       	push	r31
	if(recording){
    5912:	80 91 00 2a 	lds	r24, 0x2A00
    5916:	88 23       	and	r24, r24
    5918:	09 f4       	brne	.+2      	; 0x591c <__vector_83+0x4c>
    591a:	5e c2       	rjmp	.+1212   	; 0x5dd8 <__vector_83+0x508>
	  rtcBlockCounter++;
    591c:	80 91 13 2a 	lds	r24, 0x2A13
    5920:	8f 5f       	subi	r24, 0xFF	; 255
    5922:	80 93 13 2a 	sts	0x2A13, r24
	  if(rtcBlockCounter == 0){
    5926:	88 23       	and	r24, r24
    5928:	19 f4       	brne	.+6      	; 0x5930 <__vector_83+0x60>
	    okToSendRTCBlock = true;
    592a:	81 e0       	ldi	r24, 0x01	; 1
    592c:	80 93 12 2a 	sts	0x2A12, r24
	  }

	  if(wantToRecordTemperature){
    5930:	80 91 f4 26 	lds	r24, 0x26F4
    5934:	88 23       	and	r24, r24
    5936:	09 f4       	brne	.+2      	; 0x593a <__vector_83+0x6a>
    5938:	58 c0       	rjmp	.+176    	; 0x59ea <__vector_83+0x11a>
		  if(temperatureBufferToWriteTo == 1){
    593a:	80 91 ef 26 	lds	r24, 0x26EF
    593e:	81 30       	cpi	r24, 0x01	; 1
    5940:	51 f5       	brne	.+84     	; 0x5996 <__vector_83+0xc6>
			  if(temperatureBufferCounter == 0){
    5942:	80 91 04 2a 	lds	r24, 0x2A04
    5946:	88 23       	and	r24, r24
    5948:	51 f4       	brne	.+20     	; 0x595e <__vector_83+0x8e>
				  temperatureSampleStartTime1 = Time_Get32BitTimer();
    594a:	0e 94 ce 29 	call	0x539c	; 0x539c <Time_Get32BitTimer>
    594e:	60 93 b4 29 	sts	0x29B4, r22
    5952:	70 93 b5 29 	sts	0x29B5, r23
    5956:	80 93 b6 29 	sts	0x29B6, r24
    595a:	90 93 b7 29 	sts	0x29B7, r25
			  }
			  temperatureBuffer1[temperatureBufferCounter] = Sensors_ReadTemperature();
    595e:	80 91 04 2a 	lds	r24, 0x2A04
    5962:	c8 2f       	mov	r28, r24
    5964:	d0 e0       	ldi	r29, 0x00	; 0
    5966:	0e 94 5f 2a 	call	0x54be	; 0x54be <Sensors_ReadTemperature>
    596a:	cc 0f       	add	r28, r28
    596c:	dd 1f       	adc	r29, r29
    596e:	cc 5e       	subi	r28, 0xEC	; 236
    5970:	d5 4c       	sbci	r29, 0xC5	; 197
    5972:	88 83       	st	Y, r24
    5974:	99 83       	std	Y+1, r25	; 0x01
			  temperatureBufferCounter++;
    5976:	80 91 04 2a 	lds	r24, 0x2A04
    597a:	8f 5f       	subi	r24, 0xFF	; 255
    597c:	80 93 04 2a 	sts	0x2A04, r24
			  if(temperatureBufferCounter == temperatureNumberOfSamples){
    5980:	8a 30       	cpi	r24, 0x0A	; 10
    5982:	99 f5       	brne	.+102    	; 0x59ea <__vector_83+0x11a>
				  temperatureBufferCounter=0;
    5984:	10 92 04 2a 	sts	0x2A04, r1
				  temperatureBufferToWriteTo = 2;
    5988:	82 e0       	ldi	r24, 0x02	; 2
    598a:	80 93 ef 26 	sts	0x26EF, r24
				  okToSendTemperatureBuffer1 = true;
    598e:	81 e0       	ldi	r24, 0x01	; 1
    5990:	80 93 02 2a 	sts	0x2A02, r24
    5994:	2a c0       	rjmp	.+84     	; 0x59ea <__vector_83+0x11a>
			  }
		  } else if (temperatureBufferToWriteTo == 2){
    5996:	82 30       	cpi	r24, 0x02	; 2
    5998:	41 f5       	brne	.+80     	; 0x59ea <__vector_83+0x11a>
			  if(temperatureBufferCounter == 0){
    599a:	80 91 04 2a 	lds	r24, 0x2A04
    599e:	88 23       	and	r24, r24
    59a0:	51 f4       	brne	.+20     	; 0x59b6 <__vector_83+0xe6>
				  temperatureSampleStartTime2 = Time_Get32BitTimer();
    59a2:	0e 94 ce 29 	call	0x539c	; 0x539c <Time_Get32BitTimer>
    59a6:	60 93 b8 29 	sts	0x29B8, r22
    59aa:	70 93 b9 29 	sts	0x29B9, r23
    59ae:	80 93 ba 29 	sts	0x29BA, r24
    59b2:	90 93 bb 29 	sts	0x29BB, r25
			  }
			  temperatureBuffer2[temperatureBufferCounter] = Sensors_ReadTemperature();
    59b6:	80 91 04 2a 	lds	r24, 0x2A04
    59ba:	c8 2f       	mov	r28, r24
    59bc:	d0 e0       	ldi	r29, 0x00	; 0
    59be:	0e 94 5f 2a 	call	0x54be	; 0x54be <Sensors_ReadTemperature>
    59c2:	cc 0f       	add	r28, r28
    59c4:	dd 1f       	adc	r29, r29
    59c6:	c3 57       	subi	r28, 0x73	; 115
    59c8:	d5 4c       	sbci	r29, 0xC5	; 197
    59ca:	88 83       	st	Y, r24
    59cc:	99 83       	std	Y+1, r25	; 0x01
			  temperatureBufferCounter++;
    59ce:	80 91 04 2a 	lds	r24, 0x2A04
    59d2:	8f 5f       	subi	r24, 0xFF	; 255
    59d4:	80 93 04 2a 	sts	0x2A04, r24
			  if(temperatureBufferCounter == temperatureNumberOfSamples){
    59d8:	8a 30       	cpi	r24, 0x0A	; 10
    59da:	39 f4       	brne	.+14     	; 0x59ea <__vector_83+0x11a>
				  temperatureBufferCounter=0;
    59dc:	10 92 04 2a 	sts	0x2A04, r1
				  temperatureBufferToWriteTo = 1;
    59e0:	81 e0       	ldi	r24, 0x01	; 1
    59e2:	80 93 ef 26 	sts	0x26EF, r24
				  okToSendTemperatureBuffer2 = true;
    59e6:	80 93 03 2a 	sts	0x2A03, r24
			  }
		  }
	  }

	  if(wantToRecordHumidity){
    59ea:	80 91 f6 26 	lds	r24, 0x26F6
    59ee:	88 23       	and	r24, r24
    59f0:	09 f4       	brne	.+2      	; 0x59f4 <__vector_83+0x124>
    59f2:	52 c0       	rjmp	.+164    	; 0x5a98 <__vector_83+0x1c8>
		  if(humidityBufferToWriteTo == 1){
    59f4:	80 91 f1 26 	lds	r24, 0x26F1
    59f8:	81 30       	cpi	r24, 0x01	; 1
    59fa:	39 f5       	brne	.+78     	; 0x5a4a <__vector_83+0x17a>
			  if(humidityBufferCounter == 0){
    59fc:	80 91 0a 2a 	lds	r24, 0x2A0A
    5a00:	88 23       	and	r24, r24
    5a02:	51 f4       	brne	.+20     	; 0x5a18 <__vector_83+0x148>
				  humiditySampleStartTime1 = Time_Get32BitTimer();
    5a04:	0e 94 ce 29 	call	0x539c	; 0x539c <Time_Get32BitTimer>
    5a08:	60 93 bc 29 	sts	0x29BC, r22
    5a0c:	70 93 bd 29 	sts	0x29BD, r23
    5a10:	80 93 be 29 	sts	0x29BE, r24
    5a14:	90 93 bf 29 	sts	0x29BF, r25
			  }
			  humidityBuffer1[humidityBufferCounter] = Sensors_ReadHumidity();
    5a18:	80 91 0a 2a 	lds	r24, 0x2A0A
    5a1c:	c8 2f       	mov	r28, r24
    5a1e:	d0 e0       	ldi	r29, 0x00	; 0
    5a20:	0e 94 77 2a 	call	0x54ee	; 0x54ee <Sensors_ReadHumidity>
    5a24:	ca 52       	subi	r28, 0x2A	; 42
    5a26:	d5 4c       	sbci	r29, 0xC5	; 197
    5a28:	88 83       	st	Y, r24
			  humidityBufferCounter++;
    5a2a:	80 91 0a 2a 	lds	r24, 0x2A0A
    5a2e:	8f 5f       	subi	r24, 0xFF	; 255
    5a30:	80 93 0a 2a 	sts	0x2A0A, r24
			  if(humidityBufferCounter == humidityNumberOfSamples){
    5a34:	8a 30       	cpi	r24, 0x0A	; 10
    5a36:	81 f5       	brne	.+96     	; 0x5a98 <__vector_83+0x1c8>
				  humidityBufferCounter=0;
    5a38:	10 92 0a 2a 	sts	0x2A0A, r1
				  humidityBufferToWriteTo = 2;
    5a3c:	82 e0       	ldi	r24, 0x02	; 2
    5a3e:	80 93 f1 26 	sts	0x26F1, r24
				  okToSendHumidityBuffer1 = true;
    5a42:	81 e0       	ldi	r24, 0x01	; 1
    5a44:	80 93 08 2a 	sts	0x2A08, r24
    5a48:	27 c0       	rjmp	.+78     	; 0x5a98 <__vector_83+0x1c8>
			  }
		  } else if (humidityBufferToWriteTo == 2){
    5a4a:	82 30       	cpi	r24, 0x02	; 2
    5a4c:	29 f5       	brne	.+74     	; 0x5a98 <__vector_83+0x1c8>
			  if(humidityBufferCounter == 0){
    5a4e:	80 91 0a 2a 	lds	r24, 0x2A0A
    5a52:	88 23       	and	r24, r24
    5a54:	51 f4       	brne	.+20     	; 0x5a6a <__vector_83+0x19a>
				  humiditySampleStartTime2 = Time_Get32BitTimer();
    5a56:	0e 94 ce 29 	call	0x539c	; 0x539c <Time_Get32BitTimer>
    5a5a:	60 93 c0 29 	sts	0x29C0, r22
    5a5e:	70 93 c1 29 	sts	0x29C1, r23
    5a62:	80 93 c2 29 	sts	0x29C2, r24
    5a66:	90 93 c3 29 	sts	0x29C3, r25
			  }
			  humidityBuffer2[humidityBufferCounter] = Sensors_ReadHumidity();
    5a6a:	80 91 0a 2a 	lds	r24, 0x2A0A
    5a6e:	c8 2f       	mov	r28, r24
    5a70:	d0 e0       	ldi	r29, 0x00	; 0
    5a72:	0e 94 77 2a 	call	0x54ee	; 0x54ee <Sensors_ReadHumidity>
    5a76:	c2 5d       	subi	r28, 0xD2	; 210
    5a78:	de 4b       	sbci	r29, 0xBE	; 190
    5a7a:	88 83       	st	Y, r24
			  humidityBufferCounter++;
    5a7c:	80 91 0a 2a 	lds	r24, 0x2A0A
    5a80:	8f 5f       	subi	r24, 0xFF	; 255
    5a82:	80 93 0a 2a 	sts	0x2A0A, r24
			  if(humidityBufferCounter == humidityNumberOfSamples){
    5a86:	8a 30       	cpi	r24, 0x0A	; 10
    5a88:	39 f4       	brne	.+14     	; 0x5a98 <__vector_83+0x1c8>
				  humidityBufferCounter=0;
    5a8a:	10 92 0a 2a 	sts	0x2A0A, r1
				  humidityBufferToWriteTo = 1;
    5a8e:	81 e0       	ldi	r24, 0x01	; 1
    5a90:	80 93 f1 26 	sts	0x26F1, r24
				  okToSendHumidityBuffer2 = true;
    5a94:	80 93 09 2a 	sts	0x2A09, r24
			  }
	  	  }
	  }

	  if(wantToRecordPressure){
    5a98:	80 91 f5 26 	lds	r24, 0x26F5
    5a9c:	88 23       	and	r24, r24
    5a9e:	09 f4       	brne	.+2      	; 0x5aa2 <__vector_83+0x1d2>
    5aa0:	52 c0       	rjmp	.+164    	; 0x5b46 <__vector_83+0x276>
		  if(pressureBufferToWriteTo == 1){
    5aa2:	80 91 f0 26 	lds	r24, 0x26F0
    5aa6:	81 30       	cpi	r24, 0x01	; 1
    5aa8:	39 f5       	brne	.+78     	; 0x5af8 <__vector_83+0x228>
			  if(pressureBufferCounter == 0){
    5aaa:	80 91 07 2a 	lds	r24, 0x2A07
    5aae:	88 23       	and	r24, r24
    5ab0:	51 f4       	brne	.+20     	; 0x5ac6 <__vector_83+0x1f6>
				  pressureSampleStartTime1 = Time_Get32BitTimer();
    5ab2:	0e 94 ce 29 	call	0x539c	; 0x539c <Time_Get32BitTimer>
    5ab6:	60 93 c4 29 	sts	0x29C4, r22
    5aba:	70 93 c5 29 	sts	0x29C5, r23
    5abe:	80 93 c6 29 	sts	0x29C6, r24
    5ac2:	90 93 c7 29 	sts	0x29C7, r25
			  }
			  pressureBuffer1[pressureBufferCounter] = Sensors_ReadPressure();
    5ac6:	80 91 07 2a 	lds	r24, 0x2A07
    5aca:	c8 2f       	mov	r28, r24
    5acc:	d0 e0       	ldi	r29, 0x00	; 0
    5ace:	0e 94 99 2a 	call	0x5532	; 0x5532 <Sensors_ReadPressure>
    5ad2:	c1 51       	subi	r28, 0x11	; 17
    5ad4:	d3 4d       	sbci	r29, 0xD3	; 211
    5ad6:	88 83       	st	Y, r24
			  pressureBufferCounter++;
    5ad8:	80 91 07 2a 	lds	r24, 0x2A07
    5adc:	8f 5f       	subi	r24, 0xFF	; 255
    5ade:	80 93 07 2a 	sts	0x2A07, r24
			  if(pressureBufferCounter == pressureNumberOfSamples){
    5ae2:	8a 30       	cpi	r24, 0x0A	; 10
    5ae4:	81 f5       	brne	.+96     	; 0x5b46 <__vector_83+0x276>
				  pressureBufferCounter=0;
    5ae6:	10 92 07 2a 	sts	0x2A07, r1
				  pressureBufferToWriteTo = 2;
    5aea:	82 e0       	ldi	r24, 0x02	; 2
    5aec:	80 93 f0 26 	sts	0x26F0, r24
				  okToSendPressureBuffer1 = true;
    5af0:	81 e0       	ldi	r24, 0x01	; 1
    5af2:	80 93 05 2a 	sts	0x2A05, r24
    5af6:	27 c0       	rjmp	.+78     	; 0x5b46 <__vector_83+0x276>
			  }
		  } else if (pressureBufferToWriteTo == 2){
    5af8:	82 30       	cpi	r24, 0x02	; 2
    5afa:	29 f5       	brne	.+74     	; 0x5b46 <__vector_83+0x276>
			  if(pressureBufferCounter == 0){
    5afc:	80 91 07 2a 	lds	r24, 0x2A07
    5b00:	88 23       	and	r24, r24
    5b02:	51 f4       	brne	.+20     	; 0x5b18 <__vector_83+0x248>
				  pressureSampleStartTime2 = Time_Get32BitTimer();
    5b04:	0e 94 ce 29 	call	0x539c	; 0x539c <Time_Get32BitTimer>
    5b08:	60 93 c8 29 	sts	0x29C8, r22
    5b0c:	70 93 c9 29 	sts	0x29C9, r23
    5b10:	80 93 ca 29 	sts	0x29CA, r24
    5b14:	90 93 cb 29 	sts	0x29CB, r25
			  }
			  pressureBuffer2[pressureBufferCounter] = Sensors_ReadPressure();
    5b18:	80 91 07 2a 	lds	r24, 0x2A07
    5b1c:	c8 2f       	mov	r28, r24
    5b1e:	d0 e0       	ldi	r29, 0x00	; 0
    5b20:	0e 94 99 2a 	call	0x5532	; 0x5532 <Sensors_ReadPressure>
    5b24:	c6 54       	subi	r28, 0x46	; 70
    5b26:	d5 4c       	sbci	r29, 0xC5	; 197
    5b28:	88 83       	st	Y, r24
			  pressureBufferCounter++;
    5b2a:	80 91 07 2a 	lds	r24, 0x2A07
    5b2e:	8f 5f       	subi	r24, 0xFF	; 255
    5b30:	80 93 07 2a 	sts	0x2A07, r24
			if(pressureBufferCounter == pressureNumberOfSamples){
    5b34:	8a 30       	cpi	r24, 0x0A	; 10
    5b36:	39 f4       	brne	.+14     	; 0x5b46 <__vector_83+0x276>
				pressureBufferCounter=0;
    5b38:	10 92 07 2a 	sts	0x2A07, r1
				pressureBufferToWriteTo = 1;
    5b3c:	81 e0       	ldi	r24, 0x01	; 1
    5b3e:	80 93 f0 26 	sts	0x26F0, r24
				okToSendPressureBuffer2 = true;
    5b42:	80 93 06 2a 	sts	0x2A06, r24
			}
		  }
	  }

	  if(wantToRecordLight){
    5b46:	80 91 f7 26 	lds	r24, 0x26F7
    5b4a:	88 23       	and	r24, r24
    5b4c:	09 f4       	brne	.+2      	; 0x5b50 <__vector_83+0x280>
    5b4e:	44 c1       	rjmp	.+648    	; 0x5dd8 <__vector_83+0x508>

		  Light_readColors();
    5b50:	0e 94 a7 2b 	call	0x574e	; 0x574e <Light_readColors>
		  Light_readColors();
    5b54:	0e 94 a7 2b 	call	0x574e	; 0x574e <Light_readColors>
		  Light_readColors();
    5b58:	0e 94 a7 2b 	call	0x574e	; 0x574e <Light_readColors>

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    5b5c:	e0 91 ff 29 	lds	r30, 0x29FF
    5b60:	f0 e0       	ldi	r31, 0x00	; 0
    5b62:	ee 0f       	add	r30, r30
    5b64:	ff 1f       	adc	r31, r31
    5b66:	ee 0f       	add	r30, r30
    5b68:	ff 1f       	adc	r31, r31
    5b6a:	e5 53       	subi	r30, 0x35	; 53
    5b6c:	f9 4d       	sbci	r31, 0xD9	; 217
    5b6e:	a0 80       	ld	r10, Z
    5b70:	b1 80       	ldd	r11, Z+1	; 0x01
    5b72:	c2 80       	ldd	r12, Z+2	; 0x02
    5b74:	d3 80       	ldd	r13, Z+3	; 0x03
    5b76:	ee e1       	ldi	r30, 0x1E	; 30
    5b78:	f1 e4       	ldi	r31, 0x41	; 65
    5b7a:	c7 ee       	ldi	r28, 0xE7	; 231
    5b7c:	dc e2       	ldi	r29, 0x2C	; 44
		  Light_readColors();
		  Light_readColors();
		  Light_readColors();

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
    5b7e:	10 82       	st	Z, r1
    5b80:	11 82       	std	Z+1, r1	; 0x01
    5b82:	12 82       	std	Z+2, r1	; 0x02
    5b84:	13 82       	std	Z+3, r1	; 0x03
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
				  result[j] += Light_returnColor(j);
    5b86:	88 81       	ld	r24, Y
    5b88:	99 81       	ldd	r25, Y+1	; 0x01
    5b8a:	3c 01       	movw	r6, r24
    5b8c:	88 24       	eor	r8, r8
    5b8e:	99 24       	eor	r9, r9
    5b90:	ee 24       	eor	r14, r14
    5b92:	ff 24       	eor	r15, r15
    5b94:	87 01       	movw	r16, r14
    5b96:	a6 01       	movw	r20, r12
    5b98:	95 01       	movw	r18, r10
    5b9a:	e6 0c       	add	r14, r6
    5b9c:	f7 1c       	adc	r15, r7
    5b9e:	08 1d       	adc	r16, r8
    5ba0:	19 1d       	adc	r17, r9
    5ba2:	2a 0d       	add	r18, r10
    5ba4:	3b 1d       	adc	r19, r11
    5ba6:	4c 1d       	adc	r20, r12
    5ba8:	5d 1d       	adc	r21, r13
		  Light_readColors();
		  Light_readColors();

		  for(uint8_t j = 0; j < 4; j++){
			  result[j] = 0;
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    5baa:	da 01       	movw	r26, r20
    5bac:	c9 01       	movw	r24, r18
    5bae:	8a 19       	sub	r24, r10
    5bb0:	9b 09       	sbc	r25, r11
    5bb2:	ac 09       	sbc	r26, r12
    5bb4:	bd 09       	sbc	r27, r13
    5bb6:	80 50       	subi	r24, 0x00	; 0
    5bb8:	9c 42       	sbci	r25, 0x2C	; 44
    5bba:	a1 40       	sbci	r26, 0x01	; 1
    5bbc:	b0 40       	sbci	r27, 0x00	; 0
    5bbe:	68 f3       	brcs	.-38     	; 0x5b9a <__vector_83+0x2ca>
    5bc0:	e1 92       	st	Z+, r14
    5bc2:	f1 92       	st	Z+, r15
    5bc4:	01 93       	st	Z+, r16
    5bc6:	11 93       	st	Z+, r17
    5bc8:	22 96       	adiw	r28, 0x02	; 2

		  Light_readColors();
		  Light_readColors();
		  Light_readColors();

		  for(uint8_t j = 0; j < 4; j++){
    5bca:	81 e4       	ldi	r24, 0x41	; 65
    5bcc:	ee 32       	cpi	r30, 0x2E	; 46
    5bce:	f8 07       	cpc	r31, r24
    5bd0:	b1 f6       	brne	.-84     	; 0x5b7e <__vector_83+0x2ae>
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
				  result[j] += Light_returnColor(j);
			  }
		  }

		  if(lightBufferToWriteTo == 1){
    5bd2:	80 91 f3 26 	lds	r24, 0x26F3
    5bd6:	81 30       	cpi	r24, 0x01	; 1
    5bd8:	09 f0       	breq	.+2      	; 0x5bdc <__vector_83+0x30c>
    5bda:	72 c0       	rjmp	.+228    	; 0x5cc0 <__vector_83+0x3f0>
			  if(lightBufferCounter == 0){
    5bdc:	80 91 11 2a 	lds	r24, 0x2A11
    5be0:	88 23       	and	r24, r24
    5be2:	51 f4       	brne	.+20     	; 0x5bf8 <__vector_83+0x328>
	  			  lightSampleStartTime1 = Time_Get32BitTimer();
    5be4:	0e 94 ce 29 	call	0x539c	; 0x539c <Time_Get32BitTimer>
    5be8:	60 93 d4 29 	sts	0x29D4, r22
    5bec:	70 93 d5 29 	sts	0x29D5, r23
    5bf0:	80 93 d6 29 	sts	0x29D6, r24
    5bf4:	90 93 d7 29 	sts	0x29D7, r25
			  }
			  lightBuffer1[lightBufferCounter] = result[0];
    5bf8:	20 91 11 2a 	lds	r18, 0x2A11
    5bfc:	e2 2f       	mov	r30, r18
    5bfe:	f0 e0       	ldi	r31, 0x00	; 0
    5c00:	ee 0f       	add	r30, r30
    5c02:	ff 1f       	adc	r31, r31
    5c04:	ee 0f       	add	r30, r30
    5c06:	ff 1f       	adc	r31, r31
    5c08:	e3 59       	subi	r30, 0x93	; 147
    5c0a:	f7 4b       	sbci	r31, 0xB7	; 183
    5c0c:	80 91 1e 41 	lds	r24, 0x411E
    5c10:	90 91 1f 41 	lds	r25, 0x411F
    5c14:	a0 91 20 41 	lds	r26, 0x4120
    5c18:	b0 91 21 41 	lds	r27, 0x4121
    5c1c:	80 83       	st	Z, r24
    5c1e:	91 83       	std	Z+1, r25	; 0x01
    5c20:	a2 83       	std	Z+2, r26	; 0x02
    5c22:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    5c24:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[1];
    5c26:	e2 2f       	mov	r30, r18
    5c28:	f0 e0       	ldi	r31, 0x00	; 0
    5c2a:	ee 0f       	add	r30, r30
    5c2c:	ff 1f       	adc	r31, r31
    5c2e:	ee 0f       	add	r30, r30
    5c30:	ff 1f       	adc	r31, r31
    5c32:	e3 59       	subi	r30, 0x93	; 147
    5c34:	f7 4b       	sbci	r31, 0xB7	; 183
    5c36:	80 91 22 41 	lds	r24, 0x4122
    5c3a:	90 91 23 41 	lds	r25, 0x4123
    5c3e:	a0 91 24 41 	lds	r26, 0x4124
    5c42:	b0 91 25 41 	lds	r27, 0x4125
    5c46:	80 83       	st	Z, r24
    5c48:	91 83       	std	Z+1, r25	; 0x01
    5c4a:	a2 83       	std	Z+2, r26	; 0x02
    5c4c:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    5c4e:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[2];
    5c50:	e2 2f       	mov	r30, r18
    5c52:	f0 e0       	ldi	r31, 0x00	; 0
    5c54:	ee 0f       	add	r30, r30
    5c56:	ff 1f       	adc	r31, r31
    5c58:	ee 0f       	add	r30, r30
    5c5a:	ff 1f       	adc	r31, r31
    5c5c:	e3 59       	subi	r30, 0x93	; 147
    5c5e:	f7 4b       	sbci	r31, 0xB7	; 183
    5c60:	80 91 26 41 	lds	r24, 0x4126
    5c64:	90 91 27 41 	lds	r25, 0x4127
    5c68:	a0 91 28 41 	lds	r26, 0x4128
    5c6c:	b0 91 29 41 	lds	r27, 0x4129
    5c70:	80 83       	st	Z, r24
    5c72:	91 83       	std	Z+1, r25	; 0x01
    5c74:	a2 83       	std	Z+2, r26	; 0x02
    5c76:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    5c78:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = result[3];
    5c7a:	e2 2f       	mov	r30, r18
    5c7c:	f0 e0       	ldi	r31, 0x00	; 0
    5c7e:	ee 0f       	add	r30, r30
    5c80:	ff 1f       	adc	r31, r31
    5c82:	ee 0f       	add	r30, r30
    5c84:	ff 1f       	adc	r31, r31
    5c86:	e3 59       	subi	r30, 0x93	; 147
    5c88:	f7 4b       	sbci	r31, 0xB7	; 183
    5c8a:	80 91 2a 41 	lds	r24, 0x412A
    5c8e:	90 91 2b 41 	lds	r25, 0x412B
    5c92:	a0 91 2c 41 	lds	r26, 0x412C
    5c96:	b0 91 2d 41 	lds	r27, 0x412D
    5c9a:	80 83       	st	Z, r24
    5c9c:	91 83       	std	Z+1, r25	; 0x01
    5c9e:	a2 83       	std	Z+2, r26	; 0x02
    5ca0:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    5ca2:	2f 5f       	subi	r18, 0xFF	; 255
    5ca4:	20 93 11 2a 	sts	0x2A11, r18
			  if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    5ca8:	28 32       	cpi	r18, 0x28	; 40
    5caa:	09 f0       	breq	.+2      	; 0x5cae <__vector_83+0x3de>
    5cac:	7b c0       	rjmp	.+246    	; 0x5da4 <__vector_83+0x4d4>
				  lightBufferCounter=0;
    5cae:	10 92 11 2a 	sts	0x2A11, r1
				  lightBufferToWriteTo = 2;
    5cb2:	82 e0       	ldi	r24, 0x02	; 2
    5cb4:	80 93 f3 26 	sts	0x26F3, r24
				  okToSendLightBuffer1 = true;
    5cb8:	81 e0       	ldi	r24, 0x01	; 1
    5cba:	80 93 0f 2a 	sts	0x2A0F, r24
    5cbe:	72 c0       	rjmp	.+228    	; 0x5da4 <__vector_83+0x4d4>
			  }
		  } else if (lightBufferToWriteTo == 2){
    5cc0:	82 30       	cpi	r24, 0x02	; 2
    5cc2:	09 f0       	breq	.+2      	; 0x5cc6 <__vector_83+0x3f6>
    5cc4:	6f c0       	rjmp	.+222    	; 0x5da4 <__vector_83+0x4d4>
			  if(lightBufferCounter == 0){
    5cc6:	80 91 11 2a 	lds	r24, 0x2A11
    5cca:	88 23       	and	r24, r24
    5ccc:	51 f4       	brne	.+20     	; 0x5ce2 <__vector_83+0x412>
				  lightSampleStartTime2 = Time_Get32BitTimer();
    5cce:	0e 94 ce 29 	call	0x539c	; 0x539c <Time_Get32BitTimer>
    5cd2:	60 93 d8 29 	sts	0x29D8, r22
    5cd6:	70 93 d9 29 	sts	0x29D9, r23
    5cda:	80 93 da 29 	sts	0x29DA, r24
    5cde:	90 93 db 29 	sts	0x29DB, r25
			  }
			  lightBuffer2[lightBufferCounter] = result[0];
    5ce2:	20 91 11 2a 	lds	r18, 0x2A11
    5ce6:	e2 2f       	mov	r30, r18
    5ce8:	f0 e0       	ldi	r31, 0x00	; 0
    5cea:	ee 0f       	add	r30, r30
    5cec:	ff 1f       	adc	r31, r31
    5cee:	ee 0f       	add	r30, r30
    5cf0:	ff 1f       	adc	r31, r31
    5cf2:	e6 5a       	subi	r30, 0xA6	; 166
    5cf4:	fa 4c       	sbci	r31, 0xCA	; 202
    5cf6:	80 91 1e 41 	lds	r24, 0x411E
    5cfa:	90 91 1f 41 	lds	r25, 0x411F
    5cfe:	a0 91 20 41 	lds	r26, 0x4120
    5d02:	b0 91 21 41 	lds	r27, 0x4121
    5d06:	80 83       	st	Z, r24
    5d08:	91 83       	std	Z+1, r25	; 0x01
    5d0a:	a2 83       	std	Z+2, r26	; 0x02
    5d0c:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    5d0e:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[1];
    5d10:	e2 2f       	mov	r30, r18
    5d12:	f0 e0       	ldi	r31, 0x00	; 0
    5d14:	ee 0f       	add	r30, r30
    5d16:	ff 1f       	adc	r31, r31
    5d18:	ee 0f       	add	r30, r30
    5d1a:	ff 1f       	adc	r31, r31
    5d1c:	e6 5a       	subi	r30, 0xA6	; 166
    5d1e:	fa 4c       	sbci	r31, 0xCA	; 202
    5d20:	80 91 22 41 	lds	r24, 0x4122
    5d24:	90 91 23 41 	lds	r25, 0x4123
    5d28:	a0 91 24 41 	lds	r26, 0x4124
    5d2c:	b0 91 25 41 	lds	r27, 0x4125
    5d30:	80 83       	st	Z, r24
    5d32:	91 83       	std	Z+1, r25	; 0x01
    5d34:	a2 83       	std	Z+2, r26	; 0x02
    5d36:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    5d38:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[2];
    5d3a:	e2 2f       	mov	r30, r18
    5d3c:	f0 e0       	ldi	r31, 0x00	; 0
    5d3e:	ee 0f       	add	r30, r30
    5d40:	ff 1f       	adc	r31, r31
    5d42:	ee 0f       	add	r30, r30
    5d44:	ff 1f       	adc	r31, r31
    5d46:	e6 5a       	subi	r30, 0xA6	; 166
    5d48:	fa 4c       	sbci	r31, 0xCA	; 202
    5d4a:	80 91 26 41 	lds	r24, 0x4126
    5d4e:	90 91 27 41 	lds	r25, 0x4127
    5d52:	a0 91 28 41 	lds	r26, 0x4128
    5d56:	b0 91 29 41 	lds	r27, 0x4129
    5d5a:	80 83       	st	Z, r24
    5d5c:	91 83       	std	Z+1, r25	; 0x01
    5d5e:	a2 83       	std	Z+2, r26	; 0x02
    5d60:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    5d62:	2f 5f       	subi	r18, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = result[3];
    5d64:	e2 2f       	mov	r30, r18
    5d66:	f0 e0       	ldi	r31, 0x00	; 0
    5d68:	ee 0f       	add	r30, r30
    5d6a:	ff 1f       	adc	r31, r31
    5d6c:	ee 0f       	add	r30, r30
    5d6e:	ff 1f       	adc	r31, r31
    5d70:	e6 5a       	subi	r30, 0xA6	; 166
    5d72:	fa 4c       	sbci	r31, 0xCA	; 202
    5d74:	80 91 2a 41 	lds	r24, 0x412A
    5d78:	90 91 2b 41 	lds	r25, 0x412B
    5d7c:	a0 91 2c 41 	lds	r26, 0x412C
    5d80:	b0 91 2d 41 	lds	r27, 0x412D
    5d84:	80 83       	st	Z, r24
    5d86:	91 83       	std	Z+1, r25	; 0x01
    5d88:	a2 83       	std	Z+2, r26	; 0x02
    5d8a:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    5d8c:	2f 5f       	subi	r18, 0xFF	; 255
    5d8e:	20 93 11 2a 	sts	0x2A11, r18
			  if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    5d92:	28 32       	cpi	r18, 0x28	; 40
    5d94:	39 f4       	brne	.+14     	; 0x5da4 <__vector_83+0x4d4>
				  lightBufferCounter=0;
    5d96:	10 92 11 2a 	sts	0x2A11, r1
				  lightBufferToWriteTo = 1;
    5d9a:	81 e0       	ldi	r24, 0x01	; 1
    5d9c:	80 93 f3 26 	sts	0x26F3, r24
				  okToSendLightBuffer2 = true;
    5da0:	80 93 10 2a 	sts	0x2A10, r24
	colors[blue]  = colors8[5]*256 + colors8[4];
	colors[clear] = colors8[7]*256 + colors8[6];
}

uint16_t Light_returnColor(uint8_t color){
	return colors[color];
    5da4:	20 91 ed 2c 	lds	r18, 0x2CED
    5da8:	30 91 ee 2c 	lds	r19, 0x2CEE
			  }
		  }


		  if((Light_returnColor(clear) > 49000) && (gainSelector!= 0)){			// saturated -> decrease gain
    5dac:	6f eb       	ldi	r22, 0xBF	; 191
    5dae:	29 36       	cpi	r18, 0x69	; 105
    5db0:	36 07       	cpc	r19, r22
    5db2:	30 f0       	brcs	.+12     	; 0x5dc0 <__vector_83+0x4f0>
    5db4:	80 91 ff 29 	lds	r24, 0x29FF
    5db8:	88 23       	and	r24, r24
    5dba:	11 f0       	breq	.+4      	; 0x5dc0 <__vector_83+0x4f0>
			gainSelector--;
    5dbc:	81 50       	subi	r24, 0x01	; 1
    5dbe:	08 c0       	rjmp	.+16     	; 0x5dd0 <__vector_83+0x500>
			Light_setGain();
		  } else if ((Light_returnColor(clear) < 16000) && (gainSelector!= 8)){			// too low  -> increase gain
    5dc0:	20 58       	subi	r18, 0x80	; 128
    5dc2:	3e 43       	sbci	r19, 0x3E	; 62
    5dc4:	48 f4       	brcc	.+18     	; 0x5dd8 <__vector_83+0x508>
    5dc6:	80 91 ff 29 	lds	r24, 0x29FF
    5dca:	88 30       	cpi	r24, 0x08	; 8
    5dcc:	29 f0       	breq	.+10     	; 0x5dd8 <__vector_83+0x508>
			gainSelector++;
    5dce:	8f 5f       	subi	r24, 0xFF	; 255
    5dd0:	80 93 ff 29 	sts	0x29FF, r24
			Light_setGain();
    5dd4:	0e 94 3a 2c 	call	0x5874	; 0x5874 <Light_setGain>




	} 
}
    5dd8:	ff 91       	pop	r31
    5dda:	ef 91       	pop	r30
    5ddc:	df 91       	pop	r29
    5dde:	cf 91       	pop	r28
    5de0:	bf 91       	pop	r27
    5de2:	af 91       	pop	r26
    5de4:	9f 91       	pop	r25
    5de6:	8f 91       	pop	r24
    5de8:	7f 91       	pop	r23
    5dea:	6f 91       	pop	r22
    5dec:	5f 91       	pop	r21
    5dee:	4f 91       	pop	r20
    5df0:	3f 91       	pop	r19
    5df2:	2f 91       	pop	r18
    5df4:	1f 91       	pop	r17
    5df6:	0f 91       	pop	r16
    5df8:	ff 90       	pop	r15
    5dfa:	ef 90       	pop	r14
    5dfc:	df 90       	pop	r13
    5dfe:	cf 90       	pop	r12
    5e00:	bf 90       	pop	r11
    5e02:	af 90       	pop	r10
    5e04:	9f 90       	pop	r9
    5e06:	8f 90       	pop	r8
    5e08:	7f 90       	pop	r7
    5e0a:	6f 90       	pop	r6
    5e0c:	0f 90       	pop	r0
    5e0e:	0b be       	out	0x3b, r0	; 59
    5e10:	0f 90       	pop	r0
    5e12:	0f be       	out	0x3f, r0	; 63
    5e14:	0f 90       	pop	r0
    5e16:	1f 90       	pop	r1
    5e18:	18 95       	reti

00005e1a <RTC_UTCSecsToTime>:
	RTC_sendBytes(17,msg,RTCAddress);
}

//Takes in UTC Epoch Time since 1970
//Returns calendar time in time_t struct
time_t * RTC_UTCSecsToTime(uint32_t UTCSecs, time_t * tm) {
    5e1a:	8f 92       	push	r8
    5e1c:	9f 92       	push	r9
    5e1e:	af 92       	push	r10
    5e20:	bf 92       	push	r11
    5e22:	cf 92       	push	r12
    5e24:	df 92       	push	r13
    5e26:	ef 92       	push	r14
    5e28:	ff 92       	push	r15
    5e2a:	0f 93       	push	r16
    5e2c:	1f 93       	push	r17
    5e2e:	cf 93       	push	r28
    5e30:	df 93       	push	r29
    5e32:	7b 01       	movw	r14, r22
    5e34:	8c 01       	movw	r16, r24
    5e36:	ea 01       	movw	r28, r20
	uint8_t year;
	uint8_t month, monthLength;
	unsigned long days;
	
	tm->Second = UTCSecs % 60;
    5e38:	2c e3       	ldi	r18, 0x3C	; 60
    5e3a:	30 e0       	ldi	r19, 0x00	; 0
    5e3c:	40 e0       	ldi	r20, 0x00	; 0
    5e3e:	50 e0       	ldi	r21, 0x00	; 0
    5e40:	0e 94 87 43 	call	0x870e	; 0x870e <__udivmodsi4>
    5e44:	69 83       	std	Y+1, r22	; 0x01
	UTCSecs /= 60; // now it is minutes
    5e46:	c8 01       	movw	r24, r16
    5e48:	b7 01       	movw	r22, r14
    5e4a:	2c e3       	ldi	r18, 0x3C	; 60
    5e4c:	30 e0       	ldi	r19, 0x00	; 0
    5e4e:	40 e0       	ldi	r20, 0x00	; 0
    5e50:	50 e0       	ldi	r21, 0x00	; 0
    5e52:	0e 94 87 43 	call	0x870e	; 0x870e <__udivmodsi4>
    5e56:	12 2f       	mov	r17, r18
    5e58:	03 2f       	mov	r16, r19
    5e5a:	f4 2e       	mov	r15, r20
    5e5c:	e5 2e       	mov	r14, r21
	tm->Minute = UTCSecs % 60;
    5e5e:	62 2f       	mov	r22, r18
    5e60:	73 2f       	mov	r23, r19
    5e62:	84 2f       	mov	r24, r20
    5e64:	95 2f       	mov	r25, r21
    5e66:	2c e3       	ldi	r18, 0x3C	; 60
    5e68:	30 e0       	ldi	r19, 0x00	; 0
    5e6a:	40 e0       	ldi	r20, 0x00	; 0
    5e6c:	50 e0       	ldi	r21, 0x00	; 0
    5e6e:	0e 94 87 43 	call	0x870e	; 0x870e <__udivmodsi4>
    5e72:	6a 83       	std	Y+2, r22	; 0x02
	UTCSecs /= 60; // now it is hours
    5e74:	61 2f       	mov	r22, r17
    5e76:	70 2f       	mov	r23, r16
    5e78:	8f 2d       	mov	r24, r15
    5e7a:	9e 2d       	mov	r25, r14
    5e7c:	2c e3       	ldi	r18, 0x3C	; 60
    5e7e:	30 e0       	ldi	r19, 0x00	; 0
    5e80:	40 e0       	ldi	r20, 0x00	; 0
    5e82:	50 e0       	ldi	r21, 0x00	; 0
    5e84:	0e 94 87 43 	call	0x870e	; 0x870e <__udivmodsi4>
    5e88:	12 2f       	mov	r17, r18
    5e8a:	03 2f       	mov	r16, r19
    5e8c:	f4 2e       	mov	r15, r20
    5e8e:	e5 2e       	mov	r14, r21
	tm->Hour = UTCSecs % 24;
    5e90:	62 2f       	mov	r22, r18
    5e92:	73 2f       	mov	r23, r19
    5e94:	84 2f       	mov	r24, r20
    5e96:	95 2f       	mov	r25, r21
    5e98:	28 e1       	ldi	r18, 0x18	; 24
    5e9a:	30 e0       	ldi	r19, 0x00	; 0
    5e9c:	40 e0       	ldi	r20, 0x00	; 0
    5e9e:	50 e0       	ldi	r21, 0x00	; 0
    5ea0:	0e 94 87 43 	call	0x870e	; 0x870e <__udivmodsi4>
    5ea4:	6b 83       	std	Y+3, r22	; 0x03
	UTCSecs /= 24; // now it is days
    5ea6:	61 2f       	mov	r22, r17
    5ea8:	70 2f       	mov	r23, r16
    5eaa:	8f 2d       	mov	r24, r15
    5eac:	9e 2d       	mov	r25, r14
    5eae:	28 e1       	ldi	r18, 0x18	; 24
    5eb0:	30 e0       	ldi	r19, 0x00	; 0
    5eb2:	40 e0       	ldi	r20, 0x00	; 0
    5eb4:	50 e0       	ldi	r21, 0x00	; 0
    5eb6:	0e 94 87 43 	call	0x870e	; 0x870e <__udivmodsi4>
    5eba:	79 01       	movw	r14, r18
    5ebc:	8a 01       	movw	r16, r20
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
    5ebe:	c8 01       	movw	r24, r16
    5ec0:	b7 01       	movw	r22, r14
    5ec2:	6c 5f       	subi	r22, 0xFC	; 252
    5ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ec6:	8f 4f       	sbci	r24, 0xFF	; 255
    5ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    5eca:	27 e0       	ldi	r18, 0x07	; 7
    5ecc:	30 e0       	ldi	r19, 0x00	; 0
    5ece:	40 e0       	ldi	r20, 0x00	; 0
    5ed0:	50 e0       	ldi	r21, 0x00	; 0
    5ed2:	0e 94 87 43 	call	0x870e	; 0x870e <__udivmodsi4>
    5ed6:	6f 5f       	subi	r22, 0xFF	; 255
    5ed8:	6c 83       	std	Y+4, r22	; 0x04
    5eda:	20 e0       	ldi	r18, 0x00	; 0
    5edc:	aa 24       	eor	r10, r10
    5ede:	bb 24       	eor	r11, r11
    5ee0:	65 01       	movw	r12, r10
    5ee2:	01 c0       	rjmp	.+2      	; 0x5ee6 <RTC_UTCSecsToTime+0xcc>
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
		year++;
    5ee4:	2f 5f       	subi	r18, 0xFF	; 255
	UTCSecs /= 24; // now it is days
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
    5ee6:	82 2e       	mov	r8, r18
    5ee8:	99 24       	eor	r9, r9
    5eea:	f4 01       	movw	r30, r8
    5eec:	ee 54       	subi	r30, 0x4E	; 78
    5eee:	f8 4f       	sbci	r31, 0xF8	; 248
    5ef0:	cf 01       	movw	r24, r30
    5ef2:	83 70       	andi	r24, 0x03	; 3
    5ef4:	90 70       	andi	r25, 0x00	; 0
    5ef6:	89 2b       	or	r24, r25
    5ef8:	99 f4       	brne	.+38     	; 0x5f20 <RTC_UTCSecsToTime+0x106>
    5efa:	cf 01       	movw	r24, r30
    5efc:	64 e6       	ldi	r22, 0x64	; 100
    5efe:	70 e0       	ldi	r23, 0x00	; 0
    5f00:	0e 94 74 43 	call	0x86e8	; 0x86e8 <__divmodhi4>
    5f04:	89 2b       	or	r24, r25
    5f06:	39 f4       	brne	.+14     	; 0x5f16 <RTC_UTCSecsToTime+0xfc>
    5f08:	cf 01       	movw	r24, r30
    5f0a:	60 e9       	ldi	r22, 0x90	; 144
    5f0c:	71 e0       	ldi	r23, 0x01	; 1
    5f0e:	0e 94 74 43 	call	0x86e8	; 0x86e8 <__divmodhi4>
    5f12:	89 2b       	or	r24, r25
    5f14:	29 f4       	brne	.+10     	; 0x5f20 <RTC_UTCSecsToTime+0x106>
    5f16:	8e e6       	ldi	r24, 0x6E	; 110
    5f18:	91 e0       	ldi	r25, 0x01	; 1
    5f1a:	a0 e0       	ldi	r26, 0x00	; 0
    5f1c:	b0 e0       	ldi	r27, 0x00	; 0
    5f1e:	04 c0       	rjmp	.+8      	; 0x5f28 <RTC_UTCSecsToTime+0x10e>
    5f20:	8d e6       	ldi	r24, 0x6D	; 109
    5f22:	91 e0       	ldi	r25, 0x01	; 1
    5f24:	a0 e0       	ldi	r26, 0x00	; 0
    5f26:	b0 e0       	ldi	r27, 0x00	; 0
    5f28:	a8 0e       	add	r10, r24
    5f2a:	b9 1e       	adc	r11, r25
    5f2c:	ca 1e       	adc	r12, r26
    5f2e:	db 1e       	adc	r13, r27
    5f30:	c5 01       	movw	r24, r10
    5f32:	a0 e0       	ldi	r26, 0x00	; 0
    5f34:	b0 e0       	ldi	r27, 0x00	; 0
    5f36:	e8 16       	cp	r14, r24
    5f38:	f9 06       	cpc	r15, r25
    5f3a:	0a 07       	cpc	r16, r26
    5f3c:	1b 07       	cpc	r17, r27
    5f3e:	90 f6       	brcc	.-92     	; 0x5ee4 <RTC_UTCSecsToTime+0xca>
		year++;
	}
	
	tm->Year = year; // year is offset from 1970 
    5f40:	2f 83       	std	Y+7, r18	; 0x07

	
	days -= LEAP_YEAR(year) ? 366 : 365;
    5f42:	f4 01       	movw	r30, r8
    5f44:	ee 54       	subi	r30, 0x4E	; 78
    5f46:	f8 4f       	sbci	r31, 0xF8	; 248
    5f48:	a3 e0       	ldi	r26, 0x03	; 3
    5f4a:	8a 2e       	mov	r8, r26
    5f4c:	91 2c       	mov	r9, r1
    5f4e:	8e 22       	and	r8, r30
    5f50:	9f 22       	and	r9, r31
    5f52:	81 14       	cp	r8, r1
    5f54:	91 04       	cpc	r9, r1
    5f56:	99 f4       	brne	.+38     	; 0x5f7e <RTC_UTCSecsToTime+0x164>
    5f58:	cf 01       	movw	r24, r30
    5f5a:	64 e6       	ldi	r22, 0x64	; 100
    5f5c:	70 e0       	ldi	r23, 0x00	; 0
    5f5e:	0e 94 74 43 	call	0x86e8	; 0x86e8 <__divmodhi4>
    5f62:	89 2b       	or	r24, r25
    5f64:	39 f4       	brne	.+14     	; 0x5f74 <RTC_UTCSecsToTime+0x15a>
    5f66:	cf 01       	movw	r24, r30
    5f68:	60 e9       	ldi	r22, 0x90	; 144
    5f6a:	71 e0       	ldi	r23, 0x01	; 1
    5f6c:	0e 94 74 43 	call	0x86e8	; 0x86e8 <__divmodhi4>
    5f70:	89 2b       	or	r24, r25
    5f72:	29 f4       	brne	.+10     	; 0x5f7e <RTC_UTCSecsToTime+0x164>
    5f74:	8e e6       	ldi	r24, 0x6E	; 110
    5f76:	91 e0       	ldi	r25, 0x01	; 1
    5f78:	a0 e0       	ldi	r26, 0x00	; 0
    5f7a:	b0 e0       	ldi	r27, 0x00	; 0
    5f7c:	04 c0       	rjmp	.+8      	; 0x5f86 <RTC_UTCSecsToTime+0x16c>
    5f7e:	8d e6       	ldi	r24, 0x6D	; 109
    5f80:	91 e0       	ldi	r25, 0x01	; 1
    5f82:	a0 e0       	ldi	r26, 0x00	; 0
    5f84:	b0 e0       	ldi	r27, 0x00	; 0
	UTCSecs  -= days; // now it is days in this year, starting at 0
    5f86:	a8 1a       	sub	r10, r24
    5f88:	b9 0a       	sbc	r11, r25
    5f8a:	ca 0a       	sbc	r12, r26
    5f8c:	db 0a       	sbc	r13, r27
    5f8e:	98 01       	movw	r18, r16
    5f90:	87 01       	movw	r16, r14
    5f92:	0a 19       	sub	r16, r10
    5f94:	1b 09       	sbc	r17, r11
    5f96:	2c 09       	sbc	r18, r12
    5f98:	3d 09       	sbc	r19, r13
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
	      	if (LEAP_YEAR(year)) {
    5f9a:	cf 01       	movw	r24, r30
    5f9c:	64 e6       	ldi	r22, 0x64	; 100
    5f9e:	70 e0       	ldi	r23, 0x00	; 0
    5fa0:	0e 94 74 43 	call	0x86e8	; 0x86e8 <__divmodhi4>
    5fa4:	7c 01       	movw	r14, r24
    5fa6:	cf 01       	movw	r24, r30
    5fa8:	60 e9       	ldi	r22, 0x90	; 144
    5faa:	71 e0       	ldi	r23, 0x01	; 1
    5fac:	0e 94 74 43 	call	0x86e8	; 0x86e8 <__divmodhi4>
    5fb0:	ac 01       	movw	r20, r24
    5fb2:	e6 ea       	ldi	r30, 0xA6	; 166
    5fb4:	f9 e2       	ldi	r31, 0x29	; 41
    5fb6:	60 e0       	ldi	r22, 0x00	; 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
    5fb8:	61 30       	cpi	r22, 0x01	; 1
    5fba:	51 f4       	brne	.+20     	; 0x5fd0 <RTC_UTCSecsToTime+0x1b6>
	      	if (LEAP_YEAR(year)) {
    5fbc:	81 14       	cp	r8, r1
    5fbe:	91 04       	cpc	r9, r1
    5fc0:	49 f4       	brne	.+18     	; 0x5fd4 <RTC_UTCSecsToTime+0x1ba>
    5fc2:	e1 14       	cp	r14, r1
    5fc4:	f1 04       	cpc	r15, r1
    5fc6:	41 f4       	brne	.+16     	; 0x5fd8 <RTC_UTCSecsToTime+0x1be>
    5fc8:	41 15       	cp	r20, r1
    5fca:	51 05       	cpc	r21, r1
    5fcc:	29 f0       	breq	.+10     	; 0x5fd8 <RTC_UTCSecsToTime+0x1be>
    5fce:	02 c0       	rjmp	.+4      	; 0x5fd4 <RTC_UTCSecsToTime+0x1ba>
	       		monthLength=29;
	      	} else {
	        	monthLength=28;
	      	}
    	} else {
      		monthLength = monthDays[month];
    5fd0:	80 81       	ld	r24, Z
    5fd2:	03 c0       	rjmp	.+6      	; 0x5fda <RTC_UTCSecsToTime+0x1c0>
    5fd4:	8c e1       	ldi	r24, 0x1C	; 28
    5fd6:	01 c0       	rjmp	.+2      	; 0x5fda <RTC_UTCSecsToTime+0x1c0>
    5fd8:	8d e1       	ldi	r24, 0x1D	; 29
    	}
    
    	if (UTCSecs >= monthLength) {
    5fda:	90 e0       	ldi	r25, 0x00	; 0
    5fdc:	a0 e0       	ldi	r26, 0x00	; 0
    5fde:	b0 e0       	ldi	r27, 0x00	; 0
    5fe0:	08 17       	cp	r16, r24
    5fe2:	19 07       	cpc	r17, r25
    5fe4:	2a 07       	cpc	r18, r26
    5fe6:	3b 07       	cpc	r19, r27
    5fe8:	40 f0       	brcs	.+16     	; 0x5ffa <RTC_UTCSecsToTime+0x1e0>
      		UTCSecs -= monthLength;
    5fea:	08 1b       	sub	r16, r24
    5fec:	19 0b       	sbc	r17, r25
    5fee:	2a 0b       	sbc	r18, r26
    5ff0:	3b 0b       	sbc	r19, r27
	UTCSecs  -= days; // now it is days in this year, starting at 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    5ff2:	6f 5f       	subi	r22, 0xFF	; 255
    5ff4:	31 96       	adiw	r30, 0x01	; 1
    5ff6:	6c 30       	cpi	r22, 0x0C	; 12
    5ff8:	f9 f6       	brne	.-66     	; 0x5fb8 <RTC_UTCSecsToTime+0x19e>
      		UTCSecs -= monthLength;
    	} else {
        	break;
  		}
	}
	tm->Month = month + 1;  // jan is month 1  
    5ffa:	6f 5f       	subi	r22, 0xFF	; 255
    5ffc:	6e 83       	std	Y+6, r22	; 0x06
	tm->Day = UTCSecs + 1;     // day of month 
    5ffe:	80 2f       	mov	r24, r16
    6000:	8f 5f       	subi	r24, 0xFF	; 255
    6002:	8d 83       	std	Y+5, r24	; 0x05
	
	return tm;	
}
    6004:	ce 01       	movw	r24, r28
    6006:	df 91       	pop	r29
    6008:	cf 91       	pop	r28
    600a:	1f 91       	pop	r17
    600c:	0f 91       	pop	r16
    600e:	ff 90       	pop	r15
    6010:	ef 90       	pop	r14
    6012:	df 90       	pop	r13
    6014:	cf 90       	pop	r12
    6016:	bf 90       	pop	r11
    6018:	af 90       	pop	r10
    601a:	9f 90       	pop	r9
    601c:	8f 90       	pop	r8
    601e:	08 95       	ret

00006020 <RTC_TimeToUTCSecs>:

uint32_t RTC_TimeToUTCSecs(time_t * tm) {
    6020:	4f 92       	push	r4
    6022:	5f 92       	push	r5
    6024:	6f 92       	push	r6
    6026:	7f 92       	push	r7
    6028:	8f 92       	push	r8
    602a:	9f 92       	push	r9
    602c:	af 92       	push	r10
    602e:	bf 92       	push	r11
    6030:	cf 92       	push	r12
    6032:	df 92       	push	r13
    6034:	ef 92       	push	r14
    6036:	ff 92       	push	r15
    6038:	0f 93       	push	r16
    603a:	1f 93       	push	r17
    603c:	cf 93       	push	r28
    603e:	df 93       	push	r29
    6040:	4c 01       	movw	r8, r24
	uint32_t UTCSecs;
	int i;
	
 	// seconds from 1970 till 1 jan 00:00:00 of the given year
	UTCSecs= tm->Year*(SECS_PER_DAY * 365);
    6042:	dc 01       	movw	r26, r24
    6044:	17 96       	adiw	r26, 0x07	; 7
    6046:	1c 91       	ld	r17, X
    6048:	61 2f       	mov	r22, r17
    604a:	70 e0       	ldi	r23, 0x00	; 0
    604c:	80 e0       	ldi	r24, 0x00	; 0
    604e:	90 e0       	ldi	r25, 0x00	; 0
    6050:	20 e8       	ldi	r18, 0x80	; 128
    6052:	33 e3       	ldi	r19, 0x33	; 51
    6054:	41 ee       	ldi	r20, 0xE1	; 225
    6056:	51 e0       	ldi	r21, 0x01	; 1
    6058:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    605c:	5b 01       	movw	r10, r22
    605e:	6c 01       	movw	r12, r24
    6060:	22 eb       	ldi	r18, 0xB2	; 178
    6062:	37 e0       	ldi	r19, 0x07	; 7
	for (i = 0; i < tm->Year; i++) {
    6064:	e1 2f       	mov	r30, r17
    6066:	f0 e0       	ldi	r31, 0x00	; 0
    6068:	ee 54       	subi	r30, 0x4E	; 78
    606a:	f8 4f       	sbci	r31, 0xF8	; 248
    606c:	1d c0       	rjmp	.+58     	; 0x60a8 <RTC_TimeToUTCSecs+0x88>
    	if (LEAP_YEAR(i)) {
    606e:	c9 01       	movw	r24, r18
    6070:	83 70       	andi	r24, 0x03	; 3
    6072:	90 70       	andi	r25, 0x00	; 0
    6074:	89 2b       	or	r24, r25
    6076:	b1 f4       	brne	.+44     	; 0x60a4 <RTC_TimeToUTCSecs+0x84>
    6078:	c9 01       	movw	r24, r18
    607a:	64 e6       	ldi	r22, 0x64	; 100
    607c:	70 e0       	ldi	r23, 0x00	; 0
    607e:	0e 94 74 43 	call	0x86e8	; 0x86e8 <__divmodhi4>
    6082:	89 2b       	or	r24, r25
    6084:	39 f4       	brne	.+14     	; 0x6094 <RTC_TimeToUTCSecs+0x74>
    6086:	c9 01       	movw	r24, r18
    6088:	60 e9       	ldi	r22, 0x90	; 144
    608a:	71 e0       	ldi	r23, 0x01	; 1
    608c:	0e 94 74 43 	call	0x86e8	; 0x86e8 <__divmodhi4>
    6090:	89 2b       	or	r24, r25
    6092:	41 f4       	brne	.+16     	; 0x60a4 <RTC_TimeToUTCSecs+0x84>
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    6094:	80 e8       	ldi	r24, 0x80	; 128
    6096:	91 e5       	ldi	r25, 0x51	; 81
    6098:	a1 e0       	ldi	r26, 0x01	; 1
    609a:	b0 e0       	ldi	r27, 0x00	; 0
    609c:	a8 0e       	add	r10, r24
    609e:	b9 1e       	adc	r11, r25
    60a0:	ca 1e       	adc	r12, r26
    60a2:	db 1e       	adc	r13, r27
    60a4:	2f 5f       	subi	r18, 0xFF	; 255
    60a6:	3f 4f       	sbci	r19, 0xFF	; 255
	uint32_t UTCSecs;
	int i;
	
 	// seconds from 1970 till 1 jan 00:00:00 of the given year
	UTCSecs= tm->Year*(SECS_PER_DAY * 365);
	for (i = 0; i < tm->Year; i++) {
    60a8:	2e 17       	cp	r18, r30
    60aa:	3f 07       	cpc	r19, r31
    60ac:	01 f7       	brne	.-64     	; 0x606e <RTC_TimeToUTCSecs+0x4e>
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    	}
  	}
  
  // add days for this year, months start from 1
	for (i = 1; i < tm->Month; i++) {
    60ae:	d4 01       	movw	r26, r8
    60b0:	16 96       	adiw	r26, 0x06	; 6
    60b2:	8c 91       	ld	r24, X
    60b4:	48 2e       	mov	r4, r24
    60b6:	55 24       	eor	r5, r5
    	if ( (i == 2) && LEAP_YEAR(tm->Year)) { 
    60b8:	c9 01       	movw	r24, r18
    60ba:	64 e6       	ldi	r22, 0x64	; 100
    60bc:	70 e0       	ldi	r23, 0x00	; 0
    60be:	0e 94 74 43 	call	0x86e8	; 0x86e8 <__divmodhi4>
    60c2:	7c 01       	movw	r14, r24
    60c4:	c9 01       	movw	r24, r18
    60c6:	60 e9       	ldi	r22, 0x90	; 144
    60c8:	71 e0       	ldi	r23, 0x01	; 1
    60ca:	0e 94 74 43 	call	0x86e8	; 0x86e8 <__divmodhi4>
    60ce:	8c 01       	movw	r16, r24
    60d0:	c1 e0       	ldi	r28, 0x01	; 1
    60d2:	d0 e0       	ldi	r29, 0x00	; 0
    60d4:	b3 e0       	ldi	r27, 0x03	; 3
    60d6:	6b 2e       	mov	r6, r27
    60d8:	71 2c       	mov	r7, r1
    60da:	62 22       	and	r6, r18
    60dc:	73 22       	and	r7, r19
    60de:	27 c0       	rjmp	.+78     	; 0x612e <RTC_TimeToUTCSecs+0x10e>
    60e0:	c2 30       	cpi	r28, 0x02	; 2
    60e2:	d1 05       	cpc	r29, r1
    60e4:	91 f4       	brne	.+36     	; 0x610a <RTC_TimeToUTCSecs+0xea>
    60e6:	61 14       	cp	r6, r1
    60e8:	71 04       	cpc	r7, r1
    60ea:	79 f4       	brne	.+30     	; 0x610a <RTC_TimeToUTCSecs+0xea>
    60ec:	e1 14       	cp	r14, r1
    60ee:	f1 04       	cpc	r15, r1
    60f0:	19 f4       	brne	.+6      	; 0x60f8 <RTC_TimeToUTCSecs+0xd8>
    60f2:	01 15       	cp	r16, r1
    60f4:	11 05       	cpc	r17, r1
    60f6:	49 f4       	brne	.+18     	; 0x610a <RTC_TimeToUTCSecs+0xea>
      		UTCSecs += SECS_PER_DAY * 29;
    60f8:	80 e8       	ldi	r24, 0x80	; 128
    60fa:	9b e3       	ldi	r25, 0x3B	; 59
    60fc:	a6 e2       	ldi	r26, 0x26	; 38
    60fe:	b0 e0       	ldi	r27, 0x00	; 0
    6100:	a8 0e       	add	r10, r24
    6102:	b9 1e       	adc	r11, r25
    6104:	ca 1e       	adc	r12, r26
    6106:	db 1e       	adc	r13, r27
    6108:	11 c0       	rjmp	.+34     	; 0x612c <RTC_TimeToUTCSecs+0x10c>
    	} else {
      		UTCSecs += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    610a:	fe 01       	movw	r30, r28
    610c:	eb 55       	subi	r30, 0x5B	; 91
    610e:	f6 4d       	sbci	r31, 0xD6	; 214
    6110:	60 81       	ld	r22, Z
    6112:	70 e0       	ldi	r23, 0x00	; 0
    6114:	80 e0       	ldi	r24, 0x00	; 0
    6116:	90 e0       	ldi	r25, 0x00	; 0
    6118:	20 e8       	ldi	r18, 0x80	; 128
    611a:	31 e5       	ldi	r19, 0x51	; 81
    611c:	41 e0       	ldi	r20, 0x01	; 1
    611e:	50 e0       	ldi	r21, 0x00	; 0
    6120:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    6124:	a6 0e       	add	r10, r22
    6126:	b7 1e       	adc	r11, r23
    6128:	c8 1e       	adc	r12, r24
    612a:	d9 1e       	adc	r13, r25
    		UTCSecs +=  SECS_PER_DAY;   // add extra days for leap years
    	}
  	}
  
  // add days for this year, months start from 1
	for (i = 1; i < tm->Month; i++) {
    612c:	21 96       	adiw	r28, 0x01	; 1
    612e:	c4 15       	cp	r28, r4
    6130:	d5 05       	cpc	r29, r5
    6132:	b4 f2       	brlt	.-84     	; 0x60e0 <RTC_TimeToUTCSecs+0xc0>
      		UTCSecs += SECS_PER_DAY * 29;
    	} else {
      		UTCSecs += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    	}
  	}
	UTCSecs+= (tm->Day-1) * SECS_PER_DAY;
    6134:	d4 01       	movw	r26, r8
    6136:	13 96       	adiw	r26, 0x03	; 3
    6138:	6c 91       	ld	r22, X
    613a:	70 e0       	ldi	r23, 0x00	; 0
    613c:	80 e0       	ldi	r24, 0x00	; 0
    613e:	90 e0       	ldi	r25, 0x00	; 0
    6140:	20 e1       	ldi	r18, 0x10	; 16
    6142:	3e e0       	ldi	r19, 0x0E	; 14
    6144:	40 e0       	ldi	r20, 0x00	; 0
    6146:	50 e0       	ldi	r21, 0x00	; 0
    6148:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    614c:	7b 01       	movw	r14, r22
    614e:	8c 01       	movw	r16, r24
    6150:	f4 01       	movw	r30, r8
    6152:	62 81       	ldd	r22, Z+2	; 0x02
    6154:	70 e0       	ldi	r23, 0x00	; 0
    6156:	80 e0       	ldi	r24, 0x00	; 0
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	2c e3       	ldi	r18, 0x3C	; 60
    615c:	30 e0       	ldi	r19, 0x00	; 0
    615e:	40 e0       	ldi	r20, 0x00	; 0
    6160:	50 e0       	ldi	r21, 0x00	; 0
    6162:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    6166:	e6 0e       	add	r14, r22
    6168:	f7 1e       	adc	r15, r23
    616a:	08 1f       	adc	r16, r24
    616c:	19 1f       	adc	r17, r25
	UTCSecs+= tm->Hour * SECS_PER_HOUR;
    616e:	d4 01       	movw	r26, r8
    6170:	11 96       	adiw	r26, 0x01	; 1
    6172:	8c 91       	ld	r24, X
    6174:	11 97       	sbiw	r26, 0x01	; 1
    6176:	e8 0e       	add	r14, r24
    6178:	f1 1c       	adc	r15, r1
    617a:	01 1d       	adc	r16, r1
    617c:	11 1d       	adc	r17, r1
	UTCSecs+= tm->Minute * SECS_PER_MIN;
    617e:	15 96       	adiw	r26, 0x05	; 5
    6180:	6c 91       	ld	r22, X
    6182:	70 e0       	ldi	r23, 0x00	; 0
    6184:	61 50       	subi	r22, 0x01	; 1
    6186:	70 40       	sbci	r23, 0x00	; 0
    6188:	88 27       	eor	r24, r24
    618a:	77 fd       	sbrc	r23, 7
    618c:	80 95       	com	r24
    618e:	98 2f       	mov	r25, r24
    6190:	20 e8       	ldi	r18, 0x80	; 128
    6192:	31 e5       	ldi	r19, 0x51	; 81
    6194:	41 e0       	ldi	r20, 0x01	; 1
    6196:	50 e0       	ldi	r21, 0x00	; 0
    6198:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    619c:	e6 0e       	add	r14, r22
    619e:	f7 1e       	adc	r15, r23
    61a0:	08 1f       	adc	r16, r24
    61a2:	19 1f       	adc	r17, r25
    61a4:	ea 0c       	add	r14, r10
    61a6:	fb 1c       	adc	r15, r11
    61a8:	0c 1d       	adc	r16, r12
    61aa:	1d 1d       	adc	r17, r13
	UTCSecs+= tm->Second;
 
	return UTCSecs; 
}
    61ac:	b7 01       	movw	r22, r14
    61ae:	c8 01       	movw	r24, r16
    61b0:	df 91       	pop	r29
    61b2:	cf 91       	pop	r28
    61b4:	1f 91       	pop	r17
    61b6:	0f 91       	pop	r16
    61b8:	ff 90       	pop	r15
    61ba:	ef 90       	pop	r14
    61bc:	df 90       	pop	r13
    61be:	cf 90       	pop	r12
    61c0:	bf 90       	pop	r11
    61c2:	af 90       	pop	r10
    61c4:	9f 90       	pop	r9
    61c6:	8f 90       	pop	r8
    61c8:	7f 90       	pop	r7
    61ca:	6f 90       	pop	r6
    61cc:	5f 90       	pop	r5
    61ce:	4f 90       	pop	r4
    61d0:	08 95       	ret

000061d2 <RTC_sendBytes>:

	RTC_sendBytes(9,timeData,RTCAddress);
}


void RTC_sendBytes(uint8_t numBytes, uint8_t* byteArray, uint8_t deviceAddress) {
    61d2:	58 2f       	mov	r21, r24
	uint8_t i = 0;
	//R/~W is last bit on address
	uint8_t writeAddress = deviceAddress & ~0x01;
    61d4:	4e 7f       	andi	r20, 0xFE	; 254
	RTCPort.MASTER.ADDR = writeAddress;
    61d6:	e0 ea       	ldi	r30, 0xA0	; 160
    61d8:	f4 e0       	ldi	r31, 0x04	; 4
    61da:	46 83       	std	Z+6, r20	; 0x06
    61dc:	fb 01       	movw	r30, r22
    61de:	90 e0       	ldi	r25, 0x00	; 0

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    61e0:	a0 ea       	ldi	r26, 0xA0	; 160
    61e2:	b4 e0       	ldi	r27, 0x04	; 4
    61e4:	0d c0       	rjmp	.+26     	; 0x6200 <RTC_sendBytes+0x2e>
    61e6:	80 91 a4 04 	lds	r24, 0x04A4
    61ea:	86 ff       	sbrs	r24, 6
    61ec:	fc cf       	rjmp	.-8      	; 0x61e6 <RTC_sendBytes+0x14>
			//Wait for write flag to turn on
		}

		//If NACK received (non-zero), warn user and cancel operation
		if (RTCPort.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    61ee:	80 91 a4 04 	lds	r24, 0x04A4
    61f2:	84 fd       	sbrc	r24, 4
    61f4:	07 c0       	rjmp	.+14     	; 0x6204 <RTC_sendBytes+0x32>
			//USART_sendString("NACK RECEIVED",true);
			return;
		}

		//Send data
		RTCPort.MASTER.DATA = byteArray[i];
    61f6:	81 91       	ld	r24, Z+
    61f8:	17 96       	adiw	r26, 0x07	; 7
    61fa:	8c 93       	st	X, r24
    61fc:	17 97       	sbiw	r26, 0x07	; 7

		i++;
    61fe:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t i = 0;
	//R/~W is last bit on address
	uint8_t writeAddress = deviceAddress & ~0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {
    6200:	95 17       	cp	r25, r21
    6202:	88 f3       	brcs	.-30     	; 0x61e6 <RTC_sendBytes+0x14>
    6204:	08 95       	ret

00006206 <RTC_setTime>:



} 

void RTC_setTime(void) {
    6206:	df 93       	push	r29
    6208:	cf 93       	push	r28
    620a:	cd b7       	in	r28, 0x3d	; 61
    620c:	de b7       	in	r29, 0x3e	; 62
    620e:	29 97       	sbiw	r28, 0x09	; 9
    6210:	cd bf       	out	0x3d, r28	; 61
    6212:	de bf       	out	0x3e, r29	; 62
	uint8_t timeData[9];
	uint8_t years2000 = time.Year - 30; //Years since 2000	
    6214:	50 91 e9 3e 	lds	r21, 0x3EE9
    6218:	5e 51       	subi	r21, 0x1E	; 30

	timeData[0] = 0x00; //Set starting write address
    621a:	19 82       	std	Y+1, r1	; 0x01
	timeData[1] = ((time.Hundreths/10) << 4) | (time.Hundreths % 10);
    621c:	40 91 e2 3e 	lds	r20, 0x3EE2
    6220:	84 2f       	mov	r24, r20
    6222:	6a e0       	ldi	r22, 0x0A	; 10
    6224:	0e 94 68 43 	call	0x86d0	; 0x86d0 <__udivmodqi4>
    6228:	28 2f       	mov	r18, r24
    622a:	30 e0       	ldi	r19, 0x00	; 0
    622c:	a4 e0       	ldi	r26, 0x04	; 4
    622e:	22 0f       	add	r18, r18
    6230:	33 1f       	adc	r19, r19
    6232:	aa 95       	dec	r26
    6234:	e1 f7       	brne	.-8      	; 0x622e <RTC_setTime+0x28>
    6236:	84 2f       	mov	r24, r20
    6238:	0e 94 68 43 	call	0x86d0	; 0x86d0 <__udivmodqi4>
    623c:	92 2b       	or	r25, r18
    623e:	9a 83       	std	Y+2, r25	; 0x02
	timeData[2] = ((time.Second/10) << 4) | (time.Second % 10);
    6240:	40 91 e3 3e 	lds	r20, 0x3EE3
    6244:	84 2f       	mov	r24, r20
    6246:	0e 94 68 43 	call	0x86d0	; 0x86d0 <__udivmodqi4>
    624a:	28 2f       	mov	r18, r24
    624c:	30 e0       	ldi	r19, 0x00	; 0
    624e:	f4 e0       	ldi	r31, 0x04	; 4
    6250:	22 0f       	add	r18, r18
    6252:	33 1f       	adc	r19, r19
    6254:	fa 95       	dec	r31
    6256:	e1 f7       	brne	.-8      	; 0x6250 <RTC_setTime+0x4a>
    6258:	84 2f       	mov	r24, r20
    625a:	0e 94 68 43 	call	0x86d0	; 0x86d0 <__udivmodqi4>
    625e:	92 2b       	or	r25, r18
    6260:	9b 83       	std	Y+3, r25	; 0x03
	timeData[3] = ((time.Minute/10) << 4) | (time.Minute % 10);
    6262:	40 91 e4 3e 	lds	r20, 0x3EE4
    6266:	84 2f       	mov	r24, r20
    6268:	0e 94 68 43 	call	0x86d0	; 0x86d0 <__udivmodqi4>
    626c:	28 2f       	mov	r18, r24
    626e:	30 e0       	ldi	r19, 0x00	; 0
    6270:	e4 e0       	ldi	r30, 0x04	; 4
    6272:	22 0f       	add	r18, r18
    6274:	33 1f       	adc	r19, r19
    6276:	ea 95       	dec	r30
    6278:	e1 f7       	brne	.-8      	; 0x6272 <RTC_setTime+0x6c>
    627a:	84 2f       	mov	r24, r20
    627c:	0e 94 68 43 	call	0x86d0	; 0x86d0 <__udivmodqi4>
    6280:	92 2b       	or	r25, r18
    6282:	9c 83       	std	Y+4, r25	; 0x04
	//Write century and century enable bit
	timeData[4] = ((years2000 / 100) << 6) | (1 << 7) | ((time.Hour/10) << 4) | (time.Hour % 10);
    6284:	30 91 e5 3e 	lds	r19, 0x3EE5
    6288:	83 2f       	mov	r24, r19
    628a:	0e 94 68 43 	call	0x86d0	; 0x86d0 <__udivmodqi4>
    628e:	29 2f       	mov	r18, r25
    6290:	20 68       	ori	r18, 0x80	; 128
    6292:	83 2f       	mov	r24, r19
    6294:	0e 94 68 43 	call	0x86d0	; 0x86d0 <__udivmodqi4>
    6298:	82 95       	swap	r24
    629a:	80 7f       	andi	r24, 0xF0	; 240
    629c:	28 2b       	or	r18, r24
    629e:	85 2f       	mov	r24, r21
    62a0:	64 e6       	ldi	r22, 0x64	; 100
    62a2:	0e 94 68 43 	call	0x86d0	; 0x86d0 <__udivmodqi4>
    62a6:	82 95       	swap	r24
    62a8:	88 0f       	add	r24, r24
    62aa:	88 0f       	add	r24, r24
    62ac:	80 7c       	andi	r24, 0xC0	; 192
    62ae:	28 2b       	or	r18, r24
    62b0:	2d 83       	std	Y+5, r18	; 0x05
	timeData[5] = time.Wday;
    62b2:	80 91 e6 3e 	lds	r24, 0x3EE6
    62b6:	8e 83       	std	Y+6, r24	; 0x06
	timeData[6] = ((time.Day/10) << 4) | (time.Day % 10);
    62b8:	40 91 e7 3e 	lds	r20, 0x3EE7
    62bc:	84 2f       	mov	r24, r20
    62be:	6a e0       	ldi	r22, 0x0A	; 10
    62c0:	0e 94 68 43 	call	0x86d0	; 0x86d0 <__udivmodqi4>
    62c4:	28 2f       	mov	r18, r24
    62c6:	30 e0       	ldi	r19, 0x00	; 0
    62c8:	74 e0       	ldi	r23, 0x04	; 4
    62ca:	22 0f       	add	r18, r18
    62cc:	33 1f       	adc	r19, r19
    62ce:	7a 95       	dec	r23
    62d0:	e1 f7       	brne	.-8      	; 0x62ca <RTC_setTime+0xc4>
    62d2:	84 2f       	mov	r24, r20
    62d4:	0e 94 68 43 	call	0x86d0	; 0x86d0 <__udivmodqi4>
    62d8:	92 2b       	or	r25, r18
    62da:	9f 83       	std	Y+7, r25	; 0x07
	timeData[7] = ((time.Month/10) << 4) | (time.Month % 10);
    62dc:	40 91 e8 3e 	lds	r20, 0x3EE8
    62e0:	84 2f       	mov	r24, r20
    62e2:	0e 94 68 43 	call	0x86d0	; 0x86d0 <__udivmodqi4>
    62e6:	28 2f       	mov	r18, r24
    62e8:	30 e0       	ldi	r19, 0x00	; 0
    62ea:	94 e0       	ldi	r25, 0x04	; 4
    62ec:	22 0f       	add	r18, r18
    62ee:	33 1f       	adc	r19, r19
    62f0:	9a 95       	dec	r25
    62f2:	e1 f7       	brne	.-8      	; 0x62ec <RTC_setTime+0xe6>
    62f4:	84 2f       	mov	r24, r20
    62f6:	0e 94 68 43 	call	0x86d0	; 0x86d0 <__udivmodqi4>
    62fa:	92 2b       	or	r25, r18
    62fc:	98 87       	std	Y+8, r25	; 0x08
	timeData[8] = ((years2000/10) << 4) | (years2000 % 10);	
    62fe:	85 2f       	mov	r24, r21
    6300:	0e 94 68 43 	call	0x86d0	; 0x86d0 <__udivmodqi4>
    6304:	28 2f       	mov	r18, r24
    6306:	30 e0       	ldi	r19, 0x00	; 0
    6308:	84 e0       	ldi	r24, 0x04	; 4
    630a:	22 0f       	add	r18, r18
    630c:	33 1f       	adc	r19, r19
    630e:	8a 95       	dec	r24
    6310:	e1 f7       	brne	.-8      	; 0x630a <RTC_setTime+0x104>
    6312:	85 2f       	mov	r24, r21
    6314:	0e 94 68 43 	call	0x86d0	; 0x86d0 <__udivmodqi4>
    6318:	92 2b       	or	r25, r18
    631a:	99 87       	std	Y+9, r25	; 0x09

	RTC_sendBytes(9,timeData,RTCAddress);
    631c:	89 e0       	ldi	r24, 0x09	; 9
    631e:	be 01       	movw	r22, r28
    6320:	6f 5f       	subi	r22, 0xFF	; 255
    6322:	7f 4f       	sbci	r23, 0xFF	; 255
    6324:	40 ed       	ldi	r20, 0xD0	; 208
    6326:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <RTC_sendBytes>
}
    632a:	29 96       	adiw	r28, 0x09	; 9
    632c:	cd bf       	out	0x3d, r28	; 61
    632e:	de bf       	out	0x3e, r29	; 62
    6330:	cf 91       	pop	r28
    6332:	df 91       	pop	r29
    6334:	08 95       	ret

00006336 <RTC_setUTCSecs>:
void RTC_setUTCSecs(uint32_t UTCSecs) {
	// break the given time_t into time components
// this is a more compact version of the C library localtime function
// note that year is offset from 1970 !!!
	
	RTC_UTCSecsToTime(UTCSecs,&time);
    6336:	42 ee       	ldi	r20, 0xE2	; 226
    6338:	5e e3       	ldi	r21, 0x3E	; 62
    633a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <RTC_UTCSecsToTime>
	RTC_setTime();
    633e:	0e 94 03 31 	call	0x6206	; 0x6206 <RTC_setTime>
}
    6342:	08 95       	ret

00006344 <RTC_init>:


//Global time variable
time_t time;

void RTC_init(void) {
    6344:	df 93       	push	r29
    6346:	cf 93       	push	r28
    6348:	cd b7       	in	r28, 0x3d	; 61
    634a:	de b7       	in	r29, 0x3e	; 62
    634c:	e2 97       	sbiw	r28, 0x32	; 50
    634e:	cd bf       	out	0x3d, r28	; 61
    6350:	de bf       	out	0x3e, r29	; 62
	RTCPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    6352:	e0 ea       	ldi	r30, 0xA0	; 160
    6354:	f4 e0       	ldi	r31, 0x04	; 4
    6356:	88 e0       	ldi	r24, 0x08	; 8
    6358:	81 83       	std	Z+1, r24	; 0x01
	//Don't need to set smart mode
	//TWIPort.CTRLB =

	//Set Master Read Acknowledge Action to ACK
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    635a:	84 e0       	ldi	r24, 0x04	; 4
    635c:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//32Mhz/(2*400kHz) - 5 = 35
	//TWIPort.MASTER.BAUD = 35;
	RTCPort.MASTER.BAUD = 15;
    635e:	8f e0       	ldi	r24, 0x0F	; 15
    6360:	85 83       	std	Z+5, r24	; 0x05

	RTCPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    6362:	81 e0       	ldi	r24, 0x01	; 1
    6364:	84 83       	std	Z+4, r24	; 0x04
    6366:	fe 01       	movw	r30, r28
    6368:	31 96       	adiw	r30, 0x01	; 1

	int i;
	uint8_t msg[50];

	//Clear all memory of RTC
	for (i = 0; i < 17; i++) {
    636a:	ce 01       	movw	r24, r28
    636c:	42 96       	adiw	r24, 0x12	; 18
		msg[i] = 0;
    636e:	11 92       	st	Z+, r1

	int i;
	uint8_t msg[50];

	//Clear all memory of RTC
	for (i = 0; i < 17; i++) {
    6370:	e8 17       	cp	r30, r24
    6372:	f9 07       	cpc	r31, r25
    6374:	e1 f7       	brne	.-8      	; 0x636e <RTC_init+0x2a>
		msg[i] = 0;
	}


	RTC_sendBytes(17,msg,RTCAddress);
    6376:	81 e1       	ldi	r24, 0x11	; 17
    6378:	be 01       	movw	r22, r28
    637a:	6f 5f       	subi	r22, 0xFF	; 255
    637c:	7f 4f       	sbci	r23, 0xFF	; 255
    637e:	40 ed       	ldi	r20, 0xD0	; 208
    6380:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <RTC_sendBytes>
}
    6384:	e2 96       	adiw	r28, 0x32	; 50
    6386:	cd bf       	out	0x3d, r28	; 61
    6388:	de bf       	out	0x3e, r29	; 62
    638a:	cf 91       	pop	r28
    638c:	df 91       	pop	r29
    638e:	08 95       	ret

00006390 <RTC_receiveBytes>:
		i++;
	}

}

void RTC_receiveBytes(uint8_t numBytes, uint8_t* byteArray, uint8_t deviceAddress) {
    6390:	58 2f       	mov	r21, r24
	uint8_t i = 0;

	//Send start condition, and device address + Read
	uint8_t writeAddress = deviceAddress | 0x01;
    6392:	41 60       	ori	r20, 0x01	; 1
	RTCPort.MASTER.ADDR = writeAddress;
    6394:	e0 ea       	ldi	r30, 0xA0	; 160
    6396:	f4 e0       	ldi	r31, 0x04	; 4
    6398:	46 83       	std	Z+6, r20	; 0x06
    639a:	fb 01       	movw	r30, r22
    639c:	90 e0       	ldi	r25, 0x00	; 0

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    639e:	a0 ea       	ldi	r26, 0xA0	; 160
    63a0:	b4 e0       	ldi	r27, 0x04	; 4
			//Wait for Read flag to come on
		}
		byteArray[i] = RTCPort.MASTER.DATA;

		//If more bytes to read, send ACK and start byte read
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    63a2:	22 e0       	ldi	r18, 0x02	; 2
    63a4:	0b c0       	rjmp	.+22     	; 0x63bc <RTC_receiveBytes+0x2c>
	uint8_t writeAddress = deviceAddress | 0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {

		while (!(RTCPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    63a6:	80 91 a4 04 	lds	r24, 0x04A4
    63aa:	87 ff       	sbrs	r24, 7
    63ac:	fc cf       	rjmp	.-8      	; 0x63a6 <RTC_receiveBytes+0x16>
			//Wait for Read flag to come on
		}
		byteArray[i] = RTCPort.MASTER.DATA;
    63ae:	80 91 a7 04 	lds	r24, 0x04A7
    63b2:	81 93       	st	Z+, r24

		//If more bytes to read, send ACK and start byte read
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    63b4:	13 96       	adiw	r26, 0x03	; 3
    63b6:	2c 93       	st	X, r18
    63b8:	13 97       	sbiw	r26, 0x03	; 3
		i++;
    63ba:	9f 5f       	subi	r25, 0xFF	; 255

	//Send start condition, and device address + Read
	uint8_t writeAddress = deviceAddress | 0x01;
	RTCPort.MASTER.ADDR = writeAddress;

	while (i < numBytes) {
    63bc:	95 17       	cp	r25, r21
    63be:	98 f3       	brcs	.-26     	; 0x63a6 <RTC_receiveBytes+0x16>
		RTCPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		i++;
	}

	//All values are read. Send STOP condition
	RTCPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    63c0:	87 e0       	ldi	r24, 0x07	; 7
    63c2:	e0 ea       	ldi	r30, 0xA0	; 160
    63c4:	f4 e0       	ldi	r31, 0x04	; 4
    63c6:	83 83       	std	Z+3, r24	; 0x03

}
    63c8:	08 95       	ret

000063ca <RTC_getTime>:
	UTCSecs = RTC_TimeToUTCSecs(&time);
	  
 	return UTCSecs;
}

void RTC_getTime(void) {
    63ca:	0f 93       	push	r16
    63cc:	1f 93       	push	r17
    63ce:	df 93       	push	r29
    63d0:	cf 93       	push	r28
    63d2:	cd b7       	in	r28, 0x3d	; 61
    63d4:	de b7       	in	r29, 0x3e	; 62
    63d6:	28 97       	sbiw	r28, 0x08	; 8
    63d8:	cd bf       	out	0x3d, r28	; 61
    63da:	de bf       	out	0x3e, r29	; 62
	uint8_t timeData[8];
		
	//Write starting address
	timeData[0] = 0x00;
    63dc:	19 82       	std	Y+1, r1	; 0x01
	RTC_sendBytes(1,timeData,RTCAddress);
    63de:	81 e0       	ldi	r24, 0x01	; 1
    63e0:	8e 01       	movw	r16, r28
    63e2:	0f 5f       	subi	r16, 0xFF	; 255
    63e4:	1f 4f       	sbci	r17, 0xFF	; 255
    63e6:	b8 01       	movw	r22, r16
    63e8:	40 ed       	ldi	r20, 0xD0	; 208
    63ea:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <RTC_sendBytes>
	
	//Wait for data to come back
	RTC_receiveBytes(8,timeData,RTCAddress);
    63ee:	88 e0       	ldi	r24, 0x08	; 8
    63f0:	b8 01       	movw	r22, r16
    63f2:	40 ed       	ldi	r20, 0xD0	; 208
    63f4:	0e 94 c8 31 	call	0x6390	; 0x6390 <RTC_receiveBytes>
	

	time.Hundreths = 10*((timeData[0] & 0xF0) >> 4) + (timeData[0] & 0x0F);
    63f8:	49 81       	ldd	r20, Y+1	; 0x01
    63fa:	84 2f       	mov	r24, r20
    63fc:	82 95       	swap	r24
    63fe:	8f 70       	andi	r24, 0x0F	; 15
    6400:	90 e0       	ldi	r25, 0x00	; 0
    6402:	9c 01       	movw	r18, r24
    6404:	63 e0       	ldi	r22, 0x03	; 3
    6406:	22 0f       	add	r18, r18
    6408:	33 1f       	adc	r19, r19
    640a:	6a 95       	dec	r22
    640c:	e1 f7       	brne	.-8      	; 0x6406 <RTC_getTime+0x3c>
    640e:	88 0f       	add	r24, r24
    6410:	99 1f       	adc	r25, r25
    6412:	28 0f       	add	r18, r24
    6414:	39 1f       	adc	r19, r25
    6416:	4f 70       	andi	r20, 0x0F	; 15
    6418:	42 0f       	add	r20, r18
    641a:	40 93 e2 3e 	sts	0x3EE2, r20
	time.Second = 10*((timeData[1] & 0x70) >> 4) + (timeData[1] & 0x0F);
    641e:	4a 81       	ldd	r20, Y+2	; 0x02
    6420:	84 2f       	mov	r24, r20
    6422:	90 e0       	ldi	r25, 0x00	; 0
    6424:	80 77       	andi	r24, 0x70	; 112
    6426:	90 70       	andi	r25, 0x00	; 0
    6428:	24 e0       	ldi	r18, 0x04	; 4
    642a:	95 95       	asr	r25
    642c:	87 95       	ror	r24
    642e:	2a 95       	dec	r18
    6430:	e1 f7       	brne	.-8      	; 0x642a <RTC_getTime+0x60>
    6432:	9c 01       	movw	r18, r24
    6434:	03 e0       	ldi	r16, 0x03	; 3
    6436:	22 0f       	add	r18, r18
    6438:	33 1f       	adc	r19, r19
    643a:	0a 95       	dec	r16
    643c:	e1 f7       	brne	.-8      	; 0x6436 <RTC_getTime+0x6c>
    643e:	88 0f       	add	r24, r24
    6440:	99 1f       	adc	r25, r25
    6442:	28 0f       	add	r18, r24
    6444:	39 1f       	adc	r19, r25
    6446:	4f 70       	andi	r20, 0x0F	; 15
    6448:	42 0f       	add	r20, r18
    644a:	40 93 e3 3e 	sts	0x3EE3, r20
	time.Minute = 10*((timeData[2] & 0x70) >> 4) + (timeData[2] & 0x0F);
    644e:	4b 81       	ldd	r20, Y+3	; 0x03
    6450:	84 2f       	mov	r24, r20
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	80 77       	andi	r24, 0x70	; 112
    6456:	90 70       	andi	r25, 0x00	; 0
    6458:	b4 e0       	ldi	r27, 0x04	; 4
    645a:	95 95       	asr	r25
    645c:	87 95       	ror	r24
    645e:	ba 95       	dec	r27
    6460:	e1 f7       	brne	.-8      	; 0x645a <RTC_getTime+0x90>
    6462:	9c 01       	movw	r18, r24
    6464:	a3 e0       	ldi	r26, 0x03	; 3
    6466:	22 0f       	add	r18, r18
    6468:	33 1f       	adc	r19, r19
    646a:	aa 95       	dec	r26
    646c:	e1 f7       	brne	.-8      	; 0x6466 <RTC_getTime+0x9c>
    646e:	88 0f       	add	r24, r24
    6470:	99 1f       	adc	r25, r25
    6472:	28 0f       	add	r18, r24
    6474:	39 1f       	adc	r19, r25
    6476:	4f 70       	andi	r20, 0x0F	; 15
    6478:	42 0f       	add	r20, r18
    647a:	40 93 e4 3e 	sts	0x3EE4, r20
	time.Hour = 10*((timeData[3] & 0x30) >> 4) + (timeData[3] & 0x0F);
    647e:	4c 81       	ldd	r20, Y+4	; 0x04
    6480:	64 2f       	mov	r22, r20
    6482:	70 e0       	ldi	r23, 0x00	; 0
    6484:	cb 01       	movw	r24, r22
    6486:	80 73       	andi	r24, 0x30	; 48
    6488:	90 70       	andi	r25, 0x00	; 0
    648a:	e4 e0       	ldi	r30, 0x04	; 4
    648c:	95 95       	asr	r25
    648e:	87 95       	ror	r24
    6490:	ea 95       	dec	r30
    6492:	e1 f7       	brne	.-8      	; 0x648c <RTC_getTime+0xc2>
    6494:	9c 01       	movw	r18, r24
    6496:	53 e0       	ldi	r21, 0x03	; 3
    6498:	22 0f       	add	r18, r18
    649a:	33 1f       	adc	r19, r19
    649c:	5a 95       	dec	r21
    649e:	e1 f7       	brne	.-8      	; 0x6498 <RTC_getTime+0xce>
    64a0:	88 0f       	add	r24, r24
    64a2:	99 1f       	adc	r25, r25
    64a4:	28 0f       	add	r18, r24
    64a6:	39 1f       	adc	r19, r25
    64a8:	4f 70       	andi	r20, 0x0F	; 15
    64aa:	42 0f       	add	r20, r18
    64ac:	40 93 e5 3e 	sts	0x3EE5, r20
	time.Wday = timeData[4];
    64b0:	8d 81       	ldd	r24, Y+5	; 0x05
    64b2:	80 93 e6 3e 	sts	0x3EE6, r24
	time.Day = 10*((timeData[5] & 0x30) >> 4) + (timeData[5] & 0x0F);
    64b6:	4e 81       	ldd	r20, Y+6	; 0x06
    64b8:	84 2f       	mov	r24, r20
    64ba:	90 e0       	ldi	r25, 0x00	; 0
    64bc:	80 73       	andi	r24, 0x30	; 48
    64be:	90 70       	andi	r25, 0x00	; 0
    64c0:	14 e0       	ldi	r17, 0x04	; 4
    64c2:	95 95       	asr	r25
    64c4:	87 95       	ror	r24
    64c6:	1a 95       	dec	r17
    64c8:	e1 f7       	brne	.-8      	; 0x64c2 <RTC_getTime+0xf8>
    64ca:	9c 01       	movw	r18, r24
    64cc:	b3 e0       	ldi	r27, 0x03	; 3
    64ce:	22 0f       	add	r18, r18
    64d0:	33 1f       	adc	r19, r19
    64d2:	ba 95       	dec	r27
    64d4:	e1 f7       	brne	.-8      	; 0x64ce <RTC_getTime+0x104>
    64d6:	88 0f       	add	r24, r24
    64d8:	99 1f       	adc	r25, r25
    64da:	28 0f       	add	r18, r24
    64dc:	39 1f       	adc	r19, r25
    64de:	4f 70       	andi	r20, 0x0F	; 15
    64e0:	42 0f       	add	r20, r18
    64e2:	40 93 e7 3e 	sts	0x3EE7, r20
	time.Month = 10*((timeData[6] & 0x10) >> 4) + (timeData[6] & 0x0F);
    64e6:	4f 81       	ldd	r20, Y+7	; 0x07
    64e8:	84 2f       	mov	r24, r20
    64ea:	90 e0       	ldi	r25, 0x00	; 0
    64ec:	80 71       	andi	r24, 0x10	; 16
    64ee:	90 70       	andi	r25, 0x00	; 0
    64f0:	f4 e0       	ldi	r31, 0x04	; 4
    64f2:	95 95       	asr	r25
    64f4:	87 95       	ror	r24
    64f6:	fa 95       	dec	r31
    64f8:	e1 f7       	brne	.-8      	; 0x64f2 <RTC_getTime+0x128>
    64fa:	9c 01       	movw	r18, r24
    64fc:	e3 e0       	ldi	r30, 0x03	; 3
    64fe:	22 0f       	add	r18, r18
    6500:	33 1f       	adc	r19, r19
    6502:	ea 95       	dec	r30
    6504:	e1 f7       	brne	.-8      	; 0x64fe <RTC_getTime+0x134>
    6506:	88 0f       	add	r24, r24
    6508:	99 1f       	adc	r25, r25
    650a:	28 0f       	add	r18, r24
    650c:	39 1f       	adc	r19, r25
    650e:	4f 70       	andi	r20, 0x0F	; 15
    6510:	42 0f       	add	r20, r18
    6512:	40 93 e8 3e 	sts	0x3EE8, r20
	time.Year = 100*((timeData[3] & 0x50) >> 6) + 10*((timeData[7] & 0xF0) >> 4) + (timeData[7] & 0x0F);
    6516:	28 85       	ldd	r18, Y+8	; 0x08


	//Convert to years since 1970 for time conversion
	time.Year += 30;
    6518:	42 2f       	mov	r20, r18
    651a:	4f 70       	andi	r20, 0x0F	; 15
    651c:	42 5e       	subi	r20, 0xE2	; 226
    651e:	60 75       	andi	r22, 0x50	; 80
    6520:	70 70       	andi	r23, 0x00	; 0
    6522:	06 e0       	ldi	r16, 0x06	; 6
    6524:	75 95       	asr	r23
    6526:	67 95       	ror	r22
    6528:	0a 95       	dec	r16
    652a:	e1 f7       	brne	.-8      	; 0x6524 <RTC_getTime+0x15a>
    652c:	84 e6       	ldi	r24, 0x64	; 100
    652e:	90 e0       	ldi	r25, 0x00	; 0
    6530:	fc 01       	movw	r30, r24
    6532:	6e 9f       	mul	r22, r30
    6534:	c0 01       	movw	r24, r0
    6536:	6f 9f       	mul	r22, r31
    6538:	90 0d       	add	r25, r0
    653a:	7e 9f       	mul	r23, r30
    653c:	90 0d       	add	r25, r0
    653e:	11 24       	eor	r1, r1
    6540:	48 0f       	add	r20, r24
    6542:	22 95       	swap	r18
    6544:	2f 70       	andi	r18, 0x0F	; 15
    6546:	30 e0       	ldi	r19, 0x00	; 0
    6548:	c9 01       	movw	r24, r18
    654a:	13 e0       	ldi	r17, 0x03	; 3
    654c:	88 0f       	add	r24, r24
    654e:	99 1f       	adc	r25, r25
    6550:	1a 95       	dec	r17
    6552:	e1 f7       	brne	.-8      	; 0x654c <RTC_getTime+0x182>
    6554:	22 0f       	add	r18, r18
    6556:	33 1f       	adc	r19, r19
    6558:	82 0f       	add	r24, r18
    655a:	93 1f       	adc	r25, r19
    655c:	48 0f       	add	r20, r24
    655e:	40 93 e9 3e 	sts	0x3EE9, r20




} 
    6562:	28 96       	adiw	r28, 0x08	; 8
    6564:	cd bf       	out	0x3d, r28	; 61
    6566:	de bf       	out	0x3e, r29	; 62
    6568:	cf 91       	pop	r28
    656a:	df 91       	pop	r29
    656c:	1f 91       	pop	r17
    656e:	0f 91       	pop	r16
    6570:	08 95       	ret

00006572 <RTC_getUTCSecs>:


uint32_t RTC_getUTCSecs(void) {
	uint32_t UTCSecs;

	RTC_getTime();
    6572:	0e 94 e5 31 	call	0x63ca	; 0x63ca <RTC_getTime>
	UTCSecs = RTC_TimeToUTCSecs(&time);
    6576:	82 ee       	ldi	r24, 0xE2	; 226
    6578:	9e e3       	ldi	r25, 0x3E	; 62
    657a:	0e 94 10 30 	call	0x6020	; 0x6020 <RTC_TimeToUTCSecs>
	  
 	return UTCSecs;
}
    657e:	08 95       	ret

00006580 <Clock_Init>:


//******************************************************************* init functions *******************************************************************

void Clock_Init(void)
{
    6580:	0f 93       	push	r16
    6582:	df 93       	push	r29
    6584:	cf 93       	push	r28
    6586:	0f 92       	push	r0
    6588:	cd b7       	in	r28, 0x3d	; 61
    658a:	de b7       	in	r29, 0x3e	; 62
	OSC.XOSCCTRL = (uint8_t) OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_EXTCLK_gc;
    658c:	80 ec       	ldi	r24, 0xC0	; 192
    658e:	e0 e5       	ldi	r30, 0x50	; 80
    6590:	f0 e0       	ldi	r31, 0x00	; 0
    6592:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |=  OSC_XOSCEN_bm;
    6594:	80 91 50 00 	lds	r24, 0x0050
    6598:	88 60       	ori	r24, 0x08	; 8
    659a:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));
    659e:	80 91 51 00 	lds	r24, 0x0051
    65a2:	83 ff       	sbrs	r24, 3
    65a4:	fc cf       	rjmp	.-8      	; 0x659e <Clock_Init+0x1e>
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | CLK_SCLKSEL_XOSC_gc;
    65a6:	20 91 40 00 	lds	r18, 0x0040


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    65aa:	8f b7       	in	r24, 0x3f	; 63
    65ac:	89 83       	std	Y+1, r24	; 0x01
    cli();
    65ae:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    65b0:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    65b2:	28 7f       	andi	r18, 0xF8	; 248
    65b4:	23 60       	ori	r18, 0x03	; 3
    65b6:	80 e4       	ldi	r24, 0x40	; 64
    65b8:	90 e0       	ldi	r25, 0x00	; 0
    65ba:	fc 01       	movw	r30, r24
    65bc:	08 ed       	ldi	r16, 0xD8	; 216
    65be:	04 bf       	out	0x34, r16	; 52
    65c0:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    65c2:	89 81       	ldd	r24, Y+1	; 0x01
    65c4:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &CLK.CTRL, clkCtrl );
	OSC.CTRL &= ~OSC_RC2MEN_bm;
    65c6:	80 91 50 00 	lds	r24, 0x0050
    65ca:	8e 7f       	andi	r24, 0xFE	; 254
    65cc:	80 93 50 00 	sts	0x0050, r24
}
    65d0:	0f 90       	pop	r0
    65d2:	cf 91       	pop	r28
    65d4:	df 91       	pop	r29
    65d6:	0f 91       	pop	r16
    65d8:	08 95       	ret

000065da <Disable_JTAG>:

void Disable_JTAG(void){
    65da:	0f 93       	push	r16
    65dc:	df 93       	push	r29
    65de:	cf 93       	push	r28
    65e0:	0f 92       	push	r0
    65e2:	cd b7       	in	r28, 0x3d	; 61
    65e4:	de b7       	in	r29, 0x3e	; 62


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    65e6:	8f b7       	in	r24, 0x3f	; 63
    65e8:	89 83       	std	Y+1, r24	; 0x01
    cli();
    65ea:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    65ec:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    65ee:	21 e0       	ldi	r18, 0x01	; 1
    65f0:	86 e9       	ldi	r24, 0x96	; 150
    65f2:	90 e0       	ldi	r25, 0x00	; 0
    65f4:	fc 01       	movw	r30, r24
    65f6:	08 ed       	ldi	r16, 0xD8	; 216
    65f8:	04 bf       	out	0x34, r16	; 52
    65fa:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    65fc:	89 81       	ldd	r24, Y+1	; 0x01
    65fe:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &MCU.MCUCR, 1 );
}
    6600:	0f 90       	pop	r0
    6602:	cf 91       	pop	r28
    6604:	df 91       	pop	r29
    6606:	0f 91       	pop	r16
    6608:	08 95       	ret

0000660a <DMA_Init>:

void DMA_Init(void){
	DMA.CTRL |= DMA_ENABLE_bm; // enable DMA
    660a:	e0 e0       	ldi	r30, 0x00	; 0
    660c:	f1 e0       	ldi	r31, 0x01	; 1
    660e:	80 81       	ld	r24, Z
    6610:	80 68       	ori	r24, 0x80	; 128
    6612:	80 83       	st	Z, r24

	// wifi
	DMA.CH0.ADDRCTRL |= DMA_CH_SRCRELOAD_NONE_gc | DMA_CH_SRCDIR_FIXED_gc	| DMA_CH_DESTRELOAD_BLOCK_gc | DMA_CH_DESTDIR_INC_gc;							
    6614:	82 89       	ldd	r24, Z+18	; 0x12
    6616:	85 60       	ori	r24, 0x05	; 5
    6618:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_USARTE0_RXC_gc;
    661a:	8b e8       	ldi	r24, 0x8B	; 139
    661c:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = Wifi_BufferSize;	// 1024 bytes in block
    661e:	80 e0       	ldi	r24, 0x00	; 0
    6620:	94 e0       	ldi	r25, 0x04	; 4
    6622:	84 8b       	std	Z+20, r24	; 0x14
    6624:	95 8b       	std	Z+21, r25	; 0x15
	DMA.CH0.REPCNT  = 0;		// repeat forever
    6626:	16 8a       	std	Z+22, r1	; 0x16

	DMA.CH0.SRCADDR0 = (((uint16_t)(&Wifi_Usart.DATA) >> 0) & 0xFF);
    6628:	80 ea       	ldi	r24, 0xA0	; 160
    662a:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (((uint16_t)(&Wifi_Usart.DATA) >> 8) & 0xFF);
    662c:	8a e0       	ldi	r24, 0x0A	; 10
    662e:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = 0x00;
    6630:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.DESTADDR0 = (((uint16_t)(&WifiBuffer[0]) >> 0) & 0xFF);
    6632:	86 e4       	ldi	r24, 0x46	; 70
    6634:	9d e2       	ldi	r25, 0x2D	; 45
    6636:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (((uint16_t)(&WifiBuffer[0]) >> 8) & 0xFF);
    6638:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.CH0.DESTADDR2 = 0x00;
    663a:	16 8e       	std	Z+30, r1	; 0x1e
			
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm | DMA_CH_REPEAT_bm | DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm; 	
    663c:	80 89       	ldd	r24, Z+16	; 0x10
    663e:	84 6a       	ori	r24, 0xA4	; 164
    6640:	80 8b       	std	Z+16, r24	; 0x10
		
}
    6642:	08 95       	ret

00006644 <Interrupt_Init>:

void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    6644:	e0 ea       	ldi	r30, 0xA0	; 160
    6646:	f0 e0       	ldi	r31, 0x00	; 0
    6648:	82 81       	ldd	r24, Z+2	; 0x02
    664a:	87 60       	ori	r24, 0x07	; 7
    664c:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    664e:	78 94       	sei
}
    6650:	08 95       	ret

00006652 <SD_BackroundWriter_Init>:
	// div  = 64
	// per  = 2304
	// => 14745600/64/2304 => 100 samples per second

	// Set period/TOP value
	TCE1.PER = 2304;
    6652:	e0 e4       	ldi	r30, 0x40	; 64
    6654:	fa e0       	ldi	r31, 0x0A	; 10
    6656:	80 e0       	ldi	r24, 0x00	; 0
    6658:	99 e0       	ldi	r25, 0x09	; 9
    665a:	86 a3       	std	Z+38, r24	; 0x26
    665c:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	TCE1.CTRLA = (TCE1.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV64_gc;
    665e:	80 81       	ld	r24, Z
    6660:	80 7f       	andi	r24, 0xF0	; 240
    6662:	85 60       	ori	r24, 0x05	; 5
    6664:	80 83       	st	Z, r24

	// Enable CCA interrupt
	TCE1.INTCTRLA = (TCE1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
    6666:	86 81       	ldd	r24, Z+6	; 0x06
    6668:	8c 7f       	andi	r24, 0xFC	; 252
    666a:	81 60       	ori	r24, 0x01	; 1
    666c:	86 83       	std	Z+6, r24	; 0x06

}
    666e:	08 95       	ret

00006670 <SD_WriteRTCBlock>:


}


void SD_WriteRTCBlock(uint32_t ticker, uint32_t time){
    6670:	af 92       	push	r10
    6672:	bf 92       	push	r11
    6674:	cf 92       	push	r12
    6676:	df 92       	push	r13
    6678:	ef 92       	push	r14
    667a:	ff 92       	push	r15
    667c:	0f 93       	push	r16
    667e:	1f 93       	push	r17
    6680:	7b 01       	movw	r14, r22
    6682:	8c 01       	movw	r16, r24
    6684:	59 01       	movw	r10, r18
    6686:	6a 01       	movw	r12, r20
         } 
     } 
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    6688:	8f ef       	ldi	r24, 0xFF	; 255
    668a:	9f ef       	ldi	r25, 0xFF	; 255
    668c:	af ef       	ldi	r26, 0xFF	; 255
    668e:	bf ef       	ldi	r27, 0xFF	; 255
    6690:	80 93 69 44 	sts	0x4469, r24
    6694:	90 93 6a 44 	sts	0x446A, r25
    6698:	a0 93 6b 44 	sts	0x446B, r26
    669c:	b0 93 6c 44 	sts	0x446C, r27
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    66a0:	6c e4       	ldi	r22, 0x4C	; 76
    66a2:	74 e7       	ldi	r23, 0x74	; 116
    66a4:	8e ed       	ldi	r24, 0xDE	; 222
    66a6:	90 eb       	ldi	r25, 0xB0	; 176
    66a8:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write32(27);				// record size  
    66ac:	6b e1       	ldi	r22, 0x1B	; 27
    66ae:	70 e0       	ldi	r23, 0x00	; 0
    66b0:	80 e0       	ldi	r24, 0x00	; 0
    66b2:	90 e0       	ldi	r25, 0x00	; 0
    66b4:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write16(2); 		// record type  
    66b8:	82 e0       	ldi	r24, 0x02	; 2
    66ba:	90 e0       	ldi	r25, 0x00	; 0
    66bc:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <SD_Write16>
	
														// payload
	
	SD_Write32(ticker);				// 32-bit counter
    66c0:	c8 01       	movw	r24, r16
    66c2:	b7 01       	movw	r22, r14
    66c4:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write32(time);			    // UNIX time  (40bit)
    66c8:	c6 01       	movw	r24, r12
    66ca:	b5 01       	movw	r22, r10
    66cc:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write8(0);
    66d0:	80 e0       	ldi	r24, 0x00	; 0
    66d2:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_Write32(0);           // unix time nanoseconds
    66d6:	60 e0       	ldi	r22, 0x00	; 0
    66d8:	70 e0       	ldi	r23, 0x00	; 0
    66da:	80 e0       	ldi	r24, 0x00	; 0
    66dc:	90 e0       	ldi	r25, 0x00	; 0
    66de:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_WriteCRC();			      // CRC			
    66e2:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <SD_WriteCRC>
		
	f_sync(&Log_File);
    66e6:	8a ee       	ldi	r24, 0xEA	; 234
    66e8:	9e e3       	ldi	r25, 0x3E	; 62
    66ea:	0e 94 0e 1b 	call	0x361c	; 0x361c <f_sync>

}
    66ee:	1f 91       	pop	r17
    66f0:	0f 91       	pop	r16
    66f2:	ff 90       	pop	r15
    66f4:	ef 90       	pop	r14
    66f6:	df 90       	pop	r13
    66f8:	cf 90       	pop	r12
    66fa:	bf 90       	pop	r11
    66fc:	af 90       	pop	r10
    66fe:	08 95       	ret

00006700 <Rs232_To_Debug>:
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
    6700:	20 91 f7 29 	lds	r18, 0x29F7
    6704:	30 91 f8 29 	lds	r19, 0x29F8
    6708:	80 91 f5 29 	lds	r24, 0x29F5
    670c:	90 91 f6 29 	lds	r25, 0x29F6
    6710:	28 17       	cp	r18, r24
    6712:	39 07       	cpc	r19, r25
    6714:	41 f4       	brne	.+16     	; 0x6726 <Rs232_To_Debug+0x26>
    6716:	f4 cf       	rjmp	.-24     	; 0x6700 <Rs232_To_Debug>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    6718:	80 91 a1 08 	lds	r24, 0x08A1
    671c:	85 ff       	sbrs	r24, 5
    671e:	fc cf       	rjmp	.-8      	; 0x6718 <Rs232_To_Debug+0x18>
	Debug_Usart.DATA = data;	
    6720:	90 93 a0 08 	sts	0x08A0, r25
    6724:	ed cf       	rjmp	.-38     	; 0x6700 <Rs232_To_Debug>


void Rs232_To_Debug(void){
	while(1){
		if(Rs232_CharReadyToRead()){
			Debug_SendByte(Rs232_GetByte(true));
    6726:	81 e0       	ldi	r24, 0x01	; 1
    6728:	0e 94 c2 02 	call	0x584	; 0x584 <Rs232_GetByte>
    672c:	98 2f       	mov	r25, r24
    672e:	f4 cf       	rjmp	.-24     	; 0x6718 <Rs232_To_Debug+0x18>

00006730 <Debug_To_Wifi>:
}



bool Debug_CharReadyToRead(void){
	if(Debug_writeLocation == Debug_readLocation){
    6730:	20 91 e2 29 	lds	r18, 0x29E2
    6734:	30 91 e3 29 	lds	r19, 0x29E3
    6738:	80 91 e0 29 	lds	r24, 0x29E0
    673c:	90 91 e1 29 	lds	r25, 0x29E1
    6740:	28 17       	cp	r18, r24
    6742:	39 07       	cpc	r19, r25
    6744:	b1 f4       	brne	.+44     	; 0x6772 <Debug_To_Wifi+0x42>
    6746:	06 c0       	rjmp	.+12     	; 0x6754 <Debug_To_Wifi+0x24>
	return tmp;
}


void Wifi_SendByte(uint8_t data){
	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    6748:	80 91 a1 0a 	lds	r24, 0x0AA1
    674c:	85 ff       	sbrs	r24, 5
    674e:	fc cf       	rjmp	.-8      	; 0x6748 <Debug_To_Wifi+0x18>
	Wifi_Usart.DATA = data;
    6750:	90 93 a0 0a 	sts	0x0AA0, r25
void Debug_To_Wifi(void){
	while(1){
		if(Debug_CharReadyToRead()){
			Wifi_SendByte(Debug_GetByte(true));
		}
		if(Wifi_CharReadyToRead()){
    6754:	0e 94 cd 01 	call	0x39a	; 0x39a <Wifi_CharReadyToRead>
    6758:	88 23       	and	r24, r24
    675a:	51 f3       	breq	.-44     	; 0x6730 <Debug_To_Wifi>
			Debug_SendByte(Wifi_GetByte(true));
    675c:	81 e0       	ldi	r24, 0x01	; 1
    675e:	0e 94 25 02 	call	0x44a	; 0x44a <Wifi_GetByte>
    6762:	98 2f       	mov	r25, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    6764:	80 91 a1 08 	lds	r24, 0x08A1
    6768:	85 ff       	sbrs	r24, 5
    676a:	fc cf       	rjmp	.-8      	; 0x6764 <Debug_To_Wifi+0x34>
	Debug_Usart.DATA = data;	
    676c:	90 93 a0 08 	sts	0x08A0, r25
    6770:	df cf       	rjmp	.-66     	; 0x6730 <Debug_To_Wifi>


void Debug_To_Wifi(void){
	while(1){
		if(Debug_CharReadyToRead()){
			Wifi_SendByte(Debug_GetByte(true));
    6772:	81 e0       	ldi	r24, 0x01	; 1
    6774:	0e 94 3d 01 	call	0x27a	; 0x27a <Debug_GetByte>
    6778:	98 2f       	mov	r25, r24
    677a:	e6 cf       	rjmp	.-52     	; 0x6748 <Debug_To_Wifi+0x18>

0000677c <SD_MakeFileName>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
}

void SD_MakeFileName(uint32_t var){
    677c:	0f 93       	push	r16
    677e:	1f 93       	push	r17
	fileName[0] = '/';
    6780:	0e e2       	ldi	r16, 0x2E	; 46
    6782:	15 e3       	ldi	r17, 0x35	; 53
    6784:	2f e2       	ldi	r18, 0x2F	; 47
    6786:	20 93 2e 35 	sts	0x352E, r18
	ltoa(var, fileName+1, 16);
    678a:	a8 01       	movw	r20, r16
    678c:	4f 5f       	subi	r20, 0xFF	; 255
    678e:	5f 4f       	sbci	r21, 0xFF	; 255
    6790:	20 e1       	ldi	r18, 0x10	; 16
    6792:	30 e0       	ldi	r19, 0x00	; 0
    6794:	0e 94 35 44 	call	0x886a	; 0x886a <ltoa>
	strcat(fileName, ".bt");
    6798:	c8 01       	movw	r24, r16
    679a:	6b e0       	ldi	r22, 0x0B	; 11
    679c:	70 e2       	ldi	r23, 0x20	; 32
    679e:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <strcat>
}
    67a2:	1f 91       	pop	r17
    67a4:	0f 91       	pop	r16
    67a6:	08 95       	ret

000067a8 <SD_WriteString>:
	tmp32[2] = (uint8_t)(var >> 16);
	tmp32[3] = (uint8_t)(var >> 24);
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
    67a8:	af 92       	push	r10
    67aa:	bf 92       	push	r11
    67ac:	cf 92       	push	r12
    67ae:	df 92       	push	r13
    67b0:	ef 92       	push	r14
    67b2:	ff 92       	push	r15
    67b4:	0f 93       	push	r16
    67b6:	1f 93       	push	r17
    67b8:	cf 93       	push	r28
    67ba:	df 93       	push	r29
    67bc:	6c 01       	movw	r12, r24
	f_puts (string, &Log_File);
    67be:	6a ee       	ldi	r22, 0xEA	; 234
    67c0:	7e e3       	ldi	r23, 0x3E	; 62
    67c2:	0e 94 a0 24 	call	0x4940	; 0x4940 <f_puts>
    67c6:	aa 24       	eor	r10, r10
    67c8:	4a c0       	rjmp	.+148    	; 0x685e <SD_WriteString+0xb6>
	
	for (uint8_t i=0; i<strlen(string); i++) 
      { 
      CRC = CRC ^ string[i] ; 
    67ca:	20 91 69 44 	lds	r18, 0x4469
    67ce:	30 91 6a 44 	lds	r19, 0x446A
    67d2:	40 91 6b 44 	lds	r20, 0x446B
    67d6:	50 91 6c 44 	lds	r21, 0x446C
    67da:	cc 0d       	add	r28, r12
    67dc:	dd 1d       	adc	r29, r13
    67de:	88 81       	ld	r24, Y
    67e0:	90 e0       	ldi	r25, 0x00	; 0
    67e2:	a0 e0       	ldi	r26, 0x00	; 0
    67e4:	b0 e0       	ldi	r27, 0x00	; 0
    67e6:	82 27       	eor	r24, r18
    67e8:	93 27       	eor	r25, r19
    67ea:	a4 27       	eor	r26, r20
    67ec:	b5 27       	eor	r27, r21
    67ee:	80 93 69 44 	sts	0x4469, r24
    67f2:	90 93 6a 44 	sts	0x446A, r25
    67f6:	a0 93 6b 44 	sts	0x446B, r26
    67fa:	b0 93 6c 44 	sts	0x446C, r27
    67fe:	bb 24       	eor	r11, r11
      for (uint8_t j=0; j<8; j++) 
         { 
            CRC = (CRC>>1) ^ (0xEDB88320 * (CRC & 1)) ; 
    6800:	e0 90 69 44 	lds	r14, 0x4469
    6804:	f0 90 6a 44 	lds	r15, 0x446A
    6808:	00 91 6b 44 	lds	r16, 0x446B
    680c:	10 91 6c 44 	lds	r17, 0x446C
    6810:	60 91 69 44 	lds	r22, 0x4469
    6814:	70 91 6a 44 	lds	r23, 0x446A
    6818:	80 91 6b 44 	lds	r24, 0x446B
    681c:	90 91 6c 44 	lds	r25, 0x446C
    6820:	61 70       	andi	r22, 0x01	; 1
    6822:	70 70       	andi	r23, 0x00	; 0
    6824:	80 70       	andi	r24, 0x00	; 0
    6826:	90 70       	andi	r25, 0x00	; 0
    6828:	20 e2       	ldi	r18, 0x20	; 32
    682a:	33 e8       	ldi	r19, 0x83	; 131
    682c:	48 eb       	ldi	r20, 0xB8	; 184
    682e:	5d ee       	ldi	r21, 0xED	; 237
    6830:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
    6834:	16 95       	lsr	r17
    6836:	07 95       	ror	r16
    6838:	f7 94       	ror	r15
    683a:	e7 94       	ror	r14
    683c:	e6 26       	eor	r14, r22
    683e:	f7 26       	eor	r15, r23
    6840:	08 27       	eor	r16, r24
    6842:	19 27       	eor	r17, r25
    6844:	e0 92 69 44 	sts	0x4469, r14
    6848:	f0 92 6a 44 	sts	0x446A, r15
    684c:	00 93 6b 44 	sts	0x446B, r16
    6850:	10 93 6c 44 	sts	0x446C, r17
	f_puts (string, &Log_File);
	
	for (uint8_t i=0; i<strlen(string); i++) 
      { 
      CRC = CRC ^ string[i] ; 
      for (uint8_t j=0; j<8; j++) 
    6854:	b3 94       	inc	r11
    6856:	88 e0       	ldi	r24, 0x08	; 8
    6858:	b8 16       	cp	r11, r24
    685a:	91 f6       	brne	.-92     	; 0x6800 <SD_WriteString+0x58>
}

void SD_WriteString(char * string){
	f_puts (string, &Log_File);
	
	for (uint8_t i=0; i<strlen(string); i++) 
    685c:	a3 94       	inc	r10
    685e:	ca 2d       	mov	r28, r10
    6860:	d0 e0       	ldi	r29, 0x00	; 0
    6862:	f6 01       	movw	r30, r12
    6864:	01 90       	ld	r0, Z+
    6866:	00 20       	and	r0, r0
    6868:	e9 f7       	brne	.-6      	; 0x6864 <SD_WriteString+0xbc>
    686a:	31 97       	sbiw	r30, 0x01	; 1
    686c:	ec 19       	sub	r30, r12
    686e:	fd 09       	sbc	r31, r13
    6870:	ce 17       	cp	r28, r30
    6872:	df 07       	cpc	r29, r31
    6874:	08 f4       	brcc	.+2      	; 0x6878 <SD_WriteString+0xd0>
    6876:	a9 cf       	rjmp	.-174    	; 0x67ca <SD_WriteString+0x22>
      for (uint8_t j=0; j<8; j++) 
         { 
            CRC = (CRC>>1) ^ (0xEDB88320 * (CRC & 1)) ; 
         } 
     } 
}
    6878:	df 91       	pop	r29
    687a:	cf 91       	pop	r28
    687c:	1f 91       	pop	r17
    687e:	0f 91       	pop	r16
    6880:	ff 90       	pop	r15
    6882:	ef 90       	pop	r14
    6884:	df 90       	pop	r13
    6886:	cf 90       	pop	r12
    6888:	bf 90       	pop	r11
    688a:	af 90       	pop	r10
    688c:	08 95       	ret

0000688e <SD_WriteAirSample>:

	f_sync(&Log_File);

}

void SD_WriteAirSample(void){
    688e:	0f 93       	push	r16
    6890:	1f 93       	push	r17
         } 
     } 
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    6892:	8f ef       	ldi	r24, 0xFF	; 255
    6894:	9f ef       	ldi	r25, 0xFF	; 255
    6896:	af ef       	ldi	r26, 0xFF	; 255
    6898:	bf ef       	ldi	r27, 0xFF	; 255
    689a:	80 93 69 44 	sts	0x4469, r24
    689e:	90 93 6a 44 	sts	0x446A, r25
    68a2:	a0 93 6b 44 	sts	0x446B, r26
    68a6:	b0 93 6c 44 	sts	0x446C, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    68aa:	6c e4       	ldi	r22, 0x4C	; 76
    68ac:	74 e7       	ldi	r23, 0x74	; 116
    68ae:	8e ed       	ldi	r24, 0xDE	; 222
    68b0:	90 eb       	ldi	r25, 0xB0	; 176
    68b2:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write32(61);				// record size
    68b6:	6d e3       	ldi	r22, 0x3D	; 61
    68b8:	70 e0       	ldi	r23, 0x00	; 0
    68ba:	80 e0       	ldi	r24, 0x00	; 0
    68bc:	90 e0       	ldi	r25, 0x00	; 0
    68be:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write16(3); 		// record type
    68c2:	83 e0       	ldi	r24, 0x03	; 3
    68c4:	90 e0       	ldi	r25, 0x00	; 0
    68c6:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <SD_Write16>

														// payload

	SD_Write32(airSampleTime);					// time
    68ca:	60 91 dc 29 	lds	r22, 0x29DC
    68ce:	70 91 dd 29 	lds	r23, 0x29DD
    68d2:	80 91 de 29 	lds	r24, 0x29DE
    68d6:	90 91 df 29 	lds	r25, 0x29DF
    68da:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>

	SD_Write32(110592000);										// sample period (0.01667hz)
    68de:	60 e0       	ldi	r22, 0x00	; 0
    68e0:	70 e8       	ldi	r23, 0x80	; 128
    68e2:	87 e9       	ldi	r24, 0x97	; 151
    68e4:	96 e0       	ldi	r25, 0x06	; 6
    68e6:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write32(1);												// number of samples
    68ea:	61 e0       	ldi	r22, 0x01	; 1
    68ec:	70 e0       	ldi	r23, 0x00	; 0
    68ee:	80 e0       	ldi	r24, 0x00	; 0
    68f0:	90 e0       	ldi	r25, 0x00	; 0
    68f2:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>

	SD_WriteString("Air_Small");
    68f6:	8f e0       	ldi	r24, 0x0F	; 15
    68f8:	90 e2       	ldi	r25, 0x20	; 32
    68fa:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x09);
    68fe:	89 e0       	ldi	r24, 0x09	; 9
    6900:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString("32");
    6904:	09 e1       	ldi	r16, 0x19	; 25
    6906:	10 e2       	ldi	r17, 0x20	; 32
    6908:	c8 01       	movw	r24, r16
    690a:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x0A);
    690e:	8a e0       	ldi	r24, 0x0A	; 10
    6910:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString("Air_Large");
    6914:	8c e1       	ldi	r24, 0x1C	; 28
    6916:	90 e2       	ldi	r25, 0x20	; 32
    6918:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x09);
    691c:	89 e0       	ldi	r24, 0x09	; 9
    691e:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString("32");
    6922:	c8 01       	movw	r24, r16
    6924:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x0A);
    6928:	8a e0       	ldi	r24, 0x0A	; 10
    692a:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>

	SD_Write8(0x00);
    692e:	80 e0       	ldi	r24, 0x00	; 0
    6930:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>

	SD_Write32(smallCount);
    6934:	60 91 f9 2c 	lds	r22, 0x2CF9
    6938:	70 91 fa 2c 	lds	r23, 0x2CFA
    693c:	80 91 fb 2c 	lds	r24, 0x2CFB
    6940:	90 91 fc 2c 	lds	r25, 0x2CFC
    6944:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write32(largeCount);
    6948:	60 91 0d 49 	lds	r22, 0x490D
    694c:	70 91 0e 49 	lds	r23, 0x490E
    6950:	80 91 0f 49 	lds	r24, 0x490F
    6954:	90 91 10 49 	lds	r25, 0x4910
    6958:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>

	SD_WriteCRC();			// CRC
    695c:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <SD_WriteCRC>

	f_sync(&Log_File);
    6960:	8a ee       	ldi	r24, 0xEA	; 234
    6962:	9e e3       	ldi	r25, 0x3E	; 62
    6964:	0e 94 0e 1b 	call	0x361c	; 0x361c <f_sync>

}
    6968:	1f 91       	pop	r17
    696a:	0f 91       	pop	r16
    696c:	08 95       	ret

0000696e <SD_WriteLightBuffer>:

	f_sync(&Log_File);

}

void SD_WriteLightBuffer(uint8_t bufferNumber){
    696e:	1f 93       	push	r17
    6970:	cf 93       	push	r28
    6972:	df 93       	push	r29
    6974:	18 2f       	mov	r17, r24
    6976:	8f ef       	ldi	r24, 0xFF	; 255
    6978:	9f ef       	ldi	r25, 0xFF	; 255
    697a:	af ef       	ldi	r26, 0xFF	; 255
    697c:	bf ef       	ldi	r27, 0xFF	; 255
    697e:	80 93 69 44 	sts	0x4469, r24
    6982:	90 93 6a 44 	sts	0x446A, r25
    6986:	a0 93 6b 44 	sts	0x446B, r26
    698a:	b0 93 6c 44 	sts	0x446C, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    698e:	6c e4       	ldi	r22, 0x4C	; 76
    6990:	74 e7       	ldi	r23, 0x74	; 116
    6992:	8e ed       	ldi	r24, 0xDE	; 222
    6994:	90 eb       	ldi	r25, 0xB0	; 176
    6996:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write32(244);				// record size
    699a:	64 ef       	ldi	r22, 0xF4	; 244
    699c:	70 e0       	ldi	r23, 0x00	; 0
    699e:	80 e0       	ldi	r24, 0x00	; 0
    69a0:	90 e0       	ldi	r25, 0x00	; 0
    69a2:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write16(3); 		// record type
    69a6:	83 e0       	ldi	r24, 0x03	; 3
    69a8:	90 e0       	ldi	r25, 0x00	; 0
    69aa:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <SD_Write16>

														// payload
	if(bufferNumber == 1){
    69ae:	11 30       	cpi	r17, 0x01	; 1
    69b0:	49 f4       	brne	.+18     	; 0x69c4 <SD_WriteLightBuffer+0x56>
		SD_Write32(lightSampleStartTime1);					// time
    69b2:	60 91 d4 29 	lds	r22, 0x29D4
    69b6:	70 91 d5 29 	lds	r23, 0x29D5
    69ba:	80 91 d6 29 	lds	r24, 0x29D6
    69be:	90 91 d7 29 	lds	r25, 0x29D7
    69c2:	08 c0       	rjmp	.+16     	; 0x69d4 <SD_WriteLightBuffer+0x66>
	} else {
		SD_Write32(lightSampleStartTime2);					// time
    69c4:	60 91 d8 29 	lds	r22, 0x29D8
    69c8:	70 91 d9 29 	lds	r23, 0x29D9
    69cc:	80 91 da 29 	lds	r24, 0x29DA
    69d0:	90 91 db 29 	lds	r25, 0x29DB
    69d4:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    69d8:	60 e0       	ldi	r22, 0x00	; 0
    69da:	70 e2       	ldi	r23, 0x20	; 32
    69dc:	8c e1       	ldi	r24, 0x1C	; 28
    69de:	90 e0       	ldi	r25, 0x00	; 0
    69e0:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write32(10);												// number of samples
    69e4:	6a e0       	ldi	r22, 0x0A	; 10
    69e6:	70 e0       	ldi	r23, 0x00	; 0
    69e8:	80 e0       	ldi	r24, 0x00	; 0
    69ea:	90 e0       	ldi	r25, 0x00	; 0
    69ec:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>

	SD_WriteString("Light_Green");
    69f0:	86 e2       	ldi	r24, 0x26	; 38
    69f2:	90 e2       	ldi	r25, 0x20	; 32
    69f4:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x09);
    69f8:	89 e0       	ldi	r24, 0x09	; 9
    69fa:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString("32");
    69fe:	89 e1       	ldi	r24, 0x19	; 25
    6a00:	90 e2       	ldi	r25, 0x20	; 32
    6a02:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x0A);
    6a06:	8a e0       	ldi	r24, 0x0A	; 10
    6a08:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString("Light_Red");
    6a0c:	82 e3       	ldi	r24, 0x32	; 50
    6a0e:	90 e2       	ldi	r25, 0x20	; 32
    6a10:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x09);
    6a14:	89 e0       	ldi	r24, 0x09	; 9
    6a16:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString("32");
    6a1a:	89 e1       	ldi	r24, 0x19	; 25
    6a1c:	90 e2       	ldi	r25, 0x20	; 32
    6a1e:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x0A);
    6a22:	8a e0       	ldi	r24, 0x0A	; 10
    6a24:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString("Light_Blue");
    6a28:	8c e3       	ldi	r24, 0x3C	; 60
    6a2a:	90 e2       	ldi	r25, 0x20	; 32
    6a2c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x09);
    6a30:	89 e0       	ldi	r24, 0x09	; 9
    6a32:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString("32");
    6a36:	89 e1       	ldi	r24, 0x19	; 25
    6a38:	90 e2       	ldi	r25, 0x20	; 32
    6a3a:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x0A);
    6a3e:	8a e0       	ldi	r24, 0x0A	; 10
    6a40:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString("Light_Clear");
    6a44:	87 e4       	ldi	r24, 0x47	; 71
    6a46:	90 e2       	ldi	r25, 0x20	; 32
    6a48:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x09);
    6a4c:	89 e0       	ldi	r24, 0x09	; 9
    6a4e:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString("32");
    6a52:	89 e1       	ldi	r24, 0x19	; 25
    6a54:	90 e2       	ldi	r25, 0x20	; 32
    6a56:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x0A);
    6a5a:	8a e0       	ldi	r24, 0x0A	; 10
    6a5c:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>

	SD_Write8(0x00);
    6a60:	80 e0       	ldi	r24, 0x00	; 0
    6a62:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>

	if(bufferNumber == 1){
    6a66:	11 30       	cpi	r17, 0x01	; 1
    6a68:	69 f4       	brne	.+26     	; 0x6a84 <SD_WriteLightBuffer+0x116>
    6a6a:	cd e6       	ldi	r28, 0x6D	; 109
    6a6c:	d8 e4       	ldi	r29, 0x48	; 72
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer1[i]);
    6a6e:	69 91       	ld	r22, Y+
    6a70:	79 91       	ld	r23, Y+
    6a72:	89 91       	ld	r24, Y+
    6a74:	99 91       	ld	r25, Y+
    6a76:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write8(0x0A);

	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 40; i++){
    6a7a:	89 e4       	ldi	r24, 0x49	; 73
    6a7c:	cd 30       	cpi	r28, 0x0D	; 13
    6a7e:	d8 07       	cpc	r29, r24
    6a80:	b1 f7       	brne	.-20     	; 0x6a6e <SD_WriteLightBuffer+0x100>
    6a82:	0c c0       	rjmp	.+24     	; 0x6a9c <SD_WriteLightBuffer+0x12e>
    6a84:	ca e5       	ldi	r28, 0x5A	; 90
    6a86:	d5 e3       	ldi	r29, 0x35	; 53
			SD_Write32(lightBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer2[i]);
    6a88:	69 91       	ld	r22, Y+
    6a8a:	79 91       	ld	r23, Y+
    6a8c:	89 91       	ld	r24, Y+
    6a8e:	99 91       	ld	r25, Y+
    6a90:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 40; i++){
    6a94:	85 e3       	ldi	r24, 0x35	; 53
    6a96:	ca 3f       	cpi	r28, 0xFA	; 250
    6a98:	d8 07       	cpc	r29, r24
    6a9a:	b1 f7       	brne	.-20     	; 0x6a88 <SD_WriteLightBuffer+0x11a>
			SD_Write32(lightBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    6a9c:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <SD_WriteCRC>

	f_sync(&Log_File);
    6aa0:	8a ee       	ldi	r24, 0xEA	; 234
    6aa2:	9e e3       	ldi	r25, 0x3E	; 62
    6aa4:	0e 94 0e 1b 	call	0x361c	; 0x361c <f_sync>

}
    6aa8:	df 91       	pop	r29
    6aaa:	cf 91       	pop	r28
    6aac:	1f 91       	pop	r17
    6aae:	08 95       	ret

00006ab0 <SD_WriteMicrophoneBuffer>:

	f_sync(&Log_File);

}

void SD_WriteMicrophoneBuffer(uint8_t bufferNumber){
    6ab0:	1f 93       	push	r17
    6ab2:	18 2f       	mov	r17, r24
    6ab4:	8f ef       	ldi	r24, 0xFF	; 255
    6ab6:	9f ef       	ldi	r25, 0xFF	; 255
    6ab8:	af ef       	ldi	r26, 0xFF	; 255
    6aba:	bf ef       	ldi	r27, 0xFF	; 255
    6abc:	80 93 69 44 	sts	0x4469, r24
    6ac0:	90 93 6a 44 	sts	0x446A, r25
    6ac4:	a0 93 6b 44 	sts	0x446B, r26
    6ac8:	b0 93 6c 44 	sts	0x446C, r27

	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    6acc:	6c e4       	ldi	r22, 0x4C	; 76
    6ace:	74 e7       	ldi	r23, 0x74	; 116
    6ad0:	8e ed       	ldi	r24, 0xDE	; 222
    6ad2:	90 eb       	ldi	r25, 0xB0	; 176
    6ad4:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write32(40+microphoneNumberOfSamples);		// record size
    6ad8:	60 e1       	ldi	r22, 0x10	; 16
    6ada:	74 e0       	ldi	r23, 0x04	; 4
    6adc:	80 e0       	ldi	r24, 0x00	; 0
    6ade:	90 e0       	ldi	r25, 0x00	; 0
    6ae0:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write16(3); 									// record type
    6ae4:	83 e0       	ldi	r24, 0x03	; 3
    6ae6:	90 e0       	ldi	r25, 0x00	; 0
    6ae8:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <SD_Write16>

														// payload
	if(bufferNumber == 1){
    6aec:	11 30       	cpi	r17, 0x01	; 1
    6aee:	49 f4       	brne	.+18     	; 0x6b02 <SD_WriteMicrophoneBuffer+0x52>
		SD_Write32(microphoneSampleStartTime1);					// time
    6af0:	60 91 cc 29 	lds	r22, 0x29CC
    6af4:	70 91 cd 29 	lds	r23, 0x29CD
    6af8:	80 91 ce 29 	lds	r24, 0x29CE
    6afc:	90 91 cf 29 	lds	r25, 0x29CF
    6b00:	08 c0       	rjmp	.+16     	; 0x6b12 <SD_WriteMicrophoneBuffer+0x62>
	} else {
		SD_Write32(microphoneSampleStartTime2);					// time
    6b02:	60 91 d0 29 	lds	r22, 0x29D0
    6b06:	70 91 d1 29 	lds	r23, 0x29D1
    6b0a:	80 91 d2 29 	lds	r24, 0x29D2
    6b0e:	90 91 d3 29 	lds	r25, 0x29D3
    6b12:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	}


	SD_Write32(256);								// sample period (7.2khz)
    6b16:	60 e0       	ldi	r22, 0x00	; 0
    6b18:	71 e0       	ldi	r23, 0x01	; 1
    6b1a:	80 e0       	ldi	r24, 0x00	; 0
    6b1c:	90 e0       	ldi	r25, 0x00	; 0
    6b1e:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>



	SD_Write32(microphoneNumberOfSamples);			// number of samples
    6b22:	68 ee       	ldi	r22, 0xE8	; 232
    6b24:	73 e0       	ldi	r23, 0x03	; 3
    6b26:	80 e0       	ldi	r24, 0x00	; 0
    6b28:	90 e0       	ldi	r25, 0x00	; 0
    6b2a:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>

	SD_WriteString("Microphone");
    6b2e:	83 e5       	ldi	r24, 0x53	; 83
    6b30:	90 e2       	ldi	r25, 0x20	; 32
    6b32:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x09);
    6b36:	89 e0       	ldi	r24, 0x09	; 9
    6b38:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString("8");
    6b3c:	8e e5       	ldi	r24, 0x5E	; 94
    6b3e:	90 e2       	ldi	r25, 0x20	; 32
    6b40:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x0A);
    6b44:	8a e0       	ldi	r24, 0x0A	; 10
    6b46:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_Write8(0x00);
    6b4a:	80 e0       	ldi	r24, 0x00	; 0
    6b4c:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>

	if(bufferNumber == 1){
    6b50:	11 30       	cpi	r17, 0x01	; 1
    6b52:	19 f4       	brne	.+6      	; 0x6b5a <SD_WriteMicrophoneBuffer+0xaa>
		SD_WriteBuffer(microphoneBuffer1,microphoneNumberOfSamples);
    6b54:	8c e2       	ldi	r24, 0x2C	; 44
    6b56:	96 e3       	ldi	r25, 0x36	; 54
    6b58:	02 c0       	rjmp	.+4      	; 0x6b5e <SD_WriteMicrophoneBuffer+0xae>
	} else {
		SD_WriteBuffer(microphoneBuffer2,microphoneNumberOfSamples);
    6b5a:	86 e4       	ldi	r24, 0x46	; 70
    6b5c:	91 e3       	ldi	r25, 0x31	; 49
    6b5e:	68 ee       	ldi	r22, 0xE8	; 232
    6b60:	73 e0       	ldi	r23, 0x03	; 3
    6b62:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <SD_WriteBuffer>
	}

	SD_WriteCRC();									// CRC
    6b66:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <SD_WriteCRC>

	f_sync(&Log_File);
    6b6a:	8a ee       	ldi	r24, 0xEA	; 234
    6b6c:	9e e3       	ldi	r25, 0x3E	; 62
    6b6e:	0e 94 0e 1b 	call	0x361c	; 0x361c <f_sync>

}
    6b72:	1f 91       	pop	r17
    6b74:	08 95       	ret

00006b76 <SD_WritePressureBuffer>:
	f_sync(&Log_File);

}


void SD_WritePressureBuffer(uint8_t bufferNumber){
    6b76:	1f 93       	push	r17
    6b78:	cf 93       	push	r28
    6b7a:	df 93       	push	r29
    6b7c:	18 2f       	mov	r17, r24
    6b7e:	8f ef       	ldi	r24, 0xFF	; 255
    6b80:	9f ef       	ldi	r25, 0xFF	; 255
    6b82:	af ef       	ldi	r26, 0xFF	; 255
    6b84:	bf ef       	ldi	r27, 0xFF	; 255
    6b86:	80 93 69 44 	sts	0x4469, r24
    6b8a:	90 93 6a 44 	sts	0x446A, r25
    6b8e:	a0 93 6b 44 	sts	0x446B, r26
    6b92:	b0 93 6c 44 	sts	0x446C, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    6b96:	6c e4       	ldi	r22, 0x4C	; 76
    6b98:	74 e7       	ldi	r23, 0x74	; 116
    6b9a:	8e ed       	ldi	r24, 0xDE	; 222
    6b9c:	90 eb       	ldi	r25, 0xB0	; 176
    6b9e:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write32(48);				// record size
    6ba2:	60 e3       	ldi	r22, 0x30	; 48
    6ba4:	70 e0       	ldi	r23, 0x00	; 0
    6ba6:	80 e0       	ldi	r24, 0x00	; 0
    6ba8:	90 e0       	ldi	r25, 0x00	; 0
    6baa:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write16(3); 		// record type
    6bae:	83 e0       	ldi	r24, 0x03	; 3
    6bb0:	90 e0       	ldi	r25, 0x00	; 0
    6bb2:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <SD_Write16>

											// payload
	if(bufferNumber == 1){
    6bb6:	11 30       	cpi	r17, 0x01	; 1
    6bb8:	49 f4       	brne	.+18     	; 0x6bcc <SD_WritePressureBuffer+0x56>
		SD_Write32(pressureSampleStartTime1);					// time
    6bba:	60 91 c4 29 	lds	r22, 0x29C4
    6bbe:	70 91 c5 29 	lds	r23, 0x29C5
    6bc2:	80 91 c6 29 	lds	r24, 0x29C6
    6bc6:	90 91 c7 29 	lds	r25, 0x29C7
    6bca:	08 c0       	rjmp	.+16     	; 0x6bdc <SD_WritePressureBuffer+0x66>
	} else {
		SD_Write32(pressureSampleStartTime2);					// time
    6bcc:	60 91 c8 29 	lds	r22, 0x29C8
    6bd0:	70 91 c9 29 	lds	r23, 0x29C9
    6bd4:	80 91 ca 29 	lds	r24, 0x29CA
    6bd8:	90 91 cb 29 	lds	r25, 0x29CB
    6bdc:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    6be0:	60 e0       	ldi	r22, 0x00	; 0
    6be2:	70 e2       	ldi	r23, 0x20	; 32
    6be4:	8c e1       	ldi	r24, 0x1C	; 28
    6be6:	90 e0       	ldi	r25, 0x00	; 0
    6be8:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write32(10);												// number of samples
    6bec:	6a e0       	ldi	r22, 0x0A	; 10
    6bee:	70 e0       	ldi	r23, 0x00	; 0
    6bf0:	80 e0       	ldi	r24, 0x00	; 0
    6bf2:	90 e0       	ldi	r25, 0x00	; 0
    6bf4:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>

	SD_WriteString("Pressure");
    6bf8:	80 e6       	ldi	r24, 0x60	; 96
    6bfa:	90 e2       	ldi	r25, 0x20	; 32
    6bfc:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x09);
    6c00:	89 e0       	ldi	r24, 0x09	; 9
    6c02:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString("8");
    6c06:	8e e5       	ldi	r24, 0x5E	; 94
    6c08:	90 e2       	ldi	r25, 0x20	; 32
    6c0a:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x0A);
    6c0e:	8a e0       	ldi	r24, 0x0A	; 10
    6c10:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_Write8(0x00);
    6c14:	80 e0       	ldi	r24, 0x00	; 0
    6c16:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>

	if(bufferNumber == 1){
    6c1a:	11 30       	cpi	r17, 0x01	; 1
    6c1c:	51 f4       	brne	.+20     	; 0x6c32 <SD_WritePressureBuffer+0xbc>
    6c1e:	cf ee       	ldi	r28, 0xEF	; 239
    6c20:	dc e2       	ldi	r29, 0x2C	; 44
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer1[i]);
    6c22:	89 91       	ld	r24, Y+
    6c24:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString("8");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    6c28:	8c e2       	ldi	r24, 0x2C	; 44
    6c2a:	c9 3f       	cpi	r28, 0xF9	; 249
    6c2c:	d8 07       	cpc	r29, r24
    6c2e:	c9 f7       	brne	.-14     	; 0x6c22 <SD_WritePressureBuffer+0xac>
    6c30:	09 c0       	rjmp	.+18     	; 0x6c44 <SD_WritePressureBuffer+0xce>
    6c32:	ca eb       	ldi	r28, 0xBA	; 186
    6c34:	da e3       	ldi	r29, 0x3A	; 58
			SD_Write8(pressureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer2[i]);
    6c36:	89 91       	ld	r24, Y+
    6c38:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(pressureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    6c3c:	8a e3       	ldi	r24, 0x3A	; 58
    6c3e:	c4 3c       	cpi	r28, 0xC4	; 196
    6c40:	d8 07       	cpc	r29, r24
    6c42:	c9 f7       	brne	.-14     	; 0x6c36 <SD_WritePressureBuffer+0xc0>
			SD_Write8(pressureBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    6c44:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <SD_WriteCRC>

	f_sync(&Log_File);
    6c48:	8a ee       	ldi	r24, 0xEA	; 234
    6c4a:	9e e3       	ldi	r25, 0x3E	; 62
    6c4c:	0e 94 0e 1b 	call	0x361c	; 0x361c <f_sync>

}
    6c50:	df 91       	pop	r29
    6c52:	cf 91       	pop	r28
    6c54:	1f 91       	pop	r17
    6c56:	08 95       	ret

00006c58 <SD_WriteHumidityBuffer>:
		
	f_sync(&Log_File);

}

void SD_WriteHumidityBuffer(uint8_t bufferNumber){
    6c58:	1f 93       	push	r17
    6c5a:	cf 93       	push	r28
    6c5c:	df 93       	push	r29
    6c5e:	18 2f       	mov	r17, r24
    6c60:	8f ef       	ldi	r24, 0xFF	; 255
    6c62:	9f ef       	ldi	r25, 0xFF	; 255
    6c64:	af ef       	ldi	r26, 0xFF	; 255
    6c66:	bf ef       	ldi	r27, 0xFF	; 255
    6c68:	80 93 69 44 	sts	0x4469, r24
    6c6c:	90 93 6a 44 	sts	0x446A, r25
    6c70:	a0 93 6b 44 	sts	0x446B, r26
    6c74:	b0 93 6c 44 	sts	0x446C, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    6c78:	6c e4       	ldi	r22, 0x4C	; 76
    6c7a:	74 e7       	ldi	r23, 0x74	; 116
    6c7c:	8e ed       	ldi	r24, 0xDE	; 222
    6c7e:	90 eb       	ldi	r25, 0xB0	; 176
    6c80:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write32(48);				// record size
    6c84:	60 e3       	ldi	r22, 0x30	; 48
    6c86:	70 e0       	ldi	r23, 0x00	; 0
    6c88:	80 e0       	ldi	r24, 0x00	; 0
    6c8a:	90 e0       	ldi	r25, 0x00	; 0
    6c8c:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write16(3); 		// record type
    6c90:	83 e0       	ldi	r24, 0x03	; 3
    6c92:	90 e0       	ldi	r25, 0x00	; 0
    6c94:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <SD_Write16>

											// payload
	if(bufferNumber == 1){
    6c98:	11 30       	cpi	r17, 0x01	; 1
    6c9a:	49 f4       	brne	.+18     	; 0x6cae <SD_WriteHumidityBuffer+0x56>
		SD_Write32(humiditySampleStartTime1);					// time
    6c9c:	60 91 bc 29 	lds	r22, 0x29BC
    6ca0:	70 91 bd 29 	lds	r23, 0x29BD
    6ca4:	80 91 be 29 	lds	r24, 0x29BE
    6ca8:	90 91 bf 29 	lds	r25, 0x29BF
    6cac:	08 c0       	rjmp	.+16     	; 0x6cbe <SD_WriteHumidityBuffer+0x66>
	} else {
		SD_Write32(humiditySampleStartTime2);					// time
    6cae:	60 91 c0 29 	lds	r22, 0x29C0
    6cb2:	70 91 c1 29 	lds	r23, 0x29C1
    6cb6:	80 91 c2 29 	lds	r24, 0x29C2
    6cba:	90 91 c3 29 	lds	r25, 0x29C3
    6cbe:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    6cc2:	60 e0       	ldi	r22, 0x00	; 0
    6cc4:	70 e2       	ldi	r23, 0x20	; 32
    6cc6:	8c e1       	ldi	r24, 0x1C	; 28
    6cc8:	90 e0       	ldi	r25, 0x00	; 0
    6cca:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write32(10);												// number of samples
    6cce:	6a e0       	ldi	r22, 0x0A	; 10
    6cd0:	70 e0       	ldi	r23, 0x00	; 0
    6cd2:	80 e0       	ldi	r24, 0x00	; 0
    6cd4:	90 e0       	ldi	r25, 0x00	; 0
    6cd6:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>

	SD_WriteString("Humidity");
    6cda:	89 e6       	ldi	r24, 0x69	; 105
    6cdc:	90 e2       	ldi	r25, 0x20	; 32
    6cde:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x09);
    6ce2:	89 e0       	ldi	r24, 0x09	; 9
    6ce4:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString("8");
    6ce8:	8e e5       	ldi	r24, 0x5E	; 94
    6cea:	90 e2       	ldi	r25, 0x20	; 32
    6cec:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x0A);
    6cf0:	8a e0       	ldi	r24, 0x0A	; 10
    6cf2:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_Write8(0x00);
    6cf6:	80 e0       	ldi	r24, 0x00	; 0
    6cf8:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>

	if(bufferNumber == 1){
    6cfc:	11 30       	cpi	r17, 0x01	; 1
    6cfe:	51 f4       	brne	.+20     	; 0x6d14 <SD_WriteHumidityBuffer+0xbc>
    6d00:	c6 ed       	ldi	r28, 0xD6	; 214
    6d02:	da e3       	ldi	r29, 0x3A	; 58
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer1[i]);
    6d04:	89 91       	ld	r24, Y+
    6d06:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString("8");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    6d0a:	8a e3       	ldi	r24, 0x3A	; 58
    6d0c:	c0 3e       	cpi	r28, 0xE0	; 224
    6d0e:	d8 07       	cpc	r29, r24
    6d10:	c9 f7       	brne	.-14     	; 0x6d04 <SD_WriteHumidityBuffer+0xac>
    6d12:	09 c0       	rjmp	.+18     	; 0x6d26 <SD_WriteHumidityBuffer+0xce>
    6d14:	ce e2       	ldi	r28, 0x2E	; 46
    6d16:	d1 e4       	ldi	r29, 0x41	; 65
			SD_Write8(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer2[i]);
    6d18:	89 91       	ld	r24, Y+
    6d1a:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write8(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    6d1e:	81 e4       	ldi	r24, 0x41	; 65
    6d20:	c8 33       	cpi	r28, 0x38	; 56
    6d22:	d8 07       	cpc	r29, r24
    6d24:	c9 f7       	brne	.-14     	; 0x6d18 <SD_WriteHumidityBuffer+0xc0>
			SD_Write8(humidityBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    6d26:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <SD_WriteCRC>

	f_sync(&Log_File);
    6d2a:	8a ee       	ldi	r24, 0xEA	; 234
    6d2c:	9e e3       	ldi	r25, 0x3E	; 62
    6d2e:	0e 94 0e 1b 	call	0x361c	; 0x361c <f_sync>

}
    6d32:	df 91       	pop	r29
    6d34:	cf 91       	pop	r28
    6d36:	1f 91       	pop	r17
    6d38:	08 95       	ret

00006d3a <SD_WriteTemperatureBuffer>:
	f_sync(&Log_File);

}


void SD_WriteTemperatureBuffer(uint8_t bufferNumber){
    6d3a:	1f 93       	push	r17
    6d3c:	cf 93       	push	r28
    6d3e:	df 93       	push	r29
    6d40:	18 2f       	mov	r17, r24
    6d42:	8f ef       	ldi	r24, 0xFF	; 255
    6d44:	9f ef       	ldi	r25, 0xFF	; 255
    6d46:	af ef       	ldi	r26, 0xFF	; 255
    6d48:	bf ef       	ldi	r27, 0xFF	; 255
    6d4a:	80 93 69 44 	sts	0x4469, r24
    6d4e:	90 93 6a 44 	sts	0x446A, r25
    6d52:	a0 93 6b 44 	sts	0x446B, r26
    6d56:	b0 93 6c 44 	sts	0x446C, r27
	
		
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    6d5a:	6c e4       	ldi	r22, 0x4C	; 76
    6d5c:	74 e7       	ldi	r23, 0x74	; 116
    6d5e:	8e ed       	ldi	r24, 0xDE	; 222
    6d60:	90 eb       	ldi	r25, 0xB0	; 176
    6d62:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write32(62);				// record size  
    6d66:	6e e3       	ldi	r22, 0x3E	; 62
    6d68:	70 e0       	ldi	r23, 0x00	; 0
    6d6a:	80 e0       	ldi	r24, 0x00	; 0
    6d6c:	90 e0       	ldi	r25, 0x00	; 0
    6d6e:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write16(3); 		// record type  
    6d72:	83 e0       	ldi	r24, 0x03	; 3
    6d74:	90 e0       	ldi	r25, 0x00	; 0
    6d76:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <SD_Write16>
	
														// payload
	if(bufferNumber == 1){
    6d7a:	11 30       	cpi	r17, 0x01	; 1
    6d7c:	49 f4       	brne	.+18     	; 0x6d90 <SD_WriteTemperatureBuffer+0x56>
		SD_Write32(temperatureSampleStartTime1);					// time
    6d7e:	60 91 b4 29 	lds	r22, 0x29B4
    6d82:	70 91 b5 29 	lds	r23, 0x29B5
    6d86:	80 91 b6 29 	lds	r24, 0x29B6
    6d8a:	90 91 b7 29 	lds	r25, 0x29B7
    6d8e:	08 c0       	rjmp	.+16     	; 0x6da0 <SD_WriteTemperatureBuffer+0x66>
	} else {
		SD_Write32(temperatureSampleStartTime2);					// time
    6d90:	60 91 b8 29 	lds	r22, 0x29B8
    6d94:	70 91 b9 29 	lds	r23, 0x29B9
    6d98:	80 91 ba 29 	lds	r24, 0x29BA
    6d9c:	90 91 bb 29 	lds	r25, 0x29BB
    6da0:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    6da4:	60 e0       	ldi	r22, 0x00	; 0
    6da6:	70 e2       	ldi	r23, 0x20	; 32
    6da8:	8c e1       	ldi	r24, 0x1C	; 28
    6daa:	90 e0       	ldi	r25, 0x00	; 0
    6dac:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write32(10);												// number of samples
    6db0:	6a e0       	ldi	r22, 0x0A	; 10
    6db2:	70 e0       	ldi	r23, 0x00	; 0
    6db4:	80 e0       	ldi	r24, 0x00	; 0
    6db6:	90 e0       	ldi	r25, 0x00	; 0
    6db8:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
		
	SD_WriteString("Temperature");
    6dbc:	82 e7       	ldi	r24, 0x72	; 114
    6dbe:	90 e2       	ldi	r25, 0x20	; 32
    6dc0:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x09);
    6dc4:	89 e0       	ldi	r24, 0x09	; 9
    6dc6:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString("16");
    6dca:	8e e7       	ldi	r24, 0x7E	; 126
    6dcc:	90 e2       	ldi	r25, 0x20	; 32
    6dce:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x0A);
    6dd2:	8a e0       	ldi	r24, 0x0A	; 10
    6dd4:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_Write8(0x00);
    6dd8:	80 e0       	ldi	r24, 0x00	; 0
    6dda:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	
	if(bufferNumber == 1){
    6dde:	11 30       	cpi	r17, 0x01	; 1
    6de0:	59 f4       	brne	.+22     	; 0x6df8 <SD_WriteTemperatureBuffer+0xbe>
    6de2:	c4 e1       	ldi	r28, 0x14	; 20
    6de4:	da e3       	ldi	r29, 0x3A	; 58
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
    6de6:	89 91       	ld	r24, Y+
    6de8:	99 91       	ld	r25, Y+
    6dea:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);
	
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    6dee:	8a e3       	ldi	r24, 0x3A	; 58
    6df0:	c8 32       	cpi	r28, 0x28	; 40
    6df2:	d8 07       	cpc	r29, r24
    6df4:	c1 f7       	brne	.-16     	; 0x6de6 <SD_WriteTemperatureBuffer+0xac>
    6df6:	0a c0       	rjmp	.+20     	; 0x6e0c <SD_WriteTemperatureBuffer+0xd2>
    6df8:	cd e8       	ldi	r28, 0x8D	; 141
    6dfa:	da e3       	ldi	r29, 0x3A	; 58
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer2[i]);
    6dfc:	89 91       	ld	r24, Y+
    6dfe:	99 91       	ld	r25, Y+
    6e00:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <SD_Write16>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    6e04:	8a e3       	ldi	r24, 0x3A	; 58
    6e06:	c1 3a       	cpi	r28, 0xA1	; 161
    6e08:	d8 07       	cpc	r29, r24
    6e0a:	c1 f7       	brne	.-16     	; 0x6dfc <SD_WriteTemperatureBuffer+0xc2>
			SD_Write16(temperatureBuffer2[i]);
		}
	}
	
	SD_WriteCRC();			// CRC			
    6e0c:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <SD_WriteCRC>
		
	f_sync(&Log_File);
    6e10:	8a ee       	ldi	r24, 0xEA	; 234
    6e12:	9e e3       	ldi	r25, 0x3E	; 62
    6e14:	0e 94 0e 1b 	call	0x361c	; 0x361c <f_sync>

}
    6e18:	df 91       	pop	r29
    6e1a:	cf 91       	pop	r28
    6e1c:	1f 91       	pop	r17
    6e1e:	08 95       	ret

00006e20 <Rs232_SendString>:
void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
	Rs232_Usart.DATA = data;	
}

void Rs232_SendString(char string [],bool CR){
    6e20:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    6e22:	dc 01       	movw	r26, r24
    6e24:	0d 90       	ld	r0, X+
    6e26:	00 20       	and	r0, r0
    6e28:	e9 f7       	brne	.-6      	; 0x6e24 <Rs232_SendString+0x4>
    6e2a:	11 97       	sbiw	r26, 0x01	; 1
    6e2c:	a8 1b       	sub	r26, r24
    6e2e:	b9 0b       	sbc	r27, r25
    6e30:	90 e0       	ldi	r25, 0x00	; 0
    6e32:	0a c0       	rjmp	.+20     	; 0x6e48 <Rs232_SendString+0x28>
		Rs232_SendByte(string[i]);
    6e34:	e2 0f       	add	r30, r18
    6e36:	f3 1f       	adc	r31, r19
    6e38:	40 81       	ld	r20, Z
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    6e3a:	80 91 a1 09 	lds	r24, 0x09A1
    6e3e:	85 ff       	sbrs	r24, 5
    6e40:	fc cf       	rjmp	.-8      	; 0x6e3a <Rs232_SendString+0x1a>
	Rs232_Usart.DATA = data;	
    6e42:	40 93 a0 09 	sts	0x09A0, r20
}

void Rs232_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    6e46:	9f 5f       	subi	r25, 0xFF	; 255
    6e48:	e9 2f       	mov	r30, r25
    6e4a:	f0 e0       	ldi	r31, 0x00	; 0
    6e4c:	ea 17       	cp	r30, r26
    6e4e:	fb 07       	cpc	r31, r27
    6e50:	88 f3       	brcs	.-30     	; 0x6e34 <Rs232_SendString+0x14>
		Rs232_SendByte(string[i]);
	}

  if(CR){
    6e52:	66 23       	and	r22, r22
    6e54:	71 f0       	breq	.+28     	; 0x6e72 <Rs232_SendString+0x52>
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    6e56:	80 91 a1 09 	lds	r24, 0x09A1
    6e5a:	85 ff       	sbrs	r24, 5
    6e5c:	fc cf       	rjmp	.-8      	; 0x6e56 <Rs232_SendString+0x36>
	Rs232_Usart.DATA = data;	
    6e5e:	8d e0       	ldi	r24, 0x0D	; 13
    6e60:	80 93 a0 09 	sts	0x09A0, r24
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    6e64:	80 91 a1 09 	lds	r24, 0x09A1
    6e68:	85 ff       	sbrs	r24, 5
    6e6a:	fc cf       	rjmp	.-8      	; 0x6e64 <Rs232_SendString+0x44>
	Rs232_Usart.DATA = data;	
    6e6c:	8a e0       	ldi	r24, 0x0A	; 10
    6e6e:	80 93 a0 09 	sts	0x09A0, r24
    6e72:	08 95       	ret

00006e74 <Wifi_SendString>:
}

void Wifi_SendString(char string [],bool CR){
    6e74:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    6e76:	dc 01       	movw	r26, r24
    6e78:	0d 90       	ld	r0, X+
    6e7a:	00 20       	and	r0, r0
    6e7c:	e9 f7       	brne	.-6      	; 0x6e78 <Wifi_SendString+0x4>
    6e7e:	11 97       	sbiw	r26, 0x01	; 1
    6e80:	a8 1b       	sub	r26, r24
    6e82:	b9 0b       	sbc	r27, r25
    6e84:	90 e0       	ldi	r25, 0x00	; 0
    6e86:	0a c0       	rjmp	.+20     	; 0x6e9c <Wifi_SendString+0x28>
		Wifi_SendByte(string[i]);
    6e88:	e2 0f       	add	r30, r18
    6e8a:	f3 1f       	adc	r31, r19
    6e8c:	40 81       	ld	r20, Z
	return tmp;
}


void Wifi_SendByte(uint8_t data){
	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    6e8e:	80 91 a1 0a 	lds	r24, 0x0AA1
    6e92:	85 ff       	sbrs	r24, 5
    6e94:	fc cf       	rjmp	.-8      	; 0x6e8e <Wifi_SendString+0x1a>
	Wifi_Usart.DATA = data;
    6e96:	40 93 a0 0a 	sts	0x0AA0, r20
}

void Wifi_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    6e9a:	9f 5f       	subi	r25, 0xFF	; 255
    6e9c:	e9 2f       	mov	r30, r25
    6e9e:	f0 e0       	ldi	r31, 0x00	; 0
    6ea0:	ea 17       	cp	r30, r26
    6ea2:	fb 07       	cpc	r31, r27
    6ea4:	88 f3       	brcs	.-30     	; 0x6e88 <Wifi_SendString+0x14>
		Wifi_SendByte(string[i]);
	}

if(CR){
    6ea6:	66 23       	and	r22, r22
    6ea8:	71 f0       	breq	.+28     	; 0x6ec6 <Wifi_SendString+0x52>
	return tmp;
}


void Wifi_SendByte(uint8_t data){
	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    6eaa:	80 91 a1 0a 	lds	r24, 0x0AA1
    6eae:	85 ff       	sbrs	r24, 5
    6eb0:	fc cf       	rjmp	.-8      	; 0x6eaa <Wifi_SendString+0x36>
	Wifi_Usart.DATA = data;
    6eb2:	8d e0       	ldi	r24, 0x0D	; 13
    6eb4:	80 93 a0 0a 	sts	0x0AA0, r24
	return tmp;
}


void Wifi_SendByte(uint8_t data){
	while(!(Wifi_Usart.STATUS & USART_DREIF_bm));
    6eb8:	80 91 a1 0a 	lds	r24, 0x0AA1
    6ebc:	85 ff       	sbrs	r24, 5
    6ebe:	fc cf       	rjmp	.-8      	; 0x6eb8 <Wifi_SendString+0x44>
	Wifi_Usart.DATA = data;
    6ec0:	8a e0       	ldi	r24, 0x0A	; 10
    6ec2:	80 93 a0 0a 	sts	0x0AA0, r24
    6ec6:	08 95       	ret

00006ec8 <Wifi_EnterCMDMode>:
		Wifi_SendByte(13);
		Wifi_SendByte(10);
	}
}

bool Wifi_EnterCMDMode(uint16_t timeOut){
    6ec8:	8f 92       	push	r8
    6eca:	9f 92       	push	r9
    6ecc:	af 92       	push	r10
    6ece:	bf 92       	push	r11
    6ed0:	cf 92       	push	r12
    6ed2:	df 92       	push	r13
    6ed4:	ff 92       	push	r15
    6ed6:	0f 93       	push	r16
    6ed8:	1f 93       	push	r17
    6eda:	df 93       	push	r29
    6edc:	cf 93       	push	r28
    6ede:	00 d0       	rcall	.+0      	; 0x6ee0 <Wifi_EnterCMDMode+0x18>
    6ee0:	00 d0       	rcall	.+0      	; 0x6ee2 <Wifi_EnterCMDMode+0x1a>
    6ee2:	cd b7       	in	r28, 0x3d	; 61
    6ee4:	de b7       	in	r29, 0x3e	; 62
    6ee6:	6c 01       	movw	r12, r24
	char resp [3];
	char   ok [3] = "CMD";
    6ee8:	de 01       	movw	r26, r28
    6eea:	14 96       	adiw	r26, 0x04	; 4
    6eec:	e5 e8       	ldi	r30, 0x85	; 133
    6eee:	f0 e2       	ldi	r31, 0x20	; 32
    6ef0:	83 e0       	ldi	r24, 0x03	; 3
    6ef2:	01 90       	ld	r0, Z+
    6ef4:	0d 92       	st	X+, r0
    6ef6:	81 50       	subi	r24, 0x01	; 1
    6ef8:	e1 f7       	brne	.-8      	; 0x6ef2 <Wifi_EnterCMDMode+0x2a>
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
    6efa:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Wifi_ClearBuffer>
	Wifi_SendString("$$$", false);
    6efe:	81 e8       	ldi	r24, 0x81	; 129
    6f00:	90 e2       	ldi	r25, 0x20	; 32
    6f02:	60 e0       	ldi	r22, 0x00	; 0
    6f04:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <Wifi_SendString>
    6f08:	ff 24       	eor	r15, r15
    6f0a:	00 e0       	ldi	r16, 0x00	; 0
    6f0c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
			resp[j] = Wifi_GetByte(false);
    6f0e:	4e 01       	movw	r8, r28
    6f10:	08 94       	sec
    6f12:	81 1c       	adc	r8, r1
    6f14:	91 1c       	adc	r9, r1
    6f16:	f6 e6       	ldi	r31, 0x66	; 102
    6f18:	af 2e       	mov	r10, r31
    6f1a:	fe e0       	ldi	r31, 0x0E	; 14
    6f1c:	bf 2e       	mov	r11, r31
    6f1e:	23 c0       	rjmp	.+70     	; 0x6f66 <Wifi_EnterCMDMode+0x9e>
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
	Wifi_SendString("$$$", false);
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){
    6f20:	0e 94 cd 01 	call	0x39a	; 0x39a <Wifi_CharReadyToRead>
    6f24:	88 23       	and	r24, r24
    6f26:	d1 f0       	breq	.+52     	; 0x6f5c <Wifi_EnterCMDMode+0x94>
			resp[j] = Wifi_GetByte(false);
    6f28:	80 e0       	ldi	r24, 0x00	; 0
    6f2a:	0e 94 25 02 	call	0x44a	; 0x44a <Wifi_GetByte>
    6f2e:	f4 01       	movw	r30, r8
    6f30:	ef 0d       	add	r30, r15
    6f32:	f1 1d       	adc	r31, r1
    6f34:	80 83       	st	Z, r24
			j++;
    6f36:	f3 94       	inc	r15
			if(j > 2){
    6f38:	82 e0       	ldi	r24, 0x02	; 2
    6f3a:	8f 15       	cp	r24, r15
    6f3c:	78 f4       	brcc	.+30     	; 0x6f5c <Wifi_EnterCMDMode+0x94>
				for(uint8_t k = 0; k < 3; k++){					
					if(resp[k] != ok[k]){
    6f3e:	99 81       	ldd	r25, Y+1	; 0x01
    6f40:	8c 81       	ldd	r24, Y+4	; 0x04
    6f42:	98 17       	cp	r25, r24
    6f44:	99 f4       	brne	.+38     	; 0x6f6c <Wifi_EnterCMDMode+0xa4>
    6f46:	9a 81       	ldd	r25, Y+2	; 0x02
    6f48:	8d 81       	ldd	r24, Y+5	; 0x05
    6f4a:	98 17       	cp	r25, r24
    6f4c:	79 f4       	brne	.+30     	; 0x6f6c <Wifi_EnterCMDMode+0xa4>
    6f4e:	20 e0       	ldi	r18, 0x00	; 0
    6f50:	9b 81       	ldd	r25, Y+3	; 0x03
    6f52:	8e 81       	ldd	r24, Y+6	; 0x06
    6f54:	98 17       	cp	r25, r24
    6f56:	59 f4       	brne	.+22     	; 0x6f6e <Wifi_EnterCMDMode+0xa6>
    6f58:	21 e0       	ldi	r18, 0x01	; 1
    6f5a:	09 c0       	rjmp	.+18     	; 0x6f6e <Wifi_EnterCMDMode+0xa6>
    6f5c:	c5 01       	movw	r24, r10
    6f5e:	01 97       	sbiw	r24, 0x01	; 1
    6f60:	f1 f7       	brne	.-4      	; 0x6f5e <Wifi_EnterCMDMode+0x96>
	char   ok [3] = "CMD";
	uint8_t j = 0;
	
	Wifi_ClearBuffer();
	Wifi_SendString("$$$", false);
	for(uint16_t i = 0; i < timeOut; i++){
    6f62:	0f 5f       	subi	r16, 0xFF	; 255
    6f64:	1f 4f       	sbci	r17, 0xFF	; 255
    6f66:	0c 15       	cp	r16, r12
    6f68:	1d 05       	cpc	r17, r13
    6f6a:	d0 f2       	brcs	.-76     	; 0x6f20 <Wifi_EnterCMDMode+0x58>
    6f6c:	20 e0       	ldi	r18, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    6f6e:	82 2f       	mov	r24, r18
    6f70:	26 96       	adiw	r28, 0x06	; 6
    6f72:	cd bf       	out	0x3d, r28	; 61
    6f74:	de bf       	out	0x3e, r29	; 62
    6f76:	cf 91       	pop	r28
    6f78:	df 91       	pop	r29
    6f7a:	1f 91       	pop	r17
    6f7c:	0f 91       	pop	r16
    6f7e:	ff 90       	pop	r15
    6f80:	df 90       	pop	r13
    6f82:	cf 90       	pop	r12
    6f84:	bf 90       	pop	r11
    6f86:	af 90       	pop	r10
    6f88:	9f 90       	pop	r9
    6f8a:	8f 90       	pop	r8
    6f8c:	08 95       	ret

00006f8e <Debug_SendString>:
}

void Debug_SendString(char string [],bool CR){
    6f8e:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    6f90:	dc 01       	movw	r26, r24
    6f92:	0d 90       	ld	r0, X+
    6f94:	00 20       	and	r0, r0
    6f96:	e9 f7       	brne	.-6      	; 0x6f92 <Debug_SendString+0x4>
    6f98:	11 97       	sbiw	r26, 0x01	; 1
    6f9a:	a8 1b       	sub	r26, r24
    6f9c:	b9 0b       	sbc	r27, r25
    6f9e:	90 e0       	ldi	r25, 0x00	; 0
    6fa0:	0a c0       	rjmp	.+20     	; 0x6fb6 <Debug_SendString+0x28>
		Debug_SendByte(string[i]);
    6fa2:	e2 0f       	add	r30, r18
    6fa4:	f3 1f       	adc	r31, r19
    6fa6:	40 81       	ld	r20, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    6fa8:	80 91 a1 08 	lds	r24, 0x08A1
    6fac:	85 ff       	sbrs	r24, 5
    6fae:	fc cf       	rjmp	.-8      	; 0x6fa8 <Debug_SendString+0x1a>
	Debug_Usart.DATA = data;	
    6fb0:	40 93 a0 08 	sts	0x08A0, r20
}

void Debug_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    6fb4:	9f 5f       	subi	r25, 0xFF	; 255
    6fb6:	e9 2f       	mov	r30, r25
    6fb8:	f0 e0       	ldi	r31, 0x00	; 0
    6fba:	ea 17       	cp	r30, r26
    6fbc:	fb 07       	cpc	r31, r27
    6fbe:	88 f3       	brcs	.-30     	; 0x6fa2 <Debug_SendString+0x14>
		Debug_SendByte(string[i]);
	}

  if(CR){
    6fc0:	66 23       	and	r22, r22
    6fc2:	71 f0       	breq	.+28     	; 0x6fe0 <Debug_SendString+0x52>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    6fc4:	80 91 a1 08 	lds	r24, 0x08A1
    6fc8:	85 ff       	sbrs	r24, 5
    6fca:	fc cf       	rjmp	.-8      	; 0x6fc4 <Debug_SendString+0x36>
	Debug_Usart.DATA = data;	
    6fcc:	8d e0       	ldi	r24, 0x0D	; 13
    6fce:	80 93 a0 08 	sts	0x08A0, r24
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    6fd2:	80 91 a1 08 	lds	r24, 0x08A1
    6fd6:	85 ff       	sbrs	r24, 5
    6fd8:	fc cf       	rjmp	.-8      	; 0x6fd2 <Debug_SendString+0x44>
	Debug_Usart.DATA = data;	
    6fda:	8a e0       	ldi	r24, 0x0A	; 10
    6fdc:	80 93 a0 08 	sts	0x08A0, r24
    6fe0:	08 95       	ret

00006fe2 <__vector_53>:
	TCE1.INTCTRLA = (TCE1.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;

}

ISR(TCE1_OVF_vect)
{
    6fe2:	1f 92       	push	r1
    6fe4:	0f 92       	push	r0
    6fe6:	0f b6       	in	r0, 0x3f	; 63
    6fe8:	0f 92       	push	r0
    6fea:	0b b6       	in	r0, 0x3b	; 59
    6fec:	0f 92       	push	r0
    6fee:	11 24       	eor	r1, r1
    6ff0:	2f 93       	push	r18
    6ff2:	3f 93       	push	r19
    6ff4:	4f 93       	push	r20
    6ff6:	5f 93       	push	r21
    6ff8:	6f 93       	push	r22
    6ffa:	7f 93       	push	r23
    6ffc:	8f 93       	push	r24
    6ffe:	9f 93       	push	r25
    7000:	af 93       	push	r26
    7002:	bf 93       	push	r27
    7004:	ef 93       	push	r30
    7006:	ff 93       	push	r31

	if(okToSendMicrophoneBuffer1){
    7008:	80 91 0b 2a 	lds	r24, 0x2A0B
    700c:	88 23       	and	r24, r24
    700e:	31 f0       	breq	.+12     	; 0x701c <__vector_53+0x3a>
		SD_WriteMicrophoneBuffer(1);
    7010:	81 e0       	ldi	r24, 0x01	; 1
    7012:	0e 94 58 35 	call	0x6ab0	; 0x6ab0 <SD_WriteMicrophoneBuffer>
		okToSendMicrophoneBuffer1  = false;
    7016:	10 92 0b 2a 	sts	0x2A0B, r1
    701a:	09 c0       	rjmp	.+18     	; 0x702e <__vector_53+0x4c>
	} else if (okToSendMicrophoneBuffer2){
    701c:	80 91 0c 2a 	lds	r24, 0x2A0C
    7020:	88 23       	and	r24, r24
    7022:	29 f0       	breq	.+10     	; 0x702e <__vector_53+0x4c>
		SD_WriteMicrophoneBuffer(2);
    7024:	82 e0       	ldi	r24, 0x02	; 2
    7026:	0e 94 58 35 	call	0x6ab0	; 0x6ab0 <SD_WriteMicrophoneBuffer>
		okToSendMicrophoneBuffer2 = false;
    702a:	10 92 0c 2a 	sts	0x2A0C, r1
	}

	if(okToSendTemperatureBuffer1){
    702e:	80 91 02 2a 	lds	r24, 0x2A02
    7032:	88 23       	and	r24, r24
    7034:	59 f0       	breq	.+22     	; 0x704c <__vector_53+0x6a>
		Debug_SendString("T Buffer1",true);
    7036:	89 e8       	ldi	r24, 0x89	; 137
    7038:	90 e2       	ldi	r25, 0x20	; 32
    703a:	61 e0       	ldi	r22, 0x01	; 1
    703c:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		SD_WriteTemperatureBuffer(1);
    7040:	81 e0       	ldi	r24, 0x01	; 1
    7042:	0e 94 9d 36 	call	0x6d3a	; 0x6d3a <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer1 = false;
    7046:	10 92 02 2a 	sts	0x2A02, r1
    704a:	0e c0       	rjmp	.+28     	; 0x7068 <__vector_53+0x86>
	} else if (okToSendTemperatureBuffer2){
    704c:	80 91 03 2a 	lds	r24, 0x2A03
    7050:	88 23       	and	r24, r24
    7052:	51 f0       	breq	.+20     	; 0x7068 <__vector_53+0x86>
		Debug_SendString("T Buffer2",true);
    7054:	83 e9       	ldi	r24, 0x93	; 147
    7056:	90 e2       	ldi	r25, 0x20	; 32
    7058:	61 e0       	ldi	r22, 0x01	; 1
    705a:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		SD_WriteTemperatureBuffer(2);
    705e:	82 e0       	ldi	r24, 0x02	; 2
    7060:	0e 94 9d 36 	call	0x6d3a	; 0x6d3a <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer2 = false;
    7064:	10 92 03 2a 	sts	0x2A03, r1
	}

	if(okToSendHumidityBuffer1){
    7068:	80 91 08 2a 	lds	r24, 0x2A08
    706c:	88 23       	and	r24, r24
    706e:	59 f0       	breq	.+22     	; 0x7086 <__vector_53+0xa4>
		Debug_SendString("H Buffer1",true);
    7070:	8d e9       	ldi	r24, 0x9D	; 157
    7072:	90 e2       	ldi	r25, 0x20	; 32
    7074:	61 e0       	ldi	r22, 0x01	; 1
    7076:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		SD_WriteHumidityBuffer(1);
    707a:	81 e0       	ldi	r24, 0x01	; 1
    707c:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer1 = false;
    7080:	10 92 08 2a 	sts	0x2A08, r1
    7084:	0e c0       	rjmp	.+28     	; 0x70a2 <__vector_53+0xc0>
	} else if (okToSendHumidityBuffer2){
    7086:	80 91 09 2a 	lds	r24, 0x2A09
    708a:	88 23       	and	r24, r24
    708c:	51 f0       	breq	.+20     	; 0x70a2 <__vector_53+0xc0>
		Debug_SendString("H Buffer2",true);
    708e:	87 ea       	ldi	r24, 0xA7	; 167
    7090:	90 e2       	ldi	r25, 0x20	; 32
    7092:	61 e0       	ldi	r22, 0x01	; 1
    7094:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		SD_WriteHumidityBuffer(2);
    7098:	82 e0       	ldi	r24, 0x02	; 2
    709a:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer2 = false;
    709e:	10 92 09 2a 	sts	0x2A09, r1
	}

	if(okToSendPressureBuffer1){
    70a2:	80 91 05 2a 	lds	r24, 0x2A05
    70a6:	88 23       	and	r24, r24
    70a8:	59 f0       	breq	.+22     	; 0x70c0 <__vector_53+0xde>
		Debug_SendString("P Buffer1",true);
    70aa:	81 eb       	ldi	r24, 0xB1	; 177
    70ac:	90 e2       	ldi	r25, 0x20	; 32
    70ae:	61 e0       	ldi	r22, 0x01	; 1
    70b0:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		SD_WritePressureBuffer(1);
    70b4:	81 e0       	ldi	r24, 0x01	; 1
    70b6:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <SD_WritePressureBuffer>
		okToSendPressureBuffer1 = false;
    70ba:	10 92 05 2a 	sts	0x2A05, r1
    70be:	0e c0       	rjmp	.+28     	; 0x70dc <__vector_53+0xfa>
	} else if (okToSendPressureBuffer2){
    70c0:	80 91 06 2a 	lds	r24, 0x2A06
    70c4:	88 23       	and	r24, r24
    70c6:	51 f0       	breq	.+20     	; 0x70dc <__vector_53+0xfa>
		Debug_SendString("P Buffer2",true);
    70c8:	8b eb       	ldi	r24, 0xBB	; 187
    70ca:	90 e2       	ldi	r25, 0x20	; 32
    70cc:	61 e0       	ldi	r22, 0x01	; 1
    70ce:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		SD_WritePressureBuffer(2);
    70d2:	82 e0       	ldi	r24, 0x02	; 2
    70d4:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <SD_WritePressureBuffer>
		okToSendPressureBuffer2 = false;
    70d8:	10 92 06 2a 	sts	0x2A06, r1
	}

	if(okToSendLightBuffer1){
    70dc:	80 91 0f 2a 	lds	r24, 0x2A0F
    70e0:	88 23       	and	r24, r24
    70e2:	59 f0       	breq	.+22     	; 0x70fa <__vector_53+0x118>
		Debug_SendString("L Buffer1",true);
    70e4:	85 ec       	ldi	r24, 0xC5	; 197
    70e6:	90 e2       	ldi	r25, 0x20	; 32
    70e8:	61 e0       	ldi	r22, 0x01	; 1
    70ea:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		SD_WriteLightBuffer(1);
    70ee:	81 e0       	ldi	r24, 0x01	; 1
    70f0:	0e 94 b7 34 	call	0x696e	; 0x696e <SD_WriteLightBuffer>
		okToSendLightBuffer1 = false;
    70f4:	10 92 0f 2a 	sts	0x2A0F, r1
    70f8:	0e c0       	rjmp	.+28     	; 0x7116 <__vector_53+0x134>
	} else if (okToSendLightBuffer2){
    70fa:	80 91 10 2a 	lds	r24, 0x2A10
    70fe:	88 23       	and	r24, r24
    7100:	51 f0       	breq	.+20     	; 0x7116 <__vector_53+0x134>
		Debug_SendString("L Buffer2",true);
    7102:	8f ec       	ldi	r24, 0xCF	; 207
    7104:	90 e2       	ldi	r25, 0x20	; 32
    7106:	61 e0       	ldi	r22, 0x01	; 1
    7108:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		SD_WriteLightBuffer(2);
    710c:	82 e0       	ldi	r24, 0x02	; 2
    710e:	0e 94 b7 34 	call	0x696e	; 0x696e <SD_WriteLightBuffer>
		okToSendLightBuffer2 = false;
    7112:	10 92 10 2a 	sts	0x2A10, r1
	}

	if(okToSendAirQuality && recording){
    7116:	80 91 f9 29 	lds	r24, 0x29F9
    711a:	88 23       	and	r24, r24
    711c:	69 f0       	breq	.+26     	; 0x7138 <__vector_53+0x156>
    711e:	80 91 00 2a 	lds	r24, 0x2A00
    7122:	88 23       	and	r24, r24
    7124:	49 f0       	breq	.+18     	; 0x7138 <__vector_53+0x156>
		Debug_SendString("A Buffer",true);
    7126:	89 ed       	ldi	r24, 0xD9	; 217
    7128:	90 e2       	ldi	r25, 0x20	; 32
    712a:	61 e0       	ldi	r22, 0x01	; 1
    712c:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		SD_WriteAirSample();
    7130:	0e 94 47 34 	call	0x688e	; 0x688e <SD_WriteAirSample>
		okToSendAirQuality = false;
    7134:	10 92 f9 29 	sts	0x29F9, r1
	}

	if(okToSendRTCBlock){
    7138:	80 91 12 2a 	lds	r24, 0x2A12
    713c:	88 23       	and	r24, r24
    713e:	a1 f1       	breq	.+104    	; 0x71a8 <__vector_53+0x1c6>
		Debug_SendString("RTC Block: ",false);
    7140:	82 ee       	ldi	r24, 0xE2	; 226
    7142:	90 e2       	ldi	r25, 0x20	; 32
    7144:	60 e0       	ldi	r22, 0x00	; 0
    7146:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
    714a:	0e 94 ce 29 	call	0x539c	; 0x539c <Time_Get32BitTimer>
    714e:	20 91 fb 29 	lds	r18, 0x29FB
    7152:	30 91 fc 29 	lds	r19, 0x29FC
    7156:	40 91 fd 29 	lds	r20, 0x29FD
    715a:	50 91 fe 29 	lds	r21, 0x29FE
    715e:	0e 94 38 33 	call	0x6670	; 0x6670 <SD_WriteRTCBlock>
		Debug_SendString(ltoa(UNIX_time,temp,10),false);
    7162:	60 91 fb 29 	lds	r22, 0x29FB
    7166:	70 91 fc 29 	lds	r23, 0x29FC
    716a:	80 91 fd 29 	lds	r24, 0x29FD
    716e:	90 91 fe 29 	lds	r25, 0x29FE
    7172:	48 e2       	ldi	r20, 0x28	; 40
    7174:	5a e3       	ldi	r21, 0x3A	; 58
    7176:	2a e0       	ldi	r18, 0x0A	; 10
    7178:	30 e0       	ldi	r19, 0x00	; 0
    717a:	0e 94 35 44 	call	0x886a	; 0x886a <ltoa>
    717e:	60 e0       	ldi	r22, 0x00	; 0
    7180:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		Debug_SendString(", ",false);
    7184:	8e ee       	ldi	r24, 0xEE	; 238
    7186:	90 e2       	ldi	r25, 0x20	; 32
    7188:	60 e0       	ldi	r22, 0x00	; 0
    718a:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		Debug_SendString(ltoa(Time_Get32BitTimer(),temp,10),true);
    718e:	0e 94 ce 29 	call	0x539c	; 0x539c <Time_Get32BitTimer>
    7192:	48 e2       	ldi	r20, 0x28	; 40
    7194:	5a e3       	ldi	r21, 0x3A	; 58
    7196:	2a e0       	ldi	r18, 0x0A	; 10
    7198:	30 e0       	ldi	r19, 0x00	; 0
    719a:	0e 94 35 44 	call	0x886a	; 0x886a <ltoa>
    719e:	61 e0       	ldi	r22, 0x01	; 1
    71a0:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		okToSendRTCBlock = false;
    71a4:	10 92 12 2a 	sts	0x2A12, r1
	}


}
    71a8:	ff 91       	pop	r31
    71aa:	ef 91       	pop	r30
    71ac:	bf 91       	pop	r27
    71ae:	af 91       	pop	r26
    71b0:	9f 91       	pop	r25
    71b2:	8f 91       	pop	r24
    71b4:	7f 91       	pop	r23
    71b6:	6f 91       	pop	r22
    71b8:	5f 91       	pop	r21
    71ba:	4f 91       	pop	r20
    71bc:	3f 91       	pop	r19
    71be:	2f 91       	pop	r18
    71c0:	0f 90       	pop	r0
    71c2:	0b be       	out	0x3b, r0	; 59
    71c4:	0f 90       	pop	r0
    71c6:	0f be       	out	0x3f, r0	; 63
    71c8:	0f 90       	pop	r0
    71ca:	1f 90       	pop	r1
    71cc:	18 95       	reti

000071ce <SD_Open>:
	disk_initialize(0);
	f_mount(0, &file_system_object);
}


uint8_t SD_Open(char string []){
    71ce:	0f 93       	push	r16
    71d0:	1f 93       	push	r17
    71d2:	8c 01       	movw	r16, r24
	Debug_SendString("File Name= ",false);
    71d4:	81 ef       	ldi	r24, 0xF1	; 241
    71d6:	90 e2       	ldi	r25, 0x20	; 32
    71d8:	60 e0       	ldi	r22, 0x00	; 0
    71da:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
	Debug_SendString(string,true);
    71de:	c8 01       	movw	r24, r16
    71e0:	61 e0       	ldi	r22, 0x01	; 1
    71e2:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);	
    71e6:	8a ee       	ldi	r24, 0xEA	; 234
    71e8:	9e e3       	ldi	r25, 0x3E	; 62
    71ea:	b8 01       	movw	r22, r16
    71ec:	43 e1       	ldi	r20, 0x13	; 19
    71ee:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <f_open>
}
    71f2:	1f 91       	pop	r17
    71f4:	0f 91       	pop	r16
    71f6:	08 95       	ret

000071f8 <Read_config_file>:

	f_sync(&Log_File);

}

void Read_config_file(void){
    71f8:	1f 93       	push	r17
void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
}

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
    71fa:	a0 e2       	ldi	r26, 0x20	; 32
    71fc:	b6 e0       	ldi	r27, 0x06	; 6
    71fe:	40 e2       	ldi	r20, 0x20	; 32
    7200:	20 e7       	ldi	r18, 0x70	; 112
    7202:	31 e0       	ldi	r19, 0x01	; 1
    7204:	05 c0       	rjmp	.+10     	; 0x7210 <Read_config_file+0x18>
    7206:	f9 01       	movw	r30, r18
    7208:	31 97       	sbiw	r30, 0x01	; 1
    720a:	f1 f7       	brne	.-4      	; 0x7208 <Read_config_file+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    720c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    720e:	d9 f7       	brne	.-10     	; 0x7206 <Read_config_file+0xe>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    7210:	80 91 a8 06 	lds	r24, 0x06A8
    7214:	80 ff       	sbrs	r24, 0
    7216:	8f c0       	rjmp	.+286    	; 0x7336 <Read_config_file+0x13e>
    7218:	17 96       	adiw	r26, 0x07	; 7
    721a:	4c 93       	st	X, r20
    721c:	17 97       	sbiw	r26, 0x07	; 7
    721e:	88 e8       	ldi	r24, 0x88	; 136
    7220:	93 e1       	ldi	r25, 0x13	; 19
    7222:	f1 cf       	rjmp	.-30     	; 0x7206 <Read_config_file+0xe>
    7224:	ca 01       	movw	r24, r20
    7226:	01 97       	sbiw	r24, 0x01	; 1
    7228:	f1 f7       	brne	.-4      	; 0x7226 <Read_config_file+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    722a:	21 50       	subi	r18, 0x01	; 1
    722c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    722e:	d1 f7       	brne	.-12     	; 0x7224 <Read_config_file+0x2c>
	Leds_Clear(sd_Red);
	Leds_Set(sd_Green);
	_delay_ms(1000);
	

	SD_Open("/config.txt");
    7230:	8d ef       	ldi	r24, 0xFD	; 253
    7232:	90 e2       	ldi	r25, 0x20	; 32
    7234:	0e 94 e7 38 	call	0x71ce	; 0x71ce <SD_Open>
	      strcat(port,strtok(NULL,"="));
	      portRead = true;
	    } else if(strstr(temp,"auth") != 0){
	      strtok(temp,"=");
	      strcat(auth,strtok(NULL,"="));
	      authRead = true;
    7238:	11 e0       	ldi	r17, 0x01	; 1
	

	SD_Open("/config.txt");

	while(true){
	  f_gets(temp,50,&Log_File);
    723a:	88 e2       	ldi	r24, 0x28	; 40
    723c:	9a e3       	ldi	r25, 0x3A	; 58
    723e:	62 e3       	ldi	r22, 0x32	; 50
    7240:	70 e0       	ldi	r23, 0x00	; 0
    7242:	4a ee       	ldi	r20, 0xEA	; 234
    7244:	5e e3       	ldi	r21, 0x3E	; 62
    7246:	0e 94 2c 24 	call	0x4858	; 0x4858 <f_gets>
	  if(temp[0] != 0){
    724a:	80 91 28 3a 	lds	r24, 0x3A28
    724e:	88 23       	and	r24, r24
    7250:	09 f4       	brne	.+2      	; 0x7254 <Read_config_file+0x5c>
    7252:	7c c0       	rjmp	.+248    	; 0x734c <Read_config_file+0x154>
	    if(strstr(temp,"ssid") != 0){
    7254:	88 e2       	ldi	r24, 0x28	; 40
    7256:	9a e3       	ldi	r25, 0x3A	; 58
    7258:	69 e0       	ldi	r22, 0x09	; 9
    725a:	71 e2       	ldi	r23, 0x21	; 33
    725c:	0e 94 f4 43 	call	0x87e8	; 0x87e8 <strstr>
    7260:	00 97       	sbiw	r24, 0x00	; 0
    7262:	a1 f0       	breq	.+40     	; 0x728c <Read_config_file+0x94>
	      strtok(temp,"=");
    7264:	88 e2       	ldi	r24, 0x28	; 40
    7266:	9a e3       	ldi	r25, 0x3A	; 58
    7268:	6e e0       	ldi	r22, 0x0E	; 14
    726a:	71 e2       	ldi	r23, 0x21	; 33
    726c:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <strtok>
	      strcat(ssid,strtok(NULL,"="));
    7270:	80 e0       	ldi	r24, 0x00	; 0
    7272:	90 e0       	ldi	r25, 0x00	; 0
    7274:	6e e0       	ldi	r22, 0x0E	; 14
    7276:	71 e2       	ldi	r23, 0x21	; 33
    7278:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <strtok>
    727c:	bc 01       	movw	r22, r24
    727e:	8e e8       	ldi	r24, 0x8E	; 142
    7280:	97 e2       	ldi	r25, 0x27	; 39
    7282:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <strcat>
	      ssidRead = true;
    7286:	10 93 19 2a 	sts	0x2A19, r17
    728a:	d7 cf       	rjmp	.-82     	; 0x723a <Read_config_file+0x42>
	    } else if(strstr(temp,"phrase") != 0){
    728c:	88 e2       	ldi	r24, 0x28	; 40
    728e:	9a e3       	ldi	r25, 0x3A	; 58
    7290:	60 e1       	ldi	r22, 0x10	; 16
    7292:	71 e2       	ldi	r23, 0x21	; 33
    7294:	0e 94 f4 43 	call	0x87e8	; 0x87e8 <strstr>
    7298:	00 97       	sbiw	r24, 0x00	; 0
    729a:	a1 f0       	breq	.+40     	; 0x72c4 <Read_config_file+0xcc>
	      strtok(temp,"=");
    729c:	88 e2       	ldi	r24, 0x28	; 40
    729e:	9a e3       	ldi	r25, 0x3A	; 58
    72a0:	6e e0       	ldi	r22, 0x0E	; 14
    72a2:	71 e2       	ldi	r23, 0x21	; 33
    72a4:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <strtok>
	      strcat(phrase,strtok(NULL,"="));
    72a8:	80 e0       	ldi	r24, 0x00	; 0
    72aa:	90 e0       	ldi	r25, 0x00	; 0
    72ac:	6e e0       	ldi	r22, 0x0E	; 14
    72ae:	71 e2       	ldi	r23, 0x21	; 33
    72b0:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <strtok>
    72b4:	bc 01       	movw	r22, r24
    72b6:	8a e2       	ldi	r24, 0x2A	; 42
    72b8:	97 e2       	ldi	r25, 0x27	; 39
    72ba:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <strcat>
	      phraseRead = true;
    72be:	10 93 17 2a 	sts	0x2A17, r17
    72c2:	bb cf       	rjmp	.-138    	; 0x723a <Read_config_file+0x42>
	    } else if(strstr(temp,"port") != 0){
    72c4:	88 e2       	ldi	r24, 0x28	; 40
    72c6:	9a e3       	ldi	r25, 0x3A	; 58
    72c8:	67 e1       	ldi	r22, 0x17	; 23
    72ca:	71 e2       	ldi	r23, 0x21	; 33
    72cc:	0e 94 f4 43 	call	0x87e8	; 0x87e8 <strstr>
    72d0:	00 97       	sbiw	r24, 0x00	; 0
    72d2:	a1 f0       	breq	.+40     	; 0x72fc <Read_config_file+0x104>
	      strtok(temp,"=");
    72d4:	88 e2       	ldi	r24, 0x28	; 40
    72d6:	9a e3       	ldi	r25, 0x3A	; 58
    72d8:	6e e0       	ldi	r22, 0x0E	; 14
    72da:	71 e2       	ldi	r23, 0x21	; 33
    72dc:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <strtok>
	      strcat(port,strtok(NULL,"="));
    72e0:	80 e0       	ldi	r24, 0x00	; 0
    72e2:	90 e0       	ldi	r25, 0x00	; 0
    72e4:	6e e0       	ldi	r22, 0x0E	; 14
    72e6:	71 e2       	ldi	r23, 0x21	; 33
    72e8:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <strtok>
    72ec:	bc 01       	movw	r22, r24
    72ee:	8c e5       	ldi	r24, 0x5C	; 92
    72f0:	97 e2       	ldi	r25, 0x27	; 39
    72f2:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <strcat>
	      portRead = true;
    72f6:	10 93 18 2a 	sts	0x2A18, r17
    72fa:	9f cf       	rjmp	.-194    	; 0x723a <Read_config_file+0x42>
	    } else if(strstr(temp,"auth") != 0){
    72fc:	88 e2       	ldi	r24, 0x28	; 40
    72fe:	9a e3       	ldi	r25, 0x3A	; 58
    7300:	6c e1       	ldi	r22, 0x1C	; 28
    7302:	71 e2       	ldi	r23, 0x21	; 33
    7304:	0e 94 f4 43 	call	0x87e8	; 0x87e8 <strstr>
    7308:	00 97       	sbiw	r24, 0x00	; 0
    730a:	09 f4       	brne	.+2      	; 0x730e <Read_config_file+0x116>
    730c:	96 cf       	rjmp	.-212    	; 0x723a <Read_config_file+0x42>
	      strtok(temp,"=");
    730e:	88 e2       	ldi	r24, 0x28	; 40
    7310:	9a e3       	ldi	r25, 0x3A	; 58
    7312:	6e e0       	ldi	r22, 0x0E	; 14
    7314:	71 e2       	ldi	r23, 0x21	; 33
    7316:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <strtok>
	      strcat(auth,strtok(NULL,"="));
    731a:	80 e0       	ldi	r24, 0x00	; 0
    731c:	90 e0       	ldi	r25, 0x00	; 0
    731e:	6e e0       	ldi	r22, 0x0E	; 14
    7320:	71 e2       	ldi	r23, 0x21	; 33
    7322:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <strtok>
    7326:	bc 01       	movw	r22, r24
    7328:	88 ef       	ldi	r24, 0xF8	; 248
    732a:	96 e2       	ldi	r25, 0x26	; 38
    732c:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <strcat>
	      authRead = true;
    7330:	10 93 16 2a 	sts	0x2A16, r17
    7334:	82 cf       	rjmp	.-252    	; 0x723a <Read_config_file+0x42>
void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    7336:	e0 e2       	ldi	r30, 0x20	; 32
    7338:	f6 e0       	ldi	r31, 0x06	; 6
    733a:	80 e2       	ldi	r24, 0x20	; 32
    733c:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    733e:	80 e1       	ldi	r24, 0x10	; 16
    7340:	85 83       	std	Z+5, r24	; 0x05
    7342:	20 e1       	ldi	r18, 0x10	; 16
    7344:	37 e2       	ldi	r19, 0x27	; 39
    7346:	40 e7       	ldi	r20, 0x70	; 112
    7348:	51 e0       	ldi	r21, 0x01	; 1
    734a:	6c cf       	rjmp	.-296    	; 0x7224 <Read_config_file+0x2c>
	    break;
	  }
	}
	
	
}
    734c:	1f 91       	pop	r17
    734e:	08 95       	ret

00007350 <SD_StartLogFile>:
	fileName[0] = '/';
	ltoa(var, fileName+1, 16);
	strcat(fileName, ".bt");
}

uint8_t SD_StartLogFile(uint32_t time){
    7350:	ef 92       	push	r14
    7352:	ff 92       	push	r15
    7354:	0f 93       	push	r16
    7356:	1f 93       	push	r17
    7358:	7b 01       	movw	r14, r22
    735a:	8c 01       	movw	r16, r24
	uint8_t resp;

	Debug_SendString("Opening Log File",true);
    735c:	81 e2       	ldi	r24, 0x21	; 33
    735e:	91 e2       	ldi	r25, 0x21	; 33
    7360:	61 e0       	ldi	r22, 0x01	; 1
    7362:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		
	SD_MakeFileName(time);
    7366:	c8 01       	movw	r24, r16
    7368:	b7 01       	movw	r22, r14
    736a:	0e 94 be 33 	call	0x677c	; 0x677c <SD_MakeFileName>
	resp = SD_Open(fileName);
    736e:	8e e2       	ldi	r24, 0x2E	; 46
    7370:	95 e3       	ldi	r25, 0x35	; 53
    7372:	0e 94 e7 38 	call	0x71ce	; 0x71ce <SD_Open>
    7376:	18 2f       	mov	r17, r24
         } 
     } 
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    7378:	8f ef       	ldi	r24, 0xFF	; 255
    737a:	9f ef       	ldi	r25, 0xFF	; 255
    737c:	af ef       	ldi	r26, 0xFF	; 255
    737e:	bf ef       	ldi	r27, 0xFF	; 255
    7380:	80 93 69 44 	sts	0x4469, r24
    7384:	90 93 6a 44 	sts	0x446A, r25
    7388:	a0 93 6b 44 	sts	0x446B, r26
    738c:	b0 93 6c 44 	sts	0x446C, r27
		
	SD_MakeFileName(time);
	resp = SD_Open(fileName);
		
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    7390:	6c e4       	ldi	r22, 0x4C	; 76
    7392:	74 e7       	ldi	r23, 0x74	; 116
    7394:	8e ed       	ldi	r24, 0xDE	; 222
    7396:	90 eb       	ldi	r25, 0xB0	; 176
    7398:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write32(StartFileLength+269);				// record size
    739c:	61 e4       	ldi	r22, 0x41	; 65
    739e:	72 e0       	ldi	r23, 0x02	; 2
    73a0:	80 e0       	ldi	r24, 0x00	; 0
    73a2:	90 e0       	ldi	r25, 0x00	; 0
    73a4:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write16(RTYPE_START_OF_FILE); 		// record type  
    73a8:	81 e0       	ldi	r24, 0x01	; 1
    73aa:	90 e0       	ldi	r25, 0x00	; 0
    73ac:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <SD_Write16>
	
														// payload
	SD_Write16(0x0100);				// protocol version
    73b0:	80 e0       	ldi	r24, 0x00	; 0
    73b2:	91 e0       	ldi	r25, 0x01	; 1
    73b4:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <SD_Write16>
	SD_Write8(0x02);					// time protocol
    73b8:	82 e0       	ldi	r24, 0x02	; 2
    73ba:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_Write32(Time_Get32BitTimer());					// time
    73be:	0e 94 ce 29 	call	0x539c	; 0x539c <Time_Get32BitTimer>
    73c2:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write32(460800);			// picoseconds per tick (48bit)
    73c6:	60 e0       	ldi	r22, 0x00	; 0
    73c8:	78 e0       	ldi	r23, 0x08	; 8
    73ca:	87 e0       	ldi	r24, 0x07	; 7
    73cc:	90 e0       	ldi	r25, 0x00	; 0
    73ce:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <SD_Write32>
	SD_Write16(0);
    73d2:	80 e0       	ldi	r24, 0x00	; 0
    73d4:	90 e0       	ldi	r25, 0x00	; 0
    73d6:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <SD_Write16>
		
	SD_WriteString("device_class");
    73da:	82 e3       	ldi	r24, 0x32	; 50
    73dc:	91 e2       	ldi	r25, 0x21	; 33
    73de:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x09);
    73e2:	89 e0       	ldi	r24, 0x09	; 9
    73e4:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString(DeviceClass);
    73e8:	8f e3       	ldi	r24, 0x3F	; 63
    73ea:	91 e2       	ldi	r25, 0x21	; 33
    73ec:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x0A);
    73f0:	8a e0       	ldi	r24, 0x0A	; 10
    73f2:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
		
	SD_WriteString("device_id");
    73f6:	8b e4       	ldi	r24, 0x4B	; 75
    73f8:	91 e2       	ldi	r25, 0x21	; 33
    73fa:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x09);
    73fe:	89 e0       	ldi	r24, 0x09	; 9
    7400:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString(macAddr);
    7404:	82 e4       	ldi	r24, 0x42	; 66
    7406:	95 e3       	ldi	r25, 0x35	; 53
    7408:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x0A);
    740c:	8a e0       	ldi	r24, 0x0A	; 10
    740e:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
		
	SD_WriteString("firmware_version");
    7412:	85 e5       	ldi	r24, 0x55	; 85
    7414:	91 e2       	ldi	r25, 0x21	; 33
    7416:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x09);
    741a:	89 e0       	ldi	r24, 0x09	; 9
    741c:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString(FirmwareVersion);
    7420:	86 e6       	ldi	r24, 0x66	; 102
    7422:	91 e2       	ldi	r25, 0x21	; 33
    7424:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x0A);
    7428:	8a e0       	ldi	r24, 0x0A	; 10
    742a:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
		
	SD_WriteString("hardware_version");
    742e:	8b e6       	ldi	r24, 0x6B	; 107
    7430:	91 e2       	ldi	r25, 0x21	; 33
    7432:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x09);
    7436:	89 e0       	ldi	r24, 0x09	; 9
    7438:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString(HardwareVersion);
    743c:	8c e7       	ldi	r24, 0x7C	; 124
    743e:	91 e2       	ldi	r25, 0x21	; 33
    7440:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x0A);
    7444:	8a e0       	ldi	r24, 0x0A	; 10
    7446:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	
	SD_WriteString("channel_specs");
    744a:	8e e7       	ldi	r24, 0x7E	; 126
    744c:	91 e2       	ldi	r25, 0x21	; 33
    744e:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x09);
    7452:	89 e0       	ldi	r24, 0x09	; 9
    7454:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	SD_WriteString("{\"Temperature\":{\"units\": \"deg C\", \"scale\": 0.1},");
    7458:	8c e8       	ldi	r24, 0x8C	; 140
    745a:	91 e2       	ldi	r25, 0x21	; 33
    745c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_WriteString("\"Humidity\":{\"units\": \"%RH\", \"scale\": 1},");
    7460:	8d eb       	ldi	r24, 0xBD	; 189
    7462:	91 e2       	ldi	r25, 0x21	; 33
    7464:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_WriteString("\"Pressure\":{\"units\": \"kPa\", \"scale\": 1},");
    7468:	86 ee       	ldi	r24, 0xE6	; 230
    746a:	91 e2       	ldi	r25, 0x21	; 33
    746c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_WriteString("\"Light_Green\":{\"units\": \"bits\", \"scale\": 1},");				// 44
    7470:	8f e0       	ldi	r24, 0x0F	; 15
    7472:	92 e2       	ldi	r25, 0x22	; 34
    7474:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_WriteString("\"Light_Red\":{\"units\": \"bits\", \"scale\": 1},");				// 42
    7478:	8c e3       	ldi	r24, 0x3C	; 60
    747a:	92 e2       	ldi	r25, 0x22	; 34
    747c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_WriteString("\"Light_Blue\":{\"units\": \"bits\", \"scale\": 1},");				// 43
    7480:	87 e6       	ldi	r24, 0x67	; 103
    7482:	92 e2       	ldi	r25, 0x22	; 34
    7484:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_WriteString("\"Light_Clear\":{\"units\": \"bits\", \"scale\": 1},");				// 44
    7488:	83 e9       	ldi	r24, 0x93	; 147
    748a:	92 e2       	ldi	r25, 0x22	; 34
    748c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_WriteString("\"Air_Small\":{\"units\": \"#particles\", \"scale\": 1},");				// 48
    7490:	80 ec       	ldi	r24, 0xC0	; 192
    7492:	92 e2       	ldi	r25, 0x22	; 34
    7494:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_WriteString("\"Air_Large\":{\"units\": \"#particles\", \"scale\": 1},");				// 48
    7498:	81 ef       	ldi	r24, 0xF1	; 241
    749a:	92 e2       	ldi	r25, 0x22	; 34
    749c:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_WriteString("\"Microphone\":{\"units\": \"bits\", \"scale\": 1}}");
    74a0:	82 e2       	ldi	r24, 0x22	; 34
    74a2:	93 e2       	ldi	r25, 0x23	; 35
    74a4:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <SD_WriteString>
	SD_Write8(0x0A);
    74a8:	8a e0       	ldi	r24, 0x0A	; 10
    74aa:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
	
	SD_Write8(0x00);
    74ae:	80 e0       	ldi	r24, 0x00	; 0
    74b0:	0e 94 75 25 	call	0x4aea	; 0x4aea <SD_Write8>
		
	SD_WriteCRC();			// CRC			
    74b4:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <SD_WriteCRC>
		
	f_sync(&Log_File);
    74b8:	8a ee       	ldi	r24, 0xEA	; 234
    74ba:	9e e3       	ldi	r25, 0x3E	; 62
    74bc:	0e 94 0e 1b 	call	0x361c	; 0x361c <f_sync>

	return resp;
}
    74c0:	81 2f       	mov	r24, r17
    74c2:	1f 91       	pop	r17
    74c4:	0f 91       	pop	r16
    74c6:	ff 90       	pop	r15
    74c8:	ef 90       	pop	r14
    74ca:	08 95       	ret

000074cc <Wifi_SendCommand>:
	} else {
		return false;
	}
}

bool Wifi_SendCommand(char toSend [], char ok [], char ok2 [], uint16_t timeOut){
    74cc:	6f 92       	push	r6
    74ce:	7f 92       	push	r7
    74d0:	8f 92       	push	r8
    74d2:	9f 92       	push	r9
    74d4:	af 92       	push	r10
    74d6:	bf 92       	push	r11
    74d8:	cf 92       	push	r12
    74da:	df 92       	push	r13
    74dc:	ef 92       	push	r14
    74de:	ff 92       	push	r15
    74e0:	0f 93       	push	r16
    74e2:	1f 93       	push	r17
    74e4:	cf 93       	push	r28
    74e6:	df 93       	push	r29
    74e8:	7c 01       	movw	r14, r24
    74ea:	6b 01       	movw	r12, r22
    74ec:	5a 01       	movw	r10, r20
    74ee:	39 01       	movw	r6, r18
	respLen = 0;
    74f0:	10 92 e8 29 	sts	0x29E8, r1
	toSendLen = strlen(toSend);
    74f4:	fc 01       	movw	r30, r24
    74f6:	01 90       	ld	r0, Z+
    74f8:	00 20       	and	r0, r0
    74fa:	e9 f7       	brne	.-6      	; 0x74f6 <Wifi_SendCommand+0x2a>
    74fc:	31 97       	sbiw	r30, 0x01	; 1
    74fe:	e8 1b       	sub	r30, r24
    7500:	f9 0b       	sbc	r31, r25
    7502:	e0 93 e9 29 	sts	0x29E9, r30
	if(strlen(ok) > strlen(ok2)){
    7506:	eb 01       	movw	r28, r22
    7508:	09 90       	ld	r0, Y+
    750a:	00 20       	and	r0, r0
    750c:	e9 f7       	brne	.-6      	; 0x7508 <Wifi_SendCommand+0x3c>
    750e:	21 97       	sbiw	r28, 0x01	; 1
    7510:	c6 1b       	sub	r28, r22
    7512:	d7 0b       	sbc	r29, r23
    7514:	da 01       	movw	r26, r20
    7516:	0d 90       	ld	r0, X+
    7518:	00 20       	and	r0, r0
    751a:	e9 f7       	brne	.-6      	; 0x7516 <Wifi_SendCommand+0x4a>
    751c:	11 97       	sbiw	r26, 0x01	; 1
    751e:	a4 1b       	sub	r26, r20
    7520:	b5 0b       	sbc	r27, r21
    7522:	ac 17       	cp	r26, r28
    7524:	bd 07       	cpc	r27, r29
    7526:	18 f4       	brcc	.+6      	; 0x752e <Wifi_SendCommand+0x62>
		okLen = strlen(ok2);
    7528:	a0 93 ea 29 	sts	0x29EA, r26
    752c:	02 c0       	rjmp	.+4      	; 0x7532 <Wifi_SendCommand+0x66>
	} else {
		okLen = strlen(ok);
    752e:	c0 93 ea 29 	sts	0x29EA, r28
	}

	Debug_SendString("-----------------",true);
    7532:	8e e4       	ldi	r24, 0x4E	; 78
    7534:	93 e2       	ldi	r25, 0x23	; 35
    7536:	61 e0       	ldi	r22, 0x01	; 1
    7538:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
	Debug_SendString("Command: ",false);
    753c:	80 e6       	ldi	r24, 0x60	; 96
    753e:	93 e2       	ldi	r25, 0x23	; 35
    7540:	60 e0       	ldi	r22, 0x00	; 0
    7542:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
	Debug_SendString(toSend,true);
    7546:	c7 01       	movw	r24, r14
    7548:	61 e0       	ldi	r22, 0x01	; 1
    754a:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
	Wifi_ClearBuffer();
    754e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Wifi_ClearBuffer>
	Wifi_SendString(toSend, true);
    7552:	c7 01       	movw	r24, r14
    7554:	61 e0       	ldi	r22, 0x01	; 1
    7556:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <Wifi_SendString>
    755a:	00 e0       	ldi	r16, 0x00	; 0
    755c:	10 e0       	ldi	r17, 0x00	; 0
    755e:	a6 e6       	ldi	r26, 0x66	; 102
    7560:	8a 2e       	mov	r8, r26
    7562:	ae e0       	ldi	r26, 0x0E	; 14
    7564:	9a 2e       	mov	r9, r26
    7566:	8c c0       	rjmp	.+280    	; 0x7680 <Wifi_SendCommand+0x1b4>
	for(uint16_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
    7568:	0e 94 cd 01 	call	0x39a	; 0x39a <Wifi_CharReadyToRead>
    756c:	88 23       	and	r24, r24
    756e:	09 f4       	brne	.+2      	; 0x7572 <Wifi_SendCommand+0xa6>
    7570:	82 c0       	rjmp	.+260    	; 0x7676 <Wifi_SendCommand+0x1aa>
			resp[respLen] = Wifi_GetByte(false);
    7572:	80 91 e8 29 	lds	r24, 0x29E8
    7576:	c8 2f       	mov	r28, r24
    7578:	d0 e0       	ldi	r29, 0x00	; 0
    757a:	80 e0       	ldi	r24, 0x00	; 0
    757c:	0e 94 25 02 	call	0x44a	; 0x44a <Wifi_GetByte>
    7580:	cf 5e       	subi	r28, 0xEF	; 239
    7582:	d2 4d       	sbci	r29, 0xD2	; 210
    7584:	88 83       	st	Y, r24
			respLen++;
    7586:	80 91 e8 29 	lds	r24, 0x29E8
    758a:	8f 5f       	subi	r24, 0xFF	; 255
    758c:	80 93 e8 29 	sts	0x29E8, r24
			if(respLen == okLen + toSendLen + 3){		
    7590:	20 91 e8 29 	lds	r18, 0x29E8
    7594:	40 91 ea 29 	lds	r20, 0x29EA
    7598:	80 91 e9 29 	lds	r24, 0x29E9
    759c:	30 e0       	ldi	r19, 0x00	; 0
    759e:	90 e0       	ldi	r25, 0x00	; 0
    75a0:	84 0f       	add	r24, r20
    75a2:	91 1d       	adc	r25, r1
    75a4:	03 96       	adiw	r24, 0x03	; 3
    75a6:	28 17       	cp	r18, r24
    75a8:	39 07       	cpc	r19, r25
    75aa:	09 f0       	breq	.+2      	; 0x75ae <Wifi_SendCommand+0xe2>
    75ac:	64 c0       	rjmp	.+200    	; 0x7676 <Wifi_SendCommand+0x1aa>
				
				Debug_SendString("Responce: ",false);
    75ae:	8a e6       	ldi	r24, 0x6A	; 106
    75b0:	93 e2       	ldi	r25, 0x23	; 35
    75b2:	60 e0       	ldi	r22, 0x00	; 0
    75b4:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
    75b8:	90 e0       	ldi	r25, 0x00	; 0
    75ba:	0c c0       	rjmp	.+24     	; 0x75d4 <Wifi_SendCommand+0x108>
				for(uint8_t j = 0; j < respLen; j++){
					Debug_SendByte(resp[j]);
    75bc:	e9 2f       	mov	r30, r25
    75be:	f0 e0       	ldi	r31, 0x00	; 0
    75c0:	ef 5e       	subi	r30, 0xEF	; 239
    75c2:	f2 4d       	sbci	r31, 0xD2	; 210
    75c4:	e0 81       	ld	r30, Z
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    75c6:	80 91 a1 08 	lds	r24, 0x08A1
    75ca:	85 ff       	sbrs	r24, 5
    75cc:	fc cf       	rjmp	.-8      	; 0x75c6 <Wifi_SendCommand+0xfa>
	Debug_Usart.DATA = data;	
    75ce:	e0 93 a0 08 	sts	0x08A0, r30
			resp[respLen] = Wifi_GetByte(false);
			respLen++;
			if(respLen == okLen + toSendLen + 3){		
				
				Debug_SendString("Responce: ",false);
				for(uint8_t j = 0; j < respLen; j++){
    75d2:	9f 5f       	subi	r25, 0xFF	; 255
    75d4:	80 91 e8 29 	lds	r24, 0x29E8
    75d8:	98 17       	cp	r25, r24
    75da:	80 f3       	brcs	.-32     	; 0x75bc <Wifi_SendCommand+0xf0>
					Debug_SendByte(resp[j]);
				}
				Debug_SendString(",want: ",false);
    75dc:	85 e7       	ldi	r24, 0x75	; 117
    75de:	93 e2       	ldi	r25, 0x23	; 35
    75e0:	60 e0       	ldi	r22, 0x00	; 0
    75e2:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
				Debug_SendString(ok,true);
    75e6:	c6 01       	movw	r24, r12
    75e8:	61 e0       	ldi	r22, 0x01	; 1
    75ea:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
    75ee:	20 e0       	ldi	r18, 0x00	; 0
    75f0:	0d c0       	rjmp	.+26     	; 0x760c <Wifi_SendCommand+0x140>
				
				
				for(uint8_t k = 0; k < toSendLen; k++){
					if(resp[k] != toSend[k]){
    75f2:	e2 2f       	mov	r30, r18
    75f4:	f0 e0       	ldi	r31, 0x00	; 0
    75f6:	df 01       	movw	r26, r30
    75f8:	af 5e       	subi	r26, 0xEF	; 239
    75fa:	b2 4d       	sbci	r27, 0xD2	; 210
    75fc:	9c 91       	ld	r25, X
    75fe:	ee 0d       	add	r30, r14
    7600:	ff 1d       	adc	r31, r15
    7602:	80 81       	ld	r24, Z
    7604:	98 17       	cp	r25, r24
    7606:	09 f0       	breq	.+2      	; 0x760a <Wifi_SendCommand+0x13e>
    7608:	3f c0       	rjmp	.+126    	; 0x7688 <Wifi_SendCommand+0x1bc>
				}
				Debug_SendString(",want: ",false);
				Debug_SendString(ok,true);
				
				
				for(uint8_t k = 0; k < toSendLen; k++){
    760a:	2f 5f       	subi	r18, 0xFF	; 255
    760c:	80 91 e9 29 	lds	r24, 0x29E9
    7610:	28 17       	cp	r18, r24
    7612:	78 f3       	brcs	.-34     	; 0x75f2 <Wifi_SendCommand+0x126>
					if(resp[k] != toSend[k]){
						return false;
					}
				}
				for(uint8_t l = (toSendLen+3); l < (respLen-3); l++){
    7614:	20 91 e9 29 	lds	r18, 0x29E9
    7618:	2d 5f       	subi	r18, 0xFD	; 253
    761a:	1b c0       	rjmp	.+54     	; 0x7652 <Wifi_SendCommand+0x186>
					if(resp[l] != ok[l-toSendLen-3]){
    761c:	ed 01       	movw	r28, r26
    761e:	cf 5e       	subi	r28, 0xEF	; 239
    7620:	d2 4d       	sbci	r29, 0xD2	; 210
    7622:	98 81       	ld	r25, Y
    7624:	80 91 e9 29 	lds	r24, 0x29E9
    7628:	fd 01       	movw	r30, r26
    762a:	e8 1b       	sub	r30, r24
    762c:	f1 09       	sbc	r31, r1
    762e:	ec 0d       	add	r30, r12
    7630:	fd 1d       	adc	r31, r13
    7632:	33 97       	sbiw	r30, 0x03	; 3
    7634:	80 81       	ld	r24, Z
    7636:	98 17       	cp	r25, r24
    7638:	59 f0       	breq	.+22     	; 0x7650 <Wifi_SendCommand+0x184>
						if(resp[l] != ok2[l-toSendLen-3]){
    763a:	88 81       	ld	r24, Y
    763c:	90 91 e9 29 	lds	r25, 0x29E9
    7640:	a9 1b       	sub	r26, r25
    7642:	b1 09       	sbc	r27, r1
    7644:	aa 0d       	add	r26, r10
    7646:	bb 1d       	adc	r27, r11
    7648:	13 97       	sbiw	r26, 0x03	; 3
    764a:	9c 91       	ld	r25, X
    764c:	89 17       	cp	r24, r25
    764e:	e1 f4       	brne	.+56     	; 0x7688 <Wifi_SendCommand+0x1bc>
				for(uint8_t k = 0; k < toSendLen; k++){
					if(resp[k] != toSend[k]){
						return false;
					}
				}
				for(uint8_t l = (toSendLen+3); l < (respLen-3); l++){
    7650:	2f 5f       	subi	r18, 0xFF	; 255
    7652:	a2 2f       	mov	r26, r18
    7654:	b0 e0       	ldi	r27, 0x00	; 0
    7656:	80 91 e8 29 	lds	r24, 0x29E8
    765a:	90 e0       	ldi	r25, 0x00	; 0
    765c:	03 97       	sbiw	r24, 0x03	; 3
    765e:	a8 17       	cp	r26, r24
    7660:	b9 07       	cpc	r27, r25
    7662:	e4 f2       	brlt	.-72     	; 0x761c <Wifi_SendCommand+0x150>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7664:	80 91 a1 08 	lds	r24, 0x08A1
    7668:	85 ff       	sbrs	r24, 5
    766a:	fc cf       	rjmp	.-8      	; 0x7664 <Wifi_SendCommand+0x198>
	Debug_Usart.DATA = data;	
    766c:	8d e0       	ldi	r24, 0x0D	; 13
    766e:	80 93 a0 08 	sts	0x08A0, r24
    7672:	81 e0       	ldi	r24, 0x01	; 1
    7674:	0a c0       	rjmp	.+20     	; 0x768a <Wifi_SendCommand+0x1be>
    7676:	c4 01       	movw	r24, r8
    7678:	01 97       	sbiw	r24, 0x01	; 1
    767a:	f1 f7       	brne	.-4      	; 0x7678 <Wifi_SendCommand+0x1ac>
	Debug_SendString("-----------------",true);
	Debug_SendString("Command: ",false);
	Debug_SendString(toSend,true);
	Wifi_ClearBuffer();
	Wifi_SendString(toSend, true);
	for(uint16_t i = 0; i < timeOut; i++){
    767c:	0f 5f       	subi	r16, 0xFF	; 255
    767e:	1f 4f       	sbci	r17, 0xFF	; 255
    7680:	06 15       	cp	r16, r6
    7682:	17 05       	cpc	r17, r7
    7684:	08 f4       	brcc	.+2      	; 0x7688 <Wifi_SendCommand+0x1bc>
    7686:	70 cf       	rjmp	.-288    	; 0x7568 <Wifi_SendCommand+0x9c>
    7688:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    768a:	df 91       	pop	r29
    768c:	cf 91       	pop	r28
    768e:	1f 91       	pop	r17
    7690:	0f 91       	pop	r16
    7692:	ff 90       	pop	r15
    7694:	ef 90       	pop	r14
    7696:	df 90       	pop	r13
    7698:	cf 90       	pop	r12
    769a:	bf 90       	pop	r11
    769c:	af 90       	pop	r10
    769e:	9f 90       	pop	r9
    76a0:	8f 90       	pop	r8
    76a2:	7f 90       	pop	r7
    76a4:	6f 90       	pop	r6
    76a6:	08 95       	ret

000076a8 <Wifi_GetMac>:
	}
	connected = false;
	return false;
}

bool Wifi_GetMac(uint16_t timeOut){
    76a8:	ef 92       	push	r14
    76aa:	ff 92       	push	r15
    76ac:	0f 93       	push	r16
    76ae:	1f 93       	push	r17
    76b0:	cf 93       	push	r28
    76b2:	df 93       	push	r29
    76b4:	ec 01       	movw	r28, r24
	uint8_t tmp = 0;
	Wifi_ClearBuffer();
    76b6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Wifi_ClearBuffer>
	Wifi_SendCommand("get mac","Mac Addr=","Mac Addr=",timeOut);
    76ba:	8d e7       	ldi	r24, 0x7D	; 125
    76bc:	93 e2       	ldi	r25, 0x23	; 35
    76be:	65 e8       	ldi	r22, 0x85	; 133
    76c0:	73 e2       	ldi	r23, 0x23	; 35
    76c2:	ab 01       	movw	r20, r22
    76c4:	9e 01       	movw	r18, r28
    76c6:	0e 94 66 3a 	call	0x74cc	; 0x74cc <Wifi_SendCommand>
    76ca:	10 e0       	ldi	r17, 0x00	; 0
    76cc:	00 e0       	ldi	r16, 0x00	; 0
    76ce:	b6 e6       	ldi	r27, 0x66	; 102
    76d0:	eb 2e       	mov	r14, r27
    76d2:	be e0       	ldi	r27, 0x0E	; 14
    76d4:	fb 2e       	mov	r15, r27
    76d6:	1f c0       	rjmp	.+62     	; 0x7716 <Wifi_GetMac+0x6e>
	for(uint8_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
    76d8:	0e 94 cd 01 	call	0x39a	; 0x39a <Wifi_CharReadyToRead>
    76dc:	88 23       	and	r24, r24
    76de:	b9 f0       	breq	.+46     	; 0x770e <Wifi_GetMac+0x66>
			macAddr[tmp] = Wifi_GetByte(false);
    76e0:	80 e0       	ldi	r24, 0x00	; 0
    76e2:	0e 94 25 02 	call	0x44a	; 0x44a <Wifi_GetByte>
    76e6:	e1 2f       	mov	r30, r17
    76e8:	f0 e0       	ldi	r31, 0x00	; 0
    76ea:	ee 5b       	subi	r30, 0xBE	; 190
    76ec:	fa 4c       	sbci	r31, 0xCA	; 202
    76ee:	80 83       	st	Z, r24
			tmp++;
    76f0:	1f 5f       	subi	r17, 0xFF	; 255
			if(tmp == 17){
    76f2:	11 31       	cpi	r17, 0x11	; 17
    76f4:	61 f4       	brne	.+24     	; 0x770e <Wifi_GetMac+0x66>
				Debug_SendString("Got Mac=",false);
    76f6:	8f e8       	ldi	r24, 0x8F	; 143
    76f8:	93 e2       	ldi	r25, 0x23	; 35
    76fa:	60 e0       	ldi	r22, 0x00	; 0
    76fc:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
				Debug_SendString(macAddr,true);
    7700:	82 e4       	ldi	r24, 0x42	; 66
    7702:	95 e3       	ldi	r25, 0x35	; 53
    7704:	61 e0       	ldi	r22, 0x01	; 1
    7706:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
    770a:	81 e0       	ldi	r24, 0x01	; 1
    770c:	0a c0       	rjmp	.+20     	; 0x7722 <Wifi_GetMac+0x7a>
    770e:	c7 01       	movw	r24, r14
    7710:	01 97       	sbiw	r24, 0x01	; 1
    7712:	f1 f7       	brne	.-4      	; 0x7710 <Wifi_GetMac+0x68>

bool Wifi_GetMac(uint16_t timeOut){
	uint8_t tmp = 0;
	Wifi_ClearBuffer();
	Wifi_SendCommand("get mac","Mac Addr=","Mac Addr=",timeOut);
	for(uint8_t i = 0; i < timeOut; i++){
    7714:	0f 5f       	subi	r16, 0xFF	; 255
    7716:	80 2f       	mov	r24, r16
    7718:	90 e0       	ldi	r25, 0x00	; 0
    771a:	8c 17       	cp	r24, r28
    771c:	9d 07       	cpc	r25, r29
    771e:	e0 f2       	brcs	.-72     	; 0x76d8 <Wifi_GetMac+0x30>
    7720:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		_delay_ms(1);
	}
	return false;
}
    7722:	df 91       	pop	r29
    7724:	cf 91       	pop	r28
    7726:	1f 91       	pop	r17
    7728:	0f 91       	pop	r16
    772a:	ff 90       	pop	r15
    772c:	ef 90       	pop	r14
    772e:	08 95       	ret

00007730 <Wifi_Connected>:
	
	time_secs = tmp32;
	return true;
}

bool Wifi_Connected(uint16_t timeOut){
    7730:	cf 92       	push	r12
    7732:	df 92       	push	r13
    7734:	ef 92       	push	r14
    7736:	ff 92       	push	r15
    7738:	0f 93       	push	r16
    773a:	1f 93       	push	r17
    773c:	cf 93       	push	r28
    773e:	df 93       	push	r29
    7740:	ec 01       	movw	r28, r24
	uint8_t tmp = 0;
	Wifi_ClearBuffer();
    7742:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Wifi_ClearBuffer>
	Wifi_SendCommand("show connection","8","8",timeOut);	
    7746:	88 e9       	ldi	r24, 0x98	; 152
    7748:	93 e2       	ldi	r25, 0x23	; 35
    774a:	6e e5       	ldi	r22, 0x5E	; 94
    774c:	70 e2       	ldi	r23, 0x20	; 32
    774e:	ab 01       	movw	r20, r22
    7750:	9e 01       	movw	r18, r28
    7752:	0e 94 66 3a 	call	0x74cc	; 0x74cc <Wifi_SendCommand>
    7756:	ff 24       	eor	r15, r15
    7758:	ee 24       	eor	r14, r14
    775a:	16 e6       	ldi	r17, 0x66	; 102
    775c:	c1 2e       	mov	r12, r17
    775e:	1e e0       	ldi	r17, 0x0E	; 14
    7760:	d1 2e       	mov	r13, r17
    7762:	1d c0       	rjmp	.+58     	; 0x779e <Wifi_Connected+0x6e>
	for(uint8_t i = 0; i < timeOut; i++){
		if(Wifi_CharReadyToRead()){ 
    7764:	0e 94 cd 01 	call	0x39a	; 0x39a <Wifi_CharReadyToRead>
    7768:	88 23       	and	r24, r24
    776a:	a9 f0       	breq	.+42     	; 0x7796 <Wifi_Connected+0x66>
			connectionStatus[tmp] = Wifi_GetByte(false);
    776c:	0f 2d       	mov	r16, r15
    776e:	10 e0       	ldi	r17, 0x00	; 0
    7770:	80 e0       	ldi	r24, 0x00	; 0
    7772:	0e 94 25 02 	call	0x44a	; 0x44a <Wifi_GetByte>
    7776:	0d 5b       	subi	r16, 0xBD	; 189
    7778:	12 4d       	sbci	r17, 0xD2	; 210
    777a:	f8 01       	movw	r30, r16
    777c:	80 83       	st	Z, r24
			tmp++;
    777e:	f3 94       	inc	r15
			if(tmp == 3){
    7780:	f3 e0       	ldi	r31, 0x03	; 3
    7782:	ff 16       	cp	r15, r31
    7784:	41 f4       	brne	.+16     	; 0x7796 <Wifi_Connected+0x66>
				if(connectionStatus[2] == '3'){
    7786:	80 91 45 2d 	lds	r24, 0x2D45
    778a:	83 33       	cpi	r24, 0x33	; 51
    778c:	69 f0       	breq	.+26     	; 0x77a8 <Wifi_Connected+0x78>
					connected = false;
					return false;
				} else {
					connected = true;
    778e:	81 e0       	ldi	r24, 0x01	; 1
    7790:	80 93 f4 29 	sts	0x29F4, r24
    7794:	0c c0       	rjmp	.+24     	; 0x77ae <Wifi_Connected+0x7e>
    7796:	c6 01       	movw	r24, r12
    7798:	01 97       	sbiw	r24, 0x01	; 1
    779a:	f1 f7       	brne	.-4      	; 0x7798 <Wifi_Connected+0x68>

bool Wifi_Connected(uint16_t timeOut){
	uint8_t tmp = 0;
	Wifi_ClearBuffer();
	Wifi_SendCommand("show connection","8","8",timeOut);	
	for(uint8_t i = 0; i < timeOut; i++){
    779c:	e3 94       	inc	r14
    779e:	8e 2d       	mov	r24, r14
    77a0:	90 e0       	ldi	r25, 0x00	; 0
    77a2:	8c 17       	cp	r24, r28
    77a4:	9d 07       	cpc	r25, r29
    77a6:	f0 f2       	brcs	.-68     	; 0x7764 <Wifi_Connected+0x34>
				}
			}
		}
		_delay_ms(1);
	}
	connected = false;
    77a8:	10 92 f4 29 	sts	0x29F4, r1
    77ac:	80 e0       	ldi	r24, 0x00	; 0
	return false;
}
    77ae:	df 91       	pop	r29
    77b0:	cf 91       	pop	r28
    77b2:	1f 91       	pop	r17
    77b4:	0f 91       	pop	r16
    77b6:	ff 90       	pop	r15
    77b8:	ef 90       	pop	r14
    77ba:	df 90       	pop	r13
    77bc:	cf 90       	pop	r12
    77be:	08 95       	ret

000077c0 <Wifi_ExitCMDMode>:
		_delay_ms(1);
	}
	return false;
}

bool Wifi_ExitCMDMode(uint16_t timeOut){
    77c0:	9c 01       	movw	r18, r24
	if(Wifi_SendCommand("exit","EXIT","EXIT",timeOut)){
    77c2:	4d ea       	ldi	r20, 0xAD	; 173
    77c4:	53 e2       	ldi	r21, 0x23	; 35
    77c6:	88 ea       	ldi	r24, 0xA8	; 168
    77c8:	93 e2       	ldi	r25, 0x23	; 35
    77ca:	ba 01       	movw	r22, r20
    77cc:	0e 94 66 3a 	call	0x74cc	; 0x74cc <Wifi_SendCommand>
		return true;
	} else {
		return false;
	}
}
    77d0:	08 95       	ret

000077d2 <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const char* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    77d2:	2f 92       	push	r2
    77d4:	3f 92       	push	r3
    77d6:	4f 92       	push	r4
    77d8:	5f 92       	push	r5
    77da:	6f 92       	push	r6
    77dc:	7f 92       	push	r7
    77de:	8f 92       	push	r8
    77e0:	9f 92       	push	r9
    77e2:	af 92       	push	r10
    77e4:	bf 92       	push	r11
    77e6:	cf 92       	push	r12
    77e8:	df 92       	push	r13
    77ea:	ef 92       	push	r14
    77ec:	ff 92       	push	r15
    77ee:	0f 93       	push	r16
    77f0:	1f 93       	push	r17
    77f2:	df 93       	push	r29
    77f4:	cf 93       	push	r28
    77f6:	cd b7       	in	r28, 0x3d	; 61
    77f8:	de b7       	in	r29, 0x3e	; 62
    77fa:	63 97       	sbiw	r28, 0x13	; 19
    77fc:	cd bf       	out	0x3d, r28	; 61
    77fe:	de bf       	out	0x3e, r29	; 62
    7800:	6b a4       	ldd	r6, Y+43	; 0x2b
    7802:	7c a4       	ldd	r7, Y+44	; 0x2c
    7804:	8e 01       	movw	r16, r28
    7806:	03 5d       	subi	r16, 0xD3	; 211
    7808:	1f 4f       	sbci	r17, 0xFF	; 255
    780a:	19 8a       	std	Y+17, r1	; 0x11
    780c:	1a 8a       	std	Y+18, r1	; 0x12
    780e:	20 e0       	ldi	r18, 0x00	; 0
    7810:	30 e0       	ldi	r19, 0x00	; 0


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    7812:	d3 01       	movw	r26, r6
    7814:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    7816:	88 23       	and	r24, r24
    7818:	09 f4       	brne	.+2      	; 0x781c <f_printf+0x4a>
    781a:	17 c1       	rjmp	.+558    	; 0x7a4a <f_printf+0x278>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    781c:	08 94       	sec
    781e:	61 1c       	adc	r6, r1
    7820:	71 1c       	adc	r7, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape cahracter */
    7822:	85 32       	cpi	r24, 0x25	; 37
    7824:	71 f0       	breq	.+28     	; 0x7842 <f_printf+0x70>
			cc = f_putc(c, fil);
    7826:	90 e0       	ldi	r25, 0x00	; 0
    7828:	69 a5       	ldd	r22, Y+41	; 0x29
    782a:	7a a5       	ldd	r23, Y+42	; 0x2a
    782c:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <f_putc>
    7830:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    7832:	bf ef       	ldi	r27, 0xFF	; 255
    7834:	8f 3f       	cpi	r24, 0xFF	; 255
    7836:	9b 07       	cpc	r25, r27
    7838:	11 f4       	brne	.+4      	; 0x783e <f_printf+0x6c>
    783a:	48 01       	movw	r8, r16
    783c:	fa c0       	rjmp	.+500    	; 0x7a32 <f_printf+0x260>
    783e:	48 01       	movw	r8, r16
    7840:	4c c0       	rjmp	.+152    	; 0x78da <f_printf+0x108>
			continue;
		}
		w = f = 0;
		c = *str++;
    7842:	d3 01       	movw	r26, r6
    7844:	ed 91       	ld	r30, X+
    7846:	3d 01       	movw	r6, r26
		if (c == '0') {				/* Flag: '0' padding */
    7848:	e0 33       	cpi	r30, 0x30	; 48
    784a:	11 f0       	breq	.+4      	; 0x7850 <f_printf+0x7e>
    784c:	1b 8a       	std	Y+19, r1	; 0x13
    784e:	04 c0       	rjmp	.+8      	; 0x7858 <f_printf+0x86>
			f = 1; c = *str++;
    7850:	ed 91       	ld	r30, X+
    7852:	3d 01       	movw	r6, r26
    7854:	b1 e0       	ldi	r27, 0x01	; 1
    7856:	bb 8b       	std	Y+19, r27	; 0x13
    7858:	aa 24       	eor	r10, r10
    785a:	bb 24       	eor	r11, r11
    785c:	13 c0       	rjmp	.+38     	; 0x7884 <f_printf+0xb2>
		}
		while (c >= '0' && c <= '9') {	/* Precision */
			w = w * 10 + (c - '0');
    785e:	c5 01       	movw	r24, r10
    7860:	53 e0       	ldi	r21, 0x03	; 3
    7862:	88 0f       	add	r24, r24
    7864:	99 1f       	adc	r25, r25
    7866:	5a 95       	dec	r21
    7868:	e1 f7       	brne	.-8      	; 0x7862 <f_printf+0x90>
    786a:	aa 0c       	add	r10, r10
    786c:	bb 1c       	adc	r11, r11
    786e:	a8 0e       	add	r10, r24
    7870:	b9 1e       	adc	r11, r25
    7872:	ae 0e       	add	r10, r30
    7874:	b1 1c       	adc	r11, r1
    7876:	e0 ed       	ldi	r30, 0xD0	; 208
    7878:	ff ef       	ldi	r31, 0xFF	; 255
    787a:	ae 0e       	add	r10, r30
    787c:	bf 1e       	adc	r11, r31
			c = *str++;
    787e:	d3 01       	movw	r26, r6
    7880:	ed 91       	ld	r30, X+
    7882:	3d 01       	movw	r6, r26
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (c >= '0' && c <= '9') {	/* Precision */
    7884:	8e 2f       	mov	r24, r30
    7886:	80 53       	subi	r24, 0x30	; 48
    7888:	8a 30       	cpi	r24, 0x0A	; 10
    788a:	48 f3       	brcs	.-46     	; 0x785e <f_printf+0x8c>
			w = w * 10 + (c - '0');
			c = *str++;
		}
		if (c == 'l') {				/* Prefix: Size is long int */
    788c:	ec 36       	cpi	r30, 0x6C	; 108
    788e:	31 f4       	brne	.+12     	; 0x789c <f_printf+0xca>
			f |= 2; c = *str++;
    7890:	bb 89       	ldd	r27, Y+19	; 0x13
    7892:	b2 60       	ori	r27, 0x02	; 2
    7894:	bb 8b       	std	Y+19, r27	; 0x13
    7896:	d3 01       	movw	r26, r6
    7898:	ed 91       	ld	r30, X+
    789a:	3d 01       	movw	r6, r26
		}
		if (c == 's') {				/* Type is string */
    789c:	e3 37       	cpi	r30, 0x73	; 115
    789e:	49 f4       	brne	.+18     	; 0x78b2 <f_printf+0xe0>
			cc = f_puts(va_arg(arp, char*), fil);
    78a0:	32 e0       	ldi	r19, 0x02	; 2
    78a2:	83 2e       	mov	r8, r19
    78a4:	91 2c       	mov	r9, r1
    78a6:	80 0e       	add	r8, r16
    78a8:	91 1e       	adc	r9, r17
    78aa:	f8 01       	movw	r30, r16
    78ac:	80 81       	ld	r24, Z
    78ae:	91 81       	ldd	r25, Z+1	; 0x01
    78b0:	bb c0       	rjmp	.+374    	; 0x7a28 <f_printf+0x256>
			continue;
		}
		if (c == 'c') {				/* Type is character */
    78b2:	e3 36       	cpi	r30, 0x63	; 99
    78b4:	a9 f4       	brne	.+42     	; 0x78e0 <f_printf+0x10e>
			cc = f_putc(va_arg(arp, int), fil);
    78b6:	22 e0       	ldi	r18, 0x02	; 2
    78b8:	82 2e       	mov	r8, r18
    78ba:	91 2c       	mov	r9, r1
    78bc:	80 0e       	add	r8, r16
    78be:	91 1e       	adc	r9, r17
    78c0:	d8 01       	movw	r26, r16
    78c2:	8d 91       	ld	r24, X+
    78c4:	9c 91       	ld	r25, X
    78c6:	69 a5       	ldd	r22, Y+41	; 0x29
    78c8:	7a a5       	ldd	r23, Y+42	; 0x2a
    78ca:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <f_putc>
    78ce:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    78d0:	bf ef       	ldi	r27, 0xFF	; 255
    78d2:	8f 3f       	cpi	r24, 0xFF	; 255
    78d4:	9b 07       	cpc	r25, r27
    78d6:	09 f4       	brne	.+2      	; 0x78da <f_printf+0x108>
    78d8:	ac c0       	rjmp	.+344    	; 0x7a32 <f_printf+0x260>
    78da:	21 e0       	ldi	r18, 0x01	; 1
    78dc:	30 e0       	ldi	r19, 0x00	; 0
    78de:	a9 c0       	rjmp	.+338    	; 0x7a32 <f_printf+0x260>
			continue;
		}
		r = 0;
		if (c == 'd') r = 10;		/* Type is signed decimal */
    78e0:	e4 36       	cpi	r30, 0x64	; 100
    78e2:	39 f0       	breq	.+14     	; 0x78f2 <f_printf+0x120>
		if (c == 'u') r = 10;		/* Type is unsigned decimal */
    78e4:	e5 37       	cpi	r30, 0x75	; 117
    78e6:	29 f0       	breq	.+10     	; 0x78f2 <f_printf+0x120>
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
    78e8:	e8 35       	cpi	r30, 0x58	; 88
    78ea:	09 f0       	breq	.+2      	; 0x78ee <f_printf+0x11c>
    78ec:	ae c0       	rjmp	.+348    	; 0x7a4a <f_printf+0x278>
    78ee:	20 e1       	ldi	r18, 0x10	; 16
    78f0:	01 c0       	rjmp	.+2      	; 0x78f4 <f_printf+0x122>
    78f2:	2a e0       	ldi	r18, 0x0A	; 10
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
    78f4:	fb 89       	ldd	r31, Y+19	; 0x13
    78f6:	f1 ff       	sbrs	r31, 1
    78f8:	0d c0       	rjmp	.+26     	; 0x7914 <f_printf+0x142>
			val = (ULONG)va_arg(arp, long);
    78fa:	94 e0       	ldi	r25, 0x04	; 4
    78fc:	89 2e       	mov	r8, r25
    78fe:	91 2c       	mov	r9, r1
    7900:	80 0e       	add	r8, r16
    7902:	91 1e       	adc	r9, r17
    7904:	d8 01       	movw	r26, r16
    7906:	ed 90       	ld	r14, X+
    7908:	fd 90       	ld	r15, X+
    790a:	0d 91       	ld	r16, X+
    790c:	1c 91       	ld	r17, X
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
		}
		/* Put numeral string */
		if (c == 'd') {
    790e:	e4 36       	cpi	r30, 0x64	; 100
    7910:	09 f5       	brne	.+66     	; 0x7954 <f_printf+0x182>
    7912:	13 c0       	rjmp	.+38     	; 0x793a <f_printf+0x168>
    7914:	c8 01       	movw	r24, r16
    7916:	02 96       	adiw	r24, 0x02	; 2
    7918:	d8 01       	movw	r26, r16
    791a:	6d 91       	ld	r22, X+
    791c:	7c 91       	ld	r23, X
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
			val = (ULONG)va_arg(arp, long);
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
    791e:	e4 36       	cpi	r30, 0x64	; 100
    7920:	39 f4       	brne	.+14     	; 0x7930 <f_printf+0x15e>
    7922:	4c 01       	movw	r8, r24
    7924:	7b 01       	movw	r14, r22
    7926:	00 27       	eor	r16, r16
    7928:	f7 fc       	sbrc	r15, 7
    792a:	00 95       	com	r16
    792c:	10 2f       	mov	r17, r16
    792e:	05 c0       	rjmp	.+10     	; 0x793a <f_printf+0x168>
    7930:	4c 01       	movw	r8, r24
    7932:	7b 01       	movw	r14, r22
    7934:	00 e0       	ldi	r16, 0x00	; 0
    7936:	10 e0       	ldi	r17, 0x00	; 0
    7938:	0d c0       	rjmp	.+26     	; 0x7954 <f_printf+0x182>
		}
		/* Put numeral string */
		if (c == 'd') {
			if (val & 0x80000000) {
    793a:	17 ff       	sbrs	r17, 7
    793c:	0b c0       	rjmp	.+22     	; 0x7954 <f_printf+0x182>
				val = 0 - val;
    793e:	10 95       	com	r17
    7940:	00 95       	com	r16
    7942:	f0 94       	com	r15
    7944:	e0 94       	com	r14
    7946:	e1 1c       	adc	r14, r1
    7948:	f1 1c       	adc	r15, r1
    794a:	01 1d       	adc	r16, r1
    794c:	11 1d       	adc	r17, r1
				f |= 4;
    794e:	bb 89       	ldd	r27, Y+19	; 0x13
    7950:	b4 60       	ori	r27, 0x04	; 4
    7952:	bb 8b       	std	Y+19, r27	; 0x13
			}
		}
		i = sizeof(s) - 1; s[i] = 0;
    7954:	18 8a       	std	Y+16, r1	; 0x10
    7956:	8f e0       	ldi	r24, 0x0F	; 15
    7958:	c8 2e       	mov	r12, r24
    795a:	d1 2c       	mov	r13, r1
		do {
			c = (UCHAR)(val % r + '0');
    795c:	22 2e       	mov	r2, r18
    795e:	33 24       	eor	r3, r3
    7960:	44 24       	eor	r4, r4
    7962:	55 24       	eor	r5, r5
    7964:	c8 01       	movw	r24, r16
    7966:	b7 01       	movw	r22, r14
    7968:	a2 01       	movw	r20, r4
    796a:	91 01       	movw	r18, r2
    796c:	0e 94 87 43 	call	0x870e	; 0x870e <__udivmodsi4>
    7970:	86 2f       	mov	r24, r22
    7972:	80 5d       	subi	r24, 0xD0	; 208
			if (c > '9') c += 7;
    7974:	8a 33       	cpi	r24, 0x3A	; 58
    7976:	08 f0       	brcs	.+2      	; 0x797a <f_printf+0x1a8>
    7978:	89 5f       	subi	r24, 0xF9	; 249
			s[--i] = c;
    797a:	08 94       	sec
    797c:	c1 08       	sbc	r12, r1
    797e:	d1 08       	sbc	r13, r1
    7980:	e1 e0       	ldi	r30, 0x01	; 1
    7982:	f0 e0       	ldi	r31, 0x00	; 0
    7984:	ec 0f       	add	r30, r28
    7986:	fd 1f       	adc	r31, r29
    7988:	ec 0d       	add	r30, r12
    798a:	fd 1d       	adc	r31, r13
    798c:	80 83       	st	Z, r24
			val /= r;
		} while (i && val);
    798e:	c1 14       	cp	r12, r1
    7990:	d1 04       	cpc	r13, r1
    7992:	e9 f0       	breq	.+58     	; 0x79ce <f_printf+0x1fc>
		i = sizeof(s) - 1; s[i] = 0;
		do {
			c = (UCHAR)(val % r + '0');
			if (c > '9') c += 7;
			s[--i] = c;
			val /= r;
    7994:	c8 01       	movw	r24, r16
    7996:	b7 01       	movw	r22, r14
    7998:	a2 01       	movw	r20, r4
    799a:	91 01       	movw	r18, r2
    799c:	0e 94 87 43 	call	0x870e	; 0x870e <__udivmodsi4>
    79a0:	c9 01       	movw	r24, r18
    79a2:	da 01       	movw	r26, r20
    79a4:	7c 01       	movw	r14, r24
    79a6:	8d 01       	movw	r16, r26
		} while (i && val);
    79a8:	e1 14       	cp	r14, r1
    79aa:	f1 04       	cpc	r15, r1
    79ac:	01 05       	cpc	r16, r1
    79ae:	11 05       	cpc	r17, r1
    79b0:	c9 f6       	brne	.-78     	; 0x7964 <f_printf+0x192>
		if (i && (f & 4)) s[--i] = '-';
    79b2:	eb 89       	ldd	r30, Y+19	; 0x13
    79b4:	e2 ff       	sbrs	r30, 2
    79b6:	0b c0       	rjmp	.+22     	; 0x79ce <f_printf+0x1fc>
    79b8:	08 94       	sec
    79ba:	c1 08       	sbc	r12, r1
    79bc:	d1 08       	sbc	r13, r1
    79be:	e1 e0       	ldi	r30, 0x01	; 1
    79c0:	f0 e0       	ldi	r31, 0x00	; 0
    79c2:	ec 0f       	add	r30, r28
    79c4:	fd 1f       	adc	r31, r29
    79c6:	ec 0d       	add	r30, r12
    79c8:	fd 1d       	adc	r31, r13
    79ca:	4d e2       	ldi	r20, 0x2D	; 45
    79cc:	40 83       	st	Z, r20
		w = sizeof(s) - 1 - w;
    79ce:	8f e0       	ldi	r24, 0x0F	; 15
    79d0:	90 e0       	ldi	r25, 0x00	; 0
    79d2:	8a 19       	sub	r24, r10
    79d4:	9b 09       	sbc	r25, r11
    79d6:	08 94       	sec
    79d8:	c1 08       	sbc	r12, r1
    79da:	d1 08       	sbc	r13, r1
    79dc:	e1 e0       	ldi	r30, 0x01	; 1
    79de:	f0 e0       	ldi	r31, 0x00	; 0
    79e0:	ec 0f       	add	r30, r28
    79e2:	fd 1f       	adc	r31, r29
    79e4:	ec 0d       	add	r30, r12
    79e6:	fd 1d       	adc	r31, r13
    79e8:	08 94       	sec
    79ea:	c1 1c       	adc	r12, r1
    79ec:	d1 1c       	adc	r13, r1
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
    79ee:	ab 89       	ldd	r26, Y+19	; 0x13
    79f0:	2a 2f       	mov	r18, r26
    79f2:	30 e0       	ldi	r19, 0x00	; 0
    79f4:	21 70       	andi	r18, 0x01	; 1
    79f6:	30 70       	andi	r19, 0x00	; 0
    79f8:	0b c0       	rjmp	.+22     	; 0x7a10 <f_printf+0x23e>
    79fa:	08 94       	sec
    79fc:	c1 08       	sbc	r12, r1
    79fe:	d1 08       	sbc	r13, r1
    7a00:	21 15       	cp	r18, r1
    7a02:	31 05       	cpc	r19, r1
    7a04:	11 f4       	brne	.+4      	; 0x7a0a <f_printf+0x238>
    7a06:	40 e2       	ldi	r20, 0x20	; 32
    7a08:	01 c0       	rjmp	.+2      	; 0x7a0c <f_printf+0x23a>
    7a0a:	40 e3       	ldi	r20, 0x30	; 48
    7a0c:	40 83       	st	Z, r20
    7a0e:	31 97       	sbiw	r30, 0x01	; 1
    7a10:	c1 14       	cp	r12, r1
    7a12:	d1 04       	cpc	r13, r1
    7a14:	19 f0       	breq	.+6      	; 0x7a1c <f_printf+0x24a>
    7a16:	8c 15       	cp	r24, r12
    7a18:	9d 05       	cpc	r25, r13
    7a1a:	7c f3       	brlt	.-34     	; 0x79fa <f_printf+0x228>
		cc = f_puts(&s[i], fil);
    7a1c:	81 e0       	ldi	r24, 0x01	; 1
    7a1e:	90 e0       	ldi	r25, 0x00	; 0
    7a20:	8c 0f       	add	r24, r28
    7a22:	9d 1f       	adc	r25, r29
    7a24:	8c 0d       	add	r24, r12
    7a26:	9d 1d       	adc	r25, r13
    7a28:	69 a5       	ldd	r22, Y+41	; 0x29
    7a2a:	7a a5       	ldd	r23, Y+42	; 0x2a
    7a2c:	0e 94 a0 24 	call	0x4940	; 0x4940 <f_puts>
    7a30:	9c 01       	movw	r18, r24
	int i, w, res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    7a32:	e9 89       	ldd	r30, Y+17	; 0x11
    7a34:	fa 89       	ldd	r31, Y+18	; 0x12
    7a36:	e2 0f       	add	r30, r18
    7a38:	f3 1f       	adc	r31, r19
    7a3a:	e9 8b       	std	Y+17, r30	; 0x11
    7a3c:	fa 8b       	std	Y+18, r31	; 0x12
    7a3e:	ff ef       	ldi	r31, 0xFF	; 255
    7a40:	2f 3f       	cpi	r18, 0xFF	; 255
    7a42:	3f 07       	cpc	r19, r31
    7a44:	41 f0       	breq	.+16     	; 0x7a56 <f_printf+0x284>
    7a46:	84 01       	movw	r16, r8
    7a48:	e4 ce       	rjmp	.-568    	; 0x7812 <f_printf+0x40>
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
		cc = f_puts(&s[i], fil);
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    7a4a:	4f ef       	ldi	r20, 0xFF	; 255
    7a4c:	2f 3f       	cpi	r18, 0xFF	; 255
    7a4e:	34 07       	cpc	r19, r20
    7a50:	11 f0       	breq	.+4      	; 0x7a56 <f_printf+0x284>
    7a52:	29 89       	ldd	r18, Y+17	; 0x11
    7a54:	3a 89       	ldd	r19, Y+18	; 0x12
}
    7a56:	c9 01       	movw	r24, r18
    7a58:	63 96       	adiw	r28, 0x13	; 19
    7a5a:	cd bf       	out	0x3d, r28	; 61
    7a5c:	de bf       	out	0x3e, r29	; 62
    7a5e:	cf 91       	pop	r28
    7a60:	df 91       	pop	r29
    7a62:	1f 91       	pop	r17
    7a64:	0f 91       	pop	r16
    7a66:	ff 90       	pop	r15
    7a68:	ef 90       	pop	r14
    7a6a:	df 90       	pop	r13
    7a6c:	cf 90       	pop	r12
    7a6e:	bf 90       	pop	r11
    7a70:	af 90       	pop	r10
    7a72:	9f 90       	pop	r9
    7a74:	8f 90       	pop	r8
    7a76:	7f 90       	pop	r7
    7a78:	6f 90       	pop	r6
    7a7a:	5f 90       	pop	r5
    7a7c:	4f 90       	pop	r4
    7a7e:	3f 90       	pop	r3
    7a80:	2f 90       	pop	r2
    7a82:	08 95       	ret

00007a84 <__vector_88>:
		Rs232_SendByte(13);
		Rs232_SendByte(10);
	}
}

ISR(USARTD0_RXC_vect){
    7a84:	1f 92       	push	r1
    7a86:	0f 92       	push	r0
    7a88:	0f b6       	in	r0, 0x3f	; 63
    7a8a:	0f 92       	push	r0
    7a8c:	0b b6       	in	r0, 0x3b	; 59
    7a8e:	0f 92       	push	r0
    7a90:	11 24       	eor	r1, r1
    7a92:	1f 93       	push	r17
    7a94:	2f 93       	push	r18
    7a96:	3f 93       	push	r19
    7a98:	4f 93       	push	r20
    7a9a:	5f 93       	push	r21
    7a9c:	6f 93       	push	r22
    7a9e:	7f 93       	push	r23
    7aa0:	8f 93       	push	r24
    7aa2:	9f 93       	push	r25
    7aa4:	af 93       	push	r26
    7aa6:	bf 93       	push	r27
    7aa8:	ef 93       	push	r30
    7aaa:	ff 93       	push	r31
	Rs232Buffer[Rs232_writeLocation] = Rs232_Usart.DATA;
    7aac:	e0 91 f7 29 	lds	r30, 0x29F7
    7ab0:	f0 91 f8 29 	lds	r31, 0x29F8
    7ab4:	80 91 a0 09 	lds	r24, 0x09A0
    7ab8:	e3 59       	subi	r30, 0x93	; 147
    7aba:	fb 4b       	sbci	r31, 0xBB	; 187
    7abc:	80 83       	st	Z, r24

	if(rs232Recording){
    7abe:	80 91 fa 29 	lds	r24, 0x29FA
    7ac2:	88 23       	and	r24, r24
    7ac4:	09 f4       	brne	.+2      	; 0x7ac8 <__vector_88+0x44>
    7ac6:	4c c0       	rjmp	.+152    	; 0x7b60 <__vector_88+0xdc>
		if(Rs232Buffer[Rs232_writeLocation] == 0x0A){
    7ac8:	e0 91 f7 29 	lds	r30, 0x29F7
    7acc:	f0 91 f8 29 	lds	r31, 0x29F8
    7ad0:	e3 59       	subi	r30, 0x93	; 147
    7ad2:	fb 4b       	sbci	r31, 0xBB	; 187
    7ad4:	80 81       	ld	r24, Z
    7ad6:	8a 30       	cpi	r24, 0x0A	; 10
    7ad8:	09 f0       	breq	.+2      	; 0x7adc <__vector_88+0x58>
    7ada:	42 c0       	rjmp	.+132    	; 0x7b60 <__vector_88+0xdc>
    7adc:	10 e0       	ldi	r17, 0x00	; 0
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
    7ade:	20 91 f7 29 	lds	r18, 0x29F7
    7ae2:	30 91 f8 29 	lds	r19, 0x29F8
    7ae6:	80 91 f5 29 	lds	r24, 0x29F5
    7aea:	90 91 f6 29 	lds	r25, 0x29F6
    7aee:	28 17       	cp	r18, r24
    7af0:	39 07       	cpc	r19, r25
    7af2:	09 f0       	breq	.+2      	; 0x7af6 <__vector_88+0x72>
    7af4:	4a c0       	rjmp	.+148    	; 0x7b8a <__vector_88+0x106>
			uint8_t counter = 0;
			while(Rs232_CharReadyToRead()){
				airQualityString[counter] = Rs232_GetByte(false);
				counter++;
			}
			if(strstr(airQualityString,"Dylos") == NULL){
    7af6:	8a e5       	ldi	r24, 0x5A	; 90
    7af8:	9a e3       	ldi	r25, 0x3A	; 58
    7afa:	62 eb       	ldi	r22, 0xB2	; 178
    7afc:	73 e2       	ldi	r23, 0x23	; 35
    7afe:	0e 94 f4 43 	call	0x87e8	; 0x87e8 <strstr>
    7b02:	00 97       	sbiw	r24, 0x00	; 0
    7b04:	69 f5       	brne	.+90     	; 0x7b60 <__vector_88+0xdc>
				airSampleTime = Time_Get32BitTimer();
    7b06:	0e 94 ce 29 	call	0x539c	; 0x539c <Time_Get32BitTimer>
    7b0a:	60 93 dc 29 	sts	0x29DC, r22
    7b0e:	70 93 dd 29 	sts	0x29DD, r23
    7b12:	80 93 de 29 	sts	0x29DE, r24
    7b16:	90 93 df 29 	sts	0x29DF, r25
				smallCount = atol(strtok(airQualityString,","));
    7b1a:	8a e5       	ldi	r24, 0x5A	; 90
    7b1c:	9a e3       	ldi	r25, 0x3A	; 58
    7b1e:	68 eb       	ldi	r22, 0xB8	; 184
    7b20:	73 e2       	ldi	r23, 0x23	; 35
    7b22:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <strtok>
    7b26:	0e 94 bd 43 	call	0x877a	; 0x877a <atol>
    7b2a:	60 93 f9 2c 	sts	0x2CF9, r22
    7b2e:	70 93 fa 2c 	sts	0x2CFA, r23
    7b32:	80 93 fb 2c 	sts	0x2CFB, r24
    7b36:	90 93 fc 2c 	sts	0x2CFC, r25
				largeCount = atol(strtok(NULL,","));
    7b3a:	80 e0       	ldi	r24, 0x00	; 0
    7b3c:	90 e0       	ldi	r25, 0x00	; 0
    7b3e:	68 eb       	ldi	r22, 0xB8	; 184
    7b40:	73 e2       	ldi	r23, 0x23	; 35
    7b42:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <strtok>
    7b46:	0e 94 bd 43 	call	0x877a	; 0x877a <atol>
    7b4a:	60 93 0d 49 	sts	0x490D, r22
    7b4e:	70 93 0e 49 	sts	0x490E, r23
    7b52:	80 93 0f 49 	sts	0x490F, r24
    7b56:	90 93 10 49 	sts	0x4910, r25
				okToSendAirQuality = true;
    7b5a:	81 e0       	ldi	r24, 0x01	; 1
    7b5c:	80 93 f9 29 	sts	0x29F9, r24
			}

		}
	}
	Rs232_writeLocation++;
    7b60:	80 91 f7 29 	lds	r24, 0x29F7
    7b64:	90 91 f8 29 	lds	r25, 0x29F8
    7b68:	01 96       	adiw	r24, 0x01	; 1
    7b6a:	80 93 f7 29 	sts	0x29F7, r24
    7b6e:	90 93 f8 29 	sts	0x29F8, r25
	if(Rs232_writeLocation >= Rs232_BufferSize){
    7b72:	80 91 f7 29 	lds	r24, 0x29F7
    7b76:	90 91 f8 29 	lds	r25, 0x29F8
    7b7a:	80 50       	subi	r24, 0x00	; 0
    7b7c:	94 40       	sbci	r25, 0x04	; 4
    7b7e:	78 f0       	brcs	.+30     	; 0x7b9e <__vector_88+0x11a>
		Rs232_writeLocation = 0;
    7b80:	10 92 f7 29 	sts	0x29F7, r1
    7b84:	10 92 f8 29 	sts	0x29F8, r1
    7b88:	0a c0       	rjmp	.+20     	; 0x7b9e <__vector_88+0x11a>

	if(rs232Recording){
		if(Rs232Buffer[Rs232_writeLocation] == 0x0A){
			uint8_t counter = 0;
			while(Rs232_CharReadyToRead()){
				airQualityString[counter] = Rs232_GetByte(false);
    7b8a:	80 e0       	ldi	r24, 0x00	; 0
    7b8c:	0e 94 c2 02 	call	0x584	; 0x584 <Rs232_GetByte>
    7b90:	e1 2f       	mov	r30, r17
    7b92:	f0 e0       	ldi	r31, 0x00	; 0
    7b94:	e6 5a       	subi	r30, 0xA6	; 166
    7b96:	f5 4c       	sbci	r31, 0xC5	; 197
    7b98:	80 83       	st	Z, r24
				counter++;
    7b9a:	1f 5f       	subi	r17, 0xFF	; 255
    7b9c:	a0 cf       	rjmp	.-192    	; 0x7ade <__vector_88+0x5a>
	}
	Rs232_writeLocation++;
	if(Rs232_writeLocation >= Rs232_BufferSize){
		Rs232_writeLocation = 0;
	}
}
    7b9e:	ff 91       	pop	r31
    7ba0:	ef 91       	pop	r30
    7ba2:	bf 91       	pop	r27
    7ba4:	af 91       	pop	r26
    7ba6:	9f 91       	pop	r25
    7ba8:	8f 91       	pop	r24
    7baa:	7f 91       	pop	r23
    7bac:	6f 91       	pop	r22
    7bae:	5f 91       	pop	r21
    7bb0:	4f 91       	pop	r20
    7bb2:	3f 91       	pop	r19
    7bb4:	2f 91       	pop	r18
    7bb6:	1f 91       	pop	r17
    7bb8:	0f 90       	pop	r0
    7bba:	0b be       	out	0x3b, r0	; 59
    7bbc:	0f 90       	pop	r0
    7bbe:	0f be       	out	0x3f, r0	; 63
    7bc0:	0f 90       	pop	r0
    7bc2:	1f 90       	pop	r1
    7bc4:	18 95       	reti

00007bc6 <Wifi_GetTime>:
		_delay_ms(1);
	}
	return false;
}

bool Wifi_GetTime(uint16_t timeOut){
    7bc6:	ef 92       	push	r14
    7bc8:	ff 92       	push	r15
    7bca:	0f 93       	push	r16
    7bcc:	1f 93       	push	r17
    7bce:	cf 93       	push	r28
    7bd0:	df 93       	push	r29
	uint8_t tmp=0;
	uint32_t tmp32 = 0;
	
	Wifi_ClearBuffer();
    7bd2:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Wifi_ClearBuffer>
	Wifi_SendCommand("show t t","Time=","Time=",500);
    7bd6:	8a eb       	ldi	r24, 0xBA	; 186
    7bd8:	93 e2       	ldi	r25, 0x23	; 35
    7bda:	63 ec       	ldi	r22, 0xC3	; 195
    7bdc:	73 e2       	ldi	r23, 0x23	; 35
    7bde:	ab 01       	movw	r20, r22
    7be0:	24 ef       	ldi	r18, 0xF4	; 244
    7be2:	31 e0       	ldi	r19, 0x01	; 1
    7be4:	0e 94 66 3a 	call	0x74cc	; 0x74cc <Wifi_SendCommand>
    7be8:	80 e0       	ldi	r24, 0x00	; 0
    7bea:	90 e9       	ldi	r25, 0x90	; 144
    7bec:	01 97       	sbiw	r24, 0x01	; 1
    7bee:	f1 f7       	brne	.-4      	; 0x7bec <Wifi_GetTime+0x26>
    7bf0:	ca ef       	ldi	r28, 0xFA	; 250
    7bf2:	d5 e3       	ldi	r29, 0x35	; 53
    7bf4:	10 e0       	ldi	r17, 0x00	; 0
    7bf6:	07 c0       	rjmp	.+14     	; 0x7c06 <Wifi_GetTime+0x40>
	_delay_ms(10);
	
	while(Wifi_CharReadyToRead()){
		if(tmp < 50){
    7bf8:	12 33       	cpi	r17, 0x32	; 50
    7bfa:	49 f0       	breq	.+18     	; 0x7c0e <Wifi_GetTime+0x48>
			string[tmp] = Wifi_GetByte(false);
    7bfc:	80 e0       	ldi	r24, 0x00	; 0
    7bfe:	0e 94 25 02 	call	0x44a	; 0x44a <Wifi_GetByte>
    7c02:	89 93       	st	Y+, r24
			tmp++;
    7c04:	1f 5f       	subi	r17, 0xFF	; 255
	
	Wifi_ClearBuffer();
	Wifi_SendCommand("show t t","Time=","Time=",500);
	_delay_ms(10);
	
	while(Wifi_CharReadyToRead()){
    7c06:	0e 94 cd 01 	call	0x39a	; 0x39a <Wifi_CharReadyToRead>
    7c0a:	88 23       	and	r24, r24
    7c0c:	a9 f7       	brne	.-22     	; 0x7bf8 <Wifi_GetTime+0x32>
	return tmp;
}


void Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
    7c0e:	80 91 a1 08 	lds	r24, 0x08A1
    7c12:	85 ff       	sbrs	r24, 5
    7c14:	fc cf       	rjmp	.-8      	; 0x7c0e <Wifi_GetTime+0x48>
	Debug_Usart.DATA = data;	
    7c16:	8d e0       	ldi	r24, 0x0D	; 13
    7c18:	80 93 a0 08 	sts	0x08A0, r24
		}
	}

	Debug_SendByte(13);
	
	if(tmp < 4){
    7c1c:	14 30       	cpi	r17, 0x04	; 4
    7c1e:	08 f4       	brcc	.+2      	; 0x7c22 <Wifi_GetTime+0x5c>
    7c20:	73 c0       	rjmp	.+230    	; 0x7d08 <Wifi_GetTime+0x142>
		return false;
	}
	
	if(string[0] == 'N'){
    7c22:	80 91 fa 35 	lds	r24, 0x35FA
    7c26:	8e 34       	cpi	r24, 0x4E	; 78
    7c28:	09 f4       	brne	.+2      	; 0x7c2c <Wifi_GetTime+0x66>
    7c2a:	6e c0       	rjmp	.+220    	; 0x7d08 <Wifi_GetTime+0x142>
		return false;
	}

	strtok(string,"=");
    7c2c:	8a ef       	ldi	r24, 0xFA	; 250
    7c2e:	95 e3       	ldi	r25, 0x35	; 53
    7c30:	6e e0       	ldi	r22, 0x0E	; 14
    7c32:	71 e2       	ldi	r23, 0x21	; 33
    7c34:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <strtok>
	strtok(NULL,"=");
    7c38:	80 e0       	ldi	r24, 0x00	; 0
    7c3a:	90 e0       	ldi	r25, 0x00	; 0
    7c3c:	6e e0       	ldi	r22, 0x0E	; 14
    7c3e:	71 e2       	ldi	r23, 0x21	; 33
    7c40:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <strtok>
	strcat(timeString,strtok(NULL," "));
    7c44:	80 e0       	ldi	r24, 0x00	; 0
    7c46:	90 e0       	ldi	r25, 0x00	; 0
    7c48:	69 ec       	ldi	r22, 0xC9	; 201
    7c4a:	73 e2       	ldi	r23, 0x23	; 35
    7c4c:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <strtok>
    7c50:	bc 01       	movw	r22, r24
    7c52:	81 ea       	ldi	r24, 0xA1	; 161
    7c54:	9a e3       	ldi	r25, 0x3A	; 58
    7c56:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <strcat>
    7c5a:	20 e0       	ldi	r18, 0x00	; 0
    7c5c:	30 e0       	ldi	r19, 0x00	; 0
		
	for(uint8_t i = 0; i < 8; i++){
		timeUpper[i] = timeString[i];
    7c5e:	f9 01       	movw	r30, r18
    7c60:	e4 53       	subi	r30, 0x34	; 52
    7c62:	f5 4c       	sbci	r31, 0xC5	; 197
    7c64:	d9 01       	movw	r26, r18
    7c66:	af 55       	subi	r26, 0x5F	; 95
    7c68:	b5 4c       	sbci	r27, 0xC5	; 197
    7c6a:	8c 91       	ld	r24, X
    7c6c:	80 83       	st	Z, r24
    7c6e:	2f 5f       	subi	r18, 0xFF	; 255
    7c70:	3f 4f       	sbci	r19, 0xFF	; 255

	strtok(string,"=");
	strtok(NULL,"=");
	strcat(timeString,strtok(NULL," "));
		
	for(uint8_t i = 0; i < 8; i++){
    7c72:	28 30       	cpi	r18, 0x08	; 8
    7c74:	31 05       	cpc	r19, r1
    7c76:	99 f7       	brne	.-26     	; 0x7c5e <Wifi_GetTime+0x98>
    7c78:	a9 ea       	ldi	r26, 0xA9	; 169
    7c7a:	ba e3       	ldi	r27, 0x3A	; 58
    7c7c:	20 e0       	ldi	r18, 0x00	; 0
    7c7e:	30 e0       	ldi	r19, 0x00	; 0
		timeUpper[i] = timeString[i];
	}
	
	tmp = 8;
	for(uint8_t i = 0; i < 5; i++){
		timeLower[i] = timeString[tmp];
    7c80:	8d 91       	ld	r24, X+
    7c82:	f9 01       	movw	r30, r18
    7c84:	e0 55       	subi	r30, 0x50	; 80
    7c86:	f5 4c       	sbci	r31, 0xC5	; 197
    7c88:	80 83       	st	Z, r24
    7c8a:	2f 5f       	subi	r18, 0xFF	; 255
    7c8c:	3f 4f       	sbci	r19, 0xFF	; 255
	for(uint8_t i = 0; i < 8; i++){
		timeUpper[i] = timeString[i];
	}
	
	tmp = 8;
	for(uint8_t i = 0; i < 5; i++){
    7c8e:	25 30       	cpi	r18, 0x05	; 5
    7c90:	31 05       	cpc	r19, r1
    7c92:	b1 f7       	brne	.-20     	; 0x7c80 <Wifi_GetTime+0xba>
		timeLower[i] = timeString[tmp];
		tmp++;
	}

	tmp32 = atol(timeUpper);
    7c94:	8c ec       	ldi	r24, 0xCC	; 204
    7c96:	9a e3       	ldi	r25, 0x3A	; 58
    7c98:	0e 94 bd 43 	call	0x877a	; 0x877a <atol>
    7c9c:	9b 01       	movw	r18, r22
    7c9e:	ac 01       	movw	r20, r24
	tmp32 -= 22089888;
    7ca0:	20 5a       	subi	r18, 0xA0	; 160
    7ca2:	30 41       	sbci	r19, 0x10	; 16
    7ca4:	41 45       	sbci	r20, 0x51	; 81
    7ca6:	51 40       	sbci	r21, 0x01	; 1
	tmp32 *= 100;
    7ca8:	ca 01       	movw	r24, r20
    7caa:	b9 01       	movw	r22, r18
    7cac:	24 e6       	ldi	r18, 0x64	; 100
    7cae:	30 e0       	ldi	r19, 0x00	; 0
    7cb0:	40 e0       	ldi	r20, 0x00	; 0
    7cb2:	50 e0       	ldi	r21, 0x00	; 0
    7cb4:	0e 94 49 43 	call	0x8692	; 0x8692 <__mulsi3>
	tmp32 += ((timeLower[0]-'0')* 10);
    7cb8:	e0 91 b0 3a 	lds	r30, 0x3AB0
	tmp32 += ((timeLower[1]-'0'));
    7cbc:	20 91 b1 3a 	lds	r18, 0x3AB1
	}

	tmp32 = atol(timeUpper);
	tmp32 -= 22089888;
	tmp32 *= 100;
	tmp32 += ((timeLower[0]-'0')* 10);
    7cc0:	30 e0       	ldi	r19, 0x00	; 0
    7cc2:	20 53       	subi	r18, 0x30	; 48
    7cc4:	30 40       	sbci	r19, 0x00	; 0
    7cc6:	44 27       	eor	r20, r20
    7cc8:	37 fd       	sbrc	r19, 7
    7cca:	40 95       	com	r20
    7ccc:	54 2f       	mov	r21, r20
    7cce:	26 0f       	add	r18, r22
    7cd0:	37 1f       	adc	r19, r23
    7cd2:	48 1f       	adc	r20, r24
    7cd4:	59 1f       	adc	r21, r25
	tmp32 += ((timeLower[1]-'0'));
    7cd6:	8a e0       	ldi	r24, 0x0A	; 10
    7cd8:	e8 9f       	mul	r30, r24
    7cda:	c0 01       	movw	r24, r0
    7cdc:	11 24       	eor	r1, r1
    7cde:	80 5e       	subi	r24, 0xE0	; 224
    7ce0:	91 40       	sbci	r25, 0x01	; 1
    7ce2:	7c 01       	movw	r14, r24
    7ce4:	00 27       	eor	r16, r16
    7ce6:	f7 fc       	sbrc	r15, 7
    7ce8:	00 95       	com	r16
    7cea:	10 2f       	mov	r17, r16
    7cec:	2e 0d       	add	r18, r14
    7cee:	3f 1d       	adc	r19, r15
    7cf0:	40 1f       	adc	r20, r16
    7cf2:	51 1f       	adc	r21, r17
	
	time_secs = tmp32;
    7cf4:	20 93 ec 29 	sts	0x29EC, r18
    7cf8:	30 93 ed 29 	sts	0x29ED, r19
    7cfc:	40 93 ee 29 	sts	0x29EE, r20
    7d00:	50 93 ef 29 	sts	0x29EF, r21
    7d04:	81 e0       	ldi	r24, 0x01	; 1
    7d06:	01 c0       	rjmp	.+2      	; 0x7d0a <Wifi_GetTime+0x144>
	return true;
    7d08:	80 e0       	ldi	r24, 0x00	; 0
}
    7d0a:	df 91       	pop	r29
    7d0c:	cf 91       	pop	r28
    7d0e:	1f 91       	pop	r17
    7d10:	0f 91       	pop	r16
    7d12:	ff 90       	pop	r15
    7d14:	ef 90       	pop	r14
    7d16:	08 95       	ret

00007d18 <Config_Wifi>:

void Config_Wifi(void){
    7d18:	1f 93       	push	r17
	uint8_t col = 0;
	
	Wifi_ClearBuffer();
    7d1a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Wifi_ClearBuffer>



	Wifi_EnterCMDMode(1000);
    7d1e:	88 ee       	ldi	r24, 0xE8	; 232
    7d20:	93 e0       	ldi	r25, 0x03	; 3
    7d22:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <Wifi_EnterCMDMode>
    7d26:	80 e1       	ldi	r24, 0x10	; 16
    7d28:	97 e2       	ldi	r25, 0x27	; 39
    7d2a:	20 e7       	ldi	r18, 0x70	; 112
    7d2c:	31 e0       	ldi	r19, 0x01	; 1
    7d2e:	f9 01       	movw	r30, r18
    7d30:	31 97       	sbiw	r30, 0x01	; 1
    7d32:	f1 f7       	brne	.-4      	; 0x7d30 <Config_Wifi+0x18>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7d34:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7d36:	d9 f7       	brne	.-10     	; 0x7d2e <Config_Wifi+0x16>
	_delay_ms(1000);
	display_clearBuffer();
    7d38:	0e 94 92 26 	call	0x4d24	; 0x4d24 <display_clearBuffer>
	display_writeBufferToScreen();
    7d3c:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
	

	if(Wifi_SendCommand("factory RESET","Set Factory Defaults","Set Factory Defaults",500)){
    7d40:	8b ec       	ldi	r24, 0xCB	; 203
    7d42:	93 e2       	ldi	r25, 0x23	; 35
    7d44:	69 ed       	ldi	r22, 0xD9	; 217
    7d46:	73 e2       	ldi	r23, 0x23	; 35
    7d48:	ab 01       	movw	r20, r22
    7d4a:	24 ef       	ldi	r18, 0xF4	; 244
    7d4c:	31 e0       	ldi	r19, 0x01	; 1
    7d4e:	0e 94 66 3a 	call	0x74cc	; 0x74cc <Wifi_SendCommand>
    7d52:	88 23       	and	r24, r24
    7d54:	19 f0       	breq	.+6      	; 0x7d5c <Config_Wifi+0x44>
		display_putString("reset..........OK",col,0,System5x7);
    7d56:	8e ee       	ldi	r24, 0xEE	; 238
    7d58:	93 e2       	ldi	r25, 0x23	; 35
    7d5a:	02 c0       	rjmp	.+4      	; 0x7d60 <Config_Wifi+0x48>
	} else {
		display_putString("reset........FAIL",col,0,System5x7);
    7d5c:	80 e0       	ldi	r24, 0x00	; 0
    7d5e:	94 e2       	ldi	r25, 0x24	; 36
    7d60:	60 e0       	ldi	r22, 0x00	; 0
    7d62:	40 e0       	ldi	r20, 0x00	; 0
    7d64:	20 ec       	ldi	r18, 0xC0	; 192
    7d66:	37 e2       	ldi	r19, 0x27	; 39
    7d68:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
	}
	display_writeBufferToScreen();
    7d6c:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
    7d70:	80 e1       	ldi	r24, 0x10	; 16
    7d72:	97 e2       	ldi	r25, 0x27	; 39
    7d74:	20 e7       	ldi	r18, 0x70	; 112
    7d76:	31 e0       	ldi	r19, 0x01	; 1
    7d78:	f9 01       	movw	r30, r18
    7d7a:	31 97       	sbiw	r30, 0x01	; 1
    7d7c:	f1 f7       	brne	.-4      	; 0x7d7a <Config_Wifi+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7d7e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7d80:	d9 f7       	brne	.-10     	; 0x7d78 <Config_Wifi+0x60>
	col++;
	
	_delay_ms(1000);
	
	Wifi_ClearBuffer();
    7d82:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Wifi_ClearBuffer>
	Wifi_SendCommand("set comm remote 0","AOK","AOK",500);
    7d86:	82 e1       	ldi	r24, 0x12	; 18
    7d88:	94 e2       	ldi	r25, 0x24	; 36
    7d8a:	64 e2       	ldi	r22, 0x24	; 36
    7d8c:	74 e2       	ldi	r23, 0x24	; 36
    7d8e:	ab 01       	movw	r20, r22
    7d90:	24 ef       	ldi	r18, 0xF4	; 244
    7d92:	31 e0       	ldi	r19, 0x01	; 1
    7d94:	0e 94 66 3a 	call	0x74cc	; 0x74cc <Wifi_SendCommand>
    7d98:	80 e1       	ldi	r24, 0x10	; 16
    7d9a:	97 e2       	ldi	r25, 0x27	; 39
    7d9c:	20 e7       	ldi	r18, 0x70	; 112
    7d9e:	31 e0       	ldi	r19, 0x01	; 1
    7da0:	f9 01       	movw	r30, r18
    7da2:	31 97       	sbiw	r30, 0x01	; 1
    7da4:	f1 f7       	brne	.-4      	; 0x7da2 <Config_Wifi+0x8a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7da6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7da8:	d9 f7       	brne	.-10     	; 0x7da0 <Config_Wifi+0x88>
	_delay_ms(1000);

	Wifi_SendCommand("set comm open 0","AOK","AOK",500);	
    7daa:	88 e2       	ldi	r24, 0x28	; 40
    7dac:	94 e2       	ldi	r25, 0x24	; 36
    7dae:	64 e2       	ldi	r22, 0x24	; 36
    7db0:	74 e2       	ldi	r23, 0x24	; 36
    7db2:	ab 01       	movw	r20, r22
    7db4:	24 ef       	ldi	r18, 0xF4	; 244
    7db6:	31 e0       	ldi	r19, 0x01	; 1
    7db8:	0e 94 66 3a 	call	0x74cc	; 0x74cc <Wifi_SendCommand>
    7dbc:	80 e1       	ldi	r24, 0x10	; 16
    7dbe:	97 e2       	ldi	r25, 0x27	; 39
    7dc0:	20 e7       	ldi	r18, 0x70	; 112
    7dc2:	31 e0       	ldi	r19, 0x01	; 1
    7dc4:	f9 01       	movw	r30, r18
    7dc6:	31 97       	sbiw	r30, 0x01	; 1
    7dc8:	f1 f7       	brne	.-4      	; 0x7dc6 <Config_Wifi+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7dca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7dcc:	d9 f7       	brne	.-10     	; 0x7dc4 <Config_Wifi+0xac>
	_delay_ms(1000);
	
	Wifi_SendCommand("set comm close AOK","AOK","AOK",500);		
    7dce:	88 e3       	ldi	r24, 0x38	; 56
    7dd0:	94 e2       	ldi	r25, 0x24	; 36
    7dd2:	64 e2       	ldi	r22, 0x24	; 36
    7dd4:	74 e2       	ldi	r23, 0x24	; 36
    7dd6:	ab 01       	movw	r20, r22
    7dd8:	24 ef       	ldi	r18, 0xF4	; 244
    7dda:	31 e0       	ldi	r19, 0x01	; 1
    7ddc:	0e 94 66 3a 	call	0x74cc	; 0x74cc <Wifi_SendCommand>
    7de0:	80 e1       	ldi	r24, 0x10	; 16
    7de2:	97 e2       	ldi	r25, 0x27	; 39
    7de4:	20 e7       	ldi	r18, 0x70	; 112
    7de6:	31 e0       	ldi	r19, 0x01	; 1
    7de8:	f9 01       	movw	r30, r18
    7dea:	31 97       	sbiw	r30, 0x01	; 1
    7dec:	f1 f7       	brne	.-4      	; 0x7dea <Config_Wifi+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7dee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7df0:	d9 f7       	brne	.-10     	; 0x7de8 <Config_Wifi+0xd0>
	_delay_ms(1000);
	
	if(Wifi_SendCommand("set time enable 1","AOK","AOK",500)){
    7df2:	8b e4       	ldi	r24, 0x4B	; 75
    7df4:	94 e2       	ldi	r25, 0x24	; 36
    7df6:	64 e2       	ldi	r22, 0x24	; 36
    7df8:	74 e2       	ldi	r23, 0x24	; 36
    7dfa:	ab 01       	movw	r20, r22
    7dfc:	24 ef       	ldi	r18, 0xF4	; 244
    7dfe:	31 e0       	ldi	r19, 0x01	; 1
    7e00:	0e 94 66 3a 	call	0x74cc	; 0x74cc <Wifi_SendCommand>
    7e04:	88 23       	and	r24, r24
    7e06:	19 f0       	breq	.+6      	; 0x7e0e <Config_Wifi+0xf6>
		display_putString("enable time....OK",col,0,System5x7);
    7e08:	8d e5       	ldi	r24, 0x5D	; 93
    7e0a:	94 e2       	ldi	r25, 0x24	; 36
    7e0c:	02 c0       	rjmp	.+4      	; 0x7e12 <Config_Wifi+0xfa>
	} else {
		display_putString("enable time..FAIL",col,0,System5x7);
    7e0e:	8f e6       	ldi	r24, 0x6F	; 111
    7e10:	94 e2       	ldi	r25, 0x24	; 36
    7e12:	61 e0       	ldi	r22, 0x01	; 1
    7e14:	40 e0       	ldi	r20, 0x00	; 0
    7e16:	20 ec       	ldi	r18, 0xC0	; 192
    7e18:	37 e2       	ldi	r19, 0x27	; 39
    7e1a:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
	}
	display_writeBufferToScreen();
    7e1e:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
    7e22:	80 e1       	ldi	r24, 0x10	; 16
    7e24:	97 e2       	ldi	r25, 0x27	; 39
    7e26:	20 e7       	ldi	r18, 0x70	; 112
    7e28:	31 e0       	ldi	r19, 0x01	; 1
    7e2a:	f9 01       	movw	r30, r18
    7e2c:	31 97       	sbiw	r30, 0x01	; 1
    7e2e:	f1 f7       	brne	.-4      	; 0x7e2c <Config_Wifi+0x114>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7e30:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7e32:	d9 f7       	brne	.-10     	; 0x7e2a <Config_Wifi+0x112>
	_delay_ms(1000);
	col++;
	
	if(authRead){
    7e34:	80 91 16 2a 	lds	r24, 0x2A16
    7e38:	88 23       	and	r24, r24
    7e3a:	11 f4       	brne	.+4      	; 0x7e40 <Config_Wifi+0x128>
    7e3c:	12 e0       	ldi	r17, 0x02	; 2
    7e3e:	22 c0       	rjmp	.+68     	; 0x7e84 <Config_Wifi+0x16c>
		if(Wifi_SendCommand(auth,"AOK","AOK",500)){
    7e40:	88 ef       	ldi	r24, 0xF8	; 248
    7e42:	96 e2       	ldi	r25, 0x26	; 38
    7e44:	64 e2       	ldi	r22, 0x24	; 36
    7e46:	74 e2       	ldi	r23, 0x24	; 36
    7e48:	ab 01       	movw	r20, r22
    7e4a:	24 ef       	ldi	r18, 0xF4	; 244
    7e4c:	31 e0       	ldi	r19, 0x01	; 1
    7e4e:	0e 94 66 3a 	call	0x74cc	; 0x74cc <Wifi_SendCommand>
    7e52:	88 23       	and	r24, r24
    7e54:	19 f0       	breq	.+6      	; 0x7e5c <Config_Wifi+0x144>
			display_putString("encryption.....OK",col,0,System5x7);
    7e56:	81 e8       	ldi	r24, 0x81	; 129
    7e58:	94 e2       	ldi	r25, 0x24	; 36
    7e5a:	02 c0       	rjmp	.+4      	; 0x7e60 <Config_Wifi+0x148>
		} else {
			display_putString("encryption...FAIL",col,0,System5x7);
    7e5c:	83 e9       	ldi	r24, 0x93	; 147
    7e5e:	94 e2       	ldi	r25, 0x24	; 36
    7e60:	62 e0       	ldi	r22, 0x02	; 2
    7e62:	40 e0       	ldi	r20, 0x00	; 0
    7e64:	20 ec       	ldi	r18, 0xC0	; 192
    7e66:	37 e2       	ldi	r19, 0x27	; 39
    7e68:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
		}
		display_writeBufferToScreen();
    7e6c:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
    7e70:	80 e1       	ldi	r24, 0x10	; 16
    7e72:	97 e2       	ldi	r25, 0x27	; 39
    7e74:	20 e7       	ldi	r18, 0x70	; 112
    7e76:	31 e0       	ldi	r19, 0x01	; 1
    7e78:	f9 01       	movw	r30, r18
    7e7a:	31 97       	sbiw	r30, 0x01	; 1
    7e7c:	f1 f7       	brne	.-4      	; 0x7e7a <Config_Wifi+0x162>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7e7e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7e80:	d9 f7       	brne	.-10     	; 0x7e78 <Config_Wifi+0x160>
    7e82:	13 e0       	ldi	r17, 0x03	; 3
		_delay_ms(1000);
		col++;
	}
	
	if(phraseRead){
    7e84:	80 91 17 2a 	lds	r24, 0x2A17
    7e88:	88 23       	and	r24, r24
    7e8a:	11 f1       	breq	.+68     	; 0x7ed0 <Config_Wifi+0x1b8>
		if(Wifi_SendCommand(phrase,"AOK","AOK",500)){
    7e8c:	8a e2       	ldi	r24, 0x2A	; 42
    7e8e:	97 e2       	ldi	r25, 0x27	; 39
    7e90:	64 e2       	ldi	r22, 0x24	; 36
    7e92:	74 e2       	ldi	r23, 0x24	; 36
    7e94:	ab 01       	movw	r20, r22
    7e96:	24 ef       	ldi	r18, 0xF4	; 244
    7e98:	31 e0       	ldi	r19, 0x01	; 1
    7e9a:	0e 94 66 3a 	call	0x74cc	; 0x74cc <Wifi_SendCommand>
    7e9e:	88 23       	and	r24, r24
    7ea0:	19 f0       	breq	.+6      	; 0x7ea8 <Config_Wifi+0x190>
			display_putString("phrase.........OK",col,0,System5x7);
    7ea2:	85 ea       	ldi	r24, 0xA5	; 165
    7ea4:	94 e2       	ldi	r25, 0x24	; 36
    7ea6:	02 c0       	rjmp	.+4      	; 0x7eac <Config_Wifi+0x194>
		} else {
			display_putString("phrase.......FAIL",col,0,System5x7);
    7ea8:	87 eb       	ldi	r24, 0xB7	; 183
    7eaa:	94 e2       	ldi	r25, 0x24	; 36
    7eac:	61 2f       	mov	r22, r17
    7eae:	40 e0       	ldi	r20, 0x00	; 0
    7eb0:	20 ec       	ldi	r18, 0xC0	; 192
    7eb2:	37 e2       	ldi	r19, 0x27	; 39
    7eb4:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
		}
		display_writeBufferToScreen();
    7eb8:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
    7ebc:	80 e1       	ldi	r24, 0x10	; 16
    7ebe:	97 e2       	ldi	r25, 0x27	; 39
    7ec0:	20 e7       	ldi	r18, 0x70	; 112
    7ec2:	31 e0       	ldi	r19, 0x01	; 1
    7ec4:	f9 01       	movw	r30, r18
    7ec6:	31 97       	sbiw	r30, 0x01	; 1
    7ec8:	f1 f7       	brne	.-4      	; 0x7ec6 <Config_Wifi+0x1ae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7eca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7ecc:	d9 f7       	brne	.-10     	; 0x7ec4 <Config_Wifi+0x1ac>
		_delay_ms(1000);
		col++;
    7ece:	1f 5f       	subi	r17, 0xFF	; 255
	}
	
	if(portRead){
    7ed0:	80 91 18 2a 	lds	r24, 0x2A18
    7ed4:	88 23       	and	r24, r24
    7ed6:	11 f1       	breq	.+68     	; 0x7f1c <Config_Wifi+0x204>
		if(Wifi_SendCommand(port,"AOK","AOK",500)){
    7ed8:	8c e5       	ldi	r24, 0x5C	; 92
    7eda:	97 e2       	ldi	r25, 0x27	; 39
    7edc:	64 e2       	ldi	r22, 0x24	; 36
    7ede:	74 e2       	ldi	r23, 0x24	; 36
    7ee0:	ab 01       	movw	r20, r22
    7ee2:	24 ef       	ldi	r18, 0xF4	; 244
    7ee4:	31 e0       	ldi	r19, 0x01	; 1
    7ee6:	0e 94 66 3a 	call	0x74cc	; 0x74cc <Wifi_SendCommand>
    7eea:	88 23       	and	r24, r24
    7eec:	19 f0       	breq	.+6      	; 0x7ef4 <Config_Wifi+0x1dc>
			display_putString("port...........OK",col,0,System5x7);
    7eee:	89 ec       	ldi	r24, 0xC9	; 201
    7ef0:	94 e2       	ldi	r25, 0x24	; 36
    7ef2:	02 c0       	rjmp	.+4      	; 0x7ef8 <Config_Wifi+0x1e0>
		} else {
			display_putString("port.........FAIL",col,0,System5x7);
    7ef4:	8b ed       	ldi	r24, 0xDB	; 219
    7ef6:	94 e2       	ldi	r25, 0x24	; 36
    7ef8:	61 2f       	mov	r22, r17
    7efa:	40 e0       	ldi	r20, 0x00	; 0
    7efc:	20 ec       	ldi	r18, 0xC0	; 192
    7efe:	37 e2       	ldi	r19, 0x27	; 39
    7f00:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
		}
		display_writeBufferToScreen();
    7f04:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
    7f08:	80 e1       	ldi	r24, 0x10	; 16
    7f0a:	97 e2       	ldi	r25, 0x27	; 39
    7f0c:	20 e7       	ldi	r18, 0x70	; 112
    7f0e:	31 e0       	ldi	r19, 0x01	; 1
    7f10:	f9 01       	movw	r30, r18
    7f12:	31 97       	sbiw	r30, 0x01	; 1
    7f14:	f1 f7       	brne	.-4      	; 0x7f12 <Config_Wifi+0x1fa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7f16:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7f18:	d9 f7       	brne	.-10     	; 0x7f10 <Config_Wifi+0x1f8>
		_delay_ms(1000);
		col++;
    7f1a:	1f 5f       	subi	r17, 0xFF	; 255
	}
	
	if(ssidRead){
    7f1c:	80 91 19 2a 	lds	r24, 0x2A19
    7f20:	88 23       	and	r24, r24
    7f22:	19 f1       	breq	.+70     	; 0x7f6a <Config_Wifi+0x252>
		if(Wifi_SendCommand(ssid,"DeAut","Auto+",2000)){
    7f24:	8e e8       	ldi	r24, 0x8E	; 142
    7f26:	97 e2       	ldi	r25, 0x27	; 39
    7f28:	6d ee       	ldi	r22, 0xED	; 237
    7f2a:	74 e2       	ldi	r23, 0x24	; 36
    7f2c:	43 ef       	ldi	r20, 0xF3	; 243
    7f2e:	54 e2       	ldi	r21, 0x24	; 36
    7f30:	20 ed       	ldi	r18, 0xD0	; 208
    7f32:	37 e0       	ldi	r19, 0x07	; 7
    7f34:	0e 94 66 3a 	call	0x74cc	; 0x74cc <Wifi_SendCommand>
    7f38:	88 23       	and	r24, r24
    7f3a:	19 f0       	breq	.+6      	; 0x7f42 <Config_Wifi+0x22a>
			display_putString("ssid...........OK",col,0,System5x7);
    7f3c:	89 ef       	ldi	r24, 0xF9	; 249
    7f3e:	94 e2       	ldi	r25, 0x24	; 36
    7f40:	02 c0       	rjmp	.+4      	; 0x7f46 <Config_Wifi+0x22e>
		} else {
			display_putString("ssid.........FAIL",col,0,System5x7);
    7f42:	8b e0       	ldi	r24, 0x0B	; 11
    7f44:	95 e2       	ldi	r25, 0x25	; 37
    7f46:	61 2f       	mov	r22, r17
    7f48:	40 e0       	ldi	r20, 0x00	; 0
    7f4a:	20 ec       	ldi	r18, 0xC0	; 192
    7f4c:	37 e2       	ldi	r19, 0x27	; 39
    7f4e:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
		}
		display_writeBufferToScreen();
    7f52:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
    7f56:	80 e1       	ldi	r24, 0x10	; 16
    7f58:	97 e2       	ldi	r25, 0x27	; 39
    7f5a:	20 e7       	ldi	r18, 0x70	; 112
    7f5c:	31 e0       	ldi	r19, 0x01	; 1
    7f5e:	f9 01       	movw	r30, r18
    7f60:	31 97       	sbiw	r30, 0x01	; 1
    7f62:	f1 f7       	brne	.-4      	; 0x7f60 <Config_Wifi+0x248>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7f64:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7f66:	d9 f7       	brne	.-10     	; 0x7f5e <Config_Wifi+0x246>
		_delay_ms(1000);
		col++;
    7f68:	1f 5f       	subi	r17, 0xFF	; 255
	}
	
	
	Wifi_SendCommand("get time","TimeEna=1","TimeEna=1",500);
    7f6a:	8d e1       	ldi	r24, 0x1D	; 29
    7f6c:	95 e2       	ldi	r25, 0x25	; 37
    7f6e:	66 e2       	ldi	r22, 0x26	; 38
    7f70:	75 e2       	ldi	r23, 0x25	; 37
    7f72:	ab 01       	movw	r20, r22
    7f74:	24 ef       	ldi	r18, 0xF4	; 244
    7f76:	31 e0       	ldi	r19, 0x01	; 1
    7f78:	0e 94 66 3a 	call	0x74cc	; 0x74cc <Wifi_SendCommand>
    7f7c:	80 e1       	ldi	r24, 0x10	; 16
    7f7e:	97 e2       	ldi	r25, 0x27	; 39
    7f80:	20 e7       	ldi	r18, 0x70	; 112
    7f82:	31 e0       	ldi	r19, 0x01	; 1
    7f84:	f9 01       	movw	r30, r18
    7f86:	31 97       	sbiw	r30, 0x01	; 1
    7f88:	f1 f7       	brne	.-4      	; 0x7f86 <Config_Wifi+0x26e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7f8a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7f8c:	d9 f7       	brne	.-10     	; 0x7f84 <Config_Wifi+0x26c>
	_delay_ms(1000);
	
	Wifi_ExitCMDMode(500);
    7f8e:	84 ef       	ldi	r24, 0xF4	; 244
    7f90:	91 e0       	ldi	r25, 0x01	; 1
    7f92:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <Wifi_ExitCMDMode>
    7f96:	80 e1       	ldi	r24, 0x10	; 16
    7f98:	97 e2       	ldi	r25, 0x27	; 39
    7f9a:	20 e7       	ldi	r18, 0x70	; 112
    7f9c:	31 e0       	ldi	r19, 0x01	; 1
    7f9e:	f9 01       	movw	r30, r18
    7fa0:	31 97       	sbiw	r30, 0x01	; 1
    7fa2:	f1 f7       	brne	.-4      	; 0x7fa0 <Config_Wifi+0x288>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7fa4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7fa6:	d9 f7       	brne	.-10     	; 0x7f9e <Config_Wifi+0x286>
	
	_delay_ms(1000);
	
	Wifi_EnterCMDMode(500);
    7fa8:	84 ef       	ldi	r24, 0xF4	; 244
    7faa:	91 e0       	ldi	r25, 0x01	; 1
    7fac:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <Wifi_EnterCMDMode>
    7fb0:	80 e1       	ldi	r24, 0x10	; 16
    7fb2:	97 e2       	ldi	r25, 0x27	; 39
    7fb4:	20 e7       	ldi	r18, 0x70	; 112
    7fb6:	31 e0       	ldi	r19, 0x01	; 1
    7fb8:	f9 01       	movw	r30, r18
    7fba:	31 97       	sbiw	r30, 0x01	; 1
    7fbc:	f1 f7       	brne	.-4      	; 0x7fba <Config_Wifi+0x2a2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7fbe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7fc0:	d9 f7       	brne	.-10     	; 0x7fb8 <Config_Wifi+0x2a0>
	_delay_ms(1000);
	if(Wifi_Connected(1000)){
    7fc2:	88 ee       	ldi	r24, 0xE8	; 232
    7fc4:	93 e0       	ldi	r25, 0x03	; 3
    7fc6:	0e 94 98 3b 	call	0x7730	; 0x7730 <Wifi_Connected>
    7fca:	88 23       	and	r24, r24
    7fcc:	61 f0       	breq	.+24     	; 0x7fe6 <Config_Wifi+0x2ce>
		display_putString("connection.....OK",col,0,System5x7);
    7fce:	80 e3       	ldi	r24, 0x30	; 48
    7fd0:	95 e2       	ldi	r25, 0x25	; 37
    7fd2:	61 2f       	mov	r22, r17
    7fd4:	40 e0       	ldi	r20, 0x00	; 0
    7fd6:	20 ec       	ldi	r18, 0xC0	; 192
    7fd8:	37 e2       	ldi	r19, 0x27	; 39
    7fda:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
		connected = true;
    7fde:	81 e0       	ldi	r24, 0x01	; 1
    7fe0:	80 93 f4 29 	sts	0x29F4, r24
    7fe4:	0a c0       	rjmp	.+20     	; 0x7ffa <Config_Wifi+0x2e2>
	} else {
		display_putString("connection...FAIL",col,0,System5x7);
    7fe6:	82 e4       	ldi	r24, 0x42	; 66
    7fe8:	95 e2       	ldi	r25, 0x25	; 37
    7fea:	61 2f       	mov	r22, r17
    7fec:	40 e0       	ldi	r20, 0x00	; 0
    7fee:	20 ec       	ldi	r18, 0xC0	; 192
    7ff0:	37 e2       	ldi	r19, 0x27	; 39
    7ff2:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
		connected = false;
    7ff6:	10 92 f4 29 	sts	0x29F4, r1
	}
	display_writeBufferToScreen();
    7ffa:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
    7ffe:	80 e1       	ldi	r24, 0x10	; 16
    8000:	97 e2       	ldi	r25, 0x27	; 39
    8002:	20 e7       	ldi	r18, 0x70	; 112
    8004:	31 e0       	ldi	r19, 0x01	; 1
    8006:	f9 01       	movw	r30, r18
    8008:	31 97       	sbiw	r30, 0x01	; 1
    800a:	f1 f7       	brne	.-4      	; 0x8008 <Config_Wifi+0x2f0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    800c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    800e:	d9 f7       	brne	.-10     	; 0x8006 <Config_Wifi+0x2ee>
	_delay_ms(1000);
	col++;
    8010:	1f 5f       	subi	r17, 0xFF	; 255
	Wifi_ExitCMDMode(500);
    8012:	84 ef       	ldi	r24, 0xF4	; 244
    8014:	91 e0       	ldi	r25, 0x01	; 1
    8016:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <Wifi_ExitCMDMode>
	
	if(connected){
    801a:	80 91 f4 29 	lds	r24, 0x29F4
    801e:	88 23       	and	r24, r24
    8020:	c9 f1       	breq	.+114    	; 0x8094 <Config_Wifi+0x37c>
    8022:	80 e1       	ldi	r24, 0x10	; 16
    8024:	97 e2       	ldi	r25, 0x27	; 39
    8026:	20 e7       	ldi	r18, 0x70	; 112
    8028:	31 e0       	ldi	r19, 0x01	; 1
    802a:	f9 01       	movw	r30, r18
    802c:	31 97       	sbiw	r30, 0x01	; 1
    802e:	f1 f7       	brne	.-4      	; 0x802c <Config_Wifi+0x314>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8030:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8032:	d9 f7       	brne	.-10     	; 0x802a <Config_Wifi+0x312>
		_delay_ms(1000);
		Wifi_EnterCMDMode(500);
    8034:	84 ef       	ldi	r24, 0xF4	; 244
    8036:	91 e0       	ldi	r25, 0x01	; 1
    8038:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <Wifi_EnterCMDMode>
		if(Wifi_GetTime(1000)){
    803c:	88 ee       	ldi	r24, 0xE8	; 232
    803e:	93 e0       	ldi	r25, 0x03	; 3
    8040:	0e 94 e3 3d 	call	0x7bc6	; 0x7bc6 <Wifi_GetTime>
    8044:	88 23       	and	r24, r24
    8046:	69 f0       	breq	.+26     	; 0x8062 <Config_Wifi+0x34a>
			display_putString("internet.......OK",col,0,System5x7);
    8048:	84 e5       	ldi	r24, 0x54	; 84
    804a:	95 e2       	ldi	r25, 0x25	; 37
    804c:	61 2f       	mov	r22, r17
    804e:	40 e0       	ldi	r20, 0x00	; 0
    8050:	20 ec       	ldi	r18, 0xC0	; 192
    8052:	37 e2       	ldi	r19, 0x27	; 39
    8054:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
    8058:	81 e0       	ldi	r24, 0x01	; 1
    805a:	e0 e2       	ldi	r30, 0x20	; 32
    805c:	f6 e0       	ldi	r31, 0x06	; 6
    805e:	85 83       	std	Z+5, r24	; 0x05
    8060:	0e c0       	rjmp	.+28     	; 0x807e <Config_Wifi+0x366>
			Leds_Set(wifi_Green);

		} else{
			display_putString("internet.....FAIL",col,0,System5x7);
    8062:	86 e6       	ldi	r24, 0x66	; 102
    8064:	95 e2       	ldi	r25, 0x25	; 37
    8066:	61 2f       	mov	r22, r17
    8068:	40 e0       	ldi	r20, 0x00	; 0
    806a:	20 ec       	ldi	r18, 0xC0	; 192
    806c:	37 e2       	ldi	r19, 0x27	; 39
    806e:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
    8072:	82 e0       	ldi	r24, 0x02	; 2
    8074:	e0 e2       	ldi	r30, 0x20	; 32
    8076:	f6 e0       	ldi	r31, 0x06	; 6
    8078:	85 83       	std	Z+5, r24	; 0x05
			Leds_Set(wifi_Red);
			connected = false;
    807a:	10 92 f4 29 	sts	0x29F4, r1
		}

		display_writeBufferToScreen();
    807e:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
		Wifi_GetMac(1000);
    8082:	88 ee       	ldi	r24, 0xE8	; 232
    8084:	93 e0       	ldi	r25, 0x03	; 3
    8086:	0e 94 54 3b 	call	0x76a8	; 0x76a8 <Wifi_GetMac>
		Wifi_ExitCMDMode(1000);
    808a:	88 ee       	ldi	r24, 0xE8	; 232
    808c:	93 e0       	ldi	r25, 0x03	; 3
    808e:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <Wifi_ExitCMDMode>
    8092:	0e c0       	rjmp	.+28     	; 0x80b0 <Config_Wifi+0x398>
	} else{
		display_putString("internet.....FAIL",col,0,System5x7);
    8094:	86 e6       	ldi	r24, 0x66	; 102
    8096:	95 e2       	ldi	r25, 0x25	; 37
    8098:	61 2f       	mov	r22, r17
    809a:	40 e0       	ldi	r20, 0x00	; 0
    809c:	20 ec       	ldi	r18, 0xC0	; 192
    809e:	37 e2       	ldi	r19, 0x27	; 39
    80a0:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
		display_writeBufferToScreen();
    80a4:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
    80a8:	82 e0       	ldi	r24, 0x02	; 2
    80aa:	e0 e2       	ldi	r30, 0x20	; 32
    80ac:	f6 e0       	ldi	r31, 0x06	; 6
    80ae:	85 83       	std	Z+5, r24	; 0x05
		Leds_Set(wifi_Red);
	}

}
    80b0:	1f 91       	pop	r17
    80b2:	08 95       	ret

000080b4 <main>:


char debugMsg[150];

	
int main(void){
    80b4:	8f 92       	push	r8
    80b6:	9f 92       	push	r9
    80b8:	af 92       	push	r10
    80ba:	bf 92       	push	r11
    80bc:	cf 92       	push	r12
    80be:	df 92       	push	r13
    80c0:	ef 92       	push	r14
    80c2:	ff 92       	push	r15
    80c4:	0f 93       	push	r16
    80c6:	1f 93       	push	r17
    80c8:	df 93       	push	r29
    80ca:	cf 93       	push	r28
    80cc:	0f 92       	push	r0
    80ce:	cd b7       	in	r28, 0x3d	; 61
    80d0:	de b7       	in	r29, 0x3e	; 62
    80d2:	80 e0       	ldi	r24, 0x00	; 0
    80d4:	98 e4       	ldi	r25, 0x48	; 72
    80d6:	01 97       	sbiw	r24, 0x01	; 1
    80d8:	f1 f7       	brne	.-4      	; 0x80d6 <main+0x22>
	_delay_ms(5);


	Clock_Init();
    80da:	0e 94 c0 32 	call	0x6580	; 0x6580 <Clock_Init>
	display_init();
    80de:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_init>

	Time_Init();
    80e2:	0e 94 a6 29 	call	0x534c	; 0x534c <Time_Init>
	Sensors_Init();
    80e6:	0e 94 1b 2a 	call	0x5436	; 0x5436 <Sensors_Init>



void Leds_Init(void){
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
    80ea:	80 91 21 06 	lds	r24, 0x0621
    80ee:	83 6f       	ori	r24, 0xF3	; 243
    80f0:	e0 e2       	ldi	r30, 0x20	; 32
    80f2:	f6 e0       	ldi	r31, 0x06	; 6
    80f4:	81 83       	std	Z+1, r24	; 0x01
	Leds_Init();
	Dpad_Init();
    80f6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <Dpad_Init>
	Debug_Init();
    80fa:	0e 94 17 01 	call	0x22e	; 0x22e <Debug_Init>
	Rs232_Init();
    80fe:	0e 94 9c 02 	call	0x538	; 0x538 <Rs232_Init>

	Wifi_Init(9600);
    8102:	60 e8       	ldi	r22, 0x80	; 128
    8104:	75 e2       	ldi	r23, 0x25	; 37
    8106:	80 e0       	ldi	r24, 0x00	; 0
    8108:	90 e0       	ldi	r25, 0x00	; 0
    810a:	0e 94 a4 01 	call	0x348	; 0x348 <Wifi_Init>
	Light_Init(LightAddress);
    810e:	82 e7       	ldi	r24, 0x72	; 114
    8110:	0e 94 57 2c 	call	0x58ae	; 0x58ae <Light_Init>
	SD_Init();
    8114:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Init>

	SD_BackroundWriter_Init();
    8118:	0e 94 29 33 	call	0x6652	; 0x6652 <SD_BackroundWriter_Init>
	DMA_Init();
    811c:	0e 94 05 33 	call	0x660a	; 0x660a <DMA_Init>
		
}

void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    8120:	80 91 a2 00 	lds	r24, 0x00A2
    8124:	87 60       	ori	r24, 0x07	; 7
    8126:	e0 ea       	ldi	r30, 0xA0	; 160
    8128:	f0 e0       	ldi	r31, 0x00	; 0
    812a:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    812c:	78 94       	sei


// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    812e:	8f b7       	in	r24, 0x3f	; 63
    8130:	89 83       	std	Y+1, r24	; 0x01
    cli();
    8132:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */

#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    8134:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    8136:	21 e0       	ldi	r18, 0x01	; 1
    8138:	86 e9       	ldi	r24, 0x96	; 150
    813a:	90 e0       	ldi	r25, 0x00	; 0
    813c:	fc 01       	movw	r30, r24
    813e:	08 ed       	ldi	r16, 0xD8	; 216
    8140:	04 bf       	out	0x34, r16	; 52
    8142:	20 83       	st	Z, r18
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

#endif
	SREG = saved_sreg;
    8144:	89 81       	ldd	r24, Y+1	; 0x01
    8146:	8f bf       	out	0x3f, r24	; 63
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8148:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    814c:	8c 77       	andi	r24, 0x7C	; 124
    814e:	86 ff       	sbrs	r24, 6
    8150:	1e c2       	rjmp	.+1084   	; 0x858e <main+0x4da>
		Debug_SendString("Entering Debug to Wifi function",true);
		Debug_To_Wifi();
	}


	display_putString("booting up",0,0,System5x7);
    8152:	88 e7       	ldi	r24, 0x78	; 120
    8154:	95 e2       	ldi	r25, 0x25	; 37
    8156:	60 e0       	ldi	r22, 0x00	; 0
    8158:	40 e0       	ldi	r20, 0x00	; 0
    815a:	20 ec       	ldi	r18, 0xC0	; 192
    815c:	37 e2       	ldi	r19, 0x27	; 39
    815e:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
	display_writeBufferToScreen();
    8162:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
	Debug_SendString("booting up...",true);
    8166:	83 e8       	ldi	r24, 0x83	; 131
    8168:	95 e2       	ldi	r25, 0x25	; 37
    816a:	61 e0       	ldi	r22, 0x01	; 1
    816c:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
    8170:	1c e3       	ldi	r17, 0x3C	; 60
    8172:	90 e7       	ldi	r25, 0x70	; 112
    8174:	e9 2e       	mov	r14, r25
    8176:	91 e0       	ldi	r25, 0x01	; 1
    8178:	f9 2e       	mov	r15, r25
	for(uint8_t i = 60; i < 90; i+=6){
	  display_putString(".",0,i,System5x7);
    817a:	81 e9       	ldi	r24, 0x91	; 145
    817c:	95 e2       	ldi	r25, 0x25	; 37
    817e:	60 e0       	ldi	r22, 0x00	; 0
    8180:	41 2f       	mov	r20, r17
    8182:	20 ec       	ldi	r18, 0xC0	; 192
    8184:	37 e2       	ldi	r19, 0x27	; 39
    8186:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
	  display_writeBufferToScreen();
    818a:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
    818e:	80 e1       	ldi	r24, 0x10	; 16
    8190:	97 e2       	ldi	r25, 0x27	; 39
    8192:	f7 01       	movw	r30, r14
    8194:	31 97       	sbiw	r30, 0x01	; 1
    8196:	f1 f7       	brne	.-4      	; 0x8194 <main+0xe0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8198:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    819a:	d9 f7       	brne	.-10     	; 0x8192 <main+0xde>


	display_putString("booting up",0,0,System5x7);
	display_writeBufferToScreen();
	Debug_SendString("booting up...",true);
	for(uint8_t i = 60; i < 90; i+=6){
    819c:	1a 5f       	subi	r17, 0xFA	; 250
    819e:	1a 35       	cpi	r17, 0x5A	; 90
    81a0:	61 f7       	brne	.-40     	; 0x817a <main+0xc6>
    81a2:	06 c0       	rjmp	.+12     	; 0x81b0 <main+0xfc>
    81a4:	f8 01       	movw	r30, r16
    81a6:	31 97       	sbiw	r30, 0x01	; 1
    81a8:	f1 f7       	brne	.-4      	; 0x81a6 <main+0xf2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    81aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    81ac:	d9 f7       	brne	.-10     	; 0x81a4 <main+0xf0>
    81ae:	08 c0       	rjmp	.+16     	; 0x81c0 <main+0x10c>
void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
}

void Leds_Toggle(uint8_t led){
	Leds_Port.OUTTGL = (1 << led);
    81b0:	80 e2       	ldi	r24, 0x20	; 32
    81b2:	e8 2e       	mov	r14, r24
    81b4:	86 e0       	ldi	r24, 0x06	; 6
    81b6:	f8 2e       	mov	r15, r24
    81b8:	00 e2       	ldi	r16, 0x20	; 32
    81ba:	d0 2e       	mov	r13, r16
    81bc:	00 e7       	ldi	r16, 0x70	; 112
    81be:	11 e0       	ldi	r17, 0x01	; 1
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    81c0:	80 91 a8 06 	lds	r24, 0x06A8
    81c4:	80 ff       	sbrs	r24, 0
    81c6:	eb c1       	rjmp	.+982    	; 0x859e <main+0x4ea>
	  _delay_ms(1000);
	}
	

	while(!SD_Inserted()){
		Debug_SendString("SD?", true);
    81c8:	83 e9       	ldi	r24, 0x93	; 147
    81ca:	95 e2       	ldi	r25, 0x25	; 37
    81cc:	61 e0       	ldi	r22, 0x01	; 1
    81ce:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
    81d2:	d7 01       	movw	r26, r14
    81d4:	17 96       	adiw	r26, 0x07	; 7
    81d6:	dc 92       	st	X, r13
    81d8:	88 e8       	ldi	r24, 0x88	; 136
    81da:	93 e1       	ldi	r25, 0x13	; 19
    81dc:	e3 cf       	rjmp	.-58     	; 0x81a4 <main+0xf0>
    81de:	ca 01       	movw	r24, r20
    81e0:	01 97       	sbiw	r24, 0x01	; 1
    81e2:	f1 f7       	brne	.-4      	; 0x81e0 <main+0x12c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    81e4:	21 50       	subi	r18, 0x01	; 1
    81e6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    81e8:	d1 f7       	brne	.-12     	; 0x81de <main+0x12a>
	Leds_Clear(sd_Red);
	Leds_Set(sd_Green);
	_delay_ms(1000);
	
	
	Read_config_file();
    81ea:	0e 94 fc 38 	call	0x71f8	; 0x71f8 <Read_config_file>
    81ee:	00 e7       	ldi	r16, 0x70	; 112
    81f0:	11 e0       	ldi	r17, 0x01	; 1
    81f2:	09 c0       	rjmp	.+18     	; 0x8206 <main+0x152>

	while(!connected){
		Config_Wifi();
    81f4:	0e 94 8c 3e 	call	0x7d18	; 0x7d18 <Config_Wifi>
    81f8:	88 e8       	ldi	r24, 0x88	; 136
    81fa:	93 e1       	ldi	r25, 0x13	; 19
    81fc:	f8 01       	movw	r30, r16
    81fe:	31 97       	sbiw	r30, 0x01	; 1
    8200:	f1 f7       	brne	.-4      	; 0x81fe <main+0x14a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8202:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8204:	d9 f7       	brne	.-10     	; 0x81fc <main+0x148>
	_delay_ms(1000);
	
	
	Read_config_file();

	while(!connected){
    8206:	80 91 f4 29 	lds	r24, 0x29F4
    820a:	88 23       	and	r24, r24
    820c:	99 f3       	breq	.-26     	; 0x81f4 <main+0x140>
void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    820e:	82 e0       	ldi	r24, 0x02	; 2
    8210:	e0 e2       	ldi	r30, 0x20	; 32
    8212:	f6 e0       	ldi	r31, 0x06	; 6
    8214:	86 83       	std	Z+6, r24	; 0x06
		Config_Wifi();
		_delay_ms(500);
	}
	Leds_Clear(wifi_Red);
	Time_Set(time_secs);
    8216:	80 91 ec 29 	lds	r24, 0x29EC
    821a:	90 91 ed 29 	lds	r25, 0x29ED
    821e:	a0 91 ee 29 	lds	r26, 0x29EE
    8222:	b0 91 ef 29 	lds	r27, 0x29EF
	
	
}

void Time_Set(uint32_t time){
  UNIX_time = time;
    8226:	80 93 fb 29 	sts	0x29FB, r24
    822a:	90 93 fc 29 	sts	0x29FC, r25
    822e:	a0 93 fd 29 	sts	0x29FD, r26
    8232:	b0 93 fe 29 	sts	0x29FE, r27
    8236:	88 e8       	ldi	r24, 0x88	; 136
    8238:	93 e1       	ldi	r25, 0x13	; 19
    823a:	20 e7       	ldi	r18, 0x70	; 112
    823c:	31 e0       	ldi	r19, 0x01	; 1
    823e:	f9 01       	movw	r30, r18
    8240:	31 97       	sbiw	r30, 0x01	; 1
    8242:	f1 f7       	brne	.-4      	; 0x8240 <main+0x18c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8244:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8246:	d9 f7       	brne	.-10     	; 0x823e <main+0x18a>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8248:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    824c:	8c 77       	andi	r24, 0x7C	; 124
    824e:	84 ff       	sbrs	r24, 4
    8250:	b1 c1       	rjmp	.+866    	; 0x85b4 <main+0x500>
		Debug_SendString("Entering Debug to Wifi function",true);
		Debug_To_Wifi();
	}
	

	SD_CD_Port.PIN1CTRL = PORT_OPC_PULLUP_gc;
    8252:	88 e1       	ldi	r24, 0x18	; 24
    8254:	e0 ea       	ldi	r30, 0xA0	; 160
    8256:	f6 e0       	ldi	r31, 0x06	; 6
    8258:	81 8b       	std	Z+17, r24	; 0x11
		display_putString(" stop recording ",7,0,System5x7);
		display_writeBufferToScreen();
	
		Debug_SendString("RTC Block: ",false);
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
		Debug_SendString(ltoa(UNIX_time,temp,10),false);
    825a:	18 e2       	ldi	r17, 0x28	; 40
    825c:	a1 2e       	mov	r10, r17
    825e:	1a e3       	ldi	r17, 0x3A	; 58
    8260:	b1 2e       	mov	r11, r17
    8262:	b0 e7       	ldi	r27, 0x70	; 112
    8264:	eb 2e       	mov	r14, r27
    8266:	b1 e0       	ldi	r27, 0x01	; 1
    8268:	fb 2e       	mov	r15, r27
				display_putString("RTC synced... ",5,0,System5x7);
				display_writeBufferToScreen();
				Leds_Clear(ext_Red);
				_delay_ms(1000);
				while((SD_CD_Port.IN && (2)) == 0 ){
					sprintf(temp, "Time: %lu", RTC_getUTCSecs());
    826a:	a3 e2       	ldi	r26, 0x23	; 35
    826c:	8a 2e       	mov	r8, r26
    826e:	a6 e2       	ldi	r26, 0x26	; 38
    8270:	9a 2e       	mov	r9, r26

	// starting recording
	while(true){

		while(true){
			if(SD_StartLogFile(UNIX_time) == 0){
    8272:	60 91 fb 29 	lds	r22, 0x29FB
    8276:	70 91 fc 29 	lds	r23, 0x29FC
    827a:	80 91 fd 29 	lds	r24, 0x29FD
    827e:	90 91 fe 29 	lds	r25, 0x29FE
    8282:	0e 94 a8 39 	call	0x7350	; 0x7350 <SD_StartLogFile>
    8286:	88 23       	and	r24, r24
    8288:	09 f0       	breq	.+2      	; 0x828c <main+0x1d8>
    828a:	6c c0       	rjmp	.+216    	; 0x8364 <main+0x2b0>
    828c:	e0 e2       	ldi	r30, 0x20	; 32
    828e:	f6 e0       	ldi	r31, 0x06	; 6
    8290:	80 e2       	ldi	r24, 0x20	; 32
    8292:	86 83       	std	Z+6, r24	; 0x06
		}

		Leds_Clear(sd_Green);
		Leds_Clear(wifi_Green);

		display_clearBuffer();
    8294:	80 e1       	ldi	r24, 0x10	; 16
    8296:	86 83       	std	Z+6, r24	; 0x06
    8298:	11 e0       	ldi	r17, 0x01	; 1
    829a:	16 83       	std	Z+6, r17	; 0x06
    829c:	0e 94 92 26 	call	0x4d24	; 0x4d24 <display_clearBuffer>
		display_writeBufferToScreen();
    82a0:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
		display_putString("    RECORDING!   ",3,0,System5x7);
    82a4:	87 e9       	ldi	r24, 0x97	; 151
    82a6:	95 e2       	ldi	r25, 0x25	; 37
    82a8:	63 e0       	ldi	r22, 0x03	; 3
    82aa:	40 e0       	ldi	r20, 0x00	; 0
    82ac:	20 ec       	ldi	r18, 0xC0	; 192
    82ae:	37 e2       	ldi	r19, 0x27	; 39
    82b0:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
		display_putString(" press select to ",6,0,System5x7);
    82b4:	89 ea       	ldi	r24, 0xA9	; 169
    82b6:	95 e2       	ldi	r25, 0x25	; 37
    82b8:	66 e0       	ldi	r22, 0x06	; 6
    82ba:	40 e0       	ldi	r20, 0x00	; 0
    82bc:	20 ec       	ldi	r18, 0xC0	; 192
    82be:	37 e2       	ldi	r19, 0x27	; 39
    82c0:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
		display_putString(" stop recording ",7,0,System5x7);
    82c4:	8b eb       	ldi	r24, 0xBB	; 187
    82c6:	95 e2       	ldi	r25, 0x25	; 37
    82c8:	67 e0       	ldi	r22, 0x07	; 7
    82ca:	40 e0       	ldi	r20, 0x00	; 0
    82cc:	20 ec       	ldi	r18, 0xC0	; 192
    82ce:	37 e2       	ldi	r19, 0x27	; 39
    82d0:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
		display_writeBufferToScreen();
    82d4:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
	
		Debug_SendString("RTC Block: ",false);
    82d8:	82 ee       	ldi	r24, 0xE2	; 226
    82da:	90 e2       	ldi	r25, 0x20	; 32
    82dc:	60 e0       	ldi	r22, 0x00	; 0
    82de:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_time);
    82e2:	0e 94 ce 29 	call	0x539c	; 0x539c <Time_Get32BitTimer>
    82e6:	20 91 fb 29 	lds	r18, 0x29FB
    82ea:	30 91 fc 29 	lds	r19, 0x29FC
    82ee:	40 91 fd 29 	lds	r20, 0x29FD
    82f2:	50 91 fe 29 	lds	r21, 0x29FE
    82f6:	0e 94 38 33 	call	0x6670	; 0x6670 <SD_WriteRTCBlock>
		Debug_SendString(ltoa(UNIX_time,temp,10),false);
    82fa:	60 91 fb 29 	lds	r22, 0x29FB
    82fe:	70 91 fc 29 	lds	r23, 0x29FC
    8302:	80 91 fd 29 	lds	r24, 0x29FD
    8306:	90 91 fe 29 	lds	r25, 0x29FE
    830a:	48 e2       	ldi	r20, 0x28	; 40
    830c:	5a e3       	ldi	r21, 0x3A	; 58
    830e:	2a e0       	ldi	r18, 0x0A	; 10
    8310:	30 e0       	ldi	r19, 0x00	; 0
    8312:	0e 94 35 44 	call	0x886a	; 0x886a <ltoa>
    8316:	60 e0       	ldi	r22, 0x00	; 0
    8318:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		Debug_SendString(", ",false);
    831c:	8e ee       	ldi	r24, 0xEE	; 238
    831e:	90 e2       	ldi	r25, 0x20	; 32
    8320:	60 e0       	ldi	r22, 0x00	; 0
    8322:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		Debug_SendString(ltoa(Time_Get32BitTimer(),temp,10),true);;
    8326:	0e 94 ce 29 	call	0x539c	; 0x539c <Time_Get32BitTimer>
    832a:	48 e2       	ldi	r20, 0x28	; 40
    832c:	5a e3       	ldi	r21, 0x3A	; 58
    832e:	2a e0       	ldi	r18, 0x0A	; 10
    8330:	30 e0       	ldi	r19, 0x00	; 0
    8332:	0e 94 35 44 	call	0x886a	; 0x886a <ltoa>
    8336:	61 e0       	ldi	r22, 0x01	; 1
    8338:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
	}
	return tmp;
}

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
    833c:	80 91 f7 29 	lds	r24, 0x29F7
    8340:	90 91 f8 29 	lds	r25, 0x29F8
    8344:	80 93 f5 29 	sts	0x29F5, r24
    8348:	90 93 f6 29 	sts	0x29F6, r25
	

		Rs232_ClearBuffer();
		rs232Recording = true;
    834c:	10 93 fa 29 	sts	0x29FA, r17
		recording = true;
    8350:	10 93 00 2a 	sts	0x2A00, r17
    8354:	80 e2       	ldi	r24, 0x20	; 32
    8356:	9e e4       	ldi	r25, 0x4E	; 78
    8358:	f7 01       	movw	r30, r14
    835a:	31 97       	sbiw	r30, 0x01	; 1
    835c:	f1 f7       	brne	.-4      	; 0x835a <main+0x2a6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    835e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8360:	d9 f7       	brne	.-10     	; 0x8358 <main+0x2a4>
    8362:	3b c0       	rjmp	.+118    	; 0x83da <main+0x326>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8364:	80 e2       	ldi	r24, 0x20	; 32
    8366:	e0 e2       	ldi	r30, 0x20	; 32
    8368:	f6 e0       	ldi	r31, 0x06	; 6
    836a:	85 83       	std	Z+5, r24	; 0x05
				Leds_Clear(sd_Red);
				break;
			} else {
				Leds_Set(sd_Red);

				display_clearBuffer();
    836c:	0e 94 92 26 	call	0x4d24	; 0x4d24 <display_clearBuffer>
				display_writeBufferToScreen();
    8370:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
				display_putString("    uSD Error    ",3,0,System5x7);
    8374:	8c ec       	ldi	r24, 0xCC	; 204
    8376:	95 e2       	ldi	r25, 0x25	; 37
    8378:	63 e0       	ldi	r22, 0x03	; 3
    837a:	40 e0       	ldi	r20, 0x00	; 0
    837c:	20 ec       	ldi	r18, 0xC0	; 192
    837e:	37 e2       	ldi	r19, 0x27	; 39
    8380:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
				display_putString(" Please Remove & ",6,0,System5x7);
    8384:	8e ed       	ldi	r24, 0xDE	; 222
    8386:	95 e2       	ldi	r25, 0x25	; 37
    8388:	66 e0       	ldi	r22, 0x06	; 6
    838a:	40 e0       	ldi	r20, 0x00	; 0
    838c:	20 ec       	ldi	r18, 0xC0	; 192
    838e:	37 e2       	ldi	r19, 0x27	; 39
    8390:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
				display_putString("  Reinsert Card  ",7,0,System5x7);
    8394:	80 ef       	ldi	r24, 0xF0	; 240
    8396:	95 e2       	ldi	r25, 0x25	; 37
    8398:	67 e0       	ldi	r22, 0x07	; 7
    839a:	40 e0       	ldi	r20, 0x00	; 0
    839c:	20 ec       	ldi	r18, 0xC0	; 192
    839e:	37 e2       	ldi	r19, 0x27	; 39
    83a0:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
				display_writeBufferToScreen();
    83a4:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
    83a8:	80 91 a8 06 	lds	r24, 0x06A8
    83ac:	80 ff       	sbrs	r24, 0
    83ae:	fc cf       	rjmp	.-8      	; 0x83a8 <main+0x2f4>
    83b0:	88 ee       	ldi	r24, 0xE8	; 232
    83b2:	93 e0       	ldi	r25, 0x03	; 3
    83b4:	f7 01       	movw	r30, r14
    83b6:	31 97       	sbiw	r30, 0x01	; 1
    83b8:	f1 f7       	brne	.-4      	; 0x83b6 <main+0x302>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    83ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    83bc:	d9 f7       	brne	.-10     	; 0x83b4 <main+0x300>
    83be:	80 91 a8 06 	lds	r24, 0x06A8
    83c2:	80 fd       	sbrc	r24, 0
    83c4:	fc cf       	rjmp	.-8      	; 0x83be <main+0x30a>
    83c6:	88 ee       	ldi	r24, 0xE8	; 232
    83c8:	93 e0       	ldi	r25, 0x03	; 3
    83ca:	f7 01       	movw	r30, r14
    83cc:	31 97       	sbiw	r30, 0x01	; 1
    83ce:	f1 f7       	brne	.-4      	; 0x83cc <main+0x318>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    83d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    83d2:	d9 f7       	brne	.-10     	; 0x83ca <main+0x316>

				while(SD_Inserted());
				_delay_ms(100);
				while(!SD_Inserted());
				_delay_ms(100);
				SD_Init();
    83d4:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Init>
    83d8:	4c cf       	rjmp	.-360    	; 0x8272 <main+0x1be>
    83da:	00 e2       	ldi	r16, 0x20	; 32
    83dc:	16 e0       	ldi	r17, 0x06	; 6
    83de:	f0 e4       	ldi	r31, 0x40	; 64
    83e0:	cf 2e       	mov	r12, r31
	
		_delay_ms(2000);
		while(true){


			if((SD_CD_Port.IN && (2)) == 0 ){
    83e2:	e0 e8       	ldi	r30, 0x80	; 128
    83e4:	de 2e       	mov	r13, r30
    83e6:	80 91 a8 06 	lds	r24, 0x06A8
    83ea:	88 23       	and	r24, r24
    83ec:	09 f0       	breq	.+2      	; 0x83f0 <main+0x33c>
    83ee:	89 c0       	rjmp	.+274    	; 0x8502 <main+0x44e>

				display_clearBuffer();
    83f0:	0e 94 92 26 	call	0x4d24	; 0x4d24 <display_clearBuffer>
				display_writeBufferToScreen();
    83f4:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
    83f8:	f8 01       	movw	r30, r16
    83fa:	c5 82       	std	Z+5, r12	; 0x05
    83fc:	d5 82       	std	Z+5, r13	; 0x05

				Leds_Set(ext_Green);
				Leds_Set(ext_Red);
				display_putString("RTC connected... ",3,0,System5x7);
    83fe:	82 e0       	ldi	r24, 0x02	; 2
    8400:	96 e2       	ldi	r25, 0x26	; 38
    8402:	63 e0       	ldi	r22, 0x03	; 3
    8404:	40 e0       	ldi	r20, 0x00	; 0
    8406:	20 ec       	ldi	r18, 0xC0	; 192
    8408:	37 e2       	ldi	r19, 0x27	; 39
    840a:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
				display_writeBufferToScreen();
    840e:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
    8412:	80 e1       	ldi	r24, 0x10	; 16
    8414:	97 e2       	ldi	r25, 0x27	; 39
    8416:	f7 01       	movw	r30, r14
    8418:	31 97       	sbiw	r30, 0x01	; 1
    841a:	f1 f7       	brne	.-4      	; 0x8418 <main+0x364>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    841c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    841e:	d9 f7       	brne	.-10     	; 0x8416 <main+0x362>
				_delay_ms(1000);
				RTC_init();
    8420:	0e 94 a2 31 	call	0x6344	; 0x6344 <RTC_init>
				RTC_setUTCSecs(UNIX_time);
    8424:	60 91 fb 29 	lds	r22, 0x29FB
    8428:	70 91 fc 29 	lds	r23, 0x29FC
    842c:	80 91 fd 29 	lds	r24, 0x29FD
    8430:	90 91 fe 29 	lds	r25, 0x29FE
    8434:	0e 94 9b 31 	call	0x6336	; 0x6336 <RTC_setUTCSecs>
				display_putString("RTC synced... ",5,0,System5x7);
    8438:	84 e1       	ldi	r24, 0x14	; 20
    843a:	96 e2       	ldi	r25, 0x26	; 38
    843c:	65 e0       	ldi	r22, 0x05	; 5
    843e:	40 e0       	ldi	r20, 0x00	; 0
    8440:	20 ec       	ldi	r18, 0xC0	; 192
    8442:	37 e2       	ldi	r19, 0x27	; 39
    8444:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
				display_writeBufferToScreen();
    8448:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    844c:	d8 01       	movw	r26, r16
    844e:	16 96       	adiw	r26, 0x06	; 6
    8450:	dc 92       	st	X, r13
    8452:	80 e1       	ldi	r24, 0x10	; 16
    8454:	97 e2       	ldi	r25, 0x27	; 39
    8456:	f7 01       	movw	r30, r14
    8458:	31 97       	sbiw	r30, 0x01	; 1
    845a:	f1 f7       	brne	.-4      	; 0x8458 <main+0x3a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    845c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    845e:	d9 f7       	brne	.-10     	; 0x8456 <main+0x3a2>
    8460:	2b c0       	rjmp	.+86     	; 0x84b8 <main+0x404>
				Leds_Clear(ext_Red);
				_delay_ms(1000);
				while((SD_CD_Port.IN && (2)) == 0 ){
					sprintf(temp, "Time: %lu", RTC_getUTCSecs());
    8462:	0e 94 b9 32 	call	0x6572	; 0x6572 <RTC_getUTCSecs>
    8466:	ed b7       	in	r30, 0x3d	; 61
    8468:	fe b7       	in	r31, 0x3e	; 62
    846a:	38 97       	sbiw	r30, 0x08	; 8
    846c:	ed bf       	out	0x3d, r30	; 61
    846e:	fe bf       	out	0x3e, r31	; 62
    8470:	31 96       	adiw	r30, 0x01	; 1
    8472:	ad b7       	in	r26, 0x3d	; 61
    8474:	be b7       	in	r27, 0x3e	; 62
    8476:	11 96       	adiw	r26, 0x01	; 1
    8478:	ad 92       	st	X+, r10
    847a:	bc 92       	st	X, r11
    847c:	12 97       	sbiw	r26, 0x02	; 2
    847e:	82 82       	std	Z+2, r8	; 0x02
    8480:	93 82       	std	Z+3, r9	; 0x03
    8482:	64 83       	std	Z+4, r22	; 0x04
    8484:	75 83       	std	Z+5, r23	; 0x05
    8486:	86 83       	std	Z+6, r24	; 0x06
    8488:	97 83       	std	Z+7, r25	; 0x07
    848a:	0e 94 7e 44 	call	0x88fc	; 0x88fc <sprintf>
					display_putString(temp,7,0,System5x7);
    848e:	ed b7       	in	r30, 0x3d	; 61
    8490:	fe b7       	in	r31, 0x3e	; 62
    8492:	38 96       	adiw	r30, 0x08	; 8
    8494:	ed bf       	out	0x3d, r30	; 61
    8496:	fe bf       	out	0x3e, r31	; 62
    8498:	c5 01       	movw	r24, r10
    849a:	67 e0       	ldi	r22, 0x07	; 7
    849c:	40 e0       	ldi	r20, 0x00	; 0
    849e:	20 ec       	ldi	r18, 0xC0	; 192
    84a0:	37 e2       	ldi	r19, 0x27	; 39
    84a2:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
					display_writeBufferToScreen();
    84a6:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
    84aa:	88 e8       	ldi	r24, 0x88	; 136
    84ac:	93 e1       	ldi	r25, 0x13	; 19
    84ae:	f7 01       	movw	r30, r14
    84b0:	31 97       	sbiw	r30, 0x01	; 1
    84b2:	f1 f7       	brne	.-4      	; 0x84b0 <main+0x3fc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    84b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    84b6:	d9 f7       	brne	.-10     	; 0x84ae <main+0x3fa>
				RTC_setUTCSecs(UNIX_time);
				display_putString("RTC synced... ",5,0,System5x7);
				display_writeBufferToScreen();
				Leds_Clear(ext_Red);
				_delay_ms(1000);
				while((SD_CD_Port.IN && (2)) == 0 ){
    84b8:	80 91 a8 06 	lds	r24, 0x06A8
    84bc:	88 23       	and	r24, r24
    84be:	89 f2       	breq	.-94     	; 0x8462 <main+0x3ae>
    84c0:	d8 01       	movw	r26, r16
    84c2:	16 96       	adiw	r26, 0x06	; 6
    84c4:	cc 92       	st	X, r12
					display_writeBufferToScreen();
					_delay_ms(500);
				}
				Leds_Clear(ext_Green);

				display_clearBuffer();
    84c6:	0e 94 92 26 	call	0x4d24	; 0x4d24 <display_clearBuffer>
				display_writeBufferToScreen();
    84ca:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
				display_putString("    RECORDING!   ",3,0,System5x7);
    84ce:	87 e9       	ldi	r24, 0x97	; 151
    84d0:	95 e2       	ldi	r25, 0x25	; 37
    84d2:	63 e0       	ldi	r22, 0x03	; 3
    84d4:	40 e0       	ldi	r20, 0x00	; 0
    84d6:	20 ec       	ldi	r18, 0xC0	; 192
    84d8:	37 e2       	ldi	r19, 0x27	; 39
    84da:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
				display_putString(" press select to ",6,0,System5x7);
    84de:	89 ea       	ldi	r24, 0xA9	; 169
    84e0:	95 e2       	ldi	r25, 0x25	; 37
    84e2:	66 e0       	ldi	r22, 0x06	; 6
    84e4:	40 e0       	ldi	r20, 0x00	; 0
    84e6:	20 ec       	ldi	r18, 0xC0	; 192
    84e8:	37 e2       	ldi	r19, 0x27	; 39
    84ea:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
				display_putString(" stop recording ",7,0,System5x7);
    84ee:	8b eb       	ldi	r24, 0xBB	; 187
    84f0:	95 e2       	ldi	r25, 0x25	; 37
    84f2:	67 e0       	ldi	r22, 0x07	; 7
    84f4:	40 e0       	ldi	r20, 0x00	; 0
    84f6:	20 ec       	ldi	r18, 0xC0	; 192
    84f8:	37 e2       	ldi	r19, 0x27	; 39
    84fa:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
				display_writeBufferToScreen();
    84fe:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8502:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8506:	8c 77       	andi	r24, 0x7C	; 124
    8508:	86 fd       	sbrc	r24, 6
    850a:	6d cf       	rjmp	.-294    	; 0x83e6 <main+0x332>
    850c:	5b c0       	rjmp	.+182    	; 0x85c4 <main+0x510>
    850e:	f7 01       	movw	r30, r14
    8510:	31 97       	sbiw	r30, 0x01	; 1
    8512:	f1 f7       	brne	.-4      	; 0x8510 <main+0x45c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8514:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8516:	d9 f7       	brne	.-10     	; 0x850e <main+0x45a>
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8518:	81 e0       	ldi	r24, 0x01	; 1
    851a:	e0 e2       	ldi	r30, 0x20	; 32
    851c:	f6 e0       	ldi	r31, 0x06	; 6
    851e:	85 83       	std	Z+5, r24	; 0x05
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8520:	00 e2       	ldi	r16, 0x20	; 32
    8522:	16 e0       	ldi	r17, 0x06	; 6
    8524:	70 e1       	ldi	r23, 0x10	; 16
    8526:	c7 2e       	mov	r12, r23
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8528:	60 e2       	ldi	r22, 0x20	; 32
    852a:	d6 2e       	mov	r13, r22
    852c:	80 91 a8 06 	lds	r24, 0x06A8
    8530:	80 ff       	sbrs	r24, 0
    8532:	92 c0       	rjmp	.+292    	; 0x8658 <main+0x5a4>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8534:	f8 01       	movw	r30, r16
    8536:	c6 82       	std	Z+6, r12	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    8538:	d5 82       	std	Z+5, r13	; 0x05
						}

					} else {
						Leds_Clear(sd_Green);
						Leds_Set(sd_Red);
						display_writeBufferToScreen();
    853a:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
						display_putString("  Please Replace ",3,0,System5x7);
    853e:	8d e2       	ldi	r24, 0x2D	; 45
    8540:	96 e2       	ldi	r25, 0x26	; 38
    8542:	63 e0       	ldi	r22, 0x03	; 3
    8544:	40 e0       	ldi	r20, 0x00	; 0
    8546:	20 ec       	ldi	r18, 0xC0	; 192
    8548:	37 e2       	ldi	r19, 0x27	; 39
    854a:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
						display_putString("  The uSD card   ",4,0,System5x7);
    854e:	8f e3       	ldi	r24, 0x3F	; 63
    8550:	96 e2       	ldi	r25, 0x26	; 38
    8552:	64 e0       	ldi	r22, 0x04	; 4
    8554:	40 e0       	ldi	r20, 0x00	; 0
    8556:	20 ec       	ldi	r18, 0xC0	; 192
    8558:	37 e2       	ldi	r19, 0x27	; 39
    855a:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
						display_writeBufferToScreen();
    855e:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
    8562:	84 ec       	ldi	r24, 0xC4	; 196
    8564:	99 e0       	ldi	r25, 0x09	; 9
    8566:	0b c0       	rjmp	.+22     	; 0x857e <main+0x4ca>
    8568:	f7 01       	movw	r30, r14
    856a:	31 97       	sbiw	r30, 0x01	; 1
    856c:	f1 f7       	brne	.-4      	; 0x856a <main+0x4b6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    856e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8570:	d9 f7       	brne	.-10     	; 0x8568 <main+0x4b4>
	Dpad_Port.PIN6CTRL = PORT_OPC_PULLUP_gc;
	Dpad_Port.DIRCLR |= (1 << Up)|(1 << Down)|(1 << Left)|(1 << Right)|(1 << Select) ;
}

uint8_t Dpad_Read(void){
	return (Dpad_Port.IN & 0b01111100);
    8572:	80 91 a8 06 	lds	r24, 0x06A8
}

bool Dpad_CheckButton(uint8_t direction){
	if((Dpad_Read() & (1<<direction)) >0 ){
    8576:	8c 77       	andi	r24, 0x7C	; 124
    8578:	86 fd       	sbrc	r24, 6
    857a:	d8 cf       	rjmp	.-80     	; 0x852c <main+0x478>
    857c:	7a ce       	rjmp	.-780    	; 0x8272 <main+0x1be>
    857e:	f7 01       	movw	r30, r14
    8580:	31 97       	sbiw	r30, 0x01	; 1
    8582:	f1 f7       	brne	.-4      	; 0x8580 <main+0x4cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8584:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8586:	d9 f7       	brne	.-10     	; 0x857e <main+0x4ca>
						_delay_ms(250);
						SD_Init();
    8588:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <SD_Init>
    858c:	cf cf       	rjmp	.-98     	; 0x852c <main+0x478>

	Interrupt_Init();
	Disable_JTAG();

	if(Dpad_CheckButton(Select)){
		Debug_SendString("Entering Debug to Wifi function",true);
    858e:	81 e5       	ldi	r24, 0x51	; 81
    8590:	96 e2       	ldi	r25, 0x26	; 38
    8592:	61 e0       	ldi	r22, 0x01	; 1
    8594:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		Debug_To_Wifi();
    8598:	0e 94 98 33 	call	0x6730	; 0x6730 <Debug_To_Wifi>
    859c:	da cd       	rjmp	.-1100   	; 0x8152 <main+0x9e>
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    859e:	e0 e2       	ldi	r30, 0x20	; 32
    85a0:	f6 e0       	ldi	r31, 0x06	; 6
    85a2:	80 e2       	ldi	r24, 0x20	; 32
    85a4:	86 83       	std	Z+6, r24	; 0x06
	// make sure JTAGEN is not checked in the fuses!
	Leds_Port.DIRSET |= (1<<wifi_Green)|(1<<wifi_Red)|(1<<sd_Green)|(1<<sd_Red)|(1<<ext_Green)|(1<<ext_Red);
}

void Leds_Set(uint8_t led){
	Leds_Port.OUTSET = (1 << led);
    85a6:	80 e1       	ldi	r24, 0x10	; 16
    85a8:	85 83       	std	Z+5, r24	; 0x05
    85aa:	20 e1       	ldi	r18, 0x10	; 16
    85ac:	37 e2       	ldi	r19, 0x27	; 39
    85ae:	40 e7       	ldi	r20, 0x70	; 112
    85b0:	51 e0       	ldi	r21, 0x01	; 1
    85b2:	15 ce       	rjmp	.-982    	; 0x81de <main+0x12a>
	_delay_ms(500);

	
	
	if(Dpad_CheckButton(Left)){
		Debug_SendString("Entering Debug to Wifi function",true);
    85b4:	81 e5       	ldi	r24, 0x51	; 81
    85b6:	96 e2       	ldi	r25, 0x26	; 38
    85b8:	61 e0       	ldi	r22, 0x01	; 1
    85ba:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <Debug_SendString>
		Debug_To_Wifi();
    85be:	0e 94 98 33 	call	0x6730	; 0x6730 <Debug_To_Wifi>
    85c2:	47 ce       	rjmp	.-882    	; 0x8252 <main+0x19e>
				display_writeBufferToScreen();

			}

			if(Dpad_CheckButton(Select)){
				rs232Recording = false;
    85c4:	10 92 fa 29 	sts	0x29FA, r1
				recording = false;
    85c8:	10 92 00 2a 	sts	0x2A00, r1
				display_clearBuffer();
    85cc:	0e 94 92 26 	call	0x4d24	; 0x4d24 <display_clearBuffer>
				display_writeBufferToScreen();
    85d0:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
				display_putString(" Done Recording! ",3,0,System5x7);
    85d4:	81 e7       	ldi	r24, 0x71	; 113
    85d6:	96 e2       	ldi	r25, 0x26	; 38
    85d8:	63 e0       	ldi	r22, 0x03	; 3
    85da:	40 e0       	ldi	r20, 0x00	; 0
    85dc:	20 ec       	ldi	r18, 0xC0	; 192
    85de:	37 e2       	ldi	r19, 0x27	; 39
    85e0:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
				display_putString("   Thank You!    ",4,0,System5x7);
    85e4:	83 e8       	ldi	r24, 0x83	; 131
    85e6:	96 e2       	ldi	r25, 0x26	; 38
    85e8:	64 e0       	ldi	r22, 0x04	; 4
    85ea:	40 e0       	ldi	r20, 0x00	; 0
    85ec:	20 ec       	ldi	r18, 0xC0	; 192
    85ee:	37 e2       	ldi	r19, 0x27	; 39
    85f0:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
				display_writeBufferToScreen();
    85f4:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>

	return tmp2;
}

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    85f8:	10 92 04 2a 	sts	0x2A04, r1
  	temperatureBufferToWriteTo = 1;
    85fc:	81 e0       	ldi	r24, 0x01	; 1
    85fe:	80 93 ef 26 	sts	0x26EF, r24
	okToSendTemperatureBuffer1 = false;
    8602:	10 92 02 2a 	sts	0x2A02, r1
	okToSendTemperatureBuffer2 = false;
    8606:	10 92 03 2a 	sts	0x2A03, r1
	okToSendPressureBuffer1 = false;
	okToSendPressureBuffer2 = false;
}

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    860a:	10 92 0a 2a 	sts	0x2A0A, r1
	humidityBufferToWriteTo = 1;
    860e:	80 93 f1 26 	sts	0x26F1, r24
	okToSendHumidityBuffer1 = false;
    8612:	10 92 08 2a 	sts	0x2A08, r1
	okToSendHumidityBuffer2 = false;
    8616:	10 92 09 2a 	sts	0x2A09, r1
	okToSendTemperatureBuffer1 = false;
	okToSendTemperatureBuffer2 = false;
}

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    861a:	10 92 07 2a 	sts	0x2A07, r1
	pressureBufferToWriteTo = 1;
    861e:	80 93 f0 26 	sts	0x26F0, r24
	okToSendPressureBuffer1 = false;
    8622:	10 92 05 2a 	sts	0x2A05, r1
	okToSendPressureBuffer2 = false;
    8626:	10 92 06 2a 	sts	0x2A06, r1
	okToSendHumidityBuffer1 = false;
	okToSendHumidityBuffer2 = false;
}

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    862a:	10 92 0d 2a 	sts	0x2A0D, r1
    862e:	10 92 0e 2a 	sts	0x2A0E, r1
	microphoneBufferToWriteTo = 1;
    8632:	80 93 f2 26 	sts	0x26F2, r24
	okToSendMicrophoneBuffer1 = false;
    8636:	10 92 0b 2a 	sts	0x2A0B, r1
	okToSendMicrophoneBuffer2 = false;
    863a:	10 92 0c 2a 	sts	0x2A0C, r1
}

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    863e:	10 92 11 2a 	sts	0x2A11, r1
	lightBufferToWriteTo = 1;
    8642:	80 93 f3 26 	sts	0x26F3, r24
	okToSendLightBuffer1 = false;
    8646:	10 92 0f 2a 	sts	0x2A0F, r1
	okToSendLightBuffer2 = false;
    864a:	10 92 10 2a 	sts	0x2A10, r1
				Sensors_ResetHumidityBuffers();
				Sensors_ResetPressureBuffers();
				Sensors_ResetMicrophoneBuffers();
				Sensors_ResetLightBuffers();

				SD_Close();
    864e:	0e 94 c4 24 	call	0x4988	; 0x4988 <SD_Close>
    8652:	80 e2       	ldi	r24, 0x20	; 32
    8654:	9e e4       	ldi	r25, 0x4E	; 78
    8656:	5b cf       	rjmp	.-330    	; 0x850e <main+0x45a>
    8658:	d8 01       	movw	r26, r16
    865a:	15 96       	adiw	r26, 0x05	; 5
    865c:	cc 92       	st	X, r12
    865e:	15 97       	sbiw	r26, 0x05	; 5
}

void Leds_Clear(uint8_t led){
	Leds_Port.OUTCLR = (1 << led);
    8660:	16 96       	adiw	r26, 0x06	; 6
    8662:	dc 92       	st	X, r13

				while(true){
					if(SD_Inserted()){
						Leds_Set(sd_Green);
						Leds_Clear(sd_Red);
						display_writeBufferToScreen();
    8664:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
						display_putString(" Press Select To ",3,0,System5x7);
    8668:	85 e9       	ldi	r24, 0x95	; 149
    866a:	96 e2       	ldi	r25, 0x26	; 38
    866c:	63 e0       	ldi	r22, 0x03	; 3
    866e:	40 e0       	ldi	r20, 0x00	; 0
    8670:	20 ec       	ldi	r18, 0xC0	; 192
    8672:	37 e2       	ldi	r19, 0x27	; 39
    8674:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
						display_putString("  Record Again   ",4,0,System5x7);
    8678:	87 ea       	ldi	r24, 0xA7	; 167
    867a:	96 e2       	ldi	r25, 0x26	; 38
    867c:	64 e0       	ldi	r22, 0x04	; 4
    867e:	40 e0       	ldi	r20, 0x00	; 0
    8680:	20 ec       	ldi	r18, 0xC0	; 192
    8682:	37 e2       	ldi	r19, 0x27	; 39
    8684:	0e 94 90 27 	call	0x4f20	; 0x4f20 <display_putString>
						display_writeBufferToScreen();
    8688:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <display_writeBufferToScreen>
    868c:	88 ee       	ldi	r24, 0xE8	; 232
    868e:	93 e0       	ldi	r25, 0x03	; 3
    8690:	6b cf       	rjmp	.-298    	; 0x8568 <main+0x4b4>

00008692 <__mulsi3>:
    8692:	62 9f       	mul	r22, r18
    8694:	d0 01       	movw	r26, r0
    8696:	73 9f       	mul	r23, r19
    8698:	f0 01       	movw	r30, r0
    869a:	82 9f       	mul	r24, r18
    869c:	e0 0d       	add	r30, r0
    869e:	f1 1d       	adc	r31, r1
    86a0:	64 9f       	mul	r22, r20
    86a2:	e0 0d       	add	r30, r0
    86a4:	f1 1d       	adc	r31, r1
    86a6:	92 9f       	mul	r25, r18
    86a8:	f0 0d       	add	r31, r0
    86aa:	83 9f       	mul	r24, r19
    86ac:	f0 0d       	add	r31, r0
    86ae:	74 9f       	mul	r23, r20
    86b0:	f0 0d       	add	r31, r0
    86b2:	65 9f       	mul	r22, r21
    86b4:	f0 0d       	add	r31, r0
    86b6:	99 27       	eor	r25, r25
    86b8:	72 9f       	mul	r23, r18
    86ba:	b0 0d       	add	r27, r0
    86bc:	e1 1d       	adc	r30, r1
    86be:	f9 1f       	adc	r31, r25
    86c0:	63 9f       	mul	r22, r19
    86c2:	b0 0d       	add	r27, r0
    86c4:	e1 1d       	adc	r30, r1
    86c6:	f9 1f       	adc	r31, r25
    86c8:	bd 01       	movw	r22, r26
    86ca:	cf 01       	movw	r24, r30
    86cc:	11 24       	eor	r1, r1
    86ce:	08 95       	ret

000086d0 <__udivmodqi4>:
    86d0:	99 1b       	sub	r25, r25
    86d2:	79 e0       	ldi	r23, 0x09	; 9
    86d4:	04 c0       	rjmp	.+8      	; 0x86de <__udivmodqi4_ep>

000086d6 <__udivmodqi4_loop>:
    86d6:	99 1f       	adc	r25, r25
    86d8:	96 17       	cp	r25, r22
    86da:	08 f0       	brcs	.+2      	; 0x86de <__udivmodqi4_ep>
    86dc:	96 1b       	sub	r25, r22

000086de <__udivmodqi4_ep>:
    86de:	88 1f       	adc	r24, r24
    86e0:	7a 95       	dec	r23
    86e2:	c9 f7       	brne	.-14     	; 0x86d6 <__udivmodqi4_loop>
    86e4:	80 95       	com	r24
    86e6:	08 95       	ret

000086e8 <__divmodhi4>:
    86e8:	97 fb       	bst	r25, 7
    86ea:	09 2e       	mov	r0, r25
    86ec:	07 26       	eor	r0, r23
    86ee:	0a d0       	rcall	.+20     	; 0x8704 <__divmodhi4_neg1>
    86f0:	77 fd       	sbrc	r23, 7
    86f2:	04 d0       	rcall	.+8      	; 0x86fc <__divmodhi4_neg2>
    86f4:	2e d0       	rcall	.+92     	; 0x8752 <__udivmodhi4>
    86f6:	06 d0       	rcall	.+12     	; 0x8704 <__divmodhi4_neg1>
    86f8:	00 20       	and	r0, r0
    86fa:	1a f4       	brpl	.+6      	; 0x8702 <__divmodhi4_exit>

000086fc <__divmodhi4_neg2>:
    86fc:	70 95       	com	r23
    86fe:	61 95       	neg	r22
    8700:	7f 4f       	sbci	r23, 0xFF	; 255

00008702 <__divmodhi4_exit>:
    8702:	08 95       	ret

00008704 <__divmodhi4_neg1>:
    8704:	f6 f7       	brtc	.-4      	; 0x8702 <__divmodhi4_exit>
    8706:	90 95       	com	r25
    8708:	81 95       	neg	r24
    870a:	9f 4f       	sbci	r25, 0xFF	; 255
    870c:	08 95       	ret

0000870e <__udivmodsi4>:
    870e:	a1 e2       	ldi	r26, 0x21	; 33
    8710:	1a 2e       	mov	r1, r26
    8712:	aa 1b       	sub	r26, r26
    8714:	bb 1b       	sub	r27, r27
    8716:	fd 01       	movw	r30, r26
    8718:	0d c0       	rjmp	.+26     	; 0x8734 <__udivmodsi4_ep>

0000871a <__udivmodsi4_loop>:
    871a:	aa 1f       	adc	r26, r26
    871c:	bb 1f       	adc	r27, r27
    871e:	ee 1f       	adc	r30, r30
    8720:	ff 1f       	adc	r31, r31
    8722:	a2 17       	cp	r26, r18
    8724:	b3 07       	cpc	r27, r19
    8726:	e4 07       	cpc	r30, r20
    8728:	f5 07       	cpc	r31, r21
    872a:	20 f0       	brcs	.+8      	; 0x8734 <__udivmodsi4_ep>
    872c:	a2 1b       	sub	r26, r18
    872e:	b3 0b       	sbc	r27, r19
    8730:	e4 0b       	sbc	r30, r20
    8732:	f5 0b       	sbc	r31, r21

00008734 <__udivmodsi4_ep>:
    8734:	66 1f       	adc	r22, r22
    8736:	77 1f       	adc	r23, r23
    8738:	88 1f       	adc	r24, r24
    873a:	99 1f       	adc	r25, r25
    873c:	1a 94       	dec	r1
    873e:	69 f7       	brne	.-38     	; 0x871a <__udivmodsi4_loop>
    8740:	60 95       	com	r22
    8742:	70 95       	com	r23
    8744:	80 95       	com	r24
    8746:	90 95       	com	r25
    8748:	9b 01       	movw	r18, r22
    874a:	ac 01       	movw	r20, r24
    874c:	bd 01       	movw	r22, r26
    874e:	cf 01       	movw	r24, r30
    8750:	08 95       	ret

00008752 <__udivmodhi4>:
    8752:	aa 1b       	sub	r26, r26
    8754:	bb 1b       	sub	r27, r27
    8756:	51 e1       	ldi	r21, 0x11	; 17
    8758:	07 c0       	rjmp	.+14     	; 0x8768 <__udivmodhi4_ep>

0000875a <__udivmodhi4_loop>:
    875a:	aa 1f       	adc	r26, r26
    875c:	bb 1f       	adc	r27, r27
    875e:	a6 17       	cp	r26, r22
    8760:	b7 07       	cpc	r27, r23
    8762:	10 f0       	brcs	.+4      	; 0x8768 <__udivmodhi4_ep>
    8764:	a6 1b       	sub	r26, r22
    8766:	b7 0b       	sbc	r27, r23

00008768 <__udivmodhi4_ep>:
    8768:	88 1f       	adc	r24, r24
    876a:	99 1f       	adc	r25, r25
    876c:	5a 95       	dec	r21
    876e:	a9 f7       	brne	.-22     	; 0x875a <__udivmodhi4_loop>
    8770:	80 95       	com	r24
    8772:	90 95       	com	r25
    8774:	bc 01       	movw	r22, r24
    8776:	cd 01       	movw	r24, r26
    8778:	08 95       	ret

0000877a <atol>:
    877a:	1f 93       	push	r17
    877c:	fc 01       	movw	r30, r24
    877e:	99 27       	eor	r25, r25
    8780:	88 27       	eor	r24, r24
    8782:	bc 01       	movw	r22, r24
    8784:	e8 94       	clt
    8786:	11 91       	ld	r17, Z+
    8788:	10 32       	cpi	r17, 0x20	; 32
    878a:	e9 f3       	breq	.-6      	; 0x8786 <atol+0xc>
    878c:	19 30       	cpi	r17, 0x09	; 9
    878e:	10 f0       	brcs	.+4      	; 0x8794 <atol+0x1a>
    8790:	1e 30       	cpi	r17, 0x0E	; 14
    8792:	c8 f3       	brcs	.-14     	; 0x8786 <atol+0xc>
    8794:	1b 32       	cpi	r17, 0x2B	; 43
    8796:	51 f0       	breq	.+20     	; 0x87ac <atol+0x32>
    8798:	1d 32       	cpi	r17, 0x2D	; 45
    879a:	49 f4       	brne	.+18     	; 0x87ae <atol+0x34>
    879c:	68 94       	set
    879e:	06 c0       	rjmp	.+12     	; 0x87ac <atol+0x32>
    87a0:	0e 94 69 44 	call	0x88d2	; 0x88d2 <__mulsi_const_10>
    87a4:	61 0f       	add	r22, r17
    87a6:	71 1d       	adc	r23, r1
    87a8:	81 1d       	adc	r24, r1
    87aa:	91 1d       	adc	r25, r1
    87ac:	11 91       	ld	r17, Z+
    87ae:	10 53       	subi	r17, 0x30	; 48
    87b0:	1a 30       	cpi	r17, 0x0A	; 10
    87b2:	b0 f3       	brcs	.-20     	; 0x87a0 <atol+0x26>
    87b4:	3e f4       	brtc	.+14     	; 0x87c4 <atol+0x4a>
    87b6:	90 95       	com	r25
    87b8:	80 95       	com	r24
    87ba:	70 95       	com	r23
    87bc:	61 95       	neg	r22
    87be:	7f 4f       	sbci	r23, 0xFF	; 255
    87c0:	8f 4f       	sbci	r24, 0xFF	; 255
    87c2:	9f 4f       	sbci	r25, 0xFF	; 255
    87c4:	1f 91       	pop	r17
    87c6:	08 95       	ret

000087c8 <strtok>:
    87c8:	4f e4       	ldi	r20, 0x4F	; 79
    87ca:	5c e2       	ldi	r21, 0x2C	; 44
    87cc:	0e 94 0e 44 	call	0x881c	; 0x881c <strtok_r>
    87d0:	08 95       	ret

000087d2 <strcat>:
    87d2:	fb 01       	movw	r30, r22
    87d4:	dc 01       	movw	r26, r24
    87d6:	0d 90       	ld	r0, X+
    87d8:	00 20       	and	r0, r0
    87da:	e9 f7       	brne	.-6      	; 0x87d6 <strcat+0x4>
    87dc:	11 97       	sbiw	r26, 0x01	; 1
    87de:	01 90       	ld	r0, Z+
    87e0:	0d 92       	st	X+, r0
    87e2:	00 20       	and	r0, r0
    87e4:	e1 f7       	brne	.-8      	; 0x87de <strcat+0xc>
    87e6:	08 95       	ret

000087e8 <strstr>:
    87e8:	fb 01       	movw	r30, r22
    87ea:	51 91       	ld	r21, Z+
    87ec:	55 23       	and	r21, r21
    87ee:	a9 f0       	breq	.+42     	; 0x881a <strstr+0x32>
    87f0:	bf 01       	movw	r22, r30
    87f2:	dc 01       	movw	r26, r24
    87f4:	4d 91       	ld	r20, X+
    87f6:	45 17       	cp	r20, r21
    87f8:	41 11       	cpse	r20, r1
    87fa:	e1 f7       	brne	.-8      	; 0x87f4 <strstr+0xc>
    87fc:	59 f4       	brne	.+22     	; 0x8814 <strstr+0x2c>
    87fe:	cd 01       	movw	r24, r26
    8800:	01 90       	ld	r0, Z+
    8802:	00 20       	and	r0, r0
    8804:	49 f0       	breq	.+18     	; 0x8818 <strstr+0x30>
    8806:	4d 91       	ld	r20, X+
    8808:	40 15       	cp	r20, r0
    880a:	41 11       	cpse	r20, r1
    880c:	c9 f3       	breq	.-14     	; 0x8800 <strstr+0x18>
    880e:	fb 01       	movw	r30, r22
    8810:	41 11       	cpse	r20, r1
    8812:	ef cf       	rjmp	.-34     	; 0x87f2 <strstr+0xa>
    8814:	81 e0       	ldi	r24, 0x01	; 1
    8816:	90 e0       	ldi	r25, 0x00	; 0
    8818:	01 97       	sbiw	r24, 0x01	; 1
    881a:	08 95       	ret

0000881c <strtok_r>:
    881c:	fa 01       	movw	r30, r20
    881e:	a1 91       	ld	r26, Z+
    8820:	b0 81       	ld	r27, Z
    8822:	00 97       	sbiw	r24, 0x00	; 0
    8824:	19 f4       	brne	.+6      	; 0x882c <strtok_r+0x10>
    8826:	10 97       	sbiw	r26, 0x00	; 0
    8828:	e1 f0       	breq	.+56     	; 0x8862 <strtok_r+0x46>
    882a:	cd 01       	movw	r24, r26
    882c:	dc 01       	movw	r26, r24
    882e:	cd 01       	movw	r24, r26
    8830:	0d 90       	ld	r0, X+
    8832:	00 20       	and	r0, r0
    8834:	11 f4       	brne	.+4      	; 0x883a <strtok_r+0x1e>
    8836:	c0 01       	movw	r24, r0
    8838:	13 c0       	rjmp	.+38     	; 0x8860 <strtok_r+0x44>
    883a:	fb 01       	movw	r30, r22
    883c:	21 91       	ld	r18, Z+
    883e:	22 23       	and	r18, r18
    8840:	19 f0       	breq	.+6      	; 0x8848 <strtok_r+0x2c>
    8842:	20 15       	cp	r18, r0
    8844:	d9 f7       	brne	.-10     	; 0x883c <strtok_r+0x20>
    8846:	f3 cf       	rjmp	.-26     	; 0x882e <strtok_r+0x12>
    8848:	fb 01       	movw	r30, r22
    884a:	21 91       	ld	r18, Z+
    884c:	20 15       	cp	r18, r0
    884e:	19 f4       	brne	.+6      	; 0x8856 <strtok_r+0x3a>
    8850:	1e 92       	st	-X, r1
    8852:	11 96       	adiw	r26, 0x01	; 1
    8854:	06 c0       	rjmp	.+12     	; 0x8862 <strtok_r+0x46>
    8856:	22 23       	and	r18, r18
    8858:	c1 f7       	brne	.-16     	; 0x884a <strtok_r+0x2e>
    885a:	0d 90       	ld	r0, X+
    885c:	00 20       	and	r0, r0
    885e:	a1 f7       	brne	.-24     	; 0x8848 <strtok_r+0x2c>
    8860:	d0 01       	movw	r26, r0
    8862:	fa 01       	movw	r30, r20
    8864:	a1 93       	st	Z+, r26
    8866:	b0 83       	st	Z, r27
    8868:	08 95       	ret

0000886a <ltoa>:
    886a:	fa 01       	movw	r30, r20
    886c:	cf 93       	push	r28
    886e:	ff 93       	push	r31
    8870:	ef 93       	push	r30
    8872:	22 30       	cpi	r18, 0x02	; 2
    8874:	44 f1       	brlt	.+80     	; 0x88c6 <ltoa+0x5c>
    8876:	25 32       	cpi	r18, 0x25	; 37
    8878:	34 f5       	brge	.+76     	; 0x88c6 <ltoa+0x5c>
    887a:	c2 2f       	mov	r28, r18
    887c:	e8 94       	clt
    887e:	ca 30       	cpi	r28, 0x0A	; 10
    8880:	49 f4       	brne	.+18     	; 0x8894 <ltoa+0x2a>
    8882:	97 fb       	bst	r25, 7
    8884:	3e f4       	brtc	.+14     	; 0x8894 <ltoa+0x2a>
    8886:	90 95       	com	r25
    8888:	80 95       	com	r24
    888a:	70 95       	com	r23
    888c:	61 95       	neg	r22
    888e:	7f 4f       	sbci	r23, 0xFF	; 255
    8890:	8f 4f       	sbci	r24, 0xFF	; 255
    8892:	9f 4f       	sbci	r25, 0xFF	; 255
    8894:	2c 2f       	mov	r18, r28
    8896:	33 27       	eor	r19, r19
    8898:	44 27       	eor	r20, r20
    889a:	55 27       	eor	r21, r21
    889c:	ff 93       	push	r31
    889e:	ef 93       	push	r30
    88a0:	0e 94 87 43 	call	0x870e	; 0x870e <__udivmodsi4>
    88a4:	ef 91       	pop	r30
    88a6:	ff 91       	pop	r31
    88a8:	60 5d       	subi	r22, 0xD0	; 208
    88aa:	6a 33       	cpi	r22, 0x3A	; 58
    88ac:	0c f0       	brlt	.+2      	; 0x88b0 <ltoa+0x46>
    88ae:	69 5d       	subi	r22, 0xD9	; 217
    88b0:	61 93       	st	Z+, r22
    88b2:	b9 01       	movw	r22, r18
    88b4:	ca 01       	movw	r24, r20
    88b6:	60 50       	subi	r22, 0x00	; 0
    88b8:	70 40       	sbci	r23, 0x00	; 0
    88ba:	80 40       	sbci	r24, 0x00	; 0
    88bc:	90 40       	sbci	r25, 0x00	; 0
    88be:	51 f7       	brne	.-44     	; 0x8894 <ltoa+0x2a>
    88c0:	16 f4       	brtc	.+4      	; 0x88c6 <ltoa+0x5c>
    88c2:	cd e2       	ldi	r28, 0x2D	; 45
    88c4:	c1 93       	st	Z+, r28
    88c6:	10 82       	st	Z, r1
    88c8:	8f 91       	pop	r24
    88ca:	9f 91       	pop	r25
    88cc:	cf 91       	pop	r28
    88ce:	0c 94 bf 46 	jmp	0x8d7e	; 0x8d7e <strrev>

000088d2 <__mulsi_const_10>:
    88d2:	59 2f       	mov	r21, r25
    88d4:	48 2f       	mov	r20, r24
    88d6:	37 2f       	mov	r19, r23
    88d8:	26 2f       	mov	r18, r22
    88da:	66 0f       	add	r22, r22
    88dc:	77 1f       	adc	r23, r23
    88de:	88 1f       	adc	r24, r24
    88e0:	99 1f       	adc	r25, r25
    88e2:	66 0f       	add	r22, r22
    88e4:	77 1f       	adc	r23, r23
    88e6:	88 1f       	adc	r24, r24
    88e8:	99 1f       	adc	r25, r25
    88ea:	62 0f       	add	r22, r18
    88ec:	73 1f       	adc	r23, r19
    88ee:	84 1f       	adc	r24, r20
    88f0:	95 1f       	adc	r25, r21
    88f2:	66 0f       	add	r22, r22
    88f4:	77 1f       	adc	r23, r23
    88f6:	88 1f       	adc	r24, r24
    88f8:	99 1f       	adc	r25, r25
    88fa:	08 95       	ret

000088fc <sprintf>:
    88fc:	0f 93       	push	r16
    88fe:	1f 93       	push	r17
    8900:	df 93       	push	r29
    8902:	cf 93       	push	r28
    8904:	cd b7       	in	r28, 0x3d	; 61
    8906:	de b7       	in	r29, 0x3e	; 62
    8908:	2e 97       	sbiw	r28, 0x0e	; 14
    890a:	cd bf       	out	0x3d, r28	; 61
    890c:	de bf       	out	0x3e, r29	; 62
    890e:	0e 89       	ldd	r16, Y+22	; 0x16
    8910:	1f 89       	ldd	r17, Y+23	; 0x17
    8912:	86 e0       	ldi	r24, 0x06	; 6
    8914:	8c 83       	std	Y+4, r24	; 0x04
    8916:	09 83       	std	Y+1, r16	; 0x01
    8918:	1a 83       	std	Y+2, r17	; 0x02
    891a:	8f ef       	ldi	r24, 0xFF	; 255
    891c:	9f e7       	ldi	r25, 0x7F	; 127
    891e:	8d 83       	std	Y+5, r24	; 0x05
    8920:	9e 83       	std	Y+6, r25	; 0x06
    8922:	9e 01       	movw	r18, r28
    8924:	26 5e       	subi	r18, 0xE6	; 230
    8926:	3f 4f       	sbci	r19, 0xFF	; 255
    8928:	ce 01       	movw	r24, r28
    892a:	01 96       	adiw	r24, 0x01	; 1
    892c:	68 8d       	ldd	r22, Y+24	; 0x18
    892e:	79 8d       	ldd	r23, Y+25	; 0x19
    8930:	a9 01       	movw	r20, r18
    8932:	0e 94 a9 44 	call	0x8952	; 0x8952 <vfprintf>
    8936:	2f 81       	ldd	r18, Y+7	; 0x07
    8938:	38 85       	ldd	r19, Y+8	; 0x08
    893a:	02 0f       	add	r16, r18
    893c:	13 1f       	adc	r17, r19
    893e:	f8 01       	movw	r30, r16
    8940:	10 82       	st	Z, r1
    8942:	2e 96       	adiw	r28, 0x0e	; 14
    8944:	cd bf       	out	0x3d, r28	; 61
    8946:	de bf       	out	0x3e, r29	; 62
    8948:	cf 91       	pop	r28
    894a:	df 91       	pop	r29
    894c:	1f 91       	pop	r17
    894e:	0f 91       	pop	r16
    8950:	08 95       	ret

00008952 <vfprintf>:
    8952:	2f 92       	push	r2
    8954:	3f 92       	push	r3
    8956:	4f 92       	push	r4
    8958:	5f 92       	push	r5
    895a:	6f 92       	push	r6
    895c:	7f 92       	push	r7
    895e:	8f 92       	push	r8
    8960:	9f 92       	push	r9
    8962:	af 92       	push	r10
    8964:	bf 92       	push	r11
    8966:	cf 92       	push	r12
    8968:	df 92       	push	r13
    896a:	ef 92       	push	r14
    896c:	ff 92       	push	r15
    896e:	0f 93       	push	r16
    8970:	1f 93       	push	r17
    8972:	df 93       	push	r29
    8974:	cf 93       	push	r28
    8976:	cd b7       	in	r28, 0x3d	; 61
    8978:	de b7       	in	r29, 0x3e	; 62
    897a:	2b 97       	sbiw	r28, 0x0b	; 11
    897c:	cd bf       	out	0x3d, r28	; 61
    897e:	de bf       	out	0x3e, r29	; 62
    8980:	3c 01       	movw	r6, r24
    8982:	2b 01       	movw	r4, r22
    8984:	5a 01       	movw	r10, r20
    8986:	fc 01       	movw	r30, r24
    8988:	16 82       	std	Z+6, r1	; 0x06
    898a:	17 82       	std	Z+7, r1	; 0x07
    898c:	83 81       	ldd	r24, Z+3	; 0x03
    898e:	81 fd       	sbrc	r24, 1
    8990:	03 c0       	rjmp	.+6      	; 0x8998 <vfprintf+0x46>
    8992:	6f ef       	ldi	r22, 0xFF	; 255
    8994:	7f ef       	ldi	r23, 0xFF	; 255
    8996:	c6 c1       	rjmp	.+908    	; 0x8d24 <vfprintf+0x3d2>
    8998:	9a e0       	ldi	r25, 0x0A	; 10
    899a:	89 2e       	mov	r8, r25
    899c:	1e 01       	movw	r2, r28
    899e:	08 94       	sec
    89a0:	21 1c       	adc	r2, r1
    89a2:	31 1c       	adc	r3, r1
    89a4:	f3 01       	movw	r30, r6
    89a6:	23 81       	ldd	r18, Z+3	; 0x03
    89a8:	f2 01       	movw	r30, r4
    89aa:	23 fd       	sbrc	r18, 3
    89ac:	85 91       	lpm	r24, Z+
    89ae:	23 ff       	sbrs	r18, 3
    89b0:	81 91       	ld	r24, Z+
    89b2:	2f 01       	movw	r4, r30
    89b4:	88 23       	and	r24, r24
    89b6:	09 f4       	brne	.+2      	; 0x89ba <vfprintf+0x68>
    89b8:	b2 c1       	rjmp	.+868    	; 0x8d1e <vfprintf+0x3cc>
    89ba:	85 32       	cpi	r24, 0x25	; 37
    89bc:	39 f4       	brne	.+14     	; 0x89cc <vfprintf+0x7a>
    89be:	23 fd       	sbrc	r18, 3
    89c0:	85 91       	lpm	r24, Z+
    89c2:	23 ff       	sbrs	r18, 3
    89c4:	81 91       	ld	r24, Z+
    89c6:	2f 01       	movw	r4, r30
    89c8:	85 32       	cpi	r24, 0x25	; 37
    89ca:	29 f4       	brne	.+10     	; 0x89d6 <vfprintf+0x84>
    89cc:	90 e0       	ldi	r25, 0x00	; 0
    89ce:	b3 01       	movw	r22, r6
    89d0:	0e 94 cf 46 	call	0x8d9e	; 0x8d9e <fputc>
    89d4:	e7 cf       	rjmp	.-50     	; 0x89a4 <vfprintf+0x52>
    89d6:	98 2f       	mov	r25, r24
    89d8:	ff 24       	eor	r15, r15
    89da:	ee 24       	eor	r14, r14
    89dc:	99 24       	eor	r9, r9
    89de:	ff e1       	ldi	r31, 0x1F	; 31
    89e0:	ff 15       	cp	r31, r15
    89e2:	d0 f0       	brcs	.+52     	; 0x8a18 <vfprintf+0xc6>
    89e4:	9b 32       	cpi	r25, 0x2B	; 43
    89e6:	69 f0       	breq	.+26     	; 0x8a02 <vfprintf+0xb0>
    89e8:	9c 32       	cpi	r25, 0x2C	; 44
    89ea:	28 f4       	brcc	.+10     	; 0x89f6 <vfprintf+0xa4>
    89ec:	90 32       	cpi	r25, 0x20	; 32
    89ee:	59 f0       	breq	.+22     	; 0x8a06 <vfprintf+0xb4>
    89f0:	93 32       	cpi	r25, 0x23	; 35
    89f2:	91 f4       	brne	.+36     	; 0x8a18 <vfprintf+0xc6>
    89f4:	0e c0       	rjmp	.+28     	; 0x8a12 <vfprintf+0xc0>
    89f6:	9d 32       	cpi	r25, 0x2D	; 45
    89f8:	49 f0       	breq	.+18     	; 0x8a0c <vfprintf+0xba>
    89fa:	90 33       	cpi	r25, 0x30	; 48
    89fc:	69 f4       	brne	.+26     	; 0x8a18 <vfprintf+0xc6>
    89fe:	41 e0       	ldi	r20, 0x01	; 1
    8a00:	24 c0       	rjmp	.+72     	; 0x8a4a <vfprintf+0xf8>
    8a02:	52 e0       	ldi	r21, 0x02	; 2
    8a04:	f5 2a       	or	r15, r21
    8a06:	84 e0       	ldi	r24, 0x04	; 4
    8a08:	f8 2a       	or	r15, r24
    8a0a:	28 c0       	rjmp	.+80     	; 0x8a5c <vfprintf+0x10a>
    8a0c:	98 e0       	ldi	r25, 0x08	; 8
    8a0e:	f9 2a       	or	r15, r25
    8a10:	25 c0       	rjmp	.+74     	; 0x8a5c <vfprintf+0x10a>
    8a12:	e0 e1       	ldi	r30, 0x10	; 16
    8a14:	fe 2a       	or	r15, r30
    8a16:	22 c0       	rjmp	.+68     	; 0x8a5c <vfprintf+0x10a>
    8a18:	f7 fc       	sbrc	r15, 7
    8a1a:	29 c0       	rjmp	.+82     	; 0x8a6e <vfprintf+0x11c>
    8a1c:	89 2f       	mov	r24, r25
    8a1e:	80 53       	subi	r24, 0x30	; 48
    8a20:	8a 30       	cpi	r24, 0x0A	; 10
    8a22:	70 f4       	brcc	.+28     	; 0x8a40 <vfprintf+0xee>
    8a24:	f6 fe       	sbrs	r15, 6
    8a26:	05 c0       	rjmp	.+10     	; 0x8a32 <vfprintf+0xe0>
    8a28:	98 9c       	mul	r9, r8
    8a2a:	90 2c       	mov	r9, r0
    8a2c:	11 24       	eor	r1, r1
    8a2e:	98 0e       	add	r9, r24
    8a30:	15 c0       	rjmp	.+42     	; 0x8a5c <vfprintf+0x10a>
    8a32:	e8 9c       	mul	r14, r8
    8a34:	e0 2c       	mov	r14, r0
    8a36:	11 24       	eor	r1, r1
    8a38:	e8 0e       	add	r14, r24
    8a3a:	f0 e2       	ldi	r31, 0x20	; 32
    8a3c:	ff 2a       	or	r15, r31
    8a3e:	0e c0       	rjmp	.+28     	; 0x8a5c <vfprintf+0x10a>
    8a40:	9e 32       	cpi	r25, 0x2E	; 46
    8a42:	29 f4       	brne	.+10     	; 0x8a4e <vfprintf+0xfc>
    8a44:	f6 fc       	sbrc	r15, 6
    8a46:	6b c1       	rjmp	.+726    	; 0x8d1e <vfprintf+0x3cc>
    8a48:	40 e4       	ldi	r20, 0x40	; 64
    8a4a:	f4 2a       	or	r15, r20
    8a4c:	07 c0       	rjmp	.+14     	; 0x8a5c <vfprintf+0x10a>
    8a4e:	9c 36       	cpi	r25, 0x6C	; 108
    8a50:	19 f4       	brne	.+6      	; 0x8a58 <vfprintf+0x106>
    8a52:	50 e8       	ldi	r21, 0x80	; 128
    8a54:	f5 2a       	or	r15, r21
    8a56:	02 c0       	rjmp	.+4      	; 0x8a5c <vfprintf+0x10a>
    8a58:	98 36       	cpi	r25, 0x68	; 104
    8a5a:	49 f4       	brne	.+18     	; 0x8a6e <vfprintf+0x11c>
    8a5c:	f2 01       	movw	r30, r4
    8a5e:	23 fd       	sbrc	r18, 3
    8a60:	95 91       	lpm	r25, Z+
    8a62:	23 ff       	sbrs	r18, 3
    8a64:	91 91       	ld	r25, Z+
    8a66:	2f 01       	movw	r4, r30
    8a68:	99 23       	and	r25, r25
    8a6a:	09 f0       	breq	.+2      	; 0x8a6e <vfprintf+0x11c>
    8a6c:	b8 cf       	rjmp	.-144    	; 0x89de <vfprintf+0x8c>
    8a6e:	89 2f       	mov	r24, r25
    8a70:	85 54       	subi	r24, 0x45	; 69
    8a72:	83 30       	cpi	r24, 0x03	; 3
    8a74:	18 f0       	brcs	.+6      	; 0x8a7c <vfprintf+0x12a>
    8a76:	80 52       	subi	r24, 0x20	; 32
    8a78:	83 30       	cpi	r24, 0x03	; 3
    8a7a:	38 f4       	brcc	.+14     	; 0x8a8a <vfprintf+0x138>
    8a7c:	44 e0       	ldi	r20, 0x04	; 4
    8a7e:	50 e0       	ldi	r21, 0x00	; 0
    8a80:	a4 0e       	add	r10, r20
    8a82:	b5 1e       	adc	r11, r21
    8a84:	5f e3       	ldi	r21, 0x3F	; 63
    8a86:	59 83       	std	Y+1, r21	; 0x01
    8a88:	0f c0       	rjmp	.+30     	; 0x8aa8 <vfprintf+0x156>
    8a8a:	93 36       	cpi	r25, 0x63	; 99
    8a8c:	31 f0       	breq	.+12     	; 0x8a9a <vfprintf+0x148>
    8a8e:	93 37       	cpi	r25, 0x73	; 115
    8a90:	79 f0       	breq	.+30     	; 0x8ab0 <vfprintf+0x15e>
    8a92:	93 35       	cpi	r25, 0x53	; 83
    8a94:	09 f0       	breq	.+2      	; 0x8a98 <vfprintf+0x146>
    8a96:	56 c0       	rjmp	.+172    	; 0x8b44 <vfprintf+0x1f2>
    8a98:	20 c0       	rjmp	.+64     	; 0x8ada <vfprintf+0x188>
    8a9a:	f5 01       	movw	r30, r10
    8a9c:	80 81       	ld	r24, Z
    8a9e:	89 83       	std	Y+1, r24	; 0x01
    8aa0:	42 e0       	ldi	r20, 0x02	; 2
    8aa2:	50 e0       	ldi	r21, 0x00	; 0
    8aa4:	a4 0e       	add	r10, r20
    8aa6:	b5 1e       	adc	r11, r21
    8aa8:	61 01       	movw	r12, r2
    8aaa:	01 e0       	ldi	r16, 0x01	; 1
    8aac:	10 e0       	ldi	r17, 0x00	; 0
    8aae:	12 c0       	rjmp	.+36     	; 0x8ad4 <vfprintf+0x182>
    8ab0:	f5 01       	movw	r30, r10
    8ab2:	c0 80       	ld	r12, Z
    8ab4:	d1 80       	ldd	r13, Z+1	; 0x01
    8ab6:	f6 fc       	sbrc	r15, 6
    8ab8:	03 c0       	rjmp	.+6      	; 0x8ac0 <vfprintf+0x16e>
    8aba:	6f ef       	ldi	r22, 0xFF	; 255
    8abc:	7f ef       	ldi	r23, 0xFF	; 255
    8abe:	02 c0       	rjmp	.+4      	; 0x8ac4 <vfprintf+0x172>
    8ac0:	69 2d       	mov	r22, r9
    8ac2:	70 e0       	ldi	r23, 0x00	; 0
    8ac4:	42 e0       	ldi	r20, 0x02	; 2
    8ac6:	50 e0       	ldi	r21, 0x00	; 0
    8ac8:	a4 0e       	add	r10, r20
    8aca:	b5 1e       	adc	r11, r21
    8acc:	c6 01       	movw	r24, r12
    8ace:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <strnlen>
    8ad2:	8c 01       	movw	r16, r24
    8ad4:	5f e7       	ldi	r21, 0x7F	; 127
    8ad6:	f5 22       	and	r15, r21
    8ad8:	14 c0       	rjmp	.+40     	; 0x8b02 <vfprintf+0x1b0>
    8ada:	f5 01       	movw	r30, r10
    8adc:	c0 80       	ld	r12, Z
    8ade:	d1 80       	ldd	r13, Z+1	; 0x01
    8ae0:	f6 fc       	sbrc	r15, 6
    8ae2:	03 c0       	rjmp	.+6      	; 0x8aea <vfprintf+0x198>
    8ae4:	6f ef       	ldi	r22, 0xFF	; 255
    8ae6:	7f ef       	ldi	r23, 0xFF	; 255
    8ae8:	02 c0       	rjmp	.+4      	; 0x8aee <vfprintf+0x19c>
    8aea:	69 2d       	mov	r22, r9
    8aec:	70 e0       	ldi	r23, 0x00	; 0
    8aee:	42 e0       	ldi	r20, 0x02	; 2
    8af0:	50 e0       	ldi	r21, 0x00	; 0
    8af2:	a4 0e       	add	r10, r20
    8af4:	b5 1e       	adc	r11, r21
    8af6:	c6 01       	movw	r24, r12
    8af8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <strnlen_P>
    8afc:	8c 01       	movw	r16, r24
    8afe:	50 e8       	ldi	r21, 0x80	; 128
    8b00:	f5 2a       	or	r15, r21
    8b02:	f3 fe       	sbrs	r15, 3
    8b04:	07 c0       	rjmp	.+14     	; 0x8b14 <vfprintf+0x1c2>
    8b06:	1a c0       	rjmp	.+52     	; 0x8b3c <vfprintf+0x1ea>
    8b08:	80 e2       	ldi	r24, 0x20	; 32
    8b0a:	90 e0       	ldi	r25, 0x00	; 0
    8b0c:	b3 01       	movw	r22, r6
    8b0e:	0e 94 cf 46 	call	0x8d9e	; 0x8d9e <fputc>
    8b12:	ea 94       	dec	r14
    8b14:	8e 2d       	mov	r24, r14
    8b16:	90 e0       	ldi	r25, 0x00	; 0
    8b18:	08 17       	cp	r16, r24
    8b1a:	19 07       	cpc	r17, r25
    8b1c:	a8 f3       	brcs	.-22     	; 0x8b08 <vfprintf+0x1b6>
    8b1e:	0e c0       	rjmp	.+28     	; 0x8b3c <vfprintf+0x1ea>
    8b20:	f6 01       	movw	r30, r12
    8b22:	f7 fc       	sbrc	r15, 7
    8b24:	85 91       	lpm	r24, Z+
    8b26:	f7 fe       	sbrs	r15, 7
    8b28:	81 91       	ld	r24, Z+
    8b2a:	6f 01       	movw	r12, r30
    8b2c:	90 e0       	ldi	r25, 0x00	; 0
    8b2e:	b3 01       	movw	r22, r6
    8b30:	0e 94 cf 46 	call	0x8d9e	; 0x8d9e <fputc>
    8b34:	e1 10       	cpse	r14, r1
    8b36:	ea 94       	dec	r14
    8b38:	01 50       	subi	r16, 0x01	; 1
    8b3a:	10 40       	sbci	r17, 0x00	; 0
    8b3c:	01 15       	cp	r16, r1
    8b3e:	11 05       	cpc	r17, r1
    8b40:	79 f7       	brne	.-34     	; 0x8b20 <vfprintf+0x1ce>
    8b42:	ea c0       	rjmp	.+468    	; 0x8d18 <vfprintf+0x3c6>
    8b44:	94 36       	cpi	r25, 0x64	; 100
    8b46:	11 f0       	breq	.+4      	; 0x8b4c <vfprintf+0x1fa>
    8b48:	99 36       	cpi	r25, 0x69	; 105
    8b4a:	69 f5       	brne	.+90     	; 0x8ba6 <vfprintf+0x254>
    8b4c:	f7 fe       	sbrs	r15, 7
    8b4e:	08 c0       	rjmp	.+16     	; 0x8b60 <vfprintf+0x20e>
    8b50:	f5 01       	movw	r30, r10
    8b52:	20 81       	ld	r18, Z
    8b54:	31 81       	ldd	r19, Z+1	; 0x01
    8b56:	42 81       	ldd	r20, Z+2	; 0x02
    8b58:	53 81       	ldd	r21, Z+3	; 0x03
    8b5a:	84 e0       	ldi	r24, 0x04	; 4
    8b5c:	90 e0       	ldi	r25, 0x00	; 0
    8b5e:	0a c0       	rjmp	.+20     	; 0x8b74 <vfprintf+0x222>
    8b60:	f5 01       	movw	r30, r10
    8b62:	80 81       	ld	r24, Z
    8b64:	91 81       	ldd	r25, Z+1	; 0x01
    8b66:	9c 01       	movw	r18, r24
    8b68:	44 27       	eor	r20, r20
    8b6a:	37 fd       	sbrc	r19, 7
    8b6c:	40 95       	com	r20
    8b6e:	54 2f       	mov	r21, r20
    8b70:	82 e0       	ldi	r24, 0x02	; 2
    8b72:	90 e0       	ldi	r25, 0x00	; 0
    8b74:	a8 0e       	add	r10, r24
    8b76:	b9 1e       	adc	r11, r25
    8b78:	9f e6       	ldi	r25, 0x6F	; 111
    8b7a:	f9 22       	and	r15, r25
    8b7c:	57 ff       	sbrs	r21, 7
    8b7e:	09 c0       	rjmp	.+18     	; 0x8b92 <vfprintf+0x240>
    8b80:	50 95       	com	r21
    8b82:	40 95       	com	r20
    8b84:	30 95       	com	r19
    8b86:	21 95       	neg	r18
    8b88:	3f 4f       	sbci	r19, 0xFF	; 255
    8b8a:	4f 4f       	sbci	r20, 0xFF	; 255
    8b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    8b8e:	e0 e8       	ldi	r30, 0x80	; 128
    8b90:	fe 2a       	or	r15, r30
    8b92:	ca 01       	movw	r24, r20
    8b94:	b9 01       	movw	r22, r18
    8b96:	a1 01       	movw	r20, r2
    8b98:	2a e0       	ldi	r18, 0x0A	; 10
    8b9a:	30 e0       	ldi	r19, 0x00	; 0
    8b9c:	0e 94 fb 46 	call	0x8df6	; 0x8df6 <__ultoa_invert>
    8ba0:	d8 2e       	mov	r13, r24
    8ba2:	d2 18       	sub	r13, r2
    8ba4:	40 c0       	rjmp	.+128    	; 0x8c26 <vfprintf+0x2d4>
    8ba6:	95 37       	cpi	r25, 0x75	; 117
    8ba8:	29 f4       	brne	.+10     	; 0x8bb4 <vfprintf+0x262>
    8baa:	1f 2d       	mov	r17, r15
    8bac:	1f 7e       	andi	r17, 0xEF	; 239
    8bae:	2a e0       	ldi	r18, 0x0A	; 10
    8bb0:	30 e0       	ldi	r19, 0x00	; 0
    8bb2:	1d c0       	rjmp	.+58     	; 0x8bee <vfprintf+0x29c>
    8bb4:	1f 2d       	mov	r17, r15
    8bb6:	19 7f       	andi	r17, 0xF9	; 249
    8bb8:	9f 36       	cpi	r25, 0x6F	; 111
    8bba:	61 f0       	breq	.+24     	; 0x8bd4 <vfprintf+0x282>
    8bbc:	90 37       	cpi	r25, 0x70	; 112
    8bbe:	20 f4       	brcc	.+8      	; 0x8bc8 <vfprintf+0x276>
    8bc0:	98 35       	cpi	r25, 0x58	; 88
    8bc2:	09 f0       	breq	.+2      	; 0x8bc6 <vfprintf+0x274>
    8bc4:	ac c0       	rjmp	.+344    	; 0x8d1e <vfprintf+0x3cc>
    8bc6:	0f c0       	rjmp	.+30     	; 0x8be6 <vfprintf+0x294>
    8bc8:	90 37       	cpi	r25, 0x70	; 112
    8bca:	39 f0       	breq	.+14     	; 0x8bda <vfprintf+0x288>
    8bcc:	98 37       	cpi	r25, 0x78	; 120
    8bce:	09 f0       	breq	.+2      	; 0x8bd2 <vfprintf+0x280>
    8bd0:	a6 c0       	rjmp	.+332    	; 0x8d1e <vfprintf+0x3cc>
    8bd2:	04 c0       	rjmp	.+8      	; 0x8bdc <vfprintf+0x28a>
    8bd4:	28 e0       	ldi	r18, 0x08	; 8
    8bd6:	30 e0       	ldi	r19, 0x00	; 0
    8bd8:	0a c0       	rjmp	.+20     	; 0x8bee <vfprintf+0x29c>
    8bda:	10 61       	ori	r17, 0x10	; 16
    8bdc:	14 fd       	sbrc	r17, 4
    8bde:	14 60       	ori	r17, 0x04	; 4
    8be0:	20 e1       	ldi	r18, 0x10	; 16
    8be2:	30 e0       	ldi	r19, 0x00	; 0
    8be4:	04 c0       	rjmp	.+8      	; 0x8bee <vfprintf+0x29c>
    8be6:	14 fd       	sbrc	r17, 4
    8be8:	16 60       	ori	r17, 0x06	; 6
    8bea:	20 e1       	ldi	r18, 0x10	; 16
    8bec:	32 e0       	ldi	r19, 0x02	; 2
    8bee:	17 ff       	sbrs	r17, 7
    8bf0:	08 c0       	rjmp	.+16     	; 0x8c02 <vfprintf+0x2b0>
    8bf2:	f5 01       	movw	r30, r10
    8bf4:	60 81       	ld	r22, Z
    8bf6:	71 81       	ldd	r23, Z+1	; 0x01
    8bf8:	82 81       	ldd	r24, Z+2	; 0x02
    8bfa:	93 81       	ldd	r25, Z+3	; 0x03
    8bfc:	44 e0       	ldi	r20, 0x04	; 4
    8bfe:	50 e0       	ldi	r21, 0x00	; 0
    8c00:	08 c0       	rjmp	.+16     	; 0x8c12 <vfprintf+0x2c0>
    8c02:	f5 01       	movw	r30, r10
    8c04:	80 81       	ld	r24, Z
    8c06:	91 81       	ldd	r25, Z+1	; 0x01
    8c08:	bc 01       	movw	r22, r24
    8c0a:	80 e0       	ldi	r24, 0x00	; 0
    8c0c:	90 e0       	ldi	r25, 0x00	; 0
    8c0e:	42 e0       	ldi	r20, 0x02	; 2
    8c10:	50 e0       	ldi	r21, 0x00	; 0
    8c12:	a4 0e       	add	r10, r20
    8c14:	b5 1e       	adc	r11, r21
    8c16:	a1 01       	movw	r20, r2
    8c18:	0e 94 fb 46 	call	0x8df6	; 0x8df6 <__ultoa_invert>
    8c1c:	d8 2e       	mov	r13, r24
    8c1e:	d2 18       	sub	r13, r2
    8c20:	8f e7       	ldi	r24, 0x7F	; 127
    8c22:	f8 2e       	mov	r15, r24
    8c24:	f1 22       	and	r15, r17
    8c26:	f6 fe       	sbrs	r15, 6
    8c28:	0b c0       	rjmp	.+22     	; 0x8c40 <vfprintf+0x2ee>
    8c2a:	5e ef       	ldi	r21, 0xFE	; 254
    8c2c:	f5 22       	and	r15, r21
    8c2e:	d9 14       	cp	r13, r9
    8c30:	38 f4       	brcc	.+14     	; 0x8c40 <vfprintf+0x2ee>
    8c32:	f4 fe       	sbrs	r15, 4
    8c34:	07 c0       	rjmp	.+14     	; 0x8c44 <vfprintf+0x2f2>
    8c36:	f2 fc       	sbrc	r15, 2
    8c38:	05 c0       	rjmp	.+10     	; 0x8c44 <vfprintf+0x2f2>
    8c3a:	8f ee       	ldi	r24, 0xEF	; 239
    8c3c:	f8 22       	and	r15, r24
    8c3e:	02 c0       	rjmp	.+4      	; 0x8c44 <vfprintf+0x2f2>
    8c40:	1d 2d       	mov	r17, r13
    8c42:	01 c0       	rjmp	.+2      	; 0x8c46 <vfprintf+0x2f4>
    8c44:	19 2d       	mov	r17, r9
    8c46:	f4 fe       	sbrs	r15, 4
    8c48:	0d c0       	rjmp	.+26     	; 0x8c64 <vfprintf+0x312>
    8c4a:	fe 01       	movw	r30, r28
    8c4c:	ed 0d       	add	r30, r13
    8c4e:	f1 1d       	adc	r31, r1
    8c50:	80 81       	ld	r24, Z
    8c52:	80 33       	cpi	r24, 0x30	; 48
    8c54:	19 f4       	brne	.+6      	; 0x8c5c <vfprintf+0x30a>
    8c56:	99 ee       	ldi	r25, 0xE9	; 233
    8c58:	f9 22       	and	r15, r25
    8c5a:	08 c0       	rjmp	.+16     	; 0x8c6c <vfprintf+0x31a>
    8c5c:	1f 5f       	subi	r17, 0xFF	; 255
    8c5e:	f2 fe       	sbrs	r15, 2
    8c60:	05 c0       	rjmp	.+10     	; 0x8c6c <vfprintf+0x31a>
    8c62:	03 c0       	rjmp	.+6      	; 0x8c6a <vfprintf+0x318>
    8c64:	8f 2d       	mov	r24, r15
    8c66:	86 78       	andi	r24, 0x86	; 134
    8c68:	09 f0       	breq	.+2      	; 0x8c6c <vfprintf+0x31a>
    8c6a:	1f 5f       	subi	r17, 0xFF	; 255
    8c6c:	0f 2d       	mov	r16, r15
    8c6e:	f3 fc       	sbrc	r15, 3
    8c70:	14 c0       	rjmp	.+40     	; 0x8c9a <vfprintf+0x348>
    8c72:	f0 fe       	sbrs	r15, 0
    8c74:	0f c0       	rjmp	.+30     	; 0x8c94 <vfprintf+0x342>
    8c76:	1e 15       	cp	r17, r14
    8c78:	10 f0       	brcs	.+4      	; 0x8c7e <vfprintf+0x32c>
    8c7a:	9d 2c       	mov	r9, r13
    8c7c:	0b c0       	rjmp	.+22     	; 0x8c94 <vfprintf+0x342>
    8c7e:	9d 2c       	mov	r9, r13
    8c80:	9e 0c       	add	r9, r14
    8c82:	91 1a       	sub	r9, r17
    8c84:	1e 2d       	mov	r17, r14
    8c86:	06 c0       	rjmp	.+12     	; 0x8c94 <vfprintf+0x342>
    8c88:	80 e2       	ldi	r24, 0x20	; 32
    8c8a:	90 e0       	ldi	r25, 0x00	; 0
    8c8c:	b3 01       	movw	r22, r6
    8c8e:	0e 94 cf 46 	call	0x8d9e	; 0x8d9e <fputc>
    8c92:	1f 5f       	subi	r17, 0xFF	; 255
    8c94:	1e 15       	cp	r17, r14
    8c96:	c0 f3       	brcs	.-16     	; 0x8c88 <vfprintf+0x336>
    8c98:	04 c0       	rjmp	.+8      	; 0x8ca2 <vfprintf+0x350>
    8c9a:	1e 15       	cp	r17, r14
    8c9c:	10 f4       	brcc	.+4      	; 0x8ca2 <vfprintf+0x350>
    8c9e:	e1 1a       	sub	r14, r17
    8ca0:	01 c0       	rjmp	.+2      	; 0x8ca4 <vfprintf+0x352>
    8ca2:	ee 24       	eor	r14, r14
    8ca4:	04 ff       	sbrs	r16, 4
    8ca6:	0f c0       	rjmp	.+30     	; 0x8cc6 <vfprintf+0x374>
    8ca8:	80 e3       	ldi	r24, 0x30	; 48
    8caa:	90 e0       	ldi	r25, 0x00	; 0
    8cac:	b3 01       	movw	r22, r6
    8cae:	0e 94 cf 46 	call	0x8d9e	; 0x8d9e <fputc>
    8cb2:	02 ff       	sbrs	r16, 2
    8cb4:	1d c0       	rjmp	.+58     	; 0x8cf0 <vfprintf+0x39e>
    8cb6:	01 fd       	sbrc	r16, 1
    8cb8:	03 c0       	rjmp	.+6      	; 0x8cc0 <vfprintf+0x36e>
    8cba:	88 e7       	ldi	r24, 0x78	; 120
    8cbc:	90 e0       	ldi	r25, 0x00	; 0
    8cbe:	0e c0       	rjmp	.+28     	; 0x8cdc <vfprintf+0x38a>
    8cc0:	88 e5       	ldi	r24, 0x58	; 88
    8cc2:	90 e0       	ldi	r25, 0x00	; 0
    8cc4:	0b c0       	rjmp	.+22     	; 0x8cdc <vfprintf+0x38a>
    8cc6:	80 2f       	mov	r24, r16
    8cc8:	86 78       	andi	r24, 0x86	; 134
    8cca:	91 f0       	breq	.+36     	; 0x8cf0 <vfprintf+0x39e>
    8ccc:	01 ff       	sbrs	r16, 1
    8cce:	02 c0       	rjmp	.+4      	; 0x8cd4 <vfprintf+0x382>
    8cd0:	8b e2       	ldi	r24, 0x2B	; 43
    8cd2:	01 c0       	rjmp	.+2      	; 0x8cd6 <vfprintf+0x384>
    8cd4:	80 e2       	ldi	r24, 0x20	; 32
    8cd6:	f7 fc       	sbrc	r15, 7
    8cd8:	8d e2       	ldi	r24, 0x2D	; 45
    8cda:	90 e0       	ldi	r25, 0x00	; 0
    8cdc:	b3 01       	movw	r22, r6
    8cde:	0e 94 cf 46 	call	0x8d9e	; 0x8d9e <fputc>
    8ce2:	06 c0       	rjmp	.+12     	; 0x8cf0 <vfprintf+0x39e>
    8ce4:	80 e3       	ldi	r24, 0x30	; 48
    8ce6:	90 e0       	ldi	r25, 0x00	; 0
    8ce8:	b3 01       	movw	r22, r6
    8cea:	0e 94 cf 46 	call	0x8d9e	; 0x8d9e <fputc>
    8cee:	9a 94       	dec	r9
    8cf0:	d9 14       	cp	r13, r9
    8cf2:	c0 f3       	brcs	.-16     	; 0x8ce4 <vfprintf+0x392>
    8cf4:	da 94       	dec	r13
    8cf6:	f1 01       	movw	r30, r2
    8cf8:	ed 0d       	add	r30, r13
    8cfa:	f1 1d       	adc	r31, r1
    8cfc:	80 81       	ld	r24, Z
    8cfe:	90 e0       	ldi	r25, 0x00	; 0
    8d00:	b3 01       	movw	r22, r6
    8d02:	0e 94 cf 46 	call	0x8d9e	; 0x8d9e <fputc>
    8d06:	dd 20       	and	r13, r13
    8d08:	a9 f7       	brne	.-22     	; 0x8cf4 <vfprintf+0x3a2>
    8d0a:	06 c0       	rjmp	.+12     	; 0x8d18 <vfprintf+0x3c6>
    8d0c:	80 e2       	ldi	r24, 0x20	; 32
    8d0e:	90 e0       	ldi	r25, 0x00	; 0
    8d10:	b3 01       	movw	r22, r6
    8d12:	0e 94 cf 46 	call	0x8d9e	; 0x8d9e <fputc>
    8d16:	ea 94       	dec	r14
    8d18:	ee 20       	and	r14, r14
    8d1a:	c1 f7       	brne	.-16     	; 0x8d0c <vfprintf+0x3ba>
    8d1c:	43 ce       	rjmp	.-890    	; 0x89a4 <vfprintf+0x52>
    8d1e:	f3 01       	movw	r30, r6
    8d20:	66 81       	ldd	r22, Z+6	; 0x06
    8d22:	77 81       	ldd	r23, Z+7	; 0x07
    8d24:	cb 01       	movw	r24, r22
    8d26:	2b 96       	adiw	r28, 0x0b	; 11
    8d28:	cd bf       	out	0x3d, r28	; 61
    8d2a:	de bf       	out	0x3e, r29	; 62
    8d2c:	cf 91       	pop	r28
    8d2e:	df 91       	pop	r29
    8d30:	1f 91       	pop	r17
    8d32:	0f 91       	pop	r16
    8d34:	ff 90       	pop	r15
    8d36:	ef 90       	pop	r14
    8d38:	df 90       	pop	r13
    8d3a:	cf 90       	pop	r12
    8d3c:	bf 90       	pop	r11
    8d3e:	af 90       	pop	r10
    8d40:	9f 90       	pop	r9
    8d42:	8f 90       	pop	r8
    8d44:	7f 90       	pop	r7
    8d46:	6f 90       	pop	r6
    8d48:	5f 90       	pop	r5
    8d4a:	4f 90       	pop	r4
    8d4c:	3f 90       	pop	r3
    8d4e:	2f 90       	pop	r2
    8d50:	08 95       	ret

00008d52 <strnlen_P>:
    8d52:	fc 01       	movw	r30, r24
    8d54:	05 90       	lpm	r0, Z+
    8d56:	61 50       	subi	r22, 0x01	; 1
    8d58:	70 40       	sbci	r23, 0x00	; 0
    8d5a:	01 10       	cpse	r0, r1
    8d5c:	d8 f7       	brcc	.-10     	; 0x8d54 <strnlen_P+0x2>
    8d5e:	80 95       	com	r24
    8d60:	90 95       	com	r25
    8d62:	8e 0f       	add	r24, r30
    8d64:	9f 1f       	adc	r25, r31
    8d66:	08 95       	ret

00008d68 <strnlen>:
    8d68:	fc 01       	movw	r30, r24
    8d6a:	61 50       	subi	r22, 0x01	; 1
    8d6c:	70 40       	sbci	r23, 0x00	; 0
    8d6e:	01 90       	ld	r0, Z+
    8d70:	01 10       	cpse	r0, r1
    8d72:	d8 f7       	brcc	.-10     	; 0x8d6a <strnlen+0x2>
    8d74:	80 95       	com	r24
    8d76:	90 95       	com	r25
    8d78:	8e 0f       	add	r24, r30
    8d7a:	9f 1f       	adc	r25, r31
    8d7c:	08 95       	ret

00008d7e <strrev>:
    8d7e:	dc 01       	movw	r26, r24
    8d80:	fc 01       	movw	r30, r24
    8d82:	67 2f       	mov	r22, r23
    8d84:	71 91       	ld	r23, Z+
    8d86:	77 23       	and	r23, r23
    8d88:	e1 f7       	brne	.-8      	; 0x8d82 <strrev+0x4>
    8d8a:	32 97       	sbiw	r30, 0x02	; 2
    8d8c:	04 c0       	rjmp	.+8      	; 0x8d96 <strrev+0x18>
    8d8e:	7c 91       	ld	r23, X
    8d90:	6d 93       	st	X+, r22
    8d92:	70 83       	st	Z, r23
    8d94:	62 91       	ld	r22, -Z
    8d96:	ae 17       	cp	r26, r30
    8d98:	bf 07       	cpc	r27, r31
    8d9a:	c8 f3       	brcs	.-14     	; 0x8d8e <strrev+0x10>
    8d9c:	08 95       	ret

00008d9e <fputc>:
    8d9e:	0f 93       	push	r16
    8da0:	1f 93       	push	r17
    8da2:	cf 93       	push	r28
    8da4:	df 93       	push	r29
    8da6:	8c 01       	movw	r16, r24
    8da8:	eb 01       	movw	r28, r22
    8daa:	8b 81       	ldd	r24, Y+3	; 0x03
    8dac:	81 ff       	sbrs	r24, 1
    8dae:	1b c0       	rjmp	.+54     	; 0x8de6 <fputc+0x48>
    8db0:	82 ff       	sbrs	r24, 2
    8db2:	0d c0       	rjmp	.+26     	; 0x8dce <fputc+0x30>
    8db4:	2e 81       	ldd	r18, Y+6	; 0x06
    8db6:	3f 81       	ldd	r19, Y+7	; 0x07
    8db8:	8c 81       	ldd	r24, Y+4	; 0x04
    8dba:	9d 81       	ldd	r25, Y+5	; 0x05
    8dbc:	28 17       	cp	r18, r24
    8dbe:	39 07       	cpc	r19, r25
    8dc0:	64 f4       	brge	.+24     	; 0x8dda <fputc+0x3c>
    8dc2:	e8 81       	ld	r30, Y
    8dc4:	f9 81       	ldd	r31, Y+1	; 0x01
    8dc6:	01 93       	st	Z+, r16
    8dc8:	e8 83       	st	Y, r30
    8dca:	f9 83       	std	Y+1, r31	; 0x01
    8dcc:	06 c0       	rjmp	.+12     	; 0x8dda <fputc+0x3c>
    8dce:	e8 85       	ldd	r30, Y+8	; 0x08
    8dd0:	f9 85       	ldd	r31, Y+9	; 0x09
    8dd2:	80 2f       	mov	r24, r16
    8dd4:	19 95       	eicall
    8dd6:	89 2b       	or	r24, r25
    8dd8:	31 f4       	brne	.+12     	; 0x8de6 <fputc+0x48>
    8dda:	8e 81       	ldd	r24, Y+6	; 0x06
    8ddc:	9f 81       	ldd	r25, Y+7	; 0x07
    8dde:	01 96       	adiw	r24, 0x01	; 1
    8de0:	8e 83       	std	Y+6, r24	; 0x06
    8de2:	9f 83       	std	Y+7, r25	; 0x07
    8de4:	02 c0       	rjmp	.+4      	; 0x8dea <fputc+0x4c>
    8de6:	0f ef       	ldi	r16, 0xFF	; 255
    8de8:	1f ef       	ldi	r17, 0xFF	; 255
    8dea:	c8 01       	movw	r24, r16
    8dec:	df 91       	pop	r29
    8dee:	cf 91       	pop	r28
    8df0:	1f 91       	pop	r17
    8df2:	0f 91       	pop	r16
    8df4:	08 95       	ret

00008df6 <__ultoa_invert>:
    8df6:	fa 01       	movw	r30, r20
    8df8:	aa 27       	eor	r26, r26
    8dfa:	28 30       	cpi	r18, 0x08	; 8
    8dfc:	51 f1       	breq	.+84     	; 0x8e52 <__ultoa_invert+0x5c>
    8dfe:	20 31       	cpi	r18, 0x10	; 16
    8e00:	81 f1       	breq	.+96     	; 0x8e62 <__ultoa_invert+0x6c>
    8e02:	e8 94       	clt
    8e04:	6f 93       	push	r22
    8e06:	6e 7f       	andi	r22, 0xFE	; 254
    8e08:	6e 5f       	subi	r22, 0xFE	; 254
    8e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    8e0c:	8f 4f       	sbci	r24, 0xFF	; 255
    8e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    8e10:	af 4f       	sbci	r26, 0xFF	; 255
    8e12:	b1 e0       	ldi	r27, 0x01	; 1
    8e14:	3e d0       	rcall	.+124    	; 0x8e92 <__ultoa_invert+0x9c>
    8e16:	b4 e0       	ldi	r27, 0x04	; 4
    8e18:	3c d0       	rcall	.+120    	; 0x8e92 <__ultoa_invert+0x9c>
    8e1a:	67 0f       	add	r22, r23
    8e1c:	78 1f       	adc	r23, r24
    8e1e:	89 1f       	adc	r24, r25
    8e20:	9a 1f       	adc	r25, r26
    8e22:	a1 1d       	adc	r26, r1
    8e24:	68 0f       	add	r22, r24
    8e26:	79 1f       	adc	r23, r25
    8e28:	8a 1f       	adc	r24, r26
    8e2a:	91 1d       	adc	r25, r1
    8e2c:	a1 1d       	adc	r26, r1
    8e2e:	6a 0f       	add	r22, r26
    8e30:	71 1d       	adc	r23, r1
    8e32:	81 1d       	adc	r24, r1
    8e34:	91 1d       	adc	r25, r1
    8e36:	a1 1d       	adc	r26, r1
    8e38:	20 d0       	rcall	.+64     	; 0x8e7a <__ultoa_invert+0x84>
    8e3a:	09 f4       	brne	.+2      	; 0x8e3e <__ultoa_invert+0x48>
    8e3c:	68 94       	set
    8e3e:	3f 91       	pop	r19
    8e40:	2a e0       	ldi	r18, 0x0A	; 10
    8e42:	26 9f       	mul	r18, r22
    8e44:	11 24       	eor	r1, r1
    8e46:	30 19       	sub	r19, r0
    8e48:	30 5d       	subi	r19, 0xD0	; 208
    8e4a:	31 93       	st	Z+, r19
    8e4c:	de f6       	brtc	.-74     	; 0x8e04 <__ultoa_invert+0xe>
    8e4e:	cf 01       	movw	r24, r30
    8e50:	08 95       	ret
    8e52:	46 2f       	mov	r20, r22
    8e54:	47 70       	andi	r20, 0x07	; 7
    8e56:	40 5d       	subi	r20, 0xD0	; 208
    8e58:	41 93       	st	Z+, r20
    8e5a:	b3 e0       	ldi	r27, 0x03	; 3
    8e5c:	0f d0       	rcall	.+30     	; 0x8e7c <__ultoa_invert+0x86>
    8e5e:	c9 f7       	brne	.-14     	; 0x8e52 <__ultoa_invert+0x5c>
    8e60:	f6 cf       	rjmp	.-20     	; 0x8e4e <__ultoa_invert+0x58>
    8e62:	46 2f       	mov	r20, r22
    8e64:	4f 70       	andi	r20, 0x0F	; 15
    8e66:	40 5d       	subi	r20, 0xD0	; 208
    8e68:	4a 33       	cpi	r20, 0x3A	; 58
    8e6a:	18 f0       	brcs	.+6      	; 0x8e72 <__ultoa_invert+0x7c>
    8e6c:	49 5d       	subi	r20, 0xD9	; 217
    8e6e:	31 fd       	sbrc	r19, 1
    8e70:	40 52       	subi	r20, 0x20	; 32
    8e72:	41 93       	st	Z+, r20
    8e74:	02 d0       	rcall	.+4      	; 0x8e7a <__ultoa_invert+0x84>
    8e76:	a9 f7       	brne	.-22     	; 0x8e62 <__ultoa_invert+0x6c>
    8e78:	ea cf       	rjmp	.-44     	; 0x8e4e <__ultoa_invert+0x58>
    8e7a:	b4 e0       	ldi	r27, 0x04	; 4
    8e7c:	a6 95       	lsr	r26
    8e7e:	97 95       	ror	r25
    8e80:	87 95       	ror	r24
    8e82:	77 95       	ror	r23
    8e84:	67 95       	ror	r22
    8e86:	ba 95       	dec	r27
    8e88:	c9 f7       	brne	.-14     	; 0x8e7c <__ultoa_invert+0x86>
    8e8a:	00 97       	sbiw	r24, 0x00	; 0
    8e8c:	61 05       	cpc	r22, r1
    8e8e:	71 05       	cpc	r23, r1
    8e90:	08 95       	ret
    8e92:	9b 01       	movw	r18, r22
    8e94:	ac 01       	movw	r20, r24
    8e96:	0a 2e       	mov	r0, r26
    8e98:	06 94       	lsr	r0
    8e9a:	57 95       	ror	r21
    8e9c:	47 95       	ror	r20
    8e9e:	37 95       	ror	r19
    8ea0:	27 95       	ror	r18
    8ea2:	ba 95       	dec	r27
    8ea4:	c9 f7       	brne	.-14     	; 0x8e98 <__ultoa_invert+0xa2>
    8ea6:	62 0f       	add	r22, r18
    8ea8:	73 1f       	adc	r23, r19
    8eaa:	84 1f       	adc	r24, r20
    8eac:	95 1f       	adc	r25, r21
    8eae:	a0 1d       	adc	r26, r0
    8eb0:	08 95       	ret

00008eb2 <_exit>:
    8eb2:	f8 94       	cli

00008eb4 <__stop_program>:
    8eb4:	ff cf       	rjmp	.-2      	; 0x8eb4 <__stop_program>
