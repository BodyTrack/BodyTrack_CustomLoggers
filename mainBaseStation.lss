
mainBaseStation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a60e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000ce2  00802000  0000a60e  0000a6a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000024ea  00802ce2  00802ce2  0000b384  2**0
                  ALLOC
  3 .stab         00001d40  00000000  00000000  0000b384  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006b5  00000000  00000000  0000d0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  0000d779  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001728  00000000  00000000  0000d819  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000086e9  00000000  00000000  0000ef41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a37  00000000  00000000  0001762a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006e0f  00000000  00000000  00018061  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a10  00000000  00000000  0001ee70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000464c  00000000  00000000  0001f880  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000063b0  00000000  00000000  00023ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004e0  00000000  00000000  0002a27c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      bc:	0c 94 7e 2c 	jmp	0x58fc	; 0x58fc <__vector_47>
      c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d4:	0c 94 c8 46 	jmp	0x8d90	; 0x8d90 <__vector_53>
      d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ec:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      fc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     100:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     104:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     108:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     10c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     110:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     114:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     118:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     11c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     120:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     124:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     128:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     12c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     130:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     134:	0c 94 bd 35 	jmp	0x6b7a	; 0x6b7a <__vector_77>
     138:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     13c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     140:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     144:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     148:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     14c:	0c 94 23 32 	jmp	0x6446	; 0x6446 <__vector_83>
     150:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     154:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     158:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     15c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     160:	0c 94 3c 04 	jmp	0x878	; 0x878 <__vector_88>
     164:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     168:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     16c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     170:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     174:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     178:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     17c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     180:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     184:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     188:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     18c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     190:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     194:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     198:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     19c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b0:	0c 94 a8 3a 	jmp	0x7550	; 0x7550 <__vector_108>
     1b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e5       	ldi	r29, 0x5F	; 95
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	1c e2       	ldi	r17, 0x2C	; 44
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	ee e0       	ldi	r30, 0x0E	; 14
     200:	f6 ea       	ldi	r31, 0xA6	; 166
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a2 3e       	cpi	r26, 0xE2	; 226
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	11 e5       	ldi	r17, 0x51	; 81
     214:	a2 ee       	ldi	r26, 0xE2	; 226
     216:	bc e2       	ldi	r27, 0x2C	; 44
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	ac 3c       	cpi	r26, 0xCC	; 204
     21e:	b1 07       	cpc	r27, r17
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 3c 4c 	call	0x9878	; 0x9878 <main>
     226:	0c 94 05 53 	jmp	0xa60a	; 0xa60a <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <CCPWrite>:
bool demoMode = false;
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
     22e:	0f 93       	push	r16
     230:	df 93       	push	r29
     232:	cf 93       	push	r28
     234:	0f 92       	push	r0
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
    uint8_t volatile saved_sreg = SREG;
     23a:	2f b7       	in	r18, 0x3f	; 63
     23c:	29 83       	std	Y+1, r18	; 0x01
    cli();
     23e:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     240:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     242:	fc 01       	movw	r30, r24
     244:	08 ed       	ldi	r16, 0xD8	; 216
     246:	04 bf       	out	0x34, r16	; 52
     248:	60 83       	st	Z, r22
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	8f bf       	out	0x3f, r24	; 63
}
     24e:	0f 90       	pop	r0
     250:	cf 91       	pop	r28
     252:	df 91       	pop	r29
     254:	0f 91       	pop	r16
     256:	08 95       	ret

00000258 <Debug_CharReadyToRead>:
	}
}


bool Debug_CharReadyToRead(void){
    Debug_writeLocation  = DMA.Debug_DMA_Channel.DESTADDR1 << 8;
     258:	20 91 2d 01 	lds	r18, 0x012D
     25c:	92 2f       	mov	r25, r18
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	80 93 18 2d 	sts	0x2D18, r24
     264:	90 93 19 2d 	sts	0x2D19, r25
	Debug_writeLocation += DMA.Debug_DMA_Channel.DESTADDR0;
     268:	80 91 18 2d 	lds	r24, 0x2D18
     26c:	90 91 19 2d 	lds	r25, 0x2D19
     270:	20 91 2c 01 	lds	r18, 0x012C
     274:	82 0f       	add	r24, r18
     276:	91 1d       	adc	r25, r1
     278:	80 93 18 2d 	sts	0x2D18, r24
     27c:	90 93 19 2d 	sts	0x2D19, r25
	Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);
     280:	80 91 18 2d 	lds	r24, 0x2D18
     284:	90 91 19 2d 	lds	r25, 0x2D19
     288:	88 55       	subi	r24, 0x58	; 88
     28a:	97 44       	sbci	r25, 0x47	; 71
     28c:	80 93 18 2d 	sts	0x2D18, r24
     290:	90 93 19 2d 	sts	0x2D19, r25



	if(Debug_writeLocation == Debug_readLocation){
     294:	20 91 18 2d 	lds	r18, 0x2D18
     298:	30 91 19 2d 	lds	r19, 0x2D19
     29c:	80 91 16 2d 	lds	r24, 0x2D16
     2a0:	90 91 17 2d 	lds	r25, 0x2D17
     2a4:	40 e0       	ldi	r20, 0x00	; 0
     2a6:	28 17       	cp	r18, r24
     2a8:	39 07       	cpc	r19, r25
     2aa:	09 f0       	breq	.+2      	; 0x2ae <Debug_CharReadyToRead+0x56>
     2ac:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     2ae:	84 2f       	mov	r24, r20
     2b0:	08 95       	ret

000002b2 <Debug_ClearBuffer>:
	
	Debug_ClearBuffer();
	
}
void Debug_ClearBuffer(void){
	if(Debug_CharReadyToRead()){
     2b2:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
     2b6:	88 23       	and	r24, r24
     2b8:	31 f1       	breq	.+76     	; 0x306 <Debug_ClearBuffer+0x54>
		Debug_writeLocation  = DMA.Debug_DMA_Channel.DESTADDR1 << 8;
     2ba:	20 91 2d 01 	lds	r18, 0x012D
     2be:	92 2f       	mov	r25, r18
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	80 93 18 2d 	sts	0x2D18, r24
     2c6:	90 93 19 2d 	sts	0x2D19, r25
		Debug_writeLocation += DMA.Debug_DMA_Channel.DESTADDR0;
     2ca:	80 91 18 2d 	lds	r24, 0x2D18
     2ce:	90 91 19 2d 	lds	r25, 0x2D19
     2d2:	20 91 2c 01 	lds	r18, 0x012C
     2d6:	82 0f       	add	r24, r18
     2d8:	91 1d       	adc	r25, r1
     2da:	80 93 18 2d 	sts	0x2D18, r24
     2de:	90 93 19 2d 	sts	0x2D19, r25
		Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);
     2e2:	80 91 18 2d 	lds	r24, 0x2D18
     2e6:	90 91 19 2d 	lds	r25, 0x2D19
     2ea:	88 55       	subi	r24, 0x58	; 88
     2ec:	97 44       	sbci	r25, 0x47	; 71
     2ee:	80 93 18 2d 	sts	0x2D18, r24
     2f2:	90 93 19 2d 	sts	0x2D19, r25
		Debug_readLocation = Debug_writeLocation;
     2f6:	80 91 18 2d 	lds	r24, 0x2D18
     2fa:	90 91 19 2d 	lds	r25, 0x2D19
     2fe:	80 93 16 2d 	sts	0x2D16, r24
     302:	90 93 17 2d 	sts	0x2D17, r25
     306:	08 95       	ret

00000308 <Debug_Init>:
volatile uint16_t  	Debug_readLocation = 0;
volatile uint16_t   Debug_writeLocation = 0;



void Debug_Init(uint32_t baud){
     308:	ab 01       	movw	r20, r22
     30a:	bc 01       	movw	r22, r24
	
	DMA.CTRL |= DMA_ENABLE_bm; // enable DMA
     30c:	e0 e0       	ldi	r30, 0x00	; 0
     30e:	f1 e0       	ldi	r31, 0x01	; 1
     310:	80 91 00 01 	lds	r24, 0x0100
     314:	80 68       	ori	r24, 0x80	; 128
     316:	80 93 00 01 	sts	0x0100, r24
	
	// Debug
	DMA.Debug_DMA_Channel.ADDRCTRL |= DMA_CH_SRCRELOAD_NONE_gc | DMA_CH_SRCDIR_FIXED_gc	| DMA_CH_DESTRELOAD_BLOCK_gc | DMA_CH_DESTDIR_INC_gc;
     31a:	80 91 22 01 	lds	r24, 0x0122
     31e:	85 60       	ori	r24, 0x05	; 5
     320:	82 a3       	std	Z+34, r24	; 0x22
	DMA.Debug_DMA_Channel.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     322:	8b e4       	ldi	r24, 0x4B	; 75
     324:	83 a3       	std	Z+35, r24	; 0x23
	DMA.Debug_DMA_Channel.TRFCNT = Debug_BufferSize;	// 1024 bytes in block
     326:	84 e6       	ldi	r24, 0x64	; 100
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	84 a3       	std	Z+36, r24	; 0x24
     32c:	95 a3       	std	Z+37, r25	; 0x25
	DMA.Debug_DMA_Channel.REPCNT  = 0;		// repeat forever
     32e:	16 a2       	std	Z+38, r1	; 0x26
	
	DMA.Debug_DMA_Channel.SRCADDR0 = (((uint16_t)(&Debug_Usart.DATA) >> 0) & 0xFF);
     330:	80 ea       	ldi	r24, 0xA0	; 160
     332:	80 a7       	std	Z+40, r24	; 0x28
	DMA.Debug_DMA_Channel.SRCADDR1 = (((uint16_t)(&Debug_Usart.DATA) >> 8) & 0xFF);
     334:	28 e0       	ldi	r18, 0x08	; 8
     336:	21 a7       	std	Z+41, r18	; 0x29
	DMA.Debug_DMA_Channel.SRCADDR2 = 0x00;
     338:	12 a6       	std	Z+42, r1	; 0x2a
	
	DMA.Debug_DMA_Channel.DESTADDR0 = (((uint16_t)(&DebugBuffer[0]) >> 0) & 0xFF);
     33a:	88 e5       	ldi	r24, 0x58	; 88
     33c:	97 e4       	ldi	r25, 0x47	; 71
     33e:	84 a7       	std	Z+44, r24	; 0x2c
	DMA.Debug_DMA_Channel.DESTADDR1 = (((uint16_t)(&DebugBuffer[0]) >> 8) & 0xFF);
     340:	95 a7       	std	Z+45, r25	; 0x2d
	DMA.Debug_DMA_Channel.DESTADDR2 = 0x00;
     342:	16 a6       	std	Z+46, r1	; 0x2e
	
	DMA.Debug_DMA_Channel.CTRLA |= DMA_CH_ENABLE_bm | DMA_CH_REPEAT_bm | DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm;
     344:	80 91 20 01 	lds	r24, 0x0120
     348:	84 6a       	ori	r24, 0xA4	; 164
     34a:	80 a3       	std	Z+32, r24	; 0x20
	
	Debug_Port.DIRSET = Debug_TX_pin_bm;
     34c:	e0 e4       	ldi	r30, 0x40	; 64
     34e:	f6 e0       	ldi	r31, 0x06	; 6
     350:	21 83       	std	Z+1, r18	; 0x01
	Debug_Port.DIRCLR = Debug_RX_pin_bm;
     352:	84 e0       	ldi	r24, 0x04	; 4
     354:	82 83       	std	Z+2, r24	; 0x02


    Debug_Flow_Port.DIRCLR = (1<<Debug_RTS_pin);
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	92 83       	std	Z+2, r25	; 0x02
    Debug_Flow_Port.DIRSET = (1<<Debug_CTS_pin);
     35a:	82 e0       	ldi	r24, 0x02	; 2
     35c:	81 83       	std	Z+1, r24	; 0x01
	Debug_Flow_Port.OUTSET = (1<<Debug_CTS_pin);
     35e:	85 83       	std	Z+5, r24	; 0x05

	Debug_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);	 	    				
     360:	e0 ea       	ldi	r30, 0xA0	; 160
     362:	f8 e0       	ldi	r31, 0x08	; 8
     364:	83 e0       	ldi	r24, 0x03	; 3
     366:	85 83       	std	Z+5, r24	; 0x05

	if(baud == 9600){
     368:	40 38       	cpi	r20, 0x80	; 128
     36a:	25 e2       	ldi	r18, 0x25	; 37
     36c:	52 07       	cpc	r21, r18
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	62 07       	cpc	r22, r18
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	72 07       	cpc	r23, r18
     376:	11 f4       	brne	.+4      	; 0x37c <Debug_Init+0x74>
		Debug_Usart.BAUDCTRLA = 95 & 0xFF;
     378:	8f e5       	ldi	r24, 0x5F	; 95
     37a:	09 c0       	rjmp	.+18     	; 0x38e <Debug_Init+0x86>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
	} else if(baud == 115200){
     37c:	40 30       	cpi	r20, 0x00	; 0
     37e:	22 ec       	ldi	r18, 0xC2	; 194
     380:	52 07       	cpc	r21, r18
     382:	21 e0       	ldi	r18, 0x01	; 1
     384:	62 07       	cpc	r22, r18
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	72 07       	cpc	r23, r18
     38a:	19 f4       	brne	.+6      	; 0x392 <Debug_Init+0x8a>
		Debug_Usart.BAUDCTRLA = 7 & 0xFF;
     38c:	87 e0       	ldi	r24, 0x07	; 7
     38e:	86 83       	std	Z+6, r24	; 0x06
     390:	18 c0       	rjmp	.+48     	; 0x3c2 <Debug_Init+0xba>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(7 >> 8);
	} else if(baud == 230400){
     392:	40 30       	cpi	r20, 0x00	; 0
     394:	24 e8       	ldi	r18, 0x84	; 132
     396:	52 07       	cpc	r21, r18
     398:	23 e0       	ldi	r18, 0x03	; 3
     39a:	62 07       	cpc	r22, r18
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	72 07       	cpc	r23, r18
     3a0:	b1 f3       	breq	.-20     	; 0x38e <Debug_Init+0x86>
		Debug_Usart.BAUDCTRLA = 3 & 0xFF;
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(3 >> 8);
	}else if(baud == 460800){
     3a2:	40 30       	cpi	r20, 0x00	; 0
     3a4:	88 e0       	ldi	r24, 0x08	; 8
     3a6:	58 07       	cpc	r21, r24
     3a8:	87 e0       	ldi	r24, 0x07	; 7
     3aa:	68 07       	cpc	r22, r24
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	78 07       	cpc	r23, r24
     3b0:	11 f4       	brne	.+4      	; 0x3b6 <Debug_Init+0xae>
		Debug_Usart.BAUDCTRLA = 1 & 0xFF;
     3b2:	96 83       	std	Z+6, r25	; 0x06
     3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <Debug_Init+0xba>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(1 >> 8);
	} else if(baud == 921600){
     3b6:	40 50       	subi	r20, 0x00	; 0
     3b8:	50 41       	sbci	r21, 0x10	; 16
     3ba:	6e 40       	sbci	r22, 0x0E	; 14
     3bc:	70 40       	sbci	r23, 0x00	; 0
     3be:	11 f4       	brne	.+4      	; 0x3c4 <Debug_Init+0xbc>
		Debug_Usart.BAUDCTRLA = 0 & 0xFF;
     3c0:	16 82       	std	Z+6, r1	; 0x06
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(0 >> 8);
     3c2:	17 82       	std	Z+7, r1	; 0x07
	}

	Debug_Usart.CTRLB |= USART_RXEN_bm;
     3c4:	e0 ea       	ldi	r30, 0xA0	; 160
     3c6:	f8 e0       	ldi	r31, 0x08	; 8
     3c8:	80 91 a4 08 	lds	r24, 0x08A4
     3cc:	80 61       	ori	r24, 0x10	; 16
     3ce:	84 83       	std	Z+4, r24	; 0x04
	Debug_Usart.CTRLB |= USART_TXEN_bm;
     3d0:	80 91 a4 08 	lds	r24, 0x08A4
     3d4:	88 60       	ori	r24, 0x08	; 8
     3d6:	84 83       	std	Z+4, r24	; 0x04
	
	Debug_ClearBuffer();
     3d8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Debug_ClearBuffer>
	
}
     3dc:	08 95       	ret

000003de <Debug_GetByte>:
		return true;
	}
}

uint8_t Debug_GetByte(bool blocking){
	if(blocking){
     3de:	88 23       	and	r24, r24
     3e0:	21 f0       	breq	.+8      	; 0x3ea <Debug_GetByte+0xc>
		while(!Debug_CharReadyToRead());
     3e2:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
     3e6:	88 23       	and	r24, r24
     3e8:	e1 f3       	breq	.-8      	; 0x3e2 <Debug_GetByte+0x4>
	}

	uint8_t tmp = DebugBuffer[Debug_readLocation];
     3ea:	e0 91 16 2d 	lds	r30, 0x2D16
     3ee:	f0 91 17 2d 	lds	r31, 0x2D17
     3f2:	e8 5a       	subi	r30, 0xA8	; 168
     3f4:	f8 4b       	sbci	r31, 0xB8	; 184
     3f6:	e0 81       	ld	r30, Z
	Debug_readLocation++;
     3f8:	80 91 16 2d 	lds	r24, 0x2D16
     3fc:	90 91 17 2d 	lds	r25, 0x2D17
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	80 93 16 2d 	sts	0x2D16, r24
     406:	90 93 17 2d 	sts	0x2D17, r25
	if(Debug_readLocation >= Debug_BufferSize){
     40a:	80 91 16 2d 	lds	r24, 0x2D16
     40e:	90 91 17 2d 	lds	r25, 0x2D17
     412:	84 36       	cpi	r24, 0x64	; 100
     414:	91 05       	cpc	r25, r1
     416:	20 f0       	brcs	.+8      	; 0x420 <Debug_GetByte+0x42>
	  Debug_readLocation=0;
     418:	10 92 16 2d 	sts	0x2D16, r1
     41c:	10 92 17 2d 	sts	0x2D17, r1
	}
	return tmp;
}
     420:	8e 2f       	mov	r24, r30
     422:	08 95       	ret

00000424 <Debug_SendByte>:


void Debug_SendByte(uint8_t data){
     424:	98 2f       	mov	r25, r24
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     426:	80 91 a1 08 	lds	r24, 0x08A1
     42a:	85 ff       	sbrs	r24, 5
     42c:	fc cf       	rjmp	.-8      	; 0x426 <Debug_SendByte+0x2>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0); // Wait for RTS to be low
     42e:	80 91 48 06 	lds	r24, 0x0648
     432:	80 fd       	sbrc	r24, 0
     434:	fc cf       	rjmp	.-8      	; 0x42e <Debug_SendByte+0xa>
	Debug_Usart.DATA = data;
     436:	90 93 a0 08 	sts	0x08A0, r25
}
     43a:	08 95       	ret

0000043c <Time_Init>:
	
	// 32 bit counter
  /* We need to set up the event user
   * Which event channel should be input for the peripheral, and what should be the action. */
  
	Time_TimerHigh.CTRLA = Time_EventClockSource; //Select event channel 0 as clock source for TCC1.
     43c:	88 e0       	ldi	r24, 0x08	; 8
     43e:	80 93 40 08 	sts	0x0840, r24
   * event channel used */
  
   /* Select TCC0 overflow as event channel 0 multiplexer input.
    * This is all code required to configure one event channel */
  
	EVSYS.Time_EventChannelMux = Time_EventInput;
     442:	80 ec       	ldi	r24, 0xC0	; 192
     444:	80 93 80 01 	sts	0x0180, r24
    
  /* TCC0 is used as the 16 LSB for the timer. This runs from the normal (prescaled) Peripheral Clock */  
  
  //Select system clock divided by 8 as clock source for TCC0.
	Time_TimerLow.PER = 0xFFFF;
     448:	e0 e0       	ldi	r30, 0x00	; 0
     44a:	f8 e0       	ldi	r31, 0x08	; 8
     44c:	8f ef       	ldi	r24, 0xFF	; 255
     44e:	9f ef       	ldi	r25, 0xFF	; 255
     450:	86 a3       	std	Z+38, r24	; 0x26
     452:	97 a3       	std	Z+39, r25	; 0x27
	Time_TimerLow.CTRLA = (Time_TimerLow.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;   // 1.8432 megehertz
     454:	80 81       	ld	r24, Z
     456:	80 7f       	andi	r24, 0xF0	; 240
     458:	84 60       	ori	r24, 0x04	; 4
     45a:	80 83       	st	Z, r24
	
	
}
     45c:	08 95       	ret

0000045e <Time_Set>:

void Time_Set(uint32_t time){
     45e:	0f 93       	push	r16
     460:	df 93       	push	r29
     462:	cf 93       	push	r28
     464:	0f 92       	push	r0
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
     46a:	ab 01       	movw	r20, r22
     46c:	bc 01       	movw	r22, r24
	cli();
     46e:	f8 94       	cli
	VBAT.CTRL = VBAT_ACCEN_bm;
     470:	82 e0       	ldi	r24, 0x02	; 2
     472:	80 93 f0 00 	sts	0x00F0, r24
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
     476:	8f b7       	in	r24, 0x3f	; 63
     478:	89 83       	std	Y+1, r24	; 0x01
    cli();
     47a:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     47c:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     47e:	21 e0       	ldi	r18, 0x01	; 1
     480:	80 ef       	ldi	r24, 0xF0	; 240
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	fc 01       	movw	r30, r24
     486:	08 ed       	ldi	r16, 0xD8	; 216
     488:	04 bf       	out	0x34, r16	; 52
     48a:	20 83       	st	Z, r18
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	8f bf       	out	0x3f, r24	; 63
	CCPWrite(&VBAT.CTRL, VBAT_RESET_bm);		// Reset battery backup
	VBAT.CTRL |= VBAT_XOSCFDEN_bm;				// enable oscillator failure detection
     490:	80 91 f0 00 	lds	r24, 0x00F0
     494:	84 60       	ori	r24, 0x04	; 4
     496:	80 93 f0 00 	sts	0x00F0, r24
	VBAT.CTRL |= VBAT_XOSCEN_bm;				// enable 1hz output from oscillator
     49a:	80 91 f0 00 	lds	r24, 0x00F0
     49e:	88 60       	ori	r24, 0x08	; 8
     4a0:	80 93 f0 00 	sts	0x00F0, r24
	
	/* Disable the RTC32 module before writing to it. Wait for synch. */
	RTC32.CTRL &= ~RTC32_ENABLE_bm;
     4a4:	80 91 20 04 	lds	r24, 0x0420
     4a8:	8e 7f       	andi	r24, 0xFE	; 254
     4aa:	80 93 20 04 	sts	0x0420, r24
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm);
     4ae:	e0 e2       	ldi	r30, 0x20	; 32
     4b0:	f4 e0       	ldi	r31, 0x04	; 4
     4b2:	80 91 21 04 	lds	r24, 0x0421
     4b6:	80 fd       	sbrc	r24, 0
     4b8:	fa cf       	rjmp	.-12     	; 0x4ae <Time_Set+0x50>
	
	/* Write PER, COMP and CNT. */
	RTC32.PER = 0xFFFFFFFF - 1;
     4ba:	8e ef       	ldi	r24, 0xFE	; 254
     4bc:	9f ef       	ldi	r25, 0xFF	; 255
     4be:	af ef       	ldi	r26, 0xFF	; 255
     4c0:	bf ef       	ldi	r27, 0xFF	; 255
     4c2:	80 87       	std	Z+8, r24	; 0x08
     4c4:	91 87       	std	Z+9, r25	; 0x09
     4c6:	a2 87       	std	Z+10, r26	; 0x0a
     4c8:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.COMP = 0;
     4ca:	14 86       	std	Z+12, r1	; 0x0c
     4cc:	15 86       	std	Z+13, r1	; 0x0d
     4ce:	16 86       	std	Z+14, r1	; 0x0e
     4d0:	17 86       	std	Z+15, r1	; 0x0f
	RTC32.CNT = time;
     4d2:	44 83       	std	Z+4, r20	; 0x04
     4d4:	55 83       	std	Z+5, r21	; 0x05
     4d6:	66 83       	std	Z+6, r22	; 0x06
     4d8:	77 83       	std	Z+7, r23	; 0x07
	
	/* Re-enable the RTC32 module, synchronize before returning. */
	RTC32.CTRL |= RTC32_ENABLE_bm;
     4da:	80 91 20 04 	lds	r24, 0x0420
     4de:	81 60       	ori	r24, 0x01	; 1
     4e0:	80 93 20 04 	sts	0x0420, r24
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm);
     4e4:	80 91 21 04 	lds	r24, 0x0421
     4e8:	80 fd       	sbrc	r24, 0
     4ea:	fc cf       	rjmp	.-8      	; 0x4e4 <Time_Set+0x86>
	
	RTC32.INTCTRL = ( RTC32.INTCTRL & ~RTC32_COMPINTLVL_gm ) | RTC32_COMPINTLVL_LO_gc;
     4ec:	80 91 22 04 	lds	r24, 0x0422
     4f0:	83 7f       	andi	r24, 0xF3	; 243
     4f2:	84 60       	ori	r24, 0x04	; 4
     4f4:	e0 e2       	ldi	r30, 0x20	; 32
     4f6:	f4 e0       	ldi	r31, 0x04	; 4
     4f8:	82 83       	std	Z+2, r24	; 0x02
	sei();
     4fa:	78 94       	sei
}
     4fc:	0f 90       	pop	r0
     4fe:	cf 91       	pop	r28
     500:	df 91       	pop	r29
     502:	0f 91       	pop	r16
     504:	08 95       	ret

00000506 <Time_CheckVBatSystem>:

bool Time_CheckVBatSystem(void){
	if (VBAT.STATUS & VBAT_BBPWR_bm){
     506:	80 91 f1 00 	lds	r24, 0x00F1
     50a:	87 fd       	sbrc	r24, 7
     50c:	12 c0       	rjmp	.+36     	; 0x532 <Time_CheckVBatSystem+0x2c>
		//Debug_SendByte('A');
		return false;
	} else {
		if (VBAT.STATUS & VBAT_BBPORF_bm) {
     50e:	80 91 f1 00 	lds	r24, 0x00F1
     512:	80 fd       	sbrc	r24, 0
     514:	0e c0       	rjmp	.+28     	; 0x532 <Time_CheckVBatSystem+0x2c>
			
			//Debug_SendByte('B');
			return false;
		} else if (VBAT.STATUS & VBAT_BBBORF_bm){
     516:	80 91 f1 00 	lds	r24, 0x00F1
     51a:	81 fd       	sbrc	r24, 1
     51c:	0a c0       	rjmp	.+20     	; 0x532 <Time_CheckVBatSystem+0x2c>
			
			//Debug_SendByte('C');
			return false;
		} else {
			VBAT.CTRL = VBAT_ACCEN_bm;
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	80 93 f0 00 	sts	0x00F0, r24
			if (VBAT.STATUS & VBAT_XOSCFAIL_bm){
     524:	80 91 f1 00 	lds	r24, 0x00F1
     528:	86 95       	lsr	r24
     52a:	86 95       	lsr	r24
     52c:	80 95       	com	r24
     52e:	81 70       	andi	r24, 0x01	; 1
     530:	08 95       	ret
     532:	80 e0       	ldi	r24, 0x00	; 0
				return false;
			} 
		}
	}
	return true;
}
     534:	08 95       	ret

00000536 <Time_Get>:

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
     536:	80 91 21 04 	lds	r24, 0x0421
     53a:	80 61       	ori	r24, 0x10	; 16
     53c:	e0 e2       	ldi	r30, 0x20	; 32
     53e:	f4 e0       	ldi	r31, 0x04	; 4
     540:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
     542:	80 91 21 04 	lds	r24, 0x0421
     546:	84 fd       	sbrc	r24, 4
     548:	fc cf       	rjmp	.-8      	; 0x542 <Time_Get+0xc>
	return RTC32.CNT;
     54a:	20 91 24 04 	lds	r18, 0x0424
     54e:	30 91 25 04 	lds	r19, 0x0425
     552:	40 91 26 04 	lds	r20, 0x0426
     556:	50 91 27 04 	lds	r21, 0x0427
	//sei();
}
     55a:	b9 01       	movw	r22, r18
     55c:	ca 01       	movw	r24, r20
     55e:	08 95       	ret

00000560 <Time_Get32BitTimer>:

uint32_t Time_Get32BitTimer(void){
  cli();
     560:	f8 94       	cli
  uint16_t high = Time_TimerHighCNT;
     562:	20 91 60 08 	lds	r18, 0x0860
     566:	30 91 61 08 	lds	r19, 0x0861
  uint16_t low  = Time_TimerLowCNT;
     56a:	60 91 20 08 	lds	r22, 0x0820
     56e:	70 91 21 08 	lds	r23, 0x0821
  uint32_t result = 0;

  if(high != Time_TimerHighCNT){
     572:	80 91 60 08 	lds	r24, 0x0860
     576:	90 91 61 08 	lds	r25, 0x0861
     57a:	28 17       	cp	r18, r24
     57c:	39 07       	cpc	r19, r25
     57e:	41 f0       	breq	.+16     	; 0x590 <Time_Get32BitTimer+0x30>
	 high = Time_TimerHighCNT;
     580:	20 91 60 08 	lds	r18, 0x0860
     584:	30 91 61 08 	lds	r19, 0x0861
	 low  = Time_TimerLowCNT;
     588:	60 91 20 08 	lds	r22, 0x0820
     58c:	70 91 21 08 	lds	r23, 0x0821
  }
  result = high * 65536 + low;
  sei();
     590:	78 94       	sei
     592:	40 e0       	ldi	r20, 0x00	; 0
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	a9 01       	movw	r20, r18
     598:	33 27       	eor	r19, r19
     59a:	22 27       	eor	r18, r18
     59c:	cb 01       	movw	r24, r22
     59e:	a0 e0       	ldi	r26, 0x00	; 0
     5a0:	b0 e0       	ldi	r27, 0x00	; 0
     5a2:	28 0f       	add	r18, r24
     5a4:	39 1f       	adc	r19, r25
     5a6:	4a 1f       	adc	r20, r26
     5a8:	5b 1f       	adc	r21, r27
  return result;
}
     5aa:	b9 01       	movw	r22, r18
     5ac:	ca 01       	movw	r24, r20
     5ae:	08 95       	ret

000005b0 <Time_UTCSecsToTime>:


//Takes in UTC Epoch Time since 1970
//Returns calendar time in time_t struct
time_t * Time_UTCSecsToTime(uint32_t UTCSecs, time_t * tm) {
     5b0:	8f 92       	push	r8
     5b2:	9f 92       	push	r9
     5b4:	af 92       	push	r10
     5b6:	bf 92       	push	r11
     5b8:	cf 92       	push	r12
     5ba:	df 92       	push	r13
     5bc:	ef 92       	push	r14
     5be:	ff 92       	push	r15
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	7b 01       	movw	r14, r22
     5ca:	8c 01       	movw	r16, r24
     5cc:	ea 01       	movw	r28, r20
	uint8_t year;
	uint8_t month, monthLength;
	unsigned long days;
	
	tm->Second = UTCSecs % 60;
     5ce:	2c e3       	ldi	r18, 0x3C	; 60
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	50 e0       	ldi	r21, 0x00	; 0
     5d6:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
     5da:	69 83       	std	Y+1, r22	; 0x01
	UTCSecs /= 60; // now it is minutes
     5dc:	c8 01       	movw	r24, r16
     5de:	b7 01       	movw	r22, r14
     5e0:	2c e3       	ldi	r18, 0x3C	; 60
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
     5ec:	12 2f       	mov	r17, r18
     5ee:	03 2f       	mov	r16, r19
     5f0:	f4 2e       	mov	r15, r20
     5f2:	e5 2e       	mov	r14, r21
	tm->Minute = UTCSecs % 60;
     5f4:	62 2f       	mov	r22, r18
     5f6:	73 2f       	mov	r23, r19
     5f8:	84 2f       	mov	r24, r20
     5fa:	95 2f       	mov	r25, r21
     5fc:	2c e3       	ldi	r18, 0x3C	; 60
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
     608:	6a 83       	std	Y+2, r22	; 0x02
	UTCSecs /= 60; // now it is hours
     60a:	61 2f       	mov	r22, r17
     60c:	70 2f       	mov	r23, r16
     60e:	8f 2d       	mov	r24, r15
     610:	9e 2d       	mov	r25, r14
     612:	2c e3       	ldi	r18, 0x3C	; 60
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	40 e0       	ldi	r20, 0x00	; 0
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
     61e:	12 2f       	mov	r17, r18
     620:	03 2f       	mov	r16, r19
     622:	f4 2e       	mov	r15, r20
     624:	e5 2e       	mov	r14, r21
	tm->Hour = UTCSecs % 24;
     626:	62 2f       	mov	r22, r18
     628:	73 2f       	mov	r23, r19
     62a:	84 2f       	mov	r24, r20
     62c:	95 2f       	mov	r25, r21
     62e:	28 e1       	ldi	r18, 0x18	; 24
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
     63a:	6b 83       	std	Y+3, r22	; 0x03
	UTCSecs /= 24; // now it is days
     63c:	61 2f       	mov	r22, r17
     63e:	70 2f       	mov	r23, r16
     640:	8f 2d       	mov	r24, r15
     642:	9e 2d       	mov	r25, r14
     644:	28 e1       	ldi	r18, 0x18	; 24
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	50 e0       	ldi	r21, 0x00	; 0
     64c:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
     650:	79 01       	movw	r14, r18
     652:	8a 01       	movw	r16, r20
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
     654:	c8 01       	movw	r24, r16
     656:	b7 01       	movw	r22, r14
     658:	6c 5f       	subi	r22, 0xFC	; 252
     65a:	7f 4f       	sbci	r23, 0xFF	; 255
     65c:	8f 4f       	sbci	r24, 0xFF	; 255
     65e:	9f 4f       	sbci	r25, 0xFF	; 255
     660:	27 e0       	ldi	r18, 0x07	; 7
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
     66c:	6f 5f       	subi	r22, 0xFF	; 255
     66e:	6c 83       	std	Y+4, r22	; 0x04
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	aa 24       	eor	r10, r10
     674:	bb 24       	eor	r11, r11
     676:	65 01       	movw	r12, r10
     678:	01 c0       	rjmp	.+2      	; 0x67c <Time_UTCSecsToTime+0xcc>
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
		year++;
     67a:	2f 5f       	subi	r18, 0xFF	; 255
	UTCSecs /= 24; // now it is days
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
     67c:	82 2e       	mov	r8, r18
     67e:	99 24       	eor	r9, r9
     680:	f4 01       	movw	r30, r8
     682:	ee 54       	subi	r30, 0x4E	; 78
     684:	f8 4f       	sbci	r31, 0xF8	; 248
     686:	cf 01       	movw	r24, r30
     688:	83 70       	andi	r24, 0x03	; 3
     68a:	90 70       	andi	r25, 0x00	; 0
     68c:	89 2b       	or	r24, r25
     68e:	99 f4       	brne	.+38     	; 0x6b6 <Time_UTCSecsToTime+0x106>
     690:	cf 01       	movw	r24, r30
     692:	64 e6       	ldi	r22, 0x64	; 100
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	0e 94 c7 4e 	call	0x9d8e	; 0x9d8e <__divmodhi4>
     69a:	89 2b       	or	r24, r25
     69c:	39 f4       	brne	.+14     	; 0x6ac <Time_UTCSecsToTime+0xfc>
     69e:	cf 01       	movw	r24, r30
     6a0:	60 e9       	ldi	r22, 0x90	; 144
     6a2:	71 e0       	ldi	r23, 0x01	; 1
     6a4:	0e 94 c7 4e 	call	0x9d8e	; 0x9d8e <__divmodhi4>
     6a8:	89 2b       	or	r24, r25
     6aa:	29 f4       	brne	.+10     	; 0x6b6 <Time_UTCSecsToTime+0x106>
     6ac:	8e e6       	ldi	r24, 0x6E	; 110
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	a0 e0       	ldi	r26, 0x00	; 0
     6b2:	b0 e0       	ldi	r27, 0x00	; 0
     6b4:	04 c0       	rjmp	.+8      	; 0x6be <Time_UTCSecsToTime+0x10e>
     6b6:	8d e6       	ldi	r24, 0x6D	; 109
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	a0 e0       	ldi	r26, 0x00	; 0
     6bc:	b0 e0       	ldi	r27, 0x00	; 0
     6be:	a8 0e       	add	r10, r24
     6c0:	b9 1e       	adc	r11, r25
     6c2:	ca 1e       	adc	r12, r26
     6c4:	db 1e       	adc	r13, r27
     6c6:	c5 01       	movw	r24, r10
     6c8:	a0 e0       	ldi	r26, 0x00	; 0
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
     6cc:	e8 16       	cp	r14, r24
     6ce:	f9 06       	cpc	r15, r25
     6d0:	0a 07       	cpc	r16, r26
     6d2:	1b 07       	cpc	r17, r27
     6d4:	90 f6       	brcc	.-92     	; 0x67a <Time_UTCSecsToTime+0xca>
		year++;
	}
	
	tm->Year = year; // year is offset from 1970 
     6d6:	2f 83       	std	Y+7, r18	; 0x07
	
	
	days -= LEAP_YEAR(year) ? 366 : 365;
     6d8:	f4 01       	movw	r30, r8
     6da:	ee 54       	subi	r30, 0x4E	; 78
     6dc:	f8 4f       	sbci	r31, 0xF8	; 248
     6de:	93 e0       	ldi	r25, 0x03	; 3
     6e0:	89 2e       	mov	r8, r25
     6e2:	91 2c       	mov	r9, r1
     6e4:	8e 22       	and	r8, r30
     6e6:	9f 22       	and	r9, r31
     6e8:	81 14       	cp	r8, r1
     6ea:	91 04       	cpc	r9, r1
     6ec:	99 f4       	brne	.+38     	; 0x714 <Time_UTCSecsToTime+0x164>
     6ee:	cf 01       	movw	r24, r30
     6f0:	64 e6       	ldi	r22, 0x64	; 100
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	0e 94 c7 4e 	call	0x9d8e	; 0x9d8e <__divmodhi4>
     6f8:	89 2b       	or	r24, r25
     6fa:	39 f4       	brne	.+14     	; 0x70a <Time_UTCSecsToTime+0x15a>
     6fc:	cf 01       	movw	r24, r30
     6fe:	60 e9       	ldi	r22, 0x90	; 144
     700:	71 e0       	ldi	r23, 0x01	; 1
     702:	0e 94 c7 4e 	call	0x9d8e	; 0x9d8e <__divmodhi4>
     706:	89 2b       	or	r24, r25
     708:	29 f4       	brne	.+10     	; 0x714 <Time_UTCSecsToTime+0x164>
     70a:	8e e6       	ldi	r24, 0x6E	; 110
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	a0 e0       	ldi	r26, 0x00	; 0
     710:	b0 e0       	ldi	r27, 0x00	; 0
     712:	04 c0       	rjmp	.+8      	; 0x71c <Time_UTCSecsToTime+0x16c>
     714:	8d e6       	ldi	r24, 0x6D	; 109
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	a0 e0       	ldi	r26, 0x00	; 0
     71a:	b0 e0       	ldi	r27, 0x00	; 0
	UTCSecs  -= days; // now it is days in this year, starting at 0
     71c:	a8 1a       	sub	r10, r24
     71e:	b9 0a       	sbc	r11, r25
     720:	ca 0a       	sbc	r12, r26
     722:	db 0a       	sbc	r13, r27
     724:	98 01       	movw	r18, r16
     726:	87 01       	movw	r16, r14
     728:	0a 19       	sub	r16, r10
     72a:	1b 09       	sbc	r17, r11
     72c:	2c 09       	sbc	r18, r12
     72e:	3d 09       	sbc	r19, r13
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
	      	if (LEAP_YEAR(year)) {
     730:	cf 01       	movw	r24, r30
     732:	64 e6       	ldi	r22, 0x64	; 100
     734:	70 e0       	ldi	r23, 0x00	; 0
     736:	0e 94 c7 4e 	call	0x9d8e	; 0x9d8e <__divmodhi4>
     73a:	7c 01       	movw	r14, r24
     73c:	cf 01       	movw	r24, r30
     73e:	60 e9       	ldi	r22, 0x90	; 144
     740:	71 e0       	ldi	r23, 0x01	; 1
     742:	0e 94 c7 4e 	call	0x9d8e	; 0x9d8e <__divmodhi4>
     746:	ac 01       	movw	r20, r24
     748:	e5 ed       	ldi	r30, 0xD5	; 213
     74a:	fc e2       	ldi	r31, 0x2C	; 44
     74c:	60 e0       	ldi	r22, 0x00	; 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
     74e:	61 30       	cpi	r22, 0x01	; 1
     750:	51 f4       	brne	.+20     	; 0x766 <Time_UTCSecsToTime+0x1b6>
	      	if (LEAP_YEAR(year)) {
     752:	81 14       	cp	r8, r1
     754:	91 04       	cpc	r9, r1
     756:	49 f4       	brne	.+18     	; 0x76a <Time_UTCSecsToTime+0x1ba>
     758:	e1 14       	cp	r14, r1
     75a:	f1 04       	cpc	r15, r1
     75c:	41 f4       	brne	.+16     	; 0x76e <Time_UTCSecsToTime+0x1be>
     75e:	41 15       	cp	r20, r1
     760:	51 05       	cpc	r21, r1
     762:	29 f0       	breq	.+10     	; 0x76e <Time_UTCSecsToTime+0x1be>
     764:	02 c0       	rjmp	.+4      	; 0x76a <Time_UTCSecsToTime+0x1ba>
	       		monthLength=29;
	      	} else {
	        	monthLength=28;
	      	}
    	} else {
      		monthLength = monthDays[month];
     766:	80 81       	ld	r24, Z
     768:	03 c0       	rjmp	.+6      	; 0x770 <Time_UTCSecsToTime+0x1c0>
     76a:	8c e1       	ldi	r24, 0x1C	; 28
     76c:	01 c0       	rjmp	.+2      	; 0x770 <Time_UTCSecsToTime+0x1c0>
     76e:	8d e1       	ldi	r24, 0x1D	; 29
    	}
		
    	if (UTCSecs >= monthLength) {
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	a0 e0       	ldi	r26, 0x00	; 0
     774:	b0 e0       	ldi	r27, 0x00	; 0
     776:	08 17       	cp	r16, r24
     778:	19 07       	cpc	r17, r25
     77a:	2a 07       	cpc	r18, r26
     77c:	3b 07       	cpc	r19, r27
     77e:	40 f0       	brcs	.+16     	; 0x790 <Time_UTCSecsToTime+0x1e0>
      		UTCSecs -= monthLength;
     780:	08 1b       	sub	r16, r24
     782:	19 0b       	sbc	r17, r25
     784:	2a 0b       	sbc	r18, r26
     786:	3b 0b       	sbc	r19, r27
	UTCSecs  -= days; // now it is days in this year, starting at 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
     788:	6f 5f       	subi	r22, 0xFF	; 255
     78a:	31 96       	adiw	r30, 0x01	; 1
     78c:	6c 30       	cpi	r22, 0x0C	; 12
     78e:	f9 f6       	brne	.-66     	; 0x74e <Time_UTCSecsToTime+0x19e>
      		UTCSecs -= monthLength;
    	} else {
        	break;
  		}
	}
	tm->Month = month + 1;  // jan is month 1  
     790:	6f 5f       	subi	r22, 0xFF	; 255
     792:	6e 83       	std	Y+6, r22	; 0x06
	tm->Day = UTCSecs + 1;     // day of month 
     794:	80 2f       	mov	r24, r16
     796:	8f 5f       	subi	r24, 0xFF	; 255
     798:	8d 83       	std	Y+5, r24	; 0x05
	
	return tm;	
}
     79a:	ce 01       	movw	r24, r28
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	ff 90       	pop	r15
     7a6:	ef 90       	pop	r14
     7a8:	df 90       	pop	r13
     7aa:	cf 90       	pop	r12
     7ac:	bf 90       	pop	r11
     7ae:	af 90       	pop	r10
     7b0:	9f 90       	pop	r9
     7b2:	8f 90       	pop	r8
     7b4:	08 95       	ret

000007b6 <Rs232_Init>:

char				airQualityString[100];
uint32_t			airCount[6];

void Rs232_Init(void){
	Rs232_Port.DIRSET = Rs232_TX_pin_bm;
     7b6:	e0 e6       	ldi	r30, 0x60	; 96
     7b8:	f6 e0       	ldi	r31, 0x06	; 6
     7ba:	88 e0       	ldi	r24, 0x08	; 8
     7bc:	81 83       	std	Z+1, r24	; 0x01
	Rs232_Port.DIRCLR = Rs232_RX_pin_bm;
     7be:	84 e0       	ldi	r24, 0x04	; 4
     7c0:	82 83       	std	Z+2, r24	; 0x02
   
	Rs232_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);
     7c2:	e0 ea       	ldi	r30, 0xA0	; 160
     7c4:	f9 e0       	ldi	r31, 0x09	; 9
     7c6:	83 e0       	ldi	r24, 0x03	; 3
     7c8:	85 83       	std	Z+5, r24	; 0x05
	 	    				
	Rs232_Usart.BAUDCTRLA = 95 & 0xFF;
     7ca:	8f e5       	ldi	r24, 0x5F	; 95
     7cc:	86 83       	std	Z+6, r24	; 0x06
	Rs232_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
     7ce:	17 82       	std	Z+7, r1	; 0x07


	Rs232_Usart.CTRLB |= USART_RXEN_bm;
     7d0:	84 81       	ldd	r24, Z+4	; 0x04
     7d2:	80 61       	ori	r24, 0x10	; 16
     7d4:	84 83       	std	Z+4, r24	; 0x04
	Rs232_Usart.CTRLB |= USART_TXEN_bm;
     7d6:	84 81       	ldd	r24, Z+4	; 0x04
     7d8:	88 60       	ori	r24, 0x08	; 8
     7da:	84 83       	std	Z+4, r24	; 0x04
	
	Rs232_Usart.CTRLA |= USART_RXCINTLVL_HI_gc;
     7dc:	83 81       	ldd	r24, Z+3	; 0x03
     7de:	80 63       	ori	r24, 0x30	; 48
     7e0:	83 83       	std	Z+3, r24	; 0x03
}
     7e2:	08 95       	ret

000007e4 <Rs232_CharReadyToRead>:



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     7e4:	20 91 20 2d 	lds	r18, 0x2D20
     7e8:	30 91 21 2d 	lds	r19, 0x2D21
     7ec:	80 91 1e 2d 	lds	r24, 0x2D1E
     7f0:	90 91 1f 2d 	lds	r25, 0x2D1F
     7f4:	40 e0       	ldi	r20, 0x00	; 0
     7f6:	28 17       	cp	r18, r24
     7f8:	39 07       	cpc	r19, r25
     7fa:	09 f0       	breq	.+2      	; 0x7fe <Rs232_CharReadyToRead+0x1a>
     7fc:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     7fe:	84 2f       	mov	r24, r20
     800:	08 95       	ret

00000802 <Rs232_GetByte>:

uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
     802:	88 23       	and	r24, r24
     804:	59 f0       	breq	.+22     	; 0x81c <Rs232_GetByte+0x1a>
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     806:	20 91 20 2d 	lds	r18, 0x2D20
     80a:	30 91 21 2d 	lds	r19, 0x2D21
     80e:	80 91 1e 2d 	lds	r24, 0x2D1E
     812:	90 91 1f 2d 	lds	r25, 0x2D1F
     816:	28 17       	cp	r18, r24
     818:	39 07       	cpc	r19, r25
     81a:	a9 f3       	breq	.-22     	; 0x806 <Rs232_GetByte+0x4>
uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
		while(!Rs232_CharReadyToRead());
	}

	uint8_t tmp = Rs232Buffer[Rs232_readLocation];
     81c:	e0 91 1e 2d 	lds	r30, 0x2D1E
     820:	f0 91 1f 2d 	lds	r31, 0x2D1F
     824:	e5 58       	subi	r30, 0x85	; 133
     826:	f3 4b       	sbci	r31, 0xB3	; 179
     828:	e0 81       	ld	r30, Z
	Rs232_readLocation++;
     82a:	80 91 1e 2d 	lds	r24, 0x2D1E
     82e:	90 91 1f 2d 	lds	r25, 0x2D1F
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	80 93 1e 2d 	sts	0x2D1E, r24
     838:	90 93 1f 2d 	sts	0x2D1F, r25
	if(Rs232_readLocation >= Rs232_BufferSize){
     83c:	80 91 1e 2d 	lds	r24, 0x2D1E
     840:	90 91 1f 2d 	lds	r25, 0x2D1F
     844:	80 50       	subi	r24, 0x00	; 0
     846:	94 40       	sbci	r25, 0x04	; 4
     848:	20 f0       	brcs	.+8      	; 0x852 <Rs232_GetByte+0x50>
	  Rs232_readLocation=0;
     84a:	10 92 1e 2d 	sts	0x2D1E, r1
     84e:	10 92 1f 2d 	sts	0x2D1F, r1
	}
	return tmp;
}
     852:	8e 2f       	mov	r24, r30
     854:	08 95       	ret

00000856 <Rs232_ClearBuffer>:

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
     856:	80 91 20 2d 	lds	r24, 0x2D20
     85a:	90 91 21 2d 	lds	r25, 0x2D21
     85e:	80 93 1e 2d 	sts	0x2D1E, r24
     862:	90 93 1f 2d 	sts	0x2D1F, r25
}
     866:	08 95       	ret

00000868 <Rs232_SendByte>:

void Rs232_SendByte(uint8_t data){
     868:	98 2f       	mov	r25, r24
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
     86a:	80 91 a1 09 	lds	r24, 0x09A1
     86e:	85 ff       	sbrs	r24, 5
     870:	fc cf       	rjmp	.-8      	; 0x86a <Rs232_SendByte+0x2>
	Rs232_Usart.DATA = data;	
     872:	90 93 a0 09 	sts	0x09A0, r25
}
     876:	08 95       	ret

00000878 <__vector_88>:
		Rs232_SendByte(13);
		Rs232_SendByte(10);
	}
}

ISR(Rs232_RXC_vect){
     878:	1f 92       	push	r1
     87a:	0f 92       	push	r0
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	0f 92       	push	r0
     880:	0b b6       	in	r0, 0x3b	; 59
     882:	0f 92       	push	r0
     884:	11 24       	eor	r1, r1
     886:	2f 93       	push	r18
     888:	8f 93       	push	r24
     88a:	9f 93       	push	r25
     88c:	ef 93       	push	r30
     88e:	ff 93       	push	r31
	Rs232Buffer[Rs232_writeLocation] = Rs232_Usart.DATA;
     890:	e0 91 20 2d 	lds	r30, 0x2D20
     894:	f0 91 21 2d 	lds	r31, 0x2D21
     898:	80 91 a0 09 	lds	r24, 0x09A0
     89c:	e5 58       	subi	r30, 0x85	; 133
     89e:	f3 4b       	sbci	r31, 0xB3	; 179
     8a0:	80 83       	st	Z, r24

	if(Rs232Buffer[Rs232_writeLocation] == 0x0A){
     8a2:	e0 91 20 2d 	lds	r30, 0x2D20
     8a6:	f0 91 21 2d 	lds	r31, 0x2D21
     8aa:	e5 58       	subi	r30, 0x85	; 133
     8ac:	f3 4b       	sbci	r31, 0xB3	; 179
     8ae:	80 81       	ld	r24, Z
     8b0:	8a 30       	cpi	r24, 0x0A	; 10
     8b2:	19 f4       	brne	.+6      	; 0x8ba <__vector_88+0x42>
		okToSendAirQuality = true;
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	80 93 22 2d 	sts	0x2D22, r24
	}
	Rs232_writeLocation++;
     8ba:	80 91 20 2d 	lds	r24, 0x2D20
     8be:	90 91 21 2d 	lds	r25, 0x2D21
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	80 93 20 2d 	sts	0x2D20, r24
     8c8:	90 93 21 2d 	sts	0x2D21, r25
	if(Rs232_writeLocation >= Rs232_BufferSize){
     8cc:	80 91 20 2d 	lds	r24, 0x2D20
     8d0:	90 91 21 2d 	lds	r25, 0x2D21
     8d4:	80 50       	subi	r24, 0x00	; 0
     8d6:	94 40       	sbci	r25, 0x04	; 4
     8d8:	20 f0       	brcs	.+8      	; 0x8e2 <__vector_88+0x6a>
		Rs232_writeLocation = 0;
     8da:	10 92 20 2d 	sts	0x2D20, r1
     8de:	10 92 21 2d 	sts	0x2D21, r1
	}
}
     8e2:	ff 91       	pop	r31
     8e4:	ef 91       	pop	r30
     8e6:	9f 91       	pop	r25
     8e8:	8f 91       	pop	r24
     8ea:	2f 91       	pop	r18
     8ec:	0f 90       	pop	r0
     8ee:	0b be       	out	0x3b, r0	; 59
     8f0:	0f 90       	pop	r0
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	0f 90       	pop	r0
     8f6:	1f 90       	pop	r1
     8f8:	18 95       	reti

000008fa <wait_ready>:
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     8fa:	82 e3       	ldi	r24, 0x32	; 50
     8fc:	80 93 8d 2d 	sts	0x2D8D, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     900:	8f ef       	ldi	r24, 0xFF	; 255
     902:	e0 ec       	ldi	r30, 0xC0	; 192
     904:	f8 e0       	ldi	r31, 0x08	; 8
     906:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     908:	80 91 c2 08 	lds	r24, 0x08C2
     90c:	87 ff       	sbrs	r24, 7
     90e:	fc cf       	rjmp	.-8      	; 0x908 <wait_ready+0xe>
	return SD_SPI.DATA;
     910:	80 91 c3 08 	lds	r24, 0x08C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     914:	e0 ec       	ldi	r30, 0xC0	; 192
     916:	f8 e0       	ldi	r31, 0x08	; 8
     918:	2f ef       	ldi	r18, 0xFF	; 255
     91a:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     91c:	80 91 c2 08 	lds	r24, 0x08C2
     920:	87 ff       	sbrs	r24, 7
     922:	fc cf       	rjmp	.-8      	; 0x91c <wait_ready+0x22>
	return SD_SPI.DATA;
     924:	90 91 c3 08 	lds	r25, 0x08C3

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
     928:	9f 3f       	cpi	r25, 0xFF	; 255
     92a:	21 f0       	breq	.+8      	; 0x934 <wait_ready+0x3a>
     92c:	80 91 8d 2d 	lds	r24, 0x2D8D
     930:	88 23       	and	r24, r24
     932:	99 f7       	brne	.-26     	; 0x91a <wait_ready+0x20>

	return res;
}
     934:	89 2f       	mov	r24, r25
     936:	08 95       	ret

00000938 <select>:
/* Select the card and wait ready                                        */
/*-----------------------------------------------------------------------*/

static
BOOL select (void)	/* TRUE:Successful, FALSE:Timeout */
{
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
	CS_LOW();
     93e:	c0 e4       	ldi	r28, 0x40	; 64
     940:	d6 e0       	ldi	r29, 0x06	; 6
     942:	10 e1       	ldi	r17, 0x10	; 16
     944:	1e 83       	std	Y+6, r17	; 0x06
	if (wait_ready() != 0xFF) {
     946:	0e 94 7d 04 	call	0x8fa	; 0x8fa <wait_ready>
     94a:	8f 3f       	cpi	r24, 0xFF	; 255
     94c:	11 f4       	brne	.+4      	; 0x952 <select+0x1a>
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	0c c0       	rjmp	.+24     	; 0x96a <select+0x32>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     952:	1d 83       	std	Y+5, r17	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	e0 ec       	ldi	r30, 0xC0	; 192
     958:	f8 e0       	ldi	r31, 0x08	; 8
     95a:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     95c:	80 91 c2 08 	lds	r24, 0x08C2
     960:	87 ff       	sbrs	r24, 7
     962:	fc cf       	rjmp	.-8      	; 0x95c <select+0x24>
	return SD_SPI.DATA;
     964:	80 91 c3 08 	lds	r24, 0x08C3
     968:	80 e0       	ldi	r24, 0x00	; 0
	if (wait_ready() != 0xFF) {
		deselect();
		return FALSE;
	}
	return TRUE;
}
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	08 95       	ret

00000972 <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     972:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
     974:	84 e1       	ldi	r24, 0x14	; 20
     976:	80 93 8c 2d 	sts	0x2D8C, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     97a:	a0 ec       	ldi	r26, 0xC0	; 192
     97c:	b8 e0       	ldi	r27, 0x08	; 8
     97e:	9f ef       	ldi	r25, 0xFF	; 255
     980:	13 96       	adiw	r26, 0x03	; 3
     982:	9c 93       	st	X, r25
     984:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     986:	80 91 c2 08 	lds	r24, 0x08C2
     98a:	87 ff       	sbrs	r24, 7
     98c:	fc cf       	rjmp	.-8      	; 0x986 <rcvr_datablock+0x14>
	return SD_SPI.DATA;
     98e:	80 91 c3 08 	lds	r24, 0x08C3


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
     992:	8f 3f       	cpi	r24, 0xFF	; 255
     994:	29 f4       	brne	.+10     	; 0x9a0 <rcvr_datablock+0x2e>
     996:	80 91 8c 2d 	lds	r24, 0x2D8C
     99a:	88 23       	and	r24, r24
     99c:	89 f7       	brne	.-30     	; 0x980 <rcvr_datablock+0xe>
     99e:	49 c0       	rjmp	.+146    	; 0xa32 <rcvr_datablock+0xc0>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
     9a0:	8e 3f       	cpi	r24, 0xFE	; 254
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <rcvr_datablock+0x34>
     9a4:	46 c0       	rjmp	.+140    	; 0xa32 <rcvr_datablock+0xc0>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
     9a6:	a0 ec       	ldi	r26, 0xC0	; 192
     9a8:	b8 e0       	ldi	r27, 0x08	; 8
     9aa:	9f ef       	ldi	r25, 0xFF	; 255
     9ac:	13 96       	adiw	r26, 0x03	; 3
     9ae:	9c 93       	st	X, r25
     9b0:	13 97       	sbiw	r26, 0x03	; 3
     9b2:	80 91 c2 08 	lds	r24, 0x08C2
     9b6:	87 ff       	sbrs	r24, 7
     9b8:	fc cf       	rjmp	.-8      	; 0x9b2 <rcvr_datablock+0x40>
     9ba:	80 91 c3 08 	lds	r24, 0x08C3
     9be:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
     9c0:	13 96       	adiw	r26, 0x03	; 3
     9c2:	9c 93       	st	X, r25
     9c4:	13 97       	sbiw	r26, 0x03	; 3
     9c6:	80 91 c2 08 	lds	r24, 0x08C2
     9ca:	87 ff       	sbrs	r24, 7
     9cc:	fc cf       	rjmp	.-8      	; 0x9c6 <rcvr_datablock+0x54>
     9ce:	80 91 c3 08 	lds	r24, 0x08C3
     9d2:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
     9d4:	13 96       	adiw	r26, 0x03	; 3
     9d6:	9c 93       	st	X, r25
     9d8:	13 97       	sbiw	r26, 0x03	; 3
     9da:	80 91 c2 08 	lds	r24, 0x08C2
     9de:	87 ff       	sbrs	r24, 7
     9e0:	fc cf       	rjmp	.-8      	; 0x9da <rcvr_datablock+0x68>
     9e2:	80 91 c3 08 	lds	r24, 0x08C3
     9e6:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
     9e8:	13 96       	adiw	r26, 0x03	; 3
     9ea:	9c 93       	st	X, r25
     9ec:	13 97       	sbiw	r26, 0x03	; 3
     9ee:	80 91 c2 08 	lds	r24, 0x08C2
     9f2:	87 ff       	sbrs	r24, 7
     9f4:	fc cf       	rjmp	.-8      	; 0x9ee <rcvr_datablock+0x7c>
     9f6:	80 91 c3 08 	lds	r24, 0x08C3
     9fa:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
     9fc:	64 50       	subi	r22, 0x04	; 4
     9fe:	70 40       	sbci	r23, 0x00	; 0
     a00:	11 f0       	breq	.+4      	; 0xa06 <rcvr_datablock+0x94>
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     a02:	34 96       	adiw	r30, 0x04	; 4
     a04:	d3 cf       	rjmp	.-90     	; 0x9ac <rcvr_datablock+0x3a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a06:	8f ef       	ldi	r24, 0xFF	; 255
     a08:	e0 ec       	ldi	r30, 0xC0	; 192
     a0a:	f8 e0       	ldi	r31, 0x08	; 8
     a0c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     a0e:	80 91 c2 08 	lds	r24, 0x08C2
     a12:	87 ff       	sbrs	r24, 7
     a14:	fc cf       	rjmp	.-8      	; 0xa0e <rcvr_datablock+0x9c>
	return SD_SPI.DATA;
     a16:	80 91 c3 08 	lds	r24, 0x08C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a1a:	8f ef       	ldi	r24, 0xFF	; 255
     a1c:	e0 ec       	ldi	r30, 0xC0	; 192
     a1e:	f8 e0       	ldi	r31, 0x08	; 8
     a20:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     a22:	80 91 c2 08 	lds	r24, 0x08C2
     a26:	87 ff       	sbrs	r24, 7
     a28:	fc cf       	rjmp	.-8      	; 0xa22 <rcvr_datablock+0xb0>
	return SD_SPI.DATA;
     a2a:	80 91 c3 08 	lds	r24, 0x08C3
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	08 95       	ret
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
     a32:	80 e0       	ldi	r24, 0x00	; 0
}
     a34:	08 95       	ret

00000a36 <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	ec 01       	movw	r28, r24
     a3e:	16 2f       	mov	r17, r22
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
     a40:	0e 94 7d 04 	call	0x8fa	; 0x8fa <wait_ready>
     a44:	8f 3f       	cpi	r24, 0xFF	; 255
     a46:	11 f0       	breq	.+4      	; 0xa4c <xmit_datablock+0x16>
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	3f c0       	rjmp	.+126    	; 0xaca <xmit_datablock+0x94>

	xmit_spi(token);					/* Xmit data token */
     a4c:	e0 ec       	ldi	r30, 0xC0	; 192
     a4e:	f8 e0       	ldi	r31, 0x08	; 8
     a50:	13 83       	std	Z+3, r17	; 0x03
     a52:	80 91 c2 08 	lds	r24, 0x08C2
     a56:	87 ff       	sbrs	r24, 7
     a58:	fc cf       	rjmp	.-8      	; 0xa52 <xmit_datablock+0x1c>
	if (token != 0xFD) {	/* Is data token */
     a5a:	1d 3f       	cpi	r17, 0xFD	; 253
     a5c:	11 f4       	brne	.+4      	; 0xa62 <xmit_datablock+0x2c>
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	34 c0       	rjmp	.+104    	; 0xaca <xmit_datablock+0x94>
     a62:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
     a64:	e0 ec       	ldi	r30, 0xC0	; 192
     a66:	f8 e0       	ldi	r31, 0x08	; 8
     a68:	88 81       	ld	r24, Y
     a6a:	83 83       	std	Z+3, r24	; 0x03
     a6c:	80 91 c2 08 	lds	r24, 0x08C2
     a70:	87 ff       	sbrs	r24, 7
     a72:	fc cf       	rjmp	.-8      	; 0xa6c <xmit_datablock+0x36>
			xmit_spi(*buff++);
     a74:	89 81       	ldd	r24, Y+1	; 0x01
     a76:	83 83       	std	Z+3, r24	; 0x03
     a78:	80 91 c2 08 	lds	r24, 0x08C2
     a7c:	87 ff       	sbrs	r24, 7
     a7e:	fc cf       	rjmp	.-8      	; 0xa78 <xmit_datablock+0x42>
		} while (--wc);
     a80:	91 50       	subi	r25, 0x01	; 1
     a82:	11 f0       	breq	.+4      	; 0xa88 <xmit_datablock+0x52>
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     a84:	22 96       	adiw	r28, 0x02	; 2
     a86:	f0 cf       	rjmp	.-32     	; 0xa68 <xmit_datablock+0x32>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
     a88:	8f ef       	ldi	r24, 0xFF	; 255
     a8a:	e0 ec       	ldi	r30, 0xC0	; 192
     a8c:	f8 e0       	ldi	r31, 0x08	; 8
     a8e:	83 83       	std	Z+3, r24	; 0x03
     a90:	80 91 c2 08 	lds	r24, 0x08C2
     a94:	87 ff       	sbrs	r24, 7
     a96:	fc cf       	rjmp	.-8      	; 0xa90 <xmit_datablock+0x5a>
		xmit_spi(0xFF);
     a98:	8f ef       	ldi	r24, 0xFF	; 255
     a9a:	e0 ec       	ldi	r30, 0xC0	; 192
     a9c:	f8 e0       	ldi	r31, 0x08	; 8
     a9e:	83 83       	std	Z+3, r24	; 0x03
     aa0:	80 91 c2 08 	lds	r24, 0x08C2
     aa4:	87 ff       	sbrs	r24, 7
     aa6:	fc cf       	rjmp	.-8      	; 0xaa0 <xmit_datablock+0x6a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     aa8:	8f ef       	ldi	r24, 0xFF	; 255
     aaa:	e0 ec       	ldi	r30, 0xC0	; 192
     aac:	f8 e0       	ldi	r31, 0x08	; 8
     aae:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     ab0:	80 91 c2 08 	lds	r24, 0x08C2
     ab4:	87 ff       	sbrs	r24, 7
     ab6:	fc cf       	rjmp	.-8      	; 0xab0 <xmit_datablock+0x7a>
	return SD_SPI.DATA;
     ab8:	80 91 c3 08 	lds	r24, 0x08C3
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	8f 71       	andi	r24, 0x1F	; 31
     ac0:	85 30       	cpi	r24, 0x05	; 5
     ac2:	09 f0       	breq	.+2      	; 0xac6 <xmit_datablock+0x90>
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	98 27       	eor	r25, r24
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
}
     aca:	89 2f       	mov	r24, r25
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	08 95       	ret

00000ad4 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     ad4:	df 92       	push	r13
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	d8 2e       	mov	r13, r24
     ae0:	7a 01       	movw	r14, r20
     ae2:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     ae4:	87 ff       	sbrs	r24, 7
     ae6:	0c c0       	rjmp	.+24     	; 0xb00 <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     ae8:	87 e7       	ldi	r24, 0x77	; 119
     aea:	40 e0       	ldi	r20, 0x00	; 0
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
		if (res > 1) return res;
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	08 f0       	brcs	.+2      	; 0xafc <send_cmd+0x28>
     afa:	72 c0       	rjmp	.+228    	; 0xbe0 <send_cmd+0x10c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     afc:	8f e7       	ldi	r24, 0x7F	; 127
     afe:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	e0 e4       	ldi	r30, 0x40	; 64
     b04:	f6 e0       	ldi	r31, 0x06	; 6
     b06:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b08:	8f ef       	ldi	r24, 0xFF	; 255
     b0a:	e0 ec       	ldi	r30, 0xC0	; 192
     b0c:	f8 e0       	ldi	r31, 0x08	; 8
     b0e:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     b10:	80 91 c2 08 	lds	r24, 0x08C2
     b14:	87 ff       	sbrs	r24, 7
     b16:	fc cf       	rjmp	.-8      	; 0xb10 <send_cmd+0x3c>
	return SD_SPI.DATA;
     b18:	80 91 c3 08 	lds	r24, 0x08C3
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
     b1c:	0e 94 9c 04 	call	0x938	; 0x938 <select>
     b20:	88 23       	and	r24, r24
     b22:	11 f4       	brne	.+4      	; 0xb28 <send_cmd+0x54>
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	5c c0       	rjmp	.+184    	; 0xbe0 <send_cmd+0x10c>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
     b28:	e0 ec       	ldi	r30, 0xC0	; 192
     b2a:	f8 e0       	ldi	r31, 0x08	; 8
     b2c:	d3 82       	std	Z+3, r13	; 0x03
     b2e:	80 91 c2 08 	lds	r24, 0x08C2
     b32:	87 ff       	sbrs	r24, 7
     b34:	fc cf       	rjmp	.-8      	; 0xb2e <send_cmd+0x5a>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     b36:	81 2f       	mov	r24, r17
     b38:	99 27       	eor	r25, r25
     b3a:	aa 27       	eor	r26, r26
     b3c:	bb 27       	eor	r27, r27
     b3e:	e0 ec       	ldi	r30, 0xC0	; 192
     b40:	f8 e0       	ldi	r31, 0x08	; 8
     b42:	83 83       	std	Z+3, r24	; 0x03
     b44:	80 91 c2 08 	lds	r24, 0x08C2
     b48:	87 ff       	sbrs	r24, 7
     b4a:	fc cf       	rjmp	.-8      	; 0xb44 <send_cmd+0x70>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     b4c:	c8 01       	movw	r24, r16
     b4e:	aa 27       	eor	r26, r26
     b50:	bb 27       	eor	r27, r27
     b52:	e0 ec       	ldi	r30, 0xC0	; 192
     b54:	f8 e0       	ldi	r31, 0x08	; 8
     b56:	83 83       	std	Z+3, r24	; 0x03
     b58:	80 91 c2 08 	lds	r24, 0x08C2
     b5c:	87 ff       	sbrs	r24, 7
     b5e:	fc cf       	rjmp	.-8      	; 0xb58 <send_cmd+0x84>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     b60:	bb 27       	eor	r27, r27
     b62:	a1 2f       	mov	r26, r17
     b64:	90 2f       	mov	r25, r16
     b66:	8f 2d       	mov	r24, r15
     b68:	e0 ec       	ldi	r30, 0xC0	; 192
     b6a:	f8 e0       	ldi	r31, 0x08	; 8
     b6c:	83 83       	std	Z+3, r24	; 0x03
     b6e:	80 91 c2 08 	lds	r24, 0x08C2
     b72:	87 ff       	sbrs	r24, 7
     b74:	fc cf       	rjmp	.-8      	; 0xb6e <send_cmd+0x9a>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     b76:	e0 ec       	ldi	r30, 0xC0	; 192
     b78:	f8 e0       	ldi	r31, 0x08	; 8
     b7a:	e3 82       	std	Z+3, r14	; 0x03
     b7c:	80 91 c2 08 	lds	r24, 0x08C2
     b80:	87 ff       	sbrs	r24, 7
     b82:	fc cf       	rjmp	.-8      	; 0xb7c <send_cmd+0xa8>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     b84:	80 e4       	ldi	r24, 0x40	; 64
     b86:	d8 16       	cp	r13, r24
     b88:	11 f4       	brne	.+4      	; 0xb8e <send_cmd+0xba>
     b8a:	85 e9       	ldi	r24, 0x95	; 149
     b8c:	06 c0       	rjmp	.+12     	; 0xb9a <send_cmd+0xc6>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     b8e:	88 e4       	ldi	r24, 0x48	; 72
     b90:	d8 16       	cp	r13, r24
     b92:	11 f4       	brne	.+4      	; 0xb98 <send_cmd+0xc4>
     b94:	87 e8       	ldi	r24, 0x87	; 135
     b96:	01 c0       	rjmp	.+2      	; 0xb9a <send_cmd+0xc6>
     b98:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
     b9a:	e0 ec       	ldi	r30, 0xC0	; 192
     b9c:	f8 e0       	ldi	r31, 0x08	; 8
     b9e:	83 83       	std	Z+3, r24	; 0x03
     ba0:	80 91 c2 08 	lds	r24, 0x08C2
     ba4:	87 ff       	sbrs	r24, 7
     ba6:	fc cf       	rjmp	.-8      	; 0xba0 <send_cmd+0xcc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
     ba8:	8c e4       	ldi	r24, 0x4C	; 76
     baa:	d8 16       	cp	r13, r24
     bac:	51 f4       	brne	.+20     	; 0xbc2 <send_cmd+0xee>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	e0 ec       	ldi	r30, 0xC0	; 192
     bb2:	f8 e0       	ldi	r31, 0x08	; 8
     bb4:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     bb6:	80 91 c2 08 	lds	r24, 0x08C2
     bba:	87 ff       	sbrs	r24, 7
     bbc:	fc cf       	rjmp	.-8      	; 0xbb6 <send_cmd+0xe2>
	return SD_SPI.DATA;
     bbe:	80 91 c3 08 	lds	r24, 0x08C3
     bc2:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     bc4:	e0 ec       	ldi	r30, 0xC0	; 192
     bc6:	f8 e0       	ldi	r31, 0x08	; 8
     bc8:	2f ef       	ldi	r18, 0xFF	; 255
     bca:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     bcc:	80 91 c2 08 	lds	r24, 0x08C2
     bd0:	87 ff       	sbrs	r24, 7
     bd2:	fc cf       	rjmp	.-8      	; 0xbcc <send_cmd+0xf8>
	return SD_SPI.DATA;
     bd4:	80 91 c3 08 	lds	r24, 0x08C3
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
     bd8:	87 ff       	sbrs	r24, 7
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <send_cmd+0x10c>
     bdc:	91 50       	subi	r25, 0x01	; 1
     bde:	a9 f7       	brne	.-22     	; 0xbca <send_cmd+0xf6>
	return res;			/* Return with the response value */
}
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	ff 90       	pop	r15
     be6:	ef 90       	pop	r14
     be8:	df 90       	pop	r13
     bea:	08 95       	ret

00000bec <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     bec:	ef 92       	push	r14
     bee:	ff 92       	push	r15
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <disk_initialize+0xe>
     bfa:	0f 92       	push	r0
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	//if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     c00:	80 91 d4 2c 	lds	r24, 0x2CD4
     c04:	81 fd       	sbrc	r24, 1
     c06:	cc c0       	rjmp	.+408    	; 0xda0 <disk_initialize+0x1b4>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     c08:	e0 e4       	ldi	r30, 0x40	; 64
     c0a:	f6 e0       	ldi	r31, 0x06	; 6
     c0c:	80 eb       	ldi	r24, 0xB0	; 176
     c0e:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     c10:	88 e3       	ldi	r24, 0x38	; 56
     c12:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     c14:	14 82       	std	Z+4, r1	; 0x04
     c16:	8c e2       	ldi	r24, 0x2C	; 44
     c18:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1a:	20 e7       	ldi	r18, 0x70	; 112
     c1c:	31 e0       	ldi	r19, 0x01	; 1
     c1e:	f9 01       	movw	r30, r18
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <disk_initialize+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c24:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c26:	d9 f7       	brne	.-10     	; 0xc1e <disk_initialize+0x32>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
     c28:	83 e5       	ldi	r24, 0x53	; 83
     c2a:	80 93 c0 08 	sts	0x08C0, r24
     c2e:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c30:	e0 ec       	ldi	r30, 0xC0	; 192
     c32:	f8 e0       	ldi	r31, 0x08	; 8
     c34:	2f ef       	ldi	r18, 0xFF	; 255
     c36:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c38:	80 91 c2 08 	lds	r24, 0x08C2
     c3c:	87 ff       	sbrs	r24, 7
     c3e:	fc cf       	rjmp	.-8      	; 0xc38 <disk_initialize+0x4c>
	return SD_SPI.DATA;
     c40:	80 91 c3 08 	lds	r24, 0x08C3

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
     c44:	91 50       	subi	r25, 0x01	; 1
     c46:	b9 f7       	brne	.-18     	; 0xc36 <disk_initialize+0x4a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     c48:	80 e4       	ldi	r24, 0x40	; 64
     c4a:	40 e0       	ldi	r20, 0x00	; 0
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	09 f0       	breq	.+2      	; 0xc5c <disk_initialize+0x70>
     c5a:	87 c0       	rjmp	.+270    	; 0xd6a <disk_initialize+0x17e>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     c5c:	84 e6       	ldi	r24, 0x64	; 100
     c5e:	80 93 8c 2d 	sts	0x2D8C, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
     c62:	88 e4       	ldi	r24, 0x48	; 72
     c64:	4a ea       	ldi	r20, 0xAA	; 170
     c66:	51 e0       	ldi	r21, 0x01	; 1
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	09 f0       	breq	.+2      	; 0xc76 <disk_initialize+0x8a>
     c74:	53 c0       	rjmp	.+166    	; 0xd1c <disk_initialize+0x130>
     c76:	7e 01       	movw	r14, r28
     c78:	08 94       	sec
     c7a:	e1 1c       	adc	r14, r1
     c7c:	f1 1c       	adc	r15, r1
     c7e:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c80:	e0 ec       	ldi	r30, 0xC0	; 192
     c82:	f8 e0       	ldi	r31, 0x08	; 8
     c84:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     c86:	9e 01       	movw	r18, r28
     c88:	2b 5f       	subi	r18, 0xFB	; 251
     c8a:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c8c:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c8e:	80 91 c2 08 	lds	r24, 0x08C2
     c92:	87 ff       	sbrs	r24, 7
     c94:	fc cf       	rjmp	.-8      	; 0xc8e <disk_initialize+0xa2>
	return SD_SPI.DATA;
     c96:	80 91 c3 08 	lds	r24, 0x08C3

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     c9a:	d8 01       	movw	r26, r16
     c9c:	8d 93       	st	X+, r24
     c9e:	8d 01       	movw	r16, r26
     ca0:	a2 17       	cp	r26, r18
     ca2:	b3 07       	cpc	r27, r19
     ca4:	99 f7       	brne	.-26     	; 0xc8c <disk_initialize+0xa0>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	09 f0       	breq	.+2      	; 0xcae <disk_initialize+0xc2>
     cac:	5e c0       	rjmp	.+188    	; 0xd6a <disk_initialize+0x17e>
     cae:	8c 81       	ldd	r24, Y+4	; 0x04
     cb0:	8a 3a       	cpi	r24, 0xAA	; 170
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <disk_initialize+0xca>
     cb4:	5a c0       	rjmp	.+180    	; 0xd6a <disk_initialize+0x17e>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     cb6:	80 91 8c 2d 	lds	r24, 0x2D8C
     cba:	88 23       	and	r24, r24
     cbc:	49 f0       	breq	.+18     	; 0xcd0 <disk_initialize+0xe4>
     cbe:	89 ee       	ldi	r24, 0xE9	; 233
     cc0:	40 e0       	ldi	r20, 0x00	; 0
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	70 e4       	ldi	r23, 0x40	; 64
     cc8:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
     ccc:	88 23       	and	r24, r24
     cce:	99 f7       	brne	.-26     	; 0xcb6 <disk_initialize+0xca>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     cd0:	80 91 8c 2d 	lds	r24, 0x2D8C
     cd4:	88 23       	and	r24, r24
     cd6:	09 f4       	brne	.+2      	; 0xcda <disk_initialize+0xee>
     cd8:	48 c0       	rjmp	.+144    	; 0xd6a <disk_initialize+0x17e>
     cda:	8a e7       	ldi	r24, 0x7A	; 122
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
     ce8:	88 23       	and	r24, r24
     cea:	09 f0       	breq	.+2      	; 0xcee <disk_initialize+0x102>
     cec:	3e c0       	rjmp	.+124    	; 0xd6a <disk_initialize+0x17e>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     cee:	e0 ec       	ldi	r30, 0xC0	; 192
     cf0:	f8 e0       	ldi	r31, 0x08	; 8
     cf2:	9f ef       	ldi	r25, 0xFF	; 255
     cf4:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     cf6:	80 91 c2 08 	lds	r24, 0x08C2
     cfa:	87 ff       	sbrs	r24, 7
     cfc:	fc cf       	rjmp	.-8      	; 0xcf6 <disk_initialize+0x10a>
	return SD_SPI.DATA;
     cfe:	80 91 c3 08 	lds	r24, 0x08C3
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
     d02:	d7 01       	movw	r26, r14
     d04:	8d 93       	st	X+, r24
     d06:	7d 01       	movw	r14, r26
     d08:	a0 17       	cp	r26, r16
     d0a:	b1 07       	cpc	r27, r17
     d0c:	99 f7       	brne	.-26     	; 0xcf4 <disk_initialize+0x108>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	86 fd       	sbrc	r24, 6
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <disk_initialize+0x12c>
     d14:	14 e0       	ldi	r17, 0x04	; 4
     d16:	2a c0       	rjmp	.+84     	; 0xd6c <disk_initialize+0x180>
     d18:	1c e0       	ldi	r17, 0x0C	; 12
     d1a:	28 c0       	rjmp	.+80     	; 0xd6c <disk_initialize+0x180>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     d1c:	89 ee       	ldi	r24, 0xE9	; 233
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	50 e0       	ldi	r21, 0x00	; 0
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
     d2a:	82 30       	cpi	r24, 0x02	; 2
     d2c:	18 f0       	brcs	.+6      	; 0xd34 <disk_initialize+0x148>
     d2e:	11 e0       	ldi	r17, 0x01	; 1
     d30:	01 e4       	ldi	r16, 0x41	; 65
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <disk_initialize+0x14c>
     d34:	12 e0       	ldi	r17, 0x02	; 2
     d36:	09 ee       	ldi	r16, 0xE9	; 233
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     d38:	80 91 8c 2d 	lds	r24, 0x2D8C
     d3c:	88 23       	and	r24, r24
     d3e:	49 f0       	breq	.+18     	; 0xd52 <disk_initialize+0x166>
     d40:	80 2f       	mov	r24, r16
     d42:	40 e0       	ldi	r20, 0x00	; 0
     d44:	50 e0       	ldi	r21, 0x00	; 0
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
     d4e:	88 23       	and	r24, r24
     d50:	99 f7       	brne	.-26     	; 0xd38 <disk_initialize+0x14c>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     d52:	80 91 8c 2d 	lds	r24, 0x2D8C
     d56:	88 23       	and	r24, r24
     d58:	41 f0       	breq	.+16     	; 0xd6a <disk_initialize+0x17e>
     d5a:	80 e5       	ldi	r24, 0x50	; 80
     d5c:	40 e0       	ldi	r20, 0x00	; 0
     d5e:	52 e0       	ldi	r21, 0x02	; 2
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
     d68:	81 11       	cpse	r24, r1
     d6a:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
     d6c:	10 93 8e 2d 	sts	0x2D8E, r17
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     d70:	80 e1       	ldi	r24, 0x10	; 16
     d72:	e0 e4       	ldi	r30, 0x40	; 64
     d74:	f6 e0       	ldi	r31, 0x06	; 6
     d76:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     d78:	8f ef       	ldi	r24, 0xFF	; 255
     d7a:	e0 ec       	ldi	r30, 0xC0	; 192
     d7c:	f8 e0       	ldi	r31, 0x08	; 8
     d7e:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     d80:	80 91 c2 08 	lds	r24, 0x08C2
     d84:	87 ff       	sbrs	r24, 7
     d86:	fc cf       	rjmp	.-8      	; 0xd80 <disk_initialize+0x194>
	return SD_SPI.DATA;
     d88:	80 91 c3 08 	lds	r24, 0x08C3
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
     d8c:	11 23       	and	r17, r17
     d8e:	41 f0       	breq	.+16     	; 0xda0 <disk_initialize+0x1b4>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     d90:	80 91 d4 2c 	lds	r24, 0x2CD4
     d94:	8e 7f       	andi	r24, 0xFE	; 254
     d96:	80 93 d4 2c 	sts	0x2CD4, r24
		FCLK_FAST();
     d9a:	80 ed       	ldi	r24, 0xD0	; 208
     d9c:	80 93 c0 08 	sts	0x08C0, r24
	} else {			/* Initialization failed */
		power_off();
	}

	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc)); // 32MHz
	return Stat;
     da0:	80 91 d4 2c 	lds	r24, 0x2CD4
}
     da4:	24 96       	adiw	r28, 0x04	; 4
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	08 95       	ret

00000db8 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     db8:	88 23       	and	r24, r24
     dba:	11 f0       	breq	.+4      	; 0xdc0 <disk_status+0x8>
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	08 95       	ret
	return Stat;
     dc0:	80 91 d4 2c 	lds	r24, 0x2CD4
}
     dc4:	08 95       	ret

00000dc6 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     dc6:	0f 93       	push	r16
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     dce:	88 23       	and	r24, r24
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <disk_read+0xe>
     dd2:	53 c0       	rjmp	.+166    	; 0xe7a <disk_read+0xb4>
     dd4:	00 23       	and	r16, r16
     dd6:	09 f4       	brne	.+2      	; 0xdda <disk_read+0x14>
     dd8:	50 c0       	rjmp	.+160    	; 0xe7a <disk_read+0xb4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     dda:	80 91 d4 2c 	lds	r24, 0x2CD4
     dde:	80 ff       	sbrs	r24, 0
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <disk_read+0x20>
     de2:	03 e0       	ldi	r16, 0x03	; 3
     de4:	4b c0       	rjmp	.+150    	; 0xe7c <disk_read+0xb6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     de6:	80 91 8e 2d 	lds	r24, 0x2D8E
     dea:	83 fd       	sbrc	r24, 3
     dec:	07 c0       	rjmp	.+14     	; 0xdfc <disk_read+0x36>
     dee:	69 e0       	ldi	r22, 0x09	; 9
     df0:	22 0f       	add	r18, r18
     df2:	33 1f       	adc	r19, r19
     df4:	44 1f       	adc	r20, r20
     df6:	55 1f       	adc	r21, r21
     df8:	6a 95       	dec	r22
     dfa:	d1 f7       	brne	.-12     	; 0xdf0 <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
     dfc:	01 30       	cpi	r16, 0x01	; 1
     dfe:	89 f4       	brne	.+34     	; 0xe22 <disk_read+0x5c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     e00:	81 e5       	ldi	r24, 0x51	; 81
     e02:	ba 01       	movw	r22, r20
     e04:	a9 01       	movw	r20, r18
     e06:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
     e0a:	88 23       	and	r24, r24
     e0c:	21 f5       	brne	.+72     	; 0xe56 <disk_read+0x90>
     e0e:	ce 01       	movw	r24, r28
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	72 e0       	ldi	r23, 0x02	; 2
     e14:	0e 94 b9 04 	call	0x972	; 0x972 <rcvr_datablock>
     e18:	00 e0       	ldi	r16, 0x00	; 0
     e1a:	88 23       	and	r24, r24
     e1c:	e1 f4       	brne	.+56     	; 0xe56 <disk_read+0x90>
     e1e:	01 e0       	ldi	r16, 0x01	; 1
     e20:	1a c0       	rjmp	.+52     	; 0xe56 <disk_read+0x90>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     e22:	82 e5       	ldi	r24, 0x52	; 82
     e24:	ba 01       	movw	r22, r20
     e26:	a9 01       	movw	r20, r18
     e28:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
     e2c:	88 23       	and	r24, r24
     e2e:	99 f4       	brne	.+38     	; 0xe56 <disk_read+0x90>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     e30:	ce 01       	movw	r24, r28
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	72 e0       	ldi	r23, 0x02	; 2
     e36:	0e 94 b9 04 	call	0x972	; 0x972 <rcvr_datablock>
     e3a:	88 23       	and	r24, r24
     e3c:	29 f0       	breq	.+10     	; 0xe48 <disk_read+0x82>
				buff += 512;
			} while (--count);
     e3e:	01 50       	subi	r16, 0x01	; 1
     e40:	19 f0       	breq	.+6      	; 0xe48 <disk_read+0x82>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
     e42:	c0 50       	subi	r28, 0x00	; 0
     e44:	de 4f       	sbci	r29, 0xFE	; 254
     e46:	f4 cf       	rjmp	.-24     	; 0xe30 <disk_read+0x6a>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     e48:	8c e4       	ldi	r24, 0x4C	; 76
     e4a:	40 e0       	ldi	r20, 0x00	; 0
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     e56:	80 e1       	ldi	r24, 0x10	; 16
     e58:	e0 e4       	ldi	r30, 0x40	; 64
     e5a:	f6 e0       	ldi	r31, 0x06	; 6
     e5c:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     e5e:	8f ef       	ldi	r24, 0xFF	; 255
     e60:	e0 ec       	ldi	r30, 0xC0	; 192
     e62:	f8 e0       	ldi	r31, 0x08	; 8
     e64:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     e66:	80 91 c2 08 	lds	r24, 0x08C2
     e6a:	87 ff       	sbrs	r24, 7
     e6c:	fc cf       	rjmp	.-8      	; 0xe66 <disk_read+0xa0>
	return SD_SPI.DATA;
     e6e:	80 91 c3 08 	lds	r24, 0x08C3
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     e72:	00 23       	and	r16, r16
     e74:	19 f0       	breq	.+6      	; 0xe7c <disk_read+0xb6>
     e76:	01 e0       	ldi	r16, 0x01	; 1
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <disk_read+0xb6>
     e7a:	04 e0       	ldi	r16, 0x04	; 4
}
     e7c:	80 2f       	mov	r24, r16
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	0f 91       	pop	r16
     e84:	08 95       	ret

00000e86 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     e86:	cf 92       	push	r12
     e88:	df 92       	push	r13
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	0f 93       	push	r16
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	eb 01       	movw	r28, r22
     e96:	69 01       	movw	r12, r18
     e98:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     e9a:	88 23       	and	r24, r24
     e9c:	09 f0       	breq	.+2      	; 0xea0 <disk_write+0x1a>
     e9e:	61 c0       	rjmp	.+194    	; 0xf62 <disk_write+0xdc>
     ea0:	00 23       	and	r16, r16
     ea2:	09 f4       	brne	.+2      	; 0xea6 <disk_write+0x20>
     ea4:	5e c0       	rjmp	.+188    	; 0xf62 <disk_write+0xdc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     ea6:	80 91 d4 2c 	lds	r24, 0x2CD4
     eaa:	80 ff       	sbrs	r24, 0
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <disk_write+0x2c>
     eae:	03 e0       	ldi	r16, 0x03	; 3
     eb0:	59 c0       	rjmp	.+178    	; 0xf64 <disk_write+0xde>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     eb2:	80 91 d4 2c 	lds	r24, 0x2CD4
     eb6:	82 ff       	sbrs	r24, 2
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <disk_write+0x38>
     eba:	02 e0       	ldi	r16, 0x02	; 2
     ebc:	53 c0       	rjmp	.+166    	; 0xf64 <disk_write+0xde>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     ebe:	80 91 8e 2d 	lds	r24, 0x2D8E
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	83 fd       	sbrc	r24, 3
     ec6:	07 c0       	rjmp	.+14     	; 0xed6 <disk_write+0x50>
     ec8:	79 e0       	ldi	r23, 0x09	; 9
     eca:	cc 0c       	add	r12, r12
     ecc:	dd 1c       	adc	r13, r13
     ece:	ee 1c       	adc	r14, r14
     ed0:	ff 1c       	adc	r15, r15
     ed2:	7a 95       	dec	r23
     ed4:	d1 f7       	brne	.-12     	; 0xeca <disk_write+0x44>

	if (count == 1) {	/* Single block write */
     ed6:	01 30       	cpi	r16, 0x01	; 1
     ed8:	69 f4       	brne	.+26     	; 0xef4 <disk_write+0x6e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     eda:	88 e5       	ldi	r24, 0x58	; 88
     edc:	b7 01       	movw	r22, r14
     ede:	a6 01       	movw	r20, r12
     ee0:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
     ee4:	88 23       	and	r24, r24
     ee6:	59 f5       	brne	.+86     	; 0xf3e <disk_write+0xb8>
     ee8:	ce 01       	movw	r24, r28
     eea:	6e ef       	ldi	r22, 0xFE	; 254
     eec:	0e 94 1b 05 	call	0xa36	; 0xa36 <xmit_datablock>
     ef0:	00 e0       	ldi	r16, 0x00	; 0
     ef2:	22 c0       	rjmp	.+68     	; 0xf38 <disk_write+0xb2>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     ef4:	86 70       	andi	r24, 0x06	; 6
     ef6:	90 70       	andi	r25, 0x00	; 0
     ef8:	89 2b       	or	r24, r25
     efa:	39 f0       	breq	.+14     	; 0xf0a <disk_write+0x84>
     efc:	40 2f       	mov	r20, r16
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	87 ed       	ldi	r24, 0xD7	; 215
     f06:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     f0a:	89 e5       	ldi	r24, 0x59	; 89
     f0c:	b7 01       	movw	r22, r14
     f0e:	a6 01       	movw	r20, r12
     f10:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
     f14:	88 23       	and	r24, r24
     f16:	99 f4       	brne	.+38     	; 0xf3e <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     f18:	ce 01       	movw	r24, r28
     f1a:	6c ef       	ldi	r22, 0xFC	; 252
     f1c:	0e 94 1b 05 	call	0xa36	; 0xa36 <xmit_datablock>
     f20:	88 23       	and	r24, r24
     f22:	29 f0       	breq	.+10     	; 0xf2e <disk_write+0xa8>
				buff += 512;
			} while (--count);
     f24:	01 50       	subi	r16, 0x01	; 1
     f26:	19 f0       	breq	.+6      	; 0xf2e <disk_write+0xa8>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
     f28:	c0 50       	subi	r28, 0x00	; 0
     f2a:	de 4f       	sbci	r29, 0xFE	; 254
     f2c:	f5 cf       	rjmp	.-22     	; 0xf18 <disk_write+0x92>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	6d ef       	ldi	r22, 0xFD	; 253
     f34:	0e 94 1b 05 	call	0xa36	; 0xa36 <xmit_datablock>
     f38:	88 23       	and	r24, r24
     f3a:	09 f4       	brne	.+2      	; 0xf3e <disk_write+0xb8>
     f3c:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     f3e:	80 e1       	ldi	r24, 0x10	; 16
     f40:	e0 e4       	ldi	r30, 0x40	; 64
     f42:	f6 e0       	ldi	r31, 0x06	; 6
     f44:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     f46:	8f ef       	ldi	r24, 0xFF	; 255
     f48:	e0 ec       	ldi	r30, 0xC0	; 192
     f4a:	f8 e0       	ldi	r31, 0x08	; 8
     f4c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     f4e:	80 91 c2 08 	lds	r24, 0x08C2
     f52:	87 ff       	sbrs	r24, 7
     f54:	fc cf       	rjmp	.-8      	; 0xf4e <disk_write+0xc8>
	return SD_SPI.DATA;
     f56:	80 91 c3 08 	lds	r24, 0x08C3
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     f5a:	00 23       	and	r16, r16
     f5c:	19 f0       	breq	.+6      	; 0xf64 <disk_write+0xde>
     f5e:	01 e0       	ldi	r16, 0x01	; 1
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <disk_write+0xde>
     f62:	04 e0       	ldi	r16, 0x04	; 4
}
     f64:	80 2f       	mov	r24, r16
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	0f 91       	pop	r16
     f6c:	ff 90       	pop	r15
     f6e:	ef 90       	pop	r14
     f70:	df 90       	pop	r13
     f72:	cf 90       	pop	r12
     f74:	08 95       	ret

00000f76 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	60 97       	sbiw	r28, 0x10	; 16
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
     f8c:	88 23       	and	r24, r24
     f8e:	09 f0       	breq	.+2      	; 0xf92 <disk_ioctl+0x1c>
     f90:	b8 c1       	rjmp	.+880    	; 0x1302 <disk_ioctl+0x38c>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     f92:	64 30       	cpi	r22, 0x04	; 4
     f94:	01 f5       	brne	.+64     	; 0xfd6 <disk_ioctl+0x60>
		switch (*ptr) {
     f96:	fa 01       	movw	r30, r20
     f98:	80 81       	ld	r24, Z
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	39 f0       	breq	.+14     	; 0xfac <disk_ioctl+0x36>
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	08 f4       	brcc	.+2      	; 0xfa4 <disk_ioctl+0x2e>
     fa2:	b1 c1       	rjmp	.+866    	; 0x1306 <disk_ioctl+0x390>
     fa4:	82 30       	cpi	r24, 0x02	; 2
     fa6:	09 f0       	breq	.+2      	; 0xfaa <disk_ioctl+0x34>
     fa8:	ac c1       	rjmp	.+856    	; 0x1302 <disk_ioctl+0x38c>
     faa:	11 c0       	rjmp	.+34     	; 0xfce <disk_ioctl+0x58>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     fac:	e0 e4       	ldi	r30, 0x40	; 64
     fae:	f6 e0       	ldi	r31, 0x06	; 6
     fb0:	80 eb       	ldi	r24, 0xB0	; 176
     fb2:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     fb4:	88 e3       	ldi	r24, 0x38	; 56
     fb6:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     fb8:	14 82       	std	Z+4, r1	; 0x04
     fba:	8c e2       	ldi	r24, 0x2C	; 44
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	20 e7       	ldi	r18, 0x70	; 112
     fc0:	31 e0       	ldi	r19, 0x01	; 1
     fc2:	f9 01       	movw	r30, r18
     fc4:	31 97       	sbiw	r30, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <disk_ioctl+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fca:	d9 f7       	brne	.-10     	; 0xfc2 <disk_ioctl+0x4c>
     fcc:	9c c1       	rjmp	.+824    	; 0x1306 <disk_ioctl+0x390>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	fa 01       	movw	r30, r20
     fd2:	81 83       	std	Z+1, r24	; 0x01
     fd4:	98 c1       	rjmp	.+816    	; 0x1306 <disk_ioctl+0x390>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     fd6:	80 91 d4 2c 	lds	r24, 0x2CD4
     fda:	80 ff       	sbrs	r24, 0
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <disk_ioctl+0x6c>
     fde:	93 e0       	ldi	r25, 0x03	; 3
     fe0:	93 c1       	rjmp	.+806    	; 0x1308 <disk_ioctl+0x392>

		switch (ctrl) {
     fe2:	6a 30       	cpi	r22, 0x0A	; 10
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <disk_ioctl+0x72>
     fe6:	2f c1       	rjmp	.+606    	; 0x1246 <disk_ioctl+0x2d0>
     fe8:	6b 30       	cpi	r22, 0x0B	; 11
     fea:	50 f4       	brcc	.+20     	; 0x1000 <disk_ioctl+0x8a>
     fec:	61 30       	cpi	r22, 0x01	; 1
     fee:	51 f1       	breq	.+84     	; 0x1044 <disk_ioctl+0xce>
     ff0:	61 30       	cpi	r22, 0x01	; 1
     ff2:	a0 f0       	brcs	.+40     	; 0x101c <disk_ioctl+0xa6>
     ff4:	62 30       	cpi	r22, 0x02	; 2
     ff6:	09 f4       	brne	.+2      	; 0xffa <disk_ioctl+0x84>
     ff8:	86 c0       	rjmp	.+268    	; 0x1106 <disk_ioctl+0x190>
     ffa:	63 30       	cpi	r22, 0x03	; 3
     ffc:	69 f4       	brne	.+26     	; 0x1018 <disk_ioctl+0xa2>
     ffe:	89 c0       	rjmp	.+274    	; 0x1112 <disk_ioctl+0x19c>
    1000:	6c 30       	cpi	r22, 0x0C	; 12
    1002:	09 f4       	brne	.+2      	; 0x1006 <disk_ioctl+0x90>
    1004:	27 c1       	rjmp	.+590    	; 0x1254 <disk_ioctl+0x2de>
    1006:	6c 30       	cpi	r22, 0x0C	; 12
    1008:	08 f4       	brcc	.+2      	; 0x100c <disk_ioctl+0x96>
    100a:	22 c1       	rjmp	.+580    	; 0x1250 <disk_ioctl+0x2da>
    100c:	6d 30       	cpi	r22, 0x0D	; 13
    100e:	09 f4       	brne	.+2      	; 0x1012 <disk_ioctl+0x9c>
    1010:	2e c1       	rjmp	.+604    	; 0x126e <disk_ioctl+0x2f8>
    1012:	6e 30       	cpi	r22, 0x0E	; 14
    1014:	09 f4       	brne	.+2      	; 0x1018 <disk_ioctl+0xa2>
    1016:	4a c1       	rjmp	.+660    	; 0x12ac <disk_ioctl+0x336>
    1018:	94 e0       	ldi	r25, 0x04	; 4
    101a:	64 c1       	rjmp	.+712    	; 0x12e4 <disk_ioctl+0x36e>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
    101c:	0e 94 9c 04 	call	0x938	; 0x938 <select>
    1020:	88 23       	and	r24, r24
    1022:	09 f4       	brne	.+2      	; 0x1026 <disk_ioctl+0xb0>
    1024:	5e c1       	rjmp	.+700    	; 0x12e2 <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    1026:	80 e1       	ldi	r24, 0x10	; 16
    1028:	e0 e4       	ldi	r30, 0x40	; 64
    102a:	f6 e0       	ldi	r31, 0x06	; 6
    102c:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    102e:	8f ef       	ldi	r24, 0xFF	; 255
    1030:	e0 ec       	ldi	r30, 0xC0	; 192
    1032:	f8 e0       	ldi	r31, 0x08	; 8
    1034:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1036:	80 91 c2 08 	lds	r24, 0x08C2
    103a:	87 ff       	sbrs	r24, 7
    103c:	fc cf       	rjmp	.-8      	; 0x1036 <disk_ioctl+0xc0>
	return SD_SPI.DATA;
    103e:	80 91 c3 08 	lds	r24, 0x08C3
    1042:	ff c0       	rjmp	.+510    	; 0x1242 <disk_ioctl+0x2cc>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    1044:	89 e4       	ldi	r24, 0x49	; 73
    1046:	40 e0       	ldi	r20, 0x00	; 0
    1048:	50 e0       	ldi	r21, 0x00	; 0
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
    1052:	88 23       	and	r24, r24
    1054:	09 f0       	breq	.+2      	; 0x1058 <disk_ioctl+0xe2>
    1056:	45 c1       	rjmp	.+650    	; 0x12e2 <disk_ioctl+0x36c>
    1058:	ce 01       	movw	r24, r28
    105a:	01 96       	adiw	r24, 0x01	; 1
    105c:	60 e1       	ldi	r22, 0x10	; 16
    105e:	70 e0       	ldi	r23, 0x00	; 0
    1060:	0e 94 b9 04 	call	0x972	; 0x972 <rcvr_datablock>
    1064:	88 23       	and	r24, r24
    1066:	09 f4       	brne	.+2      	; 0x106a <disk_ioctl+0xf4>
    1068:	3c c1       	rjmp	.+632    	; 0x12e2 <disk_ioctl+0x36c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	82 95       	swap	r24
    106e:	86 95       	lsr	r24
    1070:	86 95       	lsr	r24
    1072:	83 70       	andi	r24, 0x03	; 3
    1074:	7a 85       	ldd	r23, Y+10	; 0x0a
    1076:	49 85       	ldd	r20, Y+9	; 0x09
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	89 f4       	brne	.+34     	; 0x109e <disk_ioctl+0x128>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    107c:	87 2f       	mov	r24, r23
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	34 2f       	mov	r19, r20
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	82 0f       	add	r24, r18
    1088:	93 1f       	adc	r25, r19
    108a:	a0 e0       	ldi	r26, 0x00	; 0
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	2a e0       	ldi	r18, 0x0A	; 10
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	aa 1f       	adc	r26, r26
    1096:	bb 1f       	adc	r27, r27
    1098:	2a 95       	dec	r18
    109a:	d1 f7       	brne	.-12     	; 0x1090 <disk_ioctl+0x11a>
    109c:	cd c0       	rjmp	.+410    	; 0x1238 <disk_ioctl+0x2c2>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    109e:	42 95       	swap	r20
    10a0:	46 95       	lsr	r20
    10a2:	46 95       	lsr	r20
    10a4:	43 70       	andi	r20, 0x03	; 3
    10a6:	28 85       	ldd	r18, Y+8	; 0x08
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	22 0f       	add	r18, r18
    10ac:	33 1f       	adc	r19, r19
    10ae:	22 0f       	add	r18, r18
    10b0:	33 1f       	adc	r19, r19
    10b2:	24 0f       	add	r18, r20
    10b4:	31 1d       	adc	r19, r1
    10b6:	2f 5f       	subi	r18, 0xFF	; 255
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	8f 81       	ldd	r24, Y+7	; 0x07
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	83 70       	andi	r24, 0x03	; 3
    10c0:	90 70       	andi	r25, 0x00	; 0
    10c2:	98 2f       	mov	r25, r24
    10c4:	88 27       	eor	r24, r24
    10c6:	99 0f       	add	r25, r25
    10c8:	99 0f       	add	r25, r25
    10ca:	28 0f       	add	r18, r24
    10cc:	39 1f       	adc	r19, r25
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	8e 81       	ldd	r24, Y+6	; 0x06
    10d4:	8f 70       	andi	r24, 0x0F	; 15
    10d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d8:	66 1f       	adc	r22, r22
    10da:	66 27       	eor	r22, r22
    10dc:	66 1f       	adc	r22, r22
    10de:	86 0f       	add	r24, r22
    10e0:	8e 5f       	subi	r24, 0xFE	; 254
    10e2:	73 70       	andi	r23, 0x03	; 3
    10e4:	77 0f       	add	r23, r23
    10e6:	87 0f       	add	r24, r23
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	09 97       	sbiw	r24, 0x09	; 9
    10ec:	04 c0       	rjmp	.+8      	; 0x10f6 <disk_ioctl+0x180>
    10ee:	22 0f       	add	r18, r18
    10f0:	33 1f       	adc	r19, r19
    10f2:	44 1f       	adc	r20, r20
    10f4:	55 1f       	adc	r21, r21
    10f6:	8a 95       	dec	r24
    10f8:	d2 f7       	brpl	.-12     	; 0x10ee <disk_ioctl+0x178>
    10fa:	f8 01       	movw	r30, r16
    10fc:	20 83       	st	Z, r18
    10fe:	31 83       	std	Z+1, r19	; 0x01
    1100:	42 83       	std	Z+2, r20	; 0x02
    1102:	53 83       	std	Z+3, r21	; 0x03
    1104:	9e c0       	rjmp	.+316    	; 0x1242 <disk_ioctl+0x2cc>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	92 e0       	ldi	r25, 0x02	; 2
    110a:	fa 01       	movw	r30, r20
    110c:	80 83       	st	Z, r24
    110e:	91 83       	std	Z+1, r25	; 0x01
    1110:	98 c0       	rjmp	.+304    	; 0x1242 <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
    1112:	80 91 8e 2d 	lds	r24, 0x2D8E
    1116:	f8 2e       	mov	r15, r24
    1118:	82 ff       	sbrs	r24, 2
    111a:	39 c0       	rjmp	.+114    	; 0x118e <disk_ioctl+0x218>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    111c:	8d ec       	ldi	r24, 0xCD	; 205
    111e:	40 e0       	ldi	r20, 0x00	; 0
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
    112a:	88 23       	and	r24, r24
    112c:	09 f0       	breq	.+2      	; 0x1130 <disk_ioctl+0x1ba>
    112e:	d9 c0       	rjmp	.+434    	; 0x12e2 <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	e0 ec       	ldi	r30, 0xC0	; 192
    1134:	f8 e0       	ldi	r31, 0x08	; 8
    1136:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1138:	80 91 c2 08 	lds	r24, 0x08C2
    113c:	87 ff       	sbrs	r24, 7
    113e:	fc cf       	rjmp	.-8      	; 0x1138 <disk_ioctl+0x1c2>
	return SD_SPI.DATA;
    1140:	80 91 c3 08 	lds	r24, 0x08C3

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    1144:	ce 01       	movw	r24, r28
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	60 e1       	ldi	r22, 0x10	; 16
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	0e 94 b9 04 	call	0x972	; 0x972 <rcvr_datablock>
    1150:	88 23       	and	r24, r24
    1152:	09 f4       	brne	.+2      	; 0x1156 <disk_ioctl+0x1e0>
    1154:	c6 c0       	rjmp	.+396    	; 0x12e2 <disk_ioctl+0x36c>
    1156:	90 e3       	ldi	r25, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1158:	e0 ec       	ldi	r30, 0xC0	; 192
    115a:	f8 e0       	ldi	r31, 0x08	; 8
    115c:	2f ef       	ldi	r18, 0xFF	; 255
    115e:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1160:	80 91 c2 08 	lds	r24, 0x08C2
    1164:	87 ff       	sbrs	r24, 7
    1166:	fc cf       	rjmp	.-8      	; 0x1160 <disk_ioctl+0x1ea>
	return SD_SPI.DATA;
    1168:	80 91 c3 08 	lds	r24, 0x08C3
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    116c:	91 50       	subi	r25, 0x01	; 1
    116e:	b9 f7       	brne	.-18     	; 0x115e <disk_ioctl+0x1e8>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    1170:	2b 85       	ldd	r18, Y+11	; 0x0b
    1172:	22 95       	swap	r18
    1174:	2f 70       	andi	r18, 0x0F	; 15
    1176:	80 e1       	ldi	r24, 0x10	; 16
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a0 e0       	ldi	r26, 0x00	; 0
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <disk_ioctl+0x212>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	aa 1f       	adc	r26, r26
    1186:	bb 1f       	adc	r27, r27
    1188:	2a 95       	dec	r18
    118a:	d2 f7       	brpl	.-12     	; 0x1180 <disk_ioctl+0x20a>
    118c:	55 c0       	rjmp	.+170    	; 0x1238 <disk_ioctl+0x2c2>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    118e:	89 e4       	ldi	r24, 0x49	; 73
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
    119c:	88 23       	and	r24, r24
    119e:	09 f0       	breq	.+2      	; 0x11a2 <disk_ioctl+0x22c>
    11a0:	a0 c0       	rjmp	.+320    	; 0x12e2 <disk_ioctl+0x36c>
    11a2:	ce 01       	movw	r24, r28
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	60 e1       	ldi	r22, 0x10	; 16
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	0e 94 b9 04 	call	0x972	; 0x972 <rcvr_datablock>
    11ae:	88 23       	and	r24, r24
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <disk_ioctl+0x23e>
    11b2:	97 c0       	rjmp	.+302    	; 0x12e2 <disk_ioctl+0x36c>
    11b4:	4b 85       	ldd	r20, Y+11	; 0x0b
    11b6:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
    11b8:	f1 fe       	sbrs	r15, 1
    11ba:	1b c0       	rjmp	.+54     	; 0x11f2 <disk_ioctl+0x27c>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    11bc:	88 1f       	adc	r24, r24
    11be:	88 27       	eor	r24, r24
    11c0:	88 1f       	adc	r24, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	24 2f       	mov	r18, r20
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	2f 73       	andi	r18, 0x3F	; 63
    11cc:	30 70       	andi	r19, 0x00	; 0
    11ce:	22 0f       	add	r18, r18
    11d0:	33 1f       	adc	r19, r19
    11d2:	82 0f       	add	r24, r18
    11d4:	93 1f       	adc	r25, r19
    11d6:	2e 85       	ldd	r18, Y+14	; 0x0e
    11d8:	22 95       	swap	r18
    11da:	26 95       	lsr	r18
    11dc:	26 95       	lsr	r18
    11de:	23 70       	andi	r18, 0x03	; 3
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	21 50       	subi	r18, 0x01	; 1
    11e4:	30 40       	sbci	r19, 0x00	; 0
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <disk_ioctl+0x276>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	2a 95       	dec	r18
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <disk_ioctl+0x272>
    11f0:	21 c0       	rjmp	.+66     	; 0x1234 <disk_ioctl+0x2be>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	23 70       	andi	r18, 0x03	; 3
    11f8:	30 70       	andi	r19, 0x00	; 0
    11fa:	f3 e0       	ldi	r31, 0x03	; 3
    11fc:	22 0f       	add	r18, r18
    11fe:	33 1f       	adc	r19, r19
    1200:	fa 95       	dec	r31
    1202:	e1 f7       	brne	.-8      	; 0x11fc <disk_ioctl+0x286>
    1204:	82 95       	swap	r24
    1206:	86 95       	lsr	r24
    1208:	87 70       	andi	r24, 0x07	; 7
    120a:	28 0f       	add	r18, r24
    120c:	31 1d       	adc	r19, r1
    120e:	2f 5f       	subi	r18, 0xFF	; 255
    1210:	3f 4f       	sbci	r19, 0xFF	; 255
    1212:	84 2f       	mov	r24, r20
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	8c 77       	andi	r24, 0x7C	; 124
    1218:	90 70       	andi	r25, 0x00	; 0
    121a:	95 95       	asr	r25
    121c:	87 95       	ror	r24
    121e:	95 95       	asr	r25
    1220:	87 95       	ror	r24
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	ac 01       	movw	r20, r24
    1226:	24 9f       	mul	r18, r20
    1228:	c0 01       	movw	r24, r0
    122a:	25 9f       	mul	r18, r21
    122c:	90 0d       	add	r25, r0
    122e:	34 9f       	mul	r19, r20
    1230:	90 0d       	add	r25, r0
    1232:	11 24       	eor	r1, r1
    1234:	a0 e0       	ldi	r26, 0x00	; 0
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	f8 01       	movw	r30, r16
    123a:	80 83       	st	Z, r24
    123c:	91 83       	std	Z+1, r25	; 0x01
    123e:	a2 83       	std	Z+2, r26	; 0x02
    1240:	b3 83       	std	Z+3, r27	; 0x03
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	4f c0       	rjmp	.+158    	; 0x12e4 <disk_ioctl+0x36e>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    1246:	80 91 8e 2d 	lds	r24, 0x2D8E
    124a:	fa 01       	movw	r30, r20
    124c:	80 83       	st	Z, r24
    124e:	f9 cf       	rjmp	.-14     	; 0x1242 <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    1250:	89 e4       	ldi	r24, 0x49	; 73
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <disk_ioctl+0x2e0>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    1254:	8a e4       	ldi	r24, 0x4A	; 74
    1256:	40 e0       	ldi	r20, 0x00	; 0
    1258:	50 e0       	ldi	r21, 0x00	; 0
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
    1262:	88 23       	and	r24, r24
    1264:	f1 f5       	brne	.+124    	; 0x12e2 <disk_ioctl+0x36c>
    1266:	c8 01       	movw	r24, r16
    1268:	60 e1       	ldi	r22, 0x10	; 16
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	35 c0       	rjmp	.+106    	; 0x12d8 <disk_ioctl+0x362>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    126e:	8a e7       	ldi	r24, 0x7A	; 122
    1270:	40 e0       	ldi	r20, 0x00	; 0
    1272:	50 e0       	ldi	r21, 0x00	; 0
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
    127c:	88 23       	and	r24, r24
    127e:	89 f5       	brne	.+98     	; 0x12e2 <disk_ioctl+0x36c>
    1280:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1282:	a0 ec       	ldi	r26, 0xC0	; 192
    1284:	b8 e0       	ldi	r27, 0x08	; 8
    1286:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    1288:	98 01       	movw	r18, r16
    128a:	2d 5f       	subi	r18, 0xFD	; 253
    128c:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    128e:	13 96       	adiw	r26, 0x03	; 3
    1290:	9c 93       	st	X, r25
    1292:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    1294:	80 91 c2 08 	lds	r24, 0x08C2
    1298:	87 ff       	sbrs	r24, 7
    129a:	fc cf       	rjmp	.-8      	; 0x1294 <disk_ioctl+0x31e>
	return SD_SPI.DATA;
    129c:	80 91 c3 08 	lds	r24, 0x08C3
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    12a0:	80 83       	st	Z, r24
    12a2:	e2 17       	cp	r30, r18
    12a4:	f3 07       	cpc	r31, r19
    12a6:	69 f2       	breq	.-102    	; 0x1242 <disk_ioctl+0x2cc>
    12a8:	31 96       	adiw	r30, 0x01	; 1
    12aa:	f1 cf       	rjmp	.-30     	; 0x128e <disk_ioctl+0x318>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    12ac:	8d ec       	ldi	r24, 0xCD	; 205
    12ae:	40 e0       	ldi	r20, 0x00	; 0
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	0e 94 6a 05 	call	0xad4	; 0xad4 <send_cmd>
    12ba:	88 23       	and	r24, r24
    12bc:	91 f4       	brne	.+36     	; 0x12e2 <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    12be:	8f ef       	ldi	r24, 0xFF	; 255
    12c0:	e0 ec       	ldi	r30, 0xC0	; 192
    12c2:	f8 e0       	ldi	r31, 0x08	; 8
    12c4:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    12c6:	80 91 c2 08 	lds	r24, 0x08C2
    12ca:	87 ff       	sbrs	r24, 7
    12cc:	fc cf       	rjmp	.-8      	; 0x12c6 <disk_ioctl+0x350>
	return SD_SPI.DATA;
    12ce:	80 91 c3 08 	lds	r24, 0x08C3
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
    12d2:	c8 01       	movw	r24, r16
    12d4:	60 e4       	ldi	r22, 0x40	; 64
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	0e 94 b9 04 	call	0x972	; 0x972 <rcvr_datablock>
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	88 23       	and	r24, r24
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <disk_ioctl+0x36e>
    12e2:	91 e0       	ldi	r25, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    12e4:	80 e1       	ldi	r24, 0x10	; 16
    12e6:	e0 e4       	ldi	r30, 0x40	; 64
    12e8:	f6 e0       	ldi	r31, 0x06	; 6
    12ea:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    12ec:	8f ef       	ldi	r24, 0xFF	; 255
    12ee:	e0 ec       	ldi	r30, 0xC0	; 192
    12f0:	f8 e0       	ldi	r31, 0x08	; 8
    12f2:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    12f4:	80 91 c2 08 	lds	r24, 0x08C2
    12f8:	87 ff       	sbrs	r24, 7
    12fa:	fc cf       	rjmp	.-8      	; 0x12f4 <disk_ioctl+0x37e>
	return SD_SPI.DATA;
    12fc:	80 91 c3 08 	lds	r24, 0x08C3
    1300:	03 c0       	rjmp	.+6      	; 0x1308 <disk_ioctl+0x392>
    1302:	94 e0       	ldi	r25, 0x04	; 4
    1304:	01 c0       	rjmp	.+2      	; 0x1308 <disk_ioctl+0x392>
    1306:	90 e0       	ldi	r25, 0x00	; 0

		deselect();
	}

	return res;
}
    1308:	89 2f       	mov	r24, r25
    130a:	60 96       	adiw	r28, 0x10	; 16
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	1f 91       	pop	r17
    1316:	0f 91       	pop	r16
    1318:	ff 90       	pop	r15
    131a:	08 95       	ret

0000131c <disk_timerproc>:

void disk_timerproc (void)
{
    BYTE n, s;

    n = Timer1;    /* 100Hz decrement timer */
    131c:	80 91 8c 2d 	lds	r24, 0x2D8C
    if (n) Timer1 = --n;
    1320:	88 23       	and	r24, r24
    1322:	19 f0       	breq	.+6      	; 0x132a <disk_timerproc+0xe>
    1324:	81 50       	subi	r24, 0x01	; 1
    1326:	80 93 8c 2d 	sts	0x2D8C, r24
    n = Timer2;
    132a:	80 91 8d 2d 	lds	r24, 0x2D8D
    if (n) Timer2 = --n;
    132e:	88 23       	and	r24, r24
    1330:	19 f0       	breq	.+6      	; 0x1338 <disk_timerproc+0x1c>
    1332:	81 50       	subi	r24, 0x01	; 1
    1334:	80 93 8d 2d 	sts	0x2D8D, r24

	s = Stat;
    1338:	80 91 d4 2c 	lds	r24, 0x2CD4

    s &= ~STA_NODISK;
    s &= ~STA_PROTECT;
    133c:	89 7f       	andi	r24, 0xF9	; 249

    Stat = s;
    133e:	80 93 d4 2c 	sts	0x2CD4, r24
}
    1342:	08 95       	ret

00001344 <get_fattime>:


DWORD get_fattime (void)
{
	return 0;
}
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	08 95       	ret

0000134e <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    134e:	6f 92       	push	r6
    1350:	7f 92       	push	r7
    1352:	8f 92       	push	r8
    1354:	9f 92       	push	r9
    1356:	af 92       	push	r10
    1358:	bf 92       	push	r11
    135a:	cf 92       	push	r12
    135c:	df 92       	push	r13
    135e:	ef 92       	push	r14
    1360:	ff 92       	push	r15
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	ec 01       	movw	r28, r24
    136c:	4a 01       	movw	r8, r20
    136e:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    1370:	ca a4       	ldd	r12, Y+42	; 0x2a
    1372:	db a4       	ldd	r13, Y+43	; 0x2b
    1374:	ec a4       	ldd	r14, Y+44	; 0x2c
    1376:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    1378:	c4 16       	cp	r12, r20
    137a:	d5 06       	cpc	r13, r21
    137c:	e6 06       	cpc	r14, r22
    137e:	f7 06       	cpc	r15, r23
    1380:	09 f4       	brne	.+2      	; 0x1384 <move_window+0x36>
    1382:	4e c0       	rjmp	.+156    	; 0x1420 <move_window+0xd2>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	88 23       	and	r24, r24
    1388:	a1 f1       	breq	.+104    	; 0x13f2 <move_window+0xa4>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
    138a:	3e e2       	ldi	r19, 0x2E	; 46
    138c:	63 2e       	mov	r6, r19
    138e:	71 2c       	mov	r7, r1
    1390:	6c 0e       	add	r6, r28
    1392:	7d 1e       	adc	r7, r29
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	b3 01       	movw	r22, r6
    1398:	a7 01       	movw	r20, r14
    139a:	96 01       	movw	r18, r12
    139c:	01 e0       	ldi	r16, 0x01	; 1
    139e:	0e 94 43 07 	call	0xe86	; 0xe86 <disk_write>
    13a2:	88 23       	and	r24, r24
    13a4:	d9 f5       	brne	.+118    	; 0x141c <move_window+0xce>
				return FR_DISK_ERR;
			fs->wflag = 0;
    13a6:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    13a8:	8e 89       	ldd	r24, Y+22	; 0x16
    13aa:	9f 89       	ldd	r25, Y+23	; 0x17
    13ac:	a8 8d       	ldd	r26, Y+24	; 0x18
    13ae:	b9 8d       	ldd	r27, Y+25	; 0x19
    13b0:	2e 8d       	ldd	r18, Y+30	; 0x1e
    13b2:	3f 8d       	ldd	r19, Y+31	; 0x1f
    13b4:	48 a1       	ldd	r20, Y+32	; 0x20
    13b6:	59 a1       	ldd	r21, Y+33	; 0x21
    13b8:	82 0f       	add	r24, r18
    13ba:	93 1f       	adc	r25, r19
    13bc:	a4 1f       	adc	r26, r20
    13be:	b5 1f       	adc	r27, r21
    13c0:	c8 16       	cp	r12, r24
    13c2:	d9 06       	cpc	r13, r25
    13c4:	ea 06       	cpc	r14, r26
    13c6:	fb 06       	cpc	r15, r27
    13c8:	a0 f4       	brcc	.+40     	; 0x13f2 <move_window+0xa4>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    13ca:	1b 81       	ldd	r17, Y+3	; 0x03
    13cc:	10 c0       	rjmp	.+32     	; 0x13ee <move_window+0xa0>
					wsect += fs->sects_fat;
    13ce:	8e 89       	ldd	r24, Y+22	; 0x16
    13d0:	9f 89       	ldd	r25, Y+23	; 0x17
    13d2:	a8 8d       	ldd	r26, Y+24	; 0x18
    13d4:	b9 8d       	ldd	r27, Y+25	; 0x19
    13d6:	c8 0e       	add	r12, r24
    13d8:	d9 1e       	adc	r13, r25
    13da:	ea 1e       	adc	r14, r26
    13dc:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	b3 01       	movw	r22, r6
    13e2:	a7 01       	movw	r20, r14
    13e4:	96 01       	movw	r18, r12
    13e6:	01 e0       	ldi	r16, 0x01	; 1
    13e8:	0e 94 43 07 	call	0xe86	; 0xe86 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    13ec:	11 50       	subi	r17, 0x01	; 1
    13ee:	12 30       	cpi	r17, 0x02	; 2
    13f0:	70 f7       	brcc	.-36     	; 0x13ce <move_window+0x80>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    13f2:	81 14       	cp	r8, r1
    13f4:	91 04       	cpc	r9, r1
    13f6:	a1 04       	cpc	r10, r1
    13f8:	b1 04       	cpc	r11, r1
    13fa:	91 f0       	breq	.+36     	; 0x1420 <move_window+0xd2>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    13fc:	be 01       	movw	r22, r28
    13fe:	62 5d       	subi	r22, 0xD2	; 210
    1400:	7f 4f       	sbci	r23, 0xFF	; 255
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	a5 01       	movw	r20, r10
    1406:	94 01       	movw	r18, r8
    1408:	01 e0       	ldi	r16, 0x01	; 1
    140a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <disk_read>
    140e:	88 23       	and	r24, r24
    1410:	29 f4       	brne	.+10     	; 0x141c <move_window+0xce>
				return FR_DISK_ERR;
			fs->winsect = sector;
    1412:	8a a6       	std	Y+42, r8	; 0x2a
    1414:	9b a6       	std	Y+43, r9	; 0x2b
    1416:	ac a6       	std	Y+44, r10	; 0x2c
    1418:	bd a6       	std	Y+45, r11	; 0x2d
    141a:	03 c0       	rjmp	.+6      	; 0x1422 <move_window+0xd4>
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	01 c0       	rjmp	.+2      	; 0x1422 <move_window+0xd4>
    1420:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	ff 90       	pop	r15
    142c:	ef 90       	pop	r14
    142e:	df 90       	pop	r13
    1430:	cf 90       	pop	r12
    1432:	bf 90       	pop	r11
    1434:	af 90       	pop	r10
    1436:	9f 90       	pop	r9
    1438:	8f 90       	pop	r8
    143a:	7f 90       	pop	r7
    143c:	6f 90       	pop	r6
    143e:	08 95       	ret

00001440 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    1440:	0f 93       	push	r16
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
	if (res == FR_OK) {
    1454:	88 23       	and	r24, r24
    1456:	09 f0       	breq	.+2      	; 0x145a <sync+0x1a>
    1458:	7e c0       	rjmp	.+252    	; 0x1556 <sync+0x116>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    145a:	88 81       	ld	r24, Y
    145c:	83 30       	cpi	r24, 0x03	; 3
    145e:	09 f0       	breq	.+2      	; 0x1462 <sync+0x22>
    1460:	72 c0       	rjmp	.+228    	; 0x1546 <sync+0x106>
    1462:	8d 81       	ldd	r24, Y+5	; 0x05
    1464:	88 23       	and	r24, r24
    1466:	09 f4       	brne	.+2      	; 0x146a <sync+0x2a>
    1468:	6e c0       	rjmp	.+220    	; 0x1546 <sync+0x106>
			fs->winsect = 0;
    146a:	1a a6       	std	Y+42, r1	; 0x2a
    146c:	1b a6       	std	Y+43, r1	; 0x2b
    146e:	1c a6       	std	Y+44, r1	; 0x2c
    1470:	1d a6       	std	Y+45, r1	; 0x2d
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1472:	be 01       	movw	r22, r28
    1474:	62 5d       	subi	r22, 0xD2	; 210
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	fb 01       	movw	r30, r22
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	92 e0       	ldi	r25, 0x02	; 2
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <sync+0x42>
	while (cnt--) *d++ = (char)val;
    1480:	11 92       	st	Z+, r1
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	2f ef       	ldi	r18, 0xFF	; 255
    1486:	8f 3f       	cpi	r24, 0xFF	; 255
    1488:	92 07       	cpc	r25, r18
    148a:	d1 f7       	brne	.-12     	; 0x1480 <sync+0x40>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    148c:	c4 5d       	subi	r28, 0xD4	; 212
    148e:	dd 4f       	sbci	r29, 0xFD	; 253
    1490:	85 e5       	ldi	r24, 0x55	; 85
    1492:	89 93       	st	Y+, r24
    1494:	8a ea       	ldi	r24, 0xAA	; 170
    1496:	88 83       	st	Y, r24
    1498:	cd 52       	subi	r28, 0x2D	; 45
    149a:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    149c:	82 e5       	ldi	r24, 0x52	; 82
    149e:	8e a7       	std	Y+46, r24	; 0x2e
    14a0:	8f a7       	std	Y+47, r24	; 0x2f
    14a2:	21 e6       	ldi	r18, 0x61	; 97
    14a4:	28 ab       	std	Y+48, r18	; 0x30
    14a6:	91 e4       	ldi	r25, 0x41	; 65
    14a8:	99 ab       	std	Y+49, r25	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    14aa:	ce 5e       	subi	r28, 0xEE	; 238
    14ac:	dd 4f       	sbci	r29, 0xFD	; 253
    14ae:	82 e7       	ldi	r24, 0x72	; 114
    14b0:	89 93       	st	Y+, r24
    14b2:	89 93       	st	Y+, r24
    14b4:	99 93       	st	Y+, r25
    14b6:	28 83       	st	Y, r18
    14b8:	c5 51       	subi	r28, 0x15	; 21
    14ba:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    14bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    14be:	ca 5e       	subi	r28, 0xEA	; 234
    14c0:	dd 4f       	sbci	r29, 0xFD	; 253
    14c2:	88 83       	st	Y, r24
    14c4:	c6 51       	subi	r28, 0x16	; 22
    14c6:	d2 40       	sbci	r29, 0x02	; 2
    14c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ca:	c9 5e       	subi	r28, 0xE9	; 233
    14cc:	dd 4f       	sbci	r29, 0xFD	; 253
    14ce:	88 83       	st	Y, r24
    14d0:	c7 51       	subi	r28, 0x17	; 23
    14d2:	d2 40       	sbci	r29, 0x02	; 2
    14d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    14d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    14d8:	a8 89       	ldd	r26, Y+16	; 0x10
    14da:	b9 89       	ldd	r27, Y+17	; 0x11
    14dc:	9d 01       	movw	r18, r26
    14de:	44 27       	eor	r20, r20
    14e0:	55 27       	eor	r21, r21
    14e2:	c8 5e       	subi	r28, 0xE8	; 232
    14e4:	dd 4f       	sbci	r29, 0xFD	; 253
    14e6:	28 83       	st	Y, r18
    14e8:	21 96       	adiw	r28, 0x01	; 1
    14ea:	8b 2f       	mov	r24, r27
    14ec:	99 27       	eor	r25, r25
    14ee:	aa 27       	eor	r26, r26
    14f0:	bb 27       	eor	r27, r27
    14f2:	88 83       	st	Y, r24
    14f4:	c9 51       	subi	r28, 0x19	; 25
    14f6:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    14f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    14fa:	c6 5e       	subi	r28, 0xE6	; 230
    14fc:	dd 4f       	sbci	r29, 0xFD	; 253
    14fe:	88 83       	st	Y, r24
    1500:	ca 51       	subi	r28, 0x1A	; 26
    1502:	d2 40       	sbci	r29, 0x02	; 2
    1504:	8b 85       	ldd	r24, Y+11	; 0x0b
    1506:	c5 5e       	subi	r28, 0xE5	; 229
    1508:	dd 4f       	sbci	r29, 0xFD	; 253
    150a:	88 83       	st	Y, r24
    150c:	cb 51       	subi	r28, 0x1B	; 27
    150e:	d2 40       	sbci	r29, 0x02	; 2
    1510:	8a 85       	ldd	r24, Y+10	; 0x0a
    1512:	9b 85       	ldd	r25, Y+11	; 0x0b
    1514:	ac 85       	ldd	r26, Y+12	; 0x0c
    1516:	bd 85       	ldd	r27, Y+13	; 0x0d
    1518:	9d 01       	movw	r18, r26
    151a:	44 27       	eor	r20, r20
    151c:	55 27       	eor	r21, r21
    151e:	c4 5e       	subi	r28, 0xE4	; 228
    1520:	dd 4f       	sbci	r29, 0xFD	; 253
    1522:	28 83       	st	Y, r18
    1524:	21 96       	adiw	r28, 0x01	; 1
    1526:	8b 2f       	mov	r24, r27
    1528:	99 27       	eor	r25, r25
    152a:	aa 27       	eor	r26, r26
    152c:	bb 27       	eor	r27, r27
    152e:	88 83       	st	Y, r24
    1530:	cd 51       	subi	r28, 0x1D	; 29
    1532:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    1534:	2a 89       	ldd	r18, Y+18	; 0x12
    1536:	3b 89       	ldd	r19, Y+19	; 0x13
    1538:	4c 89       	ldd	r20, Y+20	; 0x14
    153a:	5d 89       	ldd	r21, Y+21	; 0x15
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	01 e0       	ldi	r16, 0x01	; 1
    1540:	0e 94 43 07 	call	0xe86	; 0xe86 <disk_write>
			fs->fsi_flag = 0;
    1544:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	40 e0       	ldi	r20, 0x00	; 0
    154c:	50 e0       	ldi	r21, 0x00	; 0
    154e:	0e 94 bb 07 	call	0xf76	; 0xf76 <disk_ioctl>
    1552:	81 11       	cpse	r24, r1
    1554:	81 e0       	ldi	r24, 0x01	; 1
			res = FR_DISK_ERR;
	}

	return res;
}
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	0f 91       	pop	r16
    155c:	08 95       	ret

0000155e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    155e:	7f 92       	push	r7
    1560:	8f 92       	push	r8
    1562:	9f 92       	push	r9
    1564:	af 92       	push	r10
    1566:	bf 92       	push	r11
    1568:	cf 92       	push	r12
    156a:	df 92       	push	r13
    156c:	ef 92       	push	r14
    156e:	ff 92       	push	r15
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	4c 01       	movw	r8, r24
    157a:	7a 01       	movw	r14, r20
    157c:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    157e:	42 30       	cpi	r20, 0x02	; 2
    1580:	51 05       	cpc	r21, r1
    1582:	61 05       	cpc	r22, r1
    1584:	71 05       	cpc	r23, r1
    1586:	08 f4       	brcc	.+2      	; 0x158a <get_fat+0x2c>
    1588:	bb c0       	rjmp	.+374    	; 0x1700 <get_fat+0x1a2>
    158a:	f4 01       	movw	r30, r8
    158c:	82 8d       	ldd	r24, Z+26	; 0x1a
    158e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1590:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1592:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1594:	48 17       	cp	r20, r24
    1596:	59 07       	cpc	r21, r25
    1598:	6a 07       	cpc	r22, r26
    159a:	7b 07       	cpc	r23, r27
    159c:	08 f0       	brcs	.+2      	; 0x15a0 <get_fat+0x42>
    159e:	b0 c0       	rjmp	.+352    	; 0x1700 <get_fat+0x1a2>
		return 1;

	fsect = fs->fatbase;
    15a0:	a6 8c       	ldd	r10, Z+30	; 0x1e
    15a2:	b7 8c       	ldd	r11, Z+31	; 0x1f
    15a4:	c0 a0       	ldd	r12, Z+32	; 0x20
    15a6:	d1 a0       	ldd	r13, Z+33	; 0x21
	switch (fs->fs_type) {
    15a8:	80 81       	ld	r24, Z
    15aa:	82 30       	cpi	r24, 0x02	; 2
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <get_fat+0x52>
    15ae:	4d c0       	rjmp	.+154    	; 0x164a <get_fat+0xec>
    15b0:	83 30       	cpi	r24, 0x03	; 3
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <get_fat+0x58>
    15b4:	68 c0       	rjmp	.+208    	; 0x1686 <get_fat+0x128>
    15b6:	81 30       	cpi	r24, 0x01	; 1
    15b8:	09 f0       	breq	.+2      	; 0x15bc <get_fat+0x5e>
    15ba:	a7 c0       	rjmp	.+334    	; 0x170a <get_fat+0x1ac>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
    15bc:	ea 01       	movw	r28, r20
    15be:	d6 95       	lsr	r29
    15c0:	c7 95       	ror	r28
    15c2:	c4 0f       	add	r28, r20
    15c4:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    15c6:	ae 01       	movw	r20, r28
    15c8:	45 2f       	mov	r20, r21
    15ca:	55 27       	eor	r21, r21
    15cc:	46 95       	lsr	r20
    15ce:	60 e0       	ldi	r22, 0x00	; 0
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	4a 0d       	add	r20, r10
    15d4:	5b 1d       	adc	r21, r11
    15d6:	6c 1d       	adc	r22, r12
    15d8:	7d 1d       	adc	r23, r13
    15da:	c4 01       	movw	r24, r8
    15dc:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    15e0:	88 23       	and	r24, r24
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <get_fat+0x88>
    15e4:	92 c0       	rjmp	.+292    	; 0x170a <get_fat+0x1ac>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    15e6:	fe 01       	movw	r30, r28
    15e8:	f1 70       	andi	r31, 0x01	; 1
    15ea:	e8 0d       	add	r30, r8
    15ec:	f9 1d       	adc	r31, r9
    15ee:	76 a4       	ldd	r7, Z+46	; 0x2e
    15f0:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    15f2:	ae 01       	movw	r20, r28
    15f4:	45 2f       	mov	r20, r21
    15f6:	55 27       	eor	r21, r21
    15f8:	46 95       	lsr	r20
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	4a 0d       	add	r20, r10
    1600:	5b 1d       	adc	r21, r11
    1602:	6c 1d       	adc	r22, r12
    1604:	7d 1d       	adc	r23, r13
    1606:	c4 01       	movw	r24, r8
    1608:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    160c:	88 23       	and	r24, r24
    160e:	09 f0       	breq	.+2      	; 0x1612 <get_fat+0xb4>
    1610:	7c c0       	rjmp	.+248    	; 0x170a <get_fat+0x1ac>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    1612:	67 2d       	mov	r22, r7
    1614:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    1616:	d1 70       	andi	r29, 0x01	; 1
    1618:	c8 0d       	add	r28, r8
    161a:	d9 1d       	adc	r29, r9
    161c:	9e a5       	ldd	r25, Y+46	; 0x2e
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	68 2b       	or	r22, r24
    1622:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1624:	c7 01       	movw	r24, r14
    1626:	81 70       	andi	r24, 0x01	; 1
    1628:	90 70       	andi	r25, 0x00	; 0
    162a:	89 2b       	or	r24, r25
    162c:	39 f0       	breq	.+14     	; 0x163c <get_fat+0xde>
    162e:	44 e0       	ldi	r20, 0x04	; 4
    1630:	76 95       	lsr	r23
    1632:	67 95       	ror	r22
    1634:	4a 95       	dec	r20
    1636:	e1 f7       	brne	.-8      	; 0x1630 <get_fat+0xd2>
    1638:	9b 01       	movw	r18, r22
    163a:	22 c0       	rjmp	.+68     	; 0x1680 <get_fat+0x122>
    163c:	9b 01       	movw	r18, r22
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	3f 70       	andi	r19, 0x0F	; 15
    1644:	40 70       	andi	r20, 0x00	; 0
    1646:	50 70       	andi	r21, 0x00	; 0
    1648:	64 c0       	rjmp	.+200    	; 0x1712 <get_fat+0x1b4>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    164a:	45 2f       	mov	r20, r21
    164c:	56 2f       	mov	r21, r22
    164e:	67 2f       	mov	r22, r23
    1650:	77 27       	eor	r23, r23
    1652:	4a 0d       	add	r20, r10
    1654:	5b 1d       	adc	r21, r11
    1656:	6c 1d       	adc	r22, r12
    1658:	7d 1d       	adc	r23, r13
    165a:	c4 01       	movw	r24, r8
    165c:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    1660:	88 23       	and	r24, r24
    1662:	09 f0       	breq	.+2      	; 0x1666 <get_fat+0x108>
    1664:	52 c0       	rjmp	.+164    	; 0x170a <get_fat+0x1ac>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    1666:	f7 01       	movw	r30, r14
    1668:	ee 0f       	add	r30, r30
    166a:	ff 1f       	adc	r31, r31
    166c:	f1 70       	andi	r31, 0x01	; 1
    166e:	e8 0d       	add	r30, r8
    1670:	f9 1d       	adc	r31, r9
    1672:	97 a5       	ldd	r25, Z+47	; 0x2f
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	26 a5       	ldd	r18, Z+46	; 0x2e
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	82 2b       	or	r24, r18
    167c:	93 2b       	or	r25, r19
    167e:	9c 01       	movw	r18, r24
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	50 e0       	ldi	r21, 0x00	; 0
    1684:	46 c0       	rjmp	.+140    	; 0x1712 <get_fat+0x1b4>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    1686:	97 e0       	ldi	r25, 0x07	; 7
    1688:	76 95       	lsr	r23
    168a:	67 95       	ror	r22
    168c:	57 95       	ror	r21
    168e:	47 95       	ror	r20
    1690:	9a 95       	dec	r25
    1692:	d1 f7       	brne	.-12     	; 0x1688 <get_fat+0x12a>
    1694:	4a 0d       	add	r20, r10
    1696:	5b 1d       	adc	r21, r11
    1698:	6c 1d       	adc	r22, r12
    169a:	7d 1d       	adc	r23, r13
    169c:	c4 01       	movw	r24, r8
    169e:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    16a2:	88 23       	and	r24, r24
    16a4:	91 f5       	brne	.+100    	; 0x170a <get_fat+0x1ac>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    16a6:	f7 01       	movw	r30, r14
    16a8:	ee 0f       	add	r30, r30
    16aa:	ff 1f       	adc	r31, r31
    16ac:	ee 0f       	add	r30, r30
    16ae:	ff 1f       	adc	r31, r31
    16b0:	f1 70       	andi	r31, 0x01	; 1
    16b2:	e8 0d       	add	r30, r8
    16b4:	f9 1d       	adc	r31, r9
    16b6:	81 a9       	ldd	r24, Z+49	; 0x31
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	a0 e0       	ldi	r26, 0x00	; 0
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	58 2f       	mov	r21, r24
    16c0:	44 27       	eor	r20, r20
    16c2:	33 27       	eor	r19, r19
    16c4:	22 27       	eor	r18, r18
    16c6:	80 a9       	ldd	r24, Z+48	; 0x30
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	a0 e0       	ldi	r26, 0x00	; 0
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	dc 01       	movw	r26, r24
    16d0:	99 27       	eor	r25, r25
    16d2:	88 27       	eor	r24, r24
    16d4:	28 2b       	or	r18, r24
    16d6:	39 2b       	or	r19, r25
    16d8:	4a 2b       	or	r20, r26
    16da:	5b 2b       	or	r21, r27
    16dc:	86 a5       	ldd	r24, Z+46	; 0x2e
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	a0 e0       	ldi	r26, 0x00	; 0
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	28 2b       	or	r18, r24
    16e6:	39 2b       	or	r19, r25
    16e8:	4a 2b       	or	r20, r26
    16ea:	5b 2b       	or	r21, r27
    16ec:	97 a5       	ldd	r25, Z+47	; 0x2f
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	a0 e0       	ldi	r26, 0x00	; 0
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	28 2b       	or	r18, r24
    16f6:	39 2b       	or	r19, r25
    16f8:	4a 2b       	or	r20, r26
    16fa:	5b 2b       	or	r21, r27
    16fc:	5f 70       	andi	r21, 0x0F	; 15
    16fe:	09 c0       	rjmp	.+18     	; 0x1712 <get_fat+0x1b4>
    1700:	21 e0       	ldi	r18, 0x01	; 1
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	04 c0       	rjmp	.+8      	; 0x1712 <get_fat+0x1b4>
    170a:	2f ef       	ldi	r18, 0xFF	; 255
    170c:	3f ef       	ldi	r19, 0xFF	; 255
    170e:	4f ef       	ldi	r20, 0xFF	; 255
    1710:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    1712:	b9 01       	movw	r22, r18
    1714:	ca 01       	movw	r24, r20
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	df 90       	pop	r13
    1724:	cf 90       	pop	r12
    1726:	bf 90       	pop	r11
    1728:	af 90       	pop	r10
    172a:	9f 90       	pop	r9
    172c:	8f 90       	pop	r8
    172e:	7f 90       	pop	r7
    1730:	08 95       	ret

00001732 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1732:	2f 92       	push	r2
    1734:	3f 92       	push	r3
    1736:	4f 92       	push	r4
    1738:	5f 92       	push	r5
    173a:	6f 92       	push	r6
    173c:	7f 92       	push	r7
    173e:	8f 92       	push	r8
    1740:	9f 92       	push	r9
    1742:	af 92       	push	r10
    1744:	bf 92       	push	r11
    1746:	cf 92       	push	r12
    1748:	df 92       	push	r13
    174a:	ef 92       	push	r14
    174c:	ff 92       	push	r15
    174e:	0f 93       	push	r16
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	3c 01       	movw	r6, r24
    1758:	6a 01       	movw	r12, r20
    175a:	7b 01       	movw	r14, r22
    175c:	48 01       	movw	r8, r16
    175e:	59 01       	movw	r10, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
    1760:	42 30       	cpi	r20, 0x02	; 2
    1762:	51 05       	cpc	r21, r1
    1764:	61 05       	cpc	r22, r1
    1766:	71 05       	cpc	r23, r1
    1768:	08 f4       	brcc	.+2      	; 0x176c <put_fat+0x3a>
    176a:	ba c0       	rjmp	.+372    	; 0x18e0 <put_fat+0x1ae>
    176c:	f3 01       	movw	r30, r6
    176e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1770:	93 8d       	ldd	r25, Z+27	; 0x1b
    1772:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1774:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1776:	48 17       	cp	r20, r24
    1778:	59 07       	cpc	r21, r25
    177a:	6a 07       	cpc	r22, r26
    177c:	7b 07       	cpc	r23, r27
    177e:	08 f0       	brcs	.+2      	; 0x1782 <put_fat+0x50>
    1780:	af c0       	rjmp	.+350    	; 0x18e0 <put_fat+0x1ae>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
    1782:	26 8c       	ldd	r2, Z+30	; 0x1e
    1784:	37 8c       	ldd	r3, Z+31	; 0x1f
    1786:	40 a0       	ldd	r4, Z+32	; 0x20
    1788:	51 a0       	ldd	r5, Z+33	; 0x21
		switch (fs->fs_type) {
    178a:	80 81       	ld	r24, Z
    178c:	82 30       	cpi	r24, 0x02	; 2
    178e:	09 f4       	brne	.+2      	; 0x1792 <put_fat+0x60>
    1790:	64 c0       	rjmp	.+200    	; 0x185a <put_fat+0x128>
    1792:	83 30       	cpi	r24, 0x03	; 3
    1794:	09 f4       	brne	.+2      	; 0x1798 <put_fat+0x66>
    1796:	7a c0       	rjmp	.+244    	; 0x188c <put_fat+0x15a>
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	11 f0       	breq	.+4      	; 0x17a0 <put_fat+0x6e>
    179c:	22 e0       	ldi	r18, 0x02	; 2
    179e:	9c c0       	rjmp	.+312    	; 0x18d8 <put_fat+0x1a6>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    17a0:	ea 01       	movw	r28, r20
    17a2:	d6 95       	lsr	r29
    17a4:	c7 95       	ror	r28
    17a6:	c4 0f       	add	r28, r20
    17a8:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
    17aa:	ae 01       	movw	r20, r28
    17ac:	45 2f       	mov	r20, r21
    17ae:	55 27       	eor	r21, r21
    17b0:	46 95       	lsr	r20
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	42 0d       	add	r20, r2
    17b8:	53 1d       	adc	r21, r3
    17ba:	64 1d       	adc	r22, r4
    17bc:	75 1d       	adc	r23, r5
    17be:	c3 01       	movw	r24, r6
    17c0:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    17c4:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    17c6:	88 23       	and	r24, r24
    17c8:	09 f0       	breq	.+2      	; 0x17cc <put_fat+0x9a>
    17ca:	86 c0       	rjmp	.+268    	; 0x18d8 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    17cc:	de 01       	movw	r26, r28
    17ce:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    17d0:	86 01       	movw	r16, r12
    17d2:	01 70       	andi	r16, 0x01	; 1
    17d4:	10 70       	andi	r17, 0x00	; 0
    17d6:	01 15       	cp	r16, r1
    17d8:	11 05       	cpc	r17, r1
    17da:	51 f0       	breq	.+20     	; 0x17f0 <put_fat+0xbe>
    17dc:	f3 01       	movw	r30, r6
    17de:	ea 0f       	add	r30, r26
    17e0:	fb 1f       	adc	r31, r27
    17e2:	86 a5       	ldd	r24, Z+46	; 0x2e
    17e4:	8f 70       	andi	r24, 0x0F	; 15
    17e6:	98 2d       	mov	r25, r8
    17e8:	92 95       	swap	r25
    17ea:	90 7f       	andi	r25, 0xF0	; 240
    17ec:	98 2b       	or	r25, r24
    17ee:	01 c0       	rjmp	.+2      	; 0x17f2 <put_fat+0xc0>
    17f0:	98 2d       	mov	r25, r8
    17f2:	a6 0d       	add	r26, r6
    17f4:	b7 1d       	adc	r27, r7
    17f6:	9e 96       	adiw	r26, 0x2e	; 46
    17f8:	9c 93       	st	X, r25
			bc++;
    17fa:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	f3 01       	movw	r30, r6
    1800:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
    1802:	ae 01       	movw	r20, r28
    1804:	45 2f       	mov	r20, r21
    1806:	55 27       	eor	r21, r21
    1808:	46 95       	lsr	r20
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	42 0d       	add	r20, r2
    1810:	53 1d       	adc	r21, r3
    1812:	64 1d       	adc	r22, r4
    1814:	75 1d       	adc	r23, r5
    1816:	c3 01       	movw	r24, r6
    1818:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    181c:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    181e:	88 23       	and	r24, r24
    1820:	09 f0       	breq	.+2      	; 0x1824 <put_fat+0xf2>
    1822:	5a c0       	rjmp	.+180    	; 0x18d8 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    1824:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1826:	01 2b       	or	r16, r17
    1828:	49 f0       	breq	.+18     	; 0x183c <put_fat+0x10a>
    182a:	64 e0       	ldi	r22, 0x04	; 4
    182c:	b6 94       	lsr	r11
    182e:	a7 94       	ror	r10
    1830:	97 94       	ror	r9
    1832:	87 94       	ror	r8
    1834:	6a 95       	dec	r22
    1836:	d1 f7       	brne	.-12     	; 0x182c <put_fat+0xfa>
    1838:	48 2d       	mov	r20, r8
    183a:	0b c0       	rjmp	.+22     	; 0x1852 <put_fat+0x120>
    183c:	f3 01       	movw	r30, r6
    183e:	ec 0f       	add	r30, r28
    1840:	fd 1f       	adc	r31, r29
    1842:	46 a5       	ldd	r20, Z+46	; 0x2e
    1844:	40 7f       	andi	r20, 0xF0	; 240
    1846:	bb 27       	eor	r27, r27
    1848:	ab 2d       	mov	r26, r11
    184a:	9a 2d       	mov	r25, r10
    184c:	89 2d       	mov	r24, r9
    184e:	8f 70       	andi	r24, 0x0F	; 15
    1850:	48 2b       	or	r20, r24
    1852:	c6 0d       	add	r28, r6
    1854:	d7 1d       	adc	r29, r7
    1856:	4e a7       	std	Y+46, r20	; 0x2e
    1858:	3f c0       	rjmp	.+126    	; 0x18d8 <put_fat+0x1a6>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
    185a:	77 27       	eor	r23, r23
    185c:	6f 2d       	mov	r22, r15
    185e:	5e 2d       	mov	r21, r14
    1860:	4d 2d       	mov	r20, r13
    1862:	42 0d       	add	r20, r2
    1864:	53 1d       	adc	r21, r3
    1866:	64 1d       	adc	r22, r4
    1868:	75 1d       	adc	r23, r5
    186a:	c3 01       	movw	r24, r6
    186c:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    1870:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1872:	88 23       	and	r24, r24
    1874:	89 f5       	brne	.+98     	; 0x18d8 <put_fat+0x1a6>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
    1876:	f6 01       	movw	r30, r12
    1878:	ee 0f       	add	r30, r30
    187a:	ff 1f       	adc	r31, r31
    187c:	f1 70       	andi	r31, 0x01	; 1
    187e:	e6 0d       	add	r30, r6
    1880:	f7 1d       	adc	r31, r7
    1882:	86 a6       	std	Z+46, r8	; 0x2e
    1884:	89 2d       	mov	r24, r9
    1886:	99 27       	eor	r25, r25
    1888:	87 a7       	std	Z+47, r24	; 0x2f
    188a:	26 c0       	rjmp	.+76     	; 0x18d8 <put_fat+0x1a6>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
    188c:	87 e0       	ldi	r24, 0x07	; 7
    188e:	76 95       	lsr	r23
    1890:	67 95       	ror	r22
    1892:	57 95       	ror	r21
    1894:	47 95       	ror	r20
    1896:	8a 95       	dec	r24
    1898:	d1 f7       	brne	.-12     	; 0x188e <put_fat+0x15c>
    189a:	42 0d       	add	r20, r2
    189c:	53 1d       	adc	r21, r3
    189e:	64 1d       	adc	r22, r4
    18a0:	75 1d       	adc	r23, r5
    18a2:	c3 01       	movw	r24, r6
    18a4:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    18a8:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    18aa:	88 23       	and	r24, r24
    18ac:	a9 f4       	brne	.+42     	; 0x18d8 <put_fat+0x1a6>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
    18ae:	f6 01       	movw	r30, r12
    18b0:	ee 0f       	add	r30, r30
    18b2:	ff 1f       	adc	r31, r31
    18b4:	ee 0f       	add	r30, r30
    18b6:	ff 1f       	adc	r31, r31
    18b8:	f1 70       	andi	r31, 0x01	; 1
    18ba:	e6 0d       	add	r30, r6
    18bc:	f7 1d       	adc	r31, r7
    18be:	86 a6       	std	Z+46, r8	; 0x2e
    18c0:	89 2d       	mov	r24, r9
    18c2:	99 27       	eor	r25, r25
    18c4:	87 a7       	std	Z+47, r24	; 0x2f
    18c6:	c5 01       	movw	r24, r10
    18c8:	aa 27       	eor	r26, r26
    18ca:	bb 27       	eor	r27, r27
    18cc:	80 ab       	std	Z+48, r24	; 0x30
    18ce:	8b 2d       	mov	r24, r11
    18d0:	99 27       	eor	r25, r25
    18d2:	aa 27       	eor	r26, r26
    18d4:	bb 27       	eor	r27, r27
    18d6:	81 ab       	std	Z+49, r24	; 0x31
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	f3 01       	movw	r30, r6
    18dc:	84 83       	std	Z+4, r24	; 0x04
    18de:	01 c0       	rjmp	.+2      	; 0x18e2 <put_fat+0x1b0>
    18e0:	22 e0       	ldi	r18, 0x02	; 2
	}

	return res;
}
    18e2:	82 2f       	mov	r24, r18
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	ff 90       	pop	r15
    18ee:	ef 90       	pop	r14
    18f0:	df 90       	pop	r13
    18f2:	cf 90       	pop	r12
    18f4:	bf 90       	pop	r11
    18f6:	af 90       	pop	r10
    18f8:	9f 90       	pop	r9
    18fa:	8f 90       	pop	r8
    18fc:	7f 90       	pop	r7
    18fe:	6f 90       	pop	r6
    1900:	5f 90       	pop	r5
    1902:	4f 90       	pop	r4
    1904:	3f 90       	pop	r3
    1906:	2f 90       	pop	r2
    1908:	08 95       	ret

0000190a <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    190a:	9f 92       	push	r9
    190c:	af 92       	push	r10
    190e:	bf 92       	push	r11
    1910:	cf 92       	push	r12
    1912:	df 92       	push	r13
    1914:	ef 92       	push	r14
    1916:	ff 92       	push	r15
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	ec 01       	movw	r28, r24
    1922:	7a 01       	movw	r14, r20
    1924:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    1926:	42 30       	cpi	r20, 0x02	; 2
    1928:	51 05       	cpc	r21, r1
    192a:	61 05       	cpc	r22, r1
    192c:	71 05       	cpc	r23, r1
    192e:	08 f4       	brcc	.+2      	; 0x1932 <remove_chain+0x28>
    1930:	58 c0       	rjmp	.+176    	; 0x19e2 <remove_chain+0xd8>
    1932:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1934:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1936:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1938:	bd 8d       	ldd	r27, Y+29	; 0x1d
    193a:	48 17       	cp	r20, r24
    193c:	59 07       	cpc	r21, r25
    193e:	6a 07       	cpc	r22, r26
    1940:	7b 07       	cpc	r23, r27
    1942:	08 f4       	brcc	.+2      	; 0x1946 <remove_chain+0x3c>
    1944:	41 c0       	rjmp	.+130    	; 0x19c8 <remove_chain+0xbe>
    1946:	4d c0       	rjmp	.+154    	; 0x19e2 <remove_chain+0xd8>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1948:	ce 01       	movw	r24, r28
    194a:	b8 01       	movw	r22, r16
    194c:	a7 01       	movw	r20, r14
    194e:	0e 94 af 0a 	call	0x155e	; 0x155e <get_fat>
    1952:	5b 01       	movw	r10, r22
    1954:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    1956:	61 15       	cp	r22, r1
    1958:	71 05       	cpc	r23, r1
    195a:	81 05       	cpc	r24, r1
    195c:	91 05       	cpc	r25, r1
    195e:	09 f4       	brne	.+2      	; 0x1962 <remove_chain+0x58>
    1960:	42 c0       	rjmp	.+132    	; 0x19e6 <remove_chain+0xdc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	a8 16       	cp	r10, r24
    1966:	b1 04       	cpc	r11, r1
    1968:	c1 04       	cpc	r12, r1
    196a:	d1 04       	cpc	r13, r1
    196c:	d1 f1       	breq	.+116    	; 0x19e2 <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    196e:	2f ef       	ldi	r18, 0xFF	; 255
    1970:	a2 16       	cp	r10, r18
    1972:	2f ef       	ldi	r18, 0xFF	; 255
    1974:	b2 06       	cpc	r11, r18
    1976:	2f ef       	ldi	r18, 0xFF	; 255
    1978:	c2 06       	cpc	r12, r18
    197a:	2f ef       	ldi	r18, 0xFF	; 255
    197c:	d2 06       	cpc	r13, r18
    197e:	11 f4       	brne	.+4      	; 0x1984 <remove_chain+0x7a>
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	32 c0       	rjmp	.+100    	; 0x19e8 <remove_chain+0xde>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1984:	ce 01       	movw	r24, r28
    1986:	b8 01       	movw	r22, r16
    1988:	a7 01       	movw	r20, r14
    198a:	00 e0       	ldi	r16, 0x00	; 0
    198c:	10 e0       	ldi	r17, 0x00	; 0
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	0e 94 99 0b 	call	0x1732	; 0x1732 <put_fat>
			if (res != FR_OK) break;
    1996:	88 23       	and	r24, r24
    1998:	39 f5       	brne	.+78     	; 0x19e8 <remove_chain+0xde>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    199a:	8e 85       	ldd	r24, Y+14	; 0x0e
    199c:	9f 85       	ldd	r25, Y+15	; 0x0f
    199e:	a8 89       	ldd	r26, Y+16	; 0x10
    19a0:	b9 89       	ldd	r27, Y+17	; 0x11
    19a2:	8f 3f       	cpi	r24, 0xFF	; 255
    19a4:	2f ef       	ldi	r18, 0xFF	; 255
    19a6:	92 07       	cpc	r25, r18
    19a8:	2f ef       	ldi	r18, 0xFF	; 255
    19aa:	a2 07       	cpc	r26, r18
    19ac:	2f ef       	ldi	r18, 0xFF	; 255
    19ae:	b2 07       	cpc	r27, r18
    19b0:	41 f0       	breq	.+16     	; 0x19c2 <remove_chain+0xb8>
				fs->free_clust++;
    19b2:	01 96       	adiw	r24, 0x01	; 1
    19b4:	a1 1d       	adc	r26, r1
    19b6:	b1 1d       	adc	r27, r1
    19b8:	8e 87       	std	Y+14, r24	; 0x0e
    19ba:	9f 87       	std	Y+15, r25	; 0x0f
    19bc:	a8 8b       	std	Y+16, r26	; 0x10
    19be:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    19c0:	9d 82       	std	Y+5, r9	; 0x05
    19c2:	86 01       	movw	r16, r12
    19c4:	75 01       	movw	r14, r10
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <remove_chain+0xc2>
    19c8:	99 24       	eor	r9, r9
    19ca:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    19cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19ce:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19d0:	ac 8d       	ldd	r26, Y+28	; 0x1c
    19d2:	bd 8d       	ldd	r27, Y+29	; 0x1d
    19d4:	e8 16       	cp	r14, r24
    19d6:	f9 06       	cpc	r15, r25
    19d8:	0a 07       	cpc	r16, r26
    19da:	1b 07       	cpc	r17, r27
    19dc:	08 f4       	brcc	.+2      	; 0x19e0 <remove_chain+0xd6>
    19de:	b4 cf       	rjmp	.-152    	; 0x1948 <remove_chain+0x3e>
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <remove_chain+0xdc>
    19e2:	82 e0       	ldi	r24, 0x02	; 2
    19e4:	01 c0       	rjmp	.+2      	; 0x19e8 <remove_chain+0xde>
    19e6:	80 e0       	ldi	r24, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    19e8:	df 91       	pop	r29
    19ea:	cf 91       	pop	r28
    19ec:	1f 91       	pop	r17
    19ee:	0f 91       	pop	r16
    19f0:	ff 90       	pop	r15
    19f2:	ef 90       	pop	r14
    19f4:	df 90       	pop	r13
    19f6:	cf 90       	pop	r12
    19f8:	bf 90       	pop	r11
    19fa:	af 90       	pop	r10
    19fc:	9f 90       	pop	r9
    19fe:	08 95       	ret

00001a00 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1a00:	2f 92       	push	r2
    1a02:	3f 92       	push	r3
    1a04:	4f 92       	push	r4
    1a06:	5f 92       	push	r5
    1a08:	6f 92       	push	r6
    1a0a:	7f 92       	push	r7
    1a0c:	8f 92       	push	r8
    1a0e:	9f 92       	push	r9
    1a10:	af 92       	push	r10
    1a12:	bf 92       	push	r11
    1a14:	cf 92       	push	r12
    1a16:	df 92       	push	r13
    1a18:	ef 92       	push	r14
    1a1a:	ff 92       	push	r15
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <create_chain+0x26>
    1a26:	0f 92       	push	r0
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	1c 01       	movw	r2, r24
    1a2e:	2a 01       	movw	r4, r20
    1a30:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
    1a32:	dc 01       	movw	r26, r24
    1a34:	5a 96       	adiw	r26, 0x1a	; 26
    1a36:	8d 91       	ld	r24, X+
    1a38:	9d 91       	ld	r25, X+
    1a3a:	0d 90       	ld	r0, X+
    1a3c:	bc 91       	ld	r27, X
    1a3e:	a0 2d       	mov	r26, r0
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	9a 83       	std	Y+2, r25	; 0x02
    1a44:	ab 83       	std	Y+3, r26	; 0x03
    1a46:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
    1a48:	41 15       	cp	r20, r1
    1a4a:	51 05       	cpc	r21, r1
    1a4c:	61 05       	cpc	r22, r1
    1a4e:	71 05       	cpc	r23, r1
    1a50:	81 f4       	brne	.+32     	; 0x1a72 <create_chain+0x72>
		scl = fs->last_clust;			/* Get suggested start point */
    1a52:	f1 01       	movw	r30, r2
    1a54:	82 84       	ldd	r8, Z+10	; 0x0a
    1a56:	93 84       	ldd	r9, Z+11	; 0x0b
    1a58:	a4 84       	ldd	r10, Z+12	; 0x0c
    1a5a:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
    1a5c:	81 14       	cp	r8, r1
    1a5e:	91 04       	cpc	r9, r1
    1a60:	a1 04       	cpc	r10, r1
    1a62:	b1 04       	cpc	r11, r1
    1a64:	11 f1       	breq	.+68     	; 0x1aaa <create_chain+0xaa>
    1a66:	88 16       	cp	r8, r24
    1a68:	99 06       	cpc	r9, r25
    1a6a:	aa 06       	cpc	r10, r26
    1a6c:	bb 06       	cpc	r11, r27
    1a6e:	e8 f4       	brcc	.+58     	; 0x1aaa <create_chain+0xaa>
    1a70:	21 c0       	rjmp	.+66     	; 0x1ab4 <create_chain+0xb4>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1a72:	c1 01       	movw	r24, r2
    1a74:	0e 94 af 0a 	call	0x155e	; 0x155e <get_fat>
    1a78:	9b 01       	movw	r18, r22
    1a7a:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1a7c:	62 30       	cpi	r22, 0x02	; 2
    1a7e:	71 05       	cpc	r23, r1
    1a80:	81 05       	cpc	r24, r1
    1a82:	91 05       	cpc	r25, r1
    1a84:	28 f4       	brcc	.+10     	; 0x1a90 <create_chain+0x90>
    1a86:	21 e0       	ldi	r18, 0x01	; 1
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e0       	ldi	r20, 0x00	; 0
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	93 c0       	rjmp	.+294    	; 0x1bb6 <create_chain+0x1b6>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	ab 81       	ldd	r26, Y+3	; 0x03
    1a96:	bc 81       	ldd	r27, Y+4	; 0x04
    1a98:	28 17       	cp	r18, r24
    1a9a:	39 07       	cpc	r19, r25
    1a9c:	4a 07       	cpc	r20, r26
    1a9e:	5b 07       	cpc	r21, r27
    1aa0:	08 f4       	brcc	.+2      	; 0x1aa4 <create_chain+0xa4>
    1aa2:	89 c0       	rjmp	.+274    	; 0x1bb6 <create_chain+0x1b6>
    1aa4:	53 01       	movw	r10, r6
    1aa6:	42 01       	movw	r8, r4
    1aa8:	05 c0       	rjmp	.+10     	; 0x1ab4 <create_chain+0xb4>
    1aaa:	b1 e0       	ldi	r27, 0x01	; 1
    1aac:	8b 2e       	mov	r8, r27
    1aae:	91 2c       	mov	r9, r1
    1ab0:	a1 2c       	mov	r10, r1
    1ab2:	b1 2c       	mov	r11, r1
    1ab4:	75 01       	movw	r14, r10
    1ab6:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1ab8:	08 94       	sec
    1aba:	c1 1c       	adc	r12, r1
    1abc:	d1 1c       	adc	r13, r1
    1abe:	e1 1c       	adc	r14, r1
    1ac0:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac6:	ab 81       	ldd	r26, Y+3	; 0x03
    1ac8:	bc 81       	ldd	r27, Y+4	; 0x04
    1aca:	c8 16       	cp	r12, r24
    1acc:	d9 06       	cpc	r13, r25
    1ace:	ea 06       	cpc	r14, r26
    1ad0:	fb 06       	cpc	r15, r27
    1ad2:	60 f0       	brcs	.+24     	; 0x1aec <create_chain+0xec>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    1ad4:	92 e0       	ldi	r25, 0x02	; 2
    1ad6:	89 16       	cp	r8, r25
    1ad8:	91 04       	cpc	r9, r1
    1ada:	a1 04       	cpc	r10, r1
    1adc:	b1 04       	cpc	r11, r1
    1ade:	08 f4       	brcc	.+2      	; 0x1ae2 <create_chain+0xe2>
    1ae0:	61 c0       	rjmp	.+194    	; 0x1ba4 <create_chain+0x1a4>
    1ae2:	a2 e0       	ldi	r26, 0x02	; 2
    1ae4:	ca 2e       	mov	r12, r26
    1ae6:	d1 2c       	mov	r13, r1
    1ae8:	e1 2c       	mov	r14, r1
    1aea:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1aec:	c1 01       	movw	r24, r2
    1aee:	b7 01       	movw	r22, r14
    1af0:	a6 01       	movw	r20, r12
    1af2:	0e 94 af 0a 	call	0x155e	; 0x155e <get_fat>
    1af6:	9b 01       	movw	r18, r22
    1af8:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    1afa:	61 15       	cp	r22, r1
    1afc:	71 05       	cpc	r23, r1
    1afe:	81 05       	cpc	r24, r1
    1b00:	91 05       	cpc	r25, r1
    1b02:	a9 f0       	breq	.+42     	; 0x1b2e <create_chain+0x12e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    1b04:	6f 3f       	cpi	r22, 0xFF	; 255
    1b06:	af ef       	ldi	r26, 0xFF	; 255
    1b08:	7a 07       	cpc	r23, r26
    1b0a:	af ef       	ldi	r26, 0xFF	; 255
    1b0c:	8a 07       	cpc	r24, r26
    1b0e:	af ef       	ldi	r26, 0xFF	; 255
    1b10:	9a 07       	cpc	r25, r26
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <create_chain+0x116>
    1b14:	50 c0       	rjmp	.+160    	; 0x1bb6 <create_chain+0x1b6>
    1b16:	61 30       	cpi	r22, 0x01	; 1
    1b18:	71 05       	cpc	r23, r1
    1b1a:	81 05       	cpc	r24, r1
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <create_chain+0x122>
    1b20:	4a c0       	rjmp	.+148    	; 0x1bb6 <create_chain+0x1b6>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    1b22:	c8 14       	cp	r12, r8
    1b24:	d9 04       	cpc	r13, r9
    1b26:	ea 04       	cpc	r14, r10
    1b28:	fb 04       	cpc	r15, r11
    1b2a:	31 f6       	brne	.-116    	; 0x1ab8 <create_chain+0xb8>
    1b2c:	3b c0       	rjmp	.+118    	; 0x1ba4 <create_chain+0x1a4>
    1b2e:	bc 2c       	mov	r11, r12
    1b30:	ad 2c       	mov	r10, r13
    1b32:	9e 2c       	mov	r9, r14
    1b34:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    1b36:	c1 01       	movw	r24, r2
    1b38:	a6 01       	movw	r20, r12
    1b3a:	b7 01       	movw	r22, r14
    1b3c:	0f ef       	ldi	r16, 0xFF	; 255
    1b3e:	1f ef       	ldi	r17, 0xFF	; 255
    1b40:	2f ef       	ldi	r18, 0xFF	; 255
    1b42:	3f e0       	ldi	r19, 0x0F	; 15
    1b44:	0e 94 99 0b 	call	0x1732	; 0x1732 <put_fat>
    1b48:	88 23       	and	r24, r24
    1b4a:	89 f5       	brne	.+98     	; 0x1bae <create_chain+0x1ae>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    1b4c:	41 14       	cp	r4, r1
    1b4e:	51 04       	cpc	r5, r1
    1b50:	61 04       	cpc	r6, r1
    1b52:	71 04       	cpc	r7, r1
    1b54:	49 f0       	breq	.+18     	; 0x1b68 <create_chain+0x168>
		if (put_fat(fs, clst, ncl))
    1b56:	c1 01       	movw	r24, r2
    1b58:	b3 01       	movw	r22, r6
    1b5a:	a2 01       	movw	r20, r4
    1b5c:	86 01       	movw	r16, r12
    1b5e:	97 01       	movw	r18, r14
    1b60:	0e 94 99 0b 	call	0x1732	; 0x1732 <put_fat>
    1b64:	88 23       	and	r24, r24
    1b66:	19 f5       	brne	.+70     	; 0x1bae <create_chain+0x1ae>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    1b68:	f1 01       	movw	r30, r2
    1b6a:	b2 86       	std	Z+10, r11	; 0x0a
    1b6c:	a3 86       	std	Z+11, r10	; 0x0b
    1b6e:	94 86       	std	Z+12, r9	; 0x0c
    1b70:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    1b72:	86 85       	ldd	r24, Z+14	; 0x0e
    1b74:	97 85       	ldd	r25, Z+15	; 0x0f
    1b76:	a0 89       	ldd	r26, Z+16	; 0x10
    1b78:	b1 89       	ldd	r27, Z+17	; 0x11
    1b7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b7c:	ff ef       	ldi	r31, 0xFF	; 255
    1b7e:	9f 07       	cpc	r25, r31
    1b80:	ff ef       	ldi	r31, 0xFF	; 255
    1b82:	af 07       	cpc	r26, r31
    1b84:	ff ef       	ldi	r31, 0xFF	; 255
    1b86:	bf 07       	cpc	r27, r31
    1b88:	51 f0       	breq	.+20     	; 0x1b9e <create_chain+0x19e>
		fs->free_clust--;
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	a1 09       	sbc	r26, r1
    1b8e:	b1 09       	sbc	r27, r1
    1b90:	f1 01       	movw	r30, r2
    1b92:	86 87       	std	Z+14, r24	; 0x0e
    1b94:	97 87       	std	Z+15, r25	; 0x0f
    1b96:	a0 8b       	std	Z+16, r26	; 0x10
    1b98:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	85 83       	std	Z+5, r24	; 0x05
    1b9e:	a7 01       	movw	r20, r14
    1ba0:	96 01       	movw	r18, r12
    1ba2:	09 c0       	rjmp	.+18     	; 0x1bb6 <create_chain+0x1b6>
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	50 e0       	ldi	r21, 0x00	; 0
    1bac:	04 c0       	rjmp	.+8      	; 0x1bb6 <create_chain+0x1b6>
    1bae:	2f ef       	ldi	r18, 0xFF	; 255
    1bb0:	3f ef       	ldi	r19, 0xFF	; 255
    1bb2:	4f ef       	ldi	r20, 0xFF	; 255
    1bb4:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    1bb6:	b9 01       	movw	r22, r18
    1bb8:	ca 01       	movw	r24, r20
    1bba:	24 96       	adiw	r28, 0x04	; 4
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	1f 91       	pop	r17
    1bc6:	0f 91       	pop	r16
    1bc8:	ff 90       	pop	r15
    1bca:	ef 90       	pop	r14
    1bcc:	df 90       	pop	r13
    1bce:	cf 90       	pop	r12
    1bd0:	bf 90       	pop	r11
    1bd2:	af 90       	pop	r10
    1bd4:	9f 90       	pop	r9
    1bd6:	8f 90       	pop	r8
    1bd8:	7f 90       	pop	r7
    1bda:	6f 90       	pop	r6
    1bdc:	5f 90       	pop	r5
    1bde:	4f 90       	pop	r4
    1be0:	3f 90       	pop	r3
    1be2:	2f 90       	pop	r2
    1be4:	08 95       	ret

00001be6 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    1be6:	ef 92       	push	r14
    1be8:	ff 92       	push	r15
    1bea:	0f 93       	push	r16
    1bec:	1f 93       	push	r17
    1bee:	cf 93       	push	r28
    1bf0:	df 93       	push	r29
    1bf2:	ec 01       	movw	r28, r24
    1bf4:	7a 01       	movw	r14, r20
    1bf6:	8b 01       	movw	r16, r22
	clst -= 2;
    1bf8:	8e ef       	ldi	r24, 0xFE	; 254
    1bfa:	9f ef       	ldi	r25, 0xFF	; 255
    1bfc:	af ef       	ldi	r26, 0xFF	; 255
    1bfe:	bf ef       	ldi	r27, 0xFF	; 255
    1c00:	e8 0e       	add	r14, r24
    1c02:	f9 1e       	adc	r15, r25
    1c04:	0a 1f       	adc	r16, r26
    1c06:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1c08:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c0a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c0c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1c0e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1c10:	02 97       	sbiw	r24, 0x02	; 2
    1c12:	a1 09       	sbc	r26, r1
    1c14:	b1 09       	sbc	r27, r1
    1c16:	e8 16       	cp	r14, r24
    1c18:	f9 06       	cpc	r15, r25
    1c1a:	0a 07       	cpc	r16, r26
    1c1c:	1b 07       	cpc	r17, r27
    1c1e:	28 f0       	brcs	.+10     	; 0x1c2a <clust2sect+0x44>
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	12 c0       	rjmp	.+36     	; 0x1c4e <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    1c2a:	2a 81       	ldd	r18, Y+2	; 0x02
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
    1c30:	50 e0       	ldi	r21, 0x00	; 0
    1c32:	c8 01       	movw	r24, r16
    1c34:	b7 01       	movw	r22, r14
    1c36:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <__mulsi3>
    1c3a:	9b 01       	movw	r18, r22
    1c3c:	ac 01       	movw	r20, r24
    1c3e:	8e a1       	ldd	r24, Y+38	; 0x26
    1c40:	9f a1       	ldd	r25, Y+39	; 0x27
    1c42:	a8 a5       	ldd	r26, Y+40	; 0x28
    1c44:	b9 a5       	ldd	r27, Y+41	; 0x29
    1c46:	28 0f       	add	r18, r24
    1c48:	39 1f       	adc	r19, r25
    1c4a:	4a 1f       	adc	r20, r26
    1c4c:	5b 1f       	adc	r21, r27
}
    1c4e:	b9 01       	movw	r22, r18
    1c50:	ca 01       	movw	r24, r20
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	ff 90       	pop	r15
    1c5c:	ef 90       	pop	r14
    1c5e:	08 95       	ret

00001c60 <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    1c60:	af 92       	push	r10
    1c62:	bf 92       	push	r11
    1c64:	cf 92       	push	r12
    1c66:	df 92       	push	r13
    1c68:	ef 92       	push	r14
    1c6a:	ff 92       	push	r15
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	5c 01       	movw	r10, r24
    1c76:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1c78:	dc 01       	movw	r26, r24
    1c7a:	14 96       	adiw	r26, 0x04	; 4
    1c7c:	6d 93       	st	X+, r22
    1c7e:	7c 93       	st	X, r23
    1c80:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    1c82:	16 96       	adiw	r26, 0x06	; 6
    1c84:	4d 91       	ld	r20, X+
    1c86:	5d 91       	ld	r21, X+
    1c88:	6d 91       	ld	r22, X+
    1c8a:	7c 91       	ld	r23, X
    1c8c:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    1c8e:	41 30       	cpi	r20, 0x01	; 1
    1c90:	51 05       	cpc	r21, r1
    1c92:	61 05       	cpc	r22, r1
    1c94:	71 05       	cpc	r23, r1
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <dir_seek+0x3a>
    1c98:	d3 c0       	rjmp	.+422    	; 0x1e40 <dir_seek+0x1e0>
    1c9a:	ed 91       	ld	r30, X+
    1c9c:	fc 91       	ld	r31, X
    1c9e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ca0:	93 8d       	ldd	r25, Z+27	; 0x1b
    1ca2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1ca4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1ca6:	48 17       	cp	r20, r24
    1ca8:	59 07       	cpc	r21, r25
    1caa:	6a 07       	cpc	r22, r26
    1cac:	7b 07       	cpc	r23, r27
    1cae:	08 f0       	brcs	.+2      	; 0x1cb2 <dir_seek+0x52>
    1cb0:	c7 c0       	rjmp	.+398    	; 0x1e40 <dir_seek+0x1e0>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1cb2:	41 15       	cp	r20, r1
    1cb4:	51 05       	cpc	r21, r1
    1cb6:	61 05       	cpc	r22, r1
    1cb8:	71 05       	cpc	r23, r1
    1cba:	81 f5       	brne	.+96     	; 0x1d1c <dir_seek+0xbc>
    1cbc:	80 81       	ld	r24, Z
    1cbe:	83 30       	cpi	r24, 0x03	; 3
    1cc0:	49 f4       	brne	.+18     	; 0x1cd4 <dir_seek+0x74>
		clst = dj->fs->dirbase;
    1cc2:	42 a1       	ldd	r20, Z+34	; 0x22
    1cc4:	53 a1       	ldd	r21, Z+35	; 0x23
    1cc6:	64 a1       	ldd	r22, Z+36	; 0x24
    1cc8:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table */
    1cca:	41 15       	cp	r20, r1
    1ccc:	51 05       	cpc	r21, r1
    1cce:	61 05       	cpc	r22, r1
    1cd0:	71 05       	cpc	r23, r1
    1cd2:	21 f5       	brne	.+72     	; 0x1d1c <dir_seek+0xbc>
		dj->clust = clst;
    1cd4:	f5 01       	movw	r30, r10
    1cd6:	12 86       	std	Z+10, r1	; 0x0a
    1cd8:	13 86       	std	Z+11, r1	; 0x0b
    1cda:	14 86       	std	Z+12, r1	; 0x0c
    1cdc:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1cde:	01 90       	ld	r0, Z+
    1ce0:	f0 81       	ld	r31, Z
    1ce2:	e0 2d       	mov	r30, r0
    1ce4:	80 85       	ldd	r24, Z+8	; 0x08
    1ce6:	91 85       	ldd	r25, Z+9	; 0x09
    1ce8:	c8 16       	cp	r12, r24
    1cea:	d9 06       	cpc	r13, r25
    1cec:	08 f0       	brcs	.+2      	; 0x1cf0 <dir_seek+0x90>
    1cee:	a8 c0       	rjmp	.+336    	; 0x1e40 <dir_seek+0x1e0>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    1cf0:	c6 01       	movw	r24, r12
    1cf2:	24 e0       	ldi	r18, 0x04	; 4
    1cf4:	96 95       	lsr	r25
    1cf6:	87 95       	ror	r24
    1cf8:	2a 95       	dec	r18
    1cfa:	e1 f7       	brne	.-8      	; 0x1cf4 <dir_seek+0x94>
    1cfc:	a0 e0       	ldi	r26, 0x00	; 0
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	22 a1       	ldd	r18, Z+34	; 0x22
    1d02:	33 a1       	ldd	r19, Z+35	; 0x23
    1d04:	44 a1       	ldd	r20, Z+36	; 0x24
    1d06:	55 a1       	ldd	r21, Z+37	; 0x25
    1d08:	82 0f       	add	r24, r18
    1d0a:	93 1f       	adc	r25, r19
    1d0c:	a4 1f       	adc	r26, r20
    1d0e:	b5 1f       	adc	r27, r21
    1d10:	f5 01       	movw	r30, r10
    1d12:	86 87       	std	Z+14, r24	; 0x0e
    1d14:	97 87       	std	Z+15, r25	; 0x0f
    1d16:	a0 8b       	std	Z+16, r26	; 0x10
    1d18:	b1 8b       	std	Z+17, r27	; 0x11
    1d1a:	7a c0       	rjmp	.+244    	; 0x1e10 <dir_seek+0x1b0>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    1d1c:	82 81       	ldd	r24, Z+2	; 0x02
    1d1e:	08 2f       	mov	r16, r24
    1d20:	10 e0       	ldi	r17, 0x00	; 0
    1d22:	94 e0       	ldi	r25, 0x04	; 4
    1d24:	00 0f       	add	r16, r16
    1d26:	11 1f       	adc	r17, r17
    1d28:	9a 95       	dec	r25
    1d2a:	e1 f7       	brne	.-8      	; 0x1d24 <dir_seek+0xc4>
    1d2c:	24 c0       	rjmp	.+72     	; 0x1d76 <dir_seek+0x116>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1d2e:	ce 01       	movw	r24, r28
    1d30:	0e 94 af 0a 	call	0x155e	; 0x155e <get_fat>
    1d34:	ab 01       	movw	r20, r22
    1d36:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1d38:	4f 3f       	cpi	r20, 0xFF	; 255
    1d3a:	ff ef       	ldi	r31, 0xFF	; 255
    1d3c:	5f 07       	cpc	r21, r31
    1d3e:	ff ef       	ldi	r31, 0xFF	; 255
    1d40:	6f 07       	cpc	r22, r31
    1d42:	ff ef       	ldi	r31, 0xFF	; 255
    1d44:	7f 07       	cpc	r23, r31
    1d46:	11 f4       	brne	.+4      	; 0x1d4c <dir_seek+0xec>
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	7b c0       	rjmp	.+246    	; 0x1e42 <dir_seek+0x1e2>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    1d4c:	42 30       	cpi	r20, 0x02	; 2
    1d4e:	51 05       	cpc	r21, r1
    1d50:	61 05       	cpc	r22, r1
    1d52:	71 05       	cpc	r23, r1
    1d54:	08 f4       	brcc	.+2      	; 0x1d58 <dir_seek+0xf8>
    1d56:	74 c0       	rjmp	.+232    	; 0x1e40 <dir_seek+0x1e0>
    1d58:	d5 01       	movw	r26, r10
    1d5a:	ed 91       	ld	r30, X+
    1d5c:	fc 91       	ld	r31, X
    1d5e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d60:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d62:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1d64:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1d66:	48 17       	cp	r20, r24
    1d68:	59 07       	cpc	r21, r25
    1d6a:	6a 07       	cpc	r22, r26
    1d6c:	7b 07       	cpc	r23, r27
    1d6e:	08 f0       	brcs	.+2      	; 0x1d72 <dir_seek+0x112>
    1d70:	67 c0       	rjmp	.+206    	; 0x1e40 <dir_seek+0x1e0>
				return FR_INT_ERR;
			idx -= ic;
    1d72:	c0 1a       	sub	r12, r16
    1d74:	d1 0a       	sbc	r13, r17
    1d76:	f5 01       	movw	r30, r10
    1d78:	c0 81       	ld	r28, Z
    1d7a:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1d7c:	c0 16       	cp	r12, r16
    1d7e:	d1 06       	cpc	r13, r17
    1d80:	b0 f6       	brcc	.-84     	; 0x1d2e <dir_seek+0xce>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1d82:	d5 01       	movw	r26, r10
    1d84:	1a 96       	adiw	r26, 0x0a	; 10
    1d86:	4d 93       	st	X+, r20
    1d88:	5d 93       	st	X+, r21
    1d8a:	6d 93       	st	X+, r22
    1d8c:	7c 93       	st	X, r23
    1d8e:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1d90:	8e ef       	ldi	r24, 0xFE	; 254
    1d92:	e8 2e       	mov	r14, r24
    1d94:	8f ef       	ldi	r24, 0xFF	; 255
    1d96:	f8 2e       	mov	r15, r24
    1d98:	8f ef       	ldi	r24, 0xFF	; 255
    1d9a:	08 2f       	mov	r16, r24
    1d9c:	8f ef       	ldi	r24, 0xFF	; 255
    1d9e:	18 2f       	mov	r17, r24
    1da0:	e4 0e       	add	r14, r20
    1da2:	f5 1e       	adc	r15, r21
    1da4:	06 1f       	adc	r16, r22
    1da6:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1da8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1daa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1dac:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1dae:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1db0:	02 97       	sbiw	r24, 0x02	; 2
    1db2:	a1 09       	sbc	r26, r1
    1db4:	b1 09       	sbc	r27, r1
    1db6:	e8 16       	cp	r14, r24
    1db8:	f9 06       	cpc	r15, r25
    1dba:	0a 07       	cpc	r16, r26
    1dbc:	1b 07       	cpc	r17, r27
    1dbe:	28 f0       	brcs	.+10     	; 0x1dca <dir_seek+0x16a>
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e0       	ldi	r20, 0x00	; 0
    1dc6:	50 e0       	ldi	r21, 0x00	; 0
    1dc8:	12 c0       	rjmp	.+36     	; 0x1dee <dir_seek+0x18e>
	return clst * fs->csize + fs->database;
    1dca:	2a 81       	ldd	r18, Y+2	; 0x02
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	50 e0       	ldi	r21, 0x00	; 0
    1dd2:	c8 01       	movw	r24, r16
    1dd4:	b7 01       	movw	r22, r14
    1dd6:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <__mulsi3>
    1dda:	9b 01       	movw	r18, r22
    1ddc:	ac 01       	movw	r20, r24
    1dde:	8e a1       	ldd	r24, Y+38	; 0x26
    1de0:	9f a1       	ldd	r25, Y+39	; 0x27
    1de2:	a8 a5       	ldd	r26, Y+40	; 0x28
    1de4:	b9 a5       	ldd	r27, Y+41	; 0x29
    1de6:	28 0f       	add	r18, r24
    1de8:	39 1f       	adc	r19, r25
    1dea:	4a 1f       	adc	r20, r26
    1dec:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    1dee:	c6 01       	movw	r24, r12
    1df0:	04 e0       	ldi	r16, 0x04	; 4
    1df2:	96 95       	lsr	r25
    1df4:	87 95       	ror	r24
    1df6:	0a 95       	dec	r16
    1df8:	e1 f7       	brne	.-8      	; 0x1df2 <dir_seek+0x192>
    1dfa:	a0 e0       	ldi	r26, 0x00	; 0
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	28 0f       	add	r18, r24
    1e00:	39 1f       	adc	r19, r25
    1e02:	4a 1f       	adc	r20, r26
    1e04:	5b 1f       	adc	r21, r27
    1e06:	f5 01       	movw	r30, r10
    1e08:	26 87       	std	Z+14, r18	; 0x0e
    1e0a:	37 87       	std	Z+15, r19	; 0x0f
    1e0c:	40 8b       	std	Z+16, r20	; 0x10
    1e0e:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    1e10:	ff e0       	ldi	r31, 0x0F	; 15
    1e12:	cf 22       	and	r12, r31
    1e14:	dd 24       	eor	r13, r13
    1e16:	15 e0       	ldi	r17, 0x05	; 5
    1e18:	cc 0c       	add	r12, r12
    1e1a:	dd 1c       	adc	r13, r13
    1e1c:	1a 95       	dec	r17
    1e1e:	e1 f7       	brne	.-8      	; 0x1e18 <dir_seek+0x1b8>
    1e20:	8e e2       	ldi	r24, 0x2E	; 46
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	c8 0e       	add	r12, r24
    1e26:	d9 1e       	adc	r13, r25
    1e28:	d5 01       	movw	r26, r10
    1e2a:	8d 91       	ld	r24, X+
    1e2c:	9c 91       	ld	r25, X
    1e2e:	11 97       	sbiw	r26, 0x01	; 1
    1e30:	8c 0d       	add	r24, r12
    1e32:	9d 1d       	adc	r25, r13
    1e34:	52 96       	adiw	r26, 0x12	; 18
    1e36:	8d 93       	st	X+, r24
    1e38:	9c 93       	st	X, r25
    1e3a:	53 97       	sbiw	r26, 0x13	; 19
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	01 c0       	rjmp	.+2      	; 0x1e42 <dir_seek+0x1e2>

	return FR_OK;	/* Seek succeeded */
    1e40:	82 e0       	ldi	r24, 0x02	; 2
}
    1e42:	df 91       	pop	r29
    1e44:	cf 91       	pop	r28
    1e46:	1f 91       	pop	r17
    1e48:	0f 91       	pop	r16
    1e4a:	ff 90       	pop	r15
    1e4c:	ef 90       	pop	r14
    1e4e:	df 90       	pop	r13
    1e50:	cf 90       	pop	r12
    1e52:	bf 90       	pop	r11
    1e54:	af 90       	pop	r10
    1e56:	08 95       	ret

00001e58 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    1e58:	4f 92       	push	r4
    1e5a:	5f 92       	push	r5
    1e5c:	6f 92       	push	r6
    1e5e:	7f 92       	push	r7
    1e60:	8f 92       	push	r8
    1e62:	9f 92       	push	r9
    1e64:	af 92       	push	r10
    1e66:	bf 92       	push	r11
    1e68:	cf 92       	push	r12
    1e6a:	df 92       	push	r13
    1e6c:	ef 92       	push	r14
    1e6e:	ff 92       	push	r15
    1e70:	0f 93       	push	r16
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	ec 01       	movw	r28, r24
    1e7a:	d6 2e       	mov	r13, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    1e7c:	6c 80       	ldd	r6, Y+4	; 0x04
    1e7e:	7d 80       	ldd	r7, Y+5	; 0x05
    1e80:	08 94       	sec
    1e82:	61 1c       	adc	r6, r1
    1e84:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1e86:	61 14       	cp	r6, r1
    1e88:	71 04       	cpc	r7, r1
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <dir_next+0x36>
    1e8c:	4c c1       	rjmp	.+664    	; 0x2126 <dir_next+0x2ce>
    1e8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e90:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e92:	a8 89       	ldd	r26, Y+16	; 0x10
    1e94:	b9 89       	ldd	r27, Y+17	; 0x11
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	a1 05       	cpc	r26, r1
    1e9a:	b1 05       	cpc	r27, r1
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <dir_next+0x48>
    1e9e:	43 c1       	rjmp	.+646    	; 0x2126 <dir_next+0x2ce>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    1ea0:	1f e0       	ldi	r17, 0x0F	; 15
    1ea2:	41 2e       	mov	r4, r17
    1ea4:	51 2c       	mov	r5, r1
    1ea6:	46 20       	and	r4, r6
    1ea8:	57 20       	and	r5, r7
    1eaa:	41 14       	cp	r4, r1
    1eac:	51 04       	cpc	r5, r1
    1eae:	09 f0       	breq	.+2      	; 0x1eb2 <dir_next+0x5a>
    1eb0:	27 c1       	rjmp	.+590    	; 0x2100 <dir_next+0x2a8>
		dj->sect++;					/* Next sector */
    1eb2:	01 96       	adiw	r24, 0x01	; 1
    1eb4:	a1 1d       	adc	r26, r1
    1eb6:	b1 1d       	adc	r27, r1
    1eb8:	8e 87       	std	Y+14, r24	; 0x0e
    1eba:	9f 87       	std	Y+15, r25	; 0x0f
    1ebc:	a8 8b       	std	Y+16, r26	; 0x10
    1ebe:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1ec0:	4a 85       	ldd	r20, Y+10	; 0x0a
    1ec2:	5b 85       	ldd	r21, Y+11	; 0x0b
    1ec4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ec6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ec8:	e8 81       	ld	r30, Y
    1eca:	f9 81       	ldd	r31, Y+1	; 0x01
    1ecc:	41 15       	cp	r20, r1
    1ece:	51 05       	cpc	r21, r1
    1ed0:	61 05       	cpc	r22, r1
    1ed2:	71 05       	cpc	r23, r1
    1ed4:	39 f4       	brne	.+14     	; 0x1ee4 <dir_next+0x8c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1ed6:	80 85       	ldd	r24, Z+8	; 0x08
    1ed8:	91 85       	ldd	r25, Z+9	; 0x09
    1eda:	68 16       	cp	r6, r24
    1edc:	79 06       	cpc	r7, r25
    1ede:	08 f4       	brcc	.+2      	; 0x1ee2 <dir_next+0x8a>
    1ee0:	0f c1       	rjmp	.+542    	; 0x2100 <dir_next+0x2a8>
    1ee2:	21 c1       	rjmp	.+578    	; 0x2126 <dir_next+0x2ce>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1ee4:	82 81       	ldd	r24, Z+2	; 0x02
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	93 01       	movw	r18, r6
    1eec:	a4 e0       	ldi	r26, 0x04	; 4
    1eee:	36 95       	lsr	r19
    1ef0:	27 95       	ror	r18
    1ef2:	aa 95       	dec	r26
    1ef4:	e1 f7       	brne	.-8      	; 0x1eee <dir_next+0x96>
    1ef6:	82 23       	and	r24, r18
    1ef8:	93 23       	and	r25, r19
    1efa:	89 2b       	or	r24, r25
    1efc:	09 f0       	breq	.+2      	; 0x1f00 <dir_next+0xa8>
    1efe:	00 c1       	rjmp	.+512    	; 0x2100 <dir_next+0x2a8>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    1f00:	cf 01       	movw	r24, r30
    1f02:	0e 94 af 0a 	call	0x155e	; 0x155e <get_fat>
    1f06:	7b 01       	movw	r14, r22
    1f08:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    1f0a:	62 30       	cpi	r22, 0x02	; 2
    1f0c:	71 05       	cpc	r23, r1
    1f0e:	81 05       	cpc	r24, r1
    1f10:	91 05       	cpc	r25, r1
    1f12:	08 f4       	brcc	.+2      	; 0x1f16 <dir_next+0xbe>
    1f14:	0a c1       	rjmp	.+532    	; 0x212a <dir_next+0x2d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1f16:	8f ef       	ldi	r24, 0xFF	; 255
    1f18:	e8 16       	cp	r14, r24
    1f1a:	8f ef       	ldi	r24, 0xFF	; 255
    1f1c:	f8 06       	cpc	r15, r24
    1f1e:	8f ef       	ldi	r24, 0xFF	; 255
    1f20:	08 07       	cpc	r16, r24
    1f22:	8f ef       	ldi	r24, 0xFF	; 255
    1f24:	18 07       	cpc	r17, r24
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <dir_next+0xd2>
    1f28:	02 c1       	rjmp	.+516    	; 0x212e <dir_next+0x2d6>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    1f2a:	e8 81       	ld	r30, Y
    1f2c:	f9 81       	ldd	r31, Y+1	; 0x01
    1f2e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f30:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f32:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1f34:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1f36:	e8 16       	cp	r14, r24
    1f38:	f9 06       	cpc	r15, r25
    1f3a:	0a 07       	cpc	r16, r26
    1f3c:	1b 07       	cpc	r17, r27
    1f3e:	08 f4       	brcc	.+2      	; 0x1f42 <dir_next+0xea>
    1f40:	a6 c0       	rjmp	.+332    	; 0x208e <dir_next+0x236>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    1f42:	dd 20       	and	r13, r13
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <dir_next+0xf0>
    1f46:	ef c0       	rjmp	.+478    	; 0x2126 <dir_next+0x2ce>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    1f48:	4a 85       	ldd	r20, Y+10	; 0x0a
    1f4a:	5b 85       	ldd	r21, Y+11	; 0x0b
    1f4c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f4e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f50:	cf 01       	movw	r24, r30
    1f52:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <create_chain>
    1f56:	7b 01       	movw	r14, r22
    1f58:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1f5a:	61 15       	cp	r22, r1
    1f5c:	71 05       	cpc	r23, r1
    1f5e:	81 05       	cpc	r24, r1
    1f60:	91 05       	cpc	r25, r1
    1f62:	11 f4       	brne	.+4      	; 0x1f68 <dir_next+0x110>
    1f64:	87 e0       	ldi	r24, 0x07	; 7
    1f66:	e4 c0       	rjmp	.+456    	; 0x2130 <dir_next+0x2d8>
					if (clst == 1) return FR_INT_ERR;
    1f68:	91 e0       	ldi	r25, 0x01	; 1
    1f6a:	e9 16       	cp	r14, r25
    1f6c:	f1 04       	cpc	r15, r1
    1f6e:	01 05       	cpc	r16, r1
    1f70:	11 05       	cpc	r17, r1
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <dir_next+0x11e>
    1f74:	da c0       	rjmp	.+436    	; 0x212a <dir_next+0x2d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1f76:	af ef       	ldi	r26, 0xFF	; 255
    1f78:	ea 16       	cp	r14, r26
    1f7a:	af ef       	ldi	r26, 0xFF	; 255
    1f7c:	fa 06       	cpc	r15, r26
    1f7e:	af ef       	ldi	r26, 0xFF	; 255
    1f80:	0a 07       	cpc	r16, r26
    1f82:	af ef       	ldi	r26, 0xFF	; 255
    1f84:	1a 07       	cpc	r17, r26
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <dir_next+0x132>
    1f88:	d2 c0       	rjmp	.+420    	; 0x212e <dir_next+0x2d6>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    1f8a:	88 81       	ld	r24, Y
    1f8c:	99 81       	ldd	r25, Y+1	; 0x01
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	50 e0       	ldi	r21, 0x00	; 0
    1f92:	60 e0       	ldi	r22, 0x00	; 0
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    1f9a:	88 23       	and	r24, r24
    1f9c:	09 f0       	breq	.+2      	; 0x1fa0 <dir_next+0x148>
    1f9e:	c7 c0       	rjmp	.+398    	; 0x212e <dir_next+0x2d6>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1fa0:	e8 81       	ld	r30, Y
    1fa2:	f9 81       	ldd	r31, Y+1	; 0x01
    1fa4:	be 96       	adiw	r30, 0x2e	; 46
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	92 e0       	ldi	r25, 0x02	; 2
    1faa:	01 c0       	rjmp	.+2      	; 0x1fae <dir_next+0x156>
	while (cnt--) *d++ = (char)val;
    1fac:	11 92       	st	Z+, r1
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	bf ef       	ldi	r27, 0xFF	; 255
    1fb2:	8f 3f       	cpi	r24, 0xFF	; 255
    1fb4:	9b 07       	cpc	r25, r27
    1fb6:	d1 f7       	brne	.-12     	; 0x1fac <dir_next+0x154>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1fb8:	88 80       	ld	r8, Y
    1fba:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1fbc:	4e ef       	ldi	r20, 0xFE	; 254
    1fbe:	a4 2e       	mov	r10, r20
    1fc0:	4f ef       	ldi	r20, 0xFF	; 255
    1fc2:	b4 2e       	mov	r11, r20
    1fc4:	4f ef       	ldi	r20, 0xFF	; 255
    1fc6:	c4 2e       	mov	r12, r20
    1fc8:	4f ef       	ldi	r20, 0xFF	; 255
    1fca:	d4 2e       	mov	r13, r20
    1fcc:	ae 0c       	add	r10, r14
    1fce:	bf 1c       	adc	r11, r15
    1fd0:	c0 1e       	adc	r12, r16
    1fd2:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1fd4:	f4 01       	movw	r30, r8
    1fd6:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fd8:	93 8d       	ldd	r25, Z+27	; 0x1b
    1fda:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1fdc:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1fde:	02 97       	sbiw	r24, 0x02	; 2
    1fe0:	a1 09       	sbc	r26, r1
    1fe2:	b1 09       	sbc	r27, r1
    1fe4:	a8 16       	cp	r10, r24
    1fe6:	b9 06       	cpc	r11, r25
    1fe8:	ca 06       	cpc	r12, r26
    1fea:	db 06       	cpc	r13, r27
    1fec:	28 f0       	brcs	.+10     	; 0x1ff8 <dir_next+0x1a0>
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e0       	ldi	r20, 0x00	; 0
    1ff4:	50 e0       	ldi	r21, 0x00	; 0
    1ff6:	15 c0       	rjmp	.+42     	; 0x2022 <dir_next+0x1ca>
	return clst * fs->csize + fs->database;
    1ff8:	d4 01       	movw	r26, r8
    1ffa:	12 96       	adiw	r26, 0x02	; 2
    1ffc:	2c 91       	ld	r18, X
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e0       	ldi	r20, 0x00	; 0
    2002:	50 e0       	ldi	r21, 0x00	; 0
    2004:	c6 01       	movw	r24, r12
    2006:	b5 01       	movw	r22, r10
    2008:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <__mulsi3>
    200c:	9b 01       	movw	r18, r22
    200e:	ac 01       	movw	r20, r24
    2010:	f4 01       	movw	r30, r8
    2012:	86 a1       	ldd	r24, Z+38	; 0x26
    2014:	97 a1       	ldd	r25, Z+39	; 0x27
    2016:	a0 a5       	ldd	r26, Z+40	; 0x28
    2018:	b1 a5       	ldd	r27, Z+41	; 0x29
    201a:	28 0f       	add	r18, r24
    201c:	39 1f       	adc	r19, r25
    201e:	4a 1f       	adc	r20, r26
    2020:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    2022:	d4 01       	movw	r26, r8
    2024:	9a 96       	adiw	r26, 0x2a	; 42
    2026:	2d 93       	st	X+, r18
    2028:	3d 93       	st	X+, r19
    202a:	4d 93       	st	X+, r20
    202c:	5c 93       	st	X, r21
    202e:	9d 97       	sbiw	r26, 0x2d	; 45
    2030:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    2032:	cc 24       	eor	r12, r12
    2034:	c3 94       	inc	r12
    2036:	1a c0       	rjmp	.+52     	; 0x206c <dir_next+0x214>
    2038:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    203a:	88 81       	ld	r24, Y
    203c:	99 81       	ldd	r25, Y+1	; 0x01
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	50 e0       	ldi	r21, 0x00	; 0
    2042:	60 e0       	ldi	r22, 0x00	; 0
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    204a:	88 23       	and	r24, r24
    204c:	09 f0       	breq	.+2      	; 0x2050 <dir_next+0x1f8>
    204e:	6f c0       	rjmp	.+222    	; 0x212e <dir_next+0x2d6>
						dj->fs->winsect++;
    2050:	e8 81       	ld	r30, Y
    2052:	f9 81       	ldd	r31, Y+1	; 0x01
    2054:	82 a5       	ldd	r24, Z+42	; 0x2a
    2056:	93 a5       	ldd	r25, Z+43	; 0x2b
    2058:	a4 a5       	ldd	r26, Z+44	; 0x2c
    205a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    205c:	01 96       	adiw	r24, 0x01	; 1
    205e:	a1 1d       	adc	r26, r1
    2060:	b1 1d       	adc	r27, r1
    2062:	82 a7       	std	Z+42, r24	; 0x2a
    2064:	93 a7       	std	Z+43, r25	; 0x2b
    2066:	a4 a7       	std	Z+44, r26	; 0x2c
    2068:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    206a:	d3 94       	inc	r13
    206c:	e8 81       	ld	r30, Y
    206e:	f9 81       	ldd	r31, Y+1	; 0x01
    2070:	82 81       	ldd	r24, Z+2	; 0x02
    2072:	d8 16       	cp	r13, r24
    2074:	08 f3       	brcs	.-62     	; 0x2038 <dir_next+0x1e0>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    2076:	82 a5       	ldd	r24, Z+42	; 0x2a
    2078:	93 a5       	ldd	r25, Z+43	; 0x2b
    207a:	a4 a5       	ldd	r26, Z+44	; 0x2c
    207c:	b5 a5       	ldd	r27, Z+45	; 0x2d
    207e:	8d 19       	sub	r24, r13
    2080:	91 09       	sbc	r25, r1
    2082:	a1 09       	sbc	r26, r1
    2084:	b1 09       	sbc	r27, r1
    2086:	82 a7       	std	Z+42, r24	; 0x2a
    2088:	93 a7       	std	Z+43, r25	; 0x2b
    208a:	a4 a7       	std	Z+44, r26	; 0x2c
    208c:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    208e:	ea 86       	std	Y+10, r14	; 0x0a
    2090:	fb 86       	std	Y+11, r15	; 0x0b
    2092:	0c 87       	std	Y+12, r16	; 0x0c
    2094:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    2096:	c8 80       	ld	r12, Y
    2098:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    209a:	8e ef       	ldi	r24, 0xFE	; 254
    209c:	9f ef       	ldi	r25, 0xFF	; 255
    209e:	af ef       	ldi	r26, 0xFF	; 255
    20a0:	bf ef       	ldi	r27, 0xFF	; 255
    20a2:	e8 0e       	add	r14, r24
    20a4:	f9 1e       	adc	r15, r25
    20a6:	0a 1f       	adc	r16, r26
    20a8:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    20aa:	f6 01       	movw	r30, r12
    20ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    20ae:	93 8d       	ldd	r25, Z+27	; 0x1b
    20b0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    20b2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    20b4:	02 97       	sbiw	r24, 0x02	; 2
    20b6:	a1 09       	sbc	r26, r1
    20b8:	b1 09       	sbc	r27, r1
    20ba:	e8 16       	cp	r14, r24
    20bc:	f9 06       	cpc	r15, r25
    20be:	0a 07       	cpc	r16, r26
    20c0:	1b 07       	cpc	r17, r27
    20c2:	28 f0       	brcs	.+10     	; 0x20ce <dir_next+0x276>
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	50 e0       	ldi	r21, 0x00	; 0
    20cc:	15 c0       	rjmp	.+42     	; 0x20f8 <dir_next+0x2a0>
	return clst * fs->csize + fs->database;
    20ce:	d6 01       	movw	r26, r12
    20d0:	12 96       	adiw	r26, 0x02	; 2
    20d2:	2c 91       	ld	r18, X
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e0       	ldi	r20, 0x00	; 0
    20d8:	50 e0       	ldi	r21, 0x00	; 0
    20da:	c8 01       	movw	r24, r16
    20dc:	b7 01       	movw	r22, r14
    20de:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <__mulsi3>
    20e2:	9b 01       	movw	r18, r22
    20e4:	ac 01       	movw	r20, r24
    20e6:	f6 01       	movw	r30, r12
    20e8:	86 a1       	ldd	r24, Z+38	; 0x26
    20ea:	97 a1       	ldd	r25, Z+39	; 0x27
    20ec:	a0 a5       	ldd	r26, Z+40	; 0x28
    20ee:	b1 a5       	ldd	r27, Z+41	; 0x29
    20f0:	28 0f       	add	r18, r24
    20f2:	39 1f       	adc	r19, r25
    20f4:	4a 1f       	adc	r20, r26
    20f6:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    20f8:	2e 87       	std	Y+14, r18	; 0x0e
    20fa:	3f 87       	std	Y+15, r19	; 0x0f
    20fc:	48 8b       	std	Y+16, r20	; 0x10
    20fe:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    2100:	6c 82       	std	Y+4, r6	; 0x04
    2102:	7d 82       	std	Y+5, r7	; 0x05
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    2104:	35 e0       	ldi	r19, 0x05	; 5
    2106:	44 0c       	add	r4, r4
    2108:	55 1c       	adc	r5, r5
    210a:	3a 95       	dec	r19
    210c:	e1 f7       	brne	.-8      	; 0x2106 <dir_next+0x2ae>
    210e:	8e e2       	ldi	r24, 0x2E	; 46
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	48 0e       	add	r4, r24
    2114:	59 1e       	adc	r5, r25
    2116:	88 81       	ld	r24, Y
    2118:	99 81       	ldd	r25, Y+1	; 0x01
    211a:	84 0d       	add	r24, r4
    211c:	95 1d       	adc	r25, r5
    211e:	8a 8b       	std	Y+18, r24	; 0x12
    2120:	9b 8b       	std	Y+19, r25	; 0x13
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	05 c0       	rjmp	.+10     	; 0x2130 <dir_next+0x2d8>

	return FR_OK;
    2126:	84 e0       	ldi	r24, 0x04	; 4
    2128:	03 c0       	rjmp	.+6      	; 0x2130 <dir_next+0x2d8>
    212a:	82 e0       	ldi	r24, 0x02	; 2
    212c:	01 c0       	rjmp	.+2      	; 0x2130 <dir_next+0x2d8>
    212e:	81 e0       	ldi	r24, 0x01	; 1
}
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	1f 91       	pop	r17
    2136:	0f 91       	pop	r16
    2138:	ff 90       	pop	r15
    213a:	ef 90       	pop	r14
    213c:	df 90       	pop	r13
    213e:	cf 90       	pop	r12
    2140:	bf 90       	pop	r11
    2142:	af 90       	pop	r10
    2144:	9f 90       	pop	r9
    2146:	8f 90       	pop	r8
    2148:	7f 90       	pop	r7
    214a:	6f 90       	pop	r6
    214c:	5f 90       	pop	r5
    214e:	4f 90       	pop	r4
    2150:	08 95       	ret

00002152 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	ec 01       	movw	r28, r24
    2158:	94 e0       	ldi	r25, 0x04	; 4
    215a:	1a c0       	rjmp	.+52     	; 0x2190 <dir_read+0x3e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    215c:	88 81       	ld	r24, Y
    215e:	99 81       	ldd	r25, Y+1	; 0x01
    2160:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    2164:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    2166:	88 23       	and	r24, r24
    2168:	f1 f4       	brne	.+60     	; 0x21a6 <dir_read+0x54>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    216a:	ea 89       	ldd	r30, Y+18	; 0x12
    216c:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    216e:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2170:	88 23       	and	r24, r24
    2172:	09 f1       	breq	.+66     	; 0x21b6 <dir_read+0x64>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    2174:	85 3e       	cpi	r24, 0xE5	; 229
    2176:	29 f0       	breq	.+10     	; 0x2182 <dir_read+0x30>
    2178:	8e 32       	cpi	r24, 0x2E	; 46
    217a:	19 f0       	breq	.+6      	; 0x2182 <dir_read+0x30>
    217c:	83 85       	ldd	r24, Z+11	; 0x0b
    217e:	83 ff       	sbrs	r24, 3
    2180:	16 c0       	rjmp	.+44     	; 0x21ae <dir_read+0x5c>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    2182:	ce 01       	movw	r24, r28
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <dir_next>
    218a:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    218c:	88 23       	and	r24, r24
    218e:	59 f4       	brne	.+22     	; 0x21a6 <dir_read+0x54>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    2190:	4e 85       	ldd	r20, Y+14	; 0x0e
    2192:	5f 85       	ldd	r21, Y+15	; 0x0f
    2194:	68 89       	ldd	r22, Y+16	; 0x10
    2196:	79 89       	ldd	r23, Y+17	; 0x11
    2198:	41 15       	cp	r20, r1
    219a:	51 05       	cpc	r21, r1
    219c:	61 05       	cpc	r22, r1
    219e:	71 05       	cpc	r23, r1
    21a0:	e9 f6       	brne	.-70     	; 0x215c <dir_read+0xa>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    21a2:	99 23       	and	r25, r25
    21a4:	21 f0       	breq	.+8      	; 0x21ae <dir_read+0x5c>
    21a6:	1e 86       	std	Y+14, r1	; 0x0e
    21a8:	1f 86       	std	Y+15, r1	; 0x0f
    21aa:	18 8a       	std	Y+16, r1	; 0x10
    21ac:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    21ae:	89 2f       	mov	r24, r25
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	08 95       	ret
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    21b6:	94 e0       	ldi	r25, 0x04	; 4
    21b8:	f6 cf       	rjmp	.-20     	; 0x21a6 <dir_read+0x54>

000021ba <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    21ba:	cf 93       	push	r28
    21bc:	df 93       	push	r29
    21be:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	70 e0       	ldi	r23, 0x00	; 0
    21c4:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <dir_seek>
    21c8:	48 2f       	mov	r20, r24
	if (res == FR_OK) {
    21ca:	88 23       	and	r24, r24
    21cc:	e9 f5       	brne	.+122    	; 0x2248 <dir_register+0x8e>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    21ce:	4e 85       	ldd	r20, Y+14	; 0x0e
    21d0:	5f 85       	ldd	r21, Y+15	; 0x0f
    21d2:	68 89       	ldd	r22, Y+16	; 0x10
    21d4:	79 89       	ldd	r23, Y+17	; 0x11
    21d6:	88 81       	ld	r24, Y
    21d8:	99 81       	ldd	r25, Y+1	; 0x01
    21da:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    21de:	48 2f       	mov	r20, r24
			if (res != FR_OK) break;
    21e0:	88 23       	and	r24, r24
    21e2:	91 f5       	brne	.+100    	; 0x2248 <dir_register+0x8e>
			c = *dj->dir;
    21e4:	ea 89       	ldd	r30, Y+18	; 0x12
    21e6:	fb 89       	ldd	r31, Y+19	; 0x13
    21e8:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    21ea:	e5 3e       	cpi	r30, 0xE5	; 229
    21ec:	89 f1       	breq	.+98     	; 0x2250 <dir_register+0x96>
    21ee:	ee 23       	and	r30, r30
    21f0:	79 f1       	breq	.+94     	; 0x2250 <dir_register+0x96>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    21f2:	ce 01       	movw	r24, r28
    21f4:	61 e0       	ldi	r22, 0x01	; 1
    21f6:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <dir_next>
    21fa:	e6 cf       	rjmp	.-52     	; 0x21c8 <dir_register+0xe>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    21fc:	6a 89       	ldd	r22, Y+18	; 0x12
    21fe:	7b 89       	ldd	r23, Y+19	; 0x13
    2200:	fb 01       	movw	r30, r22
    2202:	80 e2       	ldi	r24, 0x20	; 32
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	01 c0       	rjmp	.+2      	; 0x220a <dir_register+0x50>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2208:	11 92       	st	Z+, r1
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	2f ef       	ldi	r18, 0xFF	; 255
    220e:	8f 3f       	cpi	r24, 0xFF	; 255
    2210:	92 07       	cpc	r25, r18
    2212:	d1 f7       	brne	.-12     	; 0x2208 <dir_register+0x4e>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    2214:	8c 89       	ldd	r24, Y+20	; 0x14
    2216:	9d 89       	ldd	r25, Y+21	; 0x15
    2218:	9c 01       	movw	r18, r24
    221a:	d9 01       	movw	r26, r18
    221c:	fb 01       	movw	r30, r22
    221e:	2b e0       	ldi	r18, 0x0B	; 11
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <dir_register+0x6e>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    2224:	8d 91       	ld	r24, X+
    2226:	81 93       	st	Z+, r24
    2228:	21 50       	subi	r18, 0x01	; 1
    222a:	30 40       	sbci	r19, 0x00	; 0
    222c:	8f ef       	ldi	r24, 0xFF	; 255
    222e:	2f 3f       	cpi	r18, 0xFF	; 255
    2230:	38 07       	cpc	r19, r24
    2232:	c1 f7       	brne	.-16     	; 0x2224 <dir_register+0x6a>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    2234:	ec 89       	ldd	r30, Y+20	; 0x14
    2236:	fd 89       	ldd	r31, Y+21	; 0x15
    2238:	83 85       	ldd	r24, Z+11	; 0x0b
    223a:	88 71       	andi	r24, 0x18	; 24
    223c:	fb 01       	movw	r30, r22
    223e:	84 87       	std	Z+12, r24	; 0x0c
			dj->fs->wflag = 1;
    2240:	e8 81       	ld	r30, Y
    2242:	f9 81       	ldd	r31, Y+1	; 0x01
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    2248:	84 2f       	mov	r24, r20
    224a:	df 91       	pop	r29
    224c:	cf 91       	pop	r28
    224e:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    2250:	4e 85       	ldd	r20, Y+14	; 0x0e
    2252:	5f 85       	ldd	r21, Y+15	; 0x0f
    2254:	68 89       	ldd	r22, Y+16	; 0x10
    2256:	79 89       	ldd	r23, Y+17	; 0x11
    2258:	88 81       	ld	r24, Y
    225a:	99 81       	ldd	r25, Y+1	; 0x01
    225c:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    2260:	48 2f       	mov	r20, r24
		if (res == FR_OK) {
    2262:	88 23       	and	r24, r24
    2264:	59 f2       	breq	.-106    	; 0x21fc <dir_register+0x42>
    2266:	f0 cf       	rjmp	.-32     	; 0x2248 <dir_register+0x8e>

00002268 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    2268:	cf 93       	push	r28
    226a:	df 93       	push	r29
    226c:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
    226e:	6c 81       	ldd	r22, Y+4	; 0x04
    2270:	7d 81       	ldd	r23, Y+5	; 0x05
    2272:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <dir_seek>
    2276:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2278:	88 23       	and	r24, r24
    227a:	99 f4       	brne	.+38     	; 0x22a2 <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    227c:	4e 85       	ldd	r20, Y+14	; 0x0e
    227e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2280:	68 89       	ldd	r22, Y+16	; 0x10
    2282:	79 89       	ldd	r23, Y+17	; 0x11
    2284:	88 81       	ld	r24, Y
    2286:	99 81       	ldd	r25, Y+1	; 0x01
    2288:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    228c:	98 2f       	mov	r25, r24
		if (res == FR_OK) {
    228e:	88 23       	and	r24, r24
    2290:	41 f4       	brne	.+16     	; 0x22a2 <dir_remove+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    2292:	ea 89       	ldd	r30, Y+18	; 0x12
    2294:	fb 89       	ldd	r31, Y+19	; 0x13
    2296:	85 ee       	ldi	r24, 0xE5	; 229
    2298:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    229a:	e8 81       	ld	r30, Y
    229c:	f9 81       	ldd	r31, Y+1	; 0x01
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    22a2:	89 2f       	mov	r24, r25
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	08 95       	ret

000022aa <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    22aa:	ef 92       	push	r14
    22ac:	ff 92       	push	r15
    22ae:	0f 93       	push	r16
    22b0:	1f 93       	push	r17
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	fc 01       	movw	r30, r24
    22b8:	7b 01       	movw	r14, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    22ba:	eb 01       	movw	r28, r22
    22bc:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    22be:	86 85       	ldd	r24, Z+14	; 0x0e
    22c0:	97 85       	ldd	r25, Z+15	; 0x0f
    22c2:	a0 89       	ldd	r26, Z+16	; 0x10
    22c4:	b1 89       	ldd	r27, Z+17	; 0x11
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	a1 05       	cpc	r26, r1
    22ca:	b1 05       	cpc	r27, r1
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <get_fileinfo+0x26>
    22ce:	71 c0       	rjmp	.+226    	; 0x23b2 <get_fileinfo+0x108>
		dir = dj->dir;
    22d0:	62 89       	ldd	r22, Z+18	; 0x12
    22d2:	73 89       	ldd	r23, Z+19	; 0x13
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	90 e0       	ldi	r25, 0x00	; 0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    22d8:	fb 01       	movw	r30, r22
    22da:	e8 0f       	add	r30, r24
    22dc:	f9 1f       	adc	r31, r25
    22de:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    22e0:	e0 32       	cpi	r30, 0x20	; 32
    22e2:	41 f0       	breq	.+16     	; 0x22f4 <get_fileinfo+0x4a>
			if (c == 0x05) c = 0xE5;
    22e4:	e5 30       	cpi	r30, 0x05	; 5
    22e6:	09 f4       	brne	.+2      	; 0x22ea <get_fileinfo+0x40>
    22e8:	e5 ee       	ldi	r30, 0xE5	; 229
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
    22ea:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    22ec:	01 96       	adiw	r24, 0x01	; 1
    22ee:	88 30       	cpi	r24, 0x08	; 8
    22f0:	91 05       	cpc	r25, r1
    22f2:	91 f7       	brne	.-28     	; 0x22d8 <get_fileinfo+0x2e>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    22f4:	db 01       	movw	r26, r22
    22f6:	18 96       	adiw	r26, 0x08	; 8
    22f8:	8c 91       	ld	r24, X
    22fa:	80 32       	cpi	r24, 0x20	; 32
    22fc:	11 f4       	brne	.+4      	; 0x2302 <get_fileinfo+0x58>
    22fe:	8e 01       	movw	r16, r28
    2300:	12 c0       	rjmp	.+36     	; 0x2326 <get_fileinfo+0x7c>
			*p++ = '.';
    2302:	8e e2       	ldi	r24, 0x2E	; 46
    2304:	fe 01       	movw	r30, r28
    2306:	81 93       	st	Z+, r24
    2308:	8f 01       	movw	r16, r30
    230a:	fb 01       	movw	r30, r22
			for (i = 8; i < 11; i++) {
    230c:	9e 01       	movw	r18, r28
    230e:	2c 5f       	subi	r18, 0xFC	; 252
    2310:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
    2312:	80 85       	ldd	r24, Z+8	; 0x08
				if (c == ' ') break;
    2314:	80 32       	cpi	r24, 0x20	; 32
    2316:	39 f0       	breq	.+14     	; 0x2326 <get_fileinfo+0x7c>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
    2318:	d8 01       	movw	r26, r16
    231a:	8d 93       	st	X+, r24
    231c:	8d 01       	movw	r16, r26
    231e:	31 96       	adiw	r30, 0x01	; 1
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    2320:	a2 17       	cp	r26, r18
    2322:	b3 07       	cpc	r27, r19
    2324:	b1 f7       	brne	.-20     	; 0x2312 <get_fileinfo+0x68>
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    2326:	fb 01       	movw	r30, r22
    2328:	83 85       	ldd	r24, Z+11	; 0x0b
    232a:	d7 01       	movw	r26, r14
    232c:	18 96       	adiw	r26, 0x08	; 8
    232e:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    2330:	27 8d       	ldd	r18, Z+31	; 0x1f
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e0       	ldi	r20, 0x00	; 0
    2336:	50 e0       	ldi	r21, 0x00	; 0
    2338:	52 2f       	mov	r21, r18
    233a:	44 27       	eor	r20, r20
    233c:	33 27       	eor	r19, r19
    233e:	22 27       	eor	r18, r18
    2340:	86 8d       	ldd	r24, Z+30	; 0x1e
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	a0 e0       	ldi	r26, 0x00	; 0
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	dc 01       	movw	r26, r24
    234a:	99 27       	eor	r25, r25
    234c:	88 27       	eor	r24, r24
    234e:	28 2b       	or	r18, r24
    2350:	39 2b       	or	r19, r25
    2352:	4a 2b       	or	r20, r26
    2354:	5b 2b       	or	r21, r27
    2356:	84 8d       	ldd	r24, Z+28	; 0x1c
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	a0 e0       	ldi	r26, 0x00	; 0
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	28 2b       	or	r18, r24
    2360:	39 2b       	or	r19, r25
    2362:	4a 2b       	or	r20, r26
    2364:	5b 2b       	or	r21, r27
    2366:	95 8d       	ldd	r25, Z+29	; 0x1d
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	a0 e0       	ldi	r26, 0x00	; 0
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	28 2b       	or	r18, r24
    2370:	39 2b       	or	r19, r25
    2372:	4a 2b       	or	r20, r26
    2374:	5b 2b       	or	r21, r27
    2376:	f7 01       	movw	r30, r14
    2378:	20 83       	st	Z, r18
    237a:	31 83       	std	Z+1, r19	; 0x01
    237c:	42 83       	std	Z+2, r20	; 0x02
    237e:	53 83       	std	Z+3, r21	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    2380:	db 01       	movw	r26, r22
    2382:	59 96       	adiw	r26, 0x19	; 25
    2384:	9c 91       	ld	r25, X
    2386:	59 97       	sbiw	r26, 0x19	; 25
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	58 96       	adiw	r26, 0x18	; 24
    238c:	2c 91       	ld	r18, X
    238e:	58 97       	sbiw	r26, 0x18	; 24
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	82 2b       	or	r24, r18
    2394:	93 2b       	or	r25, r19
    2396:	84 83       	std	Z+4, r24	; 0x04
    2398:	95 83       	std	Z+5, r25	; 0x05
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    239a:	57 96       	adiw	r26, 0x17	; 23
    239c:	9c 91       	ld	r25, X
    239e:	57 97       	sbiw	r26, 0x17	; 23
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	56 96       	adiw	r26, 0x16	; 22
    23a4:	2c 91       	ld	r18, X
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	82 2b       	or	r24, r18
    23aa:	93 2b       	or	r25, r19
    23ac:	86 83       	std	Z+6, r24	; 0x06
    23ae:	97 83       	std	Z+7, r25	; 0x07
    23b0:	e8 01       	movw	r28, r16
	}
	*p = 0;
    23b2:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	1f 91       	pop	r17
    23ba:	0f 91       	pop	r16
    23bc:	ff 90       	pop	r15
    23be:	ef 90       	pop	r14
    23c0:	08 95       	ret

000023c2 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    23c2:	5f 92       	push	r5
    23c4:	6f 92       	push	r6
    23c6:	7f 92       	push	r7
    23c8:	8f 92       	push	r8
    23ca:	9f 92       	push	r9
    23cc:	af 92       	push	r10
    23ce:	bf 92       	push	r11
    23d0:	cf 92       	push	r12
    23d2:	df 92       	push	r13
    23d4:	ef 92       	push	r14
    23d6:	ff 92       	push	r15
    23d8:	0f 93       	push	r16
    23da:	1f 93       	push	r17
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	ec 01       	movw	r28, r24
    23e2:	7b 01       	movw	r14, r22
    23e4:	03 c0       	rjmp	.+6      	; 0x23ec <follow_path+0x2a>
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    23e6:	08 94       	sec
    23e8:	e1 1c       	adc	r14, r1
    23ea:	f1 1c       	adc	r15, r1
    23ec:	f7 01       	movw	r30, r14
    23ee:	80 81       	ld	r24, Z
    23f0:	80 32       	cpi	r24, 0x20	; 32
    23f2:	c9 f3       	breq	.-14     	; 0x23e6 <follow_path+0x24>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    23f4:	8f 32       	cpi	r24, 0x2F	; 47
    23f6:	11 f0       	breq	.+4      	; 0x23fc <follow_path+0x3a>
    23f8:	8c 35       	cpi	r24, 0x5C	; 92
    23fa:	19 f4       	brne	.+6      	; 0x2402 <follow_path+0x40>
		path++;
    23fc:	08 94       	sec
    23fe:	e1 1c       	adc	r14, r1
    2400:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Start from the root dir */
    2402:	1e 82       	std	Y+6, r1	; 0x06
    2404:	1f 82       	std	Y+7, r1	; 0x07
    2406:	18 86       	std	Y+8, r1	; 0x08
    2408:	19 86       	std	Y+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    240a:	f7 01       	movw	r30, r14
    240c:	80 81       	ld	r24, Z
    240e:	80 32       	cpi	r24, 0x20	; 32
    2410:	40 f4       	brcc	.+16     	; 0x2422 <follow_path+0x60>
		res = dir_seek(dj, 0);
    2412:	ce 01       	movw	r24, r28
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	70 e0       	ldi	r23, 0x00	; 0
    2418:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <dir_seek>
		dj->dir = NULL;
    241c:	1a 8a       	std	Y+18, r1	; 0x12
    241e:	1b 8a       	std	Y+19, r1	; 0x13
    2420:	13 c1       	rjmp	.+550    	; 0x2648 <follow_path+0x286>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2422:	00 e2       	ldi	r16, 0x20	; 32
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    2424:	45 e0       	ldi	r20, 0x05	; 5
    2426:	54 2e       	mov	r5, r20
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    2428:	ac 89       	ldd	r26, Y+20	; 0x14
    242a:	bd 89       	ldd	r27, Y+21	; 0x15
    242c:	fd 01       	movw	r30, r26
    242e:	8b e0       	ldi	r24, 0x0B	; 11
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	01 c0       	rjmp	.+2      	; 0x2436 <follow_path+0x74>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2434:	01 93       	st	Z+, r16
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	2f ef       	ldi	r18, 0xFF	; 255
    243a:	8f 3f       	cpi	r24, 0xFF	; 255
    243c:	92 07       	cpc	r25, r18
    243e:	d1 f7       	brne	.-12     	; 0x2434 <follow_path+0x72>
    2440:	40 e0       	ldi	r20, 0x00	; 0
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	cc 24       	eor	r12, r12
    2446:	dd 24       	eor	r13, r13
    2448:	38 e0       	ldi	r19, 0x08	; 8
    244a:	a3 2e       	mov	r10, r19
    244c:	b1 2c       	mov	r11, r1
    244e:	10 e0       	ldi	r17, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    2450:	f7 01       	movw	r30, r14
    2452:	ec 0d       	add	r30, r12
    2454:	fd 1d       	adc	r31, r13
    2456:	20 81       	ld	r18, Z
    2458:	08 94       	sec
    245a:	c1 1c       	adc	r12, r1
    245c:	d1 1c       	adc	r13, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    245e:	21 32       	cpi	r18, 0x21	; 33
    2460:	08 f4       	brcc	.+2      	; 0x2464 <follow_path+0xa2>
    2462:	66 c0       	rjmp	.+204    	; 0x2530 <follow_path+0x16e>
    2464:	2f 32       	cpi	r18, 0x2F	; 47
    2466:	09 f4       	brne	.+2      	; 0x246a <follow_path+0xa8>
    2468:	ff c0       	rjmp	.+510    	; 0x2668 <follow_path+0x2a6>
    246a:	2c 35       	cpi	r18, 0x5C	; 92
    246c:	09 f4       	brne	.+2      	; 0x2470 <follow_path+0xae>
    246e:	fc c0       	rjmp	.+504    	; 0x2668 <follow_path+0x2a6>
		if (c == '.' || i >= ni) {
    2470:	2e 32       	cpi	r18, 0x2E	; 46
    2472:	19 f0       	breq	.+6      	; 0x247a <follow_path+0xb8>
    2474:	4a 15       	cp	r20, r10
    2476:	5b 05       	cpc	r21, r11
    2478:	84 f0       	brlt	.+32     	; 0x249a <follow_path+0xd8>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    247a:	88 e0       	ldi	r24, 0x08	; 8
    247c:	a8 16       	cp	r10, r24
    247e:	b1 04       	cpc	r11, r1
    2480:	09 f0       	breq	.+2      	; 0x2484 <follow_path+0xc2>
    2482:	dd c0       	rjmp	.+442    	; 0x263e <follow_path+0x27c>
    2484:	2e 32       	cpi	r18, 0x2E	; 46
    2486:	09 f0       	breq	.+2      	; 0x248a <follow_path+0xc8>
    2488:	da c0       	rjmp	.+436    	; 0x263e <follow_path+0x27c>
			i = 8; ni = 11;
			b <<= 2; continue;
    248a:	11 0f       	add	r17, r17
    248c:	11 0f       	add	r17, r17
    248e:	48 e0       	ldi	r20, 0x08	; 8
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	2b e0       	ldi	r18, 0x0B	; 11
    2494:	a2 2e       	mov	r10, r18
    2496:	b1 2c       	mov	r11, r1
    2498:	db cf       	rjmp	.-74     	; 0x2450 <follow_path+0x8e>
		}
		if (c >= 0x80) {				/* Extended char */
    249a:	27 fd       	sbrc	r18, 7
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    249c:	13 60       	ori	r17, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    249e:	82 2f       	mov	r24, r18
    24a0:	81 58       	subi	r24, 0x81	; 129
    24a2:	8f 31       	cpi	r24, 0x1F	; 31
    24a4:	18 f0       	brcs	.+6      	; 0x24ac <follow_path+0xea>
    24a6:	8f 55       	subi	r24, 0x5F	; 95
    24a8:	8d 31       	cpi	r24, 0x1D	; 29
    24aa:	08 f5       	brcc	.+66     	; 0x24ee <follow_path+0x12c>
			d = p[si++];				/* Get 2nd byte */
    24ac:	f7 01       	movw	r30, r14
    24ae:	ec 0d       	add	r30, r12
    24b0:	fd 1d       	adc	r31, r13
    24b2:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    24b4:	83 2f       	mov	r24, r19
    24b6:	80 54       	subi	r24, 0x40	; 64
    24b8:	8f 33       	cpi	r24, 0x3F	; 63
    24ba:	20 f0       	brcs	.+8      	; 0x24c4 <follow_path+0x102>
    24bc:	80 54       	subi	r24, 0x40	; 64
    24be:	8d 37       	cpi	r24, 0x7D	; 125
    24c0:	08 f0       	brcs	.+2      	; 0x24c4 <follow_path+0x102>
    24c2:	bd c0       	rjmp	.+378    	; 0x263e <follow_path+0x27c>
    24c4:	c5 01       	movw	r24, r10
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	48 17       	cp	r20, r24
    24ca:	59 07       	cpc	r21, r25
    24cc:	0c f0       	brlt	.+2      	; 0x24d0 <follow_path+0x10e>
    24ce:	b7 c0       	rjmp	.+366    	; 0x263e <follow_path+0x27c>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    24d0:	08 94       	sec
    24d2:	c1 1c       	adc	r12, r1
    24d4:	d1 1c       	adc	r13, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    24d6:	fd 01       	movw	r30, r26
    24d8:	e4 0f       	add	r30, r20
    24da:	f5 1f       	adc	r31, r21
    24dc:	20 83       	st	Z, r18
    24de:	ca 01       	movw	r24, r20
    24e0:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    24e2:	fd 01       	movw	r30, r26
    24e4:	e8 0f       	add	r30, r24
    24e6:	f9 1f       	adc	r31, r25
    24e8:	30 83       	st	Z, r19
    24ea:	ac 01       	movw	r20, r24
    24ec:	1e c0       	rjmp	.+60     	; 0x252a <follow_path+0x168>
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    24ee:	62 2f       	mov	r22, r18
    24f0:	70 e0       	ldi	r23, 0x00	; 0
    24f2:	e0 e0       	ldi	r30, 0x00	; 0
    24f4:	f0 e2       	ldi	r31, 0x20	; 32
    24f6:	01 c0       	rjmp	.+2      	; 0x24fa <follow_path+0x138>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    24f8:	31 96       	adiw	r30, 0x01	; 1
    24fa:	80 81       	ld	r24, Z
    24fc:	88 23       	and	r24, r24
    24fe:	29 f0       	breq	.+10     	; 0x250a <follow_path+0x148>
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	86 17       	cp	r24, r22
    2504:	97 07       	cpc	r25, r23
    2506:	c1 f7       	brne	.-16     	; 0x24f8 <follow_path+0x136>
    2508:	9a c0       	rjmp	.+308    	; 0x263e <follow_path+0x27c>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    250a:	82 2f       	mov	r24, r18
    250c:	81 54       	subi	r24, 0x41	; 65
    250e:	8a 31       	cpi	r24, 0x1A	; 26
    2510:	10 f4       	brcc	.+4      	; 0x2516 <follow_path+0x154>
				b |= 2;
    2512:	12 60       	ori	r17, 0x02	; 2
    2514:	06 c0       	rjmp	.+12     	; 0x2522 <follow_path+0x160>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    2516:	82 2f       	mov	r24, r18
    2518:	81 56       	subi	r24, 0x61	; 97
    251a:	8a 31       	cpi	r24, 0x1A	; 26
    251c:	10 f4       	brcc	.+4      	; 0x2522 <follow_path+0x160>
					b |= 1; c -= 0x20;
    251e:	11 60       	ori	r17, 0x01	; 1
    2520:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    2522:	fd 01       	movw	r30, r26
    2524:	e4 0f       	add	r30, r20
    2526:	f5 1f       	adc	r31, r21
    2528:	20 83       	st	Z, r18
    252a:	4f 5f       	subi	r20, 0xFF	; 255
    252c:	5f 4f       	sbci	r21, 0xFF	; 255
    252e:	90 cf       	rjmp	.-224    	; 0x2450 <follow_path+0x8e>
    2530:	91 2f       	mov	r25, r17
    2532:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    2534:	45 2b       	or	r20, r21
    2536:	09 f4       	brne	.+2      	; 0x253a <follow_path+0x178>
    2538:	82 c0       	rjmp	.+260    	; 0x263e <follow_path+0x27c>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    253a:	8c 91       	ld	r24, X
    253c:	85 3e       	cpi	r24, 0xE5	; 229
    253e:	09 f4       	brne	.+2      	; 0x2542 <follow_path+0x180>
    2540:	5c 92       	st	X, r5

	if (ni == 8) b <<= 2;
    2542:	e8 e0       	ldi	r30, 0x08	; 8
    2544:	ae 16       	cp	r10, r30
    2546:	b1 04       	cpc	r11, r1
    2548:	19 f4       	brne	.+6      	; 0x2550 <follow_path+0x18e>
    254a:	91 2f       	mov	r25, r17
    254c:	99 0f       	add	r25, r25
    254e:	99 0f       	add	r25, r25
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    2550:	29 2f       	mov	r18, r25
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	c9 01       	movw	r24, r18
    2556:	83 70       	andi	r24, 0x03	; 3
    2558:	90 70       	andi	r25, 0x00	; 0
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	09 f4       	brne	.+2      	; 0x2560 <follow_path+0x19e>
    255e:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    2560:	2c 70       	andi	r18, 0x0C	; 12
    2562:	30 70       	andi	r19, 0x00	; 0
    2564:	24 30       	cpi	r18, 0x04	; 4
    2566:	31 05       	cpc	r19, r1
    2568:	09 f4       	brne	.+2      	; 0x256c <follow_path+0x1aa>
    256a:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    256c:	1b 96       	adiw	r26, 0x0b	; 11
    256e:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    2570:	ce 01       	movw	r24, r28
    2572:	60 e0       	ldi	r22, 0x00	; 0
    2574:	70 e0       	ldi	r23, 0x00	; 0
    2576:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <dir_seek>
    257a:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    257c:	88 23       	and	r24, r24
    257e:	71 f5       	brne	.+92     	; 0x25dc <follow_path+0x21a>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    2580:	4e 85       	ldd	r20, Y+14	; 0x0e
    2582:	5f 85       	ldd	r21, Y+15	; 0x0f
    2584:	68 89       	ldd	r22, Y+16	; 0x10
    2586:	79 89       	ldd	r23, Y+17	; 0x11
    2588:	88 81       	ld	r24, Y
    258a:	99 81       	ldd	r25, Y+1	; 0x01
    258c:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    2590:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    2592:	88 23       	and	r24, r24
    2594:	19 f5       	brne	.+70     	; 0x25dc <follow_path+0x21a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2596:	ea 89       	ldd	r30, Y+18	; 0x12
    2598:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    259a:	80 81       	ld	r24, Z
    259c:	88 23       	and	r24, r24
    259e:	11 f4       	brne	.+4      	; 0x25a4 <follow_path+0x1e2>
    25a0:	44 e0       	ldi	r20, 0x04	; 4
    25a2:	1c c0       	rjmp	.+56     	; 0x25dc <follow_path+0x21a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    25a4:	83 85       	ldd	r24, Z+11	; 0x0b
    25a6:	83 fd       	sbrc	r24, 3
    25a8:	14 c0       	rjmp	.+40     	; 0x25d2 <follow_path+0x210>
    25aa:	df 01       	movw	r26, r30
    25ac:	8c 89       	ldd	r24, Y+20	; 0x14
    25ae:	9d 89       	ldd	r25, Y+21	; 0x15
    25b0:	9c 01       	movw	r18, r24
    25b2:	f9 01       	movw	r30, r18
    25b4:	2b e0       	ldi	r18, 0x0B	; 11
    25b6:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    25b8:	21 50       	subi	r18, 0x01	; 1
    25ba:	30 40       	sbci	r19, 0x00	; 0
    25bc:	8f ef       	ldi	r24, 0xFF	; 255
    25be:	2f 3f       	cpi	r18, 0xFF	; 255
    25c0:	38 07       	cpc	r19, r24
    25c2:	61 f0       	breq	.+24     	; 0x25dc <follow_path+0x21a>
    25c4:	9c 91       	ld	r25, X
    25c6:	80 81       	ld	r24, Z
    25c8:	98 17       	cp	r25, r24
    25ca:	19 f4       	brne	.+6      	; 0x25d2 <follow_path+0x210>
    25cc:	11 96       	adiw	r26, 0x01	; 1
    25ce:	31 96       	adiw	r30, 0x01	; 1
    25d0:	f3 cf       	rjmp	.-26     	; 0x25b8 <follow_path+0x1f6>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    25d2:	ce 01       	movw	r24, r28
    25d4:	60 e0       	ldi	r22, 0x00	; 0
    25d6:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <dir_next>
    25da:	cf cf       	rjmp	.-98     	; 0x257a <follow_path+0x1b8>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    25dc:	ec 89       	ldd	r30, Y+20	; 0x14
    25de:	fd 89       	ldd	r31, Y+21	; 0x15
    25e0:	93 85       	ldd	r25, Z+11	; 0x0b
    25e2:	94 70       	andi	r25, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    25e4:	44 23       	and	r20, r20
    25e6:	31 f0       	breq	.+12     	; 0x25f4 <follow_path+0x232>
    25e8:	84 2f       	mov	r24, r20
				if (res == FR_NO_FILE && !last)
    25ea:	44 30       	cpi	r20, 0x04	; 4
    25ec:	51 f5       	brne	.+84     	; 0x2642 <follow_path+0x280>
    25ee:	99 23       	and	r25, r25
    25f0:	51 f1       	breq	.+84     	; 0x2646 <follow_path+0x284>
    25f2:	2a c0       	rjmp	.+84     	; 0x2648 <follow_path+0x286>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    25f4:	99 23       	and	r25, r25
    25f6:	29 f5       	brne	.+74     	; 0x2642 <follow_path+0x280>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    25f8:	ea 89       	ldd	r30, Y+18	; 0x12
    25fa:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    25fc:	83 85       	ldd	r24, Z+11	; 0x0b
    25fe:	84 ff       	sbrs	r24, 4
    2600:	22 c0       	rjmp	.+68     	; 0x2646 <follow_path+0x284>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    2602:	ec 0c       	add	r14, r12
    2604:	fd 1c       	adc	r15, r13
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    2606:	75 88       	ldd	r7, Z+21	; 0x15
    2608:	66 24       	eor	r6, r6
    260a:	24 89       	ldd	r18, Z+20	; 0x14
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	26 29       	or	r18, r6
    2610:	37 29       	or	r19, r7
    2612:	40 e0       	ldi	r20, 0x00	; 0
    2614:	50 e0       	ldi	r21, 0x00	; 0
    2616:	a9 01       	movw	r20, r18
    2618:	33 27       	eor	r19, r19
    261a:	22 27       	eor	r18, r18
    261c:	93 8c       	ldd	r9, Z+27	; 0x1b
    261e:	88 24       	eor	r8, r8
    2620:	82 8d       	ldd	r24, Z+26	; 0x1a
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	88 29       	or	r24, r8
    2626:	99 29       	or	r25, r9
    2628:	a0 e0       	ldi	r26, 0x00	; 0
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	28 2b       	or	r18, r24
    262e:	39 2b       	or	r19, r25
    2630:	4a 2b       	or	r20, r26
    2632:	5b 2b       	or	r21, r27
    2634:	2e 83       	std	Y+6, r18	; 0x06
    2636:	3f 83       	std	Y+7, r19	; 0x07
    2638:	48 87       	std	Y+8, r20	; 0x08
    263a:	59 87       	std	Y+9, r21	; 0x09
    263c:	f5 ce       	rjmp	.-534    	; 0x2428 <follow_path+0x66>
		}
    263e:	86 e0       	ldi	r24, 0x06	; 6
    2640:	03 c0       	rjmp	.+6      	; 0x2648 <follow_path+0x286>
    2642:	84 2f       	mov	r24, r20
    2644:	01 c0       	rjmp	.+2      	; 0x2648 <follow_path+0x286>
    2646:	85 e0       	ldi	r24, 0x05	; 5
	}

	return res;
}
    2648:	df 91       	pop	r29
    264a:	cf 91       	pop	r28
    264c:	1f 91       	pop	r17
    264e:	0f 91       	pop	r16
    2650:	ff 90       	pop	r15
    2652:	ef 90       	pop	r14
    2654:	df 90       	pop	r13
    2656:	cf 90       	pop	r12
    2658:	bf 90       	pop	r11
    265a:	af 90       	pop	r10
    265c:	9f 90       	pop	r9
    265e:	8f 90       	pop	r8
    2660:	7f 90       	pop	r7
    2662:	6f 90       	pop	r6
    2664:	5f 90       	pop	r5
    2666:	08 95       	ret
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
    2668:	91 2f       	mov	r25, r17
    266a:	60 e0       	ldi	r22, 0x00	; 0
    266c:	63 cf       	rjmp	.-314    	; 0x2534 <follow_path+0x172>

0000266e <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    266e:	0f 93       	push	r16
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	ec 01       	movw	r28, r24
    2676:	9a 01       	movw	r18, r20
    2678:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    267a:	bc 01       	movw	r22, r24
    267c:	62 5d       	subi	r22, 0xD2	; 210
    267e:	7f 4f       	sbci	r23, 0xFF	; 255
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	01 e0       	ldi	r16, 0x01	; 1
    2684:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <disk_read>
    2688:	88 23       	and	r24, r24
    268a:	11 f0       	breq	.+4      	; 0x2690 <check_fs+0x22>
    268c:	63 e0       	ldi	r22, 0x03	; 3
    268e:	6d c0       	rjmp	.+218    	; 0x276a <check_fs+0xfc>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    2690:	c3 5d       	subi	r28, 0xD3	; 211
    2692:	dd 4f       	sbci	r29, 0xFD	; 253
    2694:	98 81       	ld	r25, Y
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	2a 91       	ld	r18, -Y
    269a:	cc 52       	subi	r28, 0x2C	; 44
    269c:	d2 40       	sbci	r29, 0x02	; 2
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	82 2b       	or	r24, r18
    26a2:	93 2b       	or	r25, r19
    26a4:	85 55       	subi	r24, 0x55	; 85
    26a6:	9a 4a       	sbci	r25, 0xAA	; 170
    26a8:	11 f0       	breq	.+4      	; 0x26ae <check_fs+0x40>
    26aa:	62 e0       	ldi	r22, 0x02	; 2
    26ac:	5e c0       	rjmp	.+188    	; 0x276a <check_fs+0xfc>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    26ae:	c9 59       	subi	r28, 0x99	; 153
    26b0:	df 4f       	sbci	r29, 0xFF	; 255
    26b2:	28 81       	ld	r18, Y
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e0       	ldi	r20, 0x00	; 0
    26b8:	50 e0       	ldi	r21, 0x00	; 0
    26ba:	52 2f       	mov	r21, r18
    26bc:	44 27       	eor	r20, r20
    26be:	33 27       	eor	r19, r19
    26c0:	22 27       	eor	r18, r18
    26c2:	8a 91       	ld	r24, -Y
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	a0 e0       	ldi	r26, 0x00	; 0
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	dc 01       	movw	r26, r24
    26cc:	99 27       	eor	r25, r25
    26ce:	88 27       	eor	r24, r24
    26d0:	28 2b       	or	r18, r24
    26d2:	39 2b       	or	r19, r25
    26d4:	4a 2b       	or	r20, r26
    26d6:	5b 2b       	or	r21, r27
    26d8:	22 97       	sbiw	r28, 0x02	; 2
    26da:	89 91       	ld	r24, Y+
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	a0 e0       	ldi	r26, 0x00	; 0
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	28 2b       	or	r18, r24
    26e4:	39 2b       	or	r19, r25
    26e6:	4a 2b       	or	r20, r26
    26e8:	5b 2b       	or	r21, r27
    26ea:	98 81       	ld	r25, Y
    26ec:	c5 56       	subi	r28, 0x65	; 101
    26ee:	d0 40       	sbci	r29, 0x00	; 0
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	a0 e0       	ldi	r26, 0x00	; 0
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	28 2b       	or	r18, r24
    26f8:	39 2b       	or	r19, r25
    26fa:	4a 2b       	or	r20, r26
    26fc:	5b 2b       	or	r21, r27
    26fe:	50 70       	andi	r21, 0x00	; 0
    2700:	26 54       	subi	r18, 0x46	; 70
    2702:	31 44       	sbci	r19, 0x41	; 65
    2704:	44 45       	sbci	r20, 0x54	; 84
    2706:	50 40       	sbci	r21, 0x00	; 0
    2708:	11 f4       	brne	.+4      	; 0x270e <check_fs+0xa0>
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	2e c0       	rjmp	.+92     	; 0x276a <check_fs+0xfc>
    270e:	60 e0       	ldi	r22, 0x00	; 0
    2710:	cd 57       	subi	r28, 0x7D	; 125
    2712:	df 4f       	sbci	r29, 0xFF	; 255
    2714:	28 81       	ld	r18, Y
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	50 e0       	ldi	r21, 0x00	; 0
    271c:	52 2f       	mov	r21, r18
    271e:	44 27       	eor	r20, r20
    2720:	33 27       	eor	r19, r19
    2722:	22 27       	eor	r18, r18
    2724:	8a 91       	ld	r24, -Y
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	a0 e0       	ldi	r26, 0x00	; 0
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	dc 01       	movw	r26, r24
    272e:	99 27       	eor	r25, r25
    2730:	88 27       	eor	r24, r24
    2732:	28 2b       	or	r18, r24
    2734:	39 2b       	or	r19, r25
    2736:	4a 2b       	or	r20, r26
    2738:	5b 2b       	or	r21, r27
    273a:	22 97       	sbiw	r28, 0x02	; 2
    273c:	89 91       	ld	r24, Y+
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	a0 e0       	ldi	r26, 0x00	; 0
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	28 2b       	or	r18, r24
    2746:	39 2b       	or	r19, r25
    2748:	4a 2b       	or	r20, r26
    274a:	5b 2b       	or	r21, r27
    274c:	98 81       	ld	r25, Y
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	a0 e0       	ldi	r26, 0x00	; 0
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	28 2b       	or	r18, r24
    2756:	39 2b       	or	r19, r25
    2758:	4a 2b       	or	r20, r26
    275a:	5b 2b       	or	r21, r27
    275c:	50 70       	andi	r21, 0x00	; 0
    275e:	26 54       	subi	r18, 0x46	; 70
    2760:	31 44       	sbci	r19, 0x41	; 65
    2762:	44 45       	sbci	r20, 0x54	; 84
    2764:	50 40       	sbci	r21, 0x00	; 0
    2766:	09 f0       	breq	.+2      	; 0x276a <check_fs+0xfc>
    2768:	61 e0       	ldi	r22, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    276a:	86 2f       	mov	r24, r22
    276c:	df 91       	pop	r29
    276e:	cf 91       	pop	r28
    2770:	0f 91       	pop	r16
    2772:	08 95       	ret

00002774 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    2774:	6f 92       	push	r6
    2776:	7f 92       	push	r7
    2778:	8f 92       	push	r8
    277a:	9f 92       	push	r9
    277c:	af 92       	push	r10
    277e:	bf 92       	push	r11
    2780:	cf 92       	push	r12
    2782:	df 92       	push	r13
    2784:	ef 92       	push	r14
    2786:	ff 92       	push	r15
    2788:	0f 93       	push	r16
    278a:	1f 93       	push	r17
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	fc 01       	movw	r30, r24
    2792:	9b 01       	movw	r18, r22
    2794:	f4 2e       	mov	r15, r20
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    2796:	a0 81       	ld	r26, Z
    2798:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    279a:	8c 91       	ld	r24, X
    279c:	08 2f       	mov	r16, r24
    279e:	10 e0       	ldi	r17, 0x00	; 0
    27a0:	00 53       	subi	r16, 0x30	; 48
    27a2:	10 40       	sbci	r17, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    27a4:	0a 30       	cpi	r16, 0x0A	; 10
    27a6:	11 05       	cpc	r17, r1
    27a8:	68 f4       	brcc	.+26     	; 0x27c4 <chk_mounted+0x50>
    27aa:	11 96       	adiw	r26, 0x01	; 1
    27ac:	8c 91       	ld	r24, X
    27ae:	11 97       	sbiw	r26, 0x01	; 1
    27b0:	8a 33       	cpi	r24, 0x3A	; 58
    27b2:	41 f4       	brne	.+16     	; 0x27c4 <chk_mounted+0x50>
		p += 2; *path = p;			/* Return pointer to the path name */
    27b4:	12 96       	adiw	r26, 0x02	; 2
    27b6:	a0 83       	st	Z, r26
    27b8:	b1 83       	std	Z+1, r27	; 0x01
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    27ba:	02 30       	cpi	r16, 0x02	; 2
    27bc:	11 05       	cpc	r17, r1
    27be:	20 f0       	brcs	.+8      	; 0x27c8 <chk_mounted+0x54>
    27c0:	8b e0       	ldi	r24, 0x0B	; 11
    27c2:	91 c2       	rjmp	.+1314   	; 0x2ce6 <chk_mounted+0x572>
    27c4:	00 e0       	ldi	r16, 0x00	; 0
    27c6:	10 e0       	ldi	r17, 0x00	; 0
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    27c8:	f8 01       	movw	r30, r16
    27ca:	ee 0f       	add	r30, r30
    27cc:	ff 1f       	adc	r31, r31
    27ce:	e1 57       	subi	r30, 0x71	; 113
    27d0:	f2 4d       	sbci	r31, 0xD2	; 210
    27d2:	c0 81       	ld	r28, Z
    27d4:	d1 81       	ldd	r29, Z+1	; 0x01
    27d6:	f9 01       	movw	r30, r18
    27d8:	c0 83       	st	Z, r28
    27da:	d1 83       	std	Z+1, r29	; 0x01
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    27dc:	20 97       	sbiw	r28, 0x00	; 0
    27de:	11 f4       	brne	.+4      	; 0x27e4 <chk_mounted+0x70>
    27e0:	8c e0       	ldi	r24, 0x0C	; 12
    27e2:	81 c2       	rjmp	.+1282   	; 0x2ce6 <chk_mounted+0x572>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    27e4:	88 81       	ld	r24, Y
    27e6:	88 23       	and	r24, r24
    27e8:	79 f0       	breq	.+30     	; 0x2808 <chk_mounted+0x94>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	88 23       	and	r24, r24
    27ee:	11 f0       	breq	.+4      	; 0x27f4 <chk_mounted+0x80>
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	02 c0       	rjmp	.+4      	; 0x27f8 <chk_mounted+0x84>
	return Stat;
    27f4:	80 91 d4 2c 	lds	r24, 0x2CD4
		stat = disk_status(fs->drive);
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    27f8:	80 fd       	sbrc	r24, 0
    27fa:	06 c0       	rjmp	.+12     	; 0x2808 <chk_mounted+0x94>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    27fc:	ff 20       	and	r15, r15
    27fe:	09 f4       	brne	.+2      	; 0x2802 <chk_mounted+0x8e>
    2800:	6f c2       	rjmp	.+1246   	; 0x2ce0 <chk_mounted+0x56c>
    2802:	82 fd       	sbrc	r24, 2
    2804:	6b c2       	rjmp	.+1238   	; 0x2cdc <chk_mounted+0x568>
    2806:	6c c2       	rjmp	.+1240   	; 0x2ce0 <chk_mounted+0x56c>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    2808:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    280a:	f8 01       	movw	r30, r16
    280c:	ee 0f       	add	r30, r30
    280e:	ff 1f       	adc	r31, r31
    2810:	ea 5d       	subi	r30, 0xDA	; 218
    2812:	f9 4d       	sbci	r31, 0xD9	; 217
    2814:	80 81       	ld	r24, Z
    2816:	89 83       	std	Y+1, r24	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    2818:	0e 94 f6 05 	call	0xbec	; 0xbec <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    281c:	80 ff       	sbrs	r24, 0
    281e:	02 c0       	rjmp	.+4      	; 0x2824 <chk_mounted+0xb0>
    2820:	83 e0       	ldi	r24, 0x03	; 3
    2822:	61 c2       	rjmp	.+1218   	; 0x2ce6 <chk_mounted+0x572>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    2824:	ff 20       	and	r15, r15
    2826:	11 f0       	breq	.+4      	; 0x282c <chk_mounted+0xb8>
    2828:	82 fd       	sbrc	r24, 2
    282a:	58 c2       	rjmp	.+1200   	; 0x2cdc <chk_mounted+0x568>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    282c:	ce 01       	movw	r24, r28
    282e:	40 e0       	ldi	r20, 0x00	; 0
    2830:	50 e0       	ldi	r21, 0x00	; 0
    2832:	60 e0       	ldi	r22, 0x00	; 0
    2834:	70 e0       	ldi	r23, 0x00	; 0
    2836:	0e 94 37 13 	call	0x266e	; 0x266e <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    283a:	81 30       	cpi	r24, 0x01	; 1
    283c:	21 f0       	breq	.+8      	; 0x2846 <chk_mounted+0xd2>
    283e:	aa 24       	eor	r10, r10
    2840:	bb 24       	eor	r11, r11
    2842:	65 01       	movw	r12, r10
    2844:	3d c0       	rjmp	.+122    	; 0x28c0 <chk_mounted+0x14c>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    2846:	00 0f       	add	r16, r16
    2848:	11 1f       	adc	r17, r17
    284a:	0a 5d       	subi	r16, 0xDA	; 218
    284c:	19 4d       	sbci	r17, 0xD9	; 217
    284e:	f8 01       	movw	r30, r16
    2850:	81 81       	ldd	r24, Z+1	; 0x01
    2852:	e8 2f       	mov	r30, r24
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	a4 e0       	ldi	r26, 0x04	; 4
    2858:	ee 0f       	add	r30, r30
    285a:	ff 1f       	adc	r31, r31
    285c:	aa 95       	dec	r26
    285e:	e1 f7       	brne	.-8      	; 0x2858 <chk_mounted+0xe4>
    2860:	e4 51       	subi	r30, 0x14	; 20
    2862:	fe 4f       	sbci	r31, 0xFE	; 254
    2864:	ec 0f       	add	r30, r28
    2866:	fd 1f       	adc	r31, r29
		if (tbl[4]) {									/* Is the partition existing? */
    2868:	84 81       	ldd	r24, Z+4	; 0x04
    286a:	88 23       	and	r24, r24
    286c:	09 f4       	brne	.+2      	; 0x2870 <chk_mounted+0xfc>
    286e:	3a c2       	rjmp	.+1140   	; 0x2ce4 <chk_mounted+0x570>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    2870:	83 85       	ldd	r24, Z+11	; 0x0b
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	a0 e0       	ldi	r26, 0x00	; 0
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	d8 2e       	mov	r13, r24
    287a:	cc 24       	eor	r12, r12
    287c:	bb 24       	eor	r11, r11
    287e:	aa 24       	eor	r10, r10
    2880:	82 85       	ldd	r24, Z+10	; 0x0a
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	a0 e0       	ldi	r26, 0x00	; 0
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	dc 01       	movw	r26, r24
    288a:	99 27       	eor	r25, r25
    288c:	88 27       	eor	r24, r24
    288e:	a8 2a       	or	r10, r24
    2890:	b9 2a       	or	r11, r25
    2892:	ca 2a       	or	r12, r26
    2894:	db 2a       	or	r13, r27
    2896:	80 85       	ldd	r24, Z+8	; 0x08
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	a0 e0       	ldi	r26, 0x00	; 0
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	a8 2a       	or	r10, r24
    28a0:	b9 2a       	or	r11, r25
    28a2:	ca 2a       	or	r12, r26
    28a4:	db 2a       	or	r13, r27
    28a6:	91 85       	ldd	r25, Z+9	; 0x09
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	a0 e0       	ldi	r26, 0x00	; 0
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	a8 2a       	or	r10, r24
    28b0:	b9 2a       	or	r11, r25
    28b2:	ca 2a       	or	r12, r26
    28b4:	db 2a       	or	r13, r27
			fmt = check_fs(fs, bsect);					/* Check the partition */
    28b6:	ce 01       	movw	r24, r28
    28b8:	b6 01       	movw	r22, r12
    28ba:	a5 01       	movw	r20, r10
    28bc:	0e 94 37 13 	call	0x266e	; 0x266e <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    28c0:	83 30       	cpi	r24, 0x03	; 3
    28c2:	11 f4       	brne	.+4      	; 0x28c8 <chk_mounted+0x154>
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	0f c2       	rjmp	.+1054   	; 0x2ce6 <chk_mounted+0x572>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    28c8:	88 23       	and	r24, r24
    28ca:	09 f0       	breq	.+2      	; 0x28ce <chk_mounted+0x15a>
    28cc:	0b c2       	rjmp	.+1046   	; 0x2ce4 <chk_mounted+0x570>
    28ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	29 ad       	ldd	r18, Y+57	; 0x39
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	82 2b       	or	r24, r18
    28d8:	93 2b       	or	r25, r19
    28da:	80 50       	subi	r24, 0x00	; 0
    28dc:	92 40       	sbci	r25, 0x02	; 2
    28de:	09 f0       	breq	.+2      	; 0x28e2 <chk_mounted+0x16e>
    28e0:	01 c2       	rjmp	.+1026   	; 0x2ce4 <chk_mounted+0x570>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    28e2:	cb 5b       	subi	r28, 0xBB	; 187
    28e4:	df 4f       	sbci	r29, 0xFF	; 255
    28e6:	98 81       	ld	r25, Y
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	2a 91       	ld	r18, -Y
    28ec:	c4 54       	subi	r28, 0x44	; 68
    28ee:	d0 40       	sbci	r29, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	82 2b       	or	r24, r18
    28f4:	93 2b       	or	r25, r19
    28f6:	7c 01       	movw	r14, r24
    28f8:	00 e0       	ldi	r16, 0x00	; 0
    28fa:	10 e0       	ldi	r17, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    28fc:	e1 14       	cp	r14, r1
    28fe:	f1 04       	cpc	r15, r1
    2900:	01 05       	cpc	r16, r1
    2902:	11 05       	cpc	r17, r1
    2904:	41 f5       	brne	.+80     	; 0x2956 <chk_mounted+0x1e2>
    2906:	cb 5a       	subi	r28, 0xAB	; 171
    2908:	df 4f       	sbci	r29, 0xFF	; 255
    290a:	88 81       	ld	r24, Y
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	a0 e0       	ldi	r26, 0x00	; 0
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	18 2f       	mov	r17, r24
    2914:	00 27       	eor	r16, r16
    2916:	ff 24       	eor	r15, r15
    2918:	ee 24       	eor	r14, r14
    291a:	8a 91       	ld	r24, -Y
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	a0 e0       	ldi	r26, 0x00	; 0
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	dc 01       	movw	r26, r24
    2924:	99 27       	eor	r25, r25
    2926:	88 27       	eor	r24, r24
    2928:	e8 2a       	or	r14, r24
    292a:	f9 2a       	or	r15, r25
    292c:	0a 2b       	or	r16, r26
    292e:	1b 2b       	or	r17, r27
    2930:	22 97       	sbiw	r28, 0x02	; 2
    2932:	89 91       	ld	r24, Y+
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	a0 e0       	ldi	r26, 0x00	; 0
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e8 2a       	or	r14, r24
    293c:	f9 2a       	or	r15, r25
    293e:	0a 2b       	or	r16, r26
    2940:	1b 2b       	or	r17, r27
    2942:	98 81       	ld	r25, Y
    2944:	c3 55       	subi	r28, 0x53	; 83
    2946:	d0 40       	sbci	r29, 0x00	; 0
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	a0 e0       	ldi	r26, 0x00	; 0
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	e8 2a       	or	r14, r24
    2950:	f9 2a       	or	r15, r25
    2952:	0a 2b       	or	r16, r26
    2954:	1b 2b       	or	r17, r27
	fs->sects_fat = fsize;
    2956:	ee 8a       	std	Y+22, r14	; 0x16
    2958:	ff 8a       	std	Y+23, r15	; 0x17
    295a:	08 8f       	std	Y+24, r16	; 0x18
    295c:	19 8f       	std	Y+25, r17	; 0x19
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    295e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2960:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	40 e0       	ldi	r20, 0x00	; 0
    2966:	50 e0       	ldi	r21, 0x00	; 0
    2968:	c8 01       	movw	r24, r16
    296a:	b7 01       	movw	r22, r14
    296c:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <__mulsi3>
    2970:	3b 01       	movw	r6, r22
    2972:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    2974:	9d ad       	ldd	r25, Y+61	; 0x3d
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	2c ad       	ldd	r18, Y+60	; 0x3c
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	82 2b       	or	r24, r18
    297e:	93 2b       	or	r25, r19
    2980:	a0 e0       	ldi	r26, 0x00	; 0
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	8a 0d       	add	r24, r10
    2986:	9b 1d       	adc	r25, r11
    2988:	ac 1d       	adc	r26, r12
    298a:	bd 1d       	adc	r27, r13
    298c:	8e 8f       	std	Y+30, r24	; 0x1e
    298e:	9f 8f       	std	Y+31, r25	; 0x1f
    2990:	a8 a3       	std	Y+32, r26	; 0x20
    2992:	b9 a3       	std	Y+33, r27	; 0x21
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    2994:	8b ad       	ldd	r24, Y+59	; 0x3b
    2996:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    2998:	c0 5c       	subi	r28, 0xC0	; 192
    299a:	df 4f       	sbci	r29, 0xFF	; 255
    299c:	98 81       	ld	r25, Y
    299e:	c0 54       	subi	r28, 0x40	; 64
    29a0:	d0 40       	sbci	r29, 0x00	; 0
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	2f ad       	ldd	r18, Y+63	; 0x3f
    29a6:	42 2f       	mov	r20, r18
    29a8:	50 e0       	ldi	r21, 0x00	; 0
    29aa:	48 2b       	or	r20, r24
    29ac:	59 2b       	or	r21, r25
    29ae:	48 87       	std	Y+8, r20	; 0x08
    29b0:	59 87       	std	Y+9, r21	; 0x09
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    29b2:	ce 5b       	subi	r28, 0xBE	; 190
    29b4:	df 4f       	sbci	r29, 0xFF	; 255
    29b6:	98 81       	ld	r25, Y
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	2a 91       	ld	r18, -Y
    29bc:	c1 54       	subi	r28, 0x41	; 65
    29be:	d0 40       	sbci	r29, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	82 2b       	or	r24, r18
    29c4:	93 2b       	or	r25, r19
    29c6:	7c 01       	movw	r14, r24
    29c8:	00 e0       	ldi	r16, 0x00	; 0
    29ca:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    29cc:	e1 14       	cp	r14, r1
    29ce:	f1 04       	cpc	r15, r1
    29d0:	01 05       	cpc	r16, r1
    29d2:	11 05       	cpc	r17, r1
    29d4:	41 f5       	brne	.+80     	; 0x2a26 <chk_mounted+0x2b2>
    29d6:	cf 5a       	subi	r28, 0xAF	; 175
    29d8:	df 4f       	sbci	r29, 0xFF	; 255
    29da:	88 81       	ld	r24, Y
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	a0 e0       	ldi	r26, 0x00	; 0
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	18 2f       	mov	r17, r24
    29e4:	00 27       	eor	r16, r16
    29e6:	ff 24       	eor	r15, r15
    29e8:	ee 24       	eor	r14, r14
    29ea:	8a 91       	ld	r24, -Y
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	a0 e0       	ldi	r26, 0x00	; 0
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	dc 01       	movw	r26, r24
    29f4:	99 27       	eor	r25, r25
    29f6:	88 27       	eor	r24, r24
    29f8:	e8 2a       	or	r14, r24
    29fa:	f9 2a       	or	r15, r25
    29fc:	0a 2b       	or	r16, r26
    29fe:	1b 2b       	or	r17, r27
    2a00:	22 97       	sbiw	r28, 0x02	; 2
    2a02:	89 91       	ld	r24, Y+
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	a0 e0       	ldi	r26, 0x00	; 0
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	e8 2a       	or	r14, r24
    2a0c:	f9 2a       	or	r15, r25
    2a0e:	0a 2b       	or	r16, r26
    2a10:	1b 2b       	or	r17, r27
    2a12:	98 81       	ld	r25, Y
    2a14:	cf 54       	subi	r28, 0x4F	; 79
    2a16:	d0 40       	sbci	r29, 0x00	; 0
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	a0 e0       	ldi	r26, 0x00	; 0
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e8 2a       	or	r14, r24
    2a20:	f9 2a       	or	r15, r25
    2a22:	0a 2b       	or	r16, r26
    2a24:	1b 2b       	or	r17, r27
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    2a26:	9d ad       	ldd	r25, Y+61	; 0x3d
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	2c ad       	ldd	r18, Y+60	; 0x3c
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	82 2b       	or	r24, r18
    2a30:	93 2b       	or	r25, r19
    2a32:	a0 e0       	ldi	r26, 0x00	; 0
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	e8 1a       	sub	r14, r24
    2a38:	f9 0a       	sbc	r15, r25
    2a3a:	0a 0b       	sbc	r16, r26
    2a3c:	1b 0b       	sbc	r17, r27
    2a3e:	e6 18       	sub	r14, r6
    2a40:	f7 08       	sbc	r15, r7
    2a42:	08 09       	sbc	r16, r8
    2a44:	19 09       	sbc	r17, r9
    2a46:	f4 e0       	ldi	r31, 0x04	; 4
    2a48:	56 95       	lsr	r21
    2a4a:	47 95       	ror	r20
    2a4c:	fa 95       	dec	r31
    2a4e:	e1 f7       	brne	.-8      	; 0x2a48 <chk_mounted+0x2d4>
    2a50:	ca 01       	movw	r24, r20
    2a52:	a0 e0       	ldi	r26, 0x00	; 0
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	e8 1a       	sub	r14, r24
    2a58:	f9 0a       	sbc	r15, r25
    2a5a:	0a 0b       	sbc	r16, r26
    2a5c:	1b 0b       	sbc	r17, r27
    2a5e:	2a 81       	ldd	r18, Y+2	; 0x02
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	c8 01       	movw	r24, r16
    2a68:	b7 01       	movw	r22, r14
    2a6a:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    2a6e:	2e 5f       	subi	r18, 0xFE	; 254
    2a70:	3f 4f       	sbci	r19, 0xFF	; 255
    2a72:	4f 4f       	sbci	r20, 0xFF	; 255
    2a74:	5f 4f       	sbci	r21, 0xFF	; 255
    2a76:	2a 8f       	std	Y+26, r18	; 0x1a
    2a78:	3b 8f       	std	Y+27, r19	; 0x1b
    2a7a:	4c 8f       	std	Y+28, r20	; 0x1c
    2a7c:	5d 8f       	std	Y+29, r21	; 0x1d
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    2a7e:	27 3f       	cpi	r18, 0xF7	; 247
    2a80:	8f e0       	ldi	r24, 0x0F	; 15
    2a82:	38 07       	cpc	r19, r24
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	48 07       	cpc	r20, r24
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	58 07       	cpc	r21, r24
    2a8c:	10 f4       	brcc	.+4      	; 0x2a92 <chk_mounted+0x31e>
    2a8e:	11 e0       	ldi	r17, 0x01	; 1
    2a90:	07 c0       	rjmp	.+14     	; 0x2aa0 <chk_mounted+0x32c>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    2a92:	27 5f       	subi	r18, 0xF7	; 247
    2a94:	3f 4f       	sbci	r19, 0xFF	; 255
    2a96:	40 40       	sbci	r20, 0x00	; 0
    2a98:	50 40       	sbci	r21, 0x00	; 0
    2a9a:	08 f0       	brcs	.+2      	; 0x2a9e <chk_mounted+0x32a>
    2a9c:	33 c1       	rjmp	.+614    	; 0x2d04 <chk_mounted+0x590>
    2a9e:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    2aa0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2aa2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2aa4:	a8 a1       	ldd	r26, Y+32	; 0x20
    2aa6:	b9 a1       	ldd	r27, Y+33	; 0x21
    2aa8:	86 0d       	add	r24, r6
    2aaa:	97 1d       	adc	r25, r7
    2aac:	a8 1d       	adc	r26, r8
    2aae:	b9 1d       	adc	r27, r9
    2ab0:	8a a3       	std	Y+34, r24	; 0x22
    2ab2:	9b a3       	std	Y+35, r25	; 0x23
    2ab4:	ac a3       	std	Y+36, r26	; 0x24
    2ab6:	bd a3       	std	Y+37, r27	; 0x25
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    2ab8:	88 85       	ldd	r24, Y+8	; 0x08
    2aba:	99 85       	ldd	r25, Y+9	; 0x09
    2abc:	e4 e0       	ldi	r30, 0x04	; 4
    2abe:	96 95       	lsr	r25
    2ac0:	87 95       	ror	r24
    2ac2:	ea 95       	dec	r30
    2ac4:	e1 f7       	brne	.-8      	; 0x2abe <chk_mounted+0x34a>
    2ac6:	a0 e0       	ldi	r26, 0x00	; 0
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2acc:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2ace:	48 a1       	ldd	r20, Y+32	; 0x20
    2ad0:	59 a1       	ldd	r21, Y+33	; 0x21
    2ad2:	82 0f       	add	r24, r18
    2ad4:	93 1f       	adc	r25, r19
    2ad6:	a4 1f       	adc	r26, r20
    2ad8:	b5 1f       	adc	r27, r21
    2ada:	86 0d       	add	r24, r6
    2adc:	97 1d       	adc	r25, r7
    2ade:	a8 1d       	adc	r26, r8
    2ae0:	b9 1d       	adc	r27, r9
    2ae2:	8e a3       	std	Y+38, r24	; 0x26
    2ae4:	9f a3       	std	Y+39, r25	; 0x27
    2ae6:	a8 a7       	std	Y+40, r26	; 0x28
    2ae8:	b9 a7       	std	Y+41, r27	; 0x29

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    2aea:	8f ef       	ldi	r24, 0xFF	; 255
    2aec:	9f ef       	ldi	r25, 0xFF	; 255
    2aee:	af ef       	ldi	r26, 0xFF	; 255
    2af0:	bf ef       	ldi	r27, 0xFF	; 255
    2af2:	8e 87       	std	Y+14, r24	; 0x0e
    2af4:	9f 87       	std	Y+15, r25	; 0x0f
    2af6:	a8 8b       	std	Y+16, r26	; 0x10
    2af8:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    2afa:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    2afc:	13 30       	cpi	r17, 0x03	; 3
    2afe:	09 f0       	breq	.+2      	; 0x2b02 <chk_mounted+0x38e>
    2b00:	dc c0       	rjmp	.+440    	; 0x2cba <chk_mounted+0x546>
	 	fs->fsi_flag = 0;
    2b02:	1d 82       	std	Y+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    2b04:	c1 5a       	subi	r28, 0xA1	; 161
    2b06:	df 4f       	sbci	r29, 0xFF	; 255
    2b08:	38 81       	ld	r19, Y
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	8a 91       	ld	r24, -Y
    2b0e:	ce 55       	subi	r28, 0x5E	; 94
    2b10:	d0 40       	sbci	r29, 0x00	; 0
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	28 2b       	or	r18, r24
    2b16:	39 2b       	or	r19, r25
    2b18:	40 e0       	ldi	r20, 0x00	; 0
    2b1a:	50 e0       	ldi	r21, 0x00	; 0
    2b1c:	2a 0d       	add	r18, r10
    2b1e:	3b 1d       	adc	r19, r11
    2b20:	4c 1d       	adc	r20, r12
    2b22:	5d 1d       	adc	r21, r13
    2b24:	2a 8b       	std	Y+18, r18	; 0x12
    2b26:	3b 8b       	std	Y+19, r19	; 0x13
    2b28:	4c 8b       	std	Y+20, r20	; 0x14
    2b2a:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    2b2c:	be 01       	movw	r22, r28
    2b2e:	62 5d       	subi	r22, 0xD2	; 210
    2b30:	7f 4f       	sbci	r23, 0xFF	; 255
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
    2b34:	01 e0       	ldi	r16, 0x01	; 1
    2b36:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <disk_read>
    2b3a:	88 23       	and	r24, r24
    2b3c:	09 f0       	breq	.+2      	; 0x2b40 <chk_mounted+0x3cc>
    2b3e:	bd c0       	rjmp	.+378    	; 0x2cba <chk_mounted+0x546>
    2b40:	c3 5d       	subi	r28, 0xD3	; 211
    2b42:	dd 4f       	sbci	r29, 0xFD	; 253
    2b44:	98 81       	ld	r25, Y
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	2a 91       	ld	r18, -Y
    2b4a:	cc 52       	subi	r28, 0x2C	; 44
    2b4c:	d2 40       	sbci	r29, 0x02	; 2
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	82 2b       	or	r24, r18
    2b52:	93 2b       	or	r25, r19
    2b54:	85 55       	subi	r24, 0x55	; 85
    2b56:	9a 4a       	sbci	r25, 0xAA	; 170
    2b58:	09 f0       	breq	.+2      	; 0x2b5c <chk_mounted+0x3e8>
    2b5a:	af c0       	rjmp	.+350    	; 0x2cba <chk_mounted+0x546>
    2b5c:	29 a9       	ldd	r18, Y+49	; 0x31
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	40 e0       	ldi	r20, 0x00	; 0
    2b62:	50 e0       	ldi	r21, 0x00	; 0
    2b64:	52 2f       	mov	r21, r18
    2b66:	44 27       	eor	r20, r20
    2b68:	33 27       	eor	r19, r19
    2b6a:	22 27       	eor	r18, r18
    2b6c:	88 a9       	ldd	r24, Y+48	; 0x30
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	a0 e0       	ldi	r26, 0x00	; 0
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	dc 01       	movw	r26, r24
    2b76:	99 27       	eor	r25, r25
    2b78:	88 27       	eor	r24, r24
    2b7a:	28 2b       	or	r18, r24
    2b7c:	39 2b       	or	r19, r25
    2b7e:	4a 2b       	or	r20, r26
    2b80:	5b 2b       	or	r21, r27
    2b82:	8e a5       	ldd	r24, Y+46	; 0x2e
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	a0 e0       	ldi	r26, 0x00	; 0
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	28 2b       	or	r18, r24
    2b8c:	39 2b       	or	r19, r25
    2b8e:	4a 2b       	or	r20, r26
    2b90:	5b 2b       	or	r21, r27
    2b92:	9f a5       	ldd	r25, Y+47	; 0x2f
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	a0 e0       	ldi	r26, 0x00	; 0
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	28 2b       	or	r18, r24
    2b9c:	39 2b       	or	r19, r25
    2b9e:	4a 2b       	or	r20, r26
    2ba0:	5b 2b       	or	r21, r27
    2ba2:	22 55       	subi	r18, 0x52	; 82
    2ba4:	32 45       	sbci	r19, 0x52	; 82
    2ba6:	41 46       	sbci	r20, 0x61	; 97
    2ba8:	51 44       	sbci	r21, 0x41	; 65
    2baa:	09 f0       	breq	.+2      	; 0x2bae <chk_mounted+0x43a>
    2bac:	86 c0       	rjmp	.+268    	; 0x2cba <chk_mounted+0x546>
    2bae:	cb 5e       	subi	r28, 0xEB	; 235
    2bb0:	dd 4f       	sbci	r29, 0xFD	; 253
    2bb2:	28 81       	ld	r18, Y
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e0       	ldi	r20, 0x00	; 0
    2bb8:	50 e0       	ldi	r21, 0x00	; 0
    2bba:	52 2f       	mov	r21, r18
    2bbc:	44 27       	eor	r20, r20
    2bbe:	33 27       	eor	r19, r19
    2bc0:	22 27       	eor	r18, r18
    2bc2:	8a 91       	ld	r24, -Y
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	a0 e0       	ldi	r26, 0x00	; 0
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	dc 01       	movw	r26, r24
    2bcc:	99 27       	eor	r25, r25
    2bce:	88 27       	eor	r24, r24
    2bd0:	28 2b       	or	r18, r24
    2bd2:	39 2b       	or	r19, r25
    2bd4:	4a 2b       	or	r20, r26
    2bd6:	5b 2b       	or	r21, r27
    2bd8:	22 97       	sbiw	r28, 0x02	; 2
    2bda:	89 91       	ld	r24, Y+
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	a0 e0       	ldi	r26, 0x00	; 0
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	28 2b       	or	r18, r24
    2be4:	39 2b       	or	r19, r25
    2be6:	4a 2b       	or	r20, r26
    2be8:	5b 2b       	or	r21, r27
    2bea:	98 81       	ld	r25, Y
    2bec:	c3 51       	subi	r28, 0x13	; 19
    2bee:	d2 40       	sbci	r29, 0x02	; 2
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	a0 e0       	ldi	r26, 0x00	; 0
    2bf4:	b0 e0       	ldi	r27, 0x00	; 0
    2bf6:	28 2b       	or	r18, r24
    2bf8:	39 2b       	or	r19, r25
    2bfa:	4a 2b       	or	r20, r26
    2bfc:	5b 2b       	or	r21, r27
    2bfe:	22 57       	subi	r18, 0x72	; 114
    2c00:	32 47       	sbci	r19, 0x72	; 114
    2c02:	41 44       	sbci	r20, 0x41	; 65
    2c04:	51 46       	sbci	r21, 0x61	; 97
    2c06:	09 f0       	breq	.+2      	; 0x2c0a <chk_mounted+0x496>
    2c08:	58 c0       	rjmp	.+176    	; 0x2cba <chk_mounted+0x546>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    2c0a:	c3 5e       	subi	r28, 0xE3	; 227
    2c0c:	dd 4f       	sbci	r29, 0xFD	; 253
    2c0e:	28 81       	ld	r18, Y
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	40 e0       	ldi	r20, 0x00	; 0
    2c14:	50 e0       	ldi	r21, 0x00	; 0
    2c16:	52 2f       	mov	r21, r18
    2c18:	44 27       	eor	r20, r20
    2c1a:	33 27       	eor	r19, r19
    2c1c:	22 27       	eor	r18, r18
    2c1e:	8a 91       	ld	r24, -Y
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	a0 e0       	ldi	r26, 0x00	; 0
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	dc 01       	movw	r26, r24
    2c28:	99 27       	eor	r25, r25
    2c2a:	88 27       	eor	r24, r24
    2c2c:	28 2b       	or	r18, r24
    2c2e:	39 2b       	or	r19, r25
    2c30:	4a 2b       	or	r20, r26
    2c32:	5b 2b       	or	r21, r27
    2c34:	22 97       	sbiw	r28, 0x02	; 2
    2c36:	89 91       	ld	r24, Y+
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	a0 e0       	ldi	r26, 0x00	; 0
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	28 2b       	or	r18, r24
    2c40:	39 2b       	or	r19, r25
    2c42:	4a 2b       	or	r20, r26
    2c44:	5b 2b       	or	r21, r27
    2c46:	98 81       	ld	r25, Y
    2c48:	cb 51       	subi	r28, 0x1B	; 27
    2c4a:	d2 40       	sbci	r29, 0x02	; 2
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	a0 e0       	ldi	r26, 0x00	; 0
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	28 2b       	or	r18, r24
    2c54:	39 2b       	or	r19, r25
    2c56:	4a 2b       	or	r20, r26
    2c58:	5b 2b       	or	r21, r27
    2c5a:	2a 87       	std	Y+10, r18	; 0x0a
    2c5c:	3b 87       	std	Y+11, r19	; 0x0b
    2c5e:	4c 87       	std	Y+12, r20	; 0x0c
    2c60:	5d 87       	std	Y+13, r21	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2c62:	c7 5e       	subi	r28, 0xE7	; 231
    2c64:	dd 4f       	sbci	r29, 0xFD	; 253
    2c66:	28 81       	ld	r18, Y
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	50 e0       	ldi	r21, 0x00	; 0
    2c6e:	52 2f       	mov	r21, r18
    2c70:	44 27       	eor	r20, r20
    2c72:	33 27       	eor	r19, r19
    2c74:	22 27       	eor	r18, r18
    2c76:	8a 91       	ld	r24, -Y
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	a0 e0       	ldi	r26, 0x00	; 0
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
    2c7e:	dc 01       	movw	r26, r24
    2c80:	99 27       	eor	r25, r25
    2c82:	88 27       	eor	r24, r24
    2c84:	28 2b       	or	r18, r24
    2c86:	39 2b       	or	r19, r25
    2c88:	4a 2b       	or	r20, r26
    2c8a:	5b 2b       	or	r21, r27
    2c8c:	22 97       	sbiw	r28, 0x02	; 2
    2c8e:	89 91       	ld	r24, Y+
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	a0 e0       	ldi	r26, 0x00	; 0
    2c94:	b0 e0       	ldi	r27, 0x00	; 0
    2c96:	28 2b       	or	r18, r24
    2c98:	39 2b       	or	r19, r25
    2c9a:	4a 2b       	or	r20, r26
    2c9c:	5b 2b       	or	r21, r27
    2c9e:	98 81       	ld	r25, Y
    2ca0:	c7 51       	subi	r28, 0x17	; 23
    2ca2:	d2 40       	sbci	r29, 0x02	; 2
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	a0 e0       	ldi	r26, 0x00	; 0
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	28 2b       	or	r18, r24
    2cac:	39 2b       	or	r19, r25
    2cae:	4a 2b       	or	r20, r26
    2cb0:	5b 2b       	or	r21, r27
    2cb2:	2e 87       	std	Y+14, r18	; 0x0e
    2cb4:	3f 87       	std	Y+15, r19	; 0x0f
    2cb6:	48 8b       	std	Y+16, r20	; 0x10
    2cb8:	59 8b       	std	Y+17, r21	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    2cba:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    2cbc:	1a a6       	std	Y+42, r1	; 0x2a
    2cbe:	1b a6       	std	Y+43, r1	; 0x2b
    2cc0:	1c a6       	std	Y+44, r1	; 0x2c
    2cc2:	1d a6       	std	Y+45, r1	; 0x2d
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    2cc4:	80 91 93 2d 	lds	r24, 0x2D93
    2cc8:	90 91 94 2d 	lds	r25, 0x2D94
    2ccc:	01 96       	adiw	r24, 0x01	; 1
    2cce:	80 93 93 2d 	sts	0x2D93, r24
    2cd2:	90 93 94 2d 	sts	0x2D94, r25
    2cd6:	8e 83       	std	Y+6, r24	; 0x06
    2cd8:	9f 83       	std	Y+7, r25	; 0x07
    2cda:	02 c0       	rjmp	.+4      	; 0x2ce0 <chk_mounted+0x56c>

	return FR_OK;
    2cdc:	8a e0       	ldi	r24, 0x0A	; 10
    2cde:	03 c0       	rjmp	.+6      	; 0x2ce6 <chk_mounted+0x572>
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	01 c0       	rjmp	.+2      	; 0x2ce6 <chk_mounted+0x572>
    2ce4:	8d e0       	ldi	r24, 0x0D	; 13
}
    2ce6:	df 91       	pop	r29
    2ce8:	cf 91       	pop	r28
    2cea:	1f 91       	pop	r17
    2cec:	0f 91       	pop	r16
    2cee:	ff 90       	pop	r15
    2cf0:	ef 90       	pop	r14
    2cf2:	df 90       	pop	r13
    2cf4:	cf 90       	pop	r12
    2cf6:	bf 90       	pop	r11
    2cf8:	af 90       	pop	r10
    2cfa:	9f 90       	pop	r9
    2cfc:	8f 90       	pop	r8
    2cfe:	7f 90       	pop	r7
    2d00:	6f 90       	pop	r6
    2d02:	08 95       	ret
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2d04:	c3 5a       	subi	r28, 0xA3	; 163
    2d06:	df 4f       	sbci	r29, 0xFF	; 255
    2d08:	28 81       	ld	r18, Y
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e0       	ldi	r20, 0x00	; 0
    2d0e:	50 e0       	ldi	r21, 0x00	; 0
    2d10:	52 2f       	mov	r21, r18
    2d12:	44 27       	eor	r20, r20
    2d14:	33 27       	eor	r19, r19
    2d16:	22 27       	eor	r18, r18
    2d18:	8a 91       	ld	r24, -Y
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	a0 e0       	ldi	r26, 0x00	; 0
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	dc 01       	movw	r26, r24
    2d22:	99 27       	eor	r25, r25
    2d24:	88 27       	eor	r24, r24
    2d26:	28 2b       	or	r18, r24
    2d28:	39 2b       	or	r19, r25
    2d2a:	4a 2b       	or	r20, r26
    2d2c:	5b 2b       	or	r21, r27
    2d2e:	22 97       	sbiw	r28, 0x02	; 2
    2d30:	89 91       	ld	r24, Y+
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	a0 e0       	ldi	r26, 0x00	; 0
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	28 2b       	or	r18, r24
    2d3a:	39 2b       	or	r19, r25
    2d3c:	4a 2b       	or	r20, r26
    2d3e:	5b 2b       	or	r21, r27
    2d40:	98 81       	ld	r25, Y
    2d42:	cb 55       	subi	r28, 0x5B	; 91
    2d44:	d0 40       	sbci	r29, 0x00	; 0
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	a0 e0       	ldi	r26, 0x00	; 0
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	28 2b       	or	r18, r24
    2d4e:	39 2b       	or	r19, r25
    2d50:	4a 2b       	or	r20, r26
    2d52:	5b 2b       	or	r21, r27
    2d54:	2a a3       	std	Y+34, r18	; 0x22
    2d56:	3b a3       	std	Y+35, r19	; 0x23
    2d58:	4c a3       	std	Y+36, r20	; 0x24
    2d5a:	5d a3       	std	Y+37, r21	; 0x25
    2d5c:	13 e0       	ldi	r17, 0x03	; 3
    2d5e:	ac ce       	rjmp	.-680    	; 0x2ab8 <chk_mounted+0x344>

00002d60 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    2d60:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	a9 f0       	breq	.+42     	; 0x2d90 <validate+0x30>
    2d66:	80 81       	ld	r24, Z
    2d68:	88 23       	and	r24, r24
    2d6a:	91 f0       	breq	.+36     	; 0x2d90 <validate+0x30>
    2d6c:	86 81       	ldd	r24, Z+6	; 0x06
    2d6e:	97 81       	ldd	r25, Z+7	; 0x07
    2d70:	86 17       	cp	r24, r22
    2d72:	97 07       	cpc	r25, r23
    2d74:	69 f4       	brne	.+26     	; 0x2d90 <validate+0x30>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2d76:	81 81       	ldd	r24, Z+1	; 0x01
    2d78:	88 23       	and	r24, r24
    2d7a:	11 f0       	breq	.+4      	; 0x2d80 <validate+0x20>
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	02 c0       	rjmp	.+4      	; 0x2d84 <validate+0x24>
	return Stat;
    2d80:	80 91 d4 2c 	lds	r24, 0x2CD4
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    2d84:	80 fd       	sbrc	r24, 0
    2d86:	02 c0       	rjmp	.+4      	; 0x2d8c <validate+0x2c>
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	08 95       	ret
    2d8c:	83 e0       	ldi	r24, 0x03	; 3
    2d8e:	08 95       	ret
    2d90:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    2d92:	08 95       	ret

00002d94 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    2d94:	cf 93       	push	r28
    2d96:	df 93       	push	r29
    2d98:	eb 01       	movw	r28, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    2d9a:	82 30       	cpi	r24, 0x02	; 2
    2d9c:	10 f0       	brcs	.+4      	; 0x2da2 <f_mount+0xe>
    2d9e:	8b e0       	ldi	r24, 0x0B	; 11
    2da0:	17 c0       	rjmp	.+46     	; 0x2dd0 <f_mount+0x3c>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    2da2:	a8 2f       	mov	r26, r24
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	fd 01       	movw	r30, r26
    2da8:	ee 0f       	add	r30, r30
    2daa:	ff 1f       	adc	r31, r31
    2dac:	e1 57       	subi	r30, 0x71	; 113
    2dae:	f2 4d       	sbci	r31, 0xD2	; 210
    2db0:	01 90       	ld	r0, Z+
    2db2:	f0 81       	ld	r31, Z
    2db4:	e0 2d       	mov	r30, r0

	if (rfs) {
    2db6:	30 97       	sbiw	r30, 0x00	; 0
    2db8:	09 f0       	breq	.+2      	; 0x2dbc <f_mount+0x28>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    2dba:	10 82       	st	Z, r1
	}

	if (fs) {
    2dbc:	20 97       	sbiw	r28, 0x00	; 0
    2dbe:	09 f0       	breq	.+2      	; 0x2dc2 <f_mount+0x2e>
		fs->fs_type = 0;			/* Clear new fs object */
    2dc0:	18 82       	st	Y, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    2dc2:	aa 0f       	add	r26, r26
    2dc4:	bb 1f       	adc	r27, r27
    2dc6:	a1 57       	subi	r26, 0x71	; 113
    2dc8:	b2 4d       	sbci	r27, 0xD2	; 210
    2dca:	cd 93       	st	X+, r28
    2dcc:	dc 93       	st	X, r29
    2dce:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    2dd0:	df 91       	pop	r29
    2dd2:	cf 91       	pop	r28
    2dd4:	08 95       	ret

00002dd6 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2dd6:	5f 92       	push	r5
    2dd8:	6f 92       	push	r6
    2dda:	7f 92       	push	r7
    2ddc:	8f 92       	push	r8
    2dde:	9f 92       	push	r9
    2de0:	af 92       	push	r10
    2de2:	bf 92       	push	r11
    2de4:	cf 92       	push	r12
    2de6:	df 92       	push	r13
    2de8:	ef 92       	push	r14
    2dea:	ff 92       	push	r15
    2dec:	0f 93       	push	r16
    2dee:	1f 93       	push	r17
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	a4 97       	sbiw	r28, 0x24	; 36
    2dfa:	cd bf       	out	0x3d, r28	; 61
    2dfc:	de bf       	out	0x3e, r29	; 62
    2dfe:	3c 01       	movw	r6, r24
    2e00:	6b a3       	std	Y+35, r22	; 0x23
    2e02:	7c a3       	std	Y+36, r23	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    2e04:	dc 01       	movw	r26, r24
    2e06:	1d 92       	st	X+, r1
    2e08:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    2e0a:	3f e1       	ldi	r19, 0x1F	; 31
    2e0c:	53 2e       	mov	r5, r19
    2e0e:	54 22       	and	r5, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    2e10:	8e 01       	movw	r16, r28
    2e12:	03 5f       	subi	r16, 0xF3	; 243
    2e14:	1f 4f       	sbci	r17, 0xFF	; 255
    2e16:	4e 71       	andi	r20, 0x1E	; 30
    2e18:	ce 01       	movw	r24, r28
    2e1a:	83 96       	adiw	r24, 0x23	; 35
    2e1c:	b8 01       	movw	r22, r16
    2e1e:	0e 94 ba 13 	call	0x2774	; 0x2774 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2e22:	88 23       	and	r24, r24
    2e24:	11 f0       	breq	.+4      	; 0x2e2a <f_open+0x54>
    2e26:	28 2f       	mov	r18, r24
    2e28:	32 c1       	rjmp	.+612    	; 0x308e <f_open+0x2b8>
	INITBUF(dj, sfn, lfn);
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	01 96       	adiw	r24, 0x01	; 1
    2e2e:	89 a3       	std	Y+33, r24	; 0x21
    2e30:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);	/* Follow the file path */
    2e32:	6b a1       	ldd	r22, Y+35	; 0x23
    2e34:	7c a1       	ldd	r23, Y+36	; 0x24
    2e36:	c8 01       	movw	r24, r16
    2e38:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <follow_path>
    2e3c:	28 2f       	mov	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2e3e:	45 2d       	mov	r20, r5
    2e40:	50 e0       	ldi	r21, 0x00	; 0
    2e42:	ca 01       	movw	r24, r20
    2e44:	8c 71       	andi	r24, 0x1C	; 28
    2e46:	90 70       	andi	r25, 0x00	; 0
    2e48:	89 2b       	or	r24, r25
    2e4a:	09 f4       	brne	.+2      	; 0x2e4e <f_open+0x78>
    2e4c:	84 c0       	rjmp	.+264    	; 0x2f56 <f_open+0x180>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    2e4e:	22 23       	and	r18, r18
    2e50:	79 f0       	breq	.+30     	; 0x2e70 <f_open+0x9a>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    2e52:	24 30       	cpi	r18, 0x04	; 4
    2e54:	09 f0       	breq	.+2      	; 0x2e58 <f_open+0x82>
    2e56:	1b c1       	rjmp	.+566    	; 0x308e <f_open+0x2b8>
				res = dir_register(&dj);
    2e58:	c8 01       	movw	r24, r16
    2e5a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <dir_register>
    2e5e:	28 2f       	mov	r18, r24
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2e60:	88 23       	and	r24, r24
    2e62:	09 f0       	breq	.+2      	; 0x2e66 <f_open+0x90>
    2e64:	14 c1       	rjmp	.+552    	; 0x308e <f_open+0x2b8>
			mode |= FA_CREATE_ALWAYS;
    2e66:	b8 e0       	ldi	r27, 0x08	; 8
    2e68:	5b 2a       	or	r5, r27
			dir = dj.dir;			/* Created entry (SFN entry) */
    2e6a:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2e6c:	18 a1       	ldd	r17, Y+32	; 0x20
    2e6e:	5b c0       	rjmp	.+182    	; 0x2f26 <f_open+0x150>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    2e70:	52 fe       	sbrs	r5, 2
    2e72:	02 c0       	rjmp	.+4      	; 0x2e78 <f_open+0xa2>
    2e74:	28 e0       	ldi	r18, 0x08	; 8
    2e76:	0b c1       	rjmp	.+534    	; 0x308e <f_open+0x2b8>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    2e78:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2e7a:	18 a1       	ldd	r17, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    2e7c:	01 15       	cp	r16, r1
    2e7e:	11 05       	cpc	r17, r1
    2e80:	09 f4       	brne	.+2      	; 0x2e84 <f_open+0xae>
    2e82:	02 c1       	rjmp	.+516    	; 0x3088 <f_open+0x2b2>
    2e84:	f8 01       	movw	r30, r16
    2e86:	83 85       	ldd	r24, Z+11	; 0x0b
    2e88:	81 71       	andi	r24, 0x11	; 17
    2e8a:	09 f0       	breq	.+2      	; 0x2e8e <f_open+0xb8>
    2e8c:	fd c0       	rjmp	.+506    	; 0x3088 <f_open+0x2b2>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    2e8e:	53 fe       	sbrs	r5, 3
    2e90:	4a c0       	rjmp	.+148    	; 0x2f26 <f_open+0x150>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    2e92:	95 89       	ldd	r25, Z+21	; 0x15
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	24 89       	ldd	r18, Z+20	; 0x14
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	82 2b       	or	r24, r18
    2e9c:	93 2b       	or	r25, r19
    2e9e:	a0 e0       	ldi	r26, 0x00	; 0
    2ea0:	b0 e0       	ldi	r27, 0x00	; 0
    2ea2:	7c 01       	movw	r14, r24
    2ea4:	dd 24       	eor	r13, r13
    2ea6:	cc 24       	eor	r12, r12
    2ea8:	93 8d       	ldd	r25, Z+27	; 0x1b
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	22 8d       	ldd	r18, Z+26	; 0x1a
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	82 2b       	or	r24, r18
    2eb2:	93 2b       	or	r25, r19
    2eb4:	a0 e0       	ldi	r26, 0x00	; 0
    2eb6:	b0 e0       	ldi	r27, 0x00	; 0
    2eb8:	c8 2a       	or	r12, r24
    2eba:	d9 2a       	or	r13, r25
    2ebc:	ea 2a       	or	r14, r26
    2ebe:	fb 2a       	or	r15, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    2ec0:	14 8a       	std	Z+20, r1	; 0x14
    2ec2:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    2ec4:	12 8e       	std	Z+26, r1	; 0x1a
    2ec6:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    2ec8:	14 8e       	std	Z+28, r1	; 0x1c
    2eca:	15 8e       	std	Z+29, r1	; 0x1d
    2ecc:	16 8e       	std	Z+30, r1	; 0x1e
    2ece:	17 8e       	std	Z+31, r1	; 0x1f
				dj.fs->wflag = 1;
    2ed0:	ed 85       	ldd	r30, Y+13	; 0x0d
    2ed2:	fe 85       	ldd	r31, Y+14	; 0x0e
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    2ed8:	82 a4       	ldd	r8, Z+42	; 0x2a
    2eda:	93 a4       	ldd	r9, Z+43	; 0x2b
    2edc:	a4 a4       	ldd	r10, Z+44	; 0x2c
    2ede:	b5 a4       	ldd	r11, Z+45	; 0x2d
				if (cl) {
    2ee0:	c1 14       	cp	r12, r1
    2ee2:	d1 04       	cpc	r13, r1
    2ee4:	e1 04       	cpc	r14, r1
    2ee6:	f1 04       	cpc	r15, r1
    2ee8:	a1 f0       	breq	.+40     	; 0x2f12 <f_open+0x13c>
					res = remove_chain(dj.fs, cl);
    2eea:	cf 01       	movw	r24, r30
    2eec:	b7 01       	movw	r22, r14
    2eee:	a6 01       	movw	r20, r12
    2ef0:	0e 94 85 0c 	call	0x190a	; 0x190a <remove_chain>
    2ef4:	28 2f       	mov	r18, r24
					if (res) LEAVE_FF(dj.fs, res);
    2ef6:	88 23       	and	r24, r24
    2ef8:	09 f0       	breq	.+2      	; 0x2efc <f_open+0x126>
    2efa:	c9 c0       	rjmp	.+402    	; 0x308e <f_open+0x2b8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2efc:	ed 85       	ldd	r30, Y+13	; 0x0d
    2efe:	fe 85       	ldd	r31, Y+14	; 0x0e
    2f00:	08 94       	sec
    2f02:	c1 08       	sbc	r12, r1
    2f04:	d1 08       	sbc	r13, r1
    2f06:	e1 08       	sbc	r14, r1
    2f08:	f1 08       	sbc	r15, r1
    2f0a:	c2 86       	std	Z+10, r12	; 0x0a
    2f0c:	d3 86       	std	Z+11, r13	; 0x0b
    2f0e:	e4 86       	std	Z+12, r14	; 0x0c
    2f10:	f5 86       	std	Z+13, r15	; 0x0d
				}
				res = move_window(dj.fs, ps);
    2f12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f16:	b5 01       	movw	r22, r10
    2f18:	a4 01       	movw	r20, r8
    2f1a:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    2f1e:	28 2f       	mov	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2f20:	88 23       	and	r24, r24
    2f22:	09 f0       	breq	.+2      	; 0x2f26 <f_open+0x150>
    2f24:	b4 c0       	rjmp	.+360    	; 0x308e <f_open+0x2b8>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    2f26:	53 fe       	sbrs	r5, 3
    2f28:	27 c0       	rjmp	.+78     	; 0x2f78 <f_open+0x1a2>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    2f2a:	d8 01       	movw	r26, r16
    2f2c:	1b 96       	adiw	r26, 0x0b	; 11
    2f2e:	1c 92       	st	X, r1
    2f30:	1b 97       	sbiw	r26, 0x0b	; 11
			ps = get_fattime();
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    2f32:	1e 96       	adiw	r26, 0x0e	; 14
    2f34:	1c 92       	st	X, r1
    2f36:	1e 97       	sbiw	r26, 0x0e	; 14
    2f38:	1f 96       	adiw	r26, 0x0f	; 15
    2f3a:	1c 92       	st	X, r1
    2f3c:	1f 97       	sbiw	r26, 0x0f	; 15
    2f3e:	50 96       	adiw	r26, 0x10	; 16
    2f40:	1c 92       	st	X, r1
    2f42:	50 97       	sbiw	r26, 0x10	; 16
    2f44:	51 96       	adiw	r26, 0x11	; 17
    2f46:	1c 92       	st	X, r1
			dj.fs->wflag = 1;
    2f48:	ed 85       	ldd	r30, Y+13	; 0x0d
    2f4a:	fe 85       	ldd	r31, Y+14	; 0x0e
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    2f50:	b0 e2       	ldi	r27, 0x20	; 32
    2f52:	5b 2a       	or	r5, r27
    2f54:	11 c0       	rjmp	.+34     	; 0x2f78 <f_open+0x1a2>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    2f56:	22 23       	and	r18, r18
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <f_open+0x186>
    2f5a:	99 c0       	rjmp	.+306    	; 0x308e <f_open+0x2b8>
		dir = dj.dir;
    2f5c:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2f5e:	18 a1       	ldd	r17, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    2f60:	01 15       	cp	r16, r1
    2f62:	11 05       	cpc	r17, r1
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <f_open+0x192>
    2f66:	92 c0       	rjmp	.+292    	; 0x308c <f_open+0x2b6>
    2f68:	f8 01       	movw	r30, r16
    2f6a:	83 85       	ldd	r24, Z+11	; 0x0b
    2f6c:	84 fd       	sbrc	r24, 4
    2f6e:	8e c0       	rjmp	.+284    	; 0x308c <f_open+0x2b6>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2f70:	51 fe       	sbrs	r5, 1
    2f72:	02 c0       	rjmp	.+4      	; 0x2f78 <f_open+0x1a2>
    2f74:	80 fd       	sbrc	r24, 0
    2f76:	88 c0       	rjmp	.+272    	; 0x3088 <f_open+0x2b2>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    2f78:	ed 85       	ldd	r30, Y+13	; 0x0d
    2f7a:	fe 85       	ldd	r31, Y+14	; 0x0e
    2f7c:	22 a5       	ldd	r18, Z+42	; 0x2a
    2f7e:	33 a5       	ldd	r19, Z+43	; 0x2b
    2f80:	44 a5       	ldd	r20, Z+44	; 0x2c
    2f82:	55 a5       	ldd	r21, Z+45	; 0x2d
    2f84:	d3 01       	movw	r26, r6
    2f86:	5a 96       	adiw	r26, 0x1a	; 26
    2f88:	2d 93       	st	X+, r18
    2f8a:	3d 93       	st	X+, r19
    2f8c:	4d 93       	st	X+, r20
    2f8e:	5c 93       	st	X, r21
    2f90:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    2f92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f94:	98 a1       	ldd	r25, Y+32	; 0x20
    2f96:	5e 96       	adiw	r26, 0x1e	; 30
    2f98:	8d 93       	st	X+, r24
    2f9a:	9c 93       	st	X, r25
    2f9c:	5f 97       	sbiw	r26, 0x1f	; 31
#endif
	fp->flag = mode;					/* File access mode */
    2f9e:	14 96       	adiw	r26, 0x04	; 4
    2fa0:	5c 92       	st	X, r5
	fp->org_clust =						/* File start cluster */
    2fa2:	d8 01       	movw	r26, r16
    2fa4:	55 96       	adiw	r26, 0x15	; 21
    2fa6:	3c 91       	ld	r19, X
    2fa8:	55 97       	sbiw	r26, 0x15	; 21
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	54 96       	adiw	r26, 0x14	; 20
    2fae:	8c 91       	ld	r24, X
    2fb0:	54 97       	sbiw	r26, 0x14	; 20
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	28 2b       	or	r18, r24
    2fb6:	39 2b       	or	r19, r25
    2fb8:	40 e0       	ldi	r20, 0x00	; 0
    2fba:	50 e0       	ldi	r21, 0x00	; 0
    2fbc:	a9 01       	movw	r20, r18
    2fbe:	33 27       	eor	r19, r19
    2fc0:	22 27       	eor	r18, r18
    2fc2:	5b 96       	adiw	r26, 0x1b	; 27
    2fc4:	9c 91       	ld	r25, X
    2fc6:	5b 97       	sbiw	r26, 0x1b	; 27
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	5a 96       	adiw	r26, 0x1a	; 26
    2fcc:	6c 91       	ld	r22, X
    2fce:	70 e0       	ldi	r23, 0x00	; 0
    2fd0:	86 2b       	or	r24, r22
    2fd2:	97 2b       	or	r25, r23
    2fd4:	a0 e0       	ldi	r26, 0x00	; 0
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	28 2b       	or	r18, r24
    2fda:	39 2b       	or	r19, r25
    2fdc:	4a 2b       	or	r20, r26
    2fde:	5b 2b       	or	r21, r27
    2fe0:	d3 01       	movw	r26, r6
    2fe2:	1e 96       	adiw	r26, 0x0e	; 14
    2fe4:	2d 93       	st	X+, r18
    2fe6:	3d 93       	st	X+, r19
    2fe8:	4d 93       	st	X+, r20
    2fea:	5c 93       	st	X, r21
    2fec:	51 97       	sbiw	r26, 0x11	; 17
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2fee:	d8 01       	movw	r26, r16
    2ff0:	5f 96       	adiw	r26, 0x1f	; 31
    2ff2:	2c 91       	ld	r18, X
    2ff4:	5f 97       	sbiw	r26, 0x1f	; 31
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	40 e0       	ldi	r20, 0x00	; 0
    2ffa:	50 e0       	ldi	r21, 0x00	; 0
    2ffc:	52 2f       	mov	r21, r18
    2ffe:	44 27       	eor	r20, r20
    3000:	33 27       	eor	r19, r19
    3002:	22 27       	eor	r18, r18
    3004:	5e 96       	adiw	r26, 0x1e	; 30
    3006:	8c 91       	ld	r24, X
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	a0 e0       	ldi	r26, 0x00	; 0
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	dc 01       	movw	r26, r24
    3010:	99 27       	eor	r25, r25
    3012:	88 27       	eor	r24, r24
    3014:	28 2b       	or	r18, r24
    3016:	39 2b       	or	r19, r25
    3018:	4a 2b       	or	r20, r26
    301a:	5b 2b       	or	r21, r27
    301c:	d8 01       	movw	r26, r16
    301e:	5c 96       	adiw	r26, 0x1c	; 28
    3020:	8c 91       	ld	r24, X
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	a0 e0       	ldi	r26, 0x00	; 0
    3026:	b0 e0       	ldi	r27, 0x00	; 0
    3028:	28 2b       	or	r18, r24
    302a:	39 2b       	or	r19, r25
    302c:	4a 2b       	or	r20, r26
    302e:	5b 2b       	or	r21, r27
    3030:	d8 01       	movw	r26, r16
    3032:	5d 96       	adiw	r26, 0x1d	; 29
    3034:	9c 91       	ld	r25, X
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	a0 e0       	ldi	r26, 0x00	; 0
    303a:	b0 e0       	ldi	r27, 0x00	; 0
    303c:	28 2b       	or	r18, r24
    303e:	39 2b       	or	r19, r25
    3040:	4a 2b       	or	r20, r26
    3042:	5b 2b       	or	r21, r27
    3044:	d3 01       	movw	r26, r6
    3046:	1a 96       	adiw	r26, 0x0a	; 10
    3048:	2d 93       	st	X+, r18
    304a:	3d 93       	st	X+, r19
    304c:	4d 93       	st	X+, r20
    304e:	5c 93       	st	X, r21
    3050:	1d 97       	sbiw	r26, 0x0d	; 13
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    3052:	16 96       	adiw	r26, 0x06	; 6
    3054:	1d 92       	st	X+, r1
    3056:	1d 92       	st	X+, r1
    3058:	1d 92       	st	X+, r1
    305a:	1c 92       	st	X, r1
    305c:	19 97       	sbiw	r26, 0x09	; 9
    305e:	8f ef       	ldi	r24, 0xFF	; 255
    3060:	15 96       	adiw	r26, 0x05	; 5
    3062:	8c 93       	st	X, r24
    3064:	15 97       	sbiw	r26, 0x05	; 5
	fp->dsect = 0;
    3066:	56 96       	adiw	r26, 0x16	; 22
    3068:	1d 92       	st	X+, r1
    306a:	1d 92       	st	X+, r1
    306c:	1d 92       	st	X+, r1
    306e:	1c 92       	st	X, r1
    3070:	59 97       	sbiw	r26, 0x19	; 25
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    3072:	ed 93       	st	X+, r30
    3074:	fc 93       	st	X, r31
    3076:	11 97       	sbiw	r26, 0x01	; 1
    3078:	86 81       	ldd	r24, Z+6	; 0x06
    307a:	97 81       	ldd	r25, Z+7	; 0x07
    307c:	12 96       	adiw	r26, 0x02	; 2
    307e:	8d 93       	st	X+, r24
    3080:	9c 93       	st	X, r25
    3082:	13 97       	sbiw	r26, 0x03	; 3
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	03 c0       	rjmp	.+6      	; 0x308e <f_open+0x2b8>

	LEAVE_FF(dj.fs, FR_OK);
    3088:	27 e0       	ldi	r18, 0x07	; 7
    308a:	01 c0       	rjmp	.+2      	; 0x308e <f_open+0x2b8>
    308c:	24 e0       	ldi	r18, 0x04	; 4
}
    308e:	82 2f       	mov	r24, r18
    3090:	a4 96       	adiw	r28, 0x24	; 36
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	de bf       	out	0x3e, r29	; 62
    3096:	cf 91       	pop	r28
    3098:	df 91       	pop	r29
    309a:	1f 91       	pop	r17
    309c:	0f 91       	pop	r16
    309e:	ff 90       	pop	r15
    30a0:	ef 90       	pop	r14
    30a2:	df 90       	pop	r13
    30a4:	cf 90       	pop	r12
    30a6:	bf 90       	pop	r11
    30a8:	af 90       	pop	r10
    30aa:	9f 90       	pop	r9
    30ac:	8f 90       	pop	r8
    30ae:	7f 90       	pop	r7
    30b0:	6f 90       	pop	r6
    30b2:	5f 90       	pop	r5
    30b4:	08 95       	ret

000030b6 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    30b6:	2f 92       	push	r2
    30b8:	3f 92       	push	r3
    30ba:	4f 92       	push	r4
    30bc:	5f 92       	push	r5
    30be:	6f 92       	push	r6
    30c0:	7f 92       	push	r7
    30c2:	8f 92       	push	r8
    30c4:	9f 92       	push	r9
    30c6:	af 92       	push	r10
    30c8:	bf 92       	push	r11
    30ca:	cf 92       	push	r12
    30cc:	df 92       	push	r13
    30ce:	ef 92       	push	r14
    30d0:	ff 92       	push	r15
    30d2:	0f 93       	push	r16
    30d4:	1f 93       	push	r17
    30d6:	df 93       	push	r29
    30d8:	cf 93       	push	r28
    30da:	00 d0       	rcall	.+0      	; 0x30dc <f_read+0x26>
    30dc:	0f 92       	push	r0
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
    30e2:	8b 83       	std	Y+3, r24	; 0x03
    30e4:	9c 83       	std	Y+4, r25	; 0x04
    30e6:	16 2f       	mov	r17, r22
    30e8:	07 2f       	mov	r16, r23
    30ea:	4a 01       	movw	r8, r20
    30ec:	29 83       	std	Y+1, r18	; 0x01
    30ee:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
    30f0:	d9 01       	movw	r26, r18
    30f2:	1d 92       	st	X+, r1
    30f4:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    30f6:	fc 01       	movw	r30, r24
    30f8:	62 81       	ldd	r22, Z+2	; 0x02
    30fa:	73 81       	ldd	r23, Z+3	; 0x03
    30fc:	80 81       	ld	r24, Z
    30fe:	91 81       	ldd	r25, Z+1	; 0x01
    3100:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <validate>
    3104:	78 2e       	mov	r7, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3106:	88 23       	and	r24, r24
    3108:	09 f0       	breq	.+2      	; 0x310c <f_read+0x56>
    310a:	b4 c1       	rjmp	.+872    	; 0x3474 <f_read+0x3be>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    310c:	ab 81       	ldd	r26, Y+3	; 0x03
    310e:	bc 81       	ldd	r27, Y+4	; 0x04
    3110:	14 96       	adiw	r26, 0x04	; 4
    3112:	8c 91       	ld	r24, X
    3114:	87 fd       	sbrc	r24, 7
    3116:	66 c0       	rjmp	.+204    	; 0x31e4 <f_read+0x12e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    3118:	80 fd       	sbrc	r24, 0
    311a:	03 c0       	rjmp	.+6      	; 0x3122 <f_read+0x6c>
    311c:	a7 e0       	ldi	r26, 0x07	; 7
    311e:	7a 2e       	mov	r7, r26
    3120:	a9 c1       	rjmp	.+850    	; 0x3474 <f_read+0x3be>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    3122:	eb 81       	ldd	r30, Y+3	; 0x03
    3124:	fc 81       	ldd	r31, Y+4	; 0x04
    3126:	22 85       	ldd	r18, Z+10	; 0x0a
    3128:	33 85       	ldd	r19, Z+11	; 0x0b
    312a:	44 85       	ldd	r20, Z+12	; 0x0c
    312c:	55 85       	ldd	r21, Z+13	; 0x0d
    312e:	86 81       	ldd	r24, Z+6	; 0x06
    3130:	97 81       	ldd	r25, Z+7	; 0x07
    3132:	a0 85       	ldd	r26, Z+8	; 0x08
    3134:	b1 85       	ldd	r27, Z+9	; 0x09
    3136:	28 1b       	sub	r18, r24
    3138:	39 0b       	sbc	r19, r25
    313a:	4a 0b       	sbc	r20, r26
    313c:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    313e:	c4 01       	movw	r24, r8
    3140:	a0 e0       	ldi	r26, 0x00	; 0
    3142:	b0 e0       	ldi	r27, 0x00	; 0
    3144:	28 17       	cp	r18, r24
    3146:	39 07       	cpc	r19, r25
    3148:	4a 07       	cpc	r20, r26
    314a:	5b 07       	cpc	r21, r27
    314c:	08 f4       	brcc	.+2      	; 0x3150 <f_read+0x9a>
    314e:	49 01       	movw	r8, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    3150:	81 2f       	mov	r24, r17
    3152:	90 2f       	mov	r25, r16
    3154:	9c 01       	movw	r18, r24
    3156:	29 01       	movw	r4, r18

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    3158:	f0 e2       	ldi	r31, 0x20	; 32
    315a:	2f 2e       	mov	r2, r31
    315c:	31 2c       	mov	r3, r1
    315e:	6b 81       	ldd	r22, Y+3	; 0x03
    3160:	7c 81       	ldd	r23, Y+4	; 0x04
    3162:	26 0e       	add	r2, r22
    3164:	37 1e       	adc	r3, r23
    3166:	82 c1       	rjmp	.+772    	; 0x346c <f_read+0x3b6>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    3168:	ab 81       	ldd	r26, Y+3	; 0x03
    316a:	bc 81       	ldd	r27, Y+4	; 0x04
    316c:	16 96       	adiw	r26, 0x06	; 6
    316e:	2d 91       	ld	r18, X+
    3170:	3d 91       	ld	r19, X+
    3172:	4d 91       	ld	r20, X+
    3174:	5c 91       	ld	r21, X
    3176:	19 97       	sbiw	r26, 0x09	; 9
    3178:	da 01       	movw	r26, r20
    317a:	c9 01       	movw	r24, r18
    317c:	91 70       	andi	r25, 0x01	; 1
    317e:	a0 70       	andi	r26, 0x00	; 0
    3180:	b0 70       	andi	r27, 0x00	; 0
    3182:	00 97       	sbiw	r24, 0x00	; 0
    3184:	a1 05       	cpc	r26, r1
    3186:	b1 05       	cpc	r27, r1
    3188:	09 f0       	breq	.+2      	; 0x318c <f_read+0xd6>
    318a:	2c c1       	rjmp	.+600    	; 0x33e4 <f_read+0x32e>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    318c:	ab 81       	ldd	r26, Y+3	; 0x03
    318e:	bc 81       	ldd	r27, Y+4	; 0x04
    3190:	ed 91       	ld	r30, X+
    3192:	fc 91       	ld	r31, X
    3194:	11 97       	sbiw	r26, 0x01	; 1
    3196:	15 96       	adiw	r26, 0x05	; 5
    3198:	9c 91       	ld	r25, X
    319a:	15 97       	sbiw	r26, 0x05	; 5
    319c:	82 81       	ldd	r24, Z+2	; 0x02
    319e:	98 17       	cp	r25, r24
    31a0:	a0 f1       	brcs	.+104    	; 0x320a <f_read+0x154>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    31a2:	21 15       	cp	r18, r1
    31a4:	31 05       	cpc	r19, r1
    31a6:	41 05       	cpc	r20, r1
    31a8:	51 05       	cpc	r21, r1
    31aa:	39 f4       	brne	.+14     	; 0x31ba <f_read+0x104>
    31ac:	1e 96       	adiw	r26, 0x0e	; 14
    31ae:	6d 91       	ld	r22, X+
    31b0:	7d 91       	ld	r23, X+
    31b2:	8d 91       	ld	r24, X+
    31b4:	9c 91       	ld	r25, X
    31b6:	51 97       	sbiw	r26, 0x11	; 17
    31b8:	0b c0       	rjmp	.+22     	; 0x31d0 <f_read+0x11a>
    31ba:	ab 81       	ldd	r26, Y+3	; 0x03
    31bc:	bc 81       	ldd	r27, Y+4	; 0x04
    31be:	52 96       	adiw	r26, 0x12	; 18
    31c0:	4d 91       	ld	r20, X+
    31c2:	5d 91       	ld	r21, X+
    31c4:	6d 91       	ld	r22, X+
    31c6:	7c 91       	ld	r23, X
    31c8:	55 97       	sbiw	r26, 0x15	; 21
    31ca:	cf 01       	movw	r24, r30
    31cc:	0e 94 af 0a 	call	0x155e	; 0x155e <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    31d0:	62 30       	cpi	r22, 0x02	; 2
    31d2:	71 05       	cpc	r23, r1
    31d4:	81 05       	cpc	r24, r1
    31d6:	91 05       	cpc	r25, r1
    31d8:	40 f4       	brcc	.+16     	; 0x31ea <f_read+0x134>
    31da:	eb 81       	ldd	r30, Y+3	; 0x03
    31dc:	fc 81       	ldd	r31, Y+4	; 0x04
    31de:	84 81       	ldd	r24, Z+4	; 0x04
    31e0:	80 68       	ori	r24, 0x80	; 128
    31e2:	84 83       	std	Z+4, r24	; 0x04
    31e4:	e2 e0       	ldi	r30, 0x02	; 2
    31e6:	7e 2e       	mov	r7, r30
    31e8:	45 c1       	rjmp	.+650    	; 0x3474 <f_read+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    31ea:	6f 3f       	cpi	r22, 0xFF	; 255
    31ec:	ff ef       	ldi	r31, 0xFF	; 255
    31ee:	7f 07       	cpc	r23, r31
    31f0:	ff ef       	ldi	r31, 0xFF	; 255
    31f2:	8f 07       	cpc	r24, r31
    31f4:	ff ef       	ldi	r31, 0xFF	; 255
    31f6:	9f 07       	cpc	r25, r31
    31f8:	09 f4       	brne	.+2      	; 0x31fc <f_read+0x146>
    31fa:	e0 c0       	rjmp	.+448    	; 0x33bc <f_read+0x306>
				fp->curr_clust = clst;				/* Update current cluster */
    31fc:	eb 81       	ldd	r30, Y+3	; 0x03
    31fe:	fc 81       	ldd	r31, Y+4	; 0x04
    3200:	62 8b       	std	Z+18, r22	; 0x12
    3202:	73 8b       	std	Z+19, r23	; 0x13
    3204:	84 8b       	std	Z+20, r24	; 0x14
    3206:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    3208:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    320a:	ab 81       	ldd	r26, Y+3	; 0x03
    320c:	bc 81       	ldd	r27, Y+4	; 0x04
    320e:	0d 91       	ld	r16, X+
    3210:	1c 91       	ld	r17, X
    3212:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3214:	52 96       	adiw	r26, 0x12	; 18
    3216:	2d 91       	ld	r18, X+
    3218:	3d 91       	ld	r19, X+
    321a:	4d 91       	ld	r20, X+
    321c:	5c 91       	ld	r21, X
    321e:	55 97       	sbiw	r26, 0x15	; 21
    3220:	22 50       	subi	r18, 0x02	; 2
    3222:	30 40       	sbci	r19, 0x00	; 0
    3224:	40 40       	sbci	r20, 0x00	; 0
    3226:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3228:	f8 01       	movw	r30, r16
    322a:	82 8d       	ldd	r24, Z+26	; 0x1a
    322c:	93 8d       	ldd	r25, Z+27	; 0x1b
    322e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3230:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3232:	02 97       	sbiw	r24, 0x02	; 2
    3234:	a1 09       	sbc	r26, r1
    3236:	b1 09       	sbc	r27, r1
    3238:	28 17       	cp	r18, r24
    323a:	39 07       	cpc	r19, r25
    323c:	4a 07       	cpc	r20, r26
    323e:	5b 07       	cpc	r21, r27
    3240:	b8 f4       	brcc	.+46     	; 0x3270 <f_read+0x1ba>
	return clst * fs->csize + fs->database;
    3242:	62 80       	ldd	r6, Z+2	; 0x02
    3244:	66 2d       	mov	r22, r6
    3246:	70 e0       	ldi	r23, 0x00	; 0
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <__mulsi3>
    3250:	9b 01       	movw	r18, r22
    3252:	ac 01       	movw	r20, r24
    3254:	f8 01       	movw	r30, r16
    3256:	86 a1       	ldd	r24, Z+38	; 0x26
    3258:	97 a1       	ldd	r25, Z+39	; 0x27
    325a:	a0 a5       	ldd	r26, Z+40	; 0x28
    325c:	b1 a5       	ldd	r27, Z+41	; 0x29
    325e:	28 0f       	add	r18, r24
    3260:	39 1f       	adc	r19, r25
    3262:	4a 1f       	adc	r20, r26
    3264:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3266:	21 15       	cp	r18, r1
    3268:	31 05       	cpc	r19, r1
    326a:	41 05       	cpc	r20, r1
    326c:	51 05       	cpc	r21, r1
    326e:	49 f4       	brne	.+18     	; 0x3282 <f_read+0x1cc>
    3270:	ab 81       	ldd	r26, Y+3	; 0x03
    3272:	bc 81       	ldd	r27, Y+4	; 0x04
    3274:	14 96       	adiw	r26, 0x04	; 4
    3276:	8c 91       	ld	r24, X
    3278:	14 97       	sbiw	r26, 0x04	; 4
    327a:	80 68       	ori	r24, 0x80	; 128
    327c:	14 96       	adiw	r26, 0x04	; 4
    327e:	8c 93       	st	X, r24
    3280:	b1 cf       	rjmp	.-158    	; 0x31e4 <f_read+0x12e>
			sect += fp->csect;
    3282:	eb 81       	ldd	r30, Y+3	; 0x03
    3284:	fc 81       	ldd	r31, Y+4	; 0x04
    3286:	85 81       	ldd	r24, Z+5	; 0x05
    3288:	59 01       	movw	r10, r18
    328a:	6a 01       	movw	r12, r20
    328c:	a8 0e       	add	r10, r24
    328e:	b1 1c       	adc	r11, r1
    3290:	c1 1c       	adc	r12, r1
    3292:	d1 1c       	adc	r13, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    3294:	74 01       	movw	r14, r8
    3296:	ef 2c       	mov	r14, r15
    3298:	ff 24       	eor	r15, r15
    329a:	e6 94       	lsr	r14
			if (cc) {								/* Read maximum contiguous sectors directly */
    329c:	e1 14       	cp	r14, r1
    329e:	f1 04       	cpc	r15, r1
    32a0:	09 f4       	brne	.+2      	; 0x32a4 <f_read+0x1ee>
    32a2:	53 c0       	rjmp	.+166    	; 0x334a <f_read+0x294>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    32a4:	28 2f       	mov	r18, r24
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	c7 01       	movw	r24, r14
    32aa:	82 0f       	add	r24, r18
    32ac:	93 1f       	adc	r25, r19
    32ae:	66 2d       	mov	r22, r6
    32b0:	70 e0       	ldi	r23, 0x00	; 0
    32b2:	68 17       	cp	r22, r24
    32b4:	79 07       	cpc	r23, r25
    32b6:	18 f4       	brcc	.+6      	; 0x32be <f_read+0x208>
					cc = fp->fs->csize - fp->csect;
    32b8:	7b 01       	movw	r14, r22
    32ba:	e2 1a       	sub	r14, r18
    32bc:	f3 0a       	sbc	r15, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    32be:	d8 01       	movw	r26, r16
    32c0:	11 96       	adiw	r26, 0x01	; 1
    32c2:	8c 91       	ld	r24, X
    32c4:	b2 01       	movw	r22, r4
    32c6:	a6 01       	movw	r20, r12
    32c8:	95 01       	movw	r18, r10
    32ca:	0e 2d       	mov	r16, r14
    32cc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <disk_read>
    32d0:	eb 81       	ldd	r30, Y+3	; 0x03
    32d2:	fc 81       	ldd	r31, Y+4	; 0x04
    32d4:	94 81       	ldd	r25, Z+4	; 0x04
    32d6:	88 23       	and	r24, r24
    32d8:	19 f0       	breq	.+6      	; 0x32e0 <f_read+0x22a>
					ABORT(fp->fs, FR_DISK_ERR);
    32da:	90 68       	ori	r25, 0x80	; 128
    32dc:	94 83       	std	Z+4, r25	; 0x04
    32de:	76 c0       	rjmp	.+236    	; 0x33cc <f_read+0x316>
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
    32e0:	96 ff       	sbrs	r25, 6
    32e2:	29 c0       	rjmp	.+82     	; 0x3336 <f_read+0x280>
    32e4:	ab 81       	ldd	r26, Y+3	; 0x03
    32e6:	bc 81       	ldd	r27, Y+4	; 0x04
    32e8:	56 96       	adiw	r26, 0x16	; 22
    32ea:	2d 91       	ld	r18, X+
    32ec:	3d 91       	ld	r19, X+
    32ee:	4d 91       	ld	r20, X+
    32f0:	5c 91       	ld	r21, X
    32f2:	59 97       	sbiw	r26, 0x19	; 25
    32f4:	2a 19       	sub	r18, r10
    32f6:	3b 09       	sbc	r19, r11
    32f8:	4c 09       	sbc	r20, r12
    32fa:	5d 09       	sbc	r21, r13
    32fc:	c7 01       	movw	r24, r14
    32fe:	a0 e0       	ldi	r26, 0x00	; 0
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	28 17       	cp	r18, r24
    3304:	39 07       	cpc	r19, r25
    3306:	4a 07       	cpc	r20, r26
    3308:	5b 07       	cpc	r21, r27
    330a:	a8 f4       	brcc	.+42     	; 0x3336 <f_read+0x280>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    330c:	69 e0       	ldi	r22, 0x09	; 9
    330e:	22 0f       	add	r18, r18
    3310:	33 1f       	adc	r19, r19
    3312:	44 1f       	adc	r20, r20
    3314:	55 1f       	adc	r21, r21
    3316:	6a 95       	dec	r22
    3318:	d1 f7       	brne	.-12     	; 0x330e <f_read+0x258>
    331a:	c2 01       	movw	r24, r4
    331c:	82 0f       	add	r24, r18
    331e:	93 1f       	adc	r25, r19
    3320:	d1 01       	movw	r26, r2
    3322:	fc 01       	movw	r30, r24
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    3324:	9c 01       	movw	r18, r24
    3326:	20 50       	subi	r18, 0x00	; 0
    3328:	3e 4f       	sbci	r19, 0xFE	; 254
    332a:	02 c0       	rjmp	.+4      	; 0x3330 <f_read+0x27a>
    332c:	8d 91       	ld	r24, X+
    332e:	81 93       	st	Z+, r24
    3330:	e2 17       	cp	r30, r18
    3332:	f3 07       	cpc	r31, r19
    3334:	d9 f7       	brne	.-10     	; 0x332c <f_read+0x276>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    3336:	eb 81       	ldd	r30, Y+3	; 0x03
    3338:	fc 81       	ldd	r31, Y+4	; 0x04
    333a:	85 81       	ldd	r24, Z+5	; 0x05
    333c:	8e 0d       	add	r24, r14
    333e:	85 83       	std	Z+5, r24	; 0x05
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    3340:	b7 01       	movw	r22, r14
    3342:	76 2f       	mov	r23, r22
    3344:	66 27       	eor	r22, r22
    3346:	77 0f       	add	r23, r23
    3348:	74 c0       	rjmp	.+232    	; 0x3432 <f_read+0x37c>
				continue;
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
    334a:	ab 81       	ldd	r26, Y+3	; 0x03
    334c:	bc 81       	ldd	r27, Y+4	; 0x04
    334e:	14 96       	adiw	r26, 0x04	; 4
    3350:	8c 91       	ld	r24, X
    3352:	14 97       	sbiw	r26, 0x04	; 4
    3354:	86 ff       	sbrs	r24, 6
    3356:	1b c0       	rjmp	.+54     	; 0x338e <f_read+0x2d8>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3358:	56 96       	adiw	r26, 0x16	; 22
    335a:	2d 91       	ld	r18, X+
    335c:	3d 91       	ld	r19, X+
    335e:	4d 91       	ld	r20, X+
    3360:	5c 91       	ld	r21, X
    3362:	59 97       	sbiw	r26, 0x19	; 25
    3364:	f8 01       	movw	r30, r16
    3366:	81 81       	ldd	r24, Z+1	; 0x01
    3368:	b1 01       	movw	r22, r2
    336a:	01 e0       	ldi	r16, 0x01	; 1
    336c:	0e 94 43 07 	call	0xe86	; 0xe86 <disk_write>
    3370:	ab 81       	ldd	r26, Y+3	; 0x03
    3372:	bc 81       	ldd	r27, Y+4	; 0x04
    3374:	14 96       	adiw	r26, 0x04	; 4
    3376:	9c 91       	ld	r25, X
    3378:	14 97       	sbiw	r26, 0x04	; 4
    337a:	88 23       	and	r24, r24
    337c:	21 f0       	breq	.+8      	; 0x3386 <f_read+0x2d0>
					ABORT(fp->fs, FR_DISK_ERR);
    337e:	90 68       	ori	r25, 0x80	; 128
    3380:	14 96       	adiw	r26, 0x04	; 4
    3382:	9c 93       	st	X, r25
    3384:	23 c0       	rjmp	.+70     	; 0x33cc <f_read+0x316>
				fp->flag &= ~FA__DIRTY;
    3386:	9f 7b       	andi	r25, 0xBF	; 191
    3388:	eb 81       	ldd	r30, Y+3	; 0x03
    338a:	fc 81       	ldd	r31, Y+4	; 0x04
    338c:	94 83       	std	Z+4, r25	; 0x04
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
    338e:	eb 81       	ldd	r30, Y+3	; 0x03
    3390:	fc 81       	ldd	r31, Y+4	; 0x04
    3392:	86 89       	ldd	r24, Z+22	; 0x16
    3394:	97 89       	ldd	r25, Z+23	; 0x17
    3396:	a0 8d       	ldd	r26, Z+24	; 0x18
    3398:	b1 8d       	ldd	r27, Z+25	; 0x19
    339a:	8a 15       	cp	r24, r10
    339c:	9b 05       	cpc	r25, r11
    339e:	ac 05       	cpc	r26, r12
    33a0:	bd 05       	cpc	r27, r13
    33a2:	b9 f0       	breq	.+46     	; 0x33d2 <f_read+0x31c>
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
    33a4:	01 90       	ld	r0, Z+
    33a6:	f0 81       	ld	r31, Z
    33a8:	e0 2d       	mov	r30, r0
    33aa:	81 81       	ldd	r24, Z+1	; 0x01
    33ac:	b1 01       	movw	r22, r2
    33ae:	a6 01       	movw	r20, r12
    33b0:	95 01       	movw	r18, r10
    33b2:	01 e0       	ldi	r16, 0x01	; 1
    33b4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <disk_read>
    33b8:	88 23       	and	r24, r24
    33ba:	59 f0       	breq	.+22     	; 0x33d2 <f_read+0x31c>
					ABORT(fp->fs, FR_DISK_ERR);
    33bc:	ab 81       	ldd	r26, Y+3	; 0x03
    33be:	bc 81       	ldd	r27, Y+4	; 0x04
    33c0:	14 96       	adiw	r26, 0x04	; 4
    33c2:	8c 91       	ld	r24, X
    33c4:	14 97       	sbiw	r26, 0x04	; 4
    33c6:	80 68       	ori	r24, 0x80	; 128
    33c8:	14 96       	adiw	r26, 0x04	; 4
    33ca:	8c 93       	st	X, r24
    33cc:	77 24       	eor	r7, r7
    33ce:	73 94       	inc	r7
    33d0:	51 c0       	rjmp	.+162    	; 0x3474 <f_read+0x3be>
			}
#endif
			fp->dsect = sect;
    33d2:	eb 81       	ldd	r30, Y+3	; 0x03
    33d4:	fc 81       	ldd	r31, Y+4	; 0x04
    33d6:	a6 8a       	std	Z+22, r10	; 0x16
    33d8:	b7 8a       	std	Z+23, r11	; 0x17
    33da:	c0 8e       	std	Z+24, r12	; 0x18
    33dc:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    33de:	85 81       	ldd	r24, Z+5	; 0x05
    33e0:	8f 5f       	subi	r24, 0xFF	; 255
    33e2:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    33e4:	ab 81       	ldd	r26, Y+3	; 0x03
    33e6:	bc 81       	ldd	r27, Y+4	; 0x04
    33e8:	16 96       	adiw	r26, 0x06	; 6
    33ea:	2d 91       	ld	r18, X+
    33ec:	3d 91       	ld	r19, X+
    33ee:	4d 91       	ld	r20, X+
    33f0:	5c 91       	ld	r21, X
    33f2:	19 97       	sbiw	r26, 0x09	; 9
    33f4:	c9 01       	movw	r24, r18
    33f6:	91 70       	andi	r25, 0x01	; 1
    33f8:	e0 e0       	ldi	r30, 0x00	; 0
    33fa:	f2 e0       	ldi	r31, 0x02	; 2
    33fc:	e8 1b       	sub	r30, r24
    33fe:	f9 0b       	sbc	r31, r25
    3400:	b4 01       	movw	r22, r8
    3402:	e8 15       	cp	r30, r8
    3404:	f9 05       	cpc	r31, r9
    3406:	08 f4       	brcc	.+2      	; 0x340a <f_read+0x354>
    3408:	bf 01       	movw	r22, r30
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    340a:	8b 01       	movw	r16, r22

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    340c:	f9 01       	movw	r30, r18
    340e:	f1 70       	andi	r31, 0x01	; 1
    3410:	b0 96       	adiw	r30, 0x20	; 32
    3412:	8b 81       	ldd	r24, Y+3	; 0x03
    3414:	9c 81       	ldd	r25, Y+4	; 0x04
    3416:	e8 0f       	add	r30, r24
    3418:	f9 1f       	adc	r31, r25
    341a:	92 01       	movw	r18, r4
    341c:	04 c0       	rjmp	.+8      	; 0x3426 <f_read+0x370>
	while (cnt--) *d++ = *s++;
    341e:	81 91       	ld	r24, Z+
    3420:	d9 01       	movw	r26, r18
    3422:	8d 93       	st	X+, r24
    3424:	9d 01       	movw	r18, r26
    3426:	01 50       	subi	r16, 0x01	; 1
    3428:	10 40       	sbci	r17, 0x00	; 0
    342a:	bf ef       	ldi	r27, 0xFF	; 255
    342c:	0f 3f       	cpi	r16, 0xFF	; 255
    342e:	1b 07       	cpc	r17, r27
    3430:	b1 f7       	brne	.-20     	; 0x341e <f_read+0x368>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    3432:	46 0e       	add	r4, r22
    3434:	57 1e       	adc	r5, r23
    3436:	cb 01       	movw	r24, r22
    3438:	a0 e0       	ldi	r26, 0x00	; 0
    343a:	b0 e0       	ldi	r27, 0x00	; 0
    343c:	eb 81       	ldd	r30, Y+3	; 0x03
    343e:	fc 81       	ldd	r31, Y+4	; 0x04
    3440:	26 81       	ldd	r18, Z+6	; 0x06
    3442:	37 81       	ldd	r19, Z+7	; 0x07
    3444:	40 85       	ldd	r20, Z+8	; 0x08
    3446:	51 85       	ldd	r21, Z+9	; 0x09
    3448:	28 0f       	add	r18, r24
    344a:	39 1f       	adc	r19, r25
    344c:	4a 1f       	adc	r20, r26
    344e:	5b 1f       	adc	r21, r27
    3450:	26 83       	std	Z+6, r18	; 0x06
    3452:	37 83       	std	Z+7, r19	; 0x07
    3454:	40 87       	std	Z+8, r20	; 0x08
    3456:	51 87       	std	Z+9, r21	; 0x09
    3458:	e9 81       	ldd	r30, Y+1	; 0x01
    345a:	fa 81       	ldd	r31, Y+2	; 0x02
    345c:	80 81       	ld	r24, Z
    345e:	91 81       	ldd	r25, Z+1	; 0x01
    3460:	86 0f       	add	r24, r22
    3462:	97 1f       	adc	r25, r23
    3464:	80 83       	st	Z, r24
    3466:	91 83       	std	Z+1, r25	; 0x01
    3468:	86 1a       	sub	r8, r22
    346a:	97 0a       	sbc	r9, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    346c:	81 14       	cp	r8, r1
    346e:	91 04       	cpc	r9, r1
    3470:	09 f0       	breq	.+2      	; 0x3474 <f_read+0x3be>
    3472:	7a ce       	rjmp	.-780    	; 0x3168 <f_read+0xb2>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    3474:	87 2d       	mov	r24, r7
    3476:	24 96       	adiw	r28, 0x04	; 4
    3478:	cd bf       	out	0x3d, r28	; 61
    347a:	de bf       	out	0x3e, r29	; 62
    347c:	cf 91       	pop	r28
    347e:	df 91       	pop	r29
    3480:	1f 91       	pop	r17
    3482:	0f 91       	pop	r16
    3484:	ff 90       	pop	r15
    3486:	ef 90       	pop	r14
    3488:	df 90       	pop	r13
    348a:	cf 90       	pop	r12
    348c:	bf 90       	pop	r11
    348e:	af 90       	pop	r10
    3490:	9f 90       	pop	r9
    3492:	8f 90       	pop	r8
    3494:	7f 90       	pop	r7
    3496:	6f 90       	pop	r6
    3498:	5f 90       	pop	r5
    349a:	4f 90       	pop	r4
    349c:	3f 90       	pop	r3
    349e:	2f 90       	pop	r2
    34a0:	08 95       	ret

000034a2 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    34a2:	2f 92       	push	r2
    34a4:	3f 92       	push	r3
    34a6:	4f 92       	push	r4
    34a8:	5f 92       	push	r5
    34aa:	6f 92       	push	r6
    34ac:	7f 92       	push	r7
    34ae:	8f 92       	push	r8
    34b0:	9f 92       	push	r9
    34b2:	af 92       	push	r10
    34b4:	bf 92       	push	r11
    34b6:	cf 92       	push	r12
    34b8:	df 92       	push	r13
    34ba:	ef 92       	push	r14
    34bc:	ff 92       	push	r15
    34be:	0f 93       	push	r16
    34c0:	1f 93       	push	r17
    34c2:	df 93       	push	r29
    34c4:	cf 93       	push	r28
    34c6:	00 d0       	rcall	.+0      	; 0x34c8 <f_write+0x26>
    34c8:	0f 92       	push	r0
    34ca:	cd b7       	in	r28, 0x3d	; 61
    34cc:	de b7       	in	r29, 0x3e	; 62
    34ce:	8b 83       	std	Y+3, r24	; 0x03
    34d0:	9c 83       	std	Y+4, r25	; 0x04
    34d2:	16 2f       	mov	r17, r22
    34d4:	07 2f       	mov	r16, r23
    34d6:	4a 01       	movw	r8, r20
    34d8:	29 83       	std	Y+1, r18	; 0x01
    34da:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    34dc:	d9 01       	movw	r26, r18
    34de:	1d 92       	st	X+, r1
    34e0:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    34e2:	fc 01       	movw	r30, r24
    34e4:	62 81       	ldd	r22, Z+2	; 0x02
    34e6:	73 81       	ldd	r23, Z+3	; 0x03
    34e8:	80 81       	ld	r24, Z
    34ea:	91 81       	ldd	r25, Z+1	; 0x01
    34ec:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <validate>
    34f0:	68 2e       	mov	r6, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    34f2:	88 23       	and	r24, r24
    34f4:	09 f0       	breq	.+2      	; 0x34f8 <f_write+0x56>
    34f6:	02 c2       	rjmp	.+1028   	; 0x38fc <f_write+0x45a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    34f8:	ab 81       	ldd	r26, Y+3	; 0x03
    34fa:	bc 81       	ldd	r27, Y+4	; 0x04
    34fc:	14 96       	adiw	r26, 0x04	; 4
    34fe:	8c 91       	ld	r24, X
    3500:	87 fd       	sbrc	r24, 7
    3502:	7c c0       	rjmp	.+248    	; 0x35fc <f_write+0x15a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    3504:	81 fd       	sbrc	r24, 1
    3506:	03 c0       	rjmp	.+6      	; 0x350e <f_write+0x6c>
    3508:	47 e0       	ldi	r20, 0x07	; 7
    350a:	64 2e       	mov	r6, r20
    350c:	f7 c1       	rjmp	.+1006   	; 0x38fc <f_write+0x45a>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    350e:	eb 81       	ldd	r30, Y+3	; 0x03
    3510:	fc 81       	ldd	r31, Y+4	; 0x04
    3512:	22 85       	ldd	r18, Z+10	; 0x0a
    3514:	33 85       	ldd	r19, Z+11	; 0x0b
    3516:	44 85       	ldd	r20, Z+12	; 0x0c
    3518:	55 85       	ldd	r21, Z+13	; 0x0d
    351a:	c4 01       	movw	r24, r8
    351c:	a0 e0       	ldi	r26, 0x00	; 0
    351e:	b0 e0       	ldi	r27, 0x00	; 0
    3520:	82 0f       	add	r24, r18
    3522:	93 1f       	adc	r25, r19
    3524:	a4 1f       	adc	r26, r20
    3526:	b5 1f       	adc	r27, r21
    3528:	82 17       	cp	r24, r18
    352a:	93 07       	cpc	r25, r19
    352c:	a4 07       	cpc	r26, r20
    352e:	b5 07       	cpc	r27, r21
    3530:	10 f4       	brcc	.+4      	; 0x3536 <f_write+0x94>
    3532:	88 24       	eor	r8, r8
    3534:	99 24       	eor	r9, r9
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    3536:	81 2f       	mov	r24, r17
    3538:	90 2f       	mov	r25, r16
    353a:	9c 01       	movw	r18, r24
    353c:	29 01       	movw	r4, r18
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    353e:	30 e2       	ldi	r19, 0x20	; 32
    3540:	23 2e       	mov	r2, r19
    3542:	31 2c       	mov	r3, r1
    3544:	6b 81       	ldd	r22, Y+3	; 0x03
    3546:	7c 81       	ldd	r23, Y+4	; 0x04
    3548:	26 0e       	add	r2, r22
    354a:	37 1e       	adc	r3, r23
    354c:	b2 c1       	rjmp	.+868    	; 0x38b2 <f_write+0x410>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    354e:	ab 81       	ldd	r26, Y+3	; 0x03
    3550:	bc 81       	ldd	r27, Y+4	; 0x04
    3552:	16 96       	adiw	r26, 0x06	; 6
    3554:	2d 91       	ld	r18, X+
    3556:	3d 91       	ld	r19, X+
    3558:	4d 91       	ld	r20, X+
    355a:	5c 91       	ld	r21, X
    355c:	19 97       	sbiw	r26, 0x09	; 9
    355e:	da 01       	movw	r26, r20
    3560:	c9 01       	movw	r24, r18
    3562:	91 70       	andi	r25, 0x01	; 1
    3564:	a0 70       	andi	r26, 0x00	; 0
    3566:	b0 70       	andi	r27, 0x00	; 0
    3568:	00 97       	sbiw	r24, 0x00	; 0
    356a:	a1 05       	cpc	r26, r1
    356c:	b1 05       	cpc	r27, r1
    356e:	09 f0       	breq	.+2      	; 0x3572 <f_write+0xd0>
    3570:	58 c1       	rjmp	.+688    	; 0x3822 <f_write+0x380>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    3572:	ab 81       	ldd	r26, Y+3	; 0x03
    3574:	bc 81       	ldd	r27, Y+4	; 0x04
    3576:	ed 91       	ld	r30, X+
    3578:	fc 91       	ld	r31, X
    357a:	11 97       	sbiw	r26, 0x01	; 1
    357c:	15 96       	adiw	r26, 0x05	; 5
    357e:	9c 91       	ld	r25, X
    3580:	15 97       	sbiw	r26, 0x05	; 5
    3582:	82 81       	ldd	r24, Z+2	; 0x02
    3584:	98 17       	cp	r25, r24
    3586:	08 f4       	brcc	.+2      	; 0x358a <f_write+0xe8>
    3588:	54 c0       	rjmp	.+168    	; 0x3632 <f_write+0x190>
				if (fp->fptr == 0) {				/* On the top of the file? */
    358a:	21 15       	cp	r18, r1
    358c:	31 05       	cpc	r19, r1
    358e:	41 05       	cpc	r20, r1
    3590:	51 05       	cpc	r21, r1
    3592:	c9 f4       	brne	.+50     	; 0x35c6 <f_write+0x124>
					clst = fp->org_clust;			/* Follow from the origin */
    3594:	1e 96       	adiw	r26, 0x0e	; 14
    3596:	6d 91       	ld	r22, X+
    3598:	7d 91       	ld	r23, X+
    359a:	8d 91       	ld	r24, X+
    359c:	9c 91       	ld	r25, X
    359e:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    35a0:	61 15       	cp	r22, r1
    35a2:	71 05       	cpc	r23, r1
    35a4:	81 05       	cpc	r24, r1
    35a6:	91 05       	cpc	r25, r1
    35a8:	f9 f4       	brne	.+62     	; 0x35e8 <f_write+0x146>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    35aa:	cf 01       	movw	r24, r30
    35ac:	40 e0       	ldi	r20, 0x00	; 0
    35ae:	50 e0       	ldi	r21, 0x00	; 0
    35b0:	60 e0       	ldi	r22, 0x00	; 0
    35b2:	70 e0       	ldi	r23, 0x00	; 0
    35b4:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <create_chain>
    35b8:	eb 81       	ldd	r30, Y+3	; 0x03
    35ba:	fc 81       	ldd	r31, Y+4	; 0x04
    35bc:	66 87       	std	Z+14, r22	; 0x0e
    35be:	77 87       	std	Z+15, r23	; 0x0f
    35c0:	80 8b       	std	Z+16, r24	; 0x10
    35c2:	91 8b       	std	Z+17, r25	; 0x11
    35c4:	0b c0       	rjmp	.+22     	; 0x35dc <f_write+0x13a>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    35c6:	ab 81       	ldd	r26, Y+3	; 0x03
    35c8:	bc 81       	ldd	r27, Y+4	; 0x04
    35ca:	52 96       	adiw	r26, 0x12	; 18
    35cc:	4d 91       	ld	r20, X+
    35ce:	5d 91       	ld	r21, X+
    35d0:	6d 91       	ld	r22, X+
    35d2:	7c 91       	ld	r23, X
    35d4:	55 97       	sbiw	r26, 0x15	; 21
    35d6:	cf 01       	movw	r24, r30
    35d8:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    35dc:	61 15       	cp	r22, r1
    35de:	71 05       	cpc	r23, r1
    35e0:	81 05       	cpc	r24, r1
    35e2:	91 05       	cpc	r25, r1
    35e4:	09 f4       	brne	.+2      	; 0x35e8 <f_write+0x146>
    35e6:	69 c1       	rjmp	.+722    	; 0x38ba <f_write+0x418>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    35e8:	61 30       	cpi	r22, 0x01	; 1
    35ea:	71 05       	cpc	r23, r1
    35ec:	81 05       	cpc	r24, r1
    35ee:	91 05       	cpc	r25, r1
    35f0:	41 f4       	brne	.+16     	; 0x3602 <f_write+0x160>
    35f2:	eb 81       	ldd	r30, Y+3	; 0x03
    35f4:	fc 81       	ldd	r31, Y+4	; 0x04
    35f6:	84 81       	ldd	r24, Z+4	; 0x04
    35f8:	80 68       	ori	r24, 0x80	; 128
    35fa:	84 83       	std	Z+4, r24	; 0x04
    35fc:	22 e0       	ldi	r18, 0x02	; 2
    35fe:	62 2e       	mov	r6, r18
    3600:	7d c1       	rjmp	.+762    	; 0x38fc <f_write+0x45a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3602:	6f 3f       	cpi	r22, 0xFF	; 255
    3604:	ff ef       	ldi	r31, 0xFF	; 255
    3606:	7f 07       	cpc	r23, r31
    3608:	ff ef       	ldi	r31, 0xFF	; 255
    360a:	8f 07       	cpc	r24, r31
    360c:	ff ef       	ldi	r31, 0xFF	; 255
    360e:	9f 07       	cpc	r25, r31
    3610:	49 f4       	brne	.+18     	; 0x3624 <f_write+0x182>
    3612:	ab 81       	ldd	r26, Y+3	; 0x03
    3614:	bc 81       	ldd	r27, Y+4	; 0x04
    3616:	14 96       	adiw	r26, 0x04	; 4
    3618:	8c 91       	ld	r24, X
    361a:	14 97       	sbiw	r26, 0x04	; 4
    361c:	80 68       	ori	r24, 0x80	; 128
    361e:	14 96       	adiw	r26, 0x04	; 4
    3620:	8c 93       	st	X, r24
    3622:	ee c0       	rjmp	.+476    	; 0x3800 <f_write+0x35e>
				fp->curr_clust = clst;				/* Update current cluster */
    3624:	eb 81       	ldd	r30, Y+3	; 0x03
    3626:	fc 81       	ldd	r31, Y+4	; 0x04
    3628:	62 8b       	std	Z+18, r22	; 0x12
    362a:	73 8b       	std	Z+19, r23	; 0x13
    362c:	84 8b       	std	Z+20, r24	; 0x14
    362e:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    3630:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
    3632:	ab 81       	ldd	r26, Y+3	; 0x03
    3634:	bc 81       	ldd	r27, Y+4	; 0x04
    3636:	14 96       	adiw	r26, 0x04	; 4
    3638:	8c 91       	ld	r24, X
    363a:	14 97       	sbiw	r26, 0x04	; 4
    363c:	86 ff       	sbrs	r24, 6
    363e:	1b c0       	rjmp	.+54     	; 0x3676 <f_write+0x1d4>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3640:	ed 91       	ld	r30, X+
    3642:	fc 91       	ld	r31, X
    3644:	11 97       	sbiw	r26, 0x01	; 1
    3646:	56 96       	adiw	r26, 0x16	; 22
    3648:	2d 91       	ld	r18, X+
    364a:	3d 91       	ld	r19, X+
    364c:	4d 91       	ld	r20, X+
    364e:	5c 91       	ld	r21, X
    3650:	59 97       	sbiw	r26, 0x19	; 25
    3652:	81 81       	ldd	r24, Z+1	; 0x01
    3654:	b1 01       	movw	r22, r2
    3656:	01 e0       	ldi	r16, 0x01	; 1
    3658:	0e 94 43 07 	call	0xe86	; 0xe86 <disk_write>
    365c:	eb 81       	ldd	r30, Y+3	; 0x03
    365e:	fc 81       	ldd	r31, Y+4	; 0x04
    3660:	94 81       	ldd	r25, Z+4	; 0x04
    3662:	88 23       	and	r24, r24
    3664:	19 f0       	breq	.+6      	; 0x366c <f_write+0x1ca>
					ABORT(fp->fs, FR_DISK_ERR);
    3666:	90 68       	ori	r25, 0x80	; 128
    3668:	94 83       	std	Z+4, r25	; 0x04
    366a:	ca c0       	rjmp	.+404    	; 0x3800 <f_write+0x35e>
				fp->flag &= ~FA__DIRTY;
    366c:	9f 7b       	andi	r25, 0xBF	; 191
    366e:	ab 81       	ldd	r26, Y+3	; 0x03
    3670:	bc 81       	ldd	r27, Y+4	; 0x04
    3672:	14 96       	adiw	r26, 0x04	; 4
    3674:	9c 93       	st	X, r25
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    3676:	eb 81       	ldd	r30, Y+3	; 0x03
    3678:	fc 81       	ldd	r31, Y+4	; 0x04
    367a:	00 81       	ld	r16, Z
    367c:	11 81       	ldd	r17, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    367e:	22 89       	ldd	r18, Z+18	; 0x12
    3680:	33 89       	ldd	r19, Z+19	; 0x13
    3682:	44 89       	ldd	r20, Z+20	; 0x14
    3684:	55 89       	ldd	r21, Z+21	; 0x15
    3686:	22 50       	subi	r18, 0x02	; 2
    3688:	30 40       	sbci	r19, 0x00	; 0
    368a:	40 40       	sbci	r20, 0x00	; 0
    368c:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    368e:	f8 01       	movw	r30, r16
    3690:	82 8d       	ldd	r24, Z+26	; 0x1a
    3692:	93 8d       	ldd	r25, Z+27	; 0x1b
    3694:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3696:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3698:	02 97       	sbiw	r24, 0x02	; 2
    369a:	a1 09       	sbc	r26, r1
    369c:	b1 09       	sbc	r27, r1
    369e:	28 17       	cp	r18, r24
    36a0:	39 07       	cpc	r19, r25
    36a2:	4a 07       	cpc	r20, r26
    36a4:	5b 07       	cpc	r21, r27
    36a6:	b8 f4       	brcc	.+46     	; 0x36d6 <f_write+0x234>
	return clst * fs->csize + fs->database;
    36a8:	72 80       	ldd	r7, Z+2	; 0x02
    36aa:	67 2d       	mov	r22, r7
    36ac:	70 e0       	ldi	r23, 0x00	; 0
    36ae:	80 e0       	ldi	r24, 0x00	; 0
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <__mulsi3>
    36b6:	9b 01       	movw	r18, r22
    36b8:	ac 01       	movw	r20, r24
    36ba:	f8 01       	movw	r30, r16
    36bc:	86 a1       	ldd	r24, Z+38	; 0x26
    36be:	97 a1       	ldd	r25, Z+39	; 0x27
    36c0:	a0 a5       	ldd	r26, Z+40	; 0x28
    36c2:	b1 a5       	ldd	r27, Z+41	; 0x29
    36c4:	28 0f       	add	r18, r24
    36c6:	39 1f       	adc	r19, r25
    36c8:	4a 1f       	adc	r20, r26
    36ca:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    36cc:	21 15       	cp	r18, r1
    36ce:	31 05       	cpc	r19, r1
    36d0:	41 05       	cpc	r20, r1
    36d2:	51 05       	cpc	r21, r1
    36d4:	49 f4       	brne	.+18     	; 0x36e8 <f_write+0x246>
    36d6:	ab 81       	ldd	r26, Y+3	; 0x03
    36d8:	bc 81       	ldd	r27, Y+4	; 0x04
    36da:	14 96       	adiw	r26, 0x04	; 4
    36dc:	8c 91       	ld	r24, X
    36de:	14 97       	sbiw	r26, 0x04	; 4
    36e0:	80 68       	ori	r24, 0x80	; 128
    36e2:	14 96       	adiw	r26, 0x04	; 4
    36e4:	8c 93       	st	X, r24
    36e6:	8a cf       	rjmp	.-236    	; 0x35fc <f_write+0x15a>
			sect += fp->csect;
    36e8:	eb 81       	ldd	r30, Y+3	; 0x03
    36ea:	fc 81       	ldd	r31, Y+4	; 0x04
    36ec:	85 81       	ldd	r24, Z+5	; 0x05
    36ee:	69 01       	movw	r12, r18
    36f0:	7a 01       	movw	r14, r20
    36f2:	c8 0e       	add	r12, r24
    36f4:	d1 1c       	adc	r13, r1
    36f6:	e1 1c       	adc	r14, r1
    36f8:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    36fa:	54 01       	movw	r10, r8
    36fc:	ab 2c       	mov	r10, r11
    36fe:	bb 24       	eor	r11, r11
    3700:	a6 94       	lsr	r10
			if (cc) {								/* Write maximum contiguous sectors directly */
    3702:	a1 14       	cp	r10, r1
    3704:	b1 04       	cpc	r11, r1
    3706:	09 f4       	brne	.+2      	; 0x370a <f_write+0x268>
    3708:	53 c0       	rjmp	.+166    	; 0x37b0 <f_write+0x30e>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    370a:	28 2f       	mov	r18, r24
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	c5 01       	movw	r24, r10
    3710:	82 0f       	add	r24, r18
    3712:	93 1f       	adc	r25, r19
    3714:	67 2d       	mov	r22, r7
    3716:	70 e0       	ldi	r23, 0x00	; 0
    3718:	68 17       	cp	r22, r24
    371a:	79 07       	cpc	r23, r25
    371c:	18 f4       	brcc	.+6      	; 0x3724 <f_write+0x282>
					cc = fp->fs->csize - fp->csect;
    371e:	5b 01       	movw	r10, r22
    3720:	a2 1a       	sub	r10, r18
    3722:	b3 0a       	sbc	r11, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    3724:	d8 01       	movw	r26, r16
    3726:	11 96       	adiw	r26, 0x01	; 1
    3728:	8c 91       	ld	r24, X
    372a:	b2 01       	movw	r22, r4
    372c:	a7 01       	movw	r20, r14
    372e:	96 01       	movw	r18, r12
    3730:	0a 2d       	mov	r16, r10
    3732:	0e 94 43 07 	call	0xe86	; 0xe86 <disk_write>
    3736:	88 23       	and	r24, r24
    3738:	09 f0       	breq	.+2      	; 0x373c <f_write+0x29a>
    373a:	5d c0       	rjmp	.+186    	; 0x37f6 <f_write+0x354>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
    373c:	ab 81       	ldd	r26, Y+3	; 0x03
    373e:	bc 81       	ldd	r27, Y+4	; 0x04
    3740:	56 96       	adiw	r26, 0x16	; 22
    3742:	2d 91       	ld	r18, X+
    3744:	3d 91       	ld	r19, X+
    3746:	4d 91       	ld	r20, X+
    3748:	5c 91       	ld	r21, X
    374a:	59 97       	sbiw	r26, 0x19	; 25
    374c:	2c 19       	sub	r18, r12
    374e:	3d 09       	sbc	r19, r13
    3750:	4e 09       	sbc	r20, r14
    3752:	5f 09       	sbc	r21, r15
    3754:	c5 01       	movw	r24, r10
    3756:	a0 e0       	ldi	r26, 0x00	; 0
    3758:	b0 e0       	ldi	r27, 0x00	; 0
    375a:	28 17       	cp	r18, r24
    375c:	39 07       	cpc	r19, r25
    375e:	4a 07       	cpc	r20, r26
    3760:	5b 07       	cpc	r21, r27
    3762:	c8 f4       	brcc	.+50     	; 0x3796 <f_write+0x2f4>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    3764:	19 e0       	ldi	r17, 0x09	; 9
    3766:	22 0f       	add	r18, r18
    3768:	33 1f       	adc	r19, r19
    376a:	44 1f       	adc	r20, r20
    376c:	55 1f       	adc	r21, r21
    376e:	1a 95       	dec	r17
    3770:	d1 f7       	brne	.-12     	; 0x3766 <f_write+0x2c4>
    3772:	f2 01       	movw	r30, r4
    3774:	e2 0f       	add	r30, r18
    3776:	f3 1f       	adc	r31, r19
    3778:	d1 01       	movw	r26, r2
	while (cnt--) *d++ = *s++;
    377a:	9f 01       	movw	r18, r30
    377c:	20 50       	subi	r18, 0x00	; 0
    377e:	3e 4f       	sbci	r19, 0xFE	; 254
    3780:	02 c0       	rjmp	.+4      	; 0x3786 <f_write+0x2e4>
    3782:	81 91       	ld	r24, Z+
    3784:	8d 93       	st	X+, r24
    3786:	e2 17       	cp	r30, r18
    3788:	f3 07       	cpc	r31, r19
    378a:	d9 f7       	brne	.-10     	; 0x3782 <f_write+0x2e0>
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
    378c:	eb 81       	ldd	r30, Y+3	; 0x03
    378e:	fc 81       	ldd	r31, Y+4	; 0x04
    3790:	84 81       	ldd	r24, Z+4	; 0x04
    3792:	8f 7b       	andi	r24, 0xBF	; 191
    3794:	84 83       	std	Z+4, r24	; 0x04
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    3796:	ab 81       	ldd	r26, Y+3	; 0x03
    3798:	bc 81       	ldd	r27, Y+4	; 0x04
    379a:	15 96       	adiw	r26, 0x05	; 5
    379c:	8c 91       	ld	r24, X
    379e:	15 97       	sbiw	r26, 0x05	; 5
    37a0:	8a 0d       	add	r24, r10
    37a2:	15 96       	adiw	r26, 0x05	; 5
    37a4:	8c 93       	st	X, r24
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    37a6:	b5 01       	movw	r22, r10
    37a8:	76 2f       	mov	r23, r22
    37aa:	66 27       	eor	r22, r22
    37ac:	77 0f       	add	r23, r23
    37ae:	64 c0       	rjmp	.+200    	; 0x3878 <f_write+0x3d6>
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
    37b0:	eb 81       	ldd	r30, Y+3	; 0x03
    37b2:	fc 81       	ldd	r31, Y+4	; 0x04
    37b4:	86 89       	ldd	r24, Z+22	; 0x16
    37b6:	97 89       	ldd	r25, Z+23	; 0x17
    37b8:	a0 8d       	ldd	r26, Z+24	; 0x18
    37ba:	b1 8d       	ldd	r27, Z+25	; 0x19
    37bc:	8c 15       	cp	r24, r12
    37be:	9d 05       	cpc	r25, r13
    37c0:	ae 05       	cpc	r26, r14
    37c2:	bf 05       	cpc	r27, r15
    37c4:	01 f1       	breq	.+64     	; 0x3806 <f_write+0x364>
				if (fp->fptr < fp->fsize &&
    37c6:	26 81       	ldd	r18, Z+6	; 0x06
    37c8:	37 81       	ldd	r19, Z+7	; 0x07
    37ca:	40 85       	ldd	r20, Z+8	; 0x08
    37cc:	51 85       	ldd	r21, Z+9	; 0x09
    37ce:	82 85       	ldd	r24, Z+10	; 0x0a
    37d0:	93 85       	ldd	r25, Z+11	; 0x0b
    37d2:	a4 85       	ldd	r26, Z+12	; 0x0c
    37d4:	b5 85       	ldd	r27, Z+13	; 0x0d
    37d6:	28 17       	cp	r18, r24
    37d8:	39 07       	cpc	r19, r25
    37da:	4a 07       	cpc	r20, r26
    37dc:	5b 07       	cpc	r21, r27
    37de:	98 f4       	brcc	.+38     	; 0x3806 <f_write+0x364>
    37e0:	d8 01       	movw	r26, r16
    37e2:	11 96       	adiw	r26, 0x01	; 1
    37e4:	8c 91       	ld	r24, X
    37e6:	b1 01       	movw	r22, r2
    37e8:	a7 01       	movw	r20, r14
    37ea:	96 01       	movw	r18, r12
    37ec:	01 e0       	ldi	r16, 0x01	; 1
    37ee:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <disk_read>
    37f2:	88 23       	and	r24, r24
    37f4:	41 f0       	breq	.+16     	; 0x3806 <f_write+0x364>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    37f6:	eb 81       	ldd	r30, Y+3	; 0x03
    37f8:	fc 81       	ldd	r31, Y+4	; 0x04
    37fa:	84 81       	ldd	r24, Z+4	; 0x04
    37fc:	80 68       	ori	r24, 0x80	; 128
    37fe:	84 83       	std	Z+4, r24	; 0x04
    3800:	66 24       	eor	r6, r6
    3802:	63 94       	inc	r6
    3804:	7b c0       	rjmp	.+246    	; 0x38fc <f_write+0x45a>
			}
#endif
			fp->dsect = sect;
    3806:	ab 81       	ldd	r26, Y+3	; 0x03
    3808:	bc 81       	ldd	r27, Y+4	; 0x04
    380a:	56 96       	adiw	r26, 0x16	; 22
    380c:	cd 92       	st	X+, r12
    380e:	dd 92       	st	X+, r13
    3810:	ed 92       	st	X+, r14
    3812:	fc 92       	st	X, r15
    3814:	59 97       	sbiw	r26, 0x19	; 25
			fp->csect++;							/* Next sector address in the cluster */
    3816:	15 96       	adiw	r26, 0x05	; 5
    3818:	8c 91       	ld	r24, X
    381a:	15 97       	sbiw	r26, 0x05	; 5
    381c:	8f 5f       	subi	r24, 0xFF	; 255
    381e:	15 96       	adiw	r26, 0x05	; 5
    3820:	8c 93       	st	X, r24
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    3822:	eb 81       	ldd	r30, Y+3	; 0x03
    3824:	fc 81       	ldd	r31, Y+4	; 0x04
    3826:	26 81       	ldd	r18, Z+6	; 0x06
    3828:	37 81       	ldd	r19, Z+7	; 0x07
    382a:	40 85       	ldd	r20, Z+8	; 0x08
    382c:	51 85       	ldd	r21, Z+9	; 0x09
    382e:	c9 01       	movw	r24, r18
    3830:	91 70       	andi	r25, 0x01	; 1
    3832:	60 e0       	ldi	r22, 0x00	; 0
    3834:	72 e0       	ldi	r23, 0x02	; 2
    3836:	68 1b       	sub	r22, r24
    3838:	79 0b       	sbc	r23, r25
    383a:	cb 01       	movw	r24, r22
    383c:	b4 01       	movw	r22, r8
    383e:	88 15       	cp	r24, r8
    3840:	99 05       	cpc	r25, r9
    3842:	08 f4       	brcc	.+2      	; 0x3846 <f_write+0x3a4>
    3844:	bc 01       	movw	r22, r24
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    3846:	8b 01       	movw	r16, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    3848:	f9 01       	movw	r30, r18
    384a:	f1 70       	andi	r31, 0x01	; 1
    384c:	b0 96       	adiw	r30, 0x20	; 32
    384e:	8b 81       	ldd	r24, Y+3	; 0x03
    3850:	9c 81       	ldd	r25, Y+4	; 0x04
    3852:	e8 0f       	add	r30, r24
    3854:	f9 1f       	adc	r31, r25
    3856:	92 01       	movw	r18, r4
    3858:	04 c0       	rjmp	.+8      	; 0x3862 <f_write+0x3c0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    385a:	d9 01       	movw	r26, r18
    385c:	8d 91       	ld	r24, X+
    385e:	9d 01       	movw	r18, r26
    3860:	81 93       	st	Z+, r24
    3862:	01 50       	subi	r16, 0x01	; 1
    3864:	10 40       	sbci	r17, 0x00	; 0
    3866:	bf ef       	ldi	r27, 0xFF	; 255
    3868:	0f 3f       	cpi	r16, 0xFF	; 255
    386a:	1b 07       	cpc	r17, r27
    386c:	b1 f7       	brne	.-20     	; 0x385a <f_write+0x3b8>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
    386e:	eb 81       	ldd	r30, Y+3	; 0x03
    3870:	fc 81       	ldd	r31, Y+4	; 0x04
    3872:	84 81       	ldd	r24, Z+4	; 0x04
    3874:	80 64       	ori	r24, 0x40	; 64
    3876:	84 83       	std	Z+4, r24	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    3878:	46 0e       	add	r4, r22
    387a:	57 1e       	adc	r5, r23
    387c:	cb 01       	movw	r24, r22
    387e:	a0 e0       	ldi	r26, 0x00	; 0
    3880:	b0 e0       	ldi	r27, 0x00	; 0
    3882:	eb 81       	ldd	r30, Y+3	; 0x03
    3884:	fc 81       	ldd	r31, Y+4	; 0x04
    3886:	26 81       	ldd	r18, Z+6	; 0x06
    3888:	37 81       	ldd	r19, Z+7	; 0x07
    388a:	40 85       	ldd	r20, Z+8	; 0x08
    388c:	51 85       	ldd	r21, Z+9	; 0x09
    388e:	28 0f       	add	r18, r24
    3890:	39 1f       	adc	r19, r25
    3892:	4a 1f       	adc	r20, r26
    3894:	5b 1f       	adc	r21, r27
    3896:	26 83       	std	Z+6, r18	; 0x06
    3898:	37 83       	std	Z+7, r19	; 0x07
    389a:	40 87       	std	Z+8, r20	; 0x08
    389c:	51 87       	std	Z+9, r21	; 0x09
    389e:	e9 81       	ldd	r30, Y+1	; 0x01
    38a0:	fa 81       	ldd	r31, Y+2	; 0x02
    38a2:	80 81       	ld	r24, Z
    38a4:	91 81       	ldd	r25, Z+1	; 0x01
    38a6:	86 0f       	add	r24, r22
    38a8:	97 1f       	adc	r25, r23
    38aa:	80 83       	st	Z, r24
    38ac:	91 83       	std	Z+1, r25	; 0x01
    38ae:	86 1a       	sub	r8, r22
    38b0:	97 0a       	sbc	r9, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    38b2:	81 14       	cp	r8, r1
    38b4:	91 04       	cpc	r9, r1
    38b6:	09 f0       	breq	.+2      	; 0x38ba <f_write+0x418>
    38b8:	4a ce       	rjmp	.-876    	; 0x354e <f_write+0xac>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    38ba:	ab 81       	ldd	r26, Y+3	; 0x03
    38bc:	bc 81       	ldd	r27, Y+4	; 0x04
    38be:	16 96       	adiw	r26, 0x06	; 6
    38c0:	2d 91       	ld	r18, X+
    38c2:	3d 91       	ld	r19, X+
    38c4:	4d 91       	ld	r20, X+
    38c6:	5c 91       	ld	r21, X
    38c8:	19 97       	sbiw	r26, 0x09	; 9
    38ca:	1a 96       	adiw	r26, 0x0a	; 10
    38cc:	8d 91       	ld	r24, X+
    38ce:	9d 91       	ld	r25, X+
    38d0:	0d 90       	ld	r0, X+
    38d2:	bc 91       	ld	r27, X
    38d4:	a0 2d       	mov	r26, r0
    38d6:	82 17       	cp	r24, r18
    38d8:	93 07       	cpc	r25, r19
    38da:	a4 07       	cpc	r26, r20
    38dc:	b5 07       	cpc	r27, r21
    38de:	30 f4       	brcc	.+12     	; 0x38ec <f_write+0x44a>
    38e0:	eb 81       	ldd	r30, Y+3	; 0x03
    38e2:	fc 81       	ldd	r31, Y+4	; 0x04
    38e4:	22 87       	std	Z+10, r18	; 0x0a
    38e6:	33 87       	std	Z+11, r19	; 0x0b
    38e8:	44 87       	std	Z+12, r20	; 0x0c
    38ea:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    38ec:	ab 81       	ldd	r26, Y+3	; 0x03
    38ee:	bc 81       	ldd	r27, Y+4	; 0x04
    38f0:	14 96       	adiw	r26, 0x04	; 4
    38f2:	8c 91       	ld	r24, X
    38f4:	14 97       	sbiw	r26, 0x04	; 4
    38f6:	80 62       	ori	r24, 0x20	; 32
    38f8:	14 96       	adiw	r26, 0x04	; 4
    38fa:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    38fc:	86 2d       	mov	r24, r6
    38fe:	24 96       	adiw	r28, 0x04	; 4
    3900:	cd bf       	out	0x3d, r28	; 61
    3902:	de bf       	out	0x3e, r29	; 62
    3904:	cf 91       	pop	r28
    3906:	df 91       	pop	r29
    3908:	1f 91       	pop	r17
    390a:	0f 91       	pop	r16
    390c:	ff 90       	pop	r15
    390e:	ef 90       	pop	r14
    3910:	df 90       	pop	r13
    3912:	cf 90       	pop	r12
    3914:	bf 90       	pop	r11
    3916:	af 90       	pop	r10
    3918:	9f 90       	pop	r9
    391a:	8f 90       	pop	r8
    391c:	7f 90       	pop	r7
    391e:	6f 90       	pop	r6
    3920:	5f 90       	pop	r5
    3922:	4f 90       	pop	r4
    3924:	3f 90       	pop	r3
    3926:	2f 90       	pop	r2
    3928:	08 95       	ret

0000392a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    392a:	0f 93       	push	r16
    392c:	cf 93       	push	r28
    392e:	df 93       	push	r29
    3930:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3932:	6a 81       	ldd	r22, Y+2	; 0x02
    3934:	7b 81       	ldd	r23, Y+3	; 0x03
    3936:	88 81       	ld	r24, Y
    3938:	99 81       	ldd	r25, Y+1	; 0x01
    393a:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <validate>
    393e:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    3940:	88 23       	and	r24, r24
    3942:	09 f0       	breq	.+2      	; 0x3946 <f_sync+0x1c>
    3944:	65 c0       	rjmp	.+202    	; 0x3a10 <f_sync+0xe6>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    3946:	8c 81       	ldd	r24, Y+4	; 0x04
    3948:	85 ff       	sbrs	r24, 5
    394a:	62 c0       	rjmp	.+196    	; 0x3a10 <f_sync+0xe6>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    394c:	86 ff       	sbrs	r24, 6
    394e:	14 c0       	rjmp	.+40     	; 0x3978 <f_sync+0x4e>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3950:	e8 81       	ld	r30, Y
    3952:	f9 81       	ldd	r31, Y+1	; 0x01
    3954:	be 01       	movw	r22, r28
    3956:	60 5e       	subi	r22, 0xE0	; 224
    3958:	7f 4f       	sbci	r23, 0xFF	; 255
    395a:	2e 89       	ldd	r18, Y+22	; 0x16
    395c:	3f 89       	ldd	r19, Y+23	; 0x17
    395e:	48 8d       	ldd	r20, Y+24	; 0x18
    3960:	59 8d       	ldd	r21, Y+25	; 0x19
    3962:	81 81       	ldd	r24, Z+1	; 0x01
    3964:	01 e0       	ldi	r16, 0x01	; 1
    3966:	0e 94 43 07 	call	0xe86	; 0xe86 <disk_write>
    396a:	88 23       	and	r24, r24
    396c:	11 f0       	breq	.+4      	; 0x3972 <f_sync+0x48>
    396e:	91 e0       	ldi	r25, 0x01	; 1
    3970:	4f c0       	rjmp	.+158    	; 0x3a10 <f_sync+0xe6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    3972:	8c 81       	ldd	r24, Y+4	; 0x04
    3974:	8f 7b       	andi	r24, 0xBF	; 191
    3976:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    3978:	4a 8d       	ldd	r20, Y+26	; 0x1a
    397a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    397c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    397e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3980:	88 81       	ld	r24, Y
    3982:	99 81       	ldd	r25, Y+1	; 0x01
    3984:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    3988:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    398a:	88 23       	and	r24, r24
    398c:	09 f0       	breq	.+2      	; 0x3990 <f_sync+0x66>
    398e:	40 c0       	rjmp	.+128    	; 0x3a10 <f_sync+0xe6>
				dir = fp->dir_ptr;
    3990:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3992:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    3994:	83 85       	ldd	r24, Z+11	; 0x0b
    3996:	80 62       	ori	r24, 0x20	; 32
    3998:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    399a:	8a 85       	ldd	r24, Y+10	; 0x0a
    399c:	84 8f       	std	Z+28, r24	; 0x1c
    399e:	8b 85       	ldd	r24, Y+11	; 0x0b
    39a0:	85 8f       	std	Z+29, r24	; 0x1d
    39a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    39a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    39a6:	ac 85       	ldd	r26, Y+12	; 0x0c
    39a8:	bd 85       	ldd	r27, Y+13	; 0x0d
    39aa:	cd 01       	movw	r24, r26
    39ac:	aa 27       	eor	r26, r26
    39ae:	bb 27       	eor	r27, r27
    39b0:	86 8f       	std	Z+30, r24	; 0x1e
    39b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    39b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    39b6:	ac 85       	ldd	r26, Y+12	; 0x0c
    39b8:	bd 85       	ldd	r27, Y+13	; 0x0d
    39ba:	8b 2f       	mov	r24, r27
    39bc:	99 27       	eor	r25, r25
    39be:	aa 27       	eor	r26, r26
    39c0:	bb 27       	eor	r27, r27
    39c2:	87 8f       	std	Z+31, r24	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    39c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    39c6:	82 8f       	std	Z+26, r24	; 0x1a
    39c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    39ca:	83 8f       	std	Z+27, r24	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    39cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    39ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    39d0:	a8 89       	ldd	r26, Y+16	; 0x10
    39d2:	b9 89       	ldd	r27, Y+17	; 0x11
    39d4:	cd 01       	movw	r24, r26
    39d6:	aa 27       	eor	r26, r26
    39d8:	bb 27       	eor	r27, r27
    39da:	84 8b       	std	Z+20, r24	; 0x14
    39dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    39de:	9f 85       	ldd	r25, Y+15	; 0x0f
    39e0:	a8 89       	ldd	r26, Y+16	; 0x10
    39e2:	b9 89       	ldd	r27, Y+17	; 0x11
    39e4:	cd 01       	movw	r24, r26
    39e6:	aa 27       	eor	r26, r26
    39e8:	bb 27       	eor	r27, r27
    39ea:	89 2f       	mov	r24, r25
    39ec:	99 27       	eor	r25, r25
    39ee:	85 8b       	std	Z+21, r24	; 0x15
				tim = get_fattime();			/* Updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
    39f0:	16 8a       	std	Z+22, r1	; 0x16
    39f2:	17 8a       	std	Z+23, r1	; 0x17
    39f4:	10 8e       	std	Z+24, r1	; 0x18
    39f6:	11 8e       	std	Z+25, r1	; 0x19
				fp->flag &= ~FA__WRITTEN;
    39f8:	8c 81       	ldd	r24, Y+4	; 0x04
    39fa:	8f 7d       	andi	r24, 0xDF	; 223
    39fc:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    39fe:	e8 81       	ld	r30, Y
    3a00:	f9 81       	ldd	r31, Y+1	; 0x01
    3a02:	81 e0       	ldi	r24, 0x01	; 1
    3a04:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    3a06:	88 81       	ld	r24, Y
    3a08:	99 81       	ldd	r25, Y+1	; 0x01
    3a0a:	0e 94 20 0a 	call	0x1440	; 0x1440 <sync>
    3a0e:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    3a10:	89 2f       	mov	r24, r25
    3a12:	df 91       	pop	r29
    3a14:	cf 91       	pop	r28
    3a16:	0f 91       	pop	r16
    3a18:	08 95       	ret

00003a1a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    3a1a:	cf 93       	push	r28
    3a1c:	df 93       	push	r29
    3a1e:	ec 01       	movw	r28, r24
    FATFS *fs = fp->fs;
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fs, res);
#else
	res = f_sync(fp);
    3a20:	0e 94 95 1c 	call	0x392a	; 0x392a <f_sync>
	if (res == FR_OK) fp->fs = NULL;
    3a24:	88 23       	and	r24, r24
    3a26:	11 f4       	brne	.+4      	; 0x3a2c <f_close+0x12>
    3a28:	18 82       	st	Y, r1
    3a2a:	19 82       	std	Y+1, r1	; 0x01
	return res;
#endif
}
    3a2c:	df 91       	pop	r29
    3a2e:	cf 91       	pop	r28
    3a30:	08 95       	ret

00003a32 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    3a32:	2f 92       	push	r2
    3a34:	3f 92       	push	r3
    3a36:	4f 92       	push	r4
    3a38:	5f 92       	push	r5
    3a3a:	6f 92       	push	r6
    3a3c:	7f 92       	push	r7
    3a3e:	8f 92       	push	r8
    3a40:	9f 92       	push	r9
    3a42:	af 92       	push	r10
    3a44:	bf 92       	push	r11
    3a46:	cf 92       	push	r12
    3a48:	df 92       	push	r13
    3a4a:	0f 93       	push	r16
    3a4c:	1f 93       	push	r17
    3a4e:	df 93       	push	r29
    3a50:	cf 93       	push	r28
    3a52:	cd b7       	in	r28, 0x3d	; 61
    3a54:	de b7       	in	r29, 0x3e	; 62
    3a56:	28 97       	sbiw	r28, 0x08	; 8
    3a58:	cd bf       	out	0x3d, r28	; 61
    3a5a:	de bf       	out	0x3e, r29	; 62
    3a5c:	8f 83       	std	Y+7, r24	; 0x07
    3a5e:	98 87       	std	Y+8, r25	; 0x08
    3a60:	3a 01       	movw	r6, r20
    3a62:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3a64:	dc 01       	movw	r26, r24
    3a66:	12 96       	adiw	r26, 0x02	; 2
    3a68:	6d 91       	ld	r22, X+
    3a6a:	7c 91       	ld	r23, X
    3a6c:	13 97       	sbiw	r26, 0x03	; 3
    3a6e:	8d 91       	ld	r24, X+
    3a70:	9c 91       	ld	r25, X
    3a72:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <validate>
    3a76:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3a78:	88 23       	and	r24, r24
    3a7a:	09 f0       	breq	.+2      	; 0x3a7e <f_lseek+0x4c>
    3a7c:	f3 c1       	rjmp	.+998    	; 0x3e64 <f_lseek+0x432>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    3a7e:	ef 81       	ldd	r30, Y+7	; 0x07
    3a80:	f8 85       	ldd	r31, Y+8	; 0x08
    3a82:	84 81       	ldd	r24, Z+4	; 0x04
    3a84:	87 fd       	sbrc	r24, 7
    3a86:	98 c0       	rjmp	.+304    	; 0x3bb8 <f_lseek+0x186>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    3a88:	af 81       	ldd	r26, Y+7	; 0x07
    3a8a:	b8 85       	ldd	r27, Y+8	; 0x08
    3a8c:	1a 96       	adiw	r26, 0x0a	; 10
    3a8e:	ad 90       	ld	r10, X+
    3a90:	bd 90       	ld	r11, X+
    3a92:	cd 90       	ld	r12, X+
    3a94:	dc 90       	ld	r13, X
    3a96:	1d 97       	sbiw	r26, 0x0d	; 13
    3a98:	a6 14       	cp	r10, r6
    3a9a:	b7 04       	cpc	r11, r7
    3a9c:	c8 04       	cpc	r12, r8
    3a9e:	d9 04       	cpc	r13, r9
    3aa0:	10 f4       	brcc	.+4      	; 0x3aa6 <f_lseek+0x74>
    3aa2:	81 ff       	sbrs	r24, 1
    3aa4:	02 c0       	rjmp	.+4      	; 0x3aaa <f_lseek+0x78>
    3aa6:	64 01       	movw	r12, r8
    3aa8:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    3aaa:	ef 81       	ldd	r30, Y+7	; 0x07
    3aac:	f8 85       	ldd	r31, Y+8	; 0x08
    3aae:	26 81       	ldd	r18, Z+6	; 0x06
    3ab0:	37 81       	ldd	r19, Z+7	; 0x07
    3ab2:	40 85       	ldd	r20, Z+8	; 0x08
    3ab4:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    3ab6:	16 82       	std	Z+6, r1	; 0x06
    3ab8:	17 82       	std	Z+7, r1	; 0x07
    3aba:	10 86       	std	Z+8, r1	; 0x08
    3abc:	11 86       	std	Z+9, r1	; 0x09
    3abe:	8f ef       	ldi	r24, 0xFF	; 255
    3ac0:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    3ac2:	a1 14       	cp	r10, r1
    3ac4:	b1 04       	cpc	r11, r1
    3ac6:	c1 04       	cpc	r12, r1
    3ac8:	d1 04       	cpc	r13, r1
    3aca:	09 f4       	brne	.+2      	; 0x3ace <f_lseek+0x9c>
    3acc:	5f c1       	rjmp	.+702    	; 0x3d8c <f_lseek+0x35a>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    3ace:	01 90       	ld	r0, Z+
    3ad0:	f0 81       	ld	r31, Z
    3ad2:	e0 2d       	mov	r30, r0
    3ad4:	e9 83       	std	Y+1, r30	; 0x01
    3ad6:	fa 83       	std	Y+2, r31	; 0x02
    3ad8:	82 81       	ldd	r24, Z+2	; 0x02
    3ada:	68 2e       	mov	r6, r24
    3adc:	77 24       	eor	r7, r7
    3ade:	88 24       	eor	r8, r8
    3ae0:	99 24       	eor	r9, r9
    3ae2:	89 e0       	ldi	r24, 0x09	; 9
    3ae4:	66 0c       	add	r6, r6
    3ae6:	77 1c       	adc	r7, r7
    3ae8:	88 1c       	adc	r8, r8
    3aea:	99 1c       	adc	r9, r9
    3aec:	8a 95       	dec	r24
    3aee:	d1 f7       	brne	.-12     	; 0x3ae4 <f_lseek+0xb2>
		if (ifptr > 0 &&
    3af0:	21 15       	cp	r18, r1
    3af2:	31 05       	cpc	r19, r1
    3af4:	41 05       	cpc	r20, r1
    3af6:	51 05       	cpc	r21, r1
    3af8:	f1 f1       	breq	.+124    	; 0x3b76 <f_lseek+0x144>
    3afa:	19 01       	movw	r2, r18
    3afc:	2a 01       	movw	r4, r20
    3afe:	08 94       	sec
    3b00:	21 08       	sbc	r2, r1
    3b02:	31 08       	sbc	r3, r1
    3b04:	41 08       	sbc	r4, r1
    3b06:	51 08       	sbc	r5, r1
    3b08:	c6 01       	movw	r24, r12
    3b0a:	b5 01       	movw	r22, r10
    3b0c:	61 50       	subi	r22, 0x01	; 1
    3b0e:	70 40       	sbci	r23, 0x00	; 0
    3b10:	80 40       	sbci	r24, 0x00	; 0
    3b12:	90 40       	sbci	r25, 0x00	; 0
    3b14:	a4 01       	movw	r20, r8
    3b16:	93 01       	movw	r18, r6
    3b18:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    3b1c:	2b 83       	std	Y+3, r18	; 0x03
    3b1e:	3c 83       	std	Y+4, r19	; 0x04
    3b20:	4d 83       	std	Y+5, r20	; 0x05
    3b22:	5e 83       	std	Y+6, r21	; 0x06
    3b24:	c2 01       	movw	r24, r4
    3b26:	b1 01       	movw	r22, r2
    3b28:	a4 01       	movw	r20, r8
    3b2a:	93 01       	movw	r18, r6
    3b2c:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    3b30:	8b 81       	ldd	r24, Y+3	; 0x03
    3b32:	9c 81       	ldd	r25, Y+4	; 0x04
    3b34:	ad 81       	ldd	r26, Y+5	; 0x05
    3b36:	be 81       	ldd	r27, Y+6	; 0x06
    3b38:	82 17       	cp	r24, r18
    3b3a:	93 07       	cpc	r25, r19
    3b3c:	a4 07       	cpc	r26, r20
    3b3e:	b5 07       	cpc	r27, r21
    3b40:	d0 f0       	brcs	.+52     	; 0x3b76 <f_lseek+0x144>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    3b42:	88 27       	eor	r24, r24
    3b44:	99 27       	eor	r25, r25
    3b46:	dc 01       	movw	r26, r24
    3b48:	86 19       	sub	r24, r6
    3b4a:	97 09       	sbc	r25, r7
    3b4c:	a8 09       	sbc	r26, r8
    3b4e:	b9 09       	sbc	r27, r9
    3b50:	82 21       	and	r24, r2
    3b52:	93 21       	and	r25, r3
    3b54:	a4 21       	and	r26, r4
    3b56:	b5 21       	and	r27, r5
    3b58:	ef 81       	ldd	r30, Y+7	; 0x07
    3b5a:	f8 85       	ldd	r31, Y+8	; 0x08
    3b5c:	86 83       	std	Z+6, r24	; 0x06
    3b5e:	97 83       	std	Z+7, r25	; 0x07
    3b60:	a0 87       	std	Z+8, r26	; 0x08
    3b62:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    3b64:	a8 1a       	sub	r10, r24
    3b66:	b9 0a       	sbc	r11, r25
    3b68:	ca 0a       	sbc	r12, r26
    3b6a:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    3b6c:	42 89       	ldd	r20, Z+18	; 0x12
    3b6e:	53 89       	ldd	r21, Z+19	; 0x13
    3b70:	64 89       	ldd	r22, Z+20	; 0x14
    3b72:	75 89       	ldd	r23, Z+21	; 0x15
    3b74:	39 c0       	rjmp	.+114    	; 0x3be8 <f_lseek+0x1b6>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    3b76:	af 81       	ldd	r26, Y+7	; 0x07
    3b78:	b8 85       	ldd	r27, Y+8	; 0x08
    3b7a:	1e 96       	adiw	r26, 0x0e	; 14
    3b7c:	4d 91       	ld	r20, X+
    3b7e:	5d 91       	ld	r21, X+
    3b80:	6d 91       	ld	r22, X+
    3b82:	7c 91       	ld	r23, X
    3b84:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    3b86:	41 15       	cp	r20, r1
    3b88:	51 05       	cpc	r21, r1
    3b8a:	61 05       	cpc	r22, r1
    3b8c:	71 05       	cpc	r23, r1
    3b8e:	21 f5       	brne	.+72     	; 0x3bd8 <f_lseek+0x1a6>
				clst = create_chain(fp->fs, 0);
    3b90:	89 81       	ldd	r24, Y+1	; 0x01
    3b92:	9a 81       	ldd	r25, Y+2	; 0x02
    3b94:	40 e0       	ldi	r20, 0x00	; 0
    3b96:	50 e0       	ldi	r21, 0x00	; 0
    3b98:	60 e0       	ldi	r22, 0x00	; 0
    3b9a:	70 e0       	ldi	r23, 0x00	; 0
    3b9c:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <create_chain>
    3ba0:	ab 01       	movw	r20, r22
    3ba2:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3ba4:	41 30       	cpi	r20, 0x01	; 1
    3ba6:	51 05       	cpc	r21, r1
    3ba8:	61 05       	cpc	r22, r1
    3baa:	71 05       	cpc	r23, r1
    3bac:	39 f4       	brne	.+14     	; 0x3bbc <f_lseek+0x18a>
    3bae:	ef 81       	ldd	r30, Y+7	; 0x07
    3bb0:	f8 85       	ldd	r31, Y+8	; 0x08
    3bb2:	84 81       	ldd	r24, Z+4	; 0x04
    3bb4:	80 68       	ori	r24, 0x80	; 128
    3bb6:	84 83       	std	Z+4, r24	; 0x04
    3bb8:	12 e0       	ldi	r17, 0x02	; 2
    3bba:	54 c1       	rjmp	.+680    	; 0x3e64 <f_lseek+0x432>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3bbc:	4f 3f       	cpi	r20, 0xFF	; 255
    3bbe:	ff ef       	ldi	r31, 0xFF	; 255
    3bc0:	5f 07       	cpc	r21, r31
    3bc2:	ff ef       	ldi	r31, 0xFF	; 255
    3bc4:	6f 07       	cpc	r22, r31
    3bc6:	ff ef       	ldi	r31, 0xFF	; 255
    3bc8:	7f 07       	cpc	r23, r31
    3bca:	b1 f1       	breq	.+108    	; 0x3c38 <f_lseek+0x206>
				fp->org_clust = clst;
    3bcc:	ef 81       	ldd	r30, Y+7	; 0x07
    3bce:	f8 85       	ldd	r31, Y+8	; 0x08
    3bd0:	46 87       	std	Z+14, r20	; 0x0e
    3bd2:	57 87       	std	Z+15, r21	; 0x0f
    3bd4:	60 8b       	std	Z+16, r22	; 0x10
    3bd6:	71 8b       	std	Z+17, r23	; 0x11
			}
#endif
			fp->curr_clust = clst;
    3bd8:	af 81       	ldd	r26, Y+7	; 0x07
    3bda:	b8 85       	ldd	r27, Y+8	; 0x08
    3bdc:	52 96       	adiw	r26, 0x12	; 18
    3bde:	4d 93       	st	X+, r20
    3be0:	5d 93       	st	X+, r21
    3be2:	6d 93       	st	X+, r22
    3be4:	7c 93       	st	X, r23
    3be6:	55 97       	sbiw	r26, 0x15	; 21
		}
		if (clst != 0) {
    3be8:	41 15       	cp	r20, r1
    3bea:	51 05       	cpc	r21, r1
    3bec:	61 05       	cpc	r22, r1
    3bee:	71 05       	cpc	r23, r1
    3bf0:	09 f0       	breq	.+2      	; 0x3bf4 <f_lseek+0x1c2>
    3bf2:	58 c0       	rjmp	.+176    	; 0x3ca4 <f_lseek+0x272>
    3bf4:	cb c0       	rjmp	.+406    	; 0x3d8c <f_lseek+0x35a>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    3bf6:	ef 81       	ldd	r30, Y+7	; 0x07
    3bf8:	f8 85       	ldd	r31, Y+8	; 0x08
    3bfa:	84 81       	ldd	r24, Z+4	; 0x04
    3bfc:	20 81       	ld	r18, Z
    3bfe:	31 81       	ldd	r19, Z+1	; 0x01
    3c00:	81 ff       	sbrs	r24, 1
    3c02:	0d c0       	rjmp	.+26     	; 0x3c1e <f_lseek+0x1ec>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    3c04:	c9 01       	movw	r24, r18
    3c06:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <create_chain>
    3c0a:	ab 01       	movw	r20, r22
    3c0c:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    3c0e:	41 15       	cp	r20, r1
    3c10:	51 05       	cpc	r21, r1
    3c12:	61 05       	cpc	r22, r1
    3c14:	71 05       	cpc	r23, r1
    3c16:	41 f4       	brne	.+16     	; 0x3c28 <f_lseek+0x1f6>
    3c18:	64 01       	movw	r12, r8
    3c1a:	53 01       	movw	r10, r6
    3c1c:	49 c0       	rjmp	.+146    	; 0x3cb0 <f_lseek+0x27e>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3c1e:	c9 01       	movw	r24, r18
    3c20:	0e 94 af 0a 	call	0x155e	; 0x155e <get_fat>
    3c24:	ab 01       	movw	r20, r22
    3c26:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3c28:	4f 3f       	cpi	r20, 0xFF	; 255
    3c2a:	ff ef       	ldi	r31, 0xFF	; 255
    3c2c:	5f 07       	cpc	r21, r31
    3c2e:	ff ef       	ldi	r31, 0xFF	; 255
    3c30:	6f 07       	cpc	r22, r31
    3c32:	ff ef       	ldi	r31, 0xFF	; 255
    3c34:	7f 07       	cpc	r23, r31
    3c36:	49 f4       	brne	.+18     	; 0x3c4a <f_lseek+0x218>
    3c38:	af 81       	ldd	r26, Y+7	; 0x07
    3c3a:	b8 85       	ldd	r27, Y+8	; 0x08
    3c3c:	14 96       	adiw	r26, 0x04	; 4
    3c3e:	8c 91       	ld	r24, X
    3c40:	14 97       	sbiw	r26, 0x04	; 4
    3c42:	80 68       	ori	r24, 0x80	; 128
    3c44:	14 96       	adiw	r26, 0x04	; 4
    3c46:	8c 93       	st	X, r24
    3c48:	ed c0       	rjmp	.+474    	; 0x3e24 <f_lseek+0x3f2>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    3c4a:	42 30       	cpi	r20, 0x02	; 2
    3c4c:	51 05       	cpc	r21, r1
    3c4e:	61 05       	cpc	r22, r1
    3c50:	71 05       	cpc	r23, r1
    3c52:	08 f4       	brcc	.+2      	; 0x3c56 <f_lseek+0x224>
    3c54:	ac cf       	rjmp	.-168    	; 0x3bae <f_lseek+0x17c>
    3c56:	af 81       	ldd	r26, Y+7	; 0x07
    3c58:	b8 85       	ldd	r27, Y+8	; 0x08
    3c5a:	ed 91       	ld	r30, X+
    3c5c:	fc 91       	ld	r31, X
    3c5e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c60:	93 8d       	ldd	r25, Z+27	; 0x1b
    3c62:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3c64:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3c66:	48 17       	cp	r20, r24
    3c68:	59 07       	cpc	r21, r25
    3c6a:	6a 07       	cpc	r22, r26
    3c6c:	7b 07       	cpc	r23, r27
    3c6e:	08 f0       	brcs	.+2      	; 0x3c72 <f_lseek+0x240>
    3c70:	9e cf       	rjmp	.-196    	; 0x3bae <f_lseek+0x17c>
				fp->curr_clust = clst;
    3c72:	af 81       	ldd	r26, Y+7	; 0x07
    3c74:	b8 85       	ldd	r27, Y+8	; 0x08
    3c76:	52 96       	adiw	r26, 0x12	; 18
    3c78:	4d 93       	st	X+, r20
    3c7a:	5d 93       	st	X+, r21
    3c7c:	6d 93       	st	X+, r22
    3c7e:	7c 93       	st	X, r23
    3c80:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    3c82:	fd 01       	movw	r30, r26
    3c84:	86 81       	ldd	r24, Z+6	; 0x06
    3c86:	97 81       	ldd	r25, Z+7	; 0x07
    3c88:	a0 85       	ldd	r26, Z+8	; 0x08
    3c8a:	b1 85       	ldd	r27, Z+9	; 0x09
    3c8c:	86 0d       	add	r24, r6
    3c8e:	97 1d       	adc	r25, r7
    3c90:	a8 1d       	adc	r26, r8
    3c92:	b9 1d       	adc	r27, r9
    3c94:	86 83       	std	Z+6, r24	; 0x06
    3c96:	97 83       	std	Z+7, r25	; 0x07
    3c98:	a0 87       	std	Z+8, r26	; 0x08
    3c9a:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    3c9c:	a6 18       	sub	r10, r6
    3c9e:	b7 08       	sbc	r11, r7
    3ca0:	c8 08       	sbc	r12, r8
    3ca2:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    3ca4:	6a 14       	cp	r6, r10
    3ca6:	7b 04       	cpc	r7, r11
    3ca8:	8c 04       	cpc	r8, r12
    3caa:	9d 04       	cpc	r9, r13
    3cac:	08 f4       	brcc	.+2      	; 0x3cb0 <f_lseek+0x27e>
    3cae:	a3 cf       	rjmp	.-186    	; 0x3bf6 <f_lseek+0x1c4>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    3cb0:	ef 81       	ldd	r30, Y+7	; 0x07
    3cb2:	f8 85       	ldd	r31, Y+8	; 0x08
    3cb4:	86 81       	ldd	r24, Z+6	; 0x06
    3cb6:	97 81       	ldd	r25, Z+7	; 0x07
    3cb8:	a0 85       	ldd	r26, Z+8	; 0x08
    3cba:	b1 85       	ldd	r27, Z+9	; 0x09
    3cbc:	8a 0d       	add	r24, r10
    3cbe:	9b 1d       	adc	r25, r11
    3cc0:	ac 1d       	adc	r26, r12
    3cc2:	bd 1d       	adc	r27, r13
    3cc4:	86 83       	std	Z+6, r24	; 0x06
    3cc6:	97 83       	std	Z+7, r25	; 0x07
    3cc8:	a0 87       	std	Z+8, r26	; 0x08
    3cca:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    3ccc:	d6 01       	movw	r26, r12
    3cce:	c5 01       	movw	r24, r10
    3cd0:	09 e0       	ldi	r16, 0x09	; 9
    3cd2:	b6 95       	lsr	r27
    3cd4:	a7 95       	ror	r26
    3cd6:	97 95       	ror	r25
    3cd8:	87 95       	ror	r24
    3cda:	0a 95       	dec	r16
    3cdc:	d1 f7       	brne	.-12     	; 0x3cd2 <f_lseek+0x2a0>
    3cde:	08 2f       	mov	r16, r24
    3ce0:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    3ce2:	8f ef       	ldi	r24, 0xFF	; 255
    3ce4:	91 e0       	ldi	r25, 0x01	; 1
    3ce6:	a0 e0       	ldi	r26, 0x00	; 0
    3ce8:	b0 e0       	ldi	r27, 0x00	; 0
    3cea:	a8 22       	and	r10, r24
    3cec:	b9 22       	and	r11, r25
    3cee:	ca 22       	and	r12, r26
    3cf0:	db 22       	and	r13, r27
    3cf2:	a1 14       	cp	r10, r1
    3cf4:	b1 04       	cpc	r11, r1
    3cf6:	c1 04       	cpc	r12, r1
    3cf8:	d1 04       	cpc	r13, r1
    3cfa:	09 f4       	brne	.+2      	; 0x3cfe <f_lseek+0x2cc>
    3cfc:	47 c0       	rjmp	.+142    	; 0x3d8c <f_lseek+0x35a>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    3cfe:	80 80       	ld	r8, Z
    3d00:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3d02:	3e ef       	ldi	r19, 0xFE	; 254
    3d04:	a3 2e       	mov	r10, r19
    3d06:	3f ef       	ldi	r19, 0xFF	; 255
    3d08:	b3 2e       	mov	r11, r19
    3d0a:	3f ef       	ldi	r19, 0xFF	; 255
    3d0c:	c3 2e       	mov	r12, r19
    3d0e:	3f ef       	ldi	r19, 0xFF	; 255
    3d10:	d3 2e       	mov	r13, r19
    3d12:	a4 0e       	add	r10, r20
    3d14:	b5 1e       	adc	r11, r21
    3d16:	c6 1e       	adc	r12, r22
    3d18:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3d1a:	f4 01       	movw	r30, r8
    3d1c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d1e:	93 8d       	ldd	r25, Z+27	; 0x1b
    3d20:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3d22:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3d24:	02 97       	sbiw	r24, 0x02	; 2
    3d26:	a1 09       	sbc	r26, r1
    3d28:	b1 09       	sbc	r27, r1
    3d2a:	a8 16       	cp	r10, r24
    3d2c:	b9 06       	cpc	r11, r25
    3d2e:	ca 06       	cpc	r12, r26
    3d30:	db 06       	cpc	r13, r27
    3d32:	c0 f4       	brcc	.+48     	; 0x3d64 <f_lseek+0x332>
	return clst * fs->csize + fs->database;
    3d34:	22 81       	ldd	r18, Z+2	; 0x02
    3d36:	30 e0       	ldi	r19, 0x00	; 0
    3d38:	40 e0       	ldi	r20, 0x00	; 0
    3d3a:	50 e0       	ldi	r21, 0x00	; 0
    3d3c:	c6 01       	movw	r24, r12
    3d3e:	b5 01       	movw	r22, r10
    3d40:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <__mulsi3>
    3d44:	9b 01       	movw	r18, r22
    3d46:	ac 01       	movw	r20, r24
    3d48:	f4 01       	movw	r30, r8
    3d4a:	86 a1       	ldd	r24, Z+38	; 0x26
    3d4c:	97 a1       	ldd	r25, Z+39	; 0x27
    3d4e:	a0 a5       	ldd	r26, Z+40	; 0x28
    3d50:	b1 a5       	ldd	r27, Z+41	; 0x29
    3d52:	28 0f       	add	r18, r24
    3d54:	39 1f       	adc	r19, r25
    3d56:	4a 1f       	adc	r20, r26
    3d58:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    3d5a:	21 15       	cp	r18, r1
    3d5c:	31 05       	cpc	r19, r1
    3d5e:	41 05       	cpc	r20, r1
    3d60:	51 05       	cpc	r21, r1
    3d62:	49 f4       	brne	.+18     	; 0x3d76 <f_lseek+0x344>
    3d64:	af 81       	ldd	r26, Y+7	; 0x07
    3d66:	b8 85       	ldd	r27, Y+8	; 0x08
    3d68:	14 96       	adiw	r26, 0x04	; 4
    3d6a:	8c 91       	ld	r24, X
    3d6c:	14 97       	sbiw	r26, 0x04	; 4
    3d6e:	80 68       	ori	r24, 0x80	; 128
    3d70:	14 96       	adiw	r26, 0x04	; 4
    3d72:	8c 93       	st	X, r24
    3d74:	21 cf       	rjmp	.-446    	; 0x3bb8 <f_lseek+0x186>
				nsect += fp->csect;
    3d76:	59 01       	movw	r10, r18
    3d78:	6a 01       	movw	r12, r20
    3d7a:	a0 0e       	add	r10, r16
    3d7c:	b1 1c       	adc	r11, r1
    3d7e:	c1 1c       	adc	r12, r1
    3d80:	d1 1c       	adc	r13, r1
				fp->csect++;
    3d82:	0f 5f       	subi	r16, 0xFF	; 255
    3d84:	ef 81       	ldd	r30, Y+7	; 0x07
    3d86:	f8 85       	ldd	r31, Y+8	; 0x08
    3d88:	05 83       	std	Z+5, r16	; 0x05
    3d8a:	03 c0       	rjmp	.+6      	; 0x3d92 <f_lseek+0x360>
    3d8c:	aa 24       	eor	r10, r10
    3d8e:	bb 24       	eor	r11, r11
    3d90:	65 01       	movw	r12, r10
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    3d92:	ef 81       	ldd	r30, Y+7	; 0x07
    3d94:	f8 85       	ldd	r31, Y+8	; 0x08
    3d96:	86 81       	ldd	r24, Z+6	; 0x06
    3d98:	97 81       	ldd	r25, Z+7	; 0x07
    3d9a:	a0 85       	ldd	r26, Z+8	; 0x08
    3d9c:	b1 85       	ldd	r27, Z+9	; 0x09
    3d9e:	91 70       	andi	r25, 0x01	; 1
    3da0:	a0 70       	andi	r26, 0x00	; 0
    3da2:	b0 70       	andi	r27, 0x00	; 0
    3da4:	00 97       	sbiw	r24, 0x00	; 0
    3da6:	a1 05       	cpc	r26, r1
    3da8:	b1 05       	cpc	r27, r1
    3daa:	09 f4       	brne	.+2      	; 0x3dae <f_lseek+0x37c>
    3dac:	45 c0       	rjmp	.+138    	; 0x3e38 <f_lseek+0x406>
    3dae:	26 89       	ldd	r18, Z+22	; 0x16
    3db0:	37 89       	ldd	r19, Z+23	; 0x17
    3db2:	40 8d       	ldd	r20, Z+24	; 0x18
    3db4:	51 8d       	ldd	r21, Z+25	; 0x19
    3db6:	a2 16       	cp	r10, r18
    3db8:	b3 06       	cpc	r11, r19
    3dba:	c4 06       	cpc	r12, r20
    3dbc:	d5 06       	cpc	r13, r21
    3dbe:	e1 f1       	breq	.+120    	; 0x3e38 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
    3dc0:	84 81       	ldd	r24, Z+4	; 0x04
    3dc2:	86 ff       	sbrs	r24, 6
    3dc4:	1a c0       	rjmp	.+52     	; 0x3dfa <f_lseek+0x3c8>
			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3dc6:	01 90       	ld	r0, Z+
    3dc8:	f0 81       	ld	r31, Z
    3dca:	e0 2d       	mov	r30, r0
    3dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    3dce:	78 85       	ldd	r23, Y+8	; 0x08
    3dd0:	60 5e       	subi	r22, 0xE0	; 224
    3dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd4:	81 81       	ldd	r24, Z+1	; 0x01
    3dd6:	01 e0       	ldi	r16, 0x01	; 1
    3dd8:	0e 94 43 07 	call	0xe86	; 0xe86 <disk_write>
    3ddc:	af 81       	ldd	r26, Y+7	; 0x07
    3dde:	b8 85       	ldd	r27, Y+8	; 0x08
    3de0:	14 96       	adiw	r26, 0x04	; 4
    3de2:	9c 91       	ld	r25, X
    3de4:	14 97       	sbiw	r26, 0x04	; 4
    3de6:	88 23       	and	r24, r24
    3de8:	21 f0       	breq	.+8      	; 0x3df2 <f_lseek+0x3c0>
				ABORT(fp->fs, FR_DISK_ERR);
    3dea:	90 68       	ori	r25, 0x80	; 128
    3dec:	14 96       	adiw	r26, 0x04	; 4
    3dee:	9c 93       	st	X, r25
    3df0:	19 c0       	rjmp	.+50     	; 0x3e24 <f_lseek+0x3f2>
			fp->flag &= ~FA__DIRTY;
    3df2:	9f 7b       	andi	r25, 0xBF	; 191
    3df4:	ef 81       	ldd	r30, Y+7	; 0x07
    3df6:	f8 85       	ldd	r31, Y+8	; 0x08
    3df8:	94 83       	std	Z+4, r25	; 0x04
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
    3dfa:	af 81       	ldd	r26, Y+7	; 0x07
    3dfc:	b8 85       	ldd	r27, Y+8	; 0x08
    3dfe:	ed 91       	ld	r30, X+
    3e00:	fc 91       	ld	r31, X
    3e02:	11 97       	sbiw	r26, 0x01	; 1
    3e04:	bd 01       	movw	r22, r26
    3e06:	60 5e       	subi	r22, 0xE0	; 224
    3e08:	7f 4f       	sbci	r23, 0xFF	; 255
    3e0a:	81 81       	ldd	r24, Z+1	; 0x01
    3e0c:	a6 01       	movw	r20, r12
    3e0e:	95 01       	movw	r18, r10
    3e10:	01 e0       	ldi	r16, 0x01	; 1
    3e12:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <disk_read>
    3e16:	88 23       	and	r24, r24
    3e18:	39 f0       	breq	.+14     	; 0x3e28 <f_lseek+0x3f6>
			ABORT(fp->fs, FR_DISK_ERR);
    3e1a:	ef 81       	ldd	r30, Y+7	; 0x07
    3e1c:	f8 85       	ldd	r31, Y+8	; 0x08
    3e1e:	84 81       	ldd	r24, Z+4	; 0x04
    3e20:	80 68       	ori	r24, 0x80	; 128
    3e22:	84 83       	std	Z+4, r24	; 0x04
    3e24:	11 e0       	ldi	r17, 0x01	; 1
    3e26:	1e c0       	rjmp	.+60     	; 0x3e64 <f_lseek+0x432>
#endif
		fp->dsect = nsect;
    3e28:	af 81       	ldd	r26, Y+7	; 0x07
    3e2a:	b8 85       	ldd	r27, Y+8	; 0x08
    3e2c:	56 96       	adiw	r26, 0x16	; 22
    3e2e:	ad 92       	st	X+, r10
    3e30:	bd 92       	st	X+, r11
    3e32:	cd 92       	st	X+, r12
    3e34:	dc 92       	st	X, r13
    3e36:	59 97       	sbiw	r26, 0x19	; 25
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    3e38:	ef 81       	ldd	r30, Y+7	; 0x07
    3e3a:	f8 85       	ldd	r31, Y+8	; 0x08
    3e3c:	26 81       	ldd	r18, Z+6	; 0x06
    3e3e:	37 81       	ldd	r19, Z+7	; 0x07
    3e40:	40 85       	ldd	r20, Z+8	; 0x08
    3e42:	51 85       	ldd	r21, Z+9	; 0x09
    3e44:	82 85       	ldd	r24, Z+10	; 0x0a
    3e46:	93 85       	ldd	r25, Z+11	; 0x0b
    3e48:	a4 85       	ldd	r26, Z+12	; 0x0c
    3e4a:	b5 85       	ldd	r27, Z+13	; 0x0d
    3e4c:	82 17       	cp	r24, r18
    3e4e:	93 07       	cpc	r25, r19
    3e50:	a4 07       	cpc	r26, r20
    3e52:	b5 07       	cpc	r27, r21
    3e54:	38 f4       	brcc	.+14     	; 0x3e64 <f_lseek+0x432>
		fp->fsize = fp->fptr;
    3e56:	22 87       	std	Z+10, r18	; 0x0a
    3e58:	33 87       	std	Z+11, r19	; 0x0b
    3e5a:	44 87       	std	Z+12, r20	; 0x0c
    3e5c:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    3e5e:	84 81       	ldd	r24, Z+4	; 0x04
    3e60:	80 62       	ori	r24, 0x20	; 32
    3e62:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    3e64:	81 2f       	mov	r24, r17
    3e66:	28 96       	adiw	r28, 0x08	; 8
    3e68:	cd bf       	out	0x3d, r28	; 61
    3e6a:	de bf       	out	0x3e, r29	; 62
    3e6c:	cf 91       	pop	r28
    3e6e:	df 91       	pop	r29
    3e70:	1f 91       	pop	r17
    3e72:	0f 91       	pop	r16
    3e74:	df 90       	pop	r13
    3e76:	cf 90       	pop	r12
    3e78:	bf 90       	pop	r11
    3e7a:	af 90       	pop	r10
    3e7c:	9f 90       	pop	r9
    3e7e:	8f 90       	pop	r8
    3e80:	7f 90       	pop	r7
    3e82:	6f 90       	pop	r6
    3e84:	5f 90       	pop	r5
    3e86:	4f 90       	pop	r4
    3e88:	3f 90       	pop	r3
    3e8a:	2f 90       	pop	r2
    3e8c:	08 95       	ret

00003e8e <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    3e8e:	0f 93       	push	r16
    3e90:	1f 93       	push	r17
    3e92:	df 93       	push	r29
    3e94:	cf 93       	push	r28
    3e96:	cd b7       	in	r28, 0x3d	; 61
    3e98:	de b7       	in	r29, 0x3e	; 62
    3e9a:	2e 97       	sbiw	r28, 0x0e	; 14
    3e9c:	cd bf       	out	0x3d, r28	; 61
    3e9e:	de bf       	out	0x3e, r29	; 62
    3ea0:	8c 01       	movw	r16, r24
    3ea2:	6d 87       	std	Y+13, r22	; 0x0d
    3ea4:	7e 87       	std	Y+14, r23	; 0x0e
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
    3ea6:	ce 01       	movw	r24, r28
    3ea8:	0d 96       	adiw	r24, 0x0d	; 13
    3eaa:	b8 01       	movw	r22, r16
    3eac:	40 e0       	ldi	r20, 0x00	; 0
    3eae:	0e 94 ba 13 	call	0x2774	; 0x2774 <chk_mounted>
	if (res == FR_OK) {
    3eb2:	88 23       	and	r24, r24
    3eb4:	09 f0       	breq	.+2      	; 0x3eb8 <f_opendir+0x2a>
    3eb6:	46 c0       	rjmp	.+140    	; 0x3f44 <f_opendir+0xb6>
		INITBUF((*dj), sfn, lfn);
    3eb8:	ce 01       	movw	r24, r28
    3eba:	01 96       	adiw	r24, 0x01	; 1
    3ebc:	d8 01       	movw	r26, r16
    3ebe:	54 96       	adiw	r26, 0x14	; 20
    3ec0:	8d 93       	st	X+, r24
    3ec2:	9c 93       	st	X, r25
    3ec4:	55 97       	sbiw	r26, 0x15	; 21
		res = follow_path(dj, path);			/* Follow the path to the directory */
    3ec6:	6d 85       	ldd	r22, Y+13	; 0x0d
    3ec8:	7e 85       	ldd	r23, Y+14	; 0x0e
    3eca:	c8 01       	movw	r24, r16
    3ecc:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    3ed0:	88 23       	and	r24, r24
    3ed2:	a9 f5       	brne	.+106    	; 0x3f3e <f_opendir+0xb0>
			dir = dj->dir;
    3ed4:	d8 01       	movw	r26, r16
    3ed6:	52 96       	adiw	r26, 0x12	; 18
    3ed8:	ed 91       	ld	r30, X+
    3eda:	fc 91       	ld	r31, X
    3edc:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    3ede:	30 97       	sbiw	r30, 0x00	; 0
    3ee0:	f9 f0       	breq	.+62     	; 0x3f20 <f_opendir+0x92>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    3ee2:	83 85       	ldd	r24, Z+11	; 0x0b
    3ee4:	84 ff       	sbrs	r24, 4
    3ee6:	2d c0       	rjmp	.+90     	; 0x3f42 <f_opendir+0xb4>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    3ee8:	35 89       	ldd	r19, Z+21	; 0x15
    3eea:	20 e0       	ldi	r18, 0x00	; 0
    3eec:	84 89       	ldd	r24, Z+20	; 0x14
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	28 2b       	or	r18, r24
    3ef2:	39 2b       	or	r19, r25
    3ef4:	40 e0       	ldi	r20, 0x00	; 0
    3ef6:	50 e0       	ldi	r21, 0x00	; 0
    3ef8:	a9 01       	movw	r20, r18
    3efa:	33 27       	eor	r19, r19
    3efc:	22 27       	eor	r18, r18
    3efe:	93 8d       	ldd	r25, Z+27	; 0x1b
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	62 8d       	ldd	r22, Z+26	; 0x1a
    3f04:	70 e0       	ldi	r23, 0x00	; 0
    3f06:	86 2b       	or	r24, r22
    3f08:	97 2b       	or	r25, r23
    3f0a:	a0 e0       	ldi	r26, 0x00	; 0
    3f0c:	b0 e0       	ldi	r27, 0x00	; 0
    3f0e:	28 2b       	or	r18, r24
    3f10:	39 2b       	or	r19, r25
    3f12:	4a 2b       	or	r20, r26
    3f14:	5b 2b       	or	r21, r27
    3f16:	f8 01       	movw	r30, r16
    3f18:	26 83       	std	Z+6, r18	; 0x06
    3f1a:	37 83       	std	Z+7, r19	; 0x07
    3f1c:	40 87       	std	Z+8, r20	; 0x08
    3f1e:	51 87       	std	Z+9, r21	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    3f20:	d8 01       	movw	r26, r16
    3f22:	ed 91       	ld	r30, X+
    3f24:	fc 91       	ld	r31, X
    3f26:	11 97       	sbiw	r26, 0x01	; 1
    3f28:	86 81       	ldd	r24, Z+6	; 0x06
    3f2a:	97 81       	ldd	r25, Z+7	; 0x07
    3f2c:	12 96       	adiw	r26, 0x02	; 2
    3f2e:	8d 93       	st	X+, r24
    3f30:	9c 93       	st	X, r25
    3f32:	13 97       	sbiw	r26, 0x03	; 3
				res = dir_seek(dj, 0);			/* Rewind dir */
    3f34:	c8 01       	movw	r24, r16
    3f36:	60 e0       	ldi	r22, 0x00	; 0
    3f38:	70 e0       	ldi	r23, 0x00	; 0
    3f3a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <dir_seek>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3f3e:	84 30       	cpi	r24, 0x04	; 4
    3f40:	09 f4       	brne	.+2      	; 0x3f44 <f_opendir+0xb6>
    3f42:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj->fs, res);
}
    3f44:	2e 96       	adiw	r28, 0x0e	; 14
    3f46:	cd bf       	out	0x3d, r28	; 61
    3f48:	de bf       	out	0x3e, r29	; 62
    3f4a:	cf 91       	pop	r28
    3f4c:	df 91       	pop	r29
    3f4e:	1f 91       	pop	r17
    3f50:	0f 91       	pop	r16
    3f52:	08 95       	ret

00003f54 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3f54:	ef 92       	push	r14
    3f56:	ff 92       	push	r15
    3f58:	0f 93       	push	r16
    3f5a:	1f 93       	push	r17
    3f5c:	df 93       	push	r29
    3f5e:	cf 93       	push	r28
    3f60:	cd b7       	in	r28, 0x3d	; 61
    3f62:	de b7       	in	r29, 0x3e	; 62
    3f64:	2c 97       	sbiw	r28, 0x0c	; 12
    3f66:	cd bf       	out	0x3d, r28	; 61
    3f68:	de bf       	out	0x3e, r29	; 62
    3f6a:	8c 01       	movw	r16, r24
    3f6c:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    3f6e:	fc 01       	movw	r30, r24
    3f70:	62 81       	ldd	r22, Z+2	; 0x02
    3f72:	73 81       	ldd	r23, Z+3	; 0x03
    3f74:	80 81       	ld	r24, Z
    3f76:	91 81       	ldd	r25, Z+1	; 0x01
    3f78:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <validate>
	if (res == FR_OK) {
    3f7c:	88 23       	and	r24, r24
    3f7e:	59 f5       	brne	.+86     	; 0x3fd6 <f_readdir+0x82>
		INITBUF((*dj), sfn, lfn);
    3f80:	ce 01       	movw	r24, r28
    3f82:	01 96       	adiw	r24, 0x01	; 1
    3f84:	f8 01       	movw	r30, r16
    3f86:	84 8b       	std	Z+20, r24	; 0x14
    3f88:	95 8b       	std	Z+21, r25	; 0x15
		if (!fno) {
    3f8a:	e1 14       	cp	r14, r1
    3f8c:	f1 04       	cpc	r15, r1
    3f8e:	31 f4       	brne	.+12     	; 0x3f9c <f_readdir+0x48>
			res = dir_seek(dj, 0);
    3f90:	c8 01       	movw	r24, r16
    3f92:	60 e0       	ldi	r22, 0x00	; 0
    3f94:	70 e0       	ldi	r23, 0x00	; 0
    3f96:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <dir_seek>
    3f9a:	1d c0       	rjmp	.+58     	; 0x3fd6 <f_readdir+0x82>
		} else {
			res = dir_read(dj);
    3f9c:	c8 01       	movw	r24, r16
    3f9e:	0e 94 a9 10 	call	0x2152	; 0x2152 <dir_read>
			if (res == FR_NO_FILE) {
    3fa2:	84 30       	cpi	r24, 0x04	; 4
    3fa4:	31 f4       	brne	.+12     	; 0x3fb2 <f_readdir+0x5e>
				dj->sect = 0;
    3fa6:	f8 01       	movw	r30, r16
    3fa8:	16 86       	std	Z+14, r1	; 0x0e
    3faa:	17 86       	std	Z+15, r1	; 0x0f
    3fac:	10 8a       	std	Z+16, r1	; 0x10
    3fae:	11 8a       	std	Z+17, r1	; 0x11
    3fb0:	02 c0       	rjmp	.+4      	; 0x3fb6 <f_readdir+0x62>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    3fb2:	88 23       	and	r24, r24
    3fb4:	81 f4       	brne	.+32     	; 0x3fd6 <f_readdir+0x82>
				get_fileinfo(dj, fno);		/* Get the object information */
    3fb6:	c8 01       	movw	r24, r16
    3fb8:	b7 01       	movw	r22, r14
    3fba:	0e 94 55 11 	call	0x22aa	; 0x22aa <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
    3fbe:	c8 01       	movw	r24, r16
    3fc0:	60 e0       	ldi	r22, 0x00	; 0
    3fc2:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <dir_next>
				if (res == FR_NO_FILE) {
    3fc6:	84 30       	cpi	r24, 0x04	; 4
    3fc8:	31 f4       	brne	.+12     	; 0x3fd6 <f_readdir+0x82>
					dj->sect = 0;
    3fca:	f8 01       	movw	r30, r16
    3fcc:	16 86       	std	Z+14, r1	; 0x0e
    3fce:	17 86       	std	Z+15, r1	; 0x0f
    3fd0:	10 8a       	std	Z+16, r1	; 0x10
    3fd2:	11 8a       	std	Z+17, r1	; 0x11
    3fd4:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    3fd6:	2c 96       	adiw	r28, 0x0c	; 12
    3fd8:	cd bf       	out	0x3d, r28	; 61
    3fda:	de bf       	out	0x3e, r29	; 62
    3fdc:	cf 91       	pop	r28
    3fde:	df 91       	pop	r29
    3fe0:	1f 91       	pop	r17
    3fe2:	0f 91       	pop	r16
    3fe4:	ff 90       	pop	r15
    3fe6:	ef 90       	pop	r14
    3fe8:	08 95       	ret

00003fea <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3fea:	cf 92       	push	r12
    3fec:	df 92       	push	r13
    3fee:	ef 92       	push	r14
    3ff0:	ff 92       	push	r15
    3ff2:	1f 93       	push	r17
    3ff4:	df 93       	push	r29
    3ff6:	cf 93       	push	r28
    3ff8:	cd b7       	in	r28, 0x3d	; 61
    3ffa:	de b7       	in	r29, 0x3e	; 62
    3ffc:	a4 97       	sbiw	r28, 0x24	; 36
    3ffe:	cd bf       	out	0x3d, r28	; 61
    4000:	de bf       	out	0x3e, r29	; 62
    4002:	8b a3       	std	Y+35, r24	; 0x23
    4004:	9c a3       	std	Y+36, r25	; 0x24
    4006:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = chk_mounted(&path, &dj.fs, 0);
    4008:	2d e0       	ldi	r18, 0x0D	; 13
    400a:	e2 2e       	mov	r14, r18
    400c:	f1 2c       	mov	r15, r1
    400e:	ec 0e       	add	r14, r28
    4010:	fd 1e       	adc	r15, r29
    4012:	ce 01       	movw	r24, r28
    4014:	83 96       	adiw	r24, 0x23	; 35
    4016:	b7 01       	movw	r22, r14
    4018:	40 e0       	ldi	r20, 0x00	; 0
    401a:	0e 94 ba 13 	call	0x2774	; 0x2774 <chk_mounted>
    401e:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    4020:	88 23       	and	r24, r24
    4022:	b1 f4       	brne	.+44     	; 0x4050 <f_stat+0x66>
		INITBUF(dj, sfn, lfn);
    4024:	ce 01       	movw	r24, r28
    4026:	01 96       	adiw	r24, 0x01	; 1
    4028:	89 a3       	std	Y+33, r24	; 0x21
    402a:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    402c:	6b a1       	ldd	r22, Y+35	; 0x23
    402e:	7c a1       	ldd	r23, Y+36	; 0x24
    4030:	c7 01       	movw	r24, r14
    4032:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <follow_path>
    4036:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follwo completed */
    4038:	88 23       	and	r24, r24
    403a:	51 f4       	brne	.+20     	; 0x4050 <f_stat+0x66>
			if (dj.dir)	/* Found an object */
    403c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    403e:	98 a1       	ldd	r25, Y+32	; 0x20
    4040:	89 2b       	or	r24, r25
    4042:	11 f4       	brne	.+4      	; 0x4048 <f_stat+0x5e>
    4044:	16 e0       	ldi	r17, 0x06	; 6
    4046:	04 c0       	rjmp	.+8      	; 0x4050 <f_stat+0x66>
				get_fileinfo(&dj, fno);
    4048:	c7 01       	movw	r24, r14
    404a:	b6 01       	movw	r22, r12
    404c:	0e 94 55 11 	call	0x22aa	; 0x22aa <get_fileinfo>
				res = FR_INVALID_NAME;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4050:	81 2f       	mov	r24, r17
    4052:	a4 96       	adiw	r28, 0x24	; 36
    4054:	cd bf       	out	0x3d, r28	; 61
    4056:	de bf       	out	0x3e, r29	; 62
    4058:	cf 91       	pop	r28
    405a:	df 91       	pop	r29
    405c:	1f 91       	pop	r17
    405e:	ff 90       	pop	r15
    4060:	ef 90       	pop	r14
    4062:	df 90       	pop	r13
    4064:	cf 90       	pop	r12
    4066:	08 95       	ret

00004068 <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    4068:	2f 92       	push	r2
    406a:	3f 92       	push	r3
    406c:	4f 92       	push	r4
    406e:	5f 92       	push	r5
    4070:	6f 92       	push	r6
    4072:	7f 92       	push	r7
    4074:	8f 92       	push	r8
    4076:	9f 92       	push	r9
    4078:	af 92       	push	r10
    407a:	bf 92       	push	r11
    407c:	cf 92       	push	r12
    407e:	df 92       	push	r13
    4080:	ef 92       	push	r14
    4082:	ff 92       	push	r15
    4084:	0f 93       	push	r16
    4086:	1f 93       	push	r17
    4088:	df 93       	push	r29
    408a:	cf 93       	push	r28
    408c:	cd b7       	in	r28, 0x3d	; 61
    408e:	de b7       	in	r29, 0x3e	; 62
    4090:	29 97       	sbiw	r28, 0x09	; 9
    4092:	cd bf       	out	0x3d, r28	; 61
    4094:	de bf       	out	0x3e, r29	; 62
    4096:	89 83       	std	Y+1, r24	; 0x01
    4098:	9a 83       	std	Y+2, r25	; 0x02
    409a:	6c 83       	std	Y+4, r22	; 0x04
    409c:	7d 83       	std	Y+5, r23	; 0x05
    409e:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    40a0:	ce 01       	movw	r24, r28
    40a2:	01 96       	adiw	r24, 0x01	; 1
    40a4:	ba 01       	movw	r22, r20
    40a6:	40 e0       	ldi	r20, 0x00	; 0
    40a8:	0e 94 ba 13 	call	0x2774	; 0x2774 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
    40ac:	88 23       	and	r24, r24
    40ae:	09 f0       	breq	.+2      	; 0x40b2 <f_getfree+0x4a>
    40b0:	eb c0       	rjmp	.+470    	; 0x4288 <f_getfree+0x220>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
    40b2:	d2 01       	movw	r26, r4
    40b4:	ed 91       	ld	r30, X+
    40b6:	fc 91       	ld	r31, X
    40b8:	26 85       	ldd	r18, Z+14	; 0x0e
    40ba:	37 85       	ldd	r19, Z+15	; 0x0f
    40bc:	40 89       	ldd	r20, Z+16	; 0x10
    40be:	51 89       	ldd	r21, Z+17	; 0x11
    40c0:	e2 8c       	ldd	r14, Z+26	; 0x1a
    40c2:	f3 8c       	ldd	r15, Z+27	; 0x1b
    40c4:	04 8d       	ldd	r16, Z+28	; 0x1c
    40c6:	15 8d       	ldd	r17, Z+29	; 0x1d
    40c8:	d8 01       	movw	r26, r16
    40ca:	c7 01       	movw	r24, r14
    40cc:	02 97       	sbiw	r24, 0x02	; 2
    40ce:	a1 09       	sbc	r26, r1
    40d0:	b1 09       	sbc	r27, r1
    40d2:	82 17       	cp	r24, r18
    40d4:	93 07       	cpc	r25, r19
    40d6:	a4 07       	cpc	r26, r20
    40d8:	b5 07       	cpc	r27, r21
    40da:	38 f0       	brcs	.+14     	; 0x40ea <f_getfree+0x82>
		*nclst = (*fatfs)->free_clust;
    40dc:	ec 81       	ldd	r30, Y+4	; 0x04
    40de:	fd 81       	ldd	r31, Y+5	; 0x05
    40e0:	20 83       	st	Z, r18
    40e2:	31 83       	std	Z+1, r19	; 0x01
    40e4:	42 83       	std	Z+2, r20	; 0x02
    40e6:	53 83       	std	Z+3, r21	; 0x03
    40e8:	ce c0       	rjmp	.+412    	; 0x4286 <f_getfree+0x21e>
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
    40ea:	30 80       	ld	r3, Z
    40ec:	3b 82       	std	Y+3, r3	; 0x03
	n = 0;
	if (fat == FS_FAT12) {
    40ee:	23 2d       	mov	r18, r3
    40f0:	21 30       	cpi	r18, 0x01	; 1
    40f2:	e1 f5       	brne	.+120    	; 0x416c <f_getfree+0x104>
    40f4:	aa 24       	eor	r10, r10
    40f6:	bb 24       	eor	r11, r11
    40f8:	65 01       	movw	r12, r10
    40fa:	92 e0       	ldi	r25, 0x02	; 2
    40fc:	e9 2e       	mov	r14, r25
    40fe:	f1 2c       	mov	r15, r1
    4100:	01 2d       	mov	r16, r1
    4102:	11 2d       	mov	r17, r1
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
    4104:	d2 01       	movw	r26, r4
    4106:	8d 91       	ld	r24, X+
    4108:	9c 91       	ld	r25, X
    410a:	b8 01       	movw	r22, r16
    410c:	a7 01       	movw	r20, r14
    410e:	0e 94 af 0a 	call	0x155e	; 0x155e <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
    4112:	6f 3f       	cpi	r22, 0xFF	; 255
    4114:	bf ef       	ldi	r27, 0xFF	; 255
    4116:	7b 07       	cpc	r23, r27
    4118:	bf ef       	ldi	r27, 0xFF	; 255
    411a:	8b 07       	cpc	r24, r27
    411c:	bf ef       	ldi	r27, 0xFF	; 255
    411e:	9b 07       	cpc	r25, r27
    4120:	11 f4       	brne	.+4      	; 0x4126 <f_getfree+0xbe>
    4122:	81 e0       	ldi	r24, 0x01	; 1
    4124:	b1 c0       	rjmp	.+354    	; 0x4288 <f_getfree+0x220>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
    4126:	61 30       	cpi	r22, 0x01	; 1
    4128:	71 05       	cpc	r23, r1
    412a:	81 05       	cpc	r24, r1
    412c:	91 05       	cpc	r25, r1
    412e:	11 f4       	brne	.+4      	; 0x4134 <f_getfree+0xcc>
    4130:	82 e0       	ldi	r24, 0x02	; 2
    4132:	aa c0       	rjmp	.+340    	; 0x4288 <f_getfree+0x220>
			if (stat == 0) n++;
    4134:	61 15       	cp	r22, r1
    4136:	71 05       	cpc	r23, r1
    4138:	81 05       	cpc	r24, r1
    413a:	91 05       	cpc	r25, r1
    413c:	29 f4       	brne	.+10     	; 0x4148 <f_getfree+0xe0>
    413e:	08 94       	sec
    4140:	a1 1c       	adc	r10, r1
    4142:	b1 1c       	adc	r11, r1
    4144:	c1 1c       	adc	r12, r1
    4146:	d1 1c       	adc	r13, r1
		} while (++clst < (*fatfs)->max_clust);
    4148:	08 94       	sec
    414a:	e1 1c       	adc	r14, r1
    414c:	f1 1c       	adc	r15, r1
    414e:	01 1d       	adc	r16, r1
    4150:	11 1d       	adc	r17, r1
    4152:	d2 01       	movw	r26, r4
    4154:	ed 91       	ld	r30, X+
    4156:	fc 91       	ld	r31, X
    4158:	82 8d       	ldd	r24, Z+26	; 0x1a
    415a:	93 8d       	ldd	r25, Z+27	; 0x1b
    415c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    415e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4160:	e8 16       	cp	r14, r24
    4162:	f9 06       	cpc	r15, r25
    4164:	0a 07       	cpc	r16, r26
    4166:	1b 07       	cpc	r17, r27
    4168:	68 f2       	brcs	.-102    	; 0x4104 <f_getfree+0x9c>
    416a:	7b c0       	rjmp	.+246    	; 0x4262 <f_getfree+0x1fa>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
    416c:	66 8c       	ldd	r6, Z+30	; 0x1e
    416e:	77 8c       	ldd	r7, Z+31	; 0x1f
    4170:	80 a0       	ldd	r8, Z+32	; 0x20
    4172:	91 a0       	ldd	r9, Z+33	; 0x21
    4174:	aa 24       	eor	r10, r10
    4176:	bb 24       	eor	r11, r11
    4178:	65 01       	movw	r12, r10
    417a:	60 e0       	ldi	r22, 0x00	; 0
    417c:	70 e0       	ldi	r23, 0x00	; 0
    417e:	e0 e0       	ldi	r30, 0x00	; 0
    4180:	f0 e0       	ldi	r31, 0x00	; 0
		i = 0; p = 0;
		do {
			if (!i) {
    4182:	61 15       	cp	r22, r1
    4184:	71 05       	cpc	r23, r1
    4186:	a9 f4       	brne	.+42     	; 0x41b2 <f_getfree+0x14a>
				res = move_window(*fatfs, sect++);
    4188:	f2 01       	movw	r30, r4
    418a:	80 81       	ld	r24, Z
    418c:	91 81       	ldd	r25, Z+1	; 0x01
    418e:	b4 01       	movw	r22, r8
    4190:	a3 01       	movw	r20, r6
    4192:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
				if (res != FR_OK)
    4196:	88 23       	and	r24, r24
    4198:	09 f0       	breq	.+2      	; 0x419c <f_getfree+0x134>
    419a:	76 c0       	rjmp	.+236    	; 0x4288 <f_getfree+0x220>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
    419c:	08 94       	sec
    419e:	61 1c       	adc	r6, r1
    41a0:	71 1c       	adc	r7, r1
    41a2:	81 1c       	adc	r8, r1
    41a4:	91 1c       	adc	r9, r1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
    41a6:	d2 01       	movw	r26, r4
    41a8:	ed 91       	ld	r30, X+
    41aa:	fc 91       	ld	r31, X
    41ac:	be 96       	adiw	r30, 0x2e	; 46
    41ae:	60 e0       	ldi	r22, 0x00	; 0
    41b0:	72 e0       	ldi	r23, 0x02	; 2
    41b2:	b1 81       	ldd	r27, Z+1	; 0x01
    41b4:	b8 87       	std	Y+8, r27	; 0x08
    41b6:	20 81       	ld	r18, Z
    41b8:	29 87       	std	Y+9, r18	; 0x09
				i = SS(*fatfs);
			}
			if (fat == FS_FAT16) {
    41ba:	3b 81       	ldd	r19, Y+3	; 0x03
    41bc:	32 30       	cpi	r19, 0x02	; 2
    41be:	99 f4       	brne	.+38     	; 0x41e6 <f_getfree+0x17e>
				if (LD_WORD(p) == 0) n++;
    41c0:	bf 83       	std	Y+7, r27	; 0x07
    41c2:	1e 82       	std	Y+6, r1	; 0x06
    41c4:	82 2f       	mov	r24, r18
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	ae 81       	ldd	r26, Y+6	; 0x06
    41ca:	bf 81       	ldd	r27, Y+7	; 0x07
    41cc:	8a 2b       	or	r24, r26
    41ce:	9b 2b       	or	r25, r27
    41d0:	89 2b       	or	r24, r25
    41d2:	29 f4       	brne	.+10     	; 0x41de <f_getfree+0x176>
    41d4:	08 94       	sec
    41d6:	a1 1c       	adc	r10, r1
    41d8:	b1 1c       	adc	r11, r1
    41da:	c1 1c       	adc	r12, r1
    41dc:	d1 1c       	adc	r13, r1
				p += 2; i -= 2;
    41de:	32 96       	adiw	r30, 0x02	; 2
    41e0:	62 50       	subi	r22, 0x02	; 2
    41e2:	70 40       	sbci	r23, 0x00	; 0
    41e4:	33 c0       	rjmp	.+102    	; 0x424c <f_getfree+0x1e4>
			} else {
				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    41e6:	23 81       	ldd	r18, Z+3	; 0x03
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	40 e0       	ldi	r20, 0x00	; 0
    41ec:	50 e0       	ldi	r21, 0x00	; 0
    41ee:	52 2f       	mov	r21, r18
    41f0:	44 27       	eor	r20, r20
    41f2:	33 27       	eor	r19, r19
    41f4:	22 27       	eor	r18, r18
    41f6:	82 81       	ldd	r24, Z+2	; 0x02
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	a0 e0       	ldi	r26, 0x00	; 0
    41fc:	b0 e0       	ldi	r27, 0x00	; 0
    41fe:	dc 01       	movw	r26, r24
    4200:	99 27       	eor	r25, r25
    4202:	88 27       	eor	r24, r24
    4204:	28 2b       	or	r18, r24
    4206:	39 2b       	or	r19, r25
    4208:	4a 2b       	or	r20, r26
    420a:	5b 2b       	or	r21, r27
    420c:	39 84       	ldd	r3, Y+9	; 0x09
    420e:	83 2d       	mov	r24, r3
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	a0 e0       	ldi	r26, 0x00	; 0
    4214:	b0 e0       	ldi	r27, 0x00	; 0
    4216:	28 2b       	or	r18, r24
    4218:	39 2b       	or	r19, r25
    421a:	4a 2b       	or	r20, r26
    421c:	5b 2b       	or	r21, r27
    421e:	38 84       	ldd	r3, Y+8	; 0x08
    4220:	22 24       	eor	r2, r2
    4222:	c1 01       	movw	r24, r2
    4224:	a0 e0       	ldi	r26, 0x00	; 0
    4226:	b0 e0       	ldi	r27, 0x00	; 0
    4228:	28 2b       	or	r18, r24
    422a:	39 2b       	or	r19, r25
    422c:	4a 2b       	or	r20, r26
    422e:	5b 2b       	or	r21, r27
    4230:	5f 70       	andi	r21, 0x0F	; 15
    4232:	21 15       	cp	r18, r1
    4234:	31 05       	cpc	r19, r1
    4236:	41 05       	cpc	r20, r1
    4238:	51 05       	cpc	r21, r1
    423a:	29 f4       	brne	.+10     	; 0x4246 <f_getfree+0x1de>
    423c:	08 94       	sec
    423e:	a1 1c       	adc	r10, r1
    4240:	b1 1c       	adc	r11, r1
    4242:	c1 1c       	adc	r12, r1
    4244:	d1 1c       	adc	r13, r1
				p += 4; i -= 4;
    4246:	34 96       	adiw	r30, 0x04	; 4
    4248:	64 50       	subi	r22, 0x04	; 4
    424a:	70 40       	sbci	r23, 0x00	; 0
			}
		} while (--clst);
    424c:	08 94       	sec
    424e:	e1 08       	sbc	r14, r1
    4250:	f1 08       	sbc	r15, r1
    4252:	01 09       	sbc	r16, r1
    4254:	11 09       	sbc	r17, r1
    4256:	e1 14       	cp	r14, r1
    4258:	f1 04       	cpc	r15, r1
    425a:	01 05       	cpc	r16, r1
    425c:	11 05       	cpc	r17, r1
    425e:	09 f0       	breq	.+2      	; 0x4262 <f_getfree+0x1fa>
    4260:	90 cf       	rjmp	.-224    	; 0x4182 <f_getfree+0x11a>
	}
	(*fatfs)->free_clust = n;
    4262:	d2 01       	movw	r26, r4
    4264:	ed 91       	ld	r30, X+
    4266:	fc 91       	ld	r31, X
    4268:	a6 86       	std	Z+14, r10	; 0x0e
    426a:	b7 86       	std	Z+15, r11	; 0x0f
    426c:	c0 8a       	std	Z+16, r12	; 0x10
    426e:	d1 8a       	std	Z+17, r13	; 0x11
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    4270:	bb 81       	ldd	r27, Y+3	; 0x03
    4272:	b3 30       	cpi	r27, 0x03	; 3
    4274:	11 f4       	brne	.+4      	; 0x427a <f_getfree+0x212>
    4276:	81 e0       	ldi	r24, 0x01	; 1
    4278:	85 83       	std	Z+5, r24	; 0x05
	*nclst = n;
    427a:	ec 81       	ldd	r30, Y+4	; 0x04
    427c:	fd 81       	ldd	r31, Y+5	; 0x05
    427e:	a0 82       	st	Z, r10
    4280:	b1 82       	std	Z+1, r11	; 0x01
    4282:	c2 82       	std	Z+2, r12	; 0x02
    4284:	d3 82       	std	Z+3, r13	; 0x03
    4286:	80 e0       	ldi	r24, 0x00	; 0

	LEAVE_FF(*fatfs, FR_OK);
}
    4288:	29 96       	adiw	r28, 0x09	; 9
    428a:	cd bf       	out	0x3d, r28	; 61
    428c:	de bf       	out	0x3e, r29	; 62
    428e:	cf 91       	pop	r28
    4290:	df 91       	pop	r29
    4292:	1f 91       	pop	r17
    4294:	0f 91       	pop	r16
    4296:	ff 90       	pop	r15
    4298:	ef 90       	pop	r14
    429a:	df 90       	pop	r13
    429c:	cf 90       	pop	r12
    429e:	bf 90       	pop	r11
    42a0:	af 90       	pop	r10
    42a2:	9f 90       	pop	r9
    42a4:	8f 90       	pop	r8
    42a6:	7f 90       	pop	r7
    42a8:	6f 90       	pop	r6
    42aa:	5f 90       	pop	r5
    42ac:	4f 90       	pop	r4
    42ae:	3f 90       	pop	r3
    42b0:	2f 90       	pop	r2
    42b2:	08 95       	ret

000042b4 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    42b4:	cf 92       	push	r12
    42b6:	df 92       	push	r13
    42b8:	ef 92       	push	r14
    42ba:	ff 92       	push	r15
    42bc:	0f 93       	push	r16
    42be:	1f 93       	push	r17
    42c0:	cf 93       	push	r28
    42c2:	df 93       	push	r29
    42c4:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    42c6:	6a 81       	ldd	r22, Y+2	; 0x02
    42c8:	7b 81       	ldd	r23, Y+3	; 0x03
    42ca:	88 81       	ld	r24, Y
    42cc:	99 81       	ldd	r25, Y+1	; 0x01
    42ce:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <validate>
    42d2:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    42d4:	88 23       	and	r24, r24
    42d6:	09 f0       	breq	.+2      	; 0x42da <f_truncate+0x26>
    42d8:	6e c0       	rjmp	.+220    	; 0x43b6 <f_truncate+0x102>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    42da:	6c 81       	ldd	r22, Y+4	; 0x04
    42dc:	67 ff       	sbrs	r22, 7
    42de:	02 c0       	rjmp	.+4      	; 0x42e4 <f_truncate+0x30>
    42e0:	12 e0       	ldi	r17, 0x02	; 2
    42e2:	69 c0       	rjmp	.+210    	; 0x43b6 <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
    42e4:	61 fd       	sbrc	r22, 1
    42e6:	02 c0       	rjmp	.+4      	; 0x42ec <f_truncate+0x38>
    42e8:	17 e0       	ldi	r17, 0x07	; 7
    42ea:	65 c0       	rjmp	.+202    	; 0x43b6 <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
    42ec:	2e 81       	ldd	r18, Y+6	; 0x06
    42ee:	3f 81       	ldd	r19, Y+7	; 0x07
    42f0:	48 85       	ldd	r20, Y+8	; 0x08
    42f2:	59 85       	ldd	r21, Y+9	; 0x09
    42f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    42f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    42f8:	ac 85       	ldd	r26, Y+12	; 0x0c
    42fa:	bd 85       	ldd	r27, Y+13	; 0x0d
    42fc:	28 17       	cp	r18, r24
    42fe:	39 07       	cpc	r19, r25
    4300:	4a 07       	cpc	r20, r26
    4302:	5b 07       	cpc	r21, r27
    4304:	08 f0       	brcs	.+2      	; 0x4308 <f_truncate+0x54>
    4306:	57 c0       	rjmp	.+174    	; 0x43b6 <f_truncate+0x102>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    4308:	2a 87       	std	Y+10, r18	; 0x0a
    430a:	3b 87       	std	Y+11, r19	; 0x0b
    430c:	4c 87       	std	Y+12, r20	; 0x0c
    430e:	5d 87       	std	Y+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    4310:	60 62       	ori	r22, 0x20	; 32
    4312:	6c 83       	std	Y+4, r22	; 0x04
    4314:	88 81       	ld	r24, Y
    4316:	99 81       	ldd	r25, Y+1	; 0x01
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    4318:	21 15       	cp	r18, r1
    431a:	31 05       	cpc	r19, r1
    431c:	41 05       	cpc	r20, r1
    431e:	51 05       	cpc	r21, r1
    4320:	61 f4       	brne	.+24     	; 0x433a <f_truncate+0x86>
			res = remove_chain(fp->fs, fp->org_clust);
    4322:	4e 85       	ldd	r20, Y+14	; 0x0e
    4324:	5f 85       	ldd	r21, Y+15	; 0x0f
    4326:	68 89       	ldd	r22, Y+16	; 0x10
    4328:	79 89       	ldd	r23, Y+17	; 0x11
    432a:	0e 94 85 0c 	call	0x190a	; 0x190a <remove_chain>
    432e:	18 2f       	mov	r17, r24
			fp->org_clust = 0;
    4330:	1e 86       	std	Y+14, r1	; 0x0e
    4332:	1f 86       	std	Y+15, r1	; 0x0f
    4334:	18 8a       	std	Y+16, r1	; 0x10
    4336:	19 8a       	std	Y+17, r1	; 0x11
    4338:	39 c0       	rjmp	.+114    	; 0x43ac <f_truncate+0xf8>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
    433a:	4a 89       	ldd	r20, Y+18	; 0x12
    433c:	5b 89       	ldd	r21, Y+19	; 0x13
    433e:	6c 89       	ldd	r22, Y+20	; 0x14
    4340:	7d 89       	ldd	r23, Y+21	; 0x15
    4342:	0e 94 af 0a 	call	0x155e	; 0x155e <get_fat>
    4346:	6b 01       	movw	r12, r22
    4348:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    434a:	8f ef       	ldi	r24, 0xFF	; 255
    434c:	c8 16       	cp	r12, r24
    434e:	8f ef       	ldi	r24, 0xFF	; 255
    4350:	d8 06       	cpc	r13, r24
    4352:	8f ef       	ldi	r24, 0xFF	; 255
    4354:	e8 06       	cpc	r14, r24
    4356:	8f ef       	ldi	r24, 0xFF	; 255
    4358:	f8 06       	cpc	r15, r24
    435a:	b9 f1       	breq	.+110    	; 0x43ca <f_truncate+0x116>
			if (ncl == 1) res = FR_INT_ERR;
    435c:	81 e0       	ldi	r24, 0x01	; 1
    435e:	c8 16       	cp	r12, r24
    4360:	d1 04       	cpc	r13, r1
    4362:	e1 04       	cpc	r14, r1
    4364:	f1 04       	cpc	r15, r1
    4366:	11 f4       	brne	.+4      	; 0x436c <f_truncate+0xb8>
    4368:	12 e0       	ldi	r17, 0x02	; 2
    436a:	22 c0       	rjmp	.+68     	; 0x43b0 <f_truncate+0xfc>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
    436c:	e8 81       	ld	r30, Y
    436e:	f9 81       	ldd	r31, Y+1	; 0x01
    4370:	82 8d       	ldd	r24, Z+26	; 0x1a
    4372:	93 8d       	ldd	r25, Z+27	; 0x1b
    4374:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4376:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4378:	c8 16       	cp	r12, r24
    437a:	d9 06       	cpc	r13, r25
    437c:	ea 06       	cpc	r14, r26
    437e:	fb 06       	cpc	r15, r27
    4380:	d0 f4       	brcc	.+52     	; 0x43b6 <f_truncate+0x102>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    4382:	4a 89       	ldd	r20, Y+18	; 0x12
    4384:	5b 89       	ldd	r21, Y+19	; 0x13
    4386:	6c 89       	ldd	r22, Y+20	; 0x14
    4388:	7d 89       	ldd	r23, Y+21	; 0x15
    438a:	cf 01       	movw	r24, r30
    438c:	0f ef       	ldi	r16, 0xFF	; 255
    438e:	1f ef       	ldi	r17, 0xFF	; 255
    4390:	2f ef       	ldi	r18, 0xFF	; 255
    4392:	3f e0       	ldi	r19, 0x0F	; 15
    4394:	0e 94 99 0b 	call	0x1732	; 0x1732 <put_fat>
    4398:	18 2f       	mov	r17, r24
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    439a:	88 23       	and	r24, r24
    439c:	49 f4       	brne	.+18     	; 0x43b0 <f_truncate+0xfc>
    439e:	88 81       	ld	r24, Y
    43a0:	99 81       	ldd	r25, Y+1	; 0x01
    43a2:	b7 01       	movw	r22, r14
    43a4:	a6 01       	movw	r20, r12
    43a6:	0e 94 85 0c 	call	0x190a	; 0x190a <remove_chain>
    43aa:	18 2f       	mov	r17, r24
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    43ac:	11 23       	and	r17, r17
    43ae:	19 f0       	breq	.+6      	; 0x43b6 <f_truncate+0x102>
    43b0:	8c 81       	ldd	r24, Y+4	; 0x04
    43b2:	80 68       	ori	r24, 0x80	; 128
    43b4:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, res);
}
    43b6:	81 2f       	mov	r24, r17
    43b8:	df 91       	pop	r29
    43ba:	cf 91       	pop	r28
    43bc:	1f 91       	pop	r17
    43be:	0f 91       	pop	r16
    43c0:	ff 90       	pop	r15
    43c2:	ef 90       	pop	r14
    43c4:	df 90       	pop	r13
    43c6:	cf 90       	pop	r12
    43c8:	08 95       	ret
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    43ca:	11 e0       	ldi	r17, 0x01	; 1
    43cc:	f1 cf       	rjmp	.-30     	; 0x43b0 <f_truncate+0xfc>

000043ce <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
    43ce:	cf 92       	push	r12
    43d0:	df 92       	push	r13
    43d2:	ef 92       	push	r14
    43d4:	ff 92       	push	r15
    43d6:	0f 93       	push	r16
    43d8:	1f 93       	push	r17
    43da:	df 93       	push	r29
    43dc:	cf 93       	push	r28
    43de:	cd b7       	in	r28, 0x3d	; 61
    43e0:	de b7       	in	r29, 0x3e	; 62
    43e2:	ea 97       	sbiw	r28, 0x3a	; 58
    43e4:	cd bf       	out	0x3d, r28	; 61
    43e6:	de bf       	out	0x3e, r29	; 62
    43e8:	89 af       	std	Y+57, r24	; 0x39
    43ea:	9a af       	std	Y+58, r25	; 0x3a
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = chk_mounted(&path, &dj.fs, 1);
    43ec:	4d e0       	ldi	r20, 0x0D	; 13
    43ee:	c4 2e       	mov	r12, r20
    43f0:	d1 2c       	mov	r13, r1
    43f2:	cc 0e       	add	r12, r28
    43f4:	dd 1e       	adc	r13, r29
    43f6:	ce 01       	movw	r24, r28
    43f8:	c9 96       	adiw	r24, 0x39	; 57
    43fa:	b6 01       	movw	r22, r12
    43fc:	41 e0       	ldi	r20, 0x01	; 1
    43fe:	0e 94 ba 13 	call	0x2774	; 0x2774 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    4402:	88 23       	and	r24, r24
    4404:	09 f0       	breq	.+2      	; 0x4408 <f_unlink+0x3a>
    4406:	71 c0       	rjmp	.+226    	; 0x44ea <f_unlink+0x11c>

	INITBUF(dj, sfn, lfn);
    4408:	ce 01       	movw	r24, r28
    440a:	01 96       	adiw	r24, 0x01	; 1
    440c:	89 a3       	std	Y+33, r24	; 0x21
    440e:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    4410:	69 ad       	ldd	r22, Y+57	; 0x39
    4412:	7a ad       	ldd	r23, Y+58	; 0x3a
    4414:	c6 01       	movw	r24, r12
    4416:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <follow_path>
	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
    441a:	88 23       	and	r24, r24
    441c:	09 f0       	breq	.+2      	; 0x4420 <f_unlink+0x52>
    441e:	65 c0       	rjmp	.+202    	; 0x44ea <f_unlink+0x11c>

	dir = dj.dir;
    4420:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4422:	f8 a1       	ldd	r31, Y+32	; 0x20
	if (!dir)								/* Is it the root directory? */
    4424:	30 97       	sbiw	r30, 0x00	; 0
    4426:	11 f4       	brne	.+4      	; 0x442c <f_unlink+0x5e>
    4428:	86 e0       	ldi	r24, 0x06	; 6
    442a:	5f c0       	rjmp	.+190    	; 0x44ea <f_unlink+0x11c>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
    442c:	83 85       	ldd	r24, Z+11	; 0x0b
    442e:	48 2f       	mov	r20, r24
    4430:	80 fd       	sbrc	r24, 0
    4432:	5a c0       	rjmp	.+180    	; 0x44e8 <f_unlink+0x11a>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    4434:	95 89       	ldd	r25, Z+21	; 0x15
    4436:	80 e0       	ldi	r24, 0x00	; 0
    4438:	24 89       	ldd	r18, Z+20	; 0x14
    443a:	30 e0       	ldi	r19, 0x00	; 0
    443c:	82 2b       	or	r24, r18
    443e:	93 2b       	or	r25, r19
    4440:	a0 e0       	ldi	r26, 0x00	; 0
    4442:	b0 e0       	ldi	r27, 0x00	; 0
    4444:	8c 01       	movw	r16, r24
    4446:	ff 24       	eor	r15, r15
    4448:	ee 24       	eor	r14, r14
    444a:	93 8d       	ldd	r25, Z+27	; 0x1b
    444c:	80 e0       	ldi	r24, 0x00	; 0
    444e:	22 8d       	ldd	r18, Z+26	; 0x1a
    4450:	30 e0       	ldi	r19, 0x00	; 0
    4452:	82 2b       	or	r24, r18
    4454:	93 2b       	or	r25, r19
    4456:	a0 e0       	ldi	r26, 0x00	; 0
    4458:	b0 e0       	ldi	r27, 0x00	; 0
    445a:	e8 2a       	or	r14, r24
    445c:	f9 2a       	or	r15, r25
    445e:	0a 2b       	or	r16, r26
    4460:	1b 2b       	or	r17, r27

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    4462:	44 ff       	sbrs	r20, 4
    4464:	29 c0       	rjmp	.+82     	; 0x44b8 <f_unlink+0xea>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
    4466:	82 e0       	ldi	r24, 0x02	; 2
    4468:	e8 16       	cp	r14, r24
    446a:	f1 04       	cpc	r15, r1
    446c:	01 05       	cpc	r16, r1
    446e:	11 05       	cpc	r17, r1
    4470:	10 f4       	brcc	.+4      	; 0x4476 <f_unlink+0xa8>
    4472:	82 e0       	ldi	r24, 0x02	; 2
    4474:	3a c0       	rjmp	.+116    	; 0x44ea <f_unlink+0x11c>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    4476:	de 01       	movw	r26, r28
    4478:	93 96       	adiw	r26, 0x23	; 35
	const char *s = (const char *)src;
    447a:	f6 01       	movw	r30, r12
	while (cnt--) *d++ = *s++;
    447c:	9d 01       	movw	r18, r26
    447e:	02 c0       	rjmp	.+4      	; 0x4484 <f_unlink+0xb6>
    4480:	81 91       	ld	r24, Z+
    4482:	8d 93       	st	X+, r24
    4484:	e2 17       	cp	r30, r18
    4486:	f3 07       	cpc	r31, r19
    4488:	d9 f7       	brne	.-10     	; 0x4480 <f_unlink+0xb2>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
    448a:	e9 a6       	std	Y+41, r14	; 0x29
    448c:	fa a6       	std	Y+42, r15	; 0x2a
    448e:	0b a7       	std	Y+43, r16	; 0x2b
    4490:	1c a7       	std	Y+44, r17	; 0x2c
		res = dir_seek(&sdj, 2);
    4492:	23 e2       	ldi	r18, 0x23	; 35
    4494:	c2 2e       	mov	r12, r18
    4496:	d1 2c       	mov	r13, r1
    4498:	cc 0e       	add	r12, r28
    449a:	dd 1e       	adc	r13, r29
    449c:	c6 01       	movw	r24, r12
    449e:	62 e0       	ldi	r22, 0x02	; 2
    44a0:	70 e0       	ldi	r23, 0x00	; 0
    44a2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <dir_seek>
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
    44a6:	88 23       	and	r24, r24
    44a8:	01 f5       	brne	.+64     	; 0x44ea <f_unlink+0x11c>
		res = dir_read(&sdj);
    44aa:	c6 01       	movw	r24, r12
    44ac:	0e 94 a9 10 	call	0x2152	; 0x2152 <dir_read>
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
    44b0:	88 23       	and	r24, r24
    44b2:	d1 f0       	breq	.+52     	; 0x44e8 <f_unlink+0x11a>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
    44b4:	84 30       	cpi	r24, 0x04	; 4
    44b6:	c9 f4       	brne	.+50     	; 0x44ea <f_unlink+0x11c>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
    44b8:	ce 01       	movw	r24, r28
    44ba:	0d 96       	adiw	r24, 0x0d	; 13
    44bc:	0e 94 34 11 	call	0x2268	; 0x2268 <dir_remove>
	if (res == FR_OK) {
    44c0:	88 23       	and	r24, r24
    44c2:	99 f4       	brne	.+38     	; 0x44ea <f_unlink+0x11c>
		if (dclst)
    44c4:	e1 14       	cp	r14, r1
    44c6:	f1 04       	cpc	r15, r1
    44c8:	01 05       	cpc	r16, r1
    44ca:	11 05       	cpc	r17, r1
    44cc:	41 f0       	breq	.+16     	; 0x44de <f_unlink+0x110>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
    44ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    44d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    44d2:	b8 01       	movw	r22, r16
    44d4:	a7 01       	movw	r20, r14
    44d6:	0e 94 85 0c 	call	0x190a	; 0x190a <remove_chain>
		if (res == FR_OK) res = sync(dj.fs);
    44da:	88 23       	and	r24, r24
    44dc:	31 f4       	brne	.+12     	; 0x44ea <f_unlink+0x11c>
    44de:	8d 85       	ldd	r24, Y+13	; 0x0d
    44e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    44e2:	0e 94 20 0a 	call	0x1440	; 0x1440 <sync>
    44e6:	01 c0       	rjmp	.+2      	; 0x44ea <f_unlink+0x11c>
    44e8:	87 e0       	ldi	r24, 0x07	; 7
	}

	LEAVE_FF(dj.fs, res);
}
    44ea:	ea 96       	adiw	r28, 0x3a	; 58
    44ec:	cd bf       	out	0x3d, r28	; 61
    44ee:	de bf       	out	0x3e, r29	; 62
    44f0:	cf 91       	pop	r28
    44f2:	df 91       	pop	r29
    44f4:	1f 91       	pop	r17
    44f6:	0f 91       	pop	r16
    44f8:	ff 90       	pop	r15
    44fa:	ef 90       	pop	r14
    44fc:	df 90       	pop	r13
    44fe:	cf 90       	pop	r12
    4500:	08 95       	ret

00004502 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
    4502:	2f 92       	push	r2
    4504:	3f 92       	push	r3
    4506:	4f 92       	push	r4
    4508:	5f 92       	push	r5
    450a:	6f 92       	push	r6
    450c:	7f 92       	push	r7
    450e:	8f 92       	push	r8
    4510:	9f 92       	push	r9
    4512:	af 92       	push	r10
    4514:	bf 92       	push	r11
    4516:	cf 92       	push	r12
    4518:	df 92       	push	r13
    451a:	ef 92       	push	r14
    451c:	ff 92       	push	r15
    451e:	0f 93       	push	r16
    4520:	1f 93       	push	r17
    4522:	df 93       	push	r29
    4524:	cf 93       	push	r28
    4526:	cd b7       	in	r28, 0x3d	; 61
    4528:	de b7       	in	r29, 0x3e	; 62
    452a:	a8 97       	sbiw	r28, 0x28	; 40
    452c:	cd bf       	out	0x3d, r28	; 61
    452e:	de bf       	out	0x3e, r29	; 62
    4530:	8b a3       	std	Y+35, r24	; 0x23
    4532:	9c a3       	std	Y+36, r25	; 0x24
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = chk_mounted(&path, &dj.fs, 1);
    4534:	3d e0       	ldi	r19, 0x0D	; 13
    4536:	e3 2e       	mov	r14, r19
    4538:	f1 2c       	mov	r15, r1
    453a:	ec 0e       	add	r14, r28
    453c:	fd 1e       	adc	r15, r29
    453e:	ce 01       	movw	r24, r28
    4540:	83 96       	adiw	r24, 0x23	; 35
    4542:	b7 01       	movw	r22, r14
    4544:	41 e0       	ldi	r20, 0x01	; 1
    4546:	0e 94 ba 13 	call	0x2774	; 0x2774 <chk_mounted>
    454a:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    454c:	88 23       	and	r24, r24
    454e:	09 f0       	breq	.+2      	; 0x4552 <f_mkdir+0x50>
    4550:	38 c1       	rjmp	.+624    	; 0x47c2 <f_mkdir+0x2c0>

	INITBUF(dj, sfn, lfn);
    4552:	ce 01       	movw	r24, r28
    4554:	01 96       	adiw	r24, 0x01	; 1
    4556:	89 a3       	std	Y+33, r24	; 0x21
    4558:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    455a:	6b a1       	ldd	r22, Y+35	; 0x23
    455c:	7c a1       	ldd	r23, Y+36	; 0x24
    455e:	c7 01       	movw	r24, r14
    4560:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <follow_path>
    4564:	18 2f       	mov	r17, r24
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
    4566:	88 23       	and	r24, r24
    4568:	11 f4       	brne	.+4      	; 0x456e <f_mkdir+0x6c>
    456a:	18 e0       	ldi	r17, 0x08	; 8
    456c:	2a c1       	rjmp	.+596    	; 0x47c2 <f_mkdir+0x2c0>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
    456e:	84 30       	cpi	r24, 0x04	; 4
    4570:	09 f0       	breq	.+2      	; 0x4574 <f_mkdir+0x72>
    4572:	27 c1       	rjmp	.+590    	; 0x47c2 <f_mkdir+0x2c0>
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
    4574:	8d 85       	ldd	r24, Y+13	; 0x0d
    4576:	9e 85       	ldd	r25, Y+14	; 0x0e
    4578:	40 e0       	ldi	r20, 0x00	; 0
    457a:	50 e0       	ldi	r21, 0x00	; 0
    457c:	60 e0       	ldi	r22, 0x00	; 0
    457e:	70 e0       	ldi	r23, 0x00	; 0
    4580:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <create_chain>
    4584:	4b 01       	movw	r8, r22
    4586:	5c 01       	movw	r10, r24
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
    4588:	61 15       	cp	r22, r1
    458a:	71 05       	cpc	r23, r1
    458c:	81 05       	cpc	r24, r1
    458e:	91 05       	cpc	r25, r1
    4590:	11 f4       	brne	.+4      	; 0x4596 <f_mkdir+0x94>
    4592:	17 e0       	ldi	r17, 0x07	; 7
    4594:	16 c1       	rjmp	.+556    	; 0x47c2 <f_mkdir+0x2c0>
	if (dclst == 1) res = FR_INT_ERR;
    4596:	61 30       	cpi	r22, 0x01	; 1
    4598:	71 05       	cpc	r23, r1
    459a:	81 05       	cpc	r24, r1
    459c:	91 05       	cpc	r25, r1
    459e:	11 f4       	brne	.+4      	; 0x45a4 <f_mkdir+0xa2>
    45a0:	12 e0       	ldi	r17, 0x02	; 2
    45a2:	0f c1       	rjmp	.+542    	; 0x47c2 <f_mkdir+0x2c0>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
    45a4:	6f 3f       	cpi	r22, 0xFF	; 255
    45a6:	3f ef       	ldi	r19, 0xFF	; 255
    45a8:	73 07       	cpc	r23, r19
    45aa:	3f ef       	ldi	r19, 0xFF	; 255
    45ac:	83 07       	cpc	r24, r19
    45ae:	3f ef       	ldi	r19, 0xFF	; 255
    45b0:	93 07       	cpc	r25, r19
    45b2:	09 f4       	brne	.+2      	; 0x45b6 <f_mkdir+0xb4>
    45b4:	1d c1       	rjmp	.+570    	; 0x47f0 <f_mkdir+0x2ee>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
    45b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    45b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    45ba:	40 e0       	ldi	r20, 0x00	; 0
    45bc:	50 e0       	ldi	r21, 0x00	; 0
    45be:	60 e0       	ldi	r22, 0x00	; 0
    45c0:	70 e0       	ldi	r23, 0x00	; 0
    45c2:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    45c6:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    45c8:	88 23       	and	r24, r24
    45ca:	09 f0       	breq	.+2      	; 0x45ce <f_mkdir+0xcc>
    45cc:	fa c0       	rjmp	.+500    	; 0x47c2 <f_mkdir+0x2c0>
	dsect = clust2sect(dj.fs, dclst);
    45ce:	0d 85       	ldd	r16, Y+13	; 0x0d
    45d0:	1e 85       	ldd	r17, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    45d2:	2e ef       	ldi	r18, 0xFE	; 254
    45d4:	c2 2e       	mov	r12, r18
    45d6:	2f ef       	ldi	r18, 0xFF	; 255
    45d8:	d2 2e       	mov	r13, r18
    45da:	2f ef       	ldi	r18, 0xFF	; 255
    45dc:	e2 2e       	mov	r14, r18
    45de:	2f ef       	ldi	r18, 0xFF	; 255
    45e0:	f2 2e       	mov	r15, r18
    45e2:	c8 0c       	add	r12, r8
    45e4:	d9 1c       	adc	r13, r9
    45e6:	ea 1c       	adc	r14, r10
    45e8:	fb 1c       	adc	r15, r11
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    45ea:	f8 01       	movw	r30, r16
    45ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    45ee:	93 8d       	ldd	r25, Z+27	; 0x1b
    45f0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    45f2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    45f4:	02 97       	sbiw	r24, 0x02	; 2
    45f6:	a1 09       	sbc	r26, r1
    45f8:	b1 09       	sbc	r27, r1
    45fa:	c8 16       	cp	r12, r24
    45fc:	d9 06       	cpc	r13, r25
    45fe:	ea 06       	cpc	r14, r26
    4600:	fb 06       	cpc	r15, r27
    4602:	20 f0       	brcs	.+8      	; 0x460c <f_mkdir+0x10a>
    4604:	44 24       	eor	r4, r4
    4606:	55 24       	eor	r5, r5
    4608:	32 01       	movw	r6, r4
    460a:	14 c0       	rjmp	.+40     	; 0x4634 <f_mkdir+0x132>
	return clst * fs->csize + fs->database;
    460c:	f8 01       	movw	r30, r16
    460e:	22 81       	ldd	r18, Z+2	; 0x02
    4610:	30 e0       	ldi	r19, 0x00	; 0
    4612:	40 e0       	ldi	r20, 0x00	; 0
    4614:	50 e0       	ldi	r21, 0x00	; 0
    4616:	c7 01       	movw	r24, r14
    4618:	b6 01       	movw	r22, r12
    461a:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <__mulsi3>
    461e:	2b 01       	movw	r4, r22
    4620:	3c 01       	movw	r6, r24
    4622:	f8 01       	movw	r30, r16
    4624:	86 a1       	ldd	r24, Z+38	; 0x26
    4626:	97 a1       	ldd	r25, Z+39	; 0x27
    4628:	a0 a5       	ldd	r26, Z+40	; 0x28
    462a:	b1 a5       	ldd	r27, Z+41	; 0x29
    462c:	48 0e       	add	r4, r24
    462e:	59 1e       	adc	r5, r25
    4630:	6a 1e       	adc	r6, r26
    4632:	7b 1e       	adc	r7, r27
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
    4634:	9e e2       	ldi	r25, 0x2E	; 46
    4636:	29 2e       	mov	r2, r25
    4638:	31 2c       	mov	r3, r1
    463a:	20 0e       	add	r2, r16
    463c:	31 1e       	adc	r3, r17
    463e:	f1 01       	movw	r30, r2
    4640:	80 e0       	ldi	r24, 0x00	; 0
    4642:	92 e0       	ldi	r25, 0x02	; 2
    4644:	01 c0       	rjmp	.+2      	; 0x4648 <f_mkdir+0x146>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    4646:	11 92       	st	Z+, r1
    4648:	01 97       	sbiw	r24, 0x01	; 1
    464a:	2f ef       	ldi	r18, 0xFF	; 255
    464c:	8f 3f       	cpi	r24, 0xFF	; 255
    464e:	92 07       	cpc	r25, r18
    4650:	d1 f7       	brne	.-12     	; 0x4646 <f_mkdir+0x144>
    4652:	f1 01       	movw	r30, r2
    4654:	8b e0       	ldi	r24, 0x0B	; 11
    4656:	90 e0       	ldi	r25, 0x00	; 0
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
    4658:	20 e2       	ldi	r18, 0x20	; 32
    465a:	01 c0       	rjmp	.+2      	; 0x465e <f_mkdir+0x15c>
    465c:	21 93       	st	Z+, r18
    465e:	01 97       	sbiw	r24, 0x01	; 1
    4660:	3f ef       	ldi	r19, 0xFF	; 255
    4662:	8f 3f       	cpi	r24, 0xFF	; 255
    4664:	93 07       	cpc	r25, r19
    4666:	d1 f7       	brne	.-12     	; 0x465c <f_mkdir+0x15a>
    4668:	8e e2       	ldi	r24, 0x2E	; 46
    466a:	f8 01       	movw	r30, r16
    466c:	86 a7       	std	Z+46, r24	; 0x2e
	dir[DIR_Attr] = AM_DIR;
    466e:	80 e1       	ldi	r24, 0x10	; 16
    4670:	81 af       	std	Z+57, r24	; 0x39
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
    4672:	0c 5b       	subi	r16, 0xBC	; 188
    4674:	1f 4f       	sbci	r17, 0xFF	; 255
    4676:	f8 01       	movw	r30, r16
    4678:	11 92       	st	Z+, r1
    467a:	11 92       	st	Z+, r1
    467c:	11 92       	st	Z+, r1
    467e:	11 92       	st	Z+, r1
	ST_WORD(dir+DIR_FstClusLO, dclst);
    4680:	88 a6       	std	Y+40, r8	; 0x28
    4682:	81 92       	st	Z+, r8
    4684:	8f 01       	movw	r16, r30
    4686:	89 2d       	mov	r24, r9
    4688:	99 27       	eor	r25, r25
    468a:	8f a3       	std	Y+39, r24	; 0x27
    468c:	80 83       	st	Z, r24
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    468e:	c5 01       	movw	r24, r10
    4690:	aa 27       	eor	r26, r26
    4692:	bb 27       	eor	r27, r27
    4694:	8e a3       	std	Y+38, r24	; 0x26
    4696:	07 50       	subi	r16, 0x07	; 7
    4698:	10 40       	sbci	r17, 0x00	; 0
    469a:	f8 01       	movw	r30, r16
    469c:	81 93       	st	Z+, r24
    469e:	8f 01       	movw	r16, r30
    46a0:	89 2f       	mov	r24, r25
    46a2:	99 27       	eor	r25, r25
    46a4:	8d a3       	std	Y+37, r24	; 0x25
    46a6:	80 83       	st	Z, r24
    46a8:	03 54       	subi	r16, 0x43	; 67
    46aa:	10 40       	sbci	r17, 0x00	; 0
    46ac:	f1 01       	movw	r30, r2
    46ae:	20 e2       	ldi	r18, 0x20	; 32
    46b0:	30 e0       	ldi	r19, 0x00	; 0
    46b2:	03 c0       	rjmp	.+6      	; 0x46ba <f_mkdir+0x1b8>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    46b4:	80 81       	ld	r24, Z
    46b6:	80 a3       	std	Z+32, r24	; 0x20
    46b8:	31 96       	adiw	r30, 0x01	; 1
    46ba:	21 50       	subi	r18, 0x01	; 1
    46bc:	30 40       	sbci	r19, 0x00	; 0
    46be:	8f ef       	ldi	r24, 0xFF	; 255
    46c0:	2f 3f       	cpi	r18, 0xFF	; 255
    46c2:	38 07       	cpc	r19, r24
    46c4:	b9 f7       	brne	.-18     	; 0x46b4 <f_mkdir+0x1b2>
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
    46c6:	01 5b       	subi	r16, 0xB1	; 177
    46c8:	1f 4f       	sbci	r17, 0xFF	; 255
    46ca:	8e e2       	ldi	r24, 0x2E	; 46
    46cc:	f8 01       	movw	r30, r16
    46ce:	80 83       	st	Z, r24
    46d0:	0f 54       	subi	r16, 0x4F	; 79
    46d2:	10 40       	sbci	r17, 0x00	; 0
	pclst = dj.sclust;
    46d4:	2b 89       	ldd	r18, Y+19	; 0x13
    46d6:	3c 89       	ldd	r19, Y+20	; 0x14
    46d8:	4d 89       	ldd	r20, Y+21	; 0x15
    46da:	5e 89       	ldd	r21, Y+22	; 0x16
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
    46dc:	ed 85       	ldd	r30, Y+13	; 0x0d
    46de:	fe 85       	ldd	r31, Y+14	; 0x0e
    46e0:	80 81       	ld	r24, Z
    46e2:	83 30       	cpi	r24, 0x03	; 3
    46e4:	69 f4       	brne	.+26     	; 0x4700 <f_mkdir+0x1fe>
    46e6:	82 a1       	ldd	r24, Z+34	; 0x22
    46e8:	93 a1       	ldd	r25, Z+35	; 0x23
    46ea:	a4 a1       	ldd	r26, Z+36	; 0x24
    46ec:	b5 a1       	ldd	r27, Z+37	; 0x25
    46ee:	28 17       	cp	r18, r24
    46f0:	39 07       	cpc	r19, r25
    46f2:	4a 07       	cpc	r20, r26
    46f4:	5b 07       	cpc	r21, r27
    46f6:	21 f4       	brne	.+8      	; 0x4700 <f_mkdir+0x1fe>
    46f8:	20 e0       	ldi	r18, 0x00	; 0
    46fa:	30 e0       	ldi	r19, 0x00	; 0
    46fc:	40 e0       	ldi	r20, 0x00	; 0
    46fe:	50 e0       	ldi	r21, 0x00	; 0
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
    4700:	08 59       	subi	r16, 0x98	; 152
    4702:	1f 4f       	sbci	r17, 0xFF	; 255
    4704:	f8 01       	movw	r30, r16
    4706:	21 93       	st	Z+, r18
    4708:	8f 01       	movw	r16, r30
    470a:	83 2f       	mov	r24, r19
    470c:	99 27       	eor	r25, r25
    470e:	80 83       	st	Z, r24
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
    4710:	ca 01       	movw	r24, r20
    4712:	aa 27       	eor	r26, r26
    4714:	bb 27       	eor	r27, r27
    4716:	07 50       	subi	r16, 0x07	; 7
    4718:	10 40       	sbci	r17, 0x00	; 0
    471a:	f8 01       	movw	r30, r16
    471c:	81 93       	st	Z+, r24
    471e:	89 2f       	mov	r24, r25
    4720:	99 27       	eor	r25, r25
    4722:	80 83       	st	Z, r24
    4724:	73 01       	movw	r14, r6
    4726:	62 01       	movw	r12, r4
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
		dj.fs->wflag = 1;
    4728:	01 e0       	ldi	r16, 0x01	; 1
    472a:	1e c0       	rjmp	.+60     	; 0x4768 <f_mkdir+0x266>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    472c:	c2 a6       	std	Z+42, r12	; 0x2a
    472e:	d3 a6       	std	Z+43, r13	; 0x2b
    4730:	e4 a6       	std	Z+44, r14	; 0x2c
    4732:	f5 a6       	std	Z+45, r15	; 0x2d
		dj.fs->wflag = 1;
    4734:	04 83       	std	Z+4, r16	; 0x04
		res = move_window(dj.fs, 0);
    4736:	cf 01       	movw	r24, r30
    4738:	40 e0       	ldi	r20, 0x00	; 0
    473a:	50 e0       	ldi	r21, 0x00	; 0
    473c:	60 e0       	ldi	r22, 0x00	; 0
    473e:	70 e0       	ldi	r23, 0x00	; 0
    4740:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
    4744:	18 2f       	mov	r17, r24
		if (res) LEAVE_FF(dj.fs, res);
    4746:	88 23       	and	r24, r24
    4748:	e1 f5       	brne	.+120    	; 0x47c2 <f_mkdir+0x2c0>
    474a:	f1 01       	movw	r30, r2
    474c:	80 e0       	ldi	r24, 0x00	; 0
    474e:	92 e0       	ldi	r25, 0x02	; 2
    4750:	01 c0       	rjmp	.+2      	; 0x4754 <f_mkdir+0x252>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    4752:	11 92       	st	Z+, r1
    4754:	01 97       	sbiw	r24, 0x01	; 1
    4756:	2f ef       	ldi	r18, 0xFF	; 255
    4758:	8f 3f       	cpi	r24, 0xFF	; 255
    475a:	92 07       	cpc	r25, r18
    475c:	d1 f7       	brne	.-12     	; 0x4752 <f_mkdir+0x250>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    475e:	08 94       	sec
    4760:	c1 1c       	adc	r12, r1
    4762:	d1 1c       	adc	r13, r1
    4764:	e1 1c       	adc	r14, r1
    4766:	f1 1c       	adc	r15, r1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
    4768:	ed 85       	ldd	r30, Y+13	; 0x0d
    476a:	fe 85       	ldd	r31, Y+14	; 0x0e
    476c:	9c 2d       	mov	r25, r12
    476e:	94 19       	sub	r25, r4
    4770:	82 81       	ldd	r24, Z+2	; 0x02
    4772:	98 17       	cp	r25, r24
    4774:	d8 f2       	brcs	.-74     	; 0x472c <f_mkdir+0x22a>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
    4776:	ce 01       	movw	r24, r28
    4778:	0d 96       	adiw	r24, 0x0d	; 13
    477a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <dir_register>
    477e:	18 2f       	mov	r17, r24
	if (res != FR_OK) {
    4780:	88 23       	and	r24, r24
    4782:	39 f0       	breq	.+14     	; 0x4792 <f_mkdir+0x290>
		remove_chain(dj.fs, dclst);
    4784:	8d 85       	ldd	r24, Y+13	; 0x0d
    4786:	9e 85       	ldd	r25, Y+14	; 0x0e
    4788:	b5 01       	movw	r22, r10
    478a:	a4 01       	movw	r20, r8
    478c:	0e 94 85 0c 	call	0x190a	; 0x190a <remove_chain>
    4790:	18 c0       	rjmp	.+48     	; 0x47c2 <f_mkdir+0x2c0>
	} else {
		dir = dj.dir;
    4792:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4794:	f8 a1       	ldd	r31, Y+32	; 0x20
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
    4796:	80 e1       	ldi	r24, 0x10	; 16
    4798:	83 87       	std	Z+11, r24	; 0x0b
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
    479a:	16 8a       	std	Z+22, r1	; 0x16
    479c:	17 8a       	std	Z+23, r1	; 0x17
    479e:	10 8e       	std	Z+24, r1	; 0x18
    47a0:	11 8e       	std	Z+25, r1	; 0x19
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
    47a2:	38 a5       	ldd	r19, Y+40	; 0x28
    47a4:	32 8f       	std	Z+26, r19	; 0x1a
    47a6:	8f a1       	ldd	r24, Y+39	; 0x27
    47a8:	83 8f       	std	Z+27, r24	; 0x1b
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    47aa:	2e a1       	ldd	r18, Y+38	; 0x26
    47ac:	24 8b       	std	Z+20, r18	; 0x14
    47ae:	3d a1       	ldd	r19, Y+37	; 0x25
    47b0:	35 8b       	std	Z+21, r19	; 0x15
		dj.fs->wflag = 1;
    47b2:	ed 85       	ldd	r30, Y+13	; 0x0d
    47b4:	fe 85       	ldd	r31, Y+14	; 0x0e
    47b6:	81 e0       	ldi	r24, 0x01	; 1
    47b8:	84 83       	std	Z+4, r24	; 0x04
		res = sync(dj.fs);
    47ba:	cf 01       	movw	r24, r30
    47bc:	0e 94 20 0a 	call	0x1440	; 0x1440 <sync>
    47c0:	18 2f       	mov	r17, r24
	}

	LEAVE_FF(dj.fs, res);
}
    47c2:	81 2f       	mov	r24, r17
    47c4:	a8 96       	adiw	r28, 0x28	; 40
    47c6:	cd bf       	out	0x3d, r28	; 61
    47c8:	de bf       	out	0x3e, r29	; 62
    47ca:	cf 91       	pop	r28
    47cc:	df 91       	pop	r29
    47ce:	1f 91       	pop	r17
    47d0:	0f 91       	pop	r16
    47d2:	ff 90       	pop	r15
    47d4:	ef 90       	pop	r14
    47d6:	df 90       	pop	r13
    47d8:	cf 90       	pop	r12
    47da:	bf 90       	pop	r11
    47dc:	af 90       	pop	r10
    47de:	9f 90       	pop	r9
    47e0:	8f 90       	pop	r8
    47e2:	7f 90       	pop	r7
    47e4:	6f 90       	pop	r6
    47e6:	5f 90       	pop	r5
    47e8:	4f 90       	pop	r4
    47ea:	3f 90       	pop	r3
    47ec:	2f 90       	pop	r2
    47ee:	08 95       	ret
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
		dj.fs->wflag = 1;
		res = sync(dj.fs);
    47f0:	11 e0       	ldi	r17, 0x01	; 1
    47f2:	e7 cf       	rjmp	.-50     	; 0x47c2 <f_mkdir+0x2c0>

000047f4 <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    47f4:	ef 92       	push	r14
    47f6:	ff 92       	push	r15
    47f8:	0f 93       	push	r16
    47fa:	1f 93       	push	r17
    47fc:	df 93       	push	r29
    47fe:	cf 93       	push	r28
    4800:	cd b7       	in	r28, 0x3d	; 61
    4802:	de b7       	in	r29, 0x3e	; 62
    4804:	a4 97       	sbiw	r28, 0x24	; 36
    4806:	cd bf       	out	0x3d, r28	; 61
    4808:	de bf       	out	0x3e, r29	; 62
    480a:	8b a3       	std	Y+35, r24	; 0x23
    480c:	9c a3       	std	Y+36, r25	; 0x24
    480e:	e6 2e       	mov	r14, r22
    4810:	f4 2e       	mov	r15, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    4812:	8e 01       	movw	r16, r28
    4814:	03 5f       	subi	r16, 0xF3	; 243
    4816:	1f 4f       	sbci	r17, 0xFF	; 255
    4818:	ce 01       	movw	r24, r28
    481a:	83 96       	adiw	r24, 0x23	; 35
    481c:	b8 01       	movw	r22, r16
    481e:	41 e0       	ldi	r20, 0x01	; 1
    4820:	0e 94 ba 13 	call	0x2774	; 0x2774 <chk_mounted>
	if (res == FR_OK) {
    4824:	88 23       	and	r24, r24
    4826:	09 f5       	brne	.+66     	; 0x486a <f_chmod+0x76>
		INITBUF(dj, sfn, lfn);
    4828:	ce 01       	movw	r24, r28
    482a:	01 96       	adiw	r24, 0x01	; 1
    482c:	89 a3       	std	Y+33, r24	; 0x21
    482e:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    4830:	6b a1       	ldd	r22, Y+35	; 0x23
    4832:	7c a1       	ldd	r23, Y+36	; 0x24
    4834:	c8 01       	movw	r24, r16
    4836:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    483a:	88 23       	and	r24, r24
    483c:	b1 f4       	brne	.+44     	; 0x486a <f_chmod+0x76>
			dir = dj.dir;
    483e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4840:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    4842:	30 97       	sbiw	r30, 0x00	; 0
    4844:	11 f4       	brne	.+4      	; 0x484a <f_chmod+0x56>
    4846:	86 e0       	ldi	r24, 0x06	; 6
    4848:	10 c0       	rjmp	.+32     	; 0x486a <f_chmod+0x76>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    484a:	9f 2d       	mov	r25, r15
    484c:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    484e:	89 2f       	mov	r24, r25
    4850:	80 95       	com	r24
    4852:	23 85       	ldd	r18, Z+11	; 0x0b
    4854:	82 23       	and	r24, r18
    4856:	9e 21       	and	r25, r14
    4858:	89 2b       	or	r24, r25
    485a:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    485c:	ed 85       	ldd	r30, Y+13	; 0x0d
    485e:	fe 85       	ldd	r31, Y+14	; 0x0e
    4860:	81 e0       	ldi	r24, 0x01	; 1
    4862:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    4864:	cf 01       	movw	r24, r30
    4866:	0e 94 20 0a 	call	0x1440	; 0x1440 <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    486a:	a4 96       	adiw	r28, 0x24	; 36
    486c:	cd bf       	out	0x3d, r28	; 61
    486e:	de bf       	out	0x3e, r29	; 62
    4870:	cf 91       	pop	r28
    4872:	df 91       	pop	r29
    4874:	1f 91       	pop	r17
    4876:	0f 91       	pop	r16
    4878:	ff 90       	pop	r15
    487a:	ef 90       	pop	r14
    487c:	08 95       	ret

0000487e <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
    487e:	ef 92       	push	r14
    4880:	ff 92       	push	r15
    4882:	0f 93       	push	r16
    4884:	1f 93       	push	r17
    4886:	df 93       	push	r29
    4888:	cf 93       	push	r28
    488a:	cd b7       	in	r28, 0x3d	; 61
    488c:	de b7       	in	r29, 0x3e	; 62
    488e:	a4 97       	sbiw	r28, 0x24	; 36
    4890:	cd bf       	out	0x3d, r28	; 61
    4892:	de bf       	out	0x3e, r29	; 62
    4894:	8b a3       	std	Y+35, r24	; 0x23
    4896:	9c a3       	std	Y+36, r25	; 0x24
    4898:	8b 01       	movw	r16, r22
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    489a:	4d e0       	ldi	r20, 0x0D	; 13
    489c:	e4 2e       	mov	r14, r20
    489e:	f1 2c       	mov	r15, r1
    48a0:	ec 0e       	add	r14, r28
    48a2:	fd 1e       	adc	r15, r29
    48a4:	ce 01       	movw	r24, r28
    48a6:	83 96       	adiw	r24, 0x23	; 35
    48a8:	b7 01       	movw	r22, r14
    48aa:	41 e0       	ldi	r20, 0x01	; 1
    48ac:	0e 94 ba 13 	call	0x2774	; 0x2774 <chk_mounted>
	if (res == FR_OK) {
    48b0:	88 23       	and	r24, r24
    48b2:	41 f5       	brne	.+80     	; 0x4904 <f_utime+0x86>
		INITBUF(dj, sfn, lfn);
    48b4:	ce 01       	movw	r24, r28
    48b6:	01 96       	adiw	r24, 0x01	; 1
    48b8:	89 a3       	std	Y+33, r24	; 0x21
    48ba:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    48bc:	6b a1       	ldd	r22, Y+35	; 0x23
    48be:	7c a1       	ldd	r23, Y+36	; 0x24
    48c0:	c7 01       	movw	r24, r14
    48c2:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    48c6:	88 23       	and	r24, r24
    48c8:	e9 f4       	brne	.+58     	; 0x4904 <f_utime+0x86>
			dir = dj.dir;
    48ca:	ef 8d       	ldd	r30, Y+31	; 0x1f
    48cc:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {				/* Root directory */
    48ce:	30 97       	sbiw	r30, 0x00	; 0
    48d0:	11 f4       	brne	.+4      	; 0x48d6 <f_utime+0x58>
    48d2:	86 e0       	ldi	r24, 0x06	; 6
    48d4:	17 c0       	rjmp	.+46     	; 0x4904 <f_utime+0x86>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    48d6:	d8 01       	movw	r26, r16
    48d8:	16 96       	adiw	r26, 0x06	; 6
    48da:	8c 91       	ld	r24, X
    48dc:	16 97       	sbiw	r26, 0x06	; 6
    48de:	86 8b       	std	Z+22, r24	; 0x16
    48e0:	17 96       	adiw	r26, 0x07	; 7
    48e2:	8c 91       	ld	r24, X
    48e4:	17 97       	sbiw	r26, 0x07	; 7
    48e6:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    48e8:	14 96       	adiw	r26, 0x04	; 4
    48ea:	8c 91       	ld	r24, X
    48ec:	14 97       	sbiw	r26, 0x04	; 4
    48ee:	80 8f       	std	Z+24, r24	; 0x18
    48f0:	15 96       	adiw	r26, 0x05	; 5
    48f2:	8c 91       	ld	r24, X
    48f4:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    48f6:	ed 85       	ldd	r30, Y+13	; 0x0d
    48f8:	fe 85       	ldd	r31, Y+14	; 0x0e
    48fa:	81 e0       	ldi	r24, 0x01	; 1
    48fc:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    48fe:	cf 01       	movw	r24, r30
    4900:	0e 94 20 0a 	call	0x1440	; 0x1440 <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4904:	a4 96       	adiw	r28, 0x24	; 36
    4906:	cd bf       	out	0x3d, r28	; 61
    4908:	de bf       	out	0x3e, r29	; 62
    490a:	cf 91       	pop	r28
    490c:	df 91       	pop	r29
    490e:	1f 91       	pop	r17
    4910:	0f 91       	pop	r16
    4912:	ff 90       	pop	r15
    4914:	ef 90       	pop	r14
    4916:	08 95       	ret

00004918 <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
    4918:	cf 92       	push	r12
    491a:	df 92       	push	r13
    491c:	ef 92       	push	r14
    491e:	ff 92       	push	r15
    4920:	0f 93       	push	r16
    4922:	1f 93       	push	r17
    4924:	df 93       	push	r29
    4926:	cf 93       	push	r28
    4928:	cd b7       	in	r28, 0x3d	; 61
    492a:	de b7       	in	r29, 0x3e	; 62
    492c:	cf 54       	subi	r28, 0x4F	; 79
    492e:	d0 40       	sbci	r29, 0x00	; 0
    4930:	cd bf       	out	0x3d, r28	; 61
    4932:	de bf       	out	0x3e, r29	; 62
    4934:	8e 01       	movw	r16, r28
    4936:	02 5b       	subi	r16, 0xB2	; 178
    4938:	1f 4f       	sbci	r17, 0xFF	; 255
    493a:	d8 01       	movw	r26, r16
    493c:	8d 93       	st	X+, r24
    493e:	9c 93       	st	X, r25
    4940:	6b 01       	movw	r12, r22
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
    4942:	ce 01       	movw	r24, r28
    4944:	01 96       	adiw	r24, 0x01	; 1
    4946:	8e ab       	std	Y+54, r24	; 0x36
    4948:	9f ab       	std	Y+55, r25	; 0x37
	res = chk_mounted(&path_old, &dj_old.fs, 1);
    494a:	a2 e2       	ldi	r26, 0x22	; 34
    494c:	ea 2e       	mov	r14, r26
    494e:	f1 2c       	mov	r15, r1
    4950:	ec 0e       	add	r14, r28
    4952:	fd 1e       	adc	r15, r29
    4954:	c8 01       	movw	r24, r16
    4956:	b7 01       	movw	r22, r14
    4958:	41 e0       	ldi	r20, 0x01	; 1
    495a:	0e 94 ba 13 	call	0x2774	; 0x2774 <chk_mounted>
	if (res == FR_OK) {
    495e:	88 23       	and	r24, r24
    4960:	09 f0       	breq	.+2      	; 0x4964 <f_rename+0x4c>
    4962:	f4 c0       	rjmp	.+488    	; 0x4b4c <f_rename+0x234>
		dj_new.fs = dj_old.fs;
    4964:	8a a1       	ldd	r24, Y+34	; 0x22
    4966:	9b a1       	ldd	r25, Y+35	; 0x23
    4968:	88 af       	std	Y+56, r24	; 0x38
    496a:	99 af       	std	Y+57, r25	; 0x39
		res = follow_path(&dj_old, path_old);	/* Check old object */
    496c:	f8 01       	movw	r30, r16
    496e:	60 81       	ld	r22, Z
    4970:	71 81       	ldd	r23, Z+1	; 0x01
    4972:	c7 01       	movw	r24, r14
    4974:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
    4978:	88 23       	and	r24, r24
    497a:	09 f0       	breq	.+2      	; 0x497e <f_rename+0x66>
    497c:	e7 c0       	rjmp	.+462    	; 0x4b4c <f_rename+0x234>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
    497e:	8c a9       	ldd	r24, Y+52	; 0x34
    4980:	9d a9       	ldd	r25, Y+53	; 0x35
    4982:	00 97       	sbiw	r24, 0x00	; 0
    4984:	11 f4       	brne	.+4      	; 0x498a <f_rename+0x72>
    4986:	84 e0       	ldi	r24, 0x04	; 4
    4988:	e1 c0       	rjmp	.+450    	; 0x4b4c <f_rename+0x234>
    498a:	dc 01       	movw	r26, r24
    498c:	fe 01       	movw	r30, r28
    498e:	3d 96       	adiw	r30, 0x0d	; 13
    4990:	04 c0       	rjmp	.+8      	; 0x499a <f_rename+0x82>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4992:	1a 96       	adiw	r26, 0x0a	; 10
    4994:	8c 91       	ld	r24, X
    4996:	1a 97       	sbiw	r26, 0x0a	; 10
    4998:	81 93       	st	Z+, r24
    499a:	11 96       	adiw	r26, 0x01	; 1
    499c:	ee 15       	cp	r30, r14
    499e:	ff 05       	cpc	r31, r15
    49a0:	c1 f7       	brne	.-16     	; 0x4992 <f_rename+0x7a>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    49a2:	de 01       	movw	r26, r28
    49a4:	d8 96       	adiw	r26, 0x38	; 56
	const char *s = (const char *)src;
    49a6:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = *s++;
    49a8:	9d 01       	movw	r18, r26
    49aa:	02 c0       	rjmp	.+4      	; 0x49b0 <f_rename+0x98>
    49ac:	81 91       	ld	r24, Z+
    49ae:	8d 93       	st	X+, r24
    49b0:	e2 17       	cp	r30, r18
    49b2:	f3 07       	cpc	r31, r19
    49b4:	d9 f7       	brne	.-10     	; 0x49ac <f_rename+0x94>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
    49b6:	8e 01       	movw	r16, r28
    49b8:	08 5c       	subi	r16, 0xC8	; 200
    49ba:	1f 4f       	sbci	r17, 0xFF	; 255
    49bc:	c8 01       	movw	r24, r16
    49be:	b6 01       	movw	r22, r12
    49c0:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <follow_path>
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    49c4:	88 23       	and	r24, r24
    49c6:	11 f4       	brne	.+4      	; 0x49cc <f_rename+0xb4>
    49c8:	88 e0       	ldi	r24, 0x08	; 8
    49ca:	c0 c0       	rjmp	.+384    	; 0x4b4c <f_rename+0x234>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    49cc:	84 30       	cpi	r24, 0x04	; 4
    49ce:	09 f0       	breq	.+2      	; 0x49d2 <f_rename+0xba>
    49d0:	bd c0       	rjmp	.+378    	; 0x4b4c <f_rename+0x234>
		res = dir_register(&dj_new);			/* Register the new object */
    49d2:	c8 01       	movw	r24, r16
    49d4:	0e 94 dd 10 	call	0x21ba	; 0x21ba <dir_register>
		if (res == FR_OK) {
    49d8:	88 23       	and	r24, r24
    49da:	09 f0       	breq	.+2      	; 0x49de <f_rename+0xc6>
    49dc:	b7 c0       	rjmp	.+366    	; 0x4b4c <f_rename+0x234>
			dir = dj_new.dir;					/* Copy object information into new entry */
    49de:	fe 01       	movw	r30, r28
    49e0:	e6 5b       	subi	r30, 0xB6	; 182
    49e2:	ff 4f       	sbci	r31, 0xFF	; 255
    49e4:	40 81       	ld	r20, Z
    49e6:	51 81       	ldd	r21, Z+1	; 0x01
    49e8:	da 01       	movw	r26, r20
    49ea:	fe 01       	movw	r30, r28
    49ec:	3f 96       	adiw	r30, 0x0f	; 15
    49ee:	04 c0       	rjmp	.+8      	; 0x49f8 <f_rename+0xe0>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    49f0:	81 91       	ld	r24, Z+
    49f2:	1c 96       	adiw	r26, 0x0c	; 12
    49f4:	8c 93       	st	X, r24
    49f6:	1c 97       	sbiw	r26, 0x0c	; 12
    49f8:	11 96       	adiw	r26, 0x01	; 1
    49fa:	ee 15       	cp	r30, r14
    49fc:	ff 05       	cpc	r31, r15
    49fe:	c1 f7       	brne	.-16     	; 0x49f0 <f_rename+0xd8>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
    4a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a02:	80 62       	ori	r24, 0x20	; 32
    4a04:	da 01       	movw	r26, r20
    4a06:	1b 96       	adiw	r26, 0x0b	; 11
    4a08:	8c 93       	st	X, r24
    4a0a:	1b 97       	sbiw	r26, 0x0b	; 11
			dj_old.fs->wflag = 1;
    4a0c:	ea a1       	ldd	r30, Y+34	; 0x22
    4a0e:	fb a1       	ldd	r31, Y+35	; 0x23
    4a10:	81 e0       	ldi	r24, 0x01	; 1
    4a12:	84 83       	std	Z+4, r24	; 0x04
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
    4a14:	1b 96       	adiw	r26, 0x0b	; 11
    4a16:	8c 91       	ld	r24, X
    4a18:	1b 97       	sbiw	r26, 0x0b	; 11
    4a1a:	84 ff       	sbrs	r24, 4
    4a1c:	8b c0       	rjmp	.+278    	; 0x4b34 <f_rename+0x21c>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    4a1e:	c8 ac       	ldd	r12, Y+56	; 0x38
    4a20:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    4a22:	5a 96       	adiw	r26, 0x1a	; 26
    4a24:	2c 91       	ld	r18, X
    4a26:	5a 97       	sbiw	r26, 0x1a	; 26
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	54 96       	adiw	r26, 0x14	; 20
    4a2c:	8c 91       	ld	r24, X
    4a2e:	54 97       	sbiw	r26, 0x14	; 20
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	28 2b       	or	r18, r24
    4a34:	39 2b       	or	r19, r25
    4a36:	55 96       	adiw	r26, 0x15	; 21
    4a38:	9c 91       	ld	r25, X
    4a3a:	55 97       	sbiw	r26, 0x15	; 21
    4a3c:	80 e0       	ldi	r24, 0x00	; 0
    4a3e:	28 2b       	or	r18, r24
    4a40:	39 2b       	or	r19, r25
    4a42:	5b 96       	adiw	r26, 0x1b	; 27
    4a44:	9c 91       	ld	r25, X
    4a46:	80 e0       	ldi	r24, 0x00	; 0
    4a48:	28 2b       	or	r18, r24
    4a4a:	39 2b       	or	r19, r25
    4a4c:	79 01       	movw	r14, r18
    4a4e:	00 e0       	ldi	r16, 0x00	; 0
    4a50:	10 e0       	ldi	r17, 0x00	; 0
    4a52:	8e ef       	ldi	r24, 0xFE	; 254
    4a54:	9f ef       	ldi	r25, 0xFF	; 255
    4a56:	af ef       	ldi	r26, 0xFF	; 255
    4a58:	bf ef       	ldi	r27, 0xFF	; 255
    4a5a:	e8 0e       	add	r14, r24
    4a5c:	f9 1e       	adc	r15, r25
    4a5e:	0a 1f       	adc	r16, r26
    4a60:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    4a62:	f6 01       	movw	r30, r12
    4a64:	82 8d       	ldd	r24, Z+26	; 0x1a
    4a66:	93 8d       	ldd	r25, Z+27	; 0x1b
    4a68:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4a6a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4a6c:	02 97       	sbiw	r24, 0x02	; 2
    4a6e:	a1 09       	sbc	r26, r1
    4a70:	b1 09       	sbc	r27, r1
    4a72:	e8 16       	cp	r14, r24
    4a74:	f9 06       	cpc	r15, r25
    4a76:	0a 07       	cpc	r16, r26
    4a78:	1b 07       	cpc	r17, r27
    4a7a:	08 f0       	brcs	.+2      	; 0x4a7e <f_rename+0x166>
    4a7c:	66 c0       	rjmp	.+204    	; 0x4b4a <f_rename+0x232>
	return clst * fs->csize + fs->database;
    4a7e:	22 81       	ldd	r18, Z+2	; 0x02
    4a80:	30 e0       	ldi	r19, 0x00	; 0
    4a82:	40 e0       	ldi	r20, 0x00	; 0
    4a84:	50 e0       	ldi	r21, 0x00	; 0
    4a86:	c8 01       	movw	r24, r16
    4a88:	b7 01       	movw	r22, r14
    4a8a:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <__mulsi3>
    4a8e:	ab 01       	movw	r20, r22
    4a90:	bc 01       	movw	r22, r24
    4a92:	f6 01       	movw	r30, r12
    4a94:	86 a1       	ldd	r24, Z+38	; 0x26
    4a96:	97 a1       	ldd	r25, Z+39	; 0x27
    4a98:	a0 a5       	ldd	r26, Z+40	; 0x28
    4a9a:	b1 a5       	ldd	r27, Z+41	; 0x29
    4a9c:	48 0f       	add	r20, r24
    4a9e:	59 1f       	adc	r21, r25
    4aa0:	6a 1f       	adc	r22, r26
    4aa2:	7b 1f       	adc	r23, r27
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
    4aa4:	41 15       	cp	r20, r1
    4aa6:	51 05       	cpc	r21, r1
    4aa8:	61 05       	cpc	r22, r1
    4aaa:	71 05       	cpc	r23, r1
    4aac:	09 f4       	brne	.+2      	; 0x4ab0 <f_rename+0x198>
    4aae:	4d c0       	rjmp	.+154    	; 0x4b4a <f_rename+0x232>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
    4ab0:	c6 01       	movw	r24, r12
    4ab2:	0e 94 a7 09 	call	0x134e	; 0x134e <move_window>
					dir = dj_new.fs->win+32;
    4ab6:	a8 ad       	ldd	r26, Y+56	; 0x38
    4ab8:	b9 ad       	ldd	r27, Y+57	; 0x39
					if (res == FR_OK && dir[1] == '.') {
    4aba:	88 23       	and	r24, r24
    4abc:	09 f0       	breq	.+2      	; 0x4ac0 <f_rename+0x1a8>
    4abe:	46 c0       	rjmp	.+140    	; 0x4b4c <f_rename+0x234>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
    4ac0:	bd 01       	movw	r22, r26
    4ac2:	62 5b       	subi	r22, 0xB2	; 178
    4ac4:	7f 4f       	sbci	r23, 0xFF	; 255
					if (res == FR_OK && dir[1] == '.') {
    4ac6:	fb 01       	movw	r30, r22
    4ac8:	81 81       	ldd	r24, Z+1	; 0x01
    4aca:	8e 32       	cpi	r24, 0x2E	; 46
    4acc:	99 f5       	brne	.+102    	; 0x4b34 <f_rename+0x21c>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
    4ace:	8c 91       	ld	r24, X
    4ad0:	83 30       	cpi	r24, 0x03	; 3
    4ad2:	b1 f4       	brne	.+44     	; 0x4b00 <f_rename+0x1e8>
    4ad4:	fe 01       	movw	r30, r28
    4ad6:	fe 96       	adiw	r30, 0x3e	; 62
    4ad8:	20 81       	ld	r18, Z
    4ada:	31 81       	ldd	r19, Z+1	; 0x01
    4adc:	42 81       	ldd	r20, Z+2	; 0x02
    4ade:	53 81       	ldd	r21, Z+3	; 0x03
    4ae0:	92 96       	adiw	r26, 0x22	; 34
    4ae2:	8d 91       	ld	r24, X+
    4ae4:	9d 91       	ld	r25, X+
    4ae6:	0d 90       	ld	r0, X+
    4ae8:	bc 91       	ld	r27, X
    4aea:	a0 2d       	mov	r26, r0
    4aec:	28 17       	cp	r18, r24
    4aee:	39 07       	cpc	r19, r25
    4af0:	4a 07       	cpc	r20, r26
    4af2:	5b 07       	cpc	r21, r27
    4af4:	29 f4       	brne	.+10     	; 0x4b00 <f_rename+0x1e8>
    4af6:	20 e0       	ldi	r18, 0x00	; 0
    4af8:	30 e0       	ldi	r19, 0x00	; 0
    4afa:	40 e0       	ldi	r20, 0x00	; 0
    4afc:	50 e0       	ldi	r21, 0x00	; 0
    4afe:	06 c0       	rjmp	.+12     	; 0x4b0c <f_rename+0x1f4>
    4b00:	fe 01       	movw	r30, r28
    4b02:	fe 96       	adiw	r30, 0x3e	; 62
    4b04:	20 81       	ld	r18, Z
    4b06:	31 81       	ldd	r19, Z+1	; 0x01
    4b08:	42 81       	ldd	r20, Z+2	; 0x02
    4b0a:	53 81       	ldd	r21, Z+3	; 0x03
						ST_WORD(dir+DIR_FstClusLO, dw);
    4b0c:	db 01       	movw	r26, r22
    4b0e:	5a 96       	adiw	r26, 0x1a	; 26
    4b10:	2c 93       	st	X, r18
    4b12:	5a 97       	sbiw	r26, 0x1a	; 26
    4b14:	83 2f       	mov	r24, r19
    4b16:	99 27       	eor	r25, r25
    4b18:	5b 96       	adiw	r26, 0x1b	; 27
    4b1a:	8c 93       	st	X, r24
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    4b1c:	ca 01       	movw	r24, r20
    4b1e:	aa 27       	eor	r26, r26
    4b20:	bb 27       	eor	r27, r27
    4b22:	fb 01       	movw	r30, r22
    4b24:	84 8b       	std	Z+20, r24	; 0x14
    4b26:	89 2f       	mov	r24, r25
    4b28:	99 27       	eor	r25, r25
    4b2a:	85 8b       	std	Z+21, r24	; 0x15
						dj_new.fs->wflag = 1;
    4b2c:	e8 ad       	ldd	r30, Y+56	; 0x38
    4b2e:	f9 ad       	ldd	r31, Y+57	; 0x39
    4b30:	81 e0       	ldi	r24, 0x01	; 1
    4b32:	84 83       	std	Z+4, r24	; 0x04
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
    4b34:	ce 01       	movw	r24, r28
    4b36:	82 96       	adiw	r24, 0x22	; 34
    4b38:	0e 94 34 11 	call	0x2268	; 0x2268 <dir_remove>
				if (res == FR_OK)
    4b3c:	88 23       	and	r24, r24
    4b3e:	31 f4       	brne	.+12     	; 0x4b4c <f_rename+0x234>
					res = sync(dj_old.fs);
    4b40:	8a a1       	ldd	r24, Y+34	; 0x22
    4b42:	9b a1       	ldd	r25, Y+35	; 0x23
    4b44:	0e 94 20 0a 	call	0x1440	; 0x1440 <sync>
    4b48:	01 c0       	rjmp	.+2      	; 0x4b4c <f_rename+0x234>
    4b4a:	82 e0       	ldi	r24, 0x02	; 2
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
    4b4c:	c1 5b       	subi	r28, 0xB1	; 177
    4b4e:	df 4f       	sbci	r29, 0xFF	; 255
    4b50:	cd bf       	out	0x3d, r28	; 61
    4b52:	de bf       	out	0x3e, r29	; 62
    4b54:	cf 91       	pop	r28
    4b56:	df 91       	pop	r29
    4b58:	1f 91       	pop	r17
    4b5a:	0f 91       	pop	r16
    4b5c:	ff 90       	pop	r15
    4b5e:	ef 90       	pop	r14
    4b60:	df 90       	pop	r13
    4b62:	cf 90       	pop	r12
    4b64:	08 95       	ret

00004b66 <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    4b66:	2f 92       	push	r2
    4b68:	3f 92       	push	r3
    4b6a:	4f 92       	push	r4
    4b6c:	5f 92       	push	r5
    4b6e:	6f 92       	push	r6
    4b70:	7f 92       	push	r7
    4b72:	8f 92       	push	r8
    4b74:	9f 92       	push	r9
    4b76:	af 92       	push	r10
    4b78:	bf 92       	push	r11
    4b7a:	cf 92       	push	r12
    4b7c:	df 92       	push	r13
    4b7e:	ef 92       	push	r14
    4b80:	ff 92       	push	r15
    4b82:	0f 93       	push	r16
    4b84:	1f 93       	push	r17
    4b86:	df 93       	push	r29
    4b88:	cf 93       	push	r28
    4b8a:	cd b7       	in	r28, 0x3d	; 61
    4b8c:	de b7       	in	r29, 0x3e	; 62
    4b8e:	a4 97       	sbiw	r28, 0x24	; 36
    4b90:	cd bf       	out	0x3d, r28	; 61
    4b92:	de bf       	out	0x3e, r29	; 62
    4b94:	68 a3       	std	Y+32, r22	; 0x20
    4b96:	3a 01       	movw	r6, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    4b98:	82 30       	cpi	r24, 0x02	; 2
    4b9a:	10 f0       	brcs	.+4      	; 0x4ba0 <f_mkfs+0x3a>
    4b9c:	8b e0       	ldi	r24, 0x0B	; 11
    4b9e:	e2 c4       	rjmp	.+2500   	; 0x5564 <f_mkfs+0x9fe>
	if (partition >= 2) return FR_MKFS_ABORTED;
    4ba0:	28 a1       	ldd	r18, Y+32	; 0x20
    4ba2:	22 30       	cpi	r18, 0x02	; 2
    4ba4:	08 f0       	brcs	.+2      	; 0x4ba8 <f_mkfs+0x42>
    4ba6:	db c4       	rjmp	.+2486   	; 0x555e <f_mkfs+0x9f8>

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
    4ba8:	a8 2f       	mov	r26, r24
    4baa:	b0 e0       	ldi	r27, 0x00	; 0
    4bac:	aa 0f       	add	r26, r26
    4bae:	bb 1f       	adc	r27, r27
    4bb0:	fd 01       	movw	r30, r26
    4bb2:	e1 57       	subi	r30, 0x71	; 113
    4bb4:	f2 4d       	sbci	r31, 0xD2	; 210
    4bb6:	c0 80       	ld	r12, Z
    4bb8:	d1 80       	ldd	r13, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    4bba:	c1 14       	cp	r12, r1
    4bbc:	d1 04       	cpc	r13, r1
    4bbe:	11 f4       	brne	.+4      	; 0x4bc4 <f_mkfs+0x5e>
    4bc0:	8c e0       	ldi	r24, 0x0C	; 12
    4bc2:	d0 c4       	rjmp	.+2464   	; 0x5564 <f_mkfs+0x9fe>
	fs->fs_type = 0;
    4bc4:	f6 01       	movw	r30, r12
    4bc6:	10 82       	st	Z, r1
	drv = LD2PD(drv);
    4bc8:	aa 5d       	subi	r26, 0xDA	; 218
    4bca:	b9 4d       	sbci	r27, 0xD9	; 217
    4bcc:	fc 91       	ld	r31, X
    4bce:	f9 8b       	std	Y+17, r31	; 0x11

	/* Get disk statics */
	stat = disk_initialize(drv);
    4bd0:	8f 2f       	mov	r24, r31
    4bd2:	0e 94 f6 05 	call	0xbec	; 0xbec <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    4bd6:	80 ff       	sbrs	r24, 0
    4bd8:	02 c0       	rjmp	.+4      	; 0x4bde <f_mkfs+0x78>
    4bda:	83 e0       	ldi	r24, 0x03	; 3
    4bdc:	c3 c4       	rjmp	.+2438   	; 0x5564 <f_mkfs+0x9fe>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    4bde:	82 ff       	sbrs	r24, 2
    4be0:	02 c0       	rjmp	.+4      	; 0x4be6 <f_mkfs+0x80>
    4be2:	8a e0       	ldi	r24, 0x0A	; 10
    4be4:	bf c4       	rjmp	.+2430   	; 0x5564 <f_mkfs+0x9fe>
#if _MAX_SS != 512						/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > _MAX_SS)
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
    4be6:	89 89       	ldd	r24, Y+17	; 0x11
    4be8:	61 e0       	ldi	r22, 0x01	; 1
    4bea:	ae 01       	movw	r20, r28
    4bec:	4f 5f       	subi	r20, 0xFF	; 255
    4bee:	5f 4f       	sbci	r21, 0xFF	; 255
    4bf0:	0e 94 bb 07 	call	0xf76	; 0xf76 <disk_ioctl>
    4bf4:	88 23       	and	r24, r24
    4bf6:	09 f0       	breq	.+2      	; 0x4bfa <f_mkfs+0x94>
    4bf8:	b2 c4       	rjmp	.+2404   	; 0x555e <f_mkfs+0x9f8>
    4bfa:	89 81       	ldd	r24, Y+1	; 0x01
    4bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bfe:	ab 81       	ldd	r26, Y+3	; 0x03
    4c00:	bc 81       	ldd	r27, Y+4	; 0x04
    4c02:	80 3d       	cpi	r24, 0xD0	; 208
    4c04:	27 e0       	ldi	r18, 0x07	; 7
    4c06:	92 07       	cpc	r25, r18
    4c08:	20 e0       	ldi	r18, 0x00	; 0
    4c0a:	a2 07       	cpc	r26, r18
    4c0c:	20 e0       	ldi	r18, 0x00	; 0
    4c0e:	b2 07       	cpc	r27, r18
    4c10:	08 f4       	brcc	.+2      	; 0x4c14 <f_mkfs+0xae>
    4c12:	a5 c4       	rjmp	.+2378   	; 0x555e <f_mkfs+0x9f8>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
    4c14:	81 50       	subi	r24, 0x01	; 1
    4c16:	90 40       	sbci	r25, 0x00	; 0
    4c18:	a0 4d       	sbci	r26, 0xD0	; 208
    4c1a:	b7 40       	sbci	r27, 0x07	; 7
    4c1c:	40 f0       	brcs	.+16     	; 0x4c2e <f_mkfs+0xc8>
    4c1e:	80 e0       	ldi	r24, 0x00	; 0
    4c20:	90 e0       	ldi	r25, 0x00	; 0
    4c22:	a0 ed       	ldi	r26, 0xD0	; 208
    4c24:	b7 e0       	ldi	r27, 0x07	; 7
    4c26:	89 83       	std	Y+1, r24	; 0x01
    4c28:	9a 83       	std	Y+2, r25	; 0x02
    4c2a:	ab 83       	std	Y+3, r26	; 0x03
    4c2c:	bc 83       	std	Y+4, r27	; 0x04
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
    4c2e:	48 a1       	ldd	r20, Y+32	; 0x20
    4c30:	44 23       	and	r20, r20
    4c32:	29 f0       	breq	.+10     	; 0x4c3e <f_mkfs+0xd8>
    4c34:	1a 8e       	std	Y+26, r1	; 0x1a
    4c36:	1b 8e       	std	Y+27, r1	; 0x1b
    4c38:	1c 8e       	std	Y+28, r1	; 0x1c
    4c3a:	1d 8e       	std	Y+29, r1	; 0x1d
    4c3c:	08 c0       	rjmp	.+16     	; 0x4c4e <f_mkfs+0xe8>
    4c3e:	8f e3       	ldi	r24, 0x3F	; 63
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	a0 e0       	ldi	r26, 0x00	; 0
    4c44:	b0 e0       	ldi	r27, 0x00	; 0
    4c46:	8a 8f       	std	Y+26, r24	; 0x1a
    4c48:	9b 8f       	std	Y+27, r25	; 0x1b
    4c4a:	ac 8f       	std	Y+28, r26	; 0x1c
    4c4c:	bd 8f       	std	Y+29, r27	; 0x1d
	n_part -= b_part;
    4c4e:	89 80       	ldd	r8, Y+1	; 0x01
    4c50:	9a 80       	ldd	r9, Y+2	; 0x02
    4c52:	ab 80       	ldd	r10, Y+3	; 0x03
    4c54:	bc 80       	ldd	r11, Y+4	; 0x04
    4c56:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4c58:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4c5a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4c5c:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4c5e:	82 1a       	sub	r8, r18
    4c60:	93 0a       	sbc	r9, r19
    4c62:	a4 0a       	sbc	r10, r20
    4c64:	b5 0a       	sbc	r11, r21
    4c66:	89 82       	std	Y+1, r8	; 0x01
    4c68:	9a 82       	std	Y+2, r9	; 0x02
    4c6a:	ab 82       	std	Y+3, r10	; 0x03
    4c6c:	bc 82       	std	Y+4, r11	; 0x04
    4c6e:	80 e0       	ldi	r24, 0x00	; 0
    4c70:	92 e0       	ldi	r25, 0x02	; 2
    4c72:	a0 e0       	ldi	r26, 0x00	; 0
    4c74:	b0 e0       	ldi	r27, 0x00	; 0
    4c76:	20 e0       	ldi	r18, 0x00	; 0
    4c78:	30 e0       	ldi	r19, 0x00	; 0
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
    4c7a:	73 01       	movw	r14, r6
    4c7c:	00 e0       	ldi	r16, 0x00	; 0
    4c7e:	10 e0       	ldi	r17, 0x00	; 0
    4c80:	09 c0       	rjmp	.+18     	; 0x4c94 <f_mkfs+0x12e>
    4c82:	88 0f       	add	r24, r24
    4c84:	99 1f       	adc	r25, r25
    4c86:	aa 1f       	adc	r26, r26
    4c88:	bb 1f       	adc	r27, r27
    4c8a:	2f 5f       	subi	r18, 0xFF	; 255
    4c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c8e:	27 30       	cpi	r18, 0x07	; 7
    4c90:	31 05       	cpc	r19, r1
    4c92:	31 f0       	breq	.+12     	; 0x4ca0 <f_mkfs+0x13a>
    4c94:	8e 15       	cp	r24, r14
    4c96:	9f 05       	cpc	r25, r15
    4c98:	a0 07       	cpc	r26, r16
    4c9a:	b1 07       	cpc	r27, r17
    4c9c:	91 f7       	brne	.-28     	; 0x4c82 <f_mkfs+0x11c>
    4c9e:	05 c0       	rjmp	.+10     	; 0x4caa <f_mkfs+0x144>
	if (d != allocsize) allocsize = 0;
    4ca0:	8e 15       	cp	r24, r14
    4ca2:	9f 05       	cpc	r25, r15
    4ca4:	a0 07       	cpc	r26, r16
    4ca6:	b1 07       	cpc	r27, r17
    4ca8:	19 f4       	brne	.+6      	; 0x4cb0 <f_mkfs+0x14a>
	if (!allocsize) {					/* Auto selection of cluster size */
    4caa:	61 14       	cp	r6, r1
    4cac:	71 04       	cpc	r7, r1
    4cae:	11 f5       	brne	.+68     	; 0x4cf4 <f_mkfs+0x18e>
		d = n_part;
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
		for (n = 0; d < sstbl[n]; n++) ;
    4cb0:	e8 ea       	ldi	r30, 0xA8	; 168
    4cb2:	fc e2       	ldi	r31, 0x2C	; 44
    4cb4:	20 e0       	ldi	r18, 0x00	; 0
    4cb6:	30 e0       	ldi	r19, 0x00	; 0
    4cb8:	40 e0       	ldi	r20, 0x00	; 0
    4cba:	50 e0       	ldi	r21, 0x00	; 0
    4cbc:	81 91       	ld	r24, Z+
    4cbe:	91 91       	ld	r25, Z+
    4cc0:	a1 91       	ld	r26, Z+
    4cc2:	b1 91       	ld	r27, Z+
    4cc4:	b9 01       	movw	r22, r18
    4cc6:	14 2f       	mov	r17, r20
    4cc8:	05 2f       	mov	r16, r21
    4cca:	2f 5f       	subi	r18, 0xFF	; 255
    4ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    4cce:	4f 4f       	sbci	r20, 0xFF	; 255
    4cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    4cd2:	88 16       	cp	r8, r24
    4cd4:	99 06       	cpc	r9, r25
    4cd6:	aa 06       	cpc	r10, r26
    4cd8:	bb 06       	cpc	r11, r27
    4cda:	80 f3       	brcs	.-32     	; 0x4cbc <f_mkfs+0x156>
    4cdc:	cb 01       	movw	r24, r22
    4cde:	6d 83       	std	Y+5, r22	; 0x05
    4ce0:	9e 83       	std	Y+6, r25	; 0x06
    4ce2:	1f 83       	std	Y+7, r17	; 0x07
    4ce4:	08 87       	std	Y+8, r16	; 0x08
		allocsize = cstbl[n];
    4ce6:	fb 01       	movw	r30, r22
    4ce8:	ee 0f       	add	r30, r30
    4cea:	ff 1f       	adc	r31, r31
    4cec:	ee 56       	subi	r30, 0x6E	; 110
    4cee:	f3 4d       	sbci	r31, 0xD3	; 211
    4cf0:	60 80       	ld	r6, Z
    4cf2:	71 80       	ldd	r7, Z+1	; 0x01
	}
	if (allocsize < SS(fs)) allocsize = SS(fs);
    4cf4:	30 e0       	ldi	r19, 0x00	; 0
    4cf6:	63 16       	cp	r6, r19
    4cf8:	32 e0       	ldi	r19, 0x02	; 2
    4cfa:	73 06       	cpc	r7, r19
    4cfc:	18 f4       	brcc	.+6      	; 0x4d04 <f_mkfs+0x19e>
    4cfe:	61 2c       	mov	r6, r1
    4d00:	f2 e0       	ldi	r31, 0x02	; 2
    4d02:	7f 2e       	mov	r7, r31

	allocsize /= SS(fs);		/* Number of sectors per cluster */
    4d04:	13 01       	movw	r2, r6
    4d06:	23 2c       	mov	r2, r3
    4d08:	33 24       	eor	r3, r3
    4d0a:	26 94       	lsr	r2

	/* Pre-compute number of clusters and FAT type */
	n_clst = n_part / allocsize;
    4d0c:	c1 01       	movw	r24, r2
    4d0e:	a0 e0       	ldi	r26, 0x00	; 0
    4d10:	b0 e0       	ldi	r27, 0x00	; 0
    4d12:	8d 87       	std	Y+13, r24	; 0x0d
    4d14:	9e 87       	std	Y+14, r25	; 0x0e
    4d16:	af 87       	std	Y+15, r26	; 0x0f
    4d18:	b8 8b       	std	Y+16, r27	; 0x10
    4d1a:	c5 01       	movw	r24, r10
    4d1c:	b4 01       	movw	r22, r8
    4d1e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4d20:	3e 85       	ldd	r19, Y+14	; 0x0e
    4d22:	4f 85       	ldd	r20, Y+15	; 0x0f
    4d24:	58 89       	ldd	r21, Y+16	; 0x10
    4d26:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    4d2a:	c9 01       	movw	r24, r18
    4d2c:	da 01       	movw	r26, r20
	fmt = FS_FAT12;
	if (n_clst >= 0xFF5) fmt = FS_FAT16;
    4d2e:	85 3f       	cpi	r24, 0xF5	; 245
    4d30:	ef e0       	ldi	r30, 0x0F	; 15
    4d32:	9e 07       	cpc	r25, r30
    4d34:	e0 e0       	ldi	r30, 0x00	; 0
    4d36:	ae 07       	cpc	r26, r30
    4d38:	e0 e0       	ldi	r30, 0x00	; 0
    4d3a:	be 07       	cpc	r27, r30
    4d3c:	08 f4       	brcc	.+2      	; 0x4d40 <f_mkfs+0x1da>
    4d3e:	28 c4       	rjmp	.+2128   	; 0x5590 <f_mkfs+0xa2a>
    4d40:	f8 a1       	ldd	r31, Y+32	; 0x20
    4d42:	2f 2f       	mov	r18, r31
    4d44:	30 e0       	ldi	r19, 0x00	; 0
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
    4d46:	85 3f       	cpi	r24, 0xF5	; 245
    4d48:	4f ef       	ldi	r20, 0xFF	; 255
    4d4a:	94 07       	cpc	r25, r20
    4d4c:	40 e0       	ldi	r20, 0x00	; 0
    4d4e:	a4 07       	cpc	r26, r20
    4d50:	40 e0       	ldi	r20, 0x00	; 0
    4d52:	b4 07       	cpc	r27, r20
    4d54:	50 f5       	brcc	.+84     	; 0x4daa <f_mkfs+0x244>
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	case FS_FAT16:
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
    4d56:	7c 01       	movw	r14, r24
    4d58:	8d 01       	movw	r16, r26
    4d5a:	ee 0c       	add	r14, r14
    4d5c:	ff 1c       	adc	r15, r15
    4d5e:	00 1f       	adc	r16, r16
    4d60:	11 1f       	adc	r17, r17
    4d62:	83 e0       	ldi	r24, 0x03	; 3
    4d64:	92 e0       	ldi	r25, 0x02	; 2
    4d66:	a0 e0       	ldi	r26, 0x00	; 0
    4d68:	b0 e0       	ldi	r27, 0x00	; 0
    4d6a:	e8 0e       	add	r14, r24
    4d6c:	f9 1e       	adc	r15, r25
    4d6e:	0a 1f       	adc	r16, r26
    4d70:	1b 1f       	adc	r17, r27
    4d72:	69 e0       	ldi	r22, 0x09	; 9
    4d74:	16 95       	lsr	r17
    4d76:	07 95       	ror	r16
    4d78:	f7 94       	ror	r15
    4d7a:	e7 94       	ror	r14
    4d7c:	6a 95       	dec	r22
    4d7e:	d1 f7       	brne	.-12     	; 0x4d74 <f_mkfs+0x20e>
		n_rsv = 1 + partition;
    4d80:	2f 5f       	subi	r18, 0xFF	; 255
    4d82:	3f 4f       	sbci	r19, 0xFF	; 255
    4d84:	c9 01       	movw	r24, r18
    4d86:	aa 27       	eor	r26, r26
    4d88:	97 fd       	sbrc	r25, 7
    4d8a:	a0 95       	com	r26
    4d8c:	ba 2f       	mov	r27, r26
    4d8e:	8e 8b       	std	Y+22, r24	; 0x16
    4d90:	9f 8b       	std	Y+23, r25	; 0x17
    4d92:	a8 8f       	std	Y+24, r26	; 0x18
    4d94:	b9 8f       	std	Y+25, r27	; 0x19
    4d96:	20 e2       	ldi	r18, 0x20	; 32
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	40 e0       	ldi	r20, 0x00	; 0
    4d9c:	50 e0       	ldi	r21, 0x00	; 0
    4d9e:	2a 8b       	std	Y+18, r18	; 0x12
    4da0:	3b 8b       	std	Y+19, r19	; 0x13
    4da2:	4c 8b       	std	Y+20, r20	; 0x14
    4da4:	5d 8b       	std	Y+21, r21	; 0x15
    4da6:	32 e0       	ldi	r19, 0x02	; 2
    4da8:	2a c0       	rjmp	.+84     	; 0x4dfe <f_mkfs+0x298>
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    4daa:	7c 01       	movw	r14, r24
    4dac:	8d 01       	movw	r16, r26
    4dae:	52 e0       	ldi	r21, 0x02	; 2
    4db0:	ee 0c       	add	r14, r14
    4db2:	ff 1c       	adc	r15, r15
    4db4:	00 1f       	adc	r16, r16
    4db6:	11 1f       	adc	r17, r17
    4db8:	5a 95       	dec	r21
    4dba:	d1 f7       	brne	.-12     	; 0x4db0 <f_mkfs+0x24a>
    4dbc:	87 e0       	ldi	r24, 0x07	; 7
    4dbe:	92 e0       	ldi	r25, 0x02	; 2
    4dc0:	a0 e0       	ldi	r26, 0x00	; 0
    4dc2:	b0 e0       	ldi	r27, 0x00	; 0
    4dc4:	e8 0e       	add	r14, r24
    4dc6:	f9 1e       	adc	r15, r25
    4dc8:	0a 1f       	adc	r16, r26
    4dca:	1b 1f       	adc	r17, r27
    4dcc:	49 e0       	ldi	r20, 0x09	; 9
    4dce:	16 95       	lsr	r17
    4dd0:	07 95       	ror	r16
    4dd2:	f7 94       	ror	r15
    4dd4:	e7 94       	ror	r14
    4dd6:	4a 95       	dec	r20
    4dd8:	d1 f7       	brne	.-12     	; 0x4dce <f_mkfs+0x268>
		n_rsv = 33 - partition;
    4dda:	81 e2       	ldi	r24, 0x21	; 33
    4ddc:	90 e0       	ldi	r25, 0x00	; 0
    4dde:	82 1b       	sub	r24, r18
    4de0:	93 0b       	sbc	r25, r19
    4de2:	9c 01       	movw	r18, r24
    4de4:	44 27       	eor	r20, r20
    4de6:	37 fd       	sbrc	r19, 7
    4de8:	40 95       	com	r20
    4dea:	54 2f       	mov	r21, r20
    4dec:	2e 8b       	std	Y+22, r18	; 0x16
    4dee:	3f 8b       	std	Y+23, r19	; 0x17
    4df0:	48 8f       	std	Y+24, r20	; 0x18
    4df2:	59 8f       	std	Y+25, r21	; 0x19
    4df4:	1a 8a       	std	Y+18, r1	; 0x12
    4df6:	1b 8a       	std	Y+19, r1	; 0x13
    4df8:	1c 8a       	std	Y+20, r1	; 0x14
    4dfa:	1d 8a       	std	Y+21, r1	; 0x15
    4dfc:	33 e0       	ldi	r19, 0x03	; 3
    4dfe:	3f 8f       	std	Y+31, r19	; 0x1f
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
    4e00:	89 89       	ldd	r24, Y+17	; 0x11
    4e02:	63 e0       	ldi	r22, 0x03	; 3
    4e04:	ae 01       	movw	r20, r28
    4e06:	4b 5f       	subi	r20, 0xFB	; 251
    4e08:	5f 4f       	sbci	r21, 0xFF	; 255
    4e0a:	0e 94 bb 07 	call	0xf76	; 0xf76 <disk_ioctl>
    4e0e:	88 23       	and	r24, r24
    4e10:	09 f0       	breq	.+2      	; 0x4e14 <f_mkfs+0x2ae>
    4e12:	a5 c3       	rjmp	.+1866   	; 0x555e <f_mkfs+0x9f8>
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
    4e14:	8e 89       	ldd	r24, Y+22	; 0x16
    4e16:	9f 89       	ldd	r25, Y+23	; 0x17
    4e18:	a8 8d       	ldd	r26, Y+24	; 0x18
    4e1a:	b9 8d       	ldd	r27, Y+25	; 0x19
    4e1c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4e1e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4e20:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4e22:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4e24:	82 0f       	add	r24, r18
    4e26:	93 1f       	adc	r25, r19
    4e28:	a4 1f       	adc	r26, r20
    4e2a:	b5 1f       	adc	r27, r21
    4e2c:	89 87       	std	Y+9, r24	; 0x09
    4e2e:	9a 87       	std	Y+10, r25	; 0x0a
    4e30:	ab 87       	std	Y+11, r26	; 0x0b
    4e32:	bc 87       	std	Y+12, r27	; 0x0c
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
    4e34:	2a 89       	ldd	r18, Y+18	; 0x12
    4e36:	3b 89       	ldd	r19, Y+19	; 0x13
    4e38:	4c 89       	ldd	r20, Y+20	; 0x14
    4e3a:	5d 89       	ldd	r21, Y+21	; 0x15
    4e3c:	2e 0d       	add	r18, r14
    4e3e:	3f 1d       	adc	r19, r15
    4e40:	40 1f       	adc	r20, r16
    4e42:	51 1f       	adc	r21, r17
    4e44:	28 0f       	add	r18, r24
    4e46:	39 1f       	adc	r19, r25
    4e48:	4a 1f       	adc	r20, r26
    4e4a:	5b 1f       	adc	r21, r27

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    4e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    4e50:	af 81       	ldd	r26, Y+7	; 0x07
    4e52:	b8 85       	ldd	r27, Y+8	; 0x08
    4e54:	4c 01       	movw	r8, r24
    4e56:	5d 01       	movw	r10, r26
    4e58:	08 94       	sec
    4e5a:	81 08       	sbc	r8, r1
    4e5c:	91 08       	sbc	r9, r1
    4e5e:	a1 08       	sbc	r10, r1
    4e60:	b1 08       	sbc	r11, r1
    4e62:	82 0e       	add	r8, r18
    4e64:	93 1e       	adc	r9, r19
    4e66:	a4 1e       	adc	r10, r20
    4e68:	b5 1e       	adc	r11, r21
    4e6a:	b0 95       	com	r27
    4e6c:	a0 95       	com	r26
    4e6e:	90 95       	com	r25
    4e70:	81 95       	neg	r24
    4e72:	9f 4f       	sbci	r25, 0xFF	; 255
    4e74:	af 4f       	sbci	r26, 0xFF	; 255
    4e76:	bf 4f       	sbci	r27, 0xFF	; 255
    4e78:	88 22       	and	r8, r24
    4e7a:	99 22       	and	r9, r25
    4e7c:	aa 22       	and	r10, r26
    4e7e:	bb 22       	and	r11, r27
	n_fat += (n - b_data) / N_FATS;
    4e80:	27 01       	movw	r4, r14
    4e82:	38 01       	movw	r6, r16
    4e84:	42 1a       	sub	r4, r18
    4e86:	53 0a       	sbc	r5, r19
    4e88:	64 0a       	sbc	r6, r20
    4e8a:	75 0a       	sbc	r7, r21
    4e8c:	48 0c       	add	r4, r8
    4e8e:	59 1c       	adc	r5, r9
    4e90:	6a 1c       	adc	r6, r10
    4e92:	7b 1c       	adc	r7, r11
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
    4e94:	e9 80       	ldd	r14, Y+1	; 0x01
    4e96:	fa 80       	ldd	r15, Y+2	; 0x02
    4e98:	0b 81       	ldd	r16, Y+3	; 0x03
    4e9a:	1c 81       	ldd	r17, Y+4	; 0x04
    4e9c:	c8 01       	movw	r24, r16
    4e9e:	b7 01       	movw	r22, r14
    4ea0:	2e 89       	ldd	r18, Y+22	; 0x16
    4ea2:	3f 89       	ldd	r19, Y+23	; 0x17
    4ea4:	48 8d       	ldd	r20, Y+24	; 0x18
    4ea6:	59 8d       	ldd	r21, Y+25	; 0x19
    4ea8:	62 1b       	sub	r22, r18
    4eaa:	73 0b       	sbc	r23, r19
    4eac:	84 0b       	sbc	r24, r20
    4eae:	95 0b       	sbc	r25, r21
    4eb0:	64 19       	sub	r22, r4
    4eb2:	75 09       	sbc	r23, r5
    4eb4:	86 09       	sbc	r24, r6
    4eb6:	97 09       	sbc	r25, r7
    4eb8:	2a 89       	ldd	r18, Y+18	; 0x12
    4eba:	3b 89       	ldd	r19, Y+19	; 0x13
    4ebc:	4c 89       	ldd	r20, Y+20	; 0x14
    4ebe:	5d 89       	ldd	r21, Y+21	; 0x15
    4ec0:	62 1b       	sub	r22, r18
    4ec2:	73 0b       	sbc	r23, r19
    4ec4:	84 0b       	sbc	r24, r20
    4ec6:	95 0b       	sbc	r25, r21
    4ec8:	2d 85       	ldd	r18, Y+13	; 0x0d
    4eca:	3e 85       	ldd	r19, Y+14	; 0x0e
    4ecc:	4f 85       	ldd	r20, Y+15	; 0x0f
    4ece:	58 89       	ldd	r21, Y+16	; 0x10
    4ed0:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    4ed4:	29 a3       	std	Y+33, r18	; 0x21
    4ed6:	3a a3       	std	Y+34, r19	; 0x22
    4ed8:	4b a3       	std	Y+35, r20	; 0x23
    4eda:	5c a3       	std	Y+36, r21	; 0x24
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
    4edc:	3f 8d       	ldd	r19, Y+31	; 0x1f
    4ede:	32 30       	cpi	r19, 0x02	; 2
    4ee0:	51 f4       	brne	.+20     	; 0x4ef6 <f_mkfs+0x390>
    4ee2:	89 a1       	ldd	r24, Y+33	; 0x21
    4ee4:	9a a1       	ldd	r25, Y+34	; 0x22
    4ee6:	ab a1       	ldd	r26, Y+35	; 0x23
    4ee8:	bc a1       	ldd	r27, Y+36	; 0x24
    4eea:	85 5f       	subi	r24, 0xF5	; 245
    4eec:	9f 40       	sbci	r25, 0x0F	; 15
    4eee:	a0 40       	sbci	r26, 0x00	; 0
    4ef0:	b0 40       	sbci	r27, 0x00	; 0
    4ef2:	70 f4       	brcc	.+28     	; 0x4f10 <f_mkfs+0x3aa>
    4ef4:	34 c3       	rjmp	.+1640   	; 0x555e <f_mkfs+0x9f8>
    4ef6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4ef8:	f3 30       	cpi	r31, 0x03	; 3
    4efa:	51 f4       	brne	.+20     	; 0x4f10 <f_mkfs+0x3aa>
    4efc:	29 a1       	ldd	r18, Y+33	; 0x21
    4efe:	3a a1       	ldd	r19, Y+34	; 0x22
    4f00:	4b a1       	ldd	r20, Y+35	; 0x23
    4f02:	5c a1       	ldd	r21, Y+36	; 0x24
    4f04:	25 5f       	subi	r18, 0xF5	; 245
    4f06:	3f 4f       	sbci	r19, 0xFF	; 255
    4f08:	40 40       	sbci	r20, 0x00	; 0
    4f0a:	50 40       	sbci	r21, 0x00	; 0
    4f0c:	08 f4       	brcc	.+2      	; 0x4f10 <f_mkfs+0x3aa>
    4f0e:	27 c3       	rjmp	.+1614   	; 0x555e <f_mkfs+0x9f8>
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4f10:	8d 82       	std	Y+5, r8	; 0x05
    4f12:	9e 82       	std	Y+6, r9	; 0x06
    4f14:	af 82       	std	Y+7, r10	; 0x07
    4f16:	b8 86       	std	Y+8, r11	; 0x08
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
    4f18:	98 a1       	ldd	r25, Y+32	; 0x20
    4f1a:	99 23       	and	r25, r25
    4f1c:	11 f0       	breq	.+4      	; 0x4f22 <f_mkfs+0x3bc>
    4f1e:	10 ef       	ldi	r17, 0xF0	; 240
    4f20:	9c c0       	rjmp	.+312    	; 0x505a <f_mkfs+0x4f4>
		DWORD n_disk = b_part + n_part;
    4f22:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4f24:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4f26:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4f28:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4f2a:	4e 0d       	add	r20, r14
    4f2c:	5f 1d       	adc	r21, r15
    4f2e:	60 1f       	adc	r22, r16
    4f30:	71 1f       	adc	r23, r17
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    4f32:	3e e2       	ldi	r19, 0x2E	; 46
    4f34:	e3 2e       	mov	r14, r19
    4f36:	f1 2c       	mov	r15, r1
    4f38:	ec 0c       	add	r14, r12
    4f3a:	fd 1c       	adc	r15, r13
    4f3c:	f7 01       	movw	r30, r14
    4f3e:	20 e0       	ldi	r18, 0x00	; 0
    4f40:	32 e0       	ldi	r19, 0x02	; 2
    4f42:	01 c0       	rjmp	.+2      	; 0x4f46 <f_mkfs+0x3e0>
	while (cnt--) *d++ = (char)val;
    4f44:	11 92       	st	Z+, r1
    4f46:	21 50       	subi	r18, 0x01	; 1
    4f48:	30 40       	sbci	r19, 0x00	; 0
    4f4a:	af ef       	ldi	r26, 0xFF	; 255
    4f4c:	2f 3f       	cpi	r18, 0xFF	; 255
    4f4e:	3a 07       	cpc	r19, r26
    4f50:	c9 f7       	brne	.-14     	; 0x4f44 <f_mkfs+0x3de>
	/* Create partition table if needed */
	if (!partition) {
		DWORD n_disk = b_part + n_part;

		mem_set(fs->win, 0, SS(fs));
		tbl = fs->win+MBR_Table;
    4f52:	86 01       	movw	r16, r12
    4f54:	04 51       	subi	r16, 0x14	; 20
    4f56:	1e 4f       	sbci	r17, 0xFE	; 254
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
    4f58:	80 e8       	ldi	r24, 0x80	; 128
    4f5a:	f8 01       	movw	r30, r16
    4f5c:	80 83       	st	Z, r24
    4f5e:	81 e0       	ldi	r24, 0x01	; 1
    4f60:	81 83       	std	Z+1, r24	; 0x01
    4f62:	82 83       	std	Z+2, r24	; 0x02
    4f64:	13 82       	std	Z+3, r1	; 0x03
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    4f66:	40 30       	cpi	r20, 0x00	; 0
    4f68:	f4 e0       	ldi	r31, 0x04	; 4
    4f6a:	5f 07       	cpc	r21, r31
    4f6c:	fb ef       	ldi	r31, 0xFB	; 251
    4f6e:	6f 07       	cpc	r22, r31
    4f70:	f0 e0       	ldi	r31, 0x00	; 0
    4f72:	7f 07       	cpc	r23, r31
    4f74:	b0 f4       	brcc	.+44     	; 0x4fa2 <f_mkfs+0x43c>
			n_disk = n_disk / 63 / 255;
    4f76:	cb 01       	movw	r24, r22
    4f78:	ba 01       	movw	r22, r20
    4f7a:	21 ec       	ldi	r18, 0xC1	; 193
    4f7c:	3e e3       	ldi	r19, 0x3E	; 62
    4f7e:	40 e0       	ldi	r20, 0x00	; 0
    4f80:	50 e0       	ldi	r21, 0x00	; 0
    4f82:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    4f86:	c9 01       	movw	r24, r18
    4f88:	da 01       	movw	r26, r20
			tbl[7] = (BYTE)n_disk;
    4f8a:	f8 01       	movw	r30, r16
    4f8c:	27 83       	std	Z+7, r18	; 0x07
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    4f8e:	22 e0       	ldi	r18, 0x02	; 2
    4f90:	b6 95       	lsr	r27
    4f92:	a7 95       	ror	r26
    4f94:	97 95       	ror	r25
    4f96:	87 95       	ror	r24
    4f98:	2a 95       	dec	r18
    4f9a:	d1 f7       	brne	.-12     	; 0x4f90 <f_mkfs+0x42a>
    4f9c:	8f 63       	ori	r24, 0x3F	; 63
    4f9e:	86 83       	std	Z+6, r24	; 0x06
    4fa0:	07 c0       	rjmp	.+14     	; 0x4fb0 <f_mkfs+0x44a>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    4fa2:	8f ef       	ldi	r24, 0xFF	; 255
    4fa4:	d8 01       	movw	r26, r16
    4fa6:	16 96       	adiw	r26, 0x06	; 6
    4fa8:	8c 93       	st	X, r24
    4faa:	16 97       	sbiw	r26, 0x06	; 6
    4fac:	17 96       	adiw	r26, 0x07	; 7
    4fae:	8c 93       	st	X, r24
		}
		tbl[5] = 254;
    4fb0:	8e ef       	ldi	r24, 0xFE	; 254
    4fb2:	f8 01       	movw	r30, r16
    4fb4:	85 83       	std	Z+5, r24	; 0x05
		if (fmt != FS_FAT32)			/* System ID */
    4fb6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4fb8:	f3 30       	cpi	r31, 0x03	; 3
    4fba:	81 f0       	breq	.+32     	; 0x4fdc <f_mkfs+0x476>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
    4fbc:	89 81       	ldd	r24, Y+1	; 0x01
    4fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    4fc0:	ab 81       	ldd	r26, Y+3	; 0x03
    4fc2:	bc 81       	ldd	r27, Y+4	; 0x04
    4fc4:	80 50       	subi	r24, 0x00	; 0
    4fc6:	90 40       	sbci	r25, 0x00	; 0
    4fc8:	a1 40       	sbci	r26, 0x01	; 1
    4fca:	b0 40       	sbci	r27, 0x00	; 0
    4fcc:	10 f0       	brcs	.+4      	; 0x4fd2 <f_mkfs+0x46c>
    4fce:	86 e0       	ldi	r24, 0x06	; 6
    4fd0:	01 c0       	rjmp	.+2      	; 0x4fd4 <f_mkfs+0x46e>
    4fd2:	84 e0       	ldi	r24, 0x04	; 4
    4fd4:	d8 01       	movw	r26, r16
    4fd6:	14 96       	adiw	r26, 0x04	; 4
    4fd8:	8c 93       	st	X, r24
    4fda:	03 c0       	rjmp	.+6      	; 0x4fe2 <f_mkfs+0x47c>
		else
			tbl[4] = 0x0c;
    4fdc:	8c e0       	ldi	r24, 0x0C	; 12
    4fde:	f8 01       	movw	r30, r16
    4fe0:	84 83       	std	Z+4, r24	; 0x04
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
    4fe2:	8f e3       	ldi	r24, 0x3F	; 63
    4fe4:	d8 01       	movw	r26, r16
    4fe6:	18 96       	adiw	r26, 0x08	; 8
    4fe8:	8c 93       	st	X, r24
    4fea:	18 97       	sbiw	r26, 0x08	; 8
    4fec:	19 96       	adiw	r26, 0x09	; 9
    4fee:	1c 92       	st	X, r1
    4ff0:	19 97       	sbiw	r26, 0x09	; 9
    4ff2:	1a 96       	adiw	r26, 0x0a	; 10
    4ff4:	1c 92       	st	X, r1
    4ff6:	1a 97       	sbiw	r26, 0x0a	; 10
    4ff8:	1b 96       	adiw	r26, 0x0b	; 11
    4ffa:	1c 92       	st	X, r1
    4ffc:	1b 97       	sbiw	r26, 0x0b	; 11
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
    4ffe:	89 81       	ldd	r24, Y+1	; 0x01
    5000:	1c 96       	adiw	r26, 0x0c	; 12
    5002:	8c 93       	st	X, r24
    5004:	1c 97       	sbiw	r26, 0x0c	; 12
    5006:	8a 81       	ldd	r24, Y+2	; 0x02
    5008:	1d 96       	adiw	r26, 0x0d	; 13
    500a:	8c 93       	st	X, r24
    500c:	89 81       	ldd	r24, Y+1	; 0x01
    500e:	9a 81       	ldd	r25, Y+2	; 0x02
    5010:	ab 81       	ldd	r26, Y+3	; 0x03
    5012:	bc 81       	ldd	r27, Y+4	; 0x04
    5014:	cd 01       	movw	r24, r26
    5016:	aa 27       	eor	r26, r26
    5018:	bb 27       	eor	r27, r27
    501a:	f8 01       	movw	r30, r16
    501c:	86 87       	std	Z+14, r24	; 0x0e
    501e:	89 81       	ldd	r24, Y+1	; 0x01
    5020:	9a 81       	ldd	r25, Y+2	; 0x02
    5022:	ab 81       	ldd	r26, Y+3	; 0x03
    5024:	bc 81       	ldd	r27, Y+4	; 0x04
    5026:	8b 2f       	mov	r24, r27
    5028:	99 27       	eor	r25, r25
    502a:	aa 27       	eor	r26, r26
    502c:	bb 27       	eor	r27, r27
    502e:	87 87       	std	Z+15, r24	; 0x0f
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
    5030:	00 5c       	subi	r16, 0xC0	; 192
    5032:	1f 4f       	sbci	r17, 0xFF	; 255
    5034:	85 e5       	ldi	r24, 0x55	; 85
    5036:	d8 01       	movw	r26, r16
    5038:	8d 93       	st	X+, r24
    503a:	fd 01       	movw	r30, r26
    503c:	8a ea       	ldi	r24, 0xAA	; 170
    503e:	80 83       	st	Z, r24
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    5040:	89 89       	ldd	r24, Y+17	; 0x11
    5042:	b7 01       	movw	r22, r14
    5044:	20 e0       	ldi	r18, 0x00	; 0
    5046:	30 e0       	ldi	r19, 0x00	; 0
    5048:	40 e0       	ldi	r20, 0x00	; 0
    504a:	50 e0       	ldi	r21, 0x00	; 0
    504c:	01 e0       	ldi	r16, 0x01	; 1
    504e:	0e 94 43 07 	call	0xe86	; 0xe86 <disk_write>
    5052:	88 23       	and	r24, r24
    5054:	09 f0       	breq	.+2      	; 0x5058 <f_mkfs+0x4f2>
    5056:	85 c2       	rjmp	.+1290   	; 0x5562 <f_mkfs+0x9fc>
    5058:	18 ef       	ldi	r17, 0xF8	; 248
	} else {
		partition = 0xF0;
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
    505a:	5e e2       	ldi	r21, 0x2E	; 46
    505c:	e5 2e       	mov	r14, r21
    505e:	f1 2c       	mov	r15, r1
    5060:	ec 0c       	add	r14, r12
    5062:	fd 1c       	adc	r15, r13
    5064:	f7 01       	movw	r30, r14
    5066:	80 e0       	ldi	r24, 0x00	; 0
    5068:	92 e0       	ldi	r25, 0x02	; 2
    506a:	01 c0       	rjmp	.+2      	; 0x506e <f_mkfs+0x508>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    506c:	11 92       	st	Z+, r1
    506e:	01 97       	sbiw	r24, 0x01	; 1
    5070:	bf ef       	ldi	r27, 0xFF	; 255
    5072:	8f 3f       	cpi	r24, 0xFF	; 255
    5074:	9b 07       	cpc	r25, r27
    5076:	d1 f7       	brne	.-12     	; 0x506c <f_mkfs+0x506>
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
    5078:	8b ee       	ldi	r24, 0xEB	; 235
    507a:	f6 01       	movw	r30, r12
    507c:	86 a7       	std	Z+46, r24	; 0x2e
    507e:	8e ef       	ldi	r24, 0xFE	; 254
    5080:	87 a7       	std	Z+47, r24	; 0x2f
    5082:	80 e9       	ldi	r24, 0x90	; 144
    5084:	80 ab       	std	Z+48, r24	; 0x30
    5086:	11 aa       	std	Z+49, r1	; 0x31
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
    5088:	11 ae       	std	Z+57, r1	; 0x39
    508a:	82 e0       	ldi	r24, 0x02	; 2
    508c:	82 af       	std	Z+58, r24	; 0x3a
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
    508e:	2e 8e       	std	Y+30, r2	; 0x1e
    5090:	23 ae       	std	Z+59, r2	; 0x3b
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
    5092:	2e 89       	ldd	r18, Y+22	; 0x16
    5094:	24 af       	std	Z+60, r18	; 0x3c
    5096:	15 ae       	std	Z+61, r1	; 0x3d
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
    5098:	81 e0       	ldi	r24, 0x01	; 1
    509a:	86 af       	std	Z+62, r24	; 0x3e
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
    509c:	8a 89       	ldd	r24, Y+18	; 0x12
    509e:	9b 89       	ldd	r25, Y+19	; 0x13
    50a0:	ac 89       	ldd	r26, Y+20	; 0x14
    50a2:	bd 89       	ldd	r27, Y+21	; 0x15
    50a4:	44 e0       	ldi	r20, 0x04	; 4
    50a6:	88 0f       	add	r24, r24
    50a8:	99 1f       	adc	r25, r25
    50aa:	aa 1f       	adc	r26, r26
    50ac:	bb 1f       	adc	r27, r27
    50ae:	4a 95       	dec	r20
    50b0:	d1 f7       	brne	.-12     	; 0x50a6 <f_mkfs+0x540>
    50b2:	87 af       	std	Z+63, r24	; 0x3f
    50b4:	40 e4       	ldi	r20, 0x40	; 64
    50b6:	50 e0       	ldi	r21, 0x00	; 0
    50b8:	c4 0e       	add	r12, r20
    50ba:	d5 1e       	adc	r13, r21
    50bc:	89 2f       	mov	r24, r25
    50be:	99 27       	eor	r25, r25
    50c0:	d6 01       	movw	r26, r12
    50c2:	8c 93       	st	X, r24
    50c4:	e0 ec       	ldi	r30, 0xC0	; 192
    50c6:	ff ef       	ldi	r31, 0xFF	; 255
    50c8:	ce 0e       	add	r12, r30
    50ca:	df 1e       	adc	r13, r31
	if (n_part < 0x10000) {						/* Number of total sectors */
    50cc:	89 81       	ldd	r24, Y+1	; 0x01
    50ce:	9a 81       	ldd	r25, Y+2	; 0x02
    50d0:	ab 81       	ldd	r26, Y+3	; 0x03
    50d2:	bc 81       	ldd	r27, Y+4	; 0x04
    50d4:	80 30       	cpi	r24, 0x00	; 0
    50d6:	f0 e0       	ldi	r31, 0x00	; 0
    50d8:	9f 07       	cpc	r25, r31
    50da:	f1 e0       	ldi	r31, 0x01	; 1
    50dc:	af 07       	cpc	r26, r31
    50de:	f0 e0       	ldi	r31, 0x00	; 0
    50e0:	bf 07       	cpc	r27, r31
    50e2:	60 f4       	brcc	.+24     	; 0x50fc <f_mkfs+0x596>
		ST_WORD(tbl+BPB_TotSec16, n_part);
    50e4:	21 e4       	ldi	r18, 0x41	; 65
    50e6:	30 e0       	ldi	r19, 0x00	; 0
    50e8:	c2 0e       	add	r12, r18
    50ea:	d3 1e       	adc	r13, r19
    50ec:	f6 01       	movw	r30, r12
    50ee:	81 93       	st	Z+, r24
    50f0:	6f 01       	movw	r12, r30
    50f2:	8a 81       	ldd	r24, Y+2	; 0x02
    50f4:	80 83       	st	Z, r24
    50f6:	2e eb       	ldi	r18, 0xBE	; 190
    50f8:	3f ef       	ldi	r19, 0xFF	; 255
    50fa:	1f c0       	rjmp	.+62     	; 0x513a <f_mkfs+0x5d4>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
    50fc:	4e e4       	ldi	r20, 0x4E	; 78
    50fe:	50 e0       	ldi	r21, 0x00	; 0
    5100:	c4 0e       	add	r12, r20
    5102:	d5 1e       	adc	r13, r21
    5104:	f6 01       	movw	r30, r12
    5106:	81 93       	st	Z+, r24
    5108:	8a 81       	ldd	r24, Y+2	; 0x02
    510a:	df 01       	movw	r26, r30
    510c:	8d 93       	st	X+, r24
    510e:	6d 01       	movw	r12, r26
    5110:	89 81       	ldd	r24, Y+1	; 0x01
    5112:	9a 81       	ldd	r25, Y+2	; 0x02
    5114:	ab 81       	ldd	r26, Y+3	; 0x03
    5116:	bc 81       	ldd	r27, Y+4	; 0x04
    5118:	cd 01       	movw	r24, r26
    511a:	aa 27       	eor	r26, r26
    511c:	bb 27       	eor	r27, r27
    511e:	f6 01       	movw	r30, r12
    5120:	81 93       	st	Z+, r24
    5122:	6f 01       	movw	r12, r30
    5124:	89 81       	ldd	r24, Y+1	; 0x01
    5126:	9a 81       	ldd	r25, Y+2	; 0x02
    5128:	ab 81       	ldd	r26, Y+3	; 0x03
    512a:	bc 81       	ldd	r27, Y+4	; 0x04
    512c:	8b 2f       	mov	r24, r27
    512e:	99 27       	eor	r25, r25
    5130:	aa 27       	eor	r26, r26
    5132:	bb 27       	eor	r27, r27
    5134:	80 83       	st	Z, r24
    5136:	2f ea       	ldi	r18, 0xAF	; 175
    5138:	3f ef       	ldi	r19, 0xFF	; 255
    513a:	c2 0e       	add	r12, r18
    513c:	d3 1e       	adc	r13, r19
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
    513e:	43 e4       	ldi	r20, 0x43	; 67
    5140:	50 e0       	ldi	r21, 0x00	; 0
    5142:	c4 0e       	add	r12, r20
    5144:	d5 1e       	adc	r13, r21
    5146:	d6 01       	movw	r26, r12
    5148:	1c 93       	st	X, r17
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
    514a:	e3 e0       	ldi	r30, 0x03	; 3
    514c:	f0 e0       	ldi	r31, 0x00	; 0
    514e:	ce 0e       	add	r12, r30
    5150:	df 1e       	adc	r13, r31
    5152:	8f e3       	ldi	r24, 0x3F	; 63
    5154:	d6 01       	movw	r26, r12
    5156:	8d 93       	st	X+, r24
    5158:	fd 01       	movw	r30, r26
    515a:	11 92       	st	Z+, r1
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
    515c:	8f ef       	ldi	r24, 0xFF	; 255
    515e:	df 01       	movw	r26, r30
    5160:	8d 93       	st	X+, r24
    5162:	fd 01       	movw	r30, r26
    5164:	11 92       	st	Z+, r1
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
    5166:	df 01       	movw	r26, r30
    5168:	ea 8d       	ldd	r30, Y+26	; 0x1a
    516a:	ed 93       	st	X+, r30
    516c:	1d 92       	st	X+, r1
    516e:	fd 01       	movw	r30, r26
    5170:	11 92       	st	Z+, r1
    5172:	6f 01       	movw	r12, r30
    5174:	10 82       	st	Z, r1
    5176:	23 eb       	ldi	r18, 0xB3	; 179
    5178:	3f ef       	ldi	r19, 0xFF	; 255
    517a:	c2 0e       	add	r12, r18
    517c:	d3 1e       	adc	r13, r19
	n = get_fattime();							/* Use current time as a VSN */
    517e:	1d 82       	std	Y+5, r1	; 0x05
    5180:	1e 82       	std	Y+6, r1	; 0x06
    5182:	1f 82       	std	Y+7, r1	; 0x07
    5184:	18 86       	std	Y+8, r1	; 0x08
    5186:	b6 01       	movw	r22, r12
    5188:	6b 5a       	subi	r22, 0xAB	; 171
    518a:	7f 4f       	sbci	r23, 0xFF	; 255
    518c:	85 2d       	mov	r24, r5
    518e:	99 27       	eor	r25, r25
    5190:	d6 01       	movw	r26, r12
    5192:	ae 5a       	subi	r26, 0xAE	; 174
    5194:	bf 4f       	sbci	r27, 0xFF	; 255
    5196:	96 01       	movw	r18, r12
    5198:	2c 5a       	subi	r18, 0xAC	; 172
    519a:	3f 4f       	sbci	r19, 0xFF	; 255
	if (fmt != FS_FAT32) {
    519c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    519e:	43 30       	cpi	r20, 0x03	; 3
    51a0:	41 f1       	breq	.+80     	; 0x51f2 <f_mkfs+0x68c>
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
    51a2:	fb 01       	movw	r30, r22
    51a4:	10 82       	st	Z, r1
    51a6:	46 e5       	ldi	r20, 0x56	; 86
    51a8:	50 e0       	ldi	r21, 0x00	; 0
    51aa:	c4 0e       	add	r12, r20
    51ac:	d5 1e       	adc	r13, r21
    51ae:	f6 01       	movw	r30, r12
    51b0:	11 92       	st	Z+, r1
    51b2:	11 92       	st	Z+, r1
    51b4:	6f 01       	movw	r12, r30
    51b6:	10 82       	st	Z, r1
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
    51b8:	4c ee       	ldi	r20, 0xEC	; 236
    51ba:	5f ef       	ldi	r21, 0xFF	; 255
    51bc:	c4 0e       	add	r12, r20
    51be:	d5 1e       	adc	r13, r21
    51c0:	f6 01       	movw	r30, r12
    51c2:	41 92       	st	Z+, r4
    51c4:	6f 01       	movw	r12, r30
    51c6:	80 83       	st	Z, r24
    51c8:	4b eb       	ldi	r20, 0xBB	; 187
    51ca:	5f ef       	ldi	r21, 0xFF	; 255
    51cc:	c4 0e       	add	r12, r20
    51ce:	d5 1e       	adc	r13, r21
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
    51d0:	80 e8       	ldi	r24, 0x80	; 128
    51d2:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
    51d4:	89 e2       	ldi	r24, 0x29	; 41
    51d6:	d9 01       	movw	r26, r18
    51d8:	8c 93       	st	X, r24
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    51da:	d7 01       	movw	r26, r14
    51dc:	9b 96       	adiw	r26, 0x2b	; 43
    51de:	eb e0       	ldi	r30, 0x0B	; 11
    51e0:	f0 e2       	ldi	r31, 0x20	; 32
    51e2:	02 c0       	rjmp	.+4      	; 0x51e8 <f_mkfs+0x682>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    51e4:	81 91       	ld	r24, Z+
    51e6:	8d 93       	st	X+, r24
    51e8:	20 e2       	ldi	r18, 0x20	; 32
    51ea:	ee 31       	cpi	r30, 0x1E	; 30
    51ec:	f2 07       	cpc	r31, r18
    51ee:	d1 f7       	brne	.-12     	; 0x51e4 <f_mkfs+0x67e>
    51f0:	51 c0       	rjmp	.+162    	; 0x5294 <f_mkfs+0x72e>
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
    51f2:	41 e7       	ldi	r20, 0x71	; 113
    51f4:	50 e0       	ldi	r21, 0x00	; 0
    51f6:	c4 0e       	add	r12, r20
    51f8:	d5 1e       	adc	r13, r21
    51fa:	f6 01       	movw	r30, r12
    51fc:	11 92       	st	Z+, r1
    51fe:	11 92       	st	Z+, r1
    5200:	11 92       	st	Z+, r1
    5202:	6f 01       	movw	r12, r30
    5204:	10 82       	st	Z, r1
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
    5206:	4c 92       	st	X, r4
    5208:	4f ed       	ldi	r20, 0xDF	; 223
    520a:	5f ef       	ldi	r21, 0xFF	; 255
    520c:	c4 0e       	add	r12, r20
    520e:	d5 1e       	adc	r13, r21
    5210:	d6 01       	movw	r26, r12
    5212:	8c 93       	st	X, r24
    5214:	c3 01       	movw	r24, r6
    5216:	aa 27       	eor	r26, r26
    5218:	bb 27       	eor	r27, r27
    521a:	f9 01       	movw	r30, r18
    521c:	80 83       	st	Z, r24
    521e:	87 2d       	mov	r24, r7
    5220:	99 27       	eor	r25, r25
    5222:	aa 27       	eor	r26, r26
    5224:	bb 27       	eor	r27, r27
    5226:	fb 01       	movw	r30, r22
    5228:	80 83       	st	Z, r24
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
    522a:	27 e0       	ldi	r18, 0x07	; 7
    522c:	30 e0       	ldi	r19, 0x00	; 0
    522e:	c2 0e       	add	r12, r18
    5230:	d3 1e       	adc	r13, r19
    5232:	82 e0       	ldi	r24, 0x02	; 2
    5234:	d6 01       	movw	r26, r12
    5236:	8d 93       	st	X+, r24
    5238:	fd 01       	movw	r30, r26
    523a:	11 92       	st	Z+, r1
    523c:	df 01       	movw	r26, r30
    523e:	1d 92       	st	X+, r1
    5240:	fd 01       	movw	r30, r26
    5242:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
    5244:	81 e0       	ldi	r24, 0x01	; 1
    5246:	df 01       	movw	r26, r30
    5248:	8d 93       	st	X+, r24
    524a:	fd 01       	movw	r30, r26
    524c:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
    524e:	86 e0       	ldi	r24, 0x06	; 6
    5250:	df 01       	movw	r26, r30
    5252:	8d 93       	st	X+, r24
    5254:	6d 01       	movw	r12, r26
    5256:	1c 92       	st	X, r1
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
    5258:	ed e0       	ldi	r30, 0x0D	; 13
    525a:	f0 e0       	ldi	r31, 0x00	; 0
    525c:	ce 0e       	add	r12, r30
    525e:	df 1e       	adc	r13, r31
    5260:	80 e8       	ldi	r24, 0x80	; 128
    5262:	d6 01       	movw	r26, r12
    5264:	8c 93       	st	X, r24
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
    5266:	e2 e0       	ldi	r30, 0x02	; 2
    5268:	f0 e0       	ldi	r31, 0x00	; 0
    526a:	ce 0e       	add	r12, r30
    526c:	df 1e       	adc	r13, r31
    526e:	89 e2       	ldi	r24, 0x29	; 41
    5270:	d6 01       	movw	r26, r12
    5272:	8c 93       	st	X, r24
    5274:	e0 e9       	ldi	r30, 0x90	; 144
    5276:	ff ef       	ldi	r31, 0xFF	; 255
    5278:	ce 0e       	add	r12, r30
    527a:	df 1e       	adc	r13, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    527c:	d7 01       	movw	r26, r14
    527e:	a9 5b       	subi	r26, 0xB9	; 185
    5280:	bf 4f       	sbci	r27, 0xFF	; 255
    5282:	ef e1       	ldi	r30, 0x1F	; 31
    5284:	f0 e2       	ldi	r31, 0x20	; 32
    5286:	02 c0       	rjmp	.+4      	; 0x528c <f_mkfs+0x726>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    5288:	81 91       	ld	r24, Z+
    528a:	8d 93       	st	X+, r24
    528c:	20 e2       	ldi	r18, 0x20	; 32
    528e:	e2 33       	cpi	r30, 0x32	; 50
    5290:	f2 07       	cpc	r31, r18
    5292:	d1 f7       	brne	.-12     	; 0x5288 <f_mkfs+0x722>
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
    5294:	4c e2       	ldi	r20, 0x2C	; 44
    5296:	52 e0       	ldi	r21, 0x02	; 2
    5298:	c4 0e       	add	r12, r20
    529a:	d5 1e       	adc	r13, r21
    529c:	85 e5       	ldi	r24, 0x55	; 85
    529e:	d6 01       	movw	r26, r12
    52a0:	8d 93       	st	X+, r24
    52a2:	6d 01       	movw	r12, r26
    52a4:	8a ea       	ldi	r24, 0xAA	; 170
    52a6:	8c 93       	st	X, r24
    52a8:	e3 ed       	ldi	r30, 0xD3	; 211
    52aa:	fd ef       	ldi	r31, 0xFD	; 253
    52ac:	ce 0e       	add	r12, r30
    52ae:	df 1e       	adc	r13, r31
	if (SS(fs) > 512U) {
		ST_WORD(tbl+SS(fs)-2, 0xAA55);
	}
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
    52b0:	89 89       	ldd	r24, Y+17	; 0x11
    52b2:	b7 01       	movw	r22, r14
    52b4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    52b6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    52b8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    52ba:	5d 8d       	ldd	r21, Y+29	; 0x1d
    52bc:	01 e0       	ldi	r16, 0x01	; 1
    52be:	0e 94 43 07 	call	0xe86	; 0xe86 <disk_write>
    52c2:	88 23       	and	r24, r24
    52c4:	09 f0       	breq	.+2      	; 0x52c8 <f_mkfs+0x762>
    52c6:	4d c1       	rjmp	.+666    	; 0x5562 <f_mkfs+0x9fc>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)
    52c8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    52ca:	f3 30       	cpi	r31, 0x03	; 3
    52cc:	61 f4       	brne	.+24     	; 0x52e6 <f_mkfs+0x780>
		disk_write(drv, tbl, b_part+6, 1);
    52ce:	2a 8d       	ldd	r18, Y+26	; 0x1a
    52d0:	3b 8d       	ldd	r19, Y+27	; 0x1b
    52d2:	4c 8d       	ldd	r20, Y+28	; 0x1c
    52d4:	5d 8d       	ldd	r21, Y+29	; 0x1d
    52d6:	2a 5f       	subi	r18, 0xFA	; 250
    52d8:	3f 4f       	sbci	r19, 0xFF	; 255
    52da:	4f 4f       	sbci	r20, 0xFF	; 255
    52dc:	5f 4f       	sbci	r21, 0xFF	; 255
    52de:	89 89       	ldd	r24, Y+17	; 0x11
    52e0:	b7 01       	movw	r22, r14
    52e2:	0e 94 43 07 	call	0xe86	; 0xe86 <disk_write>
    52e6:	f7 01       	movw	r30, r14
    52e8:	80 e0       	ldi	r24, 0x00	; 0
    52ea:	92 e0       	ldi	r25, 0x02	; 2
    52ec:	01 c0       	rjmp	.+2      	; 0x52f0 <f_mkfs+0x78a>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    52ee:	11 92       	st	Z+, r1
    52f0:	01 97       	sbiw	r24, 0x01	; 1
    52f2:	2f ef       	ldi	r18, 0xFF	; 255
    52f4:	8f 3f       	cpi	r24, 0xFF	; 255
    52f6:	92 07       	cpc	r25, r18
    52f8:	d1 f7       	brne	.-12     	; 0x52ee <f_mkfs+0x788>
		disk_write(drv, tbl, b_part+6, 1);

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
		if (fmt != FS_FAT32) {
    52fa:	3f 8d       	ldd	r19, Y+31	; 0x1f
    52fc:	33 30       	cpi	r19, 0x03	; 3
    52fe:	31 f1       	breq	.+76     	; 0x534c <f_mkfs+0x7e6>
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    5300:	31 30       	cpi	r19, 0x01	; 1
    5302:	29 f0       	breq	.+10     	; 0x530e <f_mkfs+0x7a8>
    5304:	20 e0       	ldi	r18, 0x00	; 0
    5306:	3f ef       	ldi	r19, 0xFF	; 255
    5308:	4f ef       	ldi	r20, 0xFF	; 255
    530a:	5f ef       	ldi	r21, 0xFF	; 255
    530c:	04 c0       	rjmp	.+8      	; 0x5316 <f_mkfs+0x7b0>
    530e:	20 e0       	ldi	r18, 0x00	; 0
    5310:	3f ef       	ldi	r19, 0xFF	; 255
    5312:	4f ef       	ldi	r20, 0xFF	; 255
    5314:	50 e0       	ldi	r21, 0x00	; 0
			n |= partition;
    5316:	81 2f       	mov	r24, r17
    5318:	90 e0       	ldi	r25, 0x00	; 0
    531a:	a0 e0       	ldi	r26, 0x00	; 0
    531c:	b0 e0       	ldi	r27, 0x00	; 0
    531e:	82 2b       	or	r24, r18
    5320:	93 2b       	or	r25, r19
    5322:	a4 2b       	or	r26, r20
    5324:	b5 2b       	or	r27, r21
    5326:	8d 83       	std	Y+5, r24	; 0x05
    5328:	9e 83       	std	Y+6, r25	; 0x06
    532a:	af 83       	std	Y+7, r26	; 0x07
    532c:	b8 87       	std	Y+8, r27	; 0x08
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
    532e:	f6 01       	movw	r30, r12
    5330:	86 a7       	std	Z+46, r24	; 0x2e
    5332:	29 2f       	mov	r18, r25
    5334:	33 27       	eor	r19, r19
    5336:	27 a7       	std	Z+47, r18	; 0x2f
    5338:	9d 01       	movw	r18, r26
    533a:	44 27       	eor	r20, r20
    533c:	55 27       	eor	r21, r21
    533e:	20 ab       	std	Z+48, r18	; 0x30
    5340:	8b 2f       	mov	r24, r27
    5342:	99 27       	eor	r25, r25
    5344:	aa 27       	eor	r26, r26
    5346:	bb 27       	eor	r27, r27
    5348:	81 ab       	std	Z+49, r24	; 0x31
    534a:	27 c0       	rjmp	.+78     	; 0x539a <f_mkfs+0x834>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
    534c:	88 ef       	ldi	r24, 0xF8	; 248
    534e:	d6 01       	movw	r26, r12
    5350:	9e 96       	adiw	r26, 0x2e	; 46
    5352:	8c 93       	st	X, r24
    5354:	9e 97       	sbiw	r26, 0x2e	; 46
    5356:	8f ef       	ldi	r24, 0xFF	; 255
    5358:	9f 96       	adiw	r26, 0x2f	; 47
    535a:	8c 93       	st	X, r24
    535c:	9f 97       	sbiw	r26, 0x2f	; 47
    535e:	d0 96       	adiw	r26, 0x30	; 48
    5360:	8c 93       	st	X, r24
    5362:	d0 97       	sbiw	r26, 0x30	; 48
    5364:	d1 96       	adiw	r26, 0x31	; 49
    5366:	8c 93       	st	X, r24
    5368:	d1 97       	sbiw	r26, 0x31	; 49
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    536a:	d2 96       	adiw	r26, 0x32	; 50
    536c:	8c 93       	st	X, r24
    536e:	d2 97       	sbiw	r26, 0x32	; 50
    5370:	d3 96       	adiw	r26, 0x33	; 51
    5372:	8c 93       	st	X, r24
    5374:	d3 97       	sbiw	r26, 0x33	; 51
    5376:	d4 96       	adiw	r26, 0x34	; 52
    5378:	8c 93       	st	X, r24
    537a:	d4 97       	sbiw	r26, 0x34	; 52
    537c:	d5 96       	adiw	r26, 0x35	; 53
    537e:	8c 93       	st	X, r24
    5380:	d5 97       	sbiw	r26, 0x35	; 53
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    5382:	d6 96       	adiw	r26, 0x36	; 54
    5384:	8c 93       	st	X, r24
    5386:	d6 97       	sbiw	r26, 0x36	; 54
    5388:	d7 96       	adiw	r26, 0x37	; 55
    538a:	8c 93       	st	X, r24
    538c:	d7 97       	sbiw	r26, 0x37	; 55
    538e:	d8 96       	adiw	r26, 0x38	; 56
    5390:	8c 93       	st	X, r24
    5392:	d8 97       	sbiw	r26, 0x38	; 56
    5394:	8f e0       	ldi	r24, 0x0F	; 15
    5396:	d9 96       	adiw	r26, 0x39	; 57
    5398:	8c 93       	st	X, r24
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    539a:	89 89       	ldd	r24, Y+17	; 0x11
    539c:	b7 01       	movw	r22, r14
    539e:	29 85       	ldd	r18, Y+9	; 0x09
    53a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    53a2:	4b 85       	ldd	r20, Y+11	; 0x0b
    53a4:	5c 85       	ldd	r21, Y+12	; 0x0c
    53a6:	01 e0       	ldi	r16, 0x01	; 1
    53a8:	0e 94 43 07 	call	0xe86	; 0xe86 <disk_write>
    53ac:	88 23       	and	r24, r24
    53ae:	09 f0       	breq	.+2      	; 0x53b2 <f_mkfs+0x84c>
    53b0:	d8 c0       	rjmp	.+432    	; 0x5562 <f_mkfs+0x9fc>
    53b2:	f7 01       	movw	r30, r14
    53b4:	80 e0       	ldi	r24, 0x00	; 0
    53b6:	92 e0       	ldi	r25, 0x02	; 2
    53b8:	01 c0       	rjmp	.+2      	; 0x53bc <f_mkfs+0x856>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    53ba:	11 92       	st	Z+, r1
    53bc:	01 97       	sbiw	r24, 0x01	; 1
    53be:	bf ef       	ldi	r27, 0xFF	; 255
    53c0:	8f 3f       	cpi	r24, 0xFF	; 255
    53c2:	9b 07       	cpc	r25, r27
    53c4:	d1 f7       	brne	.-12     	; 0x53ba <f_mkfs+0x854>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    53c6:	89 84       	ldd	r8, Y+9	; 0x09
    53c8:	9a 84       	ldd	r9, Y+10	; 0x0a
    53ca:	ab 84       	ldd	r10, Y+11	; 0x0b
    53cc:	bc 84       	ldd	r11, Y+12	; 0x0c
    53ce:	08 94       	sec
    53d0:	81 1c       	adc	r8, r1
    53d2:	91 1c       	adc	r9, r1
    53d4:	a1 1c       	adc	r10, r1
    53d6:	b1 1c       	adc	r11, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    53d8:	81 e0       	ldi	r24, 0x01	; 1
    53da:	90 e0       	ldi	r25, 0x00	; 0
    53dc:	a0 e0       	ldi	r26, 0x00	; 0
    53de:	b0 e0       	ldi	r27, 0x00	; 0
    53e0:	16 c0       	rjmp	.+44     	; 0x540e <f_mkfs+0x8a8>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    53e2:	89 89       	ldd	r24, Y+17	; 0x11
    53e4:	b7 01       	movw	r22, r14
    53e6:	a5 01       	movw	r20, r10
    53e8:	94 01       	movw	r18, r8
    53ea:	01 e0       	ldi	r16, 0x01	; 1
    53ec:	0e 94 43 07 	call	0xe86	; 0xe86 <disk_write>
    53f0:	88 23       	and	r24, r24
    53f2:	09 f0       	breq	.+2      	; 0x53f6 <f_mkfs+0x890>
    53f4:	b6 c0       	rjmp	.+364    	; 0x5562 <f_mkfs+0x9fc>
    53f6:	08 94       	sec
    53f8:	81 1c       	adc	r8, r1
    53fa:	91 1c       	adc	r9, r1
    53fc:	a1 1c       	adc	r10, r1
    53fe:	b1 1c       	adc	r11, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    5400:	8d 81       	ldd	r24, Y+5	; 0x05
    5402:	9e 81       	ldd	r25, Y+6	; 0x06
    5404:	af 81       	ldd	r26, Y+7	; 0x07
    5406:	b8 85       	ldd	r27, Y+8	; 0x08
    5408:	01 96       	adiw	r24, 0x01	; 1
    540a:	a1 1d       	adc	r26, r1
    540c:	b1 1d       	adc	r27, r1
    540e:	8d 83       	std	Y+5, r24	; 0x05
    5410:	9e 83       	std	Y+6, r25	; 0x06
    5412:	af 83       	std	Y+7, r26	; 0x07
    5414:	b8 87       	std	Y+8, r27	; 0x08
    5416:	8d 81       	ldd	r24, Y+5	; 0x05
    5418:	9e 81       	ldd	r25, Y+6	; 0x06
    541a:	af 81       	ldd	r26, Y+7	; 0x07
    541c:	b8 85       	ldd	r27, Y+8	; 0x08
    541e:	84 15       	cp	r24, r4
    5420:	95 05       	cpc	r25, r5
    5422:	a6 05       	cpc	r26, r6
    5424:	b7 05       	cpc	r27, r7
    5426:	e8 f2       	brcs	.-70     	; 0x53e2 <f_mkfs+0x87c>
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
    5428:	ef 8d       	ldd	r30, Y+31	; 0x1f
    542a:	e3 30       	cpi	r30, 0x03	; 3
    542c:	11 f0       	breq	.+4      	; 0x5432 <f_mkfs+0x8cc>
    542e:	fa 89       	ldd	r31, Y+18	; 0x12
    5430:	fe 8f       	std	Y+30, r31	; 0x1e
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    5432:	24 01       	movw	r4, r8
    5434:	35 01       	movw	r6, r10
    5436:	08 94       	sec
    5438:	41 1c       	adc	r4, r1
    543a:	51 1c       	adc	r5, r1
    543c:	61 1c       	adc	r6, r1
    543e:	71 1c       	adc	r7, r1
    5440:	89 89       	ldd	r24, Y+17	; 0x11
    5442:	b7 01       	movw	r22, r14
    5444:	a5 01       	movw	r20, r10
    5446:	94 01       	movw	r18, r8
    5448:	01 e0       	ldi	r16, 0x01	; 1
    544a:	0e 94 43 07 	call	0xe86	; 0xe86 <disk_write>
    544e:	88 23       	and	r24, r24
    5450:	09 f0       	breq	.+2      	; 0x5454 <f_mkfs+0x8ee>
    5452:	87 c0       	rjmp	.+270    	; 0x5562 <f_mkfs+0x9fc>
			return FR_DISK_ERR;
	} while (--m);
    5454:	2e 8d       	ldd	r18, Y+30	; 0x1e
    5456:	21 50       	subi	r18, 0x01	; 1
    5458:	2e 8f       	std	Y+30, r18	; 0x1e
    545a:	22 23       	and	r18, r18
    545c:	19 f0       	breq	.+6      	; 0x5464 <f_mkfs+0x8fe>
    545e:	53 01       	movw	r10, r6
    5460:	42 01       	movw	r8, r4
    5462:	e7 cf       	rjmp	.-50     	; 0x5432 <f_mkfs+0x8cc>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
    5464:	3f 8d       	ldd	r19, Y+31	; 0x1f
    5466:	33 30       	cpi	r19, 0x03	; 3
    5468:	09 f0       	breq	.+2      	; 0x546c <f_mkfs+0x906>
    546a:	70 c0       	rjmp	.+224    	; 0x554c <f_mkfs+0x9e6>
		ST_WORD(tbl+BS_55AA, 0xAA55);
    546c:	4c e2       	ldi	r20, 0x2C	; 44
    546e:	52 e0       	ldi	r21, 0x02	; 2
    5470:	c4 0e       	add	r12, r20
    5472:	d5 1e       	adc	r13, r21
    5474:	85 e5       	ldi	r24, 0x55	; 85
    5476:	d6 01       	movw	r26, r12
    5478:	8d 93       	st	X+, r24
    547a:	6d 01       	movw	r12, r26
    547c:	8a ea       	ldi	r24, 0xAA	; 170
    547e:	8c 93       	st	X, r24
    5480:	e3 ed       	ldi	r30, 0xD3	; 211
    5482:	fd ef       	ldi	r31, 0xFD	; 253
    5484:	ce 0e       	add	r12, r30
    5486:	df 1e       	adc	r13, r31
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    5488:	82 e5       	ldi	r24, 0x52	; 82
    548a:	d6 01       	movw	r26, r12
    548c:	9e 96       	adiw	r26, 0x2e	; 46
    548e:	8c 93       	st	X, r24
    5490:	9e 97       	sbiw	r26, 0x2e	; 46
    5492:	9f 96       	adiw	r26, 0x2f	; 47
    5494:	8c 93       	st	X, r24
    5496:	9f 97       	sbiw	r26, 0x2f	; 47
    5498:	21 e6       	ldi	r18, 0x61	; 97
    549a:	d0 96       	adiw	r26, 0x30	; 48
    549c:	2c 93       	st	X, r18
    549e:	d0 97       	sbiw	r26, 0x30	; 48
    54a0:	91 e4       	ldi	r25, 0x41	; 65
    54a2:	d1 96       	adiw	r26, 0x31	; 49
    54a4:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    54a6:	e2 e1       	ldi	r30, 0x12	; 18
    54a8:	f2 e0       	ldi	r31, 0x02	; 2
    54aa:	ce 0e       	add	r12, r30
    54ac:	df 1e       	adc	r13, r31
    54ae:	82 e7       	ldi	r24, 0x72	; 114
    54b0:	d6 01       	movw	r26, r12
    54b2:	8d 93       	st	X+, r24
    54b4:	fd 01       	movw	r30, r26
    54b6:	81 93       	st	Z+, r24
    54b8:	df 01       	movw	r26, r30
    54ba:	9d 93       	st	X+, r25
    54bc:	fd 01       	movw	r30, r26
    54be:	21 93       	st	Z+, r18
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
    54c0:	89 a1       	ldd	r24, Y+33	; 0x21
    54c2:	81 50       	subi	r24, 0x01	; 1
    54c4:	df 01       	movw	r26, r30
    54c6:	8d 93       	st	X+, r24
    54c8:	89 a1       	ldd	r24, Y+33	; 0x21
    54ca:	9a a1       	ldd	r25, Y+34	; 0x22
    54cc:	01 97       	sbiw	r24, 0x01	; 1
    54ce:	fd 01       	movw	r30, r26
    54d0:	91 93       	st	Z+, r25
    54d2:	89 a1       	ldd	r24, Y+33	; 0x21
    54d4:	9a a1       	ldd	r25, Y+34	; 0x22
    54d6:	ab a1       	ldd	r26, Y+35	; 0x23
    54d8:	bc a1       	ldd	r27, Y+36	; 0x24
    54da:	01 97       	sbiw	r24, 0x01	; 1
    54dc:	a1 09       	sbc	r26, r1
    54de:	b1 09       	sbc	r27, r1
    54e0:	9d 01       	movw	r18, r26
    54e2:	44 27       	eor	r20, r20
    54e4:	55 27       	eor	r21, r21
    54e6:	21 93       	st	Z+, r18
    54e8:	8b 2f       	mov	r24, r27
    54ea:	99 27       	eor	r25, r25
    54ec:	aa 27       	eor	r26, r26
    54ee:	bb 27       	eor	r27, r27
    54f0:	81 93       	st	Z+, r24
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
    54f2:	8f ef       	ldi	r24, 0xFF	; 255
    54f4:	df 01       	movw	r26, r30
    54f6:	8d 93       	st	X+, r24
    54f8:	fd 01       	movw	r30, r26
    54fa:	81 93       	st	Z+, r24
    54fc:	df 01       	movw	r26, r30
    54fe:	8d 93       	st	X+, r24
    5500:	fd 01       	movw	r30, r26
    5502:	80 83       	st	Z, r24
		disk_write(drv, tbl, b_part+1, 1);
    5504:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5506:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5508:	4c 8d       	ldd	r20, Y+28	; 0x1c
    550a:	5d 8d       	ldd	r21, Y+29	; 0x1d
    550c:	2f 5f       	subi	r18, 0xFF	; 255
    550e:	3f 4f       	sbci	r19, 0xFF	; 255
    5510:	4f 4f       	sbci	r20, 0xFF	; 255
    5512:	5f 4f       	sbci	r21, 0xFF	; 255
    5514:	2a 8f       	std	Y+26, r18	; 0x1a
    5516:	3b 8f       	std	Y+27, r19	; 0x1b
    5518:	4c 8f       	std	Y+28, r20	; 0x1c
    551a:	5d 8f       	std	Y+29, r21	; 0x1d
    551c:	89 89       	ldd	r24, Y+17	; 0x11
    551e:	b7 01       	movw	r22, r14
    5520:	01 e0       	ldi	r16, 0x01	; 1
    5522:	0e 94 43 07 	call	0xe86	; 0xe86 <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
    5526:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5528:	9b 8d       	ldd	r25, Y+27	; 0x1b
    552a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    552c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    552e:	06 96       	adiw	r24, 0x06	; 6
    5530:	a1 1d       	adc	r26, r1
    5532:	b1 1d       	adc	r27, r1
    5534:	8a 8f       	std	Y+26, r24	; 0x1a
    5536:	9b 8f       	std	Y+27, r25	; 0x1b
    5538:	ac 8f       	std	Y+28, r26	; 0x1c
    553a:	bd 8f       	std	Y+29, r27	; 0x1d
    553c:	89 89       	ldd	r24, Y+17	; 0x11
    553e:	b7 01       	movw	r22, r14
    5540:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5542:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5544:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5546:	5d 8d       	ldd	r21, Y+29	; 0x1d
    5548:	0e 94 43 07 	call	0xe86	; 0xe86 <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
    554c:	89 89       	ldd	r24, Y+17	; 0x11
    554e:	60 e0       	ldi	r22, 0x00	; 0
    5550:	40 e0       	ldi	r20, 0x00	; 0
    5552:	50 e0       	ldi	r21, 0x00	; 0
    5554:	0e 94 bb 07 	call	0xf76	; 0xf76 <disk_ioctl>
    5558:	88 23       	and	r24, r24
    555a:	21 f0       	breq	.+8      	; 0x5564 <f_mkfs+0x9fe>
    555c:	02 c0       	rjmp	.+4      	; 0x5562 <f_mkfs+0x9fc>
    555e:	8e e0       	ldi	r24, 0x0E	; 14
    5560:	01 c0       	rjmp	.+2      	; 0x5564 <f_mkfs+0x9fe>
    5562:	81 e0       	ldi	r24, 0x01	; 1
}
    5564:	a4 96       	adiw	r28, 0x24	; 36
    5566:	cd bf       	out	0x3d, r28	; 61
    5568:	de bf       	out	0x3e, r29	; 62
    556a:	cf 91       	pop	r28
    556c:	df 91       	pop	r29
    556e:	1f 91       	pop	r17
    5570:	0f 91       	pop	r16
    5572:	ff 90       	pop	r15
    5574:	ef 90       	pop	r14
    5576:	df 90       	pop	r13
    5578:	cf 90       	pop	r12
    557a:	bf 90       	pop	r11
    557c:	af 90       	pop	r10
    557e:	9f 90       	pop	r9
    5580:	8f 90       	pop	r8
    5582:	7f 90       	pop	r7
    5584:	6f 90       	pop	r6
    5586:	5f 90       	pop	r5
    5588:	4f 90       	pop	r4
    558a:	3f 90       	pop	r3
    558c:	2f 90       	pop	r2
    558e:	08 95       	ret
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
    5590:	7c 01       	movw	r14, r24
    5592:	8d 01       	movw	r16, r26
    5594:	ee 0c       	add	r14, r14
    5596:	ff 1c       	adc	r15, r15
    5598:	00 1f       	adc	r16, r16
    559a:	11 1f       	adc	r17, r17
    559c:	e8 0e       	add	r14, r24
    559e:	f9 1e       	adc	r15, r25
    55a0:	0a 1f       	adc	r16, r26
    55a2:	1b 1f       	adc	r17, r27
    55a4:	08 94       	sec
    55a6:	e1 1c       	adc	r14, r1
    55a8:	f1 1c       	adc	r15, r1
    55aa:	01 1d       	adc	r16, r1
    55ac:	11 1d       	adc	r17, r1
    55ae:	16 95       	lsr	r17
    55b0:	07 95       	ror	r16
    55b2:	f7 94       	ror	r15
    55b4:	e7 94       	ror	r14
    55b6:	22 e0       	ldi	r18, 0x02	; 2
    55b8:	32 e0       	ldi	r19, 0x02	; 2
    55ba:	40 e0       	ldi	r20, 0x00	; 0
    55bc:	50 e0       	ldi	r21, 0x00	; 0
    55be:	e2 0e       	add	r14, r18
    55c0:	f3 1e       	adc	r15, r19
    55c2:	04 1f       	adc	r16, r20
    55c4:	15 1f       	adc	r17, r21
    55c6:	b9 e0       	ldi	r27, 0x09	; 9
    55c8:	16 95       	lsr	r17
    55ca:	07 95       	ror	r16
    55cc:	f7 94       	ror	r15
    55ce:	e7 94       	ror	r14
    55d0:	ba 95       	dec	r27
    55d2:	d1 f7       	brne	.-12     	; 0x55c8 <f_mkfs+0xa62>
		n_rsv = 1 + partition;
    55d4:	38 a1       	ldd	r19, Y+32	; 0x20
    55d6:	83 2f       	mov	r24, r19
    55d8:	90 e0       	ldi	r25, 0x00	; 0
    55da:	01 96       	adiw	r24, 0x01	; 1
    55dc:	9c 01       	movw	r18, r24
    55de:	44 27       	eor	r20, r20
    55e0:	37 fd       	sbrc	r19, 7
    55e2:	40 95       	com	r20
    55e4:	54 2f       	mov	r21, r20
    55e6:	2e 8b       	std	Y+22, r18	; 0x16
    55e8:	3f 8b       	std	Y+23, r19	; 0x17
    55ea:	48 8f       	std	Y+24, r20	; 0x18
    55ec:	59 8f       	std	Y+25, r21	; 0x19
    55ee:	80 e2       	ldi	r24, 0x20	; 32
    55f0:	90 e0       	ldi	r25, 0x00	; 0
    55f2:	a0 e0       	ldi	r26, 0x00	; 0
    55f4:	b0 e0       	ldi	r27, 0x00	; 0
    55f6:	8a 8b       	std	Y+18, r24	; 0x12
    55f8:	9b 8b       	std	Y+19, r25	; 0x13
    55fa:	ac 8b       	std	Y+20, r26	; 0x14
    55fc:	bd 8b       	std	Y+21, r27	; 0x15
    55fe:	91 e0       	ldi	r25, 0x01	; 1
    5600:	9f 8f       	std	Y+31, r25	; 0x1f
    5602:	fe cb       	rjmp	.-2052   	; 0x4e00 <f_mkfs+0x29a>

00005604 <f_gets>:
char* f_gets (
	char* buff,	/* Pointer to the string buffer to read */
	int len,	/* Size of string buffer */
	FIL* fil	/* Pointer to the file object */
)
{
    5604:	6f 92       	push	r6
    5606:	7f 92       	push	r7
    5608:	8f 92       	push	r8
    560a:	9f 92       	push	r9
    560c:	af 92       	push	r10
    560e:	bf 92       	push	r11
    5610:	cf 92       	push	r12
    5612:	df 92       	push	r13
    5614:	ef 92       	push	r14
    5616:	ff 92       	push	r15
    5618:	0f 93       	push	r16
    561a:	1f 93       	push	r17
    561c:	df 93       	push	r29
    561e:	cf 93       	push	r28
    5620:	0f 92       	push	r0
    5622:	0f 92       	push	r0
    5624:	cd b7       	in	r28, 0x3d	; 61
    5626:	de b7       	in	r29, 0x3e	; 62
    5628:	5c 01       	movw	r10, r24
    562a:	6b 01       	movw	r12, r22
    562c:	4a 01       	movw	r8, r20
    562e:	8c 01       	movw	r16, r24
    5630:	ee 24       	eor	r14, r14
    5632:	ff 24       	eor	r15, r15
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    5634:	08 94       	sec
    5636:	c1 08       	sbc	r12, r1
    5638:	d1 08       	sbc	r13, r1
		f_read(fil, p, 1, &rc);
    563a:	3e 01       	movw	r6, r28
    563c:	08 94       	sec
    563e:	61 1c       	adc	r6, r1
    5640:	71 1c       	adc	r7, r1
    5642:	13 c0       	rjmp	.+38     	; 0x566a <f_gets+0x66>
    5644:	c4 01       	movw	r24, r8
    5646:	b8 01       	movw	r22, r16
    5648:	41 e0       	ldi	r20, 0x01	; 1
    564a:	50 e0       	ldi	r21, 0x00	; 0
    564c:	93 01       	movw	r18, r6
    564e:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <f_read>
		if (rc != 1) break;			/* Break when no data to read */
    5652:	89 81       	ldd	r24, Y+1	; 0x01
    5654:	9a 81       	ldd	r25, Y+2	; 0x02
    5656:	01 97       	sbiw	r24, 0x01	; 1
    5658:	59 f4       	brne	.+22     	; 0x5670 <f_gets+0x6c>
#if _USE_STRFUNC >= 2
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
    565a:	08 94       	sec
    565c:	e1 1c       	adc	r14, r1
    565e:	f1 1c       	adc	r15, r1
		if (*p++ == '\n') break;	/* Break when reached end of line */
    5660:	f8 01       	movw	r30, r16
    5662:	81 91       	ld	r24, Z+
    5664:	8f 01       	movw	r16, r30
    5666:	8a 30       	cpi	r24, 0x0A	; 10
    5668:	19 f0       	breq	.+6      	; 0x5670 <f_gets+0x6c>
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    566a:	ec 14       	cp	r14, r12
    566c:	fd 04       	cpc	r15, r13
    566e:	54 f3       	brlt	.-44     	; 0x5644 <f_gets+0x40>
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
		if (*p++ == '\n') break;	/* Break when reached end of line */
	}
	*p = 0;
    5670:	f8 01       	movw	r30, r16
    5672:	10 82       	st	Z, r1
	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
    5674:	ef 28       	or	r14, r15
    5676:	11 f4       	brne	.+4      	; 0x567c <f_gets+0x78>
    5678:	aa 24       	eor	r10, r10
    567a:	bb 24       	eor	r11, r11
}
    567c:	c5 01       	movw	r24, r10
    567e:	0f 90       	pop	r0
    5680:	0f 90       	pop	r0
    5682:	cf 91       	pop	r28
    5684:	df 91       	pop	r29
    5686:	1f 91       	pop	r17
    5688:	0f 91       	pop	r16
    568a:	ff 90       	pop	r15
    568c:	ef 90       	pop	r14
    568e:	df 90       	pop	r13
    5690:	cf 90       	pop	r12
    5692:	bf 90       	pop	r11
    5694:	af 90       	pop	r10
    5696:	9f 90       	pop	r9
    5698:	8f 90       	pop	r8
    569a:	7f 90       	pop	r7
    569c:	6f 90       	pop	r6
    569e:	08 95       	ret

000056a0 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	int chr,	/* A character to be output */
	FIL* fil	/* Ponter to the file object */
)
{
    56a0:	0f 93       	push	r16
    56a2:	1f 93       	push	r17
    56a4:	df 93       	push	r29
    56a6:	cf 93       	push	r28
    56a8:	00 d0       	rcall	.+0      	; 0x56aa <f_putc+0xa>
    56aa:	cd b7       	in	r28, 0x3d	; 61
    56ac:	de b7       	in	r29, 0x3e	; 62
    56ae:	8c 01       	movw	r16, r24


#if _USE_STRFUNC >= 2
	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
#endif
	if (!fil) {	/* Special value may be used to switch the destination to any other device */
    56b0:	61 15       	cp	r22, r1
    56b2:	71 05       	cpc	r23, r1
    56b4:	91 f0       	breq	.+36     	; 0x56da <f_putc+0x3a>
	/*	put_console(chr);	*/
		return chr;
	}
	c = (char)chr;
    56b6:	89 83       	std	Y+1, r24	; 0x01
	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
    56b8:	cb 01       	movw	r24, r22
    56ba:	be 01       	movw	r22, r28
    56bc:	6f 5f       	subi	r22, 0xFF	; 255
    56be:	7f 4f       	sbci	r23, 0xFF	; 255
    56c0:	41 e0       	ldi	r20, 0x01	; 1
    56c2:	50 e0       	ldi	r21, 0x00	; 0
    56c4:	9e 01       	movw	r18, r28
    56c6:	2e 5f       	subi	r18, 0xFE	; 254
    56c8:	3f 4f       	sbci	r19, 0xFF	; 255
    56ca:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <f_write>
	return bw ? chr : EOF;		/* Return the result */
    56ce:	8a 81       	ldd	r24, Y+2	; 0x02
    56d0:	9b 81       	ldd	r25, Y+3	; 0x03
    56d2:	89 2b       	or	r24, r25
    56d4:	11 f4       	brne	.+4      	; 0x56da <f_putc+0x3a>
    56d6:	0f ef       	ldi	r16, 0xFF	; 255
    56d8:	1f ef       	ldi	r17, 0xFF	; 255
}
    56da:	c8 01       	movw	r24, r16
    56dc:	23 96       	adiw	r28, 0x03	; 3
    56de:	cd bf       	out	0x3d, r28	; 61
    56e0:	de bf       	out	0x3e, r29	; 62
    56e2:	cf 91       	pop	r28
    56e4:	df 91       	pop	r29
    56e6:	1f 91       	pop	r17
    56e8:	0f 91       	pop	r16
    56ea:	08 95       	ret

000056ec <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const char* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    56ec:	ef 92       	push	r14
    56ee:	ff 92       	push	r15
    56f0:	0f 93       	push	r16
    56f2:	1f 93       	push	r17
    56f4:	cf 93       	push	r28
    56f6:	df 93       	push	r29
    56f8:	8c 01       	movw	r16, r24
    56fa:	7b 01       	movw	r14, r22
    56fc:	c0 e0       	ldi	r28, 0x00	; 0
    56fe:	d0 e0       	ldi	r29, 0x00	; 0
    5700:	0d c0       	rjmp	.+26     	; 0x571c <f_puts+0x30>
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
    5702:	90 e0       	ldi	r25, 0x00	; 0
    5704:	b7 01       	movw	r22, r14
    5706:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <f_putc>
    570a:	8f 5f       	subi	r24, 0xFF	; 255
    570c:	9f 4f       	sbci	r25, 0xFF	; 255
    570e:	19 f4       	brne	.+6      	; 0x5716 <f_puts+0x2a>
    5710:	cf ef       	ldi	r28, 0xFF	; 255
    5712:	df ef       	ldi	r29, 0xFF	; 255
    5714:	07 c0       	rjmp	.+14     	; 0x5724 <f_puts+0x38>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    5716:	0f 5f       	subi	r16, 0xFF	; 255
    5718:	1f 4f       	sbci	r17, 0xFF	; 255
    571a:	21 96       	adiw	r28, 0x01	; 1
    571c:	f8 01       	movw	r30, r16
    571e:	80 81       	ld	r24, Z
    5720:	88 23       	and	r24, r24
    5722:	79 f7       	brne	.-34     	; 0x5702 <f_puts+0x16>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
    5724:	ce 01       	movw	r24, r28
    5726:	df 91       	pop	r29
    5728:	cf 91       	pop	r28
    572a:	1f 91       	pop	r17
    572c:	0f 91       	pop	r16
    572e:	ff 90       	pop	r15
    5730:	ef 90       	pop	r14
    5732:	08 95       	ret

00005734 <SD_Close>:

	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
}

void SD_Close(void){
	f_close(&Log_File);
    5734:	86 ef       	ldi	r24, 0xF6	; 246
    5736:	97 e4       	ldi	r25, 0x47	; 71
    5738:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <f_close>
}
    573c:	08 95       	ret

0000573e <SD_Inserted>:

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    573e:	80 91 68 06 	lds	r24, 0x0668
    5742:	90 e0       	ldi	r25, 0x00	; 0
    5744:	80 ff       	sbrs	r24, 0
    5746:	91 e0       	ldi	r25, 0x01	; 1
		return false;
	} else {
		return true;
	}
}
    5748:	89 2f       	mov	r24, r25
    574a:	08 95       	ret

0000574c <SD_WriteBuffer>:
    for (uint16_t i=0; i<strlen(string); i++){
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }
}

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    574c:	af 92       	push	r10
    574e:	bf 92       	push	r11
    5750:	cf 92       	push	r12
    5752:	df 92       	push	r13
    5754:	ef 92       	push	r14
    5756:	ff 92       	push	r15
    5758:	0f 93       	push	r16
    575a:	1f 93       	push	r17
    575c:	df 93       	push	r29
    575e:	cf 93       	push	r28
    5760:	0f 92       	push	r0
    5762:	0f 92       	push	r0
    5764:	cd b7       	in	r28, 0x3d	; 61
    5766:	de b7       	in	r29, 0x3e	; 62
    5768:	5c 01       	movw	r10, r24
    576a:	6b 01       	movw	r12, r22
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);
    576c:	86 ef       	ldi	r24, 0xF6	; 246
    576e:	97 e4       	ldi	r25, 0x47	; 71
    5770:	b5 01       	movw	r22, r10
    5772:	a6 01       	movw	r20, r12
    5774:	9e 01       	movw	r18, r28
    5776:	2f 5f       	subi	r18, 0xFF	; 255
    5778:	3f 4f       	sbci	r19, 0xFF	; 255
    577a:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <f_write>
    577e:	60 e0       	ldi	r22, 0x00	; 0
    5780:	70 e0       	ldi	r23, 0x00	; 0
    5782:	3b c0       	rjmp	.+118    	; 0x57fa <SD_WriteBuffer+0xae>

    for (uint16_t i=0; i<length; i++){
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    5784:	e0 90 77 4c 	lds	r14, 0x4C77
    5788:	f0 90 78 4c 	lds	r15, 0x4C78
    578c:	00 91 79 4c 	lds	r16, 0x4C79
    5790:	10 91 7a 4c 	lds	r17, 0x4C7A
    5794:	20 91 77 4c 	lds	r18, 0x4C77
    5798:	30 91 78 4c 	lds	r19, 0x4C78
    579c:	40 91 79 4c 	lds	r20, 0x4C79
    57a0:	50 91 7a 4c 	lds	r21, 0x4C7A
    57a4:	30 70       	andi	r19, 0x00	; 0
    57a6:	40 70       	andi	r20, 0x00	; 0
    57a8:	50 70       	andi	r21, 0x00	; 0
    57aa:	f5 01       	movw	r30, r10
    57ac:	e6 0f       	add	r30, r22
    57ae:	f7 1f       	adc	r31, r23
    57b0:	80 81       	ld	r24, Z
    57b2:	90 e0       	ldi	r25, 0x00	; 0
    57b4:	a0 e0       	ldi	r26, 0x00	; 0
    57b6:	b0 e0       	ldi	r27, 0x00	; 0
    57b8:	28 27       	eor	r18, r24
    57ba:	39 27       	eor	r19, r25
    57bc:	4a 27       	eor	r20, r26
    57be:	5b 27       	eor	r21, r27
    57c0:	22 0f       	add	r18, r18
    57c2:	33 1f       	adc	r19, r19
    57c4:	22 0f       	add	r18, r18
    57c6:	33 1f       	adc	r19, r19
    57c8:	20 59       	subi	r18, 0x90	; 144
    57ca:	39 4d       	sbci	r19, 0xD9	; 217
    57cc:	ef 2c       	mov	r14, r15
    57ce:	f0 2e       	mov	r15, r16
    57d0:	01 2f       	mov	r16, r17
    57d2:	11 27       	eor	r17, r17
    57d4:	f9 01       	movw	r30, r18
    57d6:	80 81       	ld	r24, Z
    57d8:	91 81       	ldd	r25, Z+1	; 0x01
    57da:	a2 81       	ldd	r26, Z+2	; 0x02
    57dc:	b3 81       	ldd	r27, Z+3	; 0x03
    57de:	e8 26       	eor	r14, r24
    57e0:	f9 26       	eor	r15, r25
    57e2:	0a 27       	eor	r16, r26
    57e4:	1b 27       	eor	r17, r27
    57e6:	e0 92 77 4c 	sts	0x4C77, r14
    57ea:	f0 92 78 4c 	sts	0x4C78, r15
    57ee:	00 93 79 4c 	sts	0x4C79, r16
    57f2:	10 93 7a 4c 	sts	0x4C7A, r17

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);

    for (uint16_t i=0; i<length; i++){
    57f6:	6f 5f       	subi	r22, 0xFF	; 255
    57f8:	7f 4f       	sbci	r23, 0xFF	; 255
    57fa:	6c 15       	cp	r22, r12
    57fc:	7d 05       	cpc	r23, r13
    57fe:	10 f2       	brcs	.-124    	; 0x5784 <SD_WriteBuffer+0x38>
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}
    5800:	0f 90       	pop	r0
    5802:	0f 90       	pop	r0
    5804:	cf 91       	pop	r28
    5806:	df 91       	pop	r29
    5808:	1f 91       	pop	r17
    580a:	0f 91       	pop	r16
    580c:	ff 90       	pop	r15
    580e:	ef 90       	pop	r14
    5810:	df 90       	pop	r13
    5812:	cf 90       	pop	r12
    5814:	bf 90       	pop	r11
    5816:	af 90       	pop	r10
    5818:	08 95       	ret

0000581a <SD_Write32>:
	tmp16[1] = (uint8_t)(var >> 8);
	SD_WriteBuffer(tmp16,2);
}

void SD_Write32(uint32_t var){
	tmp32[0] = (uint8_t)(var >> 0);
    581a:	60 93 bf 3d 	sts	0x3DBF, r22
	tmp32[1] = (uint8_t)(var >> 8);
    581e:	27 2f       	mov	r18, r23
    5820:	38 2f       	mov	r19, r24
    5822:	49 2f       	mov	r20, r25
    5824:	55 27       	eor	r21, r21
    5826:	20 93 c0 3d 	sts	0x3DC0, r18
	tmp32[2] = (uint8_t)(var >> 16);
    582a:	9c 01       	movw	r18, r24
    582c:	44 27       	eor	r20, r20
    582e:	55 27       	eor	r21, r21
    5830:	20 93 c1 3d 	sts	0x3DC1, r18
	tmp32[3] = (uint8_t)(var >> 24);
    5834:	69 2f       	mov	r22, r25
    5836:	77 27       	eor	r23, r23
    5838:	88 27       	eor	r24, r24
    583a:	99 27       	eor	r25, r25
    583c:	60 93 c2 3d 	sts	0x3DC2, r22
	SD_WriteBuffer(tmp32,4);
    5840:	8f eb       	ldi	r24, 0xBF	; 191
    5842:	9d e3       	ldi	r25, 0x3D	; 61
    5844:	64 e0       	ldi	r22, 0x04	; 4
    5846:	70 e0       	ldi	r23, 0x00	; 0
    5848:	0e 94 a6 2b 	call	0x574c	; 0x574c <SD_WriteBuffer>
}
    584c:	08 95       	ret

0000584e <SD_Write16>:
	tmp8[0] = (uint8_t)var;
	SD_WriteBuffer(tmp8,1);
}

void SD_Write16(uint16_t var){
	tmp16[0] = (uint8_t)(var >> 0);
    584e:	80 93 ca 51 	sts	0x51CA, r24
	tmp16[1] = (uint8_t)(var >> 8);
    5852:	90 93 cb 51 	sts	0x51CB, r25
	SD_WriteBuffer(tmp16,2);
    5856:	8a ec       	ldi	r24, 0xCA	; 202
    5858:	91 e5       	ldi	r25, 0x51	; 81
    585a:	62 e0       	ldi	r22, 0x02	; 2
    585c:	70 e0       	ldi	r23, 0x00	; 0
    585e:	0e 94 a6 2b 	call	0x574c	; 0x574c <SD_WriteBuffer>
}
    5862:	08 95       	ret

00005864 <SD_Write8>:
	}
}

void SD_Write8(uint8_t var){

	tmp8[0] = (uint8_t)var;
    5864:	80 93 22 47 	sts	0x4722, r24
	SD_WriteBuffer(tmp8,1);
    5868:	82 e2       	ldi	r24, 0x22	; 34
    586a:	97 e4       	ldi	r25, 0x47	; 71
    586c:	61 e0       	ldi	r22, 0x01	; 1
    586e:	70 e0       	ldi	r23, 0x00	; 0
    5870:	0e 94 a6 2b 	call	0x574c	; 0x574c <SD_WriteBuffer>
}
    5874:	08 95       	ret

00005876 <SD_ClearCRC>:
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    5876:	8f ef       	ldi	r24, 0xFF	; 255
    5878:	9f ef       	ldi	r25, 0xFF	; 255
    587a:	af ef       	ldi	r26, 0xFF	; 255
    587c:	bf ef       	ldi	r27, 0xFF	; 255
    587e:	80 93 77 4c 	sts	0x4C77, r24
    5882:	90 93 78 4c 	sts	0x4C78, r25
    5886:	a0 93 79 4c 	sts	0x4C79, r26
    588a:	b0 93 7a 4c 	sts	0x4C7A, r27
}
    588e:	08 95       	ret

00005890 <SD_WriteCRC>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
    5890:	60 91 77 4c 	lds	r22, 0x4C77
    5894:	70 91 78 4c 	lds	r23, 0x4C78
    5898:	80 91 79 4c 	lds	r24, 0x4C79
    589c:	90 91 7a 4c 	lds	r25, 0x4C7A
    58a0:	60 95       	com	r22
    58a2:	70 95       	com	r23
    58a4:	80 95       	com	r24
    58a6:	90 95       	com	r25
    58a8:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
}
    58ac:	08 95       	ret

000058ae <SD_Timer_Init>:
	// div  = 256
	// per  = 576
	// => 14745600/256/576 => 100 samples per second
	
	// Set period/TOP value
	SD_Timer.PER = 576;
    58ae:	e0 e0       	ldi	r30, 0x00	; 0
    58b0:	fa e0       	ldi	r31, 0x0A	; 10
    58b2:	80 e4       	ldi	r24, 0x40	; 64
    58b4:	92 e0       	ldi	r25, 0x02	; 2
    58b6:	86 a3       	std	Z+38, r24	; 0x26
    58b8:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	SD_Timer.CTRLA = (SD_Timer.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV256_gc;
    58ba:	80 81       	ld	r24, Z
    58bc:	80 7f       	andi	r24, 0xF0	; 240
    58be:	86 60       	ori	r24, 0x06	; 6
    58c0:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	SD_Timer.INTCTRLA = (SD_Timer.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    58c2:	86 81       	ldd	r24, Z+6	; 0x06
    58c4:	8c 7f       	andi	r24, 0xFC	; 252
    58c6:	82 60       	ori	r24, 0x02	; 2
    58c8:	86 83       	std	Z+6, r24	; 0x06
	
}
    58ca:	08 95       	ret

000058cc <SD_Init>:
0xbdbdf21c,0xcabac28a,0x53b39330,0x24b4a3a6,0xbad03605,0xcdd70693,0x54de5729,0x23d967bf,
0xb3667a2e,0xc4614ab8,0x5d681b02,0x2a6f2b94,0xb40bbe37,0xc30c8ea1,0x5a05df1b,0x2d02ef8d
};


uint8_t SD_Init(void){
    58cc:	1f 93       	push	r17
	uint8_t tmp;

	SD_CD_Port.DIRCLR = 1 << SD_CD;
    58ce:	81 e0       	ldi	r24, 0x01	; 1
    58d0:	e0 e6       	ldi	r30, 0x60	; 96
    58d2:	f6 e0       	ldi	r31, 0x06	; 6
    58d4:	82 83       	std	Z+2, r24	; 0x02
	SD_Timer_Init();
    58d6:	0e 94 57 2c 	call	0x58ae	; 0x58ae <SD_Timer_Init>
	tmp = disk_initialize(0);
    58da:	80 e0       	ldi	r24, 0x00	; 0
    58dc:	0e 94 f6 05 	call	0xbec	; 0xbec <disk_initialize>
    58e0:	18 2f       	mov	r17, r24
	f_mount(0, &fso0);
    58e2:	80 e0       	ldi	r24, 0x00	; 0
    58e4:	65 e9       	ldi	r22, 0x95	; 149
    58e6:	7d e2       	ldi	r23, 0x2D	; 45
    58e8:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <f_mount>
	f_mount(1, &fso1);
    58ec:	81 e0       	ldi	r24, 0x01	; 1
    58ee:	63 ec       	ldi	r22, 0xC3	; 195
    58f0:	7f e2       	ldi	r23, 0x2F	; 47
    58f2:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <f_mount>
	return tmp;
}
    58f6:	81 2f       	mov	r24, r17
    58f8:	1f 91       	pop	r17
    58fa:	08 95       	ret

000058fc <__vector_47>:
}


// Called every 10 ms (100 Hz)
ISR(SD_Timer_vect)
{
    58fc:	1f 92       	push	r1
    58fe:	0f 92       	push	r0
    5900:	0f b6       	in	r0, 0x3f	; 63
    5902:	0f 92       	push	r0
    5904:	0b b6       	in	r0, 0x3b	; 59
    5906:	0f 92       	push	r0
    5908:	11 24       	eor	r1, r1
    590a:	2f 93       	push	r18
    590c:	3f 93       	push	r19
    590e:	4f 93       	push	r20
    5910:	5f 93       	push	r21
    5912:	6f 93       	push	r22
    5914:	7f 93       	push	r23
    5916:	8f 93       	push	r24
    5918:	9f 93       	push	r25
    591a:	af 93       	push	r26
    591c:	bf 93       	push	r27
    591e:	ef 93       	push	r30
    5920:	ff 93       	push	r31
	disk_timerproc();
    5922:	0e 94 8e 09 	call	0x131c	; 0x131c <disk_timerproc>
}
    5926:	ff 91       	pop	r31
    5928:	ef 91       	pop	r30
    592a:	bf 91       	pop	r27
    592c:	af 91       	pop	r26
    592e:	9f 91       	pop	r25
    5930:	8f 91       	pop	r24
    5932:	7f 91       	pop	r23
    5934:	6f 91       	pop	r22
    5936:	5f 91       	pop	r21
    5938:	4f 91       	pop	r20
    593a:	3f 91       	pop	r19
    593c:	2f 91       	pop	r18
    593e:	0f 90       	pop	r0
    5940:	0b be       	out	0x3b, r0	; 59
    5942:	0f 90       	pop	r0
    5944:	0f be       	out	0x3f, r0	; 63
    5946:	0f 90       	pop	r0
    5948:	1f 90       	pop	r1
    594a:	18 95       	reti

0000594c <display_setBacklight>:
		display_clearPage(7);
	}
}

void display_setBacklight(bool state){
	if(state){
    594c:	88 23       	and	r24, r24
    594e:	29 f0       	breq	.+10     	; 0x595a <display_setBacklight+0xe>
		Backlight_Port.OUTSET = 1 << Backlight_Pin;
    5950:	81 e0       	ldi	r24, 0x01	; 1
    5952:	e0 ea       	ldi	r30, 0xA0	; 160
    5954:	f6 e0       	ldi	r31, 0x06	; 6
    5956:	85 83       	std	Z+5, r24	; 0x05
    5958:	08 95       	ret
	} else {
		Backlight_Port.OUTCLR = 1 << Backlight_Pin;
    595a:	81 e0       	ldi	r24, 0x01	; 1
    595c:	e0 ea       	ldi	r30, 0xA0	; 160
    595e:	f6 e0       	ldi	r31, 0x06	; 6
    5960:	86 83       	std	Z+6, r24	; 0x06
    5962:	08 95       	ret

00005964 <display_toggleBacklight>:
	}
}

void display_toggleBacklight(void){
	Backlight_Port.OUTTGL = 1 << Backlight_Pin;
    5964:	81 e0       	ldi	r24, 0x01	; 1
    5966:	e0 ea       	ldi	r30, 0xA0	; 160
    5968:	f6 e0       	ldi	r31, 0x06	; 6
    596a:	87 83       	std	Z+7, r24	; 0x07
	
}
    596c:	08 95       	ret

0000596e <display_sendCommand>:

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    596e:	90 e8       	ldi	r25, 0x80	; 128
    5970:	e0 ea       	ldi	r30, 0xA0	; 160
    5972:	f6 e0       	ldi	r31, 0x06	; 6
    5974:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    5976:	e0 ec       	ldi	r30, 0xC0	; 192
    5978:	f9 e0       	ldi	r31, 0x09	; 9
    597a:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    597c:	80 91 c2 09 	lds	r24, 0x09C2
    5980:	87 ff       	sbrs	r24, 7
    5982:	fc cf       	rjmp	.-8      	; 0x597c <display_sendCommand+0xe>
}
    5984:	08 95       	ret

00005986 <display_sendData>:

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5986:	90 e8       	ldi	r25, 0x80	; 128
    5988:	e0 ea       	ldi	r30, 0xA0	; 160
    598a:	f6 e0       	ldi	r31, 0x06	; 6
    598c:	95 83       	std	Z+5, r25	; 0x05
	Display_SPI.DATA = dataByte;
    598e:	e0 ec       	ldi	r30, 0xC0	; 192
    5990:	f9 e0       	ldi	r31, 0x09	; 9
    5992:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5994:	80 91 c2 09 	lds	r24, 0x09C2
    5998:	87 ff       	sbrs	r24, 7
    599a:	fc cf       	rjmp	.-8      	; 0x5994 <display_sendData+0xe>
}
    599c:	08 95       	ret

0000599e <display_setCursor>:



void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
    599e:	80 6b       	ori	r24, 0xB0	; 176
	
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    59a0:	90 e8       	ldi	r25, 0x80	; 128
    59a2:	e0 ea       	ldi	r30, 0xA0	; 160
    59a4:	f6 e0       	ldi	r31, 0x06	; 6
    59a6:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    59a8:	e0 ec       	ldi	r30, 0xC0	; 192
    59aa:	f9 e0       	ldi	r31, 0x09	; 9
    59ac:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    59ae:	80 91 c2 09 	lds	r24, 0x09C2
    59b2:	87 ff       	sbrs	r24, 7
    59b4:	fc cf       	rjmp	.-8      	; 0x59ae <display_setCursor+0x10>

void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
    59b6:	96 2f       	mov	r25, r22
    59b8:	9f 70       	andi	r25, 0x0F	; 15
	
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    59ba:	80 e8       	ldi	r24, 0x80	; 128
    59bc:	e0 ea       	ldi	r30, 0xA0	; 160
    59be:	f6 e0       	ldi	r31, 0x06	; 6
    59c0:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    59c2:	e0 ec       	ldi	r30, 0xC0	; 192
    59c4:	f9 e0       	ldi	r31, 0x09	; 9
    59c6:	93 83       	std	Z+3, r25	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    59c8:	80 91 c2 09 	lds	r24, 0x09C2
    59cc:	87 ff       	sbrs	r24, 7
    59ce:	fc cf       	rjmp	.-8      	; 0x59c8 <display_setCursor+0x2a>
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
    59d0:	62 95       	swap	r22
    59d2:	6f 70       	andi	r22, 0x0F	; 15
    59d4:	60 61       	ori	r22, 0x10	; 16
	
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    59d6:	80 e8       	ldi	r24, 0x80	; 128
    59d8:	e0 ea       	ldi	r30, 0xA0	; 160
    59da:	f6 e0       	ldi	r31, 0x06	; 6
    59dc:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    59de:	e0 ec       	ldi	r30, 0xC0	; 192
    59e0:	f9 e0       	ldi	r31, 0x09	; 9
    59e2:	63 83       	std	Z+3, r22	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    59e4:	80 91 c2 09 	lds	r24, 0x09C2
    59e8:	87 ff       	sbrs	r24, 7
    59ea:	fc cf       	rjmp	.-8      	; 0x59e4 <display_setCursor+0x46>
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
}
    59ec:	08 95       	ret

000059ee <display_clearPage>:



void display_clearPage(uint8_t page) {
    59ee:	df 92       	push	r13
    59f0:	ef 92       	push	r14
    59f2:	ff 92       	push	r15
    59f4:	0f 93       	push	r16
    59f6:	1f 93       	push	r17
    59f8:	cf 93       	push	r28
    59fa:	df 93       	push	r29
    59fc:	08 2f       	mov	r16, r24
    59fe:	10 e0       	ldi	r17, 0x00	; 0
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5a00:	40 ea       	ldi	r20, 0xA0	; 160
    5a02:	e4 2e       	mov	r14, r20
    5a04:	46 e0       	ldi	r20, 0x06	; 6
    5a06:	f4 2e       	mov	r15, r20
    5a08:	30 e8       	ldi	r19, 0x80	; 128
    5a0a:	d3 2e       	mov	r13, r19
	Display_SPI.DATA = dataByte;
    5a0c:	c0 ec       	ldi	r28, 0xC0	; 192
    5a0e:	d9 e0       	ldi	r29, 0x09	; 9

void display_clearPage(uint8_t page) {
	uint8_t j;
	for (j = 0; j < DISPLAY_COLS; j++) {
	    //displayBuffer[page][j] = 0x00;
	    display_setCursor(page,j);
    5a10:	80 2f       	mov	r24, r16
    5a12:	61 2f       	mov	r22, r17
    5a14:	0e 94 cf 2c 	call	0x599e	; 0x599e <display_setCursor>
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5a18:	f7 01       	movw	r30, r14
    5a1a:	d5 82       	std	Z+5, r13	; 0x05
	Display_SPI.DATA = dataByte;
    5a1c:	1b 82       	std	Y+3, r1	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5a1e:	80 91 c2 09 	lds	r24, 0x09C2
    5a22:	87 ff       	sbrs	r24, 7
    5a24:	fc cf       	rjmp	.-8      	; 0x5a1e <display_clearPage+0x30>



void display_clearPage(uint8_t page) {
	uint8_t j;
	for (j = 0; j < DISPLAY_COLS; j++) {
    5a26:	1f 5f       	subi	r17, 0xFF	; 255
    5a28:	16 36       	cpi	r17, 0x66	; 102
    5a2a:	91 f7       	brne	.-28     	; 0x5a10 <display_clearPage+0x22>
	    //displayBuffer[page][j] = 0x00;
	    display_setCursor(page,j);
 		display_sendData(0x00);
	}
}
    5a2c:	df 91       	pop	r29
    5a2e:	cf 91       	pop	r28
    5a30:	1f 91       	pop	r17
    5a32:	0f 91       	pop	r16
    5a34:	ff 90       	pop	r15
    5a36:	ef 90       	pop	r14
    5a38:	df 90       	pop	r13
    5a3a:	08 95       	ret

00005a3c <display_clearScreen>:


void display_clearScreen() {
    5a3c:	df 92       	push	r13
    5a3e:	ef 92       	push	r14
    5a40:	ff 92       	push	r15
    5a42:	0f 93       	push	r16
    5a44:	1f 93       	push	r17
    5a46:	cf 93       	push	r28
    5a48:	df 93       	push	r29
    5a4a:	00 e0       	ldi	r16, 0x00	; 0
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5a4c:	60 ea       	ldi	r22, 0xA0	; 160
    5a4e:	e6 2e       	mov	r14, r22
    5a50:	66 e0       	ldi	r22, 0x06	; 6
    5a52:	f6 2e       	mov	r15, r22
    5a54:	50 e8       	ldi	r21, 0x80	; 128
    5a56:	d5 2e       	mov	r13, r21
	Display_SPI.DATA = dataByte;
    5a58:	c0 ec       	ldi	r28, 0xC0	; 192
    5a5a:	d9 e0       	ldi	r29, 0x09	; 9
    5a5c:	11 c0       	rjmp	.+34     	; 0x5a80 <display_clearScreen+0x44>

void display_clearScreen() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
		    display_setCursor(i,j);
    5a5e:	80 2f       	mov	r24, r16
    5a60:	61 2f       	mov	r22, r17
    5a62:	0e 94 cf 2c 	call	0x599e	; 0x599e <display_setCursor>
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5a66:	f7 01       	movw	r30, r14
    5a68:	d5 82       	std	Z+5, r13	; 0x05
	Display_SPI.DATA = dataByte;
    5a6a:	1b 82       	std	Y+3, r1	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5a6c:	80 91 c2 09 	lds	r24, 0x09C2
    5a70:	87 ff       	sbrs	r24, 7
    5a72:	fc cf       	rjmp	.-8      	; 0x5a6c <display_clearScreen+0x30>


void display_clearScreen() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
    5a74:	1f 5f       	subi	r17, 0xFF	; 255
    5a76:	16 36       	cpi	r17, 0x66	; 102
    5a78:	91 f7       	brne	.-28     	; 0x5a5e <display_clearScreen+0x22>
}


void display_clearScreen() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
    5a7a:	0f 5f       	subi	r16, 0xFF	; 255
    5a7c:	08 30       	cpi	r16, 0x08	; 8
    5a7e:	11 f0       	breq	.+4      	; 0x5a84 <display_clearScreen+0x48>
    5a80:	10 e0       	ldi	r17, 0x00	; 0
    5a82:	ed cf       	rjmp	.-38     	; 0x5a5e <display_clearScreen+0x22>
		for (j = 0; j < DISPLAY_COLS; j++) {
		    display_setCursor(i,j);
 			display_sendData(0);
		}
	}
}
    5a84:	df 91       	pop	r29
    5a86:	cf 91       	pop	r28
    5a88:	1f 91       	pop	r17
    5a8a:	0f 91       	pop	r16
    5a8c:	ff 90       	pop	r15
    5a8e:	ef 90       	pop	r14
    5a90:	df 90       	pop	r13
    5a92:	08 95       	ret

00005a94 <display_init>:

#define DISPLAY_ROWS		64
#define DISPLAY_COLS		102
#define DISPLAY_PAGES		(DISPLAY_ROWS/8)

void display_init() {
    5a94:	cf 93       	push	r28
    5a96:	df 93       	push	r29
	//Set SS to wired and pull up
	Display_Port.Display_SS_CTRL = PORT_OPC_WIREDANDPULL_gc;
    5a98:	a0 e6       	ldi	r26, 0x60	; 96
    5a9a:	b6 e0       	ldi	r27, 0x06	; 6
    5a9c:	88 e3       	ldi	r24, 0x38	; 56
    5a9e:	54 96       	adiw	r26, 0x14	; 20
    5aa0:	8c 93       	st	X, r24
    5aa2:	54 97       	sbiw	r26, 0x14	; 20
	Display_CDPort.Display_CD_CTRL = PORT_OPC_WIREDANDPULL_gc;
    5aa4:	e0 ea       	ldi	r30, 0xA0	; 160
    5aa6:	f6 e0       	ldi	r31, 0x06	; 6
    5aa8:	87 8b       	std	Z+23, r24	; 0x17
	Display_Port.OUTSET = Display_SS_bm;
    5aaa:	30 e1       	ldi	r19, 0x10	; 16
    5aac:	15 96       	adiw	r26, 0x05	; 5
    5aae:	3c 93       	st	X, r19
    5ab0:	15 97       	sbiw	r26, 0x05	; 5
	
	Display_ResetPort.DIRSET = Display_Reset_bm;
    5ab2:	20 e4       	ldi	r18, 0x40	; 64
    5ab4:	21 83       	std	Z+1, r18	; 0x01

	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    5ab6:	25 83       	std	Z+5, r18	; 0x05
    5ab8:	80 e0       	ldi	r24, 0x00	; 0
    5aba:	90 e9       	ldi	r25, 0x90	; 144
    5abc:	ec 01       	movw	r28, r24
    5abe:	21 97       	sbiw	r28, 0x01	; 1
    5ac0:	f1 f7       	brne	.-4      	; 0x5abe <display_init+0x2a>

	_delay_ms(10);
	Display_ResetPort.OUTCLR = Display_Reset_bm; 	// reset
    5ac2:	26 83       	std	Z+6, r18	; 0x06
    5ac4:	ec 01       	movw	r28, r24
    5ac6:	21 97       	sbiw	r28, 0x01	; 1
    5ac8:	f1 f7       	brne	.-4      	; 0x5ac6 <display_init+0x32>

	_delay_ms(10);
	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    5aca:	25 83       	std	Z+5, r18	; 0x05
    5acc:	01 97       	sbiw	r24, 0x01	; 1
    5ace:	f1 f7       	brne	.-4      	; 0x5acc <display_init+0x38>

	_delay_ms(10);
	//Double clock, enable SPI, MSB sent first, set as master, mode 3, clk/16
	Display_SPI.CTRL = SPI_CLK2X_bm 
    5ad0:	8d ed       	ldi	r24, 0xDD	; 221
    5ad2:	80 93 c0 09 	sts	0x09C0, r24
				| SPI_ENABLE_bm 
				| SPI_MASTER_bm 
				| SPI_MODE_3_gc 
				| SPI_PRESCALER_DIV16_gc; //Can be 4, 16, 64 or 128

	Display_Port.DIRSET = Display_MOSI_bm | Display_SCK_bm | Display_SS_bm;
    5ad6:	80 eb       	ldi	r24, 0xB0	; 176
    5ad8:	11 96       	adiw	r26, 0x01	; 1
    5ada:	8c 93       	st	X, r24
    5adc:	11 97       	sbiw	r26, 0x01	; 1
	Display_CDPort.DIRSET = Display_CD_bm;
    5ade:	80 e8       	ldi	r24, 0x80	; 128
    5ae0:	81 83       	std	Z+1, r24	; 0x01

	//Enable display (write a 0 to SS)
	Display_Port.OUTCLR = Display_SS_bm;
    5ae2:	16 96       	adiw	r26, 0x06	; 6
    5ae4:	3c 93       	st	X, r19
	
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5ae6:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5ae8:	82 ee       	ldi	r24, 0xE2	; 226
    5aea:	e0 ec       	ldi	r30, 0xC0	; 192
    5aec:	f9 e0       	ldi	r31, 0x09	; 9
    5aee:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5af0:	80 91 c2 09 	lds	r24, 0x09C2
    5af4:	87 ff       	sbrs	r24, 7
    5af6:	fc cf       	rjmp	.-8      	; 0x5af0 <display_init+0x5c>
	
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5af8:	80 e8       	ldi	r24, 0x80	; 128
    5afa:	e0 ea       	ldi	r30, 0xA0	; 160
    5afc:	f6 e0       	ldi	r31, 0x06	; 6
    5afe:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b00:	80 e4       	ldi	r24, 0x40	; 64
    5b02:	e0 ec       	ldi	r30, 0xC0	; 192
    5b04:	f9 e0       	ldi	r31, 0x09	; 9
    5b06:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b08:	80 91 c2 09 	lds	r24, 0x09C2
    5b0c:	87 ff       	sbrs	r24, 7
    5b0e:	fc cf       	rjmp	.-8      	; 0x5b08 <display_init+0x74>
	
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b10:	80 e8       	ldi	r24, 0x80	; 128
    5b12:	e0 ea       	ldi	r30, 0xA0	; 160
    5b14:	f6 e0       	ldi	r31, 0x06	; 6
    5b16:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b18:	81 ea       	ldi	r24, 0xA1	; 161
    5b1a:	e0 ec       	ldi	r30, 0xC0	; 192
    5b1c:	f9 e0       	ldi	r31, 0x09	; 9
    5b1e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b20:	80 91 c2 09 	lds	r24, 0x09C2
    5b24:	87 ff       	sbrs	r24, 7
    5b26:	fc cf       	rjmp	.-8      	; 0x5b20 <display_init+0x8c>
	
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b28:	80 e8       	ldi	r24, 0x80	; 128
    5b2a:	e0 ea       	ldi	r30, 0xA0	; 160
    5b2c:	f6 e0       	ldi	r31, 0x06	; 6
    5b2e:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b30:	80 ec       	ldi	r24, 0xC0	; 192
    5b32:	e0 ec       	ldi	r30, 0xC0	; 192
    5b34:	f9 e0       	ldi	r31, 0x09	; 9
    5b36:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b38:	80 91 c2 09 	lds	r24, 0x09C2
    5b3c:	87 ff       	sbrs	r24, 7
    5b3e:	fc cf       	rjmp	.-8      	; 0x5b38 <display_init+0xa4>
	
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b40:	80 e8       	ldi	r24, 0x80	; 128
    5b42:	e0 ea       	ldi	r30, 0xA0	; 160
    5b44:	f6 e0       	ldi	r31, 0x06	; 6
    5b46:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b48:	84 ea       	ldi	r24, 0xA4	; 164
    5b4a:	e0 ec       	ldi	r30, 0xC0	; 192
    5b4c:	f9 e0       	ldi	r31, 0x09	; 9
    5b4e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b50:	80 91 c2 09 	lds	r24, 0x09C2
    5b54:	87 ff       	sbrs	r24, 7
    5b56:	fc cf       	rjmp	.-8      	; 0x5b50 <display_init+0xbc>
	
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b58:	80 e8       	ldi	r24, 0x80	; 128
    5b5a:	e0 ea       	ldi	r30, 0xA0	; 160
    5b5c:	f6 e0       	ldi	r31, 0x06	; 6
    5b5e:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b60:	86 ea       	ldi	r24, 0xA6	; 166
    5b62:	e0 ec       	ldi	r30, 0xC0	; 192
    5b64:	f9 e0       	ldi	r31, 0x09	; 9
    5b66:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b68:	80 91 c2 09 	lds	r24, 0x09C2
    5b6c:	87 ff       	sbrs	r24, 7
    5b6e:	fc cf       	rjmp	.-8      	; 0x5b68 <display_init+0xd4>
	
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b70:	80 e8       	ldi	r24, 0x80	; 128
    5b72:	e0 ea       	ldi	r30, 0xA0	; 160
    5b74:	f6 e0       	ldi	r31, 0x06	; 6
    5b76:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b78:	8f e2       	ldi	r24, 0x2F	; 47
    5b7a:	e0 ec       	ldi	r30, 0xC0	; 192
    5b7c:	f9 e0       	ldi	r31, 0x09	; 9
    5b7e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b80:	80 91 c2 09 	lds	r24, 0x09C2
    5b84:	87 ff       	sbrs	r24, 7
    5b86:	fc cf       	rjmp	.-8      	; 0x5b80 <display_init+0xec>
	
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5b88:	80 e8       	ldi	r24, 0x80	; 128
    5b8a:	e0 ea       	ldi	r30, 0xA0	; 160
    5b8c:	f6 e0       	ldi	r31, 0x06	; 6
    5b8e:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5b90:	87 e2       	ldi	r24, 0x27	; 39
    5b92:	e0 ec       	ldi	r30, 0xC0	; 192
    5b94:	f9 e0       	ldi	r31, 0x09	; 9
    5b96:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5b98:	80 91 c2 09 	lds	r24, 0x09C2
    5b9c:	87 ff       	sbrs	r24, 7
    5b9e:	fc cf       	rjmp	.-8      	; 0x5b98 <display_init+0x104>
	
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5ba0:	80 e8       	ldi	r24, 0x80	; 128
    5ba2:	e0 ea       	ldi	r30, 0xA0	; 160
    5ba4:	f6 e0       	ldi	r31, 0x06	; 6
    5ba6:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5ba8:	8a ef       	ldi	r24, 0xFA	; 250
    5baa:	e0 ec       	ldi	r30, 0xC0	; 192
    5bac:	f9 e0       	ldi	r31, 0x09	; 9
    5bae:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5bb0:	80 91 c2 09 	lds	r24, 0x09C2
    5bb4:	87 ff       	sbrs	r24, 7
    5bb6:	fc cf       	rjmp	.-8      	; 0x5bb0 <display_init+0x11c>
	
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5bb8:	80 e8       	ldi	r24, 0x80	; 128
    5bba:	e0 ea       	ldi	r30, 0xA0	; 160
    5bbc:	f6 e0       	ldi	r31, 0x06	; 6
    5bbe:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5bc0:	80 e9       	ldi	r24, 0x90	; 144
    5bc2:	e0 ec       	ldi	r30, 0xC0	; 192
    5bc4:	f9 e0       	ldi	r31, 0x09	; 9
    5bc6:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5bc8:	80 91 c2 09 	lds	r24, 0x09C2
    5bcc:	87 ff       	sbrs	r24, 7
    5bce:	fc cf       	rjmp	.-8      	; 0x5bc8 <display_init+0x134>
	
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5bd0:	80 e8       	ldi	r24, 0x80	; 128
    5bd2:	e0 ea       	ldi	r30, 0xA0	; 160
    5bd4:	f6 e0       	ldi	r31, 0x06	; 6
    5bd6:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5bd8:	80 e4       	ldi	r24, 0x40	; 64
    5bda:	e0 ec       	ldi	r30, 0xC0	; 192
    5bdc:	f9 e0       	ldi	r31, 0x09	; 9
    5bde:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5be0:	80 91 c2 09 	lds	r24, 0x09C2
    5be4:	87 ff       	sbrs	r24, 7
    5be6:	fc cf       	rjmp	.-8      	; 0x5be0 <display_init+0x14c>
    5be8:	8c ed       	ldi	r24, 0xDC	; 220
    5bea:	95 e0       	ldi	r25, 0x05	; 5
    5bec:	20 e7       	ldi	r18, 0x70	; 112
    5bee:	31 e0       	ldi	r19, 0x01	; 1
    5bf0:	f9 01       	movw	r30, r18
    5bf2:	31 97       	sbiw	r30, 0x01	; 1
    5bf4:	f1 f7       	brne	.-4      	; 0x5bf2 <display_init+0x15e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bf6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bf8:	d9 f7       	brne	.-10     	; 0x5bf0 <display_init+0x15c>
	
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5bfa:	80 e8       	ldi	r24, 0x80	; 128
    5bfc:	e0 ea       	ldi	r30, 0xA0	; 160
    5bfe:	f6 e0       	ldi	r31, 0x06	; 6
    5c00:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c02:	82 ea       	ldi	r24, 0xA2	; 162
    5c04:	e0 ec       	ldi	r30, 0xC0	; 192
    5c06:	f9 e0       	ldi	r31, 0x09	; 9
    5c08:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c0a:	80 91 c2 09 	lds	r24, 0x09C2
    5c0e:	87 ff       	sbrs	r24, 7
    5c10:	fc cf       	rjmp	.-8      	; 0x5c0a <display_init+0x176>
	
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c12:	80 e8       	ldi	r24, 0x80	; 128
    5c14:	e0 ea       	ldi	r30, 0xA0	; 160
    5c16:	f6 e0       	ldi	r31, 0x06	; 6
    5c18:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c1a:	81 e8       	ldi	r24, 0x81	; 129
    5c1c:	e0 ec       	ldi	r30, 0xC0	; 192
    5c1e:	f9 e0       	ldi	r31, 0x09	; 9
    5c20:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c22:	80 91 c2 09 	lds	r24, 0x09C2
    5c26:	87 ff       	sbrs	r24, 7
    5c28:	fc cf       	rjmp	.-8      	; 0x5c22 <display_init+0x18e>
	
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c2a:	80 e8       	ldi	r24, 0x80	; 128
    5c2c:	e0 ea       	ldi	r30, 0xA0	; 160
    5c2e:	f6 e0       	ldi	r31, 0x06	; 6
    5c30:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c32:	88 e0       	ldi	r24, 0x08	; 8
    5c34:	e0 ec       	ldi	r30, 0xC0	; 192
    5c36:	f9 e0       	ldi	r31, 0x09	; 9
    5c38:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c3a:	80 91 c2 09 	lds	r24, 0x09C2
    5c3e:	87 ff       	sbrs	r24, 7
    5c40:	fc cf       	rjmp	.-8      	; 0x5c3a <display_init+0x1a6>
	
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c42:	80 e8       	ldi	r24, 0x80	; 128
    5c44:	e0 ea       	ldi	r30, 0xA0	; 160
    5c46:	f6 e0       	ldi	r31, 0x06	; 6
    5c48:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c4a:	8f ea       	ldi	r24, 0xAF	; 175
    5c4c:	e0 ec       	ldi	r30, 0xC0	; 192
    5c4e:	f9 e0       	ldi	r31, 0x09	; 9
    5c50:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c52:	80 91 c2 09 	lds	r24, 0x09C2
    5c56:	87 ff       	sbrs	r24, 7
    5c58:	fc cf       	rjmp	.-8      	; 0x5c52 <display_init+0x1be>
	display_sendCommand(0x81);	//	set electronic volume
	display_sendCommand(0x08);	//	PM = 8

	display_sendCommand(0xAF);	//	enable display

	display_clearScreen();
    5c5a:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <display_clearScreen>
	
	Backlight_Port.DIRSET = 1 << Backlight_Pin;
    5c5e:	81 e0       	ldi	r24, 0x01	; 1
    5c60:	e0 ea       	ldi	r30, 0xA0	; 160
    5c62:	f6 e0       	ldi	r31, 0x06	; 6
    5c64:	81 83       	std	Z+1, r24	; 0x01

}
    5c66:	df 91       	pop	r29
    5c68:	cf 91       	pop	r28
    5c6a:	08 95       	ret

00005c6c <display_putString>:
		}
	}
}


void display_putString(char* text, uint8_t page, uint8_t column, uint8_t* fontTable) {
    5c6c:	2f 92       	push	r2
    5c6e:	3f 92       	push	r3
    5c70:	4f 92       	push	r4
    5c72:	5f 92       	push	r5
    5c74:	6f 92       	push	r6
    5c76:	7f 92       	push	r7
    5c78:	8f 92       	push	r8
    5c7a:	9f 92       	push	r9
    5c7c:	af 92       	push	r10
    5c7e:	bf 92       	push	r11
    5c80:	cf 92       	push	r12
    5c82:	df 92       	push	r13
    5c84:	ef 92       	push	r14
    5c86:	ff 92       	push	r15
    5c88:	0f 93       	push	r16
    5c8a:	1f 93       	push	r17
    5c8c:	df 93       	push	r29
    5c8e:	cf 93       	push	r28
    5c90:	cd b7       	in	r28, 0x3d	; 61
    5c92:	de b7       	in	r29, 0x3e	; 62
    5c94:	2b 97       	sbiw	r28, 0x0b	; 11
    5c96:	cd bf       	out	0x3d, r28	; 61
    5c98:	de bf       	out	0x3e, r29	; 62
    5c9a:	8f 83       	std	Y+7, r24	; 0x07
    5c9c:	98 87       	std	Y+8, r25	; 0x08
    5c9e:	46 2e       	mov	r4, r22
    5ca0:	49 87       	std	Y+9, r20	; 0x09
    5ca2:	69 01       	movw	r12, r18
 uint8_t i,j,k, offset;
 uint8_t fontHeight = fontTable[FONT_HEIGHT];
    5ca4:	d9 01       	movw	r26, r18
    5ca6:	13 96       	adiw	r26, 0x03	; 3
    5ca8:	2c 90       	ld	r2, X
    5caa:	13 97       	sbiw	r26, 0x03	; 3
 uint8_t firstChar = fontTable[FONT_FIRST_CHAR];
    5cac:	14 96       	adiw	r26, 0x04	; 4
    5cae:	bc 91       	ld	r27, X
    5cb0:	ba 83       	std	Y+2, r27	; 0x02
 uint8_t charCount = fontTable[FONT_CHAR_COUNT];
    5cb2:	f9 01       	movw	r30, r18
    5cb4:	25 81       	ldd	r18, Z+5	; 0x05
 uint8_t bytes = (fontHeight+7)/8;
    5cb6:	82 2c       	mov	r8, r2
    5cb8:	99 24       	eor	r9, r9
    5cba:	c4 01       	movw	r24, r8
    5cbc:	07 96       	adiw	r24, 0x07	; 7
    5cbe:	f3 e0       	ldi	r31, 0x03	; 3
    5cc0:	95 95       	asr	r25
    5cc2:	87 95       	ror	r24
    5cc4:	fa 95       	dec	r31
    5cc6:	e1 f7       	brne	.-8      	; 0x5cc0 <display_putString+0x54>
    5cc8:	89 83       	std	Y+1, r24	; 0x01
    5cca:	33 24       	eor	r3, r3
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    5ccc:	62 2e       	mov	r6, r18
    5cce:	77 24       	eor	r7, r7
    5cd0:	86 e0       	ldi	r24, 0x06	; 6
    5cd2:	90 e0       	ldi	r25, 0x00	; 0
    5cd4:	68 0e       	add	r6, r24
    5cd6:	79 1e       	adc	r7, r25
    5cd8:	7f c0       	rjmp	.+254    	; 0x5dd8 <display_putString+0x16c>
 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
 		ch = text[j] - firstChar;
    5cda:	5e 2f       	mov	r21, r30
    5cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    5cde:	59 1b       	sub	r21, r25

 
  		charIndex = 0;
 		if (fontTable[FONT_LENGTH] == 0) {
    5ce0:	d6 01       	movw	r26, r12
    5ce2:	8c 91       	ld	r24, X
    5ce4:	88 23       	and	r24, r24
    5ce6:	39 f4       	brne	.+14     	; 0x5cf6 <display_putString+0x8a>
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
    5ce8:	12 96       	adiw	r26, 0x02	; 2
    5cea:	bc 90       	ld	r11, X
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
    5cec:	5b 9d       	mul	r21, r11
    5cee:	f0 01       	movw	r30, r0
    5cf0:	11 24       	eor	r1, r1
    5cf2:	36 96       	adiw	r30, 0x06	; 6
    5cf4:	21 c0       	rjmp	.+66     	; 0x5d38 <display_putString+0xcc>
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
    5cf6:	f6 01       	movw	r30, r12
    5cf8:	e5 0f       	add	r30, r21
    5cfa:	f1 1d       	adc	r31, r1
    5cfc:	b6 80       	ldd	r11, Z+6	; 0x06
    5cfe:	f6 01       	movw	r30, r12
    5d00:	40 e0       	ldi	r20, 0x00	; 0
    5d02:	20 e0       	ldi	r18, 0x00	; 0
    5d04:	30 e0       	ldi	r19, 0x00	; 0
    5d06:	08 c0       	rjmp	.+16     	; 0x5d18 <display_putString+0xac>
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
    5d08:	85 81       	ldd	r24, Z+5	; 0x05
    5d0a:	b9 81       	ldd	r27, Y+1	; 0x01
    5d0c:	b8 9f       	mul	r27, r24
    5d0e:	c0 01       	movw	r24, r0
    5d10:	11 24       	eor	r1, r1
    5d12:	28 0f       	add	r18, r24
    5d14:	39 1f       	adc	r19, r25
 		if (fontTable[FONT_LENGTH] == 0) {
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
    5d16:	4f 5f       	subi	r20, 0xFF	; 255
    5d18:	31 96       	adiw	r30, 0x01	; 1
    5d1a:	45 17       	cp	r20, r21
    5d1c:	a8 f3       	brcs	.-22     	; 0x5d08 <display_putString+0x9c>
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    5d1e:	8b 2d       	mov	r24, r11
    5d20:	90 e0       	ldi	r25, 0x00	; 0
    5d22:	8e 9d       	mul	r24, r14
    5d24:	f0 01       	movw	r30, r0
    5d26:	8f 9d       	mul	r24, r15
    5d28:	f0 0d       	add	r31, r0
    5d2a:	9e 9d       	mul	r25, r14
    5d2c:	f0 0d       	add	r31, r0
    5d2e:	11 24       	eor	r1, r1
    5d30:	e6 0d       	add	r30, r6
    5d32:	f7 1d       	adc	r31, r7
    5d34:	e2 0f       	add	r30, r18
    5d36:	f3 1f       	adc	r31, r19
    5d38:	c6 01       	movw	r24, r12
    5d3a:	8e 0f       	add	r24, r30
    5d3c:	9f 1f       	adc	r25, r31
    5d3e:	8a 87       	std	Y+10, r24	; 0x0a
    5d40:	9b 87       	std	Y+11, r25	; 0x0b
    5d42:	00 e0       	ldi	r16, 0x00	; 0
    5d44:	26 c0       	rjmp	.+76     	; 0x5d92 <display_putString+0x126>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
    5d46:	aa 85       	ldd	r26, Y+10	; 0x0a
    5d48:	bb 85       	ldd	r27, Y+11	; 0x0b
    5d4a:	1c 91       	ld	r17, X
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    5d4c:	b8 e0       	ldi	r27, 0x08	; 8
    5d4e:	b2 15       	cp	r27, r2
    5d50:	70 f4       	brcc	.+28     	; 0x5d6e <display_putString+0x102>
    5d52:	ed 81       	ldd	r30, Y+5	; 0x05
    5d54:	fe 81       	ldd	r31, Y+6	; 0x06
    5d56:	8e 16       	cp	r8, r30
    5d58:	9f 06       	cpc	r9, r31
    5d5a:	4c f4       	brge	.+18     	; 0x5d6e <display_putString+0x102>
 				data >>= (i+1)*8-fontHeight;
    5d5c:	81 2f       	mov	r24, r17
    5d5e:	90 e0       	ldi	r25, 0x00	; 0
    5d60:	0b 80       	ldd	r0, Y+3	; 0x03
    5d62:	02 c0       	rjmp	.+4      	; 0x5d68 <display_putString+0xfc>
    5d64:	95 95       	asr	r25
    5d66:	87 95       	ror	r24
    5d68:	0a 94       	dec	r0
    5d6a:	e2 f7       	brpl	.-8      	; 0x5d64 <display_putString+0xf8>
    5d6c:	18 2f       	mov	r17, r24
 			}
 			display_setCursor(page+i,offset);
    5d6e:	84 2d       	mov	r24, r4
    5d70:	0e 94 cf 2c 	call	0x599e	; 0x599e <display_setCursor>
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5d74:	f0 e8       	ldi	r31, 0x80	; 128
    5d76:	f0 93 a5 06 	sts	0x06A5, r31
	Display_SPI.DATA = dataByte;
    5d7a:	10 93 c3 09 	sts	0x09C3, r17
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5d7e:	80 91 c2 09 	lds	r24, 0x09C2
    5d82:	87 ff       	sbrs	r24, 7
    5d84:	fc cf       	rjmp	.-8      	; 0x5d7e <display_putString+0x112>
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
    5d86:	0f 5f       	subi	r16, 0xFF	; 255
    5d88:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d8c:	01 96       	adiw	r24, 0x01	; 1
    5d8e:	8a 87       	std	Y+10, r24	; 0x0a
    5d90:	9b 87       	std	Y+11, r25	; 0x0b
    5d92:	60 2f       	mov	r22, r16
    5d94:	6a 0d       	add	r22, r10
    5d96:	0b 15       	cp	r16, r11
    5d98:	b0 f2       	brcs	.-84     	; 0x5d46 <display_putString+0xda>
    5d9a:	1b 2d       	mov	r17, r11
    5d9c:	1a 0d       	add	r17, r10
 			//displayBuffer[page+i][offset] = data;
 			offset++;
		}

		//Add a 1px gap between characters
 		if(offset != 101){
    5d9e:	15 36       	cpi	r17, 0x65	; 101
    5da0:	71 f0       	breq	.+28     	; 0x5dbe <display_putString+0x152>
 			display_setCursor(page+i,offset+1);
    5da2:	61 2f       	mov	r22, r17
    5da4:	6f 5f       	subi	r22, 0xFF	; 255
    5da6:	84 2d       	mov	r24, r4
    5da8:	0e 94 cf 2c 	call	0x599e	; 0x599e <display_setCursor>
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5dac:	90 e8       	ldi	r25, 0x80	; 128
    5dae:	90 93 a5 06 	sts	0x06A5, r25
	Display_SPI.DATA = dataByte;
    5db2:	10 92 c3 09 	sts	0x09C3, r1
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5db6:	80 91 c2 09 	lds	r24, 0x09C2
    5dba:	87 ff       	sbrs	r24, 7
    5dbc:	fc cf       	rjmp	.-8      	; 0x5db6 <display_putString+0x14a>
 		if(offset != 101){
 			display_setCursor(page+i,offset+1);
 			display_sendData(0x00);
 			//displayBuffer[page+i][offset+1] = 0x00;
 		}
		offset++;
    5dbe:	a1 2e       	mov	r10, r17
    5dc0:	a3 94       	inc	r10
 	
 		j++;
    5dc2:	53 94       	inc	r5

 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
    5dc4:	ef 81       	ldd	r30, Y+7	; 0x07
    5dc6:	f8 85       	ldd	r31, Y+8	; 0x08
    5dc8:	e5 0d       	add	r30, r5
    5dca:	f1 1d       	adc	r31, r1
    5dcc:	e0 81       	ld	r30, Z
    5dce:	ee 23       	and	r30, r30
    5dd0:	09 f0       	breq	.+2      	; 0x5dd4 <display_putString+0x168>
    5dd2:	83 cf       	rjmp	.-250    	; 0x5cda <display_putString+0x6e>
 		}
		offset++;
 	
 		j++;
 	} 	
 	i++;
    5dd4:	33 94       	inc	r3
    5dd6:	43 94       	inc	r4
 uint8_t charWidth, ch, data;


 i = 0;

 while (i*8 < fontHeight) {
    5dd8:	e3 2c       	mov	r14, r3
    5dda:	ff 24       	eor	r15, r15
    5ddc:	c7 01       	movw	r24, r14
    5dde:	e3 e0       	ldi	r30, 0x03	; 3
    5de0:	88 0f       	add	r24, r24
    5de2:	99 1f       	adc	r25, r25
    5de4:	ea 95       	dec	r30
    5de6:	e1 f7       	brne	.-8      	; 0x5de0 <display_putString+0x174>
    5de8:	88 15       	cp	r24, r8
    5dea:	99 05       	cpc	r25, r9
    5dec:	ac f4       	brge	.+42     	; 0x5e18 <display_putString+0x1ac>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    5dee:	08 94       	sec
    5df0:	e1 1c       	adc	r14, r1
    5df2:	f1 1c       	adc	r15, r1
    5df4:	d7 01       	movw	r26, r14
    5df6:	73 e0       	ldi	r23, 0x03	; 3
    5df8:	aa 0f       	add	r26, r26
    5dfa:	bb 1f       	adc	r27, r27
    5dfc:	7a 95       	dec	r23
    5dfe:	e1 f7       	brne	.-8      	; 0x5df8 <display_putString+0x18c>
    5e00:	ad 83       	std	Y+5, r26	; 0x05
    5e02:	be 83       	std	Y+6, r27	; 0x06
    5e04:	08 94       	sec
    5e06:	e1 08       	sbc	r14, r1
    5e08:	f1 08       	sbc	r15, r1
 				data >>= (i+1)*8-fontHeight;
    5e0a:	a8 19       	sub	r26, r8
    5e0c:	b9 09       	sbc	r27, r9
    5e0e:	ab 83       	std	Y+3, r26	; 0x03
    5e10:	bc 83       	std	Y+4, r27	; 0x04
    5e12:	a9 84       	ldd	r10, Y+9	; 0x09
    5e14:	55 24       	eor	r5, r5
    5e16:	d6 cf       	rjmp	.-84     	; 0x5dc4 <display_putString+0x158>
 		j++;
 	} 	
 	i++;
 }

}
    5e18:	2b 96       	adiw	r28, 0x0b	; 11
    5e1a:	cd bf       	out	0x3d, r28	; 61
    5e1c:	de bf       	out	0x3e, r29	; 62
    5e1e:	cf 91       	pop	r28
    5e20:	df 91       	pop	r29
    5e22:	1f 91       	pop	r17
    5e24:	0f 91       	pop	r16
    5e26:	ff 90       	pop	r15
    5e28:	ef 90       	pop	r14
    5e2a:	df 90       	pop	r13
    5e2c:	cf 90       	pop	r12
    5e2e:	bf 90       	pop	r11
    5e30:	af 90       	pop	r10
    5e32:	9f 90       	pop	r9
    5e34:	8f 90       	pop	r8
    5e36:	7f 90       	pop	r7
    5e38:	6f 90       	pop	r6
    5e3a:	5f 90       	pop	r5
    5e3c:	4f 90       	pop	r4
    5e3e:	3f 90       	pop	r3
    5e40:	2f 90       	pop	r2
    5e42:	08 95       	ret

00005e44 <Light_readByte>:
uint8_t Light_readByte(uint8_t location){
	uint8_t tmp;


	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    5e44:	30 91 57 47 	lds	r19, 0x4757
    5e48:	93 2f       	mov	r25, r19
    5e4a:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | location;
    5e4c:	28 2f       	mov	r18, r24
    5e4e:	20 68       	ori	r18, 0x80	; 128
    5e50:	20 93 76 4c 	sts	0x4C76, r18


	LightPort.MASTER.ADDR = writeAddress;
    5e54:	e0 ea       	ldi	r30, 0xA0	; 160
    5e56:	f4 e0       	ldi	r31, 0x04	; 4
    5e58:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    5e5a:	80 91 a4 04 	lds	r24, 0x04A4
    5e5e:	86 ff       	sbrs	r24, 6
    5e60:	fc cf       	rjmp	.-8      	; 0x5e5a <Light_readByte+0x16>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    5e62:	e0 ea       	ldi	r30, 0xA0	; 160
    5e64:	f4 e0       	ldi	r31, 0x04	; 4
    5e66:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    5e68:	80 91 a4 04 	lds	r24, 0x04A4
    5e6c:	86 ff       	sbrs	r24, 6
    5e6e:	fc cf       	rjmp	.-8      	; 0x5e68 <Light_readByte+0x24>
				//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    5e70:	83 2f       	mov	r24, r19
    5e72:	81 60       	ori	r24, 0x01	; 1
    5e74:	80 93 a5 46 	sts	0x46A5, r24
	LightPort.MASTER.ADDR = writeAddress;
    5e78:	e0 ea       	ldi	r30, 0xA0	; 160
    5e7a:	f4 e0       	ldi	r31, 0x04	; 4
    5e7c:	86 83       	std	Z+6, r24	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    5e7e:	80 91 a4 04 	lds	r24, 0x04A4
    5e82:	87 ff       	sbrs	r24, 7
    5e84:	fc cf       	rjmp	.-8      	; 0x5e7e <Light_readByte+0x3a>
				//Wait for Read flag to come on
	}

	tmp = LightPort.MASTER.DATA;
    5e86:	80 91 a7 04 	lds	r24, 0x04A7

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    5e8a:	97 e0       	ldi	r25, 0x07	; 7
    5e8c:	e0 ea       	ldi	r30, 0xA0	; 160
    5e8e:	f4 e0       	ldi	r31, 0x04	; 4
    5e90:	93 83       	std	Z+3, r25	; 0x03

	return tmp;
}
    5e92:	08 95       	ret

00005e94 <Light_readColors>:

void Light_readColors(void){

	while(Light_readByte(Control) && ADC_Valid_bm == 0);
    5e94:	80 e0       	ldi	r24, 0x00	; 0
    5e96:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <Light_readByte>

	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    5e9a:	20 91 57 47 	lds	r18, 0x4757
    5e9e:	92 2f       	mov	r25, r18
    5ea0:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | 0x10;
    5ea2:	80 e9       	ldi	r24, 0x90	; 144
    5ea4:	80 93 76 4c 	sts	0x4C76, r24

	LightPort.MASTER.ADDR = writeAddress;
    5ea8:	e0 ea       	ldi	r30, 0xA0	; 160
    5eaa:	f4 e0       	ldi	r31, 0x04	; 4
    5eac:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    5eae:	80 91 a4 04 	lds	r24, 0x04A4
    5eb2:	86 ff       	sbrs	r24, 6
    5eb4:	fc cf       	rjmp	.-8      	; 0x5eae <Light_readColors+0x1a>
					//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    5eb6:	80 e9       	ldi	r24, 0x90	; 144
    5eb8:	e0 ea       	ldi	r30, 0xA0	; 160
    5eba:	f4 e0       	ldi	r31, 0x04	; 4
    5ebc:	87 83       	std	Z+7, r24	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    5ebe:	80 91 a4 04 	lds	r24, 0x04A4
    5ec2:	86 ff       	sbrs	r24, 6
    5ec4:	fc cf       	rjmp	.-8      	; 0x5ebe <Light_readColors+0x2a>
					//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    5ec6:	82 2f       	mov	r24, r18
    5ec8:	81 60       	ori	r24, 0x01	; 1
    5eca:	80 93 a5 46 	sts	0x46A5, r24
	LightPort.MASTER.ADDR = writeAddress;
    5ece:	e0 ea       	ldi	r30, 0xA0	; 160
    5ed0:	f4 e0       	ldi	r31, 0x04	; 4
    5ed2:	86 83       	std	Z+6, r24	; 0x06
    5ed4:	e2 e0       	ldi	r30, 0x02	; 2
    5ed6:	f7 e4       	ldi	r31, 0x47	; 71
    5ed8:	90 e0       	ldi	r25, 0x00	; 0


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    5eda:	a0 ea       	ldi	r26, 0xA0	; 160
    5edc:	b4 e0       	ldi	r27, 0x04	; 4
		}

		colors8[i] = LightPort.MASTER.DATA;
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    5ede:	22 e0       	ldi	r18, 0x02	; 2
	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    5ee0:	80 91 a4 04 	lds	r24, 0x04A4
    5ee4:	87 ff       	sbrs	r24, 7
    5ee6:	fc cf       	rjmp	.-8      	; 0x5ee0 <Light_readColors+0x4c>
				//Wait for Read flag to come on
		}

		colors8[i] = LightPort.MASTER.DATA;
    5ee8:	80 91 a7 04 	lds	r24, 0x04A7
    5eec:	80 83       	st	Z, r24
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
    5eee:	97 30       	cpi	r25, 0x07	; 7
    5ef0:	19 f0       	breq	.+6      	; 0x5ef8 <Light_readColors+0x64>
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    5ef2:	13 96       	adiw	r26, 0x03	; 3
    5ef4:	2c 93       	st	X, r18
    5ef6:	13 97       	sbiw	r26, 0x03	; 3

	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
    5ef8:	9f 5f       	subi	r25, 0xFF	; 255
    5efa:	31 96       	adiw	r30, 0x01	; 1
    5efc:	98 30       	cpi	r25, 0x08	; 8
    5efe:	81 f7       	brne	.-32     	; 0x5ee0 <Light_readColors+0x4c>
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		}
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    5f00:	87 e0       	ldi	r24, 0x07	; 7
    5f02:	e0 ea       	ldi	r30, 0xA0	; 160
    5f04:	f4 e0       	ldi	r31, 0x04	; 4
    5f06:	83 83       	std	Z+3, r24	; 0x03

	colors[green] = colors8[1]*256 + colors8[0];
    5f08:	90 91 03 47 	lds	r25, 0x4703
    5f0c:	80 e0       	ldi	r24, 0x00	; 0
    5f0e:	20 91 02 47 	lds	r18, 0x4702
    5f12:	82 0f       	add	r24, r18
    5f14:	91 1d       	adc	r25, r1
    5f16:	80 93 0f 36 	sts	0x360F, r24
    5f1a:	90 93 10 36 	sts	0x3610, r25
	colors[red]   = colors8[3]*256 + colors8[2];
    5f1e:	90 91 05 47 	lds	r25, 0x4705
    5f22:	80 e0       	ldi	r24, 0x00	; 0
    5f24:	20 91 04 47 	lds	r18, 0x4704
    5f28:	82 0f       	add	r24, r18
    5f2a:	91 1d       	adc	r25, r1
    5f2c:	80 93 11 36 	sts	0x3611, r24
    5f30:	90 93 12 36 	sts	0x3612, r25
	colors[blue]  = colors8[5]*256 + colors8[4];
    5f34:	90 91 07 47 	lds	r25, 0x4707
    5f38:	80 e0       	ldi	r24, 0x00	; 0
    5f3a:	20 91 06 47 	lds	r18, 0x4706
    5f3e:	82 0f       	add	r24, r18
    5f40:	91 1d       	adc	r25, r1
    5f42:	80 93 13 36 	sts	0x3613, r24
    5f46:	90 93 14 36 	sts	0x3614, r25
	colors[clear] = colors8[7]*256 + colors8[6];
    5f4a:	90 91 09 47 	lds	r25, 0x4709
    5f4e:	80 e0       	ldi	r24, 0x00	; 0
    5f50:	20 91 08 47 	lds	r18, 0x4708
    5f54:	82 0f       	add	r24, r18
    5f56:	91 1d       	adc	r25, r1
    5f58:	80 93 15 36 	sts	0x3615, r24
    5f5c:	90 93 16 36 	sts	0x3616, r25
}
    5f60:	08 95       	ret

00005f62 <Light_returnColor>:

uint16_t Light_returnColor(uint8_t color){
    5f62:	e8 2f       	mov	r30, r24
    5f64:	f0 e0       	ldi	r31, 0x00	; 0
    5f66:	ee 0f       	add	r30, r30
    5f68:	ff 1f       	adc	r31, r31
    5f6a:	e1 5f       	subi	r30, 0xF1	; 241
    5f6c:	f9 4c       	sbci	r31, 0xC9	; 201
	return colors[color];
}
    5f6e:	80 81       	ld	r24, Z
    5f70:	91 81       	ldd	r25, Z+1	; 0x01
    5f72:	08 95       	ret

00005f74 <Light_writeByte>:

void Light_writeByte(uint8_t location, uint8_t toSend){
	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    5f74:	90 91 57 47 	lds	r25, 0x4757
    5f78:	9e 7f       	andi	r25, 0xFE	; 254
    5f7a:	90 93 a5 46 	sts	0x46A5, r25
	commandCode = 0b10000000 | location;
    5f7e:	28 2f       	mov	r18, r24
    5f80:	20 68       	ori	r18, 0x80	; 128
    5f82:	20 93 76 4c 	sts	0x4C76, r18

	LightPort.MASTER.ADDR = writeAddress;
    5f86:	e0 ea       	ldi	r30, 0xA0	; 160
    5f88:	f4 e0       	ldi	r31, 0x04	; 4
    5f8a:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    5f8c:	80 91 a4 04 	lds	r24, 0x04A4
    5f90:	86 ff       	sbrs	r24, 6
    5f92:	fc cf       	rjmp	.-8      	; 0x5f8c <Light_writeByte+0x18>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    5f94:	e0 ea       	ldi	r30, 0xA0	; 160
    5f96:	f4 e0       	ldi	r31, 0x04	; 4
    5f98:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    5f9a:	80 91 a4 04 	lds	r24, 0x04A4
    5f9e:	86 ff       	sbrs	r24, 6
    5fa0:	fc cf       	rjmp	.-8      	; 0x5f9a <Light_writeByte+0x26>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = toSend;
    5fa2:	e0 ea       	ldi	r30, 0xA0	; 160
    5fa4:	f4 e0       	ldi	r31, 0x04	; 4
    5fa6:	67 83       	std	Z+7, r22	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    5fa8:	80 91 a4 04 	lds	r24, 0x04A4
    5fac:	86 ff       	sbrs	r24, 6
    5fae:	fc cf       	rjmp	.-8      	; 0x5fa8 <Light_writeByte+0x34>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    5fb0:	87 e0       	ldi	r24, 0x07	; 7
    5fb2:	e0 ea       	ldi	r30, 0xA0	; 160
    5fb4:	f4 e0       	ldi	r31, 0x04	; 4
    5fb6:	83 83       	std	Z+3, r24	; 0x03

}
    5fb8:	08 95       	ret

00005fba <Light_setGain>:


void Light_setGain(void){
	Light_writeByte(Control, Power_bm);
    5fba:	80 e0       	ldi	r24, 0x00	; 0
    5fbc:	61 e0       	ldi	r22, 0x01	; 1
    5fbe:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <Light_writeByte>
	Light_writeByte(Timing, (integrationTime[gainSelector] | Integ_Mode_Auto_bm));
    5fc2:	80 91 29 2d 	lds	r24, 0x2D29
    5fc6:	e0 e7       	ldi	r30, 0x70	; 112
    5fc8:	fa e2       	ldi	r31, 0x2A	; 42
    5fca:	e8 0f       	add	r30, r24
    5fcc:	f1 1d       	adc	r31, r1
    5fce:	81 e0       	ldi	r24, 0x01	; 1
    5fd0:	60 81       	ld	r22, Z
    5fd2:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <Light_writeByte>
	Light_writeByte(Gain, (gainSetting[gainSelector]));
    5fd6:	80 91 29 2d 	lds	r24, 0x2D29
    5fda:	e9 e7       	ldi	r30, 0x79	; 121
    5fdc:	fa e2       	ldi	r31, 0x2A	; 42
    5fde:	e8 0f       	add	r30, r24
    5fe0:	f1 1d       	adc	r31, r1
    5fe2:	87 e0       	ldi	r24, 0x07	; 7
    5fe4:	60 81       	ld	r22, Z
    5fe6:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <Light_writeByte>
	Light_writeByte(Control, (ADC_En_bm | Power_bm));
    5fea:	80 e0       	ldi	r24, 0x00	; 0
    5fec:	63 e0       	ldi	r22, 0x03	; 3
    5fee:	0e 94 ba 2f 	call	0x5f74	; 0x5f74 <Light_writeByte>
}
    5ff2:	08 95       	ret

00005ff4 <Light_Init>:
uint16_t	colors[4];
uint8_t		colors8[8];


void Light_Init(uint8_t address){
	deviceAddress = address;
    5ff4:	80 93 57 47 	sts	0x4757, r24

	LightPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    5ff8:	e0 ea       	ldi	r30, 0xA0	; 160
    5ffa:	f4 e0       	ldi	r31, 0x04	; 4
    5ffc:	88 e0       	ldi	r24, 0x08	; 8
    5ffe:	81 83       	std	Z+1, r24	; 0x01

	//Set Master Read Acknowledge Action to ACK
	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    6000:	84 e0       	ldi	r24, 0x04	; 4
    6002:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//14.7456Mhz/(2*400kHz) - 5 = 13
	LightPort.MASTER.BAUD = 13;
    6004:	8d e0       	ldi	r24, 0x0D	; 13
    6006:	85 83       	std	Z+5, r24	; 0x05

	LightPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    6008:	81 e0       	ldi	r24, 0x01	; 1
    600a:	84 83       	std	Z+4, r24	; 0x04

	gainSelector = 0;
    600c:	10 92 29 2d 	sts	0x2D29, r1
	Light_setGain();
    6010:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <Light_setGain>
}
    6014:	08 95       	ret

00006016 <Button_Init>:
//___________________________________________

#include "button.h"

void Button_Init(uint8_t button){
	Button_Port.DIRCLR = (1 << button);
    6016:	21 e0       	ldi	r18, 0x01	; 1
    6018:	30 e0       	ldi	r19, 0x00	; 0
    601a:	02 c0       	rjmp	.+4      	; 0x6020 <Button_Init+0xa>
    601c:	22 0f       	add	r18, r18
    601e:	33 1f       	adc	r19, r19
    6020:	8a 95       	dec	r24
    6022:	e2 f7       	brpl	.-8      	; 0x601c <Button_Init+0x6>
    6024:	e0 ea       	ldi	r30, 0xA0	; 160
    6026:	f6 e0       	ldi	r31, 0x06	; 6
    6028:	22 83       	std	Z+2, r18	; 0x02
	PORTCFG.MPCMASK = (1 << button);
    602a:	20 93 b0 00 	sts	0x00B0, r18
	Button_Port.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;
    602e:	88 e3       	ldi	r24, 0x38	; 56
    6030:	80 8b       	std	Z+16, r24	; 0x10
}
    6032:	08 95       	ret

00006034 <Button_Pressed>:


bool Button_Pressed(uint8_t button){
	if((Button_Port.IN & (1<<button)) >0 ){
    6034:	40 91 a8 06 	lds	r20, 0x06A8
    6038:	90 e0       	ldi	r25, 0x00	; 0
    603a:	21 e0       	ldi	r18, 0x01	; 1
    603c:	30 e0       	ldi	r19, 0x00	; 0
    603e:	02 c0       	rjmp	.+4      	; 0x6044 <Button_Pressed+0x10>
    6040:	22 0f       	add	r18, r18
    6042:	33 1f       	adc	r19, r19
    6044:	8a 95       	dec	r24
    6046:	e2 f7       	brpl	.-8      	; 0x6040 <Button_Pressed+0xc>
    6048:	50 e0       	ldi	r21, 0x00	; 0
    604a:	24 23       	and	r18, r20
    604c:	35 23       	and	r19, r21
    604e:	12 16       	cp	r1, r18
    6050:	13 06       	cpc	r1, r19
    6052:	0c f0       	brlt	.+2      	; 0x6056 <Button_Pressed+0x22>
    6054:	91 e0       	ldi	r25, 0x01	; 1
		return false;
	} else {
		return true;
	}
} 
    6056:	89 2f       	mov	r24, r25
    6058:	08 95       	ret

0000605a <Sensors_Init>:

uint16_t zeroOffsetA, zeroOffsetB;

uint32_t tempLightResult[4];

void Sensors_Init(void){
    605a:	ff 92       	push	r15
    605c:	0f 93       	push	r16
    605e:	1f 93       	push	r17
    6060:	cf 93       	push	r28
    6062:	df 93       	push	r29
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6064:	2a ec       	ldi	r18, 0xCA	; 202
    6066:	31 e0       	ldi	r19, 0x01	; 1
    6068:	62 e0       	ldi	r22, 0x02	; 2
    606a:	d9 01       	movw	r26, r18
    606c:	6c 93       	st	X, r22
 	result = pgm_read_byte(index);
    606e:	e0 e2       	ldi	r30, 0x20	; 32
    6070:	f0 e0       	ldi	r31, 0x00	; 0
    6072:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    6074:	1c 92       	st	X, r1

void Sensors_Init(void){
	
	// ADCA
	
	ADCA.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
    6076:	a0 e0       	ldi	r26, 0x00	; 0
    6078:	b2 e0       	ldi	r27, 0x02	; 2
    607a:	1c 96       	adiw	r26, 0x0c	; 12
    607c:	ec 93       	st	X, r30
    607e:	1c 97       	sbiw	r26, 0x0c	; 12
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6080:	e9 01       	movw	r28, r18
    6082:	68 83       	st	Y, r22
 	result = pgm_read_byte(index);
    6084:	e1 e2       	ldi	r30, 0x21	; 33
    6086:	f0 e0       	ldi	r31, 0x00	; 0
    6088:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    608a:	18 82       	st	Y, r1
void Sensors_Init(void){
	
	// ADCA
	
	ADCA.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
	ADCA.CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
    608c:	1d 96       	adiw	r26, 0x0d	; 13
    608e:	ec 93       	st	X, r30
    6090:	1d 97       	sbiw	r26, 0x0d	; 13
	
	ADCA.groundChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    6092:	41 e0       	ldi	r20, 0x01	; 1
    6094:	90 96       	adiw	r26, 0x20	; 32
    6096:	4c 93       	st	X, r20
    6098:	90 97       	sbiw	r26, 0x20	; 32
	ADCA.groundChannel.MUXCTRL = groundMUXPos;
    609a:	18 e0       	ldi	r17, 0x08	; 8
    609c:	f1 2e       	mov	r15, r17
    609e:	91 96       	adiw	r26, 0x21	; 33
    60a0:	fc 92       	st	X, r15
    60a2:	91 97       	sbiw	r26, 0x21	; 33

	ADCA.powerChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    60a4:	98 96       	adiw	r26, 0x28	; 40
    60a6:	4c 93       	st	X, r20
    60a8:	98 97       	sbiw	r26, 0x28	; 40
	ADCA.powerChannel.MUXCTRL = powerMUXPos;
    60aa:	88 e1       	ldi	r24, 0x18	; 24
    60ac:	99 96       	adiw	r26, 0x29	; 41
    60ae:	8c 93       	st	X, r24
    60b0:	99 97       	sbiw	r26, 0x29	; 41
	
	ADCA.temperatureChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    60b2:	d0 96       	adiw	r26, 0x30	; 48
    60b4:	4c 93       	st	X, r20
    60b6:	d0 97       	sbiw	r26, 0x30	; 48
	ADCA.temperatureChannel.MUXCTRL = temperatureMUXPos;
    60b8:	50 e2       	ldi	r21, 0x20	; 32
    60ba:	d1 96       	adiw	r26, 0x31	; 49
    60bc:	5c 93       	st	X, r21
    60be:	d1 97       	sbiw	r26, 0x31	; 49

	ADCA.humidityChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    60c0:	d8 96       	adiw	r26, 0x38	; 56
    60c2:	4c 93       	st	X, r20
    60c4:	d8 97       	sbiw	r26, 0x38	; 56
	ADCA.humidityChannel.MUXCTRL = humidityMUXPos;
    60c6:	78 e2       	ldi	r23, 0x28	; 40
    60c8:	d9 96       	adiw	r26, 0x39	; 57
    60ca:	7c 93       	st	X, r23
    60cc:	d9 97       	sbiw	r26, 0x39	; 57
	
	ADCA.PRESCALER = (ADCA.PRESCALER & (~ADC_PRESCALER_gm)) | ADC_PRESCALER_DIV64_gc;
    60ce:	14 96       	adiw	r26, 0x04	; 4
    60d0:	8c 91       	ld	r24, X
    60d2:	14 97       	sbiw	r26, 0x04	; 4
    60d4:	88 7f       	andi	r24, 0xF8	; 248
    60d6:	84 60       	ori	r24, 0x04	; 4
    60d8:	14 96       	adiw	r26, 0x04	; 4
    60da:	8c 93       	st	X, r24
    60dc:	14 97       	sbiw	r26, 0x04	; 4
	
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    60de:	12 96       	adiw	r26, 0x02	; 2
    60e0:	5c 93       	st	X, r21
    60e2:	12 97       	sbiw	r26, 0x02	; 2
	ADCA.EVCTRL = (ADCA.EVCTRL & (~ADC_SWEEP_gm)) | ADC_SWEEP_0123_gc;
    60e4:	13 96       	adiw	r26, 0x03	; 3
    60e6:	8c 91       	ld	r24, X
    60e8:	13 97       	sbiw	r26, 0x03	; 3
    60ea:	80 6c       	ori	r24, 0xC0	; 192
    60ec:	13 96       	adiw	r26, 0x03	; 3
    60ee:	8c 93       	st	X, r24
    60f0:	13 97       	sbiw	r26, 0x03	; 3
	
	ADCA.CTRLB |= ADC_FREERUN_bm; // free running mode	
    60f2:	11 96       	adiw	r26, 0x01	; 1
    60f4:	8c 91       	ld	r24, X
    60f6:	11 97       	sbiw	r26, 0x01	; 1
    60f8:	88 60       	ori	r24, 0x08	; 8
    60fa:	11 96       	adiw	r26, 0x01	; 1
    60fc:	8c 93       	st	X, r24
    60fe:	11 97       	sbiw	r26, 0x01	; 1
	
	
	ADCA.groundChannel.CTRL |= ADC_CH_START_bm;
    6100:	90 96       	adiw	r26, 0x20	; 32
    6102:	8c 91       	ld	r24, X
    6104:	90 97       	sbiw	r26, 0x20	; 32
    6106:	80 68       	ori	r24, 0x80	; 128
    6108:	90 96       	adiw	r26, 0x20	; 32
    610a:	8c 93       	st	X, r24
    610c:	90 97       	sbiw	r26, 0x20	; 32
	ADCA.powerChannel.CTRL |= ADC_CH_START_bm;
    610e:	98 96       	adiw	r26, 0x28	; 40
    6110:	8c 91       	ld	r24, X
    6112:	98 97       	sbiw	r26, 0x28	; 40
    6114:	80 68       	ori	r24, 0x80	; 128
    6116:	98 96       	adiw	r26, 0x28	; 40
    6118:	8c 93       	st	X, r24
    611a:	98 97       	sbiw	r26, 0x28	; 40
	ADCA.temperatureChannel.CTRL |= ADC_CH_START_bm;
    611c:	d0 96       	adiw	r26, 0x30	; 48
    611e:	8c 91       	ld	r24, X
    6120:	d0 97       	sbiw	r26, 0x30	; 48
    6122:	80 68       	ori	r24, 0x80	; 128
    6124:	d0 96       	adiw	r26, 0x30	; 48
    6126:	8c 93       	st	X, r24
    6128:	d0 97       	sbiw	r26, 0x30	; 48
	ADCA.humidityChannel.CTRL |= ADC_CH_START_bm;
    612a:	d8 96       	adiw	r26, 0x38	; 56
    612c:	8c 91       	ld	r24, X
    612e:	d8 97       	sbiw	r26, 0x38	; 56
    6130:	80 68       	ori	r24, 0x80	; 128
    6132:	d8 96       	adiw	r26, 0x38	; 56
    6134:	8c 93       	st	X, r24
    6136:	d8 97       	sbiw	r26, 0x38	; 56
	
	ADCA.CTRLA = ADC_ENABLE_bm;							// enable adc 
    6138:	4c 93       	st	X, r20
    613a:	00 e0       	ldi	r16, 0x00	; 0
    613c:	10 e9       	ldi	r17, 0x90	; 144
    613e:	c8 01       	movw	r24, r16
    6140:	01 97       	sbiw	r24, 0x01	; 1
    6142:	f1 f7       	brne	.-4      	; 0x6140 <Sensors_Init+0xe6>
	
	_delay_ms(10);
	zeroOffsetA = ADCA.groundResult;
    6144:	50 96       	adiw	r26, 0x10	; 16
    6146:	8d 91       	ld	r24, X+
    6148:	9c 91       	ld	r25, X
    614a:	51 97       	sbiw	r26, 0x11	; 17
    614c:	80 93 74 4c 	sts	0x4C74, r24
    6150:	90 93 75 4c 	sts	0x4C75, r25
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6154:	f9 01       	movw	r30, r18
    6156:	60 83       	st	Z, r22
 	result = pgm_read_byte(index);
    6158:	e4 e2       	ldi	r30, 0x24	; 36
    615a:	f0 e0       	ldi	r31, 0x00	; 0
    615c:	84 91       	lpm	r24, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    615e:	d9 01       	movw	r26, r18
    6160:	1c 92       	st	X, r1
	zeroOffsetA = ADCA.groundResult;
	
	// ADCB
	
	
	ADCB.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
    6162:	c0 e4       	ldi	r28, 0x40	; 64
    6164:	d2 e0       	ldi	r29, 0x02	; 2
    6166:	8c 87       	std	Y+12, r24	; 0x0c
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6168:	6c 93       	st	X, r22
 	result = pgm_read_byte(index);
    616a:	85 e2       	ldi	r24, 0x25	; 37
    616c:	90 e0       	ldi	r25, 0x00	; 0
    616e:	fc 01       	movw	r30, r24
    6170:	84 91       	lpm	r24, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    6172:	1c 92       	st	X, r1
	
	// ADCB
	
	
	ADCB.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
	ADCB.CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
    6174:	8d 87       	std	Y+13, r24	; 0x0d
	
	ADCB.groundChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    6176:	48 a3       	std	Y+32, r20	; 0x20
	ADCB.groundChannel.MUXCTRL = groundMUXPos;
    6178:	f9 a2       	std	Y+33, r15	; 0x21
	
	ADCB.pressureChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    617a:	48 a7       	std	Y+40, r20	; 0x28
	ADCB.pressureChannel.MUXCTRL = pressureMUXPos;
    617c:	59 a7       	std	Y+41, r21	; 0x29
	
	ADCB.microphoneChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    617e:	48 ab       	std	Y+48, r20	; 0x30
	ADCB.microphoneChannel.MUXCTRL = microphoneMUXPos;
    6180:	79 ab       	std	Y+49, r23	; 0x31

	ADCB.PRESCALER = (ADCB.PRESCALER & (~ADC_PRESCALER_gm)) | ADC_PRESCALER_DIV64_gc;
    6182:	8c 81       	ldd	r24, Y+4	; 0x04
    6184:	88 7f       	andi	r24, 0xF8	; 248
    6186:	84 60       	ori	r24, 0x04	; 4
    6188:	8c 83       	std	Y+4, r24	; 0x04
	
	ADCB.REFCTRL = ADC_REFSEL_AREFA_gc;
    618a:	5a 83       	std	Y+2, r21	; 0x02
	ADCB.EVCTRL = (ADCB.EVCTRL & (~ADC_SWEEP_gm)) | ADC_SWEEP_0123_gc;
    618c:	8b 81       	ldd	r24, Y+3	; 0x03
    618e:	80 6c       	ori	r24, 0xC0	; 192
    6190:	8b 83       	std	Y+3, r24	; 0x03
	
	ADCB.CTRLB |= ADC_FREERUN_bm; // free running mode	
    6192:	89 81       	ldd	r24, Y+1	; 0x01
    6194:	88 60       	ori	r24, 0x08	; 8
    6196:	89 83       	std	Y+1, r24	; 0x01
	
	ADCB.groundChannel.CTRL |= ADC_CH_START_bm;
    6198:	88 a1       	ldd	r24, Y+32	; 0x20
    619a:	80 68       	ori	r24, 0x80	; 128
    619c:	88 a3       	std	Y+32, r24	; 0x20
	ADCB.microphoneChannel.CTRL |= ADC_CH_START_bm;
    619e:	88 a9       	ldd	r24, Y+48	; 0x30
    61a0:	80 68       	ori	r24, 0x80	; 128
    61a2:	88 ab       	std	Y+48, r24	; 0x30
	ADCB.pressureChannel.CTRL |= ADC_CH_START_bm;
    61a4:	88 a5       	ldd	r24, Y+40	; 0x28
    61a6:	80 68       	ori	r24, 0x80	; 128
    61a8:	88 a7       	std	Y+40, r24	; 0x28

	ADCB.CTRLA = ADC_ENABLE_bm;							// enable adc 
    61aa:	48 83       	st	Y, r20
    61ac:	c8 01       	movw	r24, r16
    61ae:	01 97       	sbiw	r24, 0x01	; 1
    61b0:	f1 f7       	brne	.-4      	; 0x61ae <Sensors_Init+0x154>
	
	_delay_ms(10);
	zeroOffsetB = ADCB.groundResult;
    61b2:	88 89       	ldd	r24, Y+16	; 0x10
    61b4:	99 89       	ldd	r25, Y+17	; 0x11
    61b6:	80 93 25 32 	sts	0x3225, r24
    61ba:	90 93 26 32 	sts	0x3226, r25
	// div  = 1024
	// per  = 15625
	// => 14745600/14400/1024 => 1 samples per second
	
	// Set period/TOP value
	Sensors_Timer_1HZ.PER = 14400;
    61be:	e0 e4       	ldi	r30, 0x40	; 64
    61c0:	f9 e0       	ldi	r31, 0x09	; 9
    61c2:	80 e4       	ldi	r24, 0x40	; 64
    61c4:	98 e3       	ldi	r25, 0x38	; 56
    61c6:	86 a3       	std	Z+38, r24	; 0x26
    61c8:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	Sensors_Timer_1HZ.CTRLA = (Sensors_Timer_1HZ.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    61ca:	80 81       	ld	r24, Z
    61cc:	80 7f       	andi	r24, 0xF0	; 240
    61ce:	87 60       	ori	r24, 0x07	; 7
    61d0:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	Sensors_Timer_1HZ.INTCTRLA = (Sensors_Timer_1HZ.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    61d2:	86 81       	ldd	r24, Z+6	; 0x06
    61d4:	83 60       	ori	r24, 0x03	; 3
    61d6:	86 83       	std	Z+6, r24	; 0x06
	// per  = 256
	// => 14745600/8/256 => 8000 samples per second

	// Set period/TOP value

	Sensors_Timer_7200HZ.PER = 256; 				// 7.2khz
    61d8:	e0 e0       	ldi	r30, 0x00	; 0
    61da:	f9 e0       	ldi	r31, 0x09	; 9
    61dc:	80 e0       	ldi	r24, 0x00	; 0
    61de:	91 e0       	ldi	r25, 0x01	; 1
    61e0:	86 a3       	std	Z+38, r24	; 0x26
    61e2:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	Sensors_Timer_7200HZ.CTRLA = (Sensors_Timer_7200HZ.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;
    61e4:	80 81       	ld	r24, Z
    61e6:	80 7f       	andi	r24, 0xF0	; 240
    61e8:	84 60       	ori	r24, 0x04	; 4
    61ea:	80 83       	st	Z, r24

	// Enable CCA interrupt
	Sensors_Timer_7200HZ.INTCTRLA = (Sensors_Timer_7200HZ.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    61ec:	86 81       	ldd	r24, Z+6	; 0x06
    61ee:	83 60       	ori	r24, 0x03	; 3
    61f0:	86 83       	std	Z+6, r24	; 0x06

}
    61f2:	df 91       	pop	r29
    61f4:	cf 91       	pop	r28
    61f6:	1f 91       	pop	r17
    61f8:	0f 91       	pop	r16
    61fa:	ff 90       	pop	r15
    61fc:	08 95       	ret

000061fe <Sensors_ReadPower>:


uint16_t Sensors_ReadPower(void){
	return ADCA.powerResult;
    61fe:	e0 e0       	ldi	r30, 0x00	; 0
    6200:	f2 e0       	ldi	r31, 0x02	; 2
    6202:	22 89       	ldd	r18, Z+18	; 0x12
    6204:	33 89       	ldd	r19, Z+19	; 0x13
}
    6206:	c9 01       	movw	r24, r18
    6208:	08 95       	ret

0000620a <Sensors_ReadTemperature>:


uint16_t Sensors_ReadTemperature(void){
    620a:	0f 93       	push	r16
    620c:	1f 93       	push	r17
	uint32_t tmp =  ADCA.temperatureResult - zeroOffsetA ;
    620e:	e0 e0       	ldi	r30, 0x00	; 0
    6210:	f2 e0       	ldi	r31, 0x02	; 2
    6212:	64 89       	ldd	r22, Z+20	; 0x14
    6214:	75 89       	ldd	r23, Z+21	; 0x15
    6216:	00 91 74 4c 	lds	r16, 0x4C74
    621a:	10 91 75 4c 	lds	r17, 0x4C75
    621e:	60 1b       	sub	r22, r16
    6220:	71 0b       	sbc	r23, r17
    6222:	80 e0       	ldi	r24, 0x00	; 0
    6224:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t tmp2 = 0;

	tmp *= 11784;
    6226:	28 e0       	ldi	r18, 0x08	; 8
    6228:	3e e2       	ldi	r19, 0x2E	; 46
    622a:	40 e0       	ldi	r20, 0x00	; 0
    622c:	50 e0       	ldi	r21, 0x00	; 0
    622e:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <__mulsi3>
    6232:	9b 01       	movw	r18, r22
    6234:	ac 01       	movw	r20, r24
	tmp -= 3657728;
    6236:	8d e7       	ldi	r24, 0x7D	; 125
    6238:	93 e0       	ldi	r25, 0x03	; 3
    623a:	08 9f       	mul	r16, r24
    623c:	b0 01       	movw	r22, r0
    623e:	09 9f       	mul	r16, r25
    6240:	70 0d       	add	r23, r0
    6242:	18 9f       	mul	r17, r24
    6244:	70 0d       	add	r23, r0
    6246:	11 24       	eor	r1, r1
    6248:	80 e0       	ldi	r24, 0x00	; 0
    624a:	90 e0       	ldi	r25, 0x00	; 0
    624c:	60 50       	subi	r22, 0x00	; 0
    624e:	70 4d       	sbci	r23, 0xD0	; 208
    6250:	87 43       	sbci	r24, 0x37	; 55
    6252:	90 40       	sbci	r25, 0x00	; 0
	tmp += (893*zeroOffsetA);
    6254:	62 0f       	add	r22, r18
    6256:	73 1f       	adc	r23, r19
    6258:	84 1f       	adc	r24, r20
    625a:	95 1f       	adc	r25, r21
    625c:	2a e0       	ldi	r18, 0x0A	; 10
    625e:	30 e0       	ldi	r19, 0x00	; 0
    6260:	40 e0       	ldi	r20, 0x00	; 0
    6262:	50 e0       	ldi	r21, 0x00	; 0
    6264:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    6268:	ca 01       	movw	r24, r20
    626a:	b9 01       	movw	r22, r18
    626c:	20 e0       	ldi	r18, 0x00	; 0
    626e:	30 e1       	ldi	r19, 0x10	; 16
    6270:	20 1b       	sub	r18, r16
    6272:	31 0b       	sbc	r19, r17
    6274:	40 e0       	ldi	r20, 0x00	; 0
    6276:	50 e0       	ldi	r21, 0x00	; 0
    6278:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    627c:	c9 01       	movw	r24, r18
	tmp /= 10;
	tmp2 = tmp / (4096 - zeroOffsetA);

	return tmp2;
}
    627e:	1f 91       	pop	r17
    6280:	0f 91       	pop	r16
    6282:	08 95       	ret

00006284 <Sensors_ReadHumidity>:

uint16_t Sensors_ReadHumidity(void){
    6284:	ef 92       	push	r14
    6286:	ff 92       	push	r15
    6288:	0f 93       	push	r16
    628a:	1f 93       	push	r17
    uint32_t tmp =  ADCA.humidityResult - zeroOffsetA;
    628c:	e0 e0       	ldi	r30, 0x00	; 0
    628e:	f2 e0       	ldi	r31, 0x02	; 2
    6290:	66 89       	ldd	r22, Z+22	; 0x16
    6292:	77 89       	ldd	r23, Z+23	; 0x17
    6294:	00 91 74 4c 	lds	r16, 0x4C74
    6298:	10 91 75 4c 	lds	r17, 0x4C75
    629c:	60 1b       	sub	r22, r16
    629e:	71 0b       	sbc	r23, r17
    62a0:	80 e0       	ldi	r24, 0x00	; 0
    62a2:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t tmp2 = 0;
    uint32_t tmp3, tmp4;

    tmp *= 19554;
    62a4:	22 e6       	ldi	r18, 0x62	; 98
    62a6:	3c e4       	ldi	r19, 0x4C	; 76
    62a8:	40 e0       	ldi	r20, 0x00	; 0
    62aa:	50 e0       	ldi	r21, 0x00	; 0
    62ac:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <__mulsi3>
    62b0:	9b 01       	movw	r18, r22
    62b2:	ac 01       	movw	r20, r24
    tmp -= 9756672;
    62b4:	8e e4       	ldi	r24, 0x4E	; 78
    62b6:	99 e0       	ldi	r25, 0x09	; 9
    62b8:	08 9f       	mul	r16, r24
    62ba:	b0 01       	movw	r22, r0
    62bc:	09 9f       	mul	r16, r25
    62be:	70 0d       	add	r23, r0
    62c0:	18 9f       	mul	r17, r24
    62c2:	70 0d       	add	r23, r0
    62c4:	11 24       	eor	r1, r1
    62c6:	80 e0       	ldi	r24, 0x00	; 0
    62c8:	90 e0       	ldi	r25, 0x00	; 0
    62ca:	60 50       	subi	r22, 0x00	; 0
    62cc:	70 4e       	sbci	r23, 0xE0	; 224
    62ce:	84 49       	sbci	r24, 0x94	; 148
    62d0:	90 40       	sbci	r25, 0x00	; 0
    tmp += (2382*zeroOffsetA);
    tmp3 = tmp / (4096 - zeroOffsetA);       // %RH * 100
    62d2:	62 0f       	add	r22, r18
    62d4:	73 1f       	adc	r23, r19
    62d6:	84 1f       	adc	r24, r20
    62d8:	95 1f       	adc	r25, r21
    62da:	20 e0       	ldi	r18, 0x00	; 0
    62dc:	30 e1       	ldi	r19, 0x10	; 16
    62de:	20 1b       	sub	r18, r16
    62e0:	31 0b       	sbc	r19, r17
    62e2:	40 e0       	ldi	r20, 0x00	; 0
    62e4:	50 e0       	ldi	r21, 0x00	; 0
    62e6:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    62ea:	ca 01       	movw	r24, r20
    tmp3 *= 10000;                          // %RH * 1000,000

    tmp4 = 216*quickTemperature;                                      // use temp to offset
    62ec:	e0 90 40 2d 	lds	r14, 0x2D40
    62f0:	48 ed       	ldi	r20, 0xD8	; 216
    62f2:	e4 9e       	mul	r14, r20
    62f4:	70 01       	movw	r14, r0
    62f6:	11 24       	eor	r1, r1
    62f8:	00 27       	eor	r16, r16
    62fa:	f7 fc       	sbrc	r15, 7
    62fc:	00 95       	com	r16
    62fe:	10 2f       	mov	r17, r16
    6300:	b9 01       	movw	r22, r18
    6302:	20 e1       	ldi	r18, 0x10	; 16
    6304:	37 e2       	ldi	r19, 0x27	; 39
    6306:	40 e0       	ldi	r20, 0x00	; 0
    6308:	50 e0       	ldi	r21, 0x00	; 0
    630a:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <__mulsi3>
    630e:	24 ef       	ldi	r18, 0xF4	; 244
    6310:	3b e9       	ldi	r19, 0x9B	; 155
    6312:	41 e0       	ldi	r20, 0x01	; 1
    6314:	50 e0       	ldi	r21, 0x00	; 0
    6316:	2e 19       	sub	r18, r14
    6318:	3f 09       	sbc	r19, r15
    631a:	40 0b       	sbc	r20, r16
    631c:	51 0b       	sbc	r21, r17
    631e:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    6322:	c9 01       	movw	r24, r18
    tmp4 = 105460 - tmp4;
    tmp2 = tmp3 / tmp4;

    return tmp2;
}
    6324:	1f 91       	pop	r17
    6326:	0f 91       	pop	r16
    6328:	ff 90       	pop	r15
    632a:	ef 90       	pop	r14
    632c:	08 95       	ret

0000632e <Sensors_ReadMicrophone>:

uint8_t Sensors_ReadMicrophone(void){
	return ADCB.microphoneResult/16;
    632e:	e0 e4       	ldi	r30, 0x40	; 64
    6330:	f2 e0       	ldi	r31, 0x02	; 2
    6332:	84 89       	ldd	r24, Z+20	; 0x14
    6334:	95 89       	ldd	r25, Z+21	; 0x15
    6336:	24 e0       	ldi	r18, 0x04	; 4
    6338:	96 95       	lsr	r25
    633a:	87 95       	ror	r24
    633c:	2a 95       	dec	r18
    633e:	e1 f7       	brne	.-8      	; 0x6338 <Sensors_ReadMicrophone+0xa>
}
    6340:	08 95       	ret

00006342 <Sensors_ReadPressure>:

uint16_t Sensors_ReadPressure(void){
    6342:	0f 93       	push	r16
    6344:	1f 93       	push	r17
	uint32_t tmp =  ADCB.pressureResult - zeroOffsetB;
    6346:	e0 e4       	ldi	r30, 0x40	; 64
    6348:	f2 e0       	ldi	r31, 0x02	; 2
    634a:	62 89       	ldd	r22, Z+18	; 0x12
    634c:	73 89       	ldd	r23, Z+19	; 0x13
    634e:	00 91 25 32 	lds	r16, 0x3225
    6352:	10 91 26 32 	lds	r17, 0x3226
    6356:	60 1b       	sub	r22, r16
    6358:	71 0b       	sbc	r23, r17
    635a:	80 e0       	ldi	r24, 0x00	; 0
    635c:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t tmp2 = 0;

    tmp *= 13889;
    635e:	21 e4       	ldi	r18, 0x41	; 65
    6360:	36 e3       	ldi	r19, 0x36	; 54
    6362:	40 e0       	ldi	r20, 0x00	; 0
    6364:	50 e0       	ldi	r21, 0x00	; 0
    6366:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <__mulsi3>
    tmp += 4325376;
    636a:	20 e2       	ldi	r18, 0x20	; 32
    636c:	34 e0       	ldi	r19, 0x04	; 4
    636e:	a9 01       	movw	r20, r18
    6370:	04 9f       	mul	r16, r20
    6372:	90 01       	movw	r18, r0
    6374:	05 9f       	mul	r16, r21
    6376:	30 0d       	add	r19, r0
    6378:	14 9f       	mul	r17, r20
    637a:	30 0d       	add	r19, r0
    637c:	11 24       	eor	r1, r1
    637e:	40 e0       	ldi	r20, 0x00	; 0
    6380:	50 e0       	ldi	r21, 0x00	; 0
    6382:	62 1b       	sub	r22, r18
    6384:	73 0b       	sbc	r23, r19
    6386:	84 0b       	sbc	r24, r20
    6388:	95 0b       	sbc	r25, r21
    tmp -= (1056*zeroOffsetB);
    638a:	60 50       	subi	r22, 0x00	; 0
    638c:	70 40       	sbci	r23, 0x00	; 0
    638e:	8e 4b       	sbci	r24, 0xBE	; 190
    6390:	9f 4f       	sbci	r25, 0xFF	; 255
    6392:	2a e0       	ldi	r18, 0x0A	; 10
    6394:	30 e0       	ldi	r19, 0x00	; 0
    6396:	40 e0       	ldi	r20, 0x00	; 0
    6398:	50 e0       	ldi	r21, 0x00	; 0
    639a:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    639e:	ca 01       	movw	r24, r20
    63a0:	b9 01       	movw	r22, r18
    63a2:	20 e0       	ldi	r18, 0x00	; 0
    63a4:	30 e1       	ldi	r19, 0x10	; 16
    63a6:	20 1b       	sub	r18, r16
    63a8:	31 0b       	sbc	r19, r17
    63aa:	40 e0       	ldi	r20, 0x00	; 0
    63ac:	50 e0       	ldi	r21, 0x00	; 0
    63ae:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    63b2:	c9 01       	movw	r24, r18
    tmp /= 10;
    tmp2 = tmp / (4096 - zeroOffsetB);

    return tmp2;
}
    63b4:	1f 91       	pop	r17
    63b6:	0f 91       	pop	r16
    63b8:	08 95       	ret

000063ba <Sensors_ResetTemperatureBuffers>:

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    63ba:	10 92 2c 2d 	sts	0x2D2C, r1
    63be:	10 92 2d 2d 	sts	0x2D2D, r1
  	temperatureBufferToWriteTo = 1;
    63c2:	81 e0       	ldi	r24, 0x01	; 1
    63c4:	80 93 a6 2a 	sts	0x2AA6, r24
	okToSendTemperatureBuffer1 = false;
    63c8:	10 92 2a 2d 	sts	0x2D2A, r1
	okToSendTemperatureBuffer2 = false;
    63cc:	10 92 2b 2d 	sts	0x2D2B, r1
}
    63d0:	08 95       	ret

000063d2 <Sensors_ResetPressureBuffers>:

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    63d2:	10 92 30 2d 	sts	0x2D30, r1
    63d6:	10 92 31 2d 	sts	0x2D31, r1
	pressureBufferToWriteTo = 1;
    63da:	81 e0       	ldi	r24, 0x01	; 1
    63dc:	80 93 a7 2a 	sts	0x2AA7, r24
	okToSendPressureBuffer1 = false;
    63e0:	10 92 2e 2d 	sts	0x2D2E, r1
	okToSendPressureBuffer2 = false;
    63e4:	10 92 2f 2d 	sts	0x2D2F, r1
}
    63e8:	08 95       	ret

000063ea <Sensors_ResetHumidityBuffers>:

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    63ea:	10 92 34 2d 	sts	0x2D34, r1
    63ee:	10 92 35 2d 	sts	0x2D35, r1
	humidityBufferToWriteTo = 1;
    63f2:	81 e0       	ldi	r24, 0x01	; 1
    63f4:	80 93 a8 2a 	sts	0x2AA8, r24
	okToSendHumidityBuffer1 = false;
    63f8:	10 92 32 2d 	sts	0x2D32, r1
	okToSendHumidityBuffer2 = false;
    63fc:	10 92 33 2d 	sts	0x2D33, r1
}
    6400:	08 95       	ret

00006402 <Sensors_ResetMicrophoneBuffers>:

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    6402:	10 92 38 2d 	sts	0x2D38, r1
    6406:	10 92 39 2d 	sts	0x2D39, r1
	microphoneBufferToWriteTo = 1;
    640a:	81 e0       	ldi	r24, 0x01	; 1
    640c:	80 93 a9 2a 	sts	0x2AA9, r24
	okToSendMicrophoneBuffer1 = false;
    6410:	10 92 36 2d 	sts	0x2D36, r1
	okToSendMicrophoneBuffer2 = false;
    6414:	10 92 37 2d 	sts	0x2D37, r1
}
    6418:	08 95       	ret

0000641a <Sensors_ResetLightBuffers>:

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    641a:	10 92 3c 2d 	sts	0x2D3C, r1
    641e:	10 92 3d 2d 	sts	0x2D3D, r1
	lightBufferToWriteTo = 1;
    6422:	81 e0       	ldi	r24, 0x01	; 1
    6424:	80 93 aa 2a 	sts	0x2AAA, r24
	okToSendLightBuffer1 = false;
    6428:	10 92 3a 2d 	sts	0x2D3A, r1
	okToSendLightBuffer2 = false;
    642c:	10 92 3b 2d 	sts	0x2D3B, r1
}
    6430:	08 95       	ret

00006432 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6432:	aa ec       	ldi	r26, 0xCA	; 202
    6434:	b1 e0       	ldi	r27, 0x01	; 1
    6436:	92 e0       	ldi	r25, 0x02	; 2
    6438:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
    643a:	e8 2f       	mov	r30, r24
    643c:	f0 e0       	ldi	r31, 0x00	; 0
    643e:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    6440:	1c 92       	st	X, r1

	return result;
}
    6442:	8e 2f       	mov	r24, r30
    6444:	08 95       	ret

00006446 <__vector_83>:


ISR(Sensors_Timer_1HZ_vect)
{
    6446:	1f 92       	push	r1
    6448:	0f 92       	push	r0
    644a:	0f b6       	in	r0, 0x3f	; 63
    644c:	0f 92       	push	r0
    644e:	0b b6       	in	r0, 0x3b	; 59
    6450:	0f 92       	push	r0
    6452:	11 24       	eor	r1, r1
    6454:	6f 92       	push	r6
    6456:	7f 92       	push	r7
    6458:	8f 92       	push	r8
    645a:	9f 92       	push	r9
    645c:	af 92       	push	r10
    645e:	bf 92       	push	r11
    6460:	cf 92       	push	r12
    6462:	df 92       	push	r13
    6464:	ef 92       	push	r14
    6466:	ff 92       	push	r15
    6468:	0f 93       	push	r16
    646a:	1f 93       	push	r17
    646c:	2f 93       	push	r18
    646e:	3f 93       	push	r19
    6470:	4f 93       	push	r20
    6472:	5f 93       	push	r21
    6474:	6f 93       	push	r22
    6476:	7f 93       	push	r23
    6478:	8f 93       	push	r24
    647a:	9f 93       	push	r25
    647c:	af 93       	push	r26
    647e:	bf 93       	push	r27
    6480:	cf 93       	push	r28
    6482:	df 93       	push	r29
    6484:	ef 93       	push	r30
    6486:	ff 93       	push	r31
	UNIX_Time++;
    6488:	80 91 1a 2d 	lds	r24, 0x2D1A
    648c:	90 91 1b 2d 	lds	r25, 0x2D1B
    6490:	a0 91 1c 2d 	lds	r26, 0x2D1C
    6494:	b0 91 1d 2d 	lds	r27, 0x2D1D
    6498:	01 96       	adiw	r24, 0x01	; 1
    649a:	a1 1d       	adc	r26, r1
    649c:	b1 1d       	adc	r27, r1
    649e:	80 93 1a 2d 	sts	0x2D1A, r24
    64a2:	90 93 1b 2d 	sts	0x2D1B, r25
    64a6:	a0 93 1c 2d 	sts	0x2D1C, r26
    64aa:	b0 93 1d 2d 	sts	0x2D1D, r27
	
	if(recording){
    64ae:	80 91 e3 2c 	lds	r24, 0x2CE3
    64b2:	88 23       	and	r24, r24
    64b4:	09 f4       	brne	.+2      	; 0x64b8 <__vector_83+0x72>
    64b6:	1e c3       	rjmp	.+1596   	; 0x6af4 <__vector_83+0x6ae>
	  rtcBlockCounter++;
    64b8:	80 91 3f 2d 	lds	r24, 0x2D3F
    64bc:	8f 5f       	subi	r24, 0xFF	; 255
    64be:	80 93 3f 2d 	sts	0x2D3F, r24
	  if(rtcBlockCounter == 0){
    64c2:	88 23       	and	r24, r24
    64c4:	19 f4       	brne	.+6      	; 0x64cc <__vector_83+0x86>
	    okToSendRTCBlock = true;
    64c6:	81 e0       	ldi	r24, 0x01	; 1
    64c8:	80 93 3e 2d 	sts	0x2D3E, r24
	  }

	  if(wantToRecordTemperature){
    64cc:	80 91 21 26 	lds	r24, 0x2621
    64d0:	88 23       	and	r24, r24
    64d2:	09 f4       	brne	.+2      	; 0x64d6 <__vector_83+0x90>
    64d4:	8b c0       	rjmp	.+278    	; 0x65ec <__vector_83+0x1a6>
		  if(temperatureBufferToWriteTo == 1){
    64d6:	80 91 a6 2a 	lds	r24, 0x2AA6
    64da:	81 30       	cpi	r24, 0x01	; 1
    64dc:	09 f0       	breq	.+2      	; 0x64e0 <__vector_83+0x9a>
    64de:	43 c0       	rjmp	.+134    	; 0x6566 <__vector_83+0x120>
			  if(temperatureBufferCounter == 0){
    64e0:	80 91 2c 2d 	lds	r24, 0x2D2C
    64e4:	90 91 2d 2d 	lds	r25, 0x2D2D
    64e8:	89 2b       	or	r24, r25
    64ea:	51 f4       	brne	.+20     	; 0x6500 <__vector_83+0xba>
				  temperatureSampleStartTime1 = Time_Get32BitTimer();
    64ec:	0e 94 b0 02 	call	0x560	; 0x560 <Time_Get32BitTimer>
    64f0:	60 93 e4 2c 	sts	0x2CE4, r22
    64f4:	70 93 e5 2c 	sts	0x2CE5, r23
    64f8:	80 93 e6 2c 	sts	0x2CE6, r24
    64fc:	90 93 e7 2c 	sts	0x2CE7, r25
			  }
			  temperatureBuffer1[temperatureBufferCounter] = Sensors_ReadTemperature();
    6500:	00 91 2c 2d 	lds	r16, 0x2D2C
    6504:	10 91 2d 2d 	lds	r17, 0x2D2D
    6508:	0e 94 05 31 	call	0x620a	; 0x620a <Sensors_ReadTemperature>
    650c:	00 0f       	add	r16, r16
    650e:	11 1f       	adc	r17, r17
    6510:	03 56       	subi	r16, 0x63	; 99
    6512:	1a 4b       	sbci	r17, 0xBA	; 186
    6514:	f8 01       	movw	r30, r16
    6516:	80 83       	st	Z, r24
    6518:	91 83       	std	Z+1, r25	; 0x01
			  quickTemperature = temperatureBuffer1[temperatureBufferCounter]/10;
    651a:	20 91 2c 2d 	lds	r18, 0x2D2C
    651e:	30 91 2d 2d 	lds	r19, 0x2D2D
    6522:	f9 01       	movw	r30, r18
    6524:	ee 0f       	add	r30, r30
    6526:	ff 1f       	adc	r31, r31
    6528:	e3 56       	subi	r30, 0x63	; 99
    652a:	fa 4b       	sbci	r31, 0xBA	; 186
    652c:	80 81       	ld	r24, Z
    652e:	91 81       	ldd	r25, Z+1	; 0x01
    6530:	6a e0       	ldi	r22, 0x0A	; 10
    6532:	70 e0       	ldi	r23, 0x00	; 0
    6534:	0e 94 b3 4e 	call	0x9d66	; 0x9d66 <__udivmodhi4>
    6538:	60 93 40 2d 	sts	0x2D40, r22
			  temperatureBufferCounter++;
    653c:	2f 5f       	subi	r18, 0xFF	; 255
    653e:	3f 4f       	sbci	r19, 0xFF	; 255
    6540:	20 93 2c 2d 	sts	0x2D2C, r18
    6544:	30 93 2d 2d 	sts	0x2D2D, r19
			  if(temperatureBufferCounter == temperatureNumberOfSamples){
    6548:	2a 30       	cpi	r18, 0x0A	; 10
    654a:	31 05       	cpc	r19, r1
    654c:	09 f0       	breq	.+2      	; 0x6550 <__vector_83+0x10a>
    654e:	4e c0       	rjmp	.+156    	; 0x65ec <__vector_83+0x1a6>
				  temperatureBufferCounter=0;
    6550:	10 92 2c 2d 	sts	0x2D2C, r1
    6554:	10 92 2d 2d 	sts	0x2D2D, r1
				  temperatureBufferToWriteTo = 2;
    6558:	82 e0       	ldi	r24, 0x02	; 2
    655a:	80 93 a6 2a 	sts	0x2AA6, r24
				  okToSendTemperatureBuffer1 = true;
    655e:	81 e0       	ldi	r24, 0x01	; 1
    6560:	80 93 2a 2d 	sts	0x2D2A, r24
    6564:	43 c0       	rjmp	.+134    	; 0x65ec <__vector_83+0x1a6>
			  }
		  } else if (temperatureBufferToWriteTo == 2){
    6566:	82 30       	cpi	r24, 0x02	; 2
    6568:	09 f0       	breq	.+2      	; 0x656c <__vector_83+0x126>
    656a:	40 c0       	rjmp	.+128    	; 0x65ec <__vector_83+0x1a6>
			  if(temperatureBufferCounter == 0){
    656c:	80 91 2c 2d 	lds	r24, 0x2D2C
    6570:	90 91 2d 2d 	lds	r25, 0x2D2D
    6574:	89 2b       	or	r24, r25
    6576:	51 f4       	brne	.+20     	; 0x658c <__vector_83+0x146>
				  temperatureSampleStartTime2 = Time_Get32BitTimer();
    6578:	0e 94 b0 02 	call	0x560	; 0x560 <Time_Get32BitTimer>
    657c:	60 93 e8 2c 	sts	0x2CE8, r22
    6580:	70 93 e9 2c 	sts	0x2CE9, r23
    6584:	80 93 ea 2c 	sts	0x2CEA, r24
    6588:	90 93 eb 2c 	sts	0x2CEB, r25
			  }
			  temperatureBuffer2[temperatureBufferCounter] = Sensors_ReadTemperature();
    658c:	00 91 2c 2d 	lds	r16, 0x2D2C
    6590:	10 91 2d 2d 	lds	r17, 0x2D2D
    6594:	0e 94 05 31 	call	0x620a	; 0x620a <Sensors_ReadTemperature>
    6598:	00 0f       	add	r16, r16
    659a:	11 1f       	adc	r17, r17
    659c:	06 54       	subi	r16, 0x46	; 70
    659e:	19 4b       	sbci	r17, 0xB9	; 185
    65a0:	f8 01       	movw	r30, r16
    65a2:	80 83       	st	Z, r24
    65a4:	91 83       	std	Z+1, r25	; 0x01
			  quickTemperature = temperatureBuffer2[temperatureBufferCounter]/10;
    65a6:	20 91 2c 2d 	lds	r18, 0x2D2C
    65aa:	30 91 2d 2d 	lds	r19, 0x2D2D
    65ae:	f9 01       	movw	r30, r18
    65b0:	ee 0f       	add	r30, r30
    65b2:	ff 1f       	adc	r31, r31
    65b4:	e6 54       	subi	r30, 0x46	; 70
    65b6:	f9 4b       	sbci	r31, 0xB9	; 185
    65b8:	80 81       	ld	r24, Z
    65ba:	91 81       	ldd	r25, Z+1	; 0x01
    65bc:	6a e0       	ldi	r22, 0x0A	; 10
    65be:	70 e0       	ldi	r23, 0x00	; 0
    65c0:	0e 94 b3 4e 	call	0x9d66	; 0x9d66 <__udivmodhi4>
    65c4:	60 93 40 2d 	sts	0x2D40, r22
			  temperatureBufferCounter++;
    65c8:	2f 5f       	subi	r18, 0xFF	; 255
    65ca:	3f 4f       	sbci	r19, 0xFF	; 255
    65cc:	20 93 2c 2d 	sts	0x2D2C, r18
    65d0:	30 93 2d 2d 	sts	0x2D2D, r19
			  if(temperatureBufferCounter == temperatureNumberOfSamples){
    65d4:	2a 30       	cpi	r18, 0x0A	; 10
    65d6:	31 05       	cpc	r19, r1
    65d8:	49 f4       	brne	.+18     	; 0x65ec <__vector_83+0x1a6>
				  temperatureBufferCounter=0;
    65da:	10 92 2c 2d 	sts	0x2D2C, r1
    65de:	10 92 2d 2d 	sts	0x2D2D, r1
				  temperatureBufferToWriteTo = 1;
    65e2:	81 e0       	ldi	r24, 0x01	; 1
    65e4:	80 93 a6 2a 	sts	0x2AA6, r24
				  okToSendTemperatureBuffer2 = true;
    65e8:	80 93 2b 2d 	sts	0x2D2B, r24
			  }
		  }
	  }

	  if(wantToRecordHumidity){
    65ec:	80 91 23 26 	lds	r24, 0x2623
    65f0:	88 23       	and	r24, r24
    65f2:	09 f4       	brne	.+2      	; 0x65f6 <__vector_83+0x1b0>
    65f4:	8b c0       	rjmp	.+278    	; 0x670c <__vector_83+0x2c6>
		  if(humidityBufferToWriteTo == 1){
    65f6:	80 91 a8 2a 	lds	r24, 0x2AA8
    65fa:	81 30       	cpi	r24, 0x01	; 1
    65fc:	09 f0       	breq	.+2      	; 0x6600 <__vector_83+0x1ba>
    65fe:	43 c0       	rjmp	.+134    	; 0x6686 <__vector_83+0x240>
			  if(humidityBufferCounter == 0){
    6600:	80 91 34 2d 	lds	r24, 0x2D34
    6604:	90 91 35 2d 	lds	r25, 0x2D35
    6608:	89 2b       	or	r24, r25
    660a:	51 f4       	brne	.+20     	; 0x6620 <__vector_83+0x1da>
				  humiditySampleStartTime1 = Time_Get32BitTimer();
    660c:	0e 94 b0 02 	call	0x560	; 0x560 <Time_Get32BitTimer>
    6610:	60 93 ec 2c 	sts	0x2CEC, r22
    6614:	70 93 ed 2c 	sts	0x2CED, r23
    6618:	80 93 ee 2c 	sts	0x2CEE, r24
    661c:	90 93 ef 2c 	sts	0x2CEF, r25
			  }
			  humidityBuffer1[humidityBufferCounter] = Sensors_ReadHumidity();
    6620:	00 91 34 2d 	lds	r16, 0x2D34
    6624:	10 91 35 2d 	lds	r17, 0x2D35
    6628:	0e 94 42 31 	call	0x6284	; 0x6284 <Sensors_ReadHumidity>
    662c:	00 0f       	add	r16, r16
    662e:	11 1f       	adc	r17, r17
    6630:	02 5f       	subi	r16, 0xF2	; 242
    6632:	18 4b       	sbci	r17, 0xB8	; 184
    6634:	f8 01       	movw	r30, r16
    6636:	80 83       	st	Z, r24
    6638:	91 83       	std	Z+1, r25	; 0x01
			  quickHumidity = humidityBuffer1[humidityBufferCounter]/10;
    663a:	20 91 34 2d 	lds	r18, 0x2D34
    663e:	30 91 35 2d 	lds	r19, 0x2D35
    6642:	f9 01       	movw	r30, r18
    6644:	ee 0f       	add	r30, r30
    6646:	ff 1f       	adc	r31, r31
    6648:	e2 5f       	subi	r30, 0xF2	; 242
    664a:	f8 4b       	sbci	r31, 0xB8	; 184
    664c:	80 81       	ld	r24, Z
    664e:	91 81       	ldd	r25, Z+1	; 0x01
    6650:	6a e0       	ldi	r22, 0x0A	; 10
    6652:	70 e0       	ldi	r23, 0x00	; 0
    6654:	0e 94 b3 4e 	call	0x9d66	; 0x9d66 <__udivmodhi4>
    6658:	60 93 41 2d 	sts	0x2D41, r22
			  humidityBufferCounter++;
    665c:	2f 5f       	subi	r18, 0xFF	; 255
    665e:	3f 4f       	sbci	r19, 0xFF	; 255
    6660:	20 93 34 2d 	sts	0x2D34, r18
    6664:	30 93 35 2d 	sts	0x2D35, r19
			  if(humidityBufferCounter == humidityNumberOfSamples){
    6668:	2a 30       	cpi	r18, 0x0A	; 10
    666a:	31 05       	cpc	r19, r1
    666c:	09 f0       	breq	.+2      	; 0x6670 <__vector_83+0x22a>
    666e:	4e c0       	rjmp	.+156    	; 0x670c <__vector_83+0x2c6>
				  humidityBufferCounter=0;
    6670:	10 92 34 2d 	sts	0x2D34, r1
    6674:	10 92 35 2d 	sts	0x2D35, r1
				  humidityBufferToWriteTo = 2;
    6678:	82 e0       	ldi	r24, 0x02	; 2
    667a:	80 93 a8 2a 	sts	0x2AA8, r24
				  okToSendHumidityBuffer1 = true;
    667e:	81 e0       	ldi	r24, 0x01	; 1
    6680:	80 93 32 2d 	sts	0x2D32, r24
    6684:	43 c0       	rjmp	.+134    	; 0x670c <__vector_83+0x2c6>
			  }
		  } else if (humidityBufferToWriteTo == 2){
    6686:	82 30       	cpi	r24, 0x02	; 2
    6688:	09 f0       	breq	.+2      	; 0x668c <__vector_83+0x246>
    668a:	40 c0       	rjmp	.+128    	; 0x670c <__vector_83+0x2c6>
			  if(humidityBufferCounter == 0){
    668c:	80 91 34 2d 	lds	r24, 0x2D34
    6690:	90 91 35 2d 	lds	r25, 0x2D35
    6694:	89 2b       	or	r24, r25
    6696:	51 f4       	brne	.+20     	; 0x66ac <__vector_83+0x266>
				  humiditySampleStartTime2 = Time_Get32BitTimer();
    6698:	0e 94 b0 02 	call	0x560	; 0x560 <Time_Get32BitTimer>
    669c:	60 93 f0 2c 	sts	0x2CF0, r22
    66a0:	70 93 f1 2c 	sts	0x2CF1, r23
    66a4:	80 93 f2 2c 	sts	0x2CF2, r24
    66a8:	90 93 f3 2c 	sts	0x2CF3, r25
			  }
			  humidityBuffer2[humidityBufferCounter] = Sensors_ReadHumidity();
    66ac:	00 91 34 2d 	lds	r16, 0x2D34
    66b0:	10 91 35 2d 	lds	r17, 0x2D35
    66b4:	0e 94 42 31 	call	0x6284	; 0x6284 <Sensors_ReadHumidity>
    66b8:	00 0f       	add	r16, r16
    66ba:	11 1f       	adc	r17, r17
    66bc:	00 5a       	subi	r16, 0xA0	; 160
    66be:	13 4b       	sbci	r17, 0xB3	; 179
    66c0:	f8 01       	movw	r30, r16
    66c2:	80 83       	st	Z, r24
    66c4:	91 83       	std	Z+1, r25	; 0x01
			  quickHumidity = humidityBuffer2[humidityBufferCounter]/10;
    66c6:	20 91 34 2d 	lds	r18, 0x2D34
    66ca:	30 91 35 2d 	lds	r19, 0x2D35
    66ce:	f9 01       	movw	r30, r18
    66d0:	ee 0f       	add	r30, r30
    66d2:	ff 1f       	adc	r31, r31
    66d4:	e0 5a       	subi	r30, 0xA0	; 160
    66d6:	f3 4b       	sbci	r31, 0xB3	; 179
    66d8:	80 81       	ld	r24, Z
    66da:	91 81       	ldd	r25, Z+1	; 0x01
    66dc:	6a e0       	ldi	r22, 0x0A	; 10
    66de:	70 e0       	ldi	r23, 0x00	; 0
    66e0:	0e 94 b3 4e 	call	0x9d66	; 0x9d66 <__udivmodhi4>
    66e4:	60 93 41 2d 	sts	0x2D41, r22
			  humidityBufferCounter++;
    66e8:	2f 5f       	subi	r18, 0xFF	; 255
    66ea:	3f 4f       	sbci	r19, 0xFF	; 255
    66ec:	20 93 34 2d 	sts	0x2D34, r18
    66f0:	30 93 35 2d 	sts	0x2D35, r19
			  if(humidityBufferCounter == humidityNumberOfSamples){
    66f4:	2a 30       	cpi	r18, 0x0A	; 10
    66f6:	31 05       	cpc	r19, r1
    66f8:	49 f4       	brne	.+18     	; 0x670c <__vector_83+0x2c6>
				  humidityBufferCounter=0;
    66fa:	10 92 34 2d 	sts	0x2D34, r1
    66fe:	10 92 35 2d 	sts	0x2D35, r1
				  humidityBufferToWriteTo = 1;
    6702:	81 e0       	ldi	r24, 0x01	; 1
    6704:	80 93 a8 2a 	sts	0x2AA8, r24
				  okToSendHumidityBuffer2 = true;
    6708:	80 93 33 2d 	sts	0x2D33, r24
			  }
	  	  }
	  }

	  if(wantToRecordPressure){
    670c:	80 91 22 26 	lds	r24, 0x2622
    6710:	88 23       	and	r24, r24
    6712:	09 f4       	brne	.+2      	; 0x6716 <__vector_83+0x2d0>
    6714:	8b c0       	rjmp	.+278    	; 0x682c <__vector_83+0x3e6>
		  if(pressureBufferToWriteTo == 1){
    6716:	80 91 a7 2a 	lds	r24, 0x2AA7
    671a:	81 30       	cpi	r24, 0x01	; 1
    671c:	09 f0       	breq	.+2      	; 0x6720 <__vector_83+0x2da>
    671e:	43 c0       	rjmp	.+134    	; 0x67a6 <__vector_83+0x360>
			  if(pressureBufferCounter == 0){
    6720:	80 91 30 2d 	lds	r24, 0x2D30
    6724:	90 91 31 2d 	lds	r25, 0x2D31
    6728:	89 2b       	or	r24, r25
    672a:	51 f4       	brne	.+20     	; 0x6740 <__vector_83+0x2fa>
				  pressureSampleStartTime1 = Time_Get32BitTimer();
    672c:	0e 94 b0 02 	call	0x560	; 0x560 <Time_Get32BitTimer>
    6730:	60 93 f4 2c 	sts	0x2CF4, r22
    6734:	70 93 f5 2c 	sts	0x2CF5, r23
    6738:	80 93 f6 2c 	sts	0x2CF6, r24
    673c:	90 93 f7 2c 	sts	0x2CF7, r25
			  }
			  pressureBuffer1[pressureBufferCounter] = Sensors_ReadPressure();
    6740:	00 91 30 2d 	lds	r16, 0x2D30
    6744:	10 91 31 2d 	lds	r17, 0x2D31
    6748:	0e 94 a1 31 	call	0x6342	; 0x6342 <Sensors_ReadPressure>
    674c:	00 0f       	add	r16, r16
    674e:	11 1f       	adc	r17, r17
    6750:	0a 5d       	subi	r16, 0xDA	; 218
    6752:	19 4c       	sbci	r17, 0xC9	; 201
    6754:	f8 01       	movw	r30, r16
    6756:	80 83       	st	Z, r24
    6758:	91 83       	std	Z+1, r25	; 0x01
			  quickPressure = pressureBuffer1[pressureBufferCounter]/10;
    675a:	20 91 30 2d 	lds	r18, 0x2D30
    675e:	30 91 31 2d 	lds	r19, 0x2D31
    6762:	f9 01       	movw	r30, r18
    6764:	ee 0f       	add	r30, r30
    6766:	ff 1f       	adc	r31, r31
    6768:	ea 5d       	subi	r30, 0xDA	; 218
    676a:	f9 4c       	sbci	r31, 0xC9	; 201
    676c:	80 81       	ld	r24, Z
    676e:	91 81       	ldd	r25, Z+1	; 0x01
    6770:	6a e0       	ldi	r22, 0x0A	; 10
    6772:	70 e0       	ldi	r23, 0x00	; 0
    6774:	0e 94 b3 4e 	call	0x9d66	; 0x9d66 <__udivmodhi4>
    6778:	60 93 42 2d 	sts	0x2D42, r22

			  pressureBufferCounter++;
    677c:	2f 5f       	subi	r18, 0xFF	; 255
    677e:	3f 4f       	sbci	r19, 0xFF	; 255
    6780:	20 93 30 2d 	sts	0x2D30, r18
    6784:	30 93 31 2d 	sts	0x2D31, r19
			  if(pressureBufferCounter == pressureNumberOfSamples){
    6788:	2a 30       	cpi	r18, 0x0A	; 10
    678a:	31 05       	cpc	r19, r1
    678c:	09 f0       	breq	.+2      	; 0x6790 <__vector_83+0x34a>
    678e:	4e c0       	rjmp	.+156    	; 0x682c <__vector_83+0x3e6>
				  pressureBufferCounter=0;
    6790:	10 92 30 2d 	sts	0x2D30, r1
    6794:	10 92 31 2d 	sts	0x2D31, r1
				  pressureBufferToWriteTo = 2;
    6798:	82 e0       	ldi	r24, 0x02	; 2
    679a:	80 93 a7 2a 	sts	0x2AA7, r24
				  okToSendPressureBuffer1 = true;
    679e:	81 e0       	ldi	r24, 0x01	; 1
    67a0:	80 93 2e 2d 	sts	0x2D2E, r24
    67a4:	43 c0       	rjmp	.+134    	; 0x682c <__vector_83+0x3e6>
			  }
		  } else if (pressureBufferToWriteTo == 2){
    67a6:	82 30       	cpi	r24, 0x02	; 2
    67a8:	09 f0       	breq	.+2      	; 0x67ac <__vector_83+0x366>
    67aa:	40 c0       	rjmp	.+128    	; 0x682c <__vector_83+0x3e6>
			  if(pressureBufferCounter == 0){
    67ac:	80 91 30 2d 	lds	r24, 0x2D30
    67b0:	90 91 31 2d 	lds	r25, 0x2D31
    67b4:	89 2b       	or	r24, r25
    67b6:	51 f4       	brne	.+20     	; 0x67cc <__vector_83+0x386>
				  pressureSampleStartTime2 = Time_Get32BitTimer();
    67b8:	0e 94 b0 02 	call	0x560	; 0x560 <Time_Get32BitTimer>
    67bc:	60 93 f8 2c 	sts	0x2CF8, r22
    67c0:	70 93 f9 2c 	sts	0x2CF9, r23
    67c4:	80 93 fa 2c 	sts	0x2CFA, r24
    67c8:	90 93 fb 2c 	sts	0x2CFB, r25
			  }
			  pressureBuffer2[pressureBufferCounter] = Sensors_ReadPressure();
    67cc:	00 91 30 2d 	lds	r16, 0x2D30
    67d0:	10 91 31 2d 	lds	r17, 0x2D31
    67d4:	0e 94 a1 31 	call	0x6342	; 0x6342 <Sensors_ReadPressure>
    67d8:	00 0f       	add	r16, r16
    67da:	11 1f       	adc	r17, r17
    67dc:	02 53       	subi	r16, 0x32	; 50
    67de:	19 4b       	sbci	r17, 0xB9	; 185
    67e0:	f8 01       	movw	r30, r16
    67e2:	80 83       	st	Z, r24
    67e4:	91 83       	std	Z+1, r25	; 0x01
			  quickPressure = pressureBuffer2[pressureBufferCounter]/10;
    67e6:	20 91 30 2d 	lds	r18, 0x2D30
    67ea:	30 91 31 2d 	lds	r19, 0x2D31
    67ee:	f9 01       	movw	r30, r18
    67f0:	ee 0f       	add	r30, r30
    67f2:	ff 1f       	adc	r31, r31
    67f4:	e2 53       	subi	r30, 0x32	; 50
    67f6:	f9 4b       	sbci	r31, 0xB9	; 185
    67f8:	80 81       	ld	r24, Z
    67fa:	91 81       	ldd	r25, Z+1	; 0x01
    67fc:	6a e0       	ldi	r22, 0x0A	; 10
    67fe:	70 e0       	ldi	r23, 0x00	; 0
    6800:	0e 94 b3 4e 	call	0x9d66	; 0x9d66 <__udivmodhi4>
    6804:	60 93 42 2d 	sts	0x2D42, r22
			  pressureBufferCounter++;
    6808:	2f 5f       	subi	r18, 0xFF	; 255
    680a:	3f 4f       	sbci	r19, 0xFF	; 255
    680c:	20 93 30 2d 	sts	0x2D30, r18
    6810:	30 93 31 2d 	sts	0x2D31, r19
			if(pressureBufferCounter == pressureNumberOfSamples){
    6814:	2a 30       	cpi	r18, 0x0A	; 10
    6816:	31 05       	cpc	r19, r1
    6818:	49 f4       	brne	.+18     	; 0x682c <__vector_83+0x3e6>
				pressureBufferCounter=0;
    681a:	10 92 30 2d 	sts	0x2D30, r1
    681e:	10 92 31 2d 	sts	0x2D31, r1
				pressureBufferToWriteTo = 1;
    6822:	81 e0       	ldi	r24, 0x01	; 1
    6824:	80 93 a7 2a 	sts	0x2AA7, r24
				okToSendPressureBuffer2 = true;
    6828:	80 93 2f 2d 	sts	0x2D2F, r24
			}
		  }
	  }

	  if(wantToRecordLight){
    682c:	80 91 24 26 	lds	r24, 0x2624
    6830:	88 23       	and	r24, r24
    6832:	09 f4       	brne	.+2      	; 0x6836 <__vector_83+0x3f0>
    6834:	81 c1       	rjmp	.+770    	; 0x6b38 <__vector_83+0x6f2>

		  Light_readColors();
    6836:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <Light_readColors>
		  Light_readColors();
    683a:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <Light_readColors>
		  Light_readColors();
    683e:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <Light_readColors>
	colors[blue]  = colors8[5]*256 + colors8[4];
	colors[clear] = colors8[7]*256 + colors8[6];
}

uint16_t Light_returnColor(uint8_t color){
	return colors[color];
    6842:	80 91 15 36 	lds	r24, 0x3615
    6846:	90 91 16 36 	lds	r25, 0x3616

		  quickLight = Light_returnColor(clear);
    684a:	80 93 43 2d 	sts	0x2D43, r24
    684e:	90 93 44 2d 	sts	0x2D44, r25

		  for(uint8_t j = 0; j < 4; j++){
			  tempLightResult[j] = 0;
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    6852:	e0 91 29 2d 	lds	r30, 0x2D29
    6856:	f0 e0       	ldi	r31, 0x00	; 0
    6858:	ee 0f       	add	r30, r30
    685a:	ff 1f       	adc	r31, r31
    685c:	ee 0f       	add	r30, r30
    685e:	ff 1f       	adc	r31, r31
    6860:	ee 57       	subi	r30, 0x7E	; 126
    6862:	f5 4d       	sbci	r31, 0xD5	; 213
    6864:	a0 80       	ld	r10, Z
    6866:	b1 80       	ldd	r11, Z+1	; 0x01
    6868:	c2 80       	ldd	r12, Z+2	; 0x02
    686a:	d3 80       	ldd	r13, Z+3	; 0x03
    686c:	ef ea       	ldi	r30, 0xAF	; 175
    686e:	fd e3       	ldi	r31, 0x3D	; 61
    6870:	cf e0       	ldi	r28, 0x0F	; 15
    6872:	d6 e3       	ldi	r29, 0x36	; 54
		  Light_readColors();

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
			  tempLightResult[j] = 0;
    6874:	10 82       	st	Z, r1
    6876:	11 82       	std	Z+1, r1	; 0x01
    6878:	12 82       	std	Z+2, r1	; 0x02
    687a:	13 82       	std	Z+3, r1	; 0x03
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
				  tempLightResult[j] += Light_returnColor(j);
    687c:	88 81       	ld	r24, Y
    687e:	99 81       	ldd	r25, Y+1	; 0x01
    6880:	3c 01       	movw	r6, r24
    6882:	88 24       	eor	r8, r8
    6884:	99 24       	eor	r9, r9
    6886:	ee 24       	eor	r14, r14
    6888:	ff 24       	eor	r15, r15
    688a:	87 01       	movw	r16, r14
    688c:	a6 01       	movw	r20, r12
    688e:	95 01       	movw	r18, r10
    6890:	e6 0c       	add	r14, r6
    6892:	f7 1c       	adc	r15, r7
    6894:	08 1d       	adc	r16, r8
    6896:	19 1d       	adc	r17, r9
    6898:	2a 0d       	add	r18, r10
    689a:	3b 1d       	adc	r19, r11
    689c:	4c 1d       	adc	r20, r12
    689e:	5d 1d       	adc	r21, r13

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
			  tempLightResult[j] = 0;
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    68a0:	da 01       	movw	r26, r20
    68a2:	c9 01       	movw	r24, r18
    68a4:	8a 19       	sub	r24, r10
    68a6:	9b 09       	sbc	r25, r11
    68a8:	ac 09       	sbc	r26, r12
    68aa:	bd 09       	sbc	r27, r13
    68ac:	80 50       	subi	r24, 0x00	; 0
    68ae:	9c 42       	sbci	r25, 0x2C	; 44
    68b0:	a1 40       	sbci	r26, 0x01	; 1
    68b2:	b0 40       	sbci	r27, 0x00	; 0
    68b4:	68 f3       	brcs	.-38     	; 0x6890 <__vector_83+0x44a>
    68b6:	e1 92       	st	Z+, r14
    68b8:	f1 92       	st	Z+, r15
    68ba:	01 93       	st	Z+, r16
    68bc:	11 93       	st	Z+, r17
    68be:	22 96       	adiw	r28, 0x02	; 2
		  Light_readColors();
		  Light_readColors();

		  quickLight = Light_returnColor(clear);

		  for(uint8_t j = 0; j < 4; j++){
    68c0:	8d e3       	ldi	r24, 0x3D	; 61
    68c2:	ef 3b       	cpi	r30, 0xBF	; 191
    68c4:	f8 07       	cpc	r31, r24
    68c6:	b1 f6       	brne	.-84     	; 0x6874 <__vector_83+0x42e>
			  for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
				  tempLightResult[j] += Light_returnColor(j);
			  }
		  }

		  if(lightBufferToWriteTo == 1){
    68c8:	80 91 aa 2a 	lds	r24, 0x2AAA
    68cc:	81 30       	cpi	r24, 0x01	; 1
    68ce:	09 f0       	breq	.+2      	; 0x68d2 <__vector_83+0x48c>
    68d0:	7b c0       	rjmp	.+246    	; 0x69c8 <__vector_83+0x582>
			  if(lightBufferCounter == 0){
    68d2:	80 91 3c 2d 	lds	r24, 0x2D3C
    68d6:	90 91 3d 2d 	lds	r25, 0x2D3D
    68da:	89 2b       	or	r24, r25
    68dc:	51 f4       	brne	.+20     	; 0x68f2 <__vector_83+0x4ac>
	  			  lightSampleStartTime1 = Time_Get32BitTimer();
    68de:	0e 94 b0 02 	call	0x560	; 0x560 <Time_Get32BitTimer>
    68e2:	60 93 04 2d 	sts	0x2D04, r22
    68e6:	70 93 05 2d 	sts	0x2D05, r23
    68ea:	80 93 06 2d 	sts	0x2D06, r24
    68ee:	90 93 07 2d 	sts	0x2D07, r25
			  }
			  lightBuffer1[lightBufferCounter] = tempLightResult[0];
    68f2:	20 91 3c 2d 	lds	r18, 0x2D3C
    68f6:	30 91 3d 2d 	lds	r19, 0x2D3D
    68fa:	f9 01       	movw	r30, r18
    68fc:	ee 0f       	add	r30, r30
    68fe:	ff 1f       	adc	r31, r31
    6900:	ee 0f       	add	r30, r30
    6902:	ff 1f       	adc	r31, r31
    6904:	e4 54       	subi	r30, 0x44	; 68
    6906:	ff 4a       	sbci	r31, 0xAF	; 175
    6908:	80 91 af 3d 	lds	r24, 0x3DAF
    690c:	90 91 b0 3d 	lds	r25, 0x3DB0
    6910:	a0 91 b1 3d 	lds	r26, 0x3DB1
    6914:	b0 91 b2 3d 	lds	r27, 0x3DB2
    6918:	80 83       	st	Z, r24
    691a:	91 83       	std	Z+1, r25	; 0x01
    691c:	a2 83       	std	Z+2, r26	; 0x02
    691e:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6920:	2f 5f       	subi	r18, 0xFF	; 255
    6922:	3f 4f       	sbci	r19, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = tempLightResult[1];
    6924:	f9 01       	movw	r30, r18
    6926:	ee 0f       	add	r30, r30
    6928:	ff 1f       	adc	r31, r31
    692a:	ee 0f       	add	r30, r30
    692c:	ff 1f       	adc	r31, r31
    692e:	e4 54       	subi	r30, 0x44	; 68
    6930:	ff 4a       	sbci	r31, 0xAF	; 175
    6932:	80 91 b3 3d 	lds	r24, 0x3DB3
    6936:	90 91 b4 3d 	lds	r25, 0x3DB4
    693a:	a0 91 b5 3d 	lds	r26, 0x3DB5
    693e:	b0 91 b6 3d 	lds	r27, 0x3DB6
    6942:	80 83       	st	Z, r24
    6944:	91 83       	std	Z+1, r25	; 0x01
    6946:	a2 83       	std	Z+2, r26	; 0x02
    6948:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    694a:	2f 5f       	subi	r18, 0xFF	; 255
    694c:	3f 4f       	sbci	r19, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = tempLightResult[2];
    694e:	f9 01       	movw	r30, r18
    6950:	ee 0f       	add	r30, r30
    6952:	ff 1f       	adc	r31, r31
    6954:	ee 0f       	add	r30, r30
    6956:	ff 1f       	adc	r31, r31
    6958:	e4 54       	subi	r30, 0x44	; 68
    695a:	ff 4a       	sbci	r31, 0xAF	; 175
    695c:	80 91 b7 3d 	lds	r24, 0x3DB7
    6960:	90 91 b8 3d 	lds	r25, 0x3DB8
    6964:	a0 91 b9 3d 	lds	r26, 0x3DB9
    6968:	b0 91 ba 3d 	lds	r27, 0x3DBA
    696c:	80 83       	st	Z, r24
    696e:	91 83       	std	Z+1, r25	; 0x01
    6970:	a2 83       	std	Z+2, r26	; 0x02
    6972:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6974:	2f 5f       	subi	r18, 0xFF	; 255
    6976:	3f 4f       	sbci	r19, 0xFF	; 255
			  lightBuffer1[lightBufferCounter] = tempLightResult[3];
    6978:	f9 01       	movw	r30, r18
    697a:	ee 0f       	add	r30, r30
    697c:	ff 1f       	adc	r31, r31
    697e:	ee 0f       	add	r30, r30
    6980:	ff 1f       	adc	r31, r31
    6982:	e4 54       	subi	r30, 0x44	; 68
    6984:	ff 4a       	sbci	r31, 0xAF	; 175
    6986:	80 91 bb 3d 	lds	r24, 0x3DBB
    698a:	90 91 bc 3d 	lds	r25, 0x3DBC
    698e:	a0 91 bd 3d 	lds	r26, 0x3DBD
    6992:	b0 91 be 3d 	lds	r27, 0x3DBE
    6996:	80 83       	st	Z, r24
    6998:	91 83       	std	Z+1, r25	; 0x01
    699a:	a2 83       	std	Z+2, r26	; 0x02
    699c:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    699e:	2f 5f       	subi	r18, 0xFF	; 255
    69a0:	3f 4f       	sbci	r19, 0xFF	; 255
    69a2:	20 93 3c 2d 	sts	0x2D3C, r18
    69a6:	30 93 3d 2d 	sts	0x2D3D, r19
			  if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    69aa:	28 32       	cpi	r18, 0x28	; 40
    69ac:	31 05       	cpc	r19, r1
    69ae:	09 f0       	breq	.+2      	; 0x69b2 <__vector_83+0x56c>
    69b0:	86 c0       	rjmp	.+268    	; 0x6abe <__vector_83+0x678>
				  lightBufferCounter=0;
    69b2:	10 92 3c 2d 	sts	0x2D3C, r1
    69b6:	10 92 3d 2d 	sts	0x2D3D, r1
				  lightBufferToWriteTo = 2;
    69ba:	82 e0       	ldi	r24, 0x02	; 2
    69bc:	80 93 aa 2a 	sts	0x2AAA, r24
				  okToSendLightBuffer1 = true;
    69c0:	81 e0       	ldi	r24, 0x01	; 1
    69c2:	80 93 3a 2d 	sts	0x2D3A, r24
    69c6:	7b c0       	rjmp	.+246    	; 0x6abe <__vector_83+0x678>
			  }
		  } else if (lightBufferToWriteTo == 2){
    69c8:	82 30       	cpi	r24, 0x02	; 2
    69ca:	09 f0       	breq	.+2      	; 0x69ce <__vector_83+0x588>
    69cc:	78 c0       	rjmp	.+240    	; 0x6abe <__vector_83+0x678>
			  if(lightBufferCounter == 0){
    69ce:	80 91 3c 2d 	lds	r24, 0x2D3C
    69d2:	90 91 3d 2d 	lds	r25, 0x2D3D
    69d6:	89 2b       	or	r24, r25
    69d8:	51 f4       	brne	.+20     	; 0x69ee <__vector_83+0x5a8>
				  lightSampleStartTime2 = Time_Get32BitTimer();
    69da:	0e 94 b0 02 	call	0x560	; 0x560 <Time_Get32BitTimer>
    69de:	60 93 08 2d 	sts	0x2D08, r22
    69e2:	70 93 09 2d 	sts	0x2D09, r23
    69e6:	80 93 0a 2d 	sts	0x2D0A, r24
    69ea:	90 93 0b 2d 	sts	0x2D0B, r25
			  }
			  lightBuffer2[lightBufferCounter] = tempLightResult[0];
    69ee:	20 91 3c 2d 	lds	r18, 0x2D3C
    69f2:	30 91 3d 2d 	lds	r19, 0x2D3D
    69f6:	f9 01       	movw	r30, r18
    69f8:	ee 0f       	add	r30, r30
    69fa:	ff 1f       	adc	r31, r31
    69fc:	ee 0f       	add	r30, r30
    69fe:	ff 1f       	adc	r31, r31
    6a00:	ed 53       	subi	r30, 0x3D	; 61
    6a02:	f2 4c       	sbci	r31, 0xC2	; 194
    6a04:	80 91 af 3d 	lds	r24, 0x3DAF
    6a08:	90 91 b0 3d 	lds	r25, 0x3DB0
    6a0c:	a0 91 b1 3d 	lds	r26, 0x3DB1
    6a10:	b0 91 b2 3d 	lds	r27, 0x3DB2
    6a14:	80 83       	st	Z, r24
    6a16:	91 83       	std	Z+1, r25	; 0x01
    6a18:	a2 83       	std	Z+2, r26	; 0x02
    6a1a:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6a1c:	2f 5f       	subi	r18, 0xFF	; 255
    6a1e:	3f 4f       	sbci	r19, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = tempLightResult[1];
    6a20:	f9 01       	movw	r30, r18
    6a22:	ee 0f       	add	r30, r30
    6a24:	ff 1f       	adc	r31, r31
    6a26:	ee 0f       	add	r30, r30
    6a28:	ff 1f       	adc	r31, r31
    6a2a:	ed 53       	subi	r30, 0x3D	; 61
    6a2c:	f2 4c       	sbci	r31, 0xC2	; 194
    6a2e:	80 91 b3 3d 	lds	r24, 0x3DB3
    6a32:	90 91 b4 3d 	lds	r25, 0x3DB4
    6a36:	a0 91 b5 3d 	lds	r26, 0x3DB5
    6a3a:	b0 91 b6 3d 	lds	r27, 0x3DB6
    6a3e:	80 83       	st	Z, r24
    6a40:	91 83       	std	Z+1, r25	; 0x01
    6a42:	a2 83       	std	Z+2, r26	; 0x02
    6a44:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6a46:	2f 5f       	subi	r18, 0xFF	; 255
    6a48:	3f 4f       	sbci	r19, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = tempLightResult[2];
    6a4a:	f9 01       	movw	r30, r18
    6a4c:	ee 0f       	add	r30, r30
    6a4e:	ff 1f       	adc	r31, r31
    6a50:	ee 0f       	add	r30, r30
    6a52:	ff 1f       	adc	r31, r31
    6a54:	ed 53       	subi	r30, 0x3D	; 61
    6a56:	f2 4c       	sbci	r31, 0xC2	; 194
    6a58:	80 91 b7 3d 	lds	r24, 0x3DB7
    6a5c:	90 91 b8 3d 	lds	r25, 0x3DB8
    6a60:	a0 91 b9 3d 	lds	r26, 0x3DB9
    6a64:	b0 91 ba 3d 	lds	r27, 0x3DBA
    6a68:	80 83       	st	Z, r24
    6a6a:	91 83       	std	Z+1, r25	; 0x01
    6a6c:	a2 83       	std	Z+2, r26	; 0x02
    6a6e:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6a70:	2f 5f       	subi	r18, 0xFF	; 255
    6a72:	3f 4f       	sbci	r19, 0xFF	; 255
			  lightBuffer2[lightBufferCounter] = tempLightResult[3];
    6a74:	f9 01       	movw	r30, r18
    6a76:	ee 0f       	add	r30, r30
    6a78:	ff 1f       	adc	r31, r31
    6a7a:	ee 0f       	add	r30, r30
    6a7c:	ff 1f       	adc	r31, r31
    6a7e:	ed 53       	subi	r30, 0x3D	; 61
    6a80:	f2 4c       	sbci	r31, 0xC2	; 194
    6a82:	80 91 bb 3d 	lds	r24, 0x3DBB
    6a86:	90 91 bc 3d 	lds	r25, 0x3DBC
    6a8a:	a0 91 bd 3d 	lds	r26, 0x3DBD
    6a8e:	b0 91 be 3d 	lds	r27, 0x3DBE
    6a92:	80 83       	st	Z, r24
    6a94:	91 83       	std	Z+1, r25	; 0x01
    6a96:	a2 83       	std	Z+2, r26	; 0x02
    6a98:	b3 83       	std	Z+3, r27	; 0x03
			  lightBufferCounter++;
    6a9a:	2f 5f       	subi	r18, 0xFF	; 255
    6a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    6a9e:	20 93 3c 2d 	sts	0x2D3C, r18
    6aa2:	30 93 3d 2d 	sts	0x2D3D, r19
			  if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    6aa6:	28 32       	cpi	r18, 0x28	; 40
    6aa8:	31 05       	cpc	r19, r1
    6aaa:	49 f4       	brne	.+18     	; 0x6abe <__vector_83+0x678>
				  lightBufferCounter=0;
    6aac:	10 92 3c 2d 	sts	0x2D3C, r1
    6ab0:	10 92 3d 2d 	sts	0x2D3D, r1
				  lightBufferToWriteTo = 1;
    6ab4:	81 e0       	ldi	r24, 0x01	; 1
    6ab6:	80 93 aa 2a 	sts	0x2AAA, r24
				  okToSendLightBuffer2 = true;
    6aba:	80 93 3b 2d 	sts	0x2D3B, r24
    6abe:	20 91 15 36 	lds	r18, 0x3615
    6ac2:	30 91 16 36 	lds	r19, 0x3616
			  }
		  }


		  if((Light_returnColor(clear) > 49000) && (gainSelector!= 0)){			// saturated -> decrease gain
    6ac6:	ef eb       	ldi	r30, 0xBF	; 191
    6ac8:	29 36       	cpi	r18, 0x69	; 105
    6aca:	3e 07       	cpc	r19, r30
    6acc:	30 f0       	brcs	.+12     	; 0x6ada <__vector_83+0x694>
    6ace:	80 91 29 2d 	lds	r24, 0x2D29
    6ad2:	88 23       	and	r24, r24
    6ad4:	11 f0       	breq	.+4      	; 0x6ada <__vector_83+0x694>
			  gainSelector--;
    6ad6:	81 50       	subi	r24, 0x01	; 1
    6ad8:	08 c0       	rjmp	.+16     	; 0x6aea <__vector_83+0x6a4>
			  Light_setGain();
		  } else if ((Light_returnColor(clear) < 16000) && (gainSelector!= 8)){			// too low  -> increase gain
    6ada:	20 58       	subi	r18, 0x80	; 128
    6adc:	3e 43       	sbci	r19, 0x3E	; 62
    6ade:	60 f5       	brcc	.+88     	; 0x6b38 <__vector_83+0x6f2>
    6ae0:	80 91 29 2d 	lds	r24, 0x2D29
    6ae4:	88 30       	cpi	r24, 0x08	; 8
    6ae6:	41 f1       	breq	.+80     	; 0x6b38 <__vector_83+0x6f2>
			  gainSelector++;
    6ae8:	8f 5f       	subi	r24, 0xFF	; 255
    6aea:	80 93 29 2d 	sts	0x2D29, r24
			  Light_setGain();
    6aee:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <Light_setGain>
    6af2:	22 c0       	rjmp	.+68     	; 0x6b38 <__vector_83+0x6f2>


	  }

	} else {
		quickTemperature = Sensors_ReadTemperature()/10;
    6af4:	0e 94 05 31 	call	0x620a	; 0x620a <Sensors_ReadTemperature>
    6af8:	6a e0       	ldi	r22, 0x0A	; 10
    6afa:	70 e0       	ldi	r23, 0x00	; 0
    6afc:	0e 94 b3 4e 	call	0x9d66	; 0x9d66 <__udivmodhi4>
    6b00:	60 93 40 2d 	sts	0x2D40, r22
		quickHumidity = Sensors_ReadHumidity()/10;
    6b04:	0e 94 42 31 	call	0x6284	; 0x6284 <Sensors_ReadHumidity>
    6b08:	6a e0       	ldi	r22, 0x0A	; 10
    6b0a:	70 e0       	ldi	r23, 0x00	; 0
    6b0c:	0e 94 b3 4e 	call	0x9d66	; 0x9d66 <__udivmodhi4>
    6b10:	60 93 41 2d 	sts	0x2D41, r22
		quickPressure = Sensors_ReadPressure()/10;
    6b14:	0e 94 a1 31 	call	0x6342	; 0x6342 <Sensors_ReadPressure>
    6b18:	6a e0       	ldi	r22, 0x0A	; 10
    6b1a:	70 e0       	ldi	r23, 0x00	; 0
    6b1c:	0e 94 b3 4e 	call	0x9d66	; 0x9d66 <__udivmodhi4>
    6b20:	60 93 42 2d 	sts	0x2D42, r22
		Light_readColors();
    6b24:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <Light_readColors>
    6b28:	80 91 15 36 	lds	r24, 0x3615
    6b2c:	90 91 16 36 	lds	r25, 0x3616
		quickLight = Light_returnColor(clear);
    6b30:	80 93 43 2d 	sts	0x2D43, r24
    6b34:	90 93 44 2d 	sts	0x2D44, r25
	}




}
    6b38:	ff 91       	pop	r31
    6b3a:	ef 91       	pop	r30
    6b3c:	df 91       	pop	r29
    6b3e:	cf 91       	pop	r28
    6b40:	bf 91       	pop	r27
    6b42:	af 91       	pop	r26
    6b44:	9f 91       	pop	r25
    6b46:	8f 91       	pop	r24
    6b48:	7f 91       	pop	r23
    6b4a:	6f 91       	pop	r22
    6b4c:	5f 91       	pop	r21
    6b4e:	4f 91       	pop	r20
    6b50:	3f 91       	pop	r19
    6b52:	2f 91       	pop	r18
    6b54:	1f 91       	pop	r17
    6b56:	0f 91       	pop	r16
    6b58:	ff 90       	pop	r15
    6b5a:	ef 90       	pop	r14
    6b5c:	df 90       	pop	r13
    6b5e:	cf 90       	pop	r12
    6b60:	bf 90       	pop	r11
    6b62:	af 90       	pop	r10
    6b64:	9f 90       	pop	r9
    6b66:	8f 90       	pop	r8
    6b68:	7f 90       	pop	r7
    6b6a:	6f 90       	pop	r6
    6b6c:	0f 90       	pop	r0
    6b6e:	0b be       	out	0x3b, r0	; 59
    6b70:	0f 90       	pop	r0
    6b72:	0f be       	out	0x3f, r0	; 63
    6b74:	0f 90       	pop	r0
    6b76:	1f 90       	pop	r1
    6b78:	18 95       	reti

00006b7a <__vector_77>:

ISR(Sensors_Timer_7200HZ_vect)
{
    6b7a:	1f 92       	push	r1
    6b7c:	0f 92       	push	r0
    6b7e:	0f b6       	in	r0, 0x3f	; 63
    6b80:	0f 92       	push	r0
    6b82:	0b b6       	in	r0, 0x3b	; 59
    6b84:	0f 92       	push	r0
    6b86:	11 24       	eor	r1, r1
    6b88:	0f 93       	push	r16
    6b8a:	1f 93       	push	r17
    6b8c:	2f 93       	push	r18
    6b8e:	3f 93       	push	r19
    6b90:	4f 93       	push	r20
    6b92:	5f 93       	push	r21
    6b94:	6f 93       	push	r22
    6b96:	7f 93       	push	r23
    6b98:	8f 93       	push	r24
    6b9a:	9f 93       	push	r25
    6b9c:	af 93       	push	r26
    6b9e:	bf 93       	push	r27
    6ba0:	ef 93       	push	r30
    6ba2:	ff 93       	push	r31
	if(recording && wantToRecordFast){
    6ba4:	80 91 e3 2c 	lds	r24, 0x2CE3
    6ba8:	88 23       	and	r24, r24
    6baa:	09 f4       	brne	.+2      	; 0x6bae <__vector_77+0x34>
    6bac:	9b c0       	rjmp	.+310    	; 0x6ce4 <__vector_77+0x16a>
    6bae:	80 91 e2 2c 	lds	r24, 0x2CE2
    6bb2:	88 23       	and	r24, r24
    6bb4:	09 f4       	brne	.+2      	; 0x6bb8 <__vector_77+0x3e>
    6bb6:	96 c0       	rjmp	.+300    	; 0x6ce4 <__vector_77+0x16a>
	  if((microphoneBufferToWriteTo == 1) && !okToSendMicrophoneBuffer1){
    6bb8:	80 91 a9 2a 	lds	r24, 0x2AA9
    6bbc:	81 30       	cpi	r24, 0x01	; 1
    6bbe:	09 f0       	breq	.+2      	; 0x6bc2 <__vector_77+0x48>
    6bc0:	48 c0       	rjmp	.+144    	; 0x6c52 <__vector_77+0xd8>
    6bc2:	80 91 36 2d 	lds	r24, 0x2D36
    6bc6:	88 23       	and	r24, r24
    6bc8:	09 f0       	breq	.+2      	; 0x6bcc <__vector_77+0x52>
    6bca:	94 c0       	rjmp	.+296    	; 0x6cf4 <__vector_77+0x17a>
	    if(microphoneBufferCounter == 0){
    6bcc:	80 91 38 2d 	lds	r24, 0x2D38
    6bd0:	90 91 39 2d 	lds	r25, 0x2D39
    6bd4:	89 2b       	or	r24, r25
    6bd6:	51 f4       	brne	.+20     	; 0x6bec <__vector_77+0x72>
	    	microphoneSampleStartTime1 = Time_Get32BitTimer();
    6bd8:	0e 94 b0 02 	call	0x560	; 0x560 <Time_Get32BitTimer>
    6bdc:	60 93 fc 2c 	sts	0x2CFC, r22
    6be0:	70 93 fd 2c 	sts	0x2CFD, r23
    6be4:	80 93 fe 2c 	sts	0x2CFE, r24
    6be8:	90 93 ff 2c 	sts	0x2CFF, r25
	    }
	    microphoneBuffer1[microphoneBufferCounter] = Sensors_ReadMicrophone();
    6bec:	00 91 38 2d 	lds	r16, 0x2D38
    6bf0:	10 91 39 2d 	lds	r17, 0x2D39
    6bf4:	0e 94 97 31 	call	0x632e	; 0x632e <Sensors_ReadMicrophone>
    6bf8:	0b 56       	subi	r16, 0x6B	; 107
    6bfa:	11 4c       	sbci	r17, 0xC1	; 193
    6bfc:	f8 01       	movw	r30, r16
    6bfe:	80 83       	st	Z, r24
	    if(micSampleCounter == 0){
    6c00:	80 91 4e 2d 	lds	r24, 0x2D4E
    6c04:	88 23       	and	r24, r24
    6c06:	49 f4       	brne	.+18     	; 0x6c1a <__vector_77+0xa0>
	    	quickMic = microphoneBuffer1[microphoneBufferCounter];
    6c08:	e0 91 38 2d 	lds	r30, 0x2D38
    6c0c:	f0 91 39 2d 	lds	r31, 0x2D39
    6c10:	eb 56       	subi	r30, 0x6B	; 107
    6c12:	f1 4c       	sbci	r31, 0xC1	; 193
    6c14:	80 81       	ld	r24, Z
    6c16:	80 93 45 2d 	sts	0x2D45, r24
	    }
	    microphoneBufferCounter++;
    6c1a:	80 91 38 2d 	lds	r24, 0x2D38
    6c1e:	90 91 39 2d 	lds	r25, 0x2D39
    6c22:	01 96       	adiw	r24, 0x01	; 1
    6c24:	80 93 38 2d 	sts	0x2D38, r24
    6c28:	90 93 39 2d 	sts	0x2D39, r25
	    if(microphoneBufferCounter == microphoneNumberOfSamples){
    6c2c:	88 50       	subi	r24, 0x08	; 8
    6c2e:	97 40       	sbci	r25, 0x07	; 7
    6c30:	09 f0       	breq	.+2      	; 0x6c34 <__vector_77+0xba>
    6c32:	60 c0       	rjmp	.+192    	; 0x6cf4 <__vector_77+0x17a>
	    	quickMic = microphoneBuffer1[0];
    6c34:	80 91 95 3e 	lds	r24, 0x3E95
    6c38:	80 93 45 2d 	sts	0x2D45, r24
	    	microphoneBufferCounter=0;
    6c3c:	10 92 38 2d 	sts	0x2D38, r1
    6c40:	10 92 39 2d 	sts	0x2D39, r1
	    	microphoneBufferToWriteTo = 2;
    6c44:	82 e0       	ldi	r24, 0x02	; 2
    6c46:	80 93 a9 2a 	sts	0x2AA9, r24
	    	okToSendMicrophoneBuffer1 = true;
    6c4a:	81 e0       	ldi	r24, 0x01	; 1
    6c4c:	80 93 36 2d 	sts	0x2D36, r24
    6c50:	51 c0       	rjmp	.+162    	; 0x6cf4 <__vector_77+0x17a>
	    }
	  } else if ((microphoneBufferToWriteTo == 2)&& !okToSendMicrophoneBuffer2){
    6c52:	82 30       	cpi	r24, 0x02	; 2
    6c54:	09 f0       	breq	.+2      	; 0x6c58 <__vector_77+0xde>
    6c56:	4e c0       	rjmp	.+156    	; 0x6cf4 <__vector_77+0x17a>
    6c58:	80 91 37 2d 	lds	r24, 0x2D37
    6c5c:	88 23       	and	r24, r24
    6c5e:	09 f0       	breq	.+2      	; 0x6c62 <__vector_77+0xe8>
    6c60:	49 c0       	rjmp	.+146    	; 0x6cf4 <__vector_77+0x17a>
	    if(microphoneBufferCounter == 0){
    6c62:	80 91 38 2d 	lds	r24, 0x2D38
    6c66:	90 91 39 2d 	lds	r25, 0x2D39
    6c6a:	89 2b       	or	r24, r25
    6c6c:	51 f4       	brne	.+20     	; 0x6c82 <__vector_77+0x108>
	    	microphoneSampleStartTime2 = Time_Get32BitTimer();
    6c6e:	0e 94 b0 02 	call	0x560	; 0x560 <Time_Get32BitTimer>
    6c72:	60 93 00 2d 	sts	0x2D00, r22
    6c76:	70 93 01 2d 	sts	0x2D01, r23
    6c7a:	80 93 02 2d 	sts	0x2D02, r24
    6c7e:	90 93 03 2d 	sts	0x2D03, r25
	    }
	    microphoneBuffer2[microphoneBufferCounter] = Sensors_ReadMicrophone();
    6c82:	00 91 38 2d 	lds	r16, 0x2D38
    6c86:	10 91 39 2d 	lds	r17, 0x2D39
    6c8a:	0e 94 97 31 	call	0x632e	; 0x632e <Sensors_ReadMicrophone>
    6c8e:	07 5b       	subi	r16, 0xB7	; 183
    6c90:	19 4c       	sbci	r17, 0xC9	; 201
    6c92:	f8 01       	movw	r30, r16
    6c94:	80 83       	st	Z, r24
	    if(micSampleCounter == 0){
    6c96:	80 91 4e 2d 	lds	r24, 0x2D4E
    6c9a:	88 23       	and	r24, r24
    6c9c:	49 f4       	brne	.+18     	; 0x6cb0 <__vector_77+0x136>
	    	quickMic = microphoneBuffer2[microphoneBufferCounter];
    6c9e:	e0 91 38 2d 	lds	r30, 0x2D38
    6ca2:	f0 91 39 2d 	lds	r31, 0x2D39
    6ca6:	e7 5b       	subi	r30, 0xB7	; 183
    6ca8:	f9 4c       	sbci	r31, 0xC9	; 201
    6caa:	80 81       	ld	r24, Z
    6cac:	80 93 45 2d 	sts	0x2D45, r24
	    }

	    microphoneBufferCounter++;
    6cb0:	80 91 38 2d 	lds	r24, 0x2D38
    6cb4:	90 91 39 2d 	lds	r25, 0x2D39
    6cb8:	01 96       	adiw	r24, 0x01	; 1
    6cba:	80 93 38 2d 	sts	0x2D38, r24
    6cbe:	90 93 39 2d 	sts	0x2D39, r25
	    if(microphoneBufferCounter == microphoneNumberOfSamples){
    6cc2:	88 50       	subi	r24, 0x08	; 8
    6cc4:	97 40       	sbci	r25, 0x07	; 7
    6cc6:	b1 f4       	brne	.+44     	; 0x6cf4 <__vector_77+0x17a>
	    	quickMic = microphoneBuffer2[0];
    6cc8:	80 91 49 36 	lds	r24, 0x3649
    6ccc:	80 93 45 2d 	sts	0x2D45, r24
	    	microphoneBufferCounter=0;
    6cd0:	10 92 38 2d 	sts	0x2D38, r1
    6cd4:	10 92 39 2d 	sts	0x2D39, r1
	    	microphoneBufferToWriteTo = 1;
    6cd8:	81 e0       	ldi	r24, 0x01	; 1
    6cda:	80 93 a9 2a 	sts	0x2AA9, r24
	    	okToSendMicrophoneBuffer2 = true;
    6cde:	80 93 37 2d 	sts	0x2D37, r24
    6ce2:	08 c0       	rjmp	.+16     	; 0x6cf4 <__vector_77+0x17a>
	    }


	  }
	} else {
		if(micSampleCounter == 0){
    6ce4:	80 91 4e 2d 	lds	r24, 0x2D4E
    6ce8:	88 23       	and	r24, r24
    6cea:	21 f4       	brne	.+8      	; 0x6cf4 <__vector_77+0x17a>
			quickMic = Sensors_ReadMicrophone();
    6cec:	0e 94 97 31 	call	0x632e	; 0x632e <Sensors_ReadMicrophone>
    6cf0:	80 93 45 2d 	sts	0x2D45, r24
		}
	}
	micSampleCounter++;
    6cf4:	80 91 4e 2d 	lds	r24, 0x2D4E
    6cf8:	8f 5f       	subi	r24, 0xFF	; 255
    6cfa:	80 93 4e 2d 	sts	0x2D4E, r24
}
    6cfe:	ff 91       	pop	r31
    6d00:	ef 91       	pop	r30
    6d02:	bf 91       	pop	r27
    6d04:	af 91       	pop	r26
    6d06:	9f 91       	pop	r25
    6d08:	8f 91       	pop	r24
    6d0a:	7f 91       	pop	r23
    6d0c:	6f 91       	pop	r22
    6d0e:	5f 91       	pop	r21
    6d10:	4f 91       	pop	r20
    6d12:	3f 91       	pop	r19
    6d14:	2f 91       	pop	r18
    6d16:	1f 91       	pop	r17
    6d18:	0f 91       	pop	r16
    6d1a:	0f 90       	pop	r0
    6d1c:	0b be       	out	0x3b, r0	; 59
    6d1e:	0f 90       	pop	r0
    6d20:	0f be       	out	0x3f, r0	; 63
    6d22:	0f 90       	pop	r0
    6d24:	1f 90       	pop	r1
    6d26:	18 95       	reti

00006d28 <Uploader_getTime>:
			singCounter--;
		}
	}
}

bool Uploader_getTime(void){
    6d28:	0f 93       	push	r16
    6d2a:	1f 93       	push	r17
    6d2c:	cf 93       	push	r28
    6d2e:	df 93       	push	r29
    uint32_t tempTime = 0;
    uint8_t timeOutCounter = 0;
    uint8_t commandCounter = 0;
    Debug_SendByte('T');
    6d30:	84 e5       	ldi	r24, 0x54	; 84
    6d32:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    6d36:	00 e0       	ldi	r16, 0x00	; 0
    6d38:	10 e0       	ldi	r17, 0x00	; 0
    6d3a:	c6 e6       	ldi	r28, 0x66	; 102
    6d3c:	de e0       	ldi	r29, 0x0E	; 14
    while(true){
        if(Debug_CharReadyToRead()){
    6d3e:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
    6d42:	88 23       	and	r24, r24
    6d44:	a1 f1       	breq	.+104    	; 0x6dae <Uploader_getTime+0x86>
            command[commandCounter+1] = Debug_GetByte(false);
    6d46:	80 e0       	ldi	r24, 0x00	; 0
    6d48:	0e 94 ef 01 	call	0x3de	; 0x3de <Debug_GetByte>
    6d4c:	e1 2f       	mov	r30, r17
    6d4e:	f0 e0       	ldi	r31, 0x00	; 0
    6d50:	ed 59       	subi	r30, 0x9D	; 157
    6d52:	f1 4c       	sbci	r31, 0xC1	; 193
    6d54:	81 83       	std	Z+1, r24	; 0x01
            Debug_SendByte(command[commandCounter+1]);
    6d56:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
            commandCounter++;
    6d5a:	1f 5f       	subi	r17, 0xFF	; 255
            if(commandCounter == 4){
    6d5c:	14 30       	cpi	r17, 0x04	; 4
    6d5e:	39 f5       	brne	.+78     	; 0x6dae <Uploader_getTime+0x86>
                tempTime = command[1];
    6d60:	60 91 64 3e 	lds	r22, 0x3E64
    6d64:	70 e0       	ldi	r23, 0x00	; 0
    6d66:	80 e0       	ldi	r24, 0x00	; 0
    6d68:	90 e0       	ldi	r25, 0x00	; 0
                tempTime <<= 8;
    6d6a:	98 2f       	mov	r25, r24
    6d6c:	87 2f       	mov	r24, r23
    6d6e:	76 2f       	mov	r23, r22
    6d70:	66 27       	eor	r22, r22
                tempTime += command[2];
    6d72:	20 91 65 3e 	lds	r18, 0x3E65
    6d76:	62 0f       	add	r22, r18
    6d78:	71 1d       	adc	r23, r1
    6d7a:	81 1d       	adc	r24, r1
    6d7c:	91 1d       	adc	r25, r1
                tempTime <<= 8;
    6d7e:	98 2f       	mov	r25, r24
    6d80:	87 2f       	mov	r24, r23
    6d82:	76 2f       	mov	r23, r22
    6d84:	66 27       	eor	r22, r22
                tempTime += command[3];
    6d86:	20 91 66 3e 	lds	r18, 0x3E66
    6d8a:	62 0f       	add	r22, r18
    6d8c:	71 1d       	adc	r23, r1
    6d8e:	81 1d       	adc	r24, r1
    6d90:	91 1d       	adc	r25, r1
                tempTime <<= 8;
    6d92:	98 2f       	mov	r25, r24
    6d94:	87 2f       	mov	r24, r23
    6d96:	76 2f       	mov	r23, r22
    6d98:	66 27       	eor	r22, r22
                tempTime += command[4];
				
                Time_Set(tempTime);
    6d9a:	20 91 67 3e 	lds	r18, 0x3E67
    6d9e:	62 0f       	add	r22, r18
    6da0:	71 1d       	adc	r23, r1
    6da2:	81 1d       	adc	r24, r1
    6da4:	91 1d       	adc	r25, r1
    6da6:	0e 94 2f 02 	call	0x45e	; 0x45e <Time_Set>
    6daa:	81 e0       	ldi	r24, 0x01	; 1
    6dac:	08 c0       	rjmp	.+16     	; 0x6dbe <Uploader_getTime+0x96>
    6dae:	ce 01       	movw	r24, r28
    6db0:	01 97       	sbiw	r24, 0x01	; 1
    6db2:	f1 f7       	brne	.-4      	; 0x6db0 <Uploader_getTime+0x88>
                return true;
            }
        }
        _delay_ms(1);
        timeOutCounter++;
    6db4:	0f 5f       	subi	r16, 0xFF	; 255
        if(timeOutCounter > 100){
    6db6:	05 36       	cpi	r16, 0x65	; 101
    6db8:	09 f0       	breq	.+2      	; 0x6dbc <Uploader_getTime+0x94>
    6dba:	c1 cf       	rjmp	.-126    	; 0x6d3e <Uploader_getTime+0x16>
    6dbc:	80 e0       	ldi	r24, 0x00	; 0
            return false;
        }
    }
}
    6dbe:	df 91       	pop	r29
    6dc0:	cf 91       	pop	r28
    6dc2:	1f 91       	pop	r17
    6dc4:	0f 91       	pop	r16
    6dc6:	08 95       	ret

00006dc8 <Uploader_eraseFile>:
    okToUpload = false;
    uploadPercentBS = 100;
    return true;
}

bool Uploader_eraseFile(void){
    6dc8:	ff 92       	push	r15
    6dca:	0f 93       	push	r16
    6dcc:	1f 93       	push	r17
    6dce:	cf 93       	push	r28
    6dd0:	df 93       	push	r29
    uint8_t timeOutCounter = 0;
    uint8_t commandCounter = 0;
    uint8_t numBytesToRead = 0;
    Debug_SendByte('E');
    6dd2:	85 e4       	ldi	r24, 0x45	; 69
    6dd4:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    6dd8:	ff 24       	eor	r15, r15
    6dda:	10 e0       	ldi	r17, 0x00	; 0
    6ddc:	00 e0       	ldi	r16, 0x00	; 0
    6dde:	c6 e6       	ldi	r28, 0x66	; 102
    6de0:	de e0       	ldi	r29, 0x0E	; 14
    while(true){
        if(Debug_CharReadyToRead()){
    6de2:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
    6de6:	88 23       	and	r24, r24
    6de8:	91 f1       	breq	.+100    	; 0x6e4e <Uploader_eraseFile+0x86>
            if(commandCounter == 0){
    6dea:	11 23       	and	r17, r17
    6dec:	41 f4       	brne	.+16     	; 0x6dfe <Uploader_eraseFile+0x36>
                numBytesToRead = Debug_GetByte(false);
    6dee:	80 e0       	ldi	r24, 0x00	; 0
    6df0:	0e 94 ef 01 	call	0x3de	; 0x3de <Debug_GetByte>
    6df4:	08 2f       	mov	r16, r24
                Debug_SendByte(numBytesToRead);
    6df6:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    6dfa:	11 e0       	ldi	r17, 0x01	; 1
    6dfc:	28 c0       	rjmp	.+80     	; 0x6e4e <Uploader_eraseFile+0x86>
                commandCounter++;
            } else {
                fileToErase[commandCounter-1] = Debug_GetByte(false);
    6dfe:	80 e0       	ldi	r24, 0x00	; 0
    6e00:	0e 94 ef 01 	call	0x3de	; 0x3de <Debug_GetByte>
    6e04:	e1 2f       	mov	r30, r17
    6e06:	f0 e0       	ldi	r31, 0x00	; 0
    6e08:	e5 5b       	subi	r30, 0xB5	; 181
    6e0a:	f3 4b       	sbci	r31, 0xB3	; 179
    6e0c:	80 83       	st	Z, r24
                Debug_SendByte(fileToErase[commandCounter-1]);
    6e0e:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
                commandCounter++;
    6e12:	1f 5f       	subi	r17, 0xFF	; 255
                if(commandCounter == (numBytesToRead+1)){
    6e14:	80 2f       	mov	r24, r16
    6e16:	90 e0       	ldi	r25, 0x00	; 0
    6e18:	01 96       	adiw	r24, 0x01	; 1
    6e1a:	e1 2f       	mov	r30, r17
    6e1c:	f0 e0       	ldi	r31, 0x00	; 0
    6e1e:	e8 17       	cp	r30, r24
    6e20:	f9 07       	cpc	r31, r25
    6e22:	a9 f4       	brne	.+42     	; 0x6e4e <Uploader_eraseFile+0x86>
                    fileToErase[numBytesToRead+1] = 0;
    6e24:	e4 5b       	subi	r30, 0xB4	; 180
    6e26:	f3 4b       	sbci	r31, 0xB3	; 179
    6e28:	10 82       	st	Z, r1
                    okToEraseFile = true;
    6e2a:	81 e0       	ldi	r24, 0x01	; 1
    6e2c:	80 93 6d 2d 	sts	0x2D6D, r24
                    while(okToEraseFile);
    6e30:	80 91 6d 2d 	lds	r24, 0x2D6D
    6e34:	88 23       	and	r24, r24
    6e36:	e1 f7       	brne	.-8      	; 0x6e30 <Uploader_eraseFile+0x68>
                    if(eraseFileReturn == FR_OK){
    6e38:	80 91 24 47 	lds	r24, 0x4724
    6e3c:	88 23       	and	r24, r24
    6e3e:	11 f4       	brne	.+4      	; 0x6e44 <Uploader_eraseFile+0x7c>
                        Debug_SendByte('T');
    6e40:	84 e5       	ldi	r24, 0x54	; 84
    6e42:	01 c0       	rjmp	.+2      	; 0x6e46 <Uploader_eraseFile+0x7e>
                        return true;
                    } else {
                        Debug_SendByte('F');
    6e44:	86 e4       	ldi	r24, 0x46	; 70
    6e46:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    6e4a:	81 e0       	ldi	r24, 0x01	; 1
    6e4c:	08 c0       	rjmp	.+16     	; 0x6e5e <Uploader_eraseFile+0x96>
    6e4e:	ce 01       	movw	r24, r28
    6e50:	01 97       	sbiw	r24, 0x01	; 1
    6e52:	f1 f7       	brne	.-4      	; 0x6e50 <Uploader_eraseFile+0x88>
                    }
                }
            }
        }
        _delay_ms(1);
        timeOutCounter++;
    6e54:	f3 94       	inc	r15
        if(timeOutCounter > 100){
    6e56:	85 e6       	ldi	r24, 0x65	; 101
    6e58:	f8 16       	cp	r15, r24
    6e5a:	19 f6       	brne	.-122    	; 0x6de2 <Uploader_eraseFile+0x1a>
    6e5c:	80 e0       	ldi	r24, 0x00	; 0
            return false;
        }
    }
}
    6e5e:	df 91       	pop	r29
    6e60:	cf 91       	pop	r28
    6e62:	1f 91       	pop	r17
    6e64:	0f 91       	pop	r16
    6e66:	ff 90       	pop	r15
    6e68:	08 95       	ret

00006e6a <Uploader_ClearCRC>:
	Debug_SendString(port,true);
}


void Uploader_ClearCRC(void){
    uploadCRC = 0xFFFFFFFF;
    6e6a:	8f ef       	ldi	r24, 0xFF	; 255
    6e6c:	9f ef       	ldi	r25, 0xFF	; 255
    6e6e:	af ef       	ldi	r26, 0xFF	; 255
    6e70:	bf ef       	ldi	r27, 0xFF	; 255
    6e72:	80 93 0a 47 	sts	0x470A, r24
    6e76:	90 93 0b 47 	sts	0x470B, r25
    6e7a:	a0 93 0c 47 	sts	0x470C, r26
    6e7e:	b0 93 0d 47 	sts	0x470D, r27
}
    6e82:	08 95       	ret

00006e84 <Uploader_WriteCRC>:

void Uploader_WriteCRC(void){
    6e84:	ef 92       	push	r14
    6e86:	ff 92       	push	r15
    6e88:	0f 93       	push	r16
    6e8a:	1f 93       	push	r17
    uint32_t tmpCRC = uploadCRC^0xFFFFFFFF;
    6e8c:	e0 90 0a 47 	lds	r14, 0x470A
    6e90:	f0 90 0b 47 	lds	r15, 0x470B
    6e94:	00 91 0c 47 	lds	r16, 0x470C
    6e98:	10 91 0d 47 	lds	r17, 0x470D
    6e9c:	e0 94       	com	r14
    6e9e:	f0 94       	com	r15
    6ea0:	00 95       	com	r16
    6ea2:	10 95       	com	r17
    Debug_SendByte((tmpCRC >> 24) & 0xFF);
    6ea4:	81 2f       	mov	r24, r17
    6ea6:	99 27       	eor	r25, r25
    6ea8:	aa 27       	eor	r26, r26
    6eaa:	bb 27       	eor	r27, r27
    6eac:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    Debug_SendByte((tmpCRC >> 16) & 0xFF);
    6eb0:	c8 01       	movw	r24, r16
    6eb2:	aa 27       	eor	r26, r26
    6eb4:	bb 27       	eor	r27, r27
    6eb6:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    Debug_SendByte((tmpCRC >>  8) & 0xFF);
    6eba:	bb 27       	eor	r27, r27
    6ebc:	a1 2f       	mov	r26, r17
    6ebe:	90 2f       	mov	r25, r16
    6ec0:	8f 2d       	mov	r24, r15
    6ec2:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    Debug_SendByte((tmpCRC >>  0) & 0xFF);
    6ec6:	8e 2d       	mov	r24, r14
    6ec8:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
}
    6ecc:	1f 91       	pop	r17
    6ece:	0f 91       	pop	r16
    6ed0:	ff 90       	pop	r15
    6ed2:	ef 90       	pop	r14
    6ed4:	08 95       	ret

00006ed6 <Uploader_uploadFile>:
    }
}



bool Uploader_uploadFile(void){
    6ed6:	5f 92       	push	r5
    6ed8:	6f 92       	push	r6
    6eda:	7f 92       	push	r7
    6edc:	8f 92       	push	r8
    6ede:	9f 92       	push	r9
    6ee0:	af 92       	push	r10
    6ee2:	bf 92       	push	r11
    6ee4:	cf 92       	push	r12
    6ee6:	df 92       	push	r13
    6ee8:	ef 92       	push	r14
    6eea:	ff 92       	push	r15
    6eec:	0f 93       	push	r16
    6eee:	1f 93       	push	r17
    6ef0:	cf 93       	push	r28
    6ef2:	df 93       	push	r29
    uint8_t commandCounter = 0;
    uint8_t numBytesToRead = 0;
    uint32_t responseLength;
    bool gotFileName = false;
	
    uploading = true;
    6ef4:	81 e0       	ldi	r24, 0x01	; 1
    6ef6:	80 93 63 2d 	sts	0x2D63, r24
    6efa:	88 ee       	ldi	r24, 0xE8	; 232
    6efc:	93 e0       	ldi	r25, 0x03	; 3
    6efe:	20 e7       	ldi	r18, 0x70	; 112
    6f00:	31 e0       	ldi	r19, 0x01	; 1
    6f02:	f9 01       	movw	r30, r18
    6f04:	31 97       	sbiw	r30, 0x01	; 1
    6f06:	f1 f7       	brne	.-4      	; 0x6f04 <Uploader_uploadFile+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f08:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f0a:	d9 f7       	brne	.-10     	; 0x6f02 <Uploader_uploadFile+0x2c>
    _delay_ms(100);
	
    Debug_SendByte('D');
    6f0c:	84 e4       	ldi	r24, 0x44	; 68
    6f0e:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    6f12:	ee 24       	eor	r14, r14
    6f14:	10 e0       	ldi	r17, 0x00	; 0
    6f16:	00 e0       	ldi	r16, 0x00	; 0
    6f18:	c6 e6       	ldi	r28, 0x66	; 102
    6f1a:	de e0       	ldi	r29, 0x0E	; 14
	
    while(!gotFileName){
        if(Debug_CharReadyToRead()){
    6f1c:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
    6f20:	88 23       	and	r24, r24
    6f22:	11 f1       	breq	.+68     	; 0x6f68 <Uploader_uploadFile+0x92>
            if(commandCounter == 0){
    6f24:	11 23       	and	r17, r17
    6f26:	41 f4       	brne	.+16     	; 0x6f38 <Uploader_uploadFile+0x62>
                numBytesToRead = Debug_GetByte(false);
    6f28:	80 e0       	ldi	r24, 0x00	; 0
    6f2a:	0e 94 ef 01 	call	0x3de	; 0x3de <Debug_GetByte>
    6f2e:	08 2f       	mov	r16, r24
                Debug_SendByte(numBytesToRead);
    6f30:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    6f34:	11 e0       	ldi	r17, 0x01	; 1
    6f36:	18 c0       	rjmp	.+48     	; 0x6f68 <Uploader_uploadFile+0x92>
                commandCounter++;
            } else {
                fileToUpload[commandCounter-1] = Debug_GetByte(false);
    6f38:	80 e0       	ldi	r24, 0x00	; 0
    6f3a:	0e 94 ef 01 	call	0x3de	; 0x3de <Debug_GetByte>
    6f3e:	e1 2f       	mov	r30, r17
    6f40:	f0 e0       	ldi	r31, 0x00	; 0
    6f42:	ea 5e       	subi	r30, 0xEA	; 234
    6f44:	f9 4c       	sbci	r31, 0xC9	; 201
    6f46:	80 83       	st	Z, r24
                Debug_SendByte(fileToUpload[commandCounter-1]);
    6f48:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
                commandCounter++;
    6f4c:	1f 5f       	subi	r17, 0xFF	; 255
                if(commandCounter == (numBytesToRead+1)){
    6f4e:	e1 2f       	mov	r30, r17
    6f50:	f0 e0       	ldi	r31, 0x00	; 0
    6f52:	80 2f       	mov	r24, r16
    6f54:	90 e0       	ldi	r25, 0x00	; 0
    6f56:	01 96       	adiw	r24, 0x01	; 1
    6f58:	e8 17       	cp	r30, r24
    6f5a:	f9 07       	cpc	r31, r25
    6f5c:	29 f4       	brne	.+10     	; 0x6f68 <Uploader_uploadFile+0x92>
                    fileToUpload[numBytesToRead+1] = 0;
    6f5e:	e9 5e       	subi	r30, 0xE9	; 233
    6f60:	f9 4c       	sbci	r31, 0xC9	; 201
    6f62:	10 82       	st	Z, r1
    6f64:	21 e0       	ldi	r18, 0x01	; 1
    6f66:	01 c0       	rjmp	.+2      	; 0x6f6a <Uploader_uploadFile+0x94>
    6f68:	20 e0       	ldi	r18, 0x00	; 0
    6f6a:	ce 01       	movw	r24, r28
    6f6c:	01 97       	sbiw	r24, 0x01	; 1
    6f6e:	f1 f7       	brne	.-4      	; 0x6f6c <Uploader_uploadFile+0x96>
                    gotFileName = true;
                }
            }
        }
        _delay_ms(1);
        timeOutCounter++;
    6f70:	e3 94       	inc	r14
        if(timeOutCounter > 100){
    6f72:	85 e6       	ldi	r24, 0x65	; 101
    6f74:	e8 16       	cp	r14, r24
    6f76:	11 f4       	brne	.+4      	; 0x6f7c <Uploader_uploadFile+0xa6>
    6f78:	80 e0       	ldi	r24, 0x00	; 0
    6f7a:	77 c1       	rjmp	.+750    	; 0x726a <Uploader_uploadFile+0x394>
    uploading = true;
    _delay_ms(100);
	
    Debug_SendByte('D');
	
    while(!gotFileName){
    6f7c:	22 23       	and	r18, r18
    6f7e:	71 f2       	breq	.-100    	; 0x6f1c <Uploader_uploadFile+0x46>
        if(timeOutCounter > 100){
            return false;
        }
    }
	
    okToOpenFileToUpload = true;
    6f80:	81 e0       	ldi	r24, 0x01	; 1
    6f82:	80 93 68 2d 	sts	0x2D68, r24
    while(!uploadFileOpened);
    6f86:	80 91 69 2d 	lds	r24, 0x2D69
    6f8a:	88 23       	and	r24, r24
    6f8c:	e1 f3       	breq	.-8      	; 0x6f86 <Uploader_uploadFile+0xb0>
    6f8e:	80 e1       	ldi	r24, 0x10	; 16
    6f90:	97 e2       	ldi	r25, 0x27	; 39
    6f92:	20 e7       	ldi	r18, 0x70	; 112
    6f94:	31 e0       	ldi	r19, 0x01	; 1
    6f96:	f9 01       	movw	r30, r18
    6f98:	31 97       	sbiw	r30, 0x01	; 1
    6f9a:	f1 f7       	brne	.-4      	; 0x6f98 <Uploader_uploadFile+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f9c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f9e:	d9 f7       	brne	.-10     	; 0x6f96 <Uploader_uploadFile+0xc0>
	_delay_ms(1000);
	
	if(!fileExists){
    6fa0:	80 91 6e 2d 	lds	r24, 0x2D6E
    6fa4:	88 23       	and	r24, r24
    6fa6:	b9 f4       	brne	.+46     	; 0x6fd6 <Uploader_uploadFile+0x100>
        Debug_SendByte(0);
    6fa8:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
        Debug_SendByte(0);
    6fac:	80 e0       	ldi	r24, 0x00	; 0
    6fae:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
        Debug_SendByte(0);
    6fb2:	80 e0       	ldi	r24, 0x00	; 0
    6fb4:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
        Debug_SendByte(0);
    6fb8:	80 e0       	ldi	r24, 0x00	; 0
    6fba:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
        okToCloseUploadFile = true;
    6fbe:	81 e0       	ldi	r24, 0x01	; 1
    6fc0:	80 93 6c 2d 	sts	0x2D6C, r24
        while(okToCloseUploadFile);
    6fc4:	80 91 6c 2d 	lds	r24, 0x2D6C
    6fc8:	88 23       	and	r24, r24
    6fca:	e1 f7       	brne	.-8      	; 0x6fc4 <Uploader_uploadFile+0xee>
        uploading = false;
    6fcc:	10 92 63 2d 	sts	0x2D63, r1
        okToUpload = false;
    6fd0:	10 92 66 2d 	sts	0x2D66, r1
    6fd4:	49 c1       	rjmp	.+658    	; 0x7268 <Uploader_uploadFile+0x392>
	Debug_SendString(port,true);
}


void Uploader_ClearCRC(void){
    uploadCRC = 0xFFFFFFFF;
    6fd6:	8f ef       	ldi	r24, 0xFF	; 255
    6fd8:	9f ef       	ldi	r25, 0xFF	; 255
    6fda:	af ef       	ldi	r26, 0xFF	; 255
    6fdc:	bf ef       	ldi	r27, 0xFF	; 255
    6fde:	80 93 0a 47 	sts	0x470A, r24
    6fe2:	90 93 0b 47 	sts	0x470B, r25
    6fe6:	a0 93 0c 47 	sts	0x470C, r26
    6fea:	b0 93 0d 47 	sts	0x470D, r27
        okToUpload = false;
        return true;
    }
	
    Uploader_ClearCRC();
    responseLength = uploadFileSize + 4;
    6fee:	e0 90 55 2d 	lds	r14, 0x2D55
    6ff2:	f0 90 56 2d 	lds	r15, 0x2D56
    6ff6:	00 91 57 2d 	lds	r16, 0x2D57
    6ffa:	10 91 58 2d 	lds	r17, 0x2D58
    6ffe:	84 e0       	ldi	r24, 0x04	; 4
    7000:	90 e0       	ldi	r25, 0x00	; 0
    7002:	a0 e0       	ldi	r26, 0x00	; 0
    7004:	b0 e0       	ldi	r27, 0x00	; 0
    7006:	e8 0e       	add	r14, r24
    7008:	f9 1e       	adc	r15, r25
    700a:	0a 1f       	adc	r16, r26
    700c:	1b 1f       	adc	r17, r27
    Debug_SendByte((responseLength >> 24) & 0xFF);
    700e:	81 2f       	mov	r24, r17
    7010:	99 27       	eor	r25, r25
    7012:	aa 27       	eor	r26, r26
    7014:	bb 27       	eor	r27, r27
    7016:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    Debug_SendByte((responseLength >> 16) & 0xFF);
    701a:	c8 01       	movw	r24, r16
    701c:	aa 27       	eor	r26, r26
    701e:	bb 27       	eor	r27, r27
    7020:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    Debug_SendByte((responseLength >>  8) & 0xFF);
    7024:	bb 27       	eor	r27, r27
    7026:	a1 2f       	mov	r26, r17
    7028:	90 2f       	mov	r25, r16
    702a:	8f 2d       	mov	r24, r15
    702c:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    Debug_SendByte((responseLength >>  0) & 0xFF);
    7030:	8e 2d       	mov	r24, r14
    7032:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	
    numberOfPacketsToUpload = uploadFileSize /  1000;
    7036:	60 91 55 2d 	lds	r22, 0x2D55
    703a:	70 91 56 2d 	lds	r23, 0x2D56
    703e:	80 91 57 2d 	lds	r24, 0x2D57
    7042:	90 91 58 2d 	lds	r25, 0x2D58
    7046:	28 ee       	ldi	r18, 0xE8	; 232
    7048:	33 e0       	ldi	r19, 0x03	; 3
    704a:	40 e0       	ldi	r20, 0x00	; 0
    704c:	50 e0       	ldi	r21, 0x00	; 0
    704e:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    7052:	c9 01       	movw	r24, r18
    7054:	da 01       	movw	r26, r20
    7056:	80 93 5a 2d 	sts	0x2D5A, r24
    705a:	90 93 5b 2d 	sts	0x2D5B, r25
    705e:	a0 93 5c 2d 	sts	0x2D5C, r26
    7062:	b0 93 5d 2d 	sts	0x2D5D, r27
    leftOverBytesToUpload   = uploadFileSize %  1000;
    7066:	60 91 55 2d 	lds	r22, 0x2D55
    706a:	70 91 56 2d 	lds	r23, 0x2D56
    706e:	80 91 57 2d 	lds	r24, 0x2D57
    7072:	90 91 58 2d 	lds	r25, 0x2D58
    7076:	28 ee       	ldi	r18, 0xE8	; 232
    7078:	33 e0       	ldi	r19, 0x03	; 3
    707a:	40 e0       	ldi	r20, 0x00	; 0
    707c:	50 e0       	ldi	r21, 0x00	; 0
    707e:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    7082:	9b 01       	movw	r18, r22
    7084:	ac 01       	movw	r20, r24
    7086:	20 93 5e 2d 	sts	0x2D5E, r18
    708a:	30 93 5f 2d 	sts	0x2D5F, r19
    708e:	40 93 60 2d 	sts	0x2D60, r20
    7092:	50 93 61 2d 	sts	0x2D61, r21
    7096:	66 24       	eor	r6, r6
    7098:	77 24       	eor	r7, r7
    709a:	43 01       	movw	r8, r6
    709c:	aa 24       	eor	r10, r10
    709e:	bb 24       	eor	r11, r11
    70a0:	65 01       	movw	r12, r10
	
    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
        uploadFileBufferFull = false;
        okToFillUploadFileBuffer = true;
    70a2:	55 24       	eor	r5, r5
    70a4:	53 94       	inc	r5
    70a6:	62 c0       	rjmp	.+196    	; 0x716c <Uploader_uploadFile+0x296>
	
    numberOfPacketsToUpload = uploadFileSize /  1000;
    leftOverBytesToUpload   = uploadFileSize %  1000;
	
    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
        uploadFileBufferFull = false;
    70a8:	10 92 6b 2d 	sts	0x2D6B, r1
        okToFillUploadFileBuffer = true;
    70ac:	50 92 6a 2d 	sts	0x2D6A, r5
		
        uploadPercentBS = (z*100)/numberOfPacketsToUpload;
    70b0:	20 91 5a 2d 	lds	r18, 0x2D5A
    70b4:	30 91 5b 2d 	lds	r19, 0x2D5B
    70b8:	40 91 5c 2d 	lds	r20, 0x2D5C
    70bc:	50 91 5d 2d 	lds	r21, 0x2D5D
    70c0:	c6 01       	movw	r24, r12
    70c2:	b5 01       	movw	r22, r10
    70c4:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    70c8:	20 93 59 2d 	sts	0x2D59, r18
        while(!uploadFileBufferFull);
    70cc:	80 91 6b 2d 	lds	r24, 0x2D6B
    70d0:	88 23       	and	r24, r24
    70d2:	e1 f3       	breq	.-8      	; 0x70cc <Uploader_uploadFile+0x1f6>
    70d4:	c7 e2       	ldi	r28, 0x27	; 39
    70d6:	d2 e3       	ldi	r29, 0x32	; 50
		for(uint16_t j = 0; j <  uploadChunkSize; j++){
			Debug_SendByte(uploadFileBuffer[j]);
    70d8:	88 81       	ld	r24, Y
    70da:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    Debug_SendByte((tmpCRC >>  0) & 0xFF);
}


void Uploader_UpdateCRC(uint8_t byte){
    uploadCRC = (uploadCRC >> 8) ^ crc_table[byte ^ (uploadCRC & 0xFF)];
    70de:	e0 90 0a 47 	lds	r14, 0x470A
    70e2:	f0 90 0b 47 	lds	r15, 0x470B
    70e6:	00 91 0c 47 	lds	r16, 0x470C
    70ea:	10 91 0d 47 	lds	r17, 0x470D
    70ee:	80 91 0a 47 	lds	r24, 0x470A
    70f2:	90 91 0b 47 	lds	r25, 0x470B
    70f6:	a0 91 0c 47 	lds	r26, 0x470C
    70fa:	b0 91 0d 47 	lds	r27, 0x470D
    70fe:	90 70       	andi	r25, 0x00	; 0
    7100:	a0 70       	andi	r26, 0x00	; 0
    7102:	b0 70       	andi	r27, 0x00	; 0
    7104:	29 91       	ld	r18, Y+
    7106:	30 e0       	ldi	r19, 0x00	; 0
    7108:	40 e0       	ldi	r20, 0x00	; 0
    710a:	50 e0       	ldi	r21, 0x00	; 0
    710c:	82 27       	eor	r24, r18
    710e:	93 27       	eor	r25, r19
    7110:	a4 27       	eor	r26, r20
    7112:	b5 27       	eor	r27, r21
    7114:	88 0f       	add	r24, r24
    7116:	99 1f       	adc	r25, r25
    7118:	88 0f       	add	r24, r24
    711a:	99 1f       	adc	r25, r25
    711c:	80 59       	subi	r24, 0x90	; 144
    711e:	99 4d       	sbci	r25, 0xD9	; 217
    7120:	ef 2c       	mov	r14, r15
    7122:	f0 2e       	mov	r15, r16
    7124:	01 2f       	mov	r16, r17
    7126:	11 27       	eor	r17, r17
    7128:	fc 01       	movw	r30, r24
    712a:	80 81       	ld	r24, Z
    712c:	91 81       	ldd	r25, Z+1	; 0x01
    712e:	a2 81       	ldd	r26, Z+2	; 0x02
    7130:	b3 81       	ldd	r27, Z+3	; 0x03
    7132:	e8 26       	eor	r14, r24
    7134:	f9 26       	eor	r15, r25
    7136:	0a 27       	eor	r16, r26
    7138:	1b 27       	eor	r17, r27
    713a:	e0 92 0a 47 	sts	0x470A, r14
    713e:	f0 92 0b 47 	sts	0x470B, r15
    7142:	00 93 0c 47 	sts	0x470C, r16
    7146:	10 93 0d 47 	sts	0x470D, r17
        uploadFileBufferFull = false;
        okToFillUploadFileBuffer = true;
		
        uploadPercentBS = (z*100)/numberOfPacketsToUpload;
        while(!uploadFileBufferFull);
		for(uint16_t j = 0; j <  uploadChunkSize; j++){
    714a:	f6 e3       	ldi	r31, 0x36	; 54
    714c:	cf 30       	cpi	r28, 0x0F	; 15
    714e:	df 07       	cpc	r29, r31
    7150:	19 f6       	brne	.-122    	; 0x70d8 <Uploader_uploadFile+0x202>
    Debug_SendByte((responseLength >>  0) & 0xFF);
	
    numberOfPacketsToUpload = uploadFileSize /  1000;
    leftOverBytesToUpload   = uploadFileSize %  1000;
	
    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
    7152:	08 94       	sec
    7154:	61 1c       	adc	r6, r1
    7156:	71 1c       	adc	r7, r1
    7158:	81 1c       	adc	r8, r1
    715a:	91 1c       	adc	r9, r1
    715c:	84 e6       	ldi	r24, 0x64	; 100
    715e:	90 e0       	ldi	r25, 0x00	; 0
    7160:	a0 e0       	ldi	r26, 0x00	; 0
    7162:	b0 e0       	ldi	r27, 0x00	; 0
    7164:	a8 0e       	add	r10, r24
    7166:	b9 1e       	adc	r11, r25
    7168:	ca 1e       	adc	r12, r26
    716a:	db 1e       	adc	r13, r27
    716c:	80 91 5a 2d 	lds	r24, 0x2D5A
    7170:	90 91 5b 2d 	lds	r25, 0x2D5B
    7174:	a0 91 5c 2d 	lds	r26, 0x2D5C
    7178:	b0 91 5d 2d 	lds	r27, 0x2D5D
    717c:	68 16       	cp	r6, r24
    717e:	79 06       	cpc	r7, r25
    7180:	8a 06       	cpc	r8, r26
    7182:	9b 06       	cpc	r9, r27
    7184:	08 f4       	brcc	.+2      	; 0x7188 <Uploader_uploadFile+0x2b2>
    7186:	90 cf       	rjmp	.-224    	; 0x70a8 <Uploader_uploadFile+0x1d2>
			Uploader_UpdateCRC(uploadFileBuffer[j]);
			
			
		}
    }
    uploadFileBufferFull = false;
    7188:	10 92 6b 2d 	sts	0x2D6B, r1
    okToFillUploadFileBuffer = true;
    718c:	81 e0       	ldi	r24, 0x01	; 1
    718e:	80 93 6a 2d 	sts	0x2D6A, r24
    while(!uploadFileBufferFull);
    7192:	80 91 6b 2d 	lds	r24, 0x2D6B
    7196:	88 23       	and	r24, r24
    7198:	e1 f3       	breq	.-8      	; 0x7192 <Uploader_uploadFile+0x2bc>
    719a:	c7 e2       	ldi	r28, 0x27	; 39
    719c:	d2 e3       	ldi	r29, 0x32	; 50
    719e:	20 e0       	ldi	r18, 0x00	; 0
    71a0:	30 e0       	ldi	r19, 0x00	; 0
    71a2:	40 e0       	ldi	r20, 0x00	; 0
    71a4:	50 e0       	ldi	r21, 0x00	; 0
    71a6:	3b c0       	rjmp	.+118    	; 0x721e <Uploader_uploadFile+0x348>
    for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
        Debug_SendByte(uploadFileBuffer[j]);
    71a8:	88 81       	ld	r24, Y
    71aa:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    Debug_SendByte((tmpCRC >>  0) & 0xFF);
}


void Uploader_UpdateCRC(uint8_t byte){
    uploadCRC = (uploadCRC >> 8) ^ crc_table[byte ^ (uploadCRC & 0xFF)];
    71ae:	e0 90 0a 47 	lds	r14, 0x470A
    71b2:	f0 90 0b 47 	lds	r15, 0x470B
    71b6:	00 91 0c 47 	lds	r16, 0x470C
    71ba:	10 91 0d 47 	lds	r17, 0x470D
    71be:	80 91 0a 47 	lds	r24, 0x470A
    71c2:	90 91 0b 47 	lds	r25, 0x470B
    71c6:	a0 91 0c 47 	lds	r26, 0x470C
    71ca:	b0 91 0d 47 	lds	r27, 0x470D
    71ce:	90 70       	andi	r25, 0x00	; 0
    71d0:	a0 70       	andi	r26, 0x00	; 0
    71d2:	b0 70       	andi	r27, 0x00	; 0
    71d4:	29 91       	ld	r18, Y+
    71d6:	30 e0       	ldi	r19, 0x00	; 0
    71d8:	40 e0       	ldi	r20, 0x00	; 0
    71da:	50 e0       	ldi	r21, 0x00	; 0
    71dc:	82 27       	eor	r24, r18
    71de:	93 27       	eor	r25, r19
    71e0:	a4 27       	eor	r26, r20
    71e2:	b5 27       	eor	r27, r21
    71e4:	88 0f       	add	r24, r24
    71e6:	99 1f       	adc	r25, r25
    71e8:	88 0f       	add	r24, r24
    71ea:	99 1f       	adc	r25, r25
    71ec:	80 59       	subi	r24, 0x90	; 144
    71ee:	99 4d       	sbci	r25, 0xD9	; 217
    71f0:	ef 2c       	mov	r14, r15
    71f2:	f0 2e       	mov	r15, r16
    71f4:	01 2f       	mov	r16, r17
    71f6:	11 27       	eor	r17, r17
    71f8:	fc 01       	movw	r30, r24
    71fa:	80 81       	ld	r24, Z
    71fc:	91 81       	ldd	r25, Z+1	; 0x01
    71fe:	a2 81       	ldd	r26, Z+2	; 0x02
    7200:	b3 81       	ldd	r27, Z+3	; 0x03
    7202:	e8 26       	eor	r14, r24
    7204:	f9 26       	eor	r15, r25
    7206:	0a 27       	eor	r16, r26
    7208:	1b 27       	eor	r17, r27
    720a:	e0 92 0a 47 	sts	0x470A, r14
    720e:	f0 92 0b 47 	sts	0x470B, r15
    7212:	00 93 0c 47 	sts	0x470C, r16
    7216:	10 93 0d 47 	sts	0x470D, r17
    721a:	a6 01       	movw	r20, r12
    721c:	95 01       	movw	r18, r10
		}
    }
    uploadFileBufferFull = false;
    okToFillUploadFileBuffer = true;
    while(!uploadFileBufferFull);
    for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
    721e:	80 91 5e 2d 	lds	r24, 0x2D5E
    7222:	90 91 5f 2d 	lds	r25, 0x2D5F
    7226:	a0 91 60 2d 	lds	r26, 0x2D60
    722a:	b0 91 61 2d 	lds	r27, 0x2D61
    722e:	59 01       	movw	r10, r18
    7230:	6a 01       	movw	r12, r20
    7232:	08 94       	sec
    7234:	a1 1c       	adc	r10, r1
    7236:	b1 1c       	adc	r11, r1
    7238:	c1 1c       	adc	r12, r1
    723a:	d1 1c       	adc	r13, r1
    723c:	28 17       	cp	r18, r24
    723e:	39 07       	cpc	r19, r25
    7240:	4a 07       	cpc	r20, r26
    7242:	5b 07       	cpc	r21, r27
    7244:	08 f4       	brcc	.+2      	; 0x7248 <Uploader_uploadFile+0x372>
    7246:	b0 cf       	rjmp	.-160    	; 0x71a8 <Uploader_uploadFile+0x2d2>
        Debug_SendByte(uploadFileBuffer[j]);
        Uploader_UpdateCRC(uploadFileBuffer[j]);
    }
	
    Uploader_WriteCRC();
    7248:	0e 94 42 37 	call	0x6e84	; 0x6e84 <Uploader_WriteCRC>
	
    okToCloseUploadFile = true;
    724c:	81 e0       	ldi	r24, 0x01	; 1
    724e:	80 93 6c 2d 	sts	0x2D6C, r24
    while(okToCloseUploadFile);
    7252:	80 91 6c 2d 	lds	r24, 0x2D6C
    7256:	88 23       	and	r24, r24
    7258:	e1 f7       	brne	.-8      	; 0x7252 <Uploader_uploadFile+0x37c>
    uploading = false;
    725a:	10 92 63 2d 	sts	0x2D63, r1
    okToUpload = false;
    725e:	10 92 66 2d 	sts	0x2D66, r1
    uploadPercentBS = 100;
    7262:	84 e6       	ldi	r24, 0x64	; 100
    7264:	80 93 59 2d 	sts	0x2D59, r24
    7268:	81 e0       	ldi	r24, 0x01	; 1
    return true;
}
    726a:	df 91       	pop	r29
    726c:	cf 91       	pop	r28
    726e:	1f 91       	pop	r17
    7270:	0f 91       	pop	r16
    7272:	ff 90       	pop	r15
    7274:	ef 90       	pop	r14
    7276:	df 90       	pop	r13
    7278:	cf 90       	pop	r12
    727a:	bf 90       	pop	r11
    727c:	af 90       	pop	r10
    727e:	9f 90       	pop	r9
    7280:	8f 90       	pop	r8
    7282:	7f 90       	pop	r7
    7284:	6f 90       	pop	r6
    7286:	5f 90       	pop	r5
    7288:	08 95       	ret

0000728a <Uploader_UpdateCRC>:
    Debug_SendByte((tmpCRC >>  8) & 0xFF);
    Debug_SendByte((tmpCRC >>  0) & 0xFF);
}


void Uploader_UpdateCRC(uint8_t byte){
    728a:	ef 92       	push	r14
    728c:	ff 92       	push	r15
    728e:	0f 93       	push	r16
    7290:	1f 93       	push	r17
    uploadCRC = (uploadCRC >> 8) ^ crc_table[byte ^ (uploadCRC & 0xFF)];
    7292:	e0 90 0a 47 	lds	r14, 0x470A
    7296:	f0 90 0b 47 	lds	r15, 0x470B
    729a:	00 91 0c 47 	lds	r16, 0x470C
    729e:	10 91 0d 47 	lds	r17, 0x470D
    72a2:	20 91 0a 47 	lds	r18, 0x470A
    72a6:	30 91 0b 47 	lds	r19, 0x470B
    72aa:	40 91 0c 47 	lds	r20, 0x470C
    72ae:	50 91 0d 47 	lds	r21, 0x470D
    72b2:	90 e0       	ldi	r25, 0x00	; 0
    72b4:	a0 e0       	ldi	r26, 0x00	; 0
    72b6:	b0 e0       	ldi	r27, 0x00	; 0
    72b8:	30 70       	andi	r19, 0x00	; 0
    72ba:	40 70       	andi	r20, 0x00	; 0
    72bc:	50 70       	andi	r21, 0x00	; 0
    72be:	82 27       	eor	r24, r18
    72c0:	93 27       	eor	r25, r19
    72c2:	a4 27       	eor	r26, r20
    72c4:	b5 27       	eor	r27, r21
    72c6:	88 0f       	add	r24, r24
    72c8:	99 1f       	adc	r25, r25
    72ca:	88 0f       	add	r24, r24
    72cc:	99 1f       	adc	r25, r25
    72ce:	80 59       	subi	r24, 0x90	; 144
    72d0:	99 4d       	sbci	r25, 0xD9	; 217
    72d2:	ef 2c       	mov	r14, r15
    72d4:	f0 2e       	mov	r15, r16
    72d6:	01 2f       	mov	r16, r17
    72d8:	11 27       	eor	r17, r17
    72da:	fc 01       	movw	r30, r24
    72dc:	80 81       	ld	r24, Z
    72de:	91 81       	ldd	r25, Z+1	; 0x01
    72e0:	a2 81       	ldd	r26, Z+2	; 0x02
    72e2:	b3 81       	ldd	r27, Z+3	; 0x03
    72e4:	e8 26       	eor	r14, r24
    72e6:	f9 26       	eor	r15, r25
    72e8:	0a 27       	eor	r16, r26
    72ea:	1b 27       	eor	r17, r27
    72ec:	e0 92 0a 47 	sts	0x470A, r14
    72f0:	f0 92 0b 47 	sts	0x470B, r15
    72f4:	00 93 0c 47 	sts	0x470C, r16
    72f8:	10 93 0d 47 	sts	0x470D, r17
    72fc:	1f 91       	pop	r17
    72fe:	0f 91       	pop	r16
    7300:	ff 90       	pop	r15
    7302:	ef 90       	pop	r14
    7304:	08 95       	ret

00007306 <Clock_Init>:


//******************************************************************* init functions *******************************************************************

void Clock_Init(void)
{
    7306:	0f 93       	push	r16
    7308:	df 93       	push	r29
    730a:	cf 93       	push	r28
    730c:	0f 92       	push	r0
    730e:	cd b7       	in	r28, 0x3d	; 61
    7310:	de b7       	in	r29, 0x3e	; 62
	OSC.XOSCCTRL = (uint8_t) OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_EXTCLK_gc;
    7312:	80 ec       	ldi	r24, 0xC0	; 192
    7314:	e0 e5       	ldi	r30, 0x50	; 80
    7316:	f0 e0       	ldi	r31, 0x00	; 0
    7318:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |=  OSC_XOSCEN_bm;
    731a:	80 91 50 00 	lds	r24, 0x0050
    731e:	88 60       	ori	r24, 0x08	; 8
    7320:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));
    7324:	80 91 51 00 	lds	r24, 0x0051
    7328:	83 ff       	sbrs	r24, 3
    732a:	fc cf       	rjmp	.-8      	; 0x7324 <Clock_Init+0x1e>
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | CLK_SCLKSEL_XOSC_gc;
    732c:	20 91 40 00 	lds	r18, 0x0040
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    7330:	8f b7       	in	r24, 0x3f	; 63
    7332:	89 83       	std	Y+1, r24	; 0x01
    cli();
    7334:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    7336:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    7338:	28 7f       	andi	r18, 0xF8	; 248
    733a:	23 60       	ori	r18, 0x03	; 3
    733c:	80 e4       	ldi	r24, 0x40	; 64
    733e:	90 e0       	ldi	r25, 0x00	; 0
    7340:	fc 01       	movw	r30, r24
    7342:	08 ed       	ldi	r16, 0xD8	; 216
    7344:	04 bf       	out	0x34, r16	; 52
    7346:	20 83       	st	Z, r18
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
    7348:	89 81       	ldd	r24, Y+1	; 0x01
    734a:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &CLK.CTRL, clkCtrl );
	OSC.CTRL &= ~OSC_RC2MEN_bm;
    734c:	80 91 50 00 	lds	r24, 0x0050
    7350:	8e 7f       	andi	r24, 0xFE	; 254
    7352:	80 93 50 00 	sts	0x0050, r24
}
    7356:	0f 90       	pop	r0
    7358:	cf 91       	pop	r28
    735a:	df 91       	pop	r29
    735c:	0f 91       	pop	r16
    735e:	08 95       	ret

00007360 <Disable_JTAG>:

void Disable_JTAG(void){
    7360:	0f 93       	push	r16
    7362:	df 93       	push	r29
    7364:	cf 93       	push	r28
    7366:	0f 92       	push	r0
    7368:	cd b7       	in	r28, 0x3d	; 61
    736a:	de b7       	in	r29, 0x3e	; 62
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    736c:	8f b7       	in	r24, 0x3f	; 63
    736e:	89 83       	std	Y+1, r24	; 0x01
    cli();
    7370:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    7372:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    7374:	21 e0       	ldi	r18, 0x01	; 1
    7376:	86 e9       	ldi	r24, 0x96	; 150
    7378:	90 e0       	ldi	r25, 0x00	; 0
    737a:	fc 01       	movw	r30, r24
    737c:	08 ed       	ldi	r16, 0xD8	; 216
    737e:	04 bf       	out	0x34, r16	; 52
    7380:	20 83       	st	Z, r18
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
    7382:	89 81       	ldd	r24, Y+1	; 0x01
    7384:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &MCU.MCUCR, 1 );
}
    7386:	0f 90       	pop	r0
    7388:	cf 91       	pop	r28
    738a:	df 91       	pop	r29
    738c:	0f 91       	pop	r16
    738e:	08 95       	ret

00007390 <Interrupt_Init>:


void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    7390:	e0 ea       	ldi	r30, 0xA0	; 160
    7392:	f0 e0       	ldi	r31, 0x00	; 0
    7394:	82 81       	ldd	r24, Z+2	; 0x02
    7396:	87 60       	ori	r24, 0x07	; 7
    7398:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    739a:	78 94       	sei
}
    739c:	08 95       	ret

0000739e <Display_BackgroundWriter_Init>:
	// fclk = 14745600
	// div  = 1440
	// => 14745600/1440/1024 => 10 samples per second

	// Set period/TOP value
	Display_Writer_Timer.PER = 1440;
    739e:	e0 e0       	ldi	r30, 0x00	; 0
    73a0:	fb e0       	ldi	r31, 0x0B	; 11
    73a2:	80 ea       	ldi	r24, 0xA0	; 160
    73a4:	95 e0       	ldi	r25, 0x05	; 5
    73a6:	86 a3       	std	Z+38, r24	; 0x26
    73a8:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	Display_Writer_Timer.CTRLA = (Display_Writer_Timer.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    73aa:	80 81       	ld	r24, Z
    73ac:	80 7f       	andi	r24, 0xF0	; 240
    73ae:	87 60       	ori	r24, 0x07	; 7
    73b0:	80 83       	st	Z, r24

	// Enable CCA interrupt
	Display_Writer_Timer.INTCTRLA = (Display_Writer_Timer.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
    73b2:	86 81       	ldd	r24, Z+6	; 0x06
    73b4:	8c 7f       	andi	r24, 0xFC	; 252
    73b6:	81 60       	ori	r24, 0x01	; 1
    73b8:	86 83       	std	Z+6, r24	; 0x06
}
    73ba:	08 95       	ret

000073bc <SD_BackroundWriter_Init>:
	// div  = 64
	// per  = 2304
	// => 14745600/64/2304 => 100 samples per second

	// Set period/TOP value
	SD_Writer_Timer.PER = 2304;
    73bc:	e0 e4       	ldi	r30, 0x40	; 64
    73be:	fa e0       	ldi	r31, 0x0A	; 10
    73c0:	80 e0       	ldi	r24, 0x00	; 0
    73c2:	99 e0       	ldi	r25, 0x09	; 9
    73c4:	86 a3       	std	Z+38, r24	; 0x26
    73c6:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	SD_Writer_Timer.CTRLA = (SD_Writer_Timer.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV64_gc;
    73c8:	80 81       	ld	r24, Z
    73ca:	80 7f       	andi	r24, 0xF0	; 240
    73cc:	85 60       	ori	r24, 0x05	; 5
    73ce:	80 83       	st	Z, r24

	// Enable CCA interrupt
	SD_Writer_Timer.INTCTRLA = (SD_Writer_Timer.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    73d0:	86 81       	ldd	r24, Z+6	; 0x06
    73d2:	8c 7f       	andi	r24, 0xFC	; 252
    73d4:	82 60       	ori	r24, 0x02	; 2
    73d6:	86 83       	std	Z+6, r24	; 0x06

}
    73d8:	08 95       	ret

000073da <SD_WriteRTCBlock>:
	
	return resp;
}


void SD_WriteRTCBlock(uint32_t ticker, uint32_t time){
    73da:	af 92       	push	r10
    73dc:	bf 92       	push	r11
    73de:	cf 92       	push	r12
    73e0:	df 92       	push	r13
    73e2:	ef 92       	push	r14
    73e4:	ff 92       	push	r15
    73e6:	0f 93       	push	r16
    73e8:	1f 93       	push	r17
    73ea:	7b 01       	movw	r14, r22
    73ec:	8c 01       	movw	r16, r24
    73ee:	59 01       	movw	r10, r18
    73f0:	6a 01       	movw	r12, r20
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    73f2:	8f ef       	ldi	r24, 0xFF	; 255
    73f4:	9f ef       	ldi	r25, 0xFF	; 255
    73f6:	af ef       	ldi	r26, 0xFF	; 255
    73f8:	bf ef       	ldi	r27, 0xFF	; 255
    73fa:	80 93 77 4c 	sts	0x4C77, r24
    73fe:	90 93 78 4c 	sts	0x4C78, r25
    7402:	a0 93 79 4c 	sts	0x4C79, r26
    7406:	b0 93 7a 4c 	sts	0x4C7A, r27
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    740a:	6c e4       	ldi	r22, 0x4C	; 76
    740c:	74 e7       	ldi	r23, 0x74	; 116
    740e:	8e ed       	ldi	r24, 0xDE	; 222
    7410:	90 eb       	ldi	r25, 0xB0	; 176
    7412:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(27);				// record size  
    7416:	6b e1       	ldi	r22, 0x1B	; 27
    7418:	70 e0       	ldi	r23, 0x00	; 0
    741a:	80 e0       	ldi	r24, 0x00	; 0
    741c:	90 e0       	ldi	r25, 0x00	; 0
    741e:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write16(2); 		// record type  
    7422:	82 e0       	ldi	r24, 0x02	; 2
    7424:	90 e0       	ldi	r25, 0x00	; 0
    7426:	0e 94 27 2c 	call	0x584e	; 0x584e <SD_Write16>
	
														// payload
	
	SD_Write32(ticker);				// 32-bit counter
    742a:	c8 01       	movw	r24, r16
    742c:	b7 01       	movw	r22, r14
    742e:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(time);			    // UNIX time  (40bit)
    7432:	c6 01       	movw	r24, r12
    7434:	b5 01       	movw	r22, r10
    7436:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write8(0);
    743a:	80 e0       	ldi	r24, 0x00	; 0
    743c:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_Write32(0);           // unix time nanoseconds
    7440:	60 e0       	ldi	r22, 0x00	; 0
    7442:	70 e0       	ldi	r23, 0x00	; 0
    7444:	80 e0       	ldi	r24, 0x00	; 0
    7446:	90 e0       	ldi	r25, 0x00	; 0
    7448:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_WriteCRC();			      // CRC			
    744c:	0e 94 48 2c 	call	0x5890	; 0x5890 <SD_WriteCRC>
		
	f_sync(&Log_File);
    7450:	86 ef       	ldi	r24, 0xF6	; 246
    7452:	97 e4       	ldi	r25, 0x47	; 71
    7454:	0e 94 95 1c 	call	0x392a	; 0x392a <f_sync>

}
    7458:	1f 91       	pop	r17
    745a:	0f 91       	pop	r16
    745c:	ff 90       	pop	r15
    745e:	ef 90       	pop	r14
    7460:	df 90       	pop	r13
    7462:	cf 90       	pop	r12
    7464:	bf 90       	pop	r11
    7466:	af 90       	pop	r10
    7468:	08 95       	ret

0000746a <getDeviceID>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    746a:	82 e0       	ldi	r24, 0x02	; 2
    746c:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7470:	e8 e0       	ldi	r30, 0x08	; 8
    7472:	f0 e0       	ldi	r31, 0x00	; 0
    7474:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7476:	10 92 ca 01 	sts	0x01CA, r1




void getDeviceID(void){
	deviceID[0] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM0_offset );
    747a:	e0 93 a6 46 	sts	0x46A6, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    747e:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7482:	e9 e0       	ldi	r30, 0x09	; 9
    7484:	f0 e0       	ldi	r31, 0x00	; 0
    7486:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7488:	10 92 ca 01 	sts	0x01CA, r1
    deviceID[1] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM1_offset );
    748c:	e0 93 a7 46 	sts	0x46A7, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7490:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7494:	ea e0       	ldi	r30, 0x0A	; 10
    7496:	f0 e0       	ldi	r31, 0x00	; 0
    7498:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    749a:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[2] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM2_offset );
    749e:	e0 93 a8 46 	sts	0x46A8, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    74a2:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    74a6:	eb e0       	ldi	r30, 0x0B	; 11
    74a8:	f0 e0       	ldi	r31, 0x00	; 0
    74aa:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    74ac:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[3] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM3_offset );
    74b0:	e0 93 a9 46 	sts	0x46A9, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    74b4:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    74b8:	ec e0       	ldi	r30, 0x0C	; 12
    74ba:	f0 e0       	ldi	r31, 0x00	; 0
    74bc:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    74be:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[4] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM4_offset );
    74c2:	e0 93 aa 46 	sts	0x46AA, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    74c6:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    74ca:	ed e0       	ldi	r30, 0x0D	; 13
    74cc:	f0 e0       	ldi	r31, 0x00	; 0
    74ce:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    74d0:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[5] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + LOTNUM5_offset );
    74d4:	e0 93 ab 46 	sts	0x46AB, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    74d8:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    74dc:	e0 e1       	ldi	r30, 0x10	; 16
    74de:	f0 e0       	ldi	r31, 0x00	; 0
    74e0:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    74e2:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[6] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + WAFNUM_offset );
    74e6:	e0 93 ac 46 	sts	0x46AC, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    74ea:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    74ee:	e2 e1       	ldi	r30, 0x12	; 18
    74f0:	f0 e0       	ldi	r31, 0x00	; 0
    74f2:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    74f4:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
    74f8:	e0 93 ad 46 	sts	0x46AD, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    74fc:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7500:	e3 e1       	ldi	r30, 0x13	; 19
    7502:	f0 e0       	ldi	r31, 0x00	; 0
    7504:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7506:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
    750a:	e0 93 ae 46 	sts	0x46AE, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    750e:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7512:	e4 e1       	ldi	r30, 0x14	; 20
    7514:	f0 e0       	ldi	r31, 0x00	; 0
    7516:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7518:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
    751c:	e0 93 af 46 	sts	0x46AF, r30
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7520:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
    7524:	e5 e1       	ldi	r30, 0x15	; 21
    7526:	f0 e0       	ldi	r31, 0x00	; 0
    7528:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    752a:	10 92 ca 01 	sts	0x01CA, r1
	deviceID[10] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY1_offset );
    752e:	e0 93 b0 46 	sts	0x46B0, r30
	deviceID[11] = '\0';
    7532:	10 92 b1 46 	sts	0x46B1, r1
    7536:	e6 ea       	ldi	r30, 0xA6	; 166
    7538:	f6 e4       	ldi	r31, 0x46	; 70
	for(uint8_t i = 0; i < 11; i++){
	    if(deviceID[i] == 0){
	       deviceID[i] += 1;
    753a:	91 e0       	ldi	r25, 0x01	; 1
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
	deviceID[10] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY1_offset );
	deviceID[11] = '\0';
	for(uint8_t i = 0; i < 11; i++){
	    if(deviceID[i] == 0){
    753c:	80 81       	ld	r24, Z
    753e:	88 23       	and	r24, r24
    7540:	09 f4       	brne	.+2      	; 0x7544 <getDeviceID+0xda>
	       deviceID[i] += 1;
    7542:	90 83       	st	Z, r25
    7544:	31 96       	adiw	r30, 0x01	; 1
	deviceID[7] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX0_offset );
	deviceID[8] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDX1_offset );
	deviceID[9] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY0_offset );
	deviceID[10] = SP_ReadCalibrationByte( PROD_SIGNATURES_START + COORDY1_offset );
	deviceID[11] = '\0';
	for(uint8_t i = 0; i < 11; i++){
    7546:	86 e4       	ldi	r24, 0x46	; 70
    7548:	e1 3b       	cpi	r30, 0xB1	; 177
    754a:	f8 07       	cpc	r31, r24
    754c:	b9 f7       	brne	.-18     	; 0x753c <getDeviceID+0xd2>
	    if(deviceID[i] == 0){
	       deviceID[i] += 1;
	    }
	}
}
    754e:	08 95       	ret

00007550 <__vector_108>:

	// Enable CCA interrupt
	Display_Writer_Timer.INTCTRLA = (Display_Writer_Timer.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
}

ISR(Display_Writer_Timer_vect){
    7550:	1f 92       	push	r1
    7552:	0f 92       	push	r0
    7554:	0f b6       	in	r0, 0x3f	; 63
    7556:	0f 92       	push	r0
    7558:	0b b6       	in	r0, 0x3b	; 59
    755a:	0f 92       	push	r0
    755c:	11 24       	eor	r1, r1
    755e:	cf 92       	push	r12
    7560:	df 92       	push	r13
    7562:	ef 92       	push	r14
    7564:	ff 92       	push	r15
    7566:	0f 93       	push	r16
    7568:	1f 93       	push	r17
    756a:	2f 93       	push	r18
    756c:	3f 93       	push	r19
    756e:	4f 93       	push	r20
    7570:	5f 93       	push	r21
    7572:	6f 93       	push	r22
    7574:	7f 93       	push	r23
    7576:	8f 93       	push	r24
    7578:	9f 93       	push	r25
    757a:	af 93       	push	r26
    757c:	bf 93       	push	r27
    757e:	cf 93       	push	r28
    7580:	df 93       	push	r29
    7582:	ef 93       	push	r30
    7584:	ff 93       	push	r31
	
	if(backlight_Timer > 20){
    7586:	80 91 89 2d 	lds	r24, 0x2D89
    758a:	85 31       	cpi	r24, 0x15	; 21
    758c:	20 f0       	brcs	.+8      	; 0x7596 <__vector_108+0x46>

void display_setBacklight(bool state){
	if(state){
		Backlight_Port.OUTSET = 1 << Backlight_Pin;
	} else {
		Backlight_Port.OUTCLR = 1 << Backlight_Pin;
    758e:	81 e0       	ldi	r24, 0x01	; 1
    7590:	e0 ea       	ldi	r30, 0xA0	; 160
    7592:	f6 e0       	ldi	r31, 0x06	; 6
    7594:	86 83       	std	Z+6, r24	; 0x06
		display_setBacklight(false);
	}
	backlight_Timer++;
    7596:	80 91 89 2d 	lds	r24, 0x2D89
    759a:	8f 5f       	subi	r24, 0xFF	; 255
    759c:	80 93 89 2d 	sts	0x2D89, r24
	
	
	if(!okToDisplayGUI && Button_Pressed(Button_Pin)){
    75a0:	80 91 75 2d 	lds	r24, 0x2D75
    75a4:	88 23       	and	r24, r24
    75a6:	59 f4       	brne	.+22     	; 0x75be <__vector_108+0x6e>
	Button_Port.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;
}


bool Button_Pressed(uint8_t button){
	if((Button_Port.IN & (1<<button)) >0 ){
    75a8:	80 91 a8 06 	lds	r24, 0x06A8
    75ac:	81 fd       	sbrc	r24, 1
    75ae:	07 c0       	rjmp	.+14     	; 0x75be <__vector_108+0x6e>
    75b0:	34 c3       	rjmp	.+1640   	; 0x7c1a <__vector_108+0x6ca>
    75b2:	ca 01       	movw	r24, r20
    75b4:	01 97       	sbiw	r24, 0x01	; 1
    75b6:	f1 f7       	brne	.-4      	; 0x75b4 <__vector_108+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    75b8:	21 50       	subi	r18, 0x01	; 1
    75ba:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    75bc:	d1 f7       	brne	.-12     	; 0x75b2 <__vector_108+0x62>
		_delay_ms(250);
	}
	
	
	
	if(recording){
    75be:	80 91 e3 2c 	lds	r24, 0x2CE3
    75c2:	88 23       	and	r24, r24
    75c4:	b1 f1       	breq	.+108    	; 0x7632 <__vector_108+0xe2>
		if(UNIX_Time > timeToStopRecording){
    75c6:	20 91 79 2d 	lds	r18, 0x2D79
    75ca:	30 91 7a 2d 	lds	r19, 0x2D7A
    75ce:	40 91 7b 2d 	lds	r20, 0x2D7B
    75d2:	50 91 7c 2d 	lds	r21, 0x2D7C
    75d6:	80 91 1a 2d 	lds	r24, 0x2D1A
    75da:	90 91 1b 2d 	lds	r25, 0x2D1B
    75de:	a0 91 1c 2d 	lds	r26, 0x2D1C
    75e2:	b0 91 1d 2d 	lds	r27, 0x2D1D
    75e6:	28 17       	cp	r18, r24
    75e8:	39 07       	cpc	r19, r25
    75ea:	4a 07       	cpc	r20, r26
    75ec:	5b 07       	cpc	r21, r27
    75ee:	08 f5       	brcc	.+66     	; 0x7632 <__vector_108+0xe2>
			restartingFile = true;
    75f0:	81 e0       	ldi	r24, 0x01	; 1
    75f2:	80 93 76 2d 	sts	0x2D76, r24
			recording = false;
    75f6:	10 92 e3 2c 	sts	0x2CE3, r1
			okToCloseLogFile = true;
    75fa:	80 93 74 2d 	sts	0x2D74, r24
			while(okToCloseLogFile);
    75fe:	80 91 74 2d 	lds	r24, 0x2D74
    7602:	88 23       	and	r24, r24
    7604:	e1 f7       	brne	.-8      	; 0x75fe <__vector_108+0xae>
			if(percentDiskUsed < 950){
    7606:	80 91 85 2d 	lds	r24, 0x2D85
    760a:	90 91 86 2d 	lds	r25, 0x2D86
    760e:	a0 91 87 2d 	lds	r26, 0x2D87
    7612:	b0 91 88 2d 	lds	r27, 0x2D88
    7616:	86 5b       	subi	r24, 0xB6	; 182
    7618:	93 40       	sbci	r25, 0x03	; 3
    761a:	a0 40       	sbci	r26, 0x00	; 0
    761c:	b0 40       	sbci	r27, 0x00	; 0
    761e:	38 f4       	brcc	.+14     	; 0x762e <__vector_108+0xde>
				okToOpenLogFile = true;
    7620:	81 e0       	ldi	r24, 0x01	; 1
    7622:	80 93 72 2d 	sts	0x2D72, r24
				while(!recording);
    7626:	80 91 e3 2c 	lds	r24, 0x2CE3
    762a:	88 23       	and	r24, r24
    762c:	e1 f3       	breq	.-8      	; 0x7626 <__vector_108+0xd6>
			}
			restartingFile = false;
    762e:	10 92 76 2d 	sts	0x2D76, r1
		}
	}
	
	if(timeIsValid){
    7632:	80 91 6f 2d 	lds	r24, 0x2D6F
    7636:	88 23       	and	r24, r24
    7638:	71 f1       	breq	.+92     	; 0x7696 <__vector_108+0x146>
		syncCounter++;
    763a:	80 91 8a 2d 	lds	r24, 0x2D8A
    763e:	90 91 8b 2d 	lds	r25, 0x2D8B
    7642:	01 96       	adiw	r24, 0x01	; 1
    7644:	80 93 8a 2d 	sts	0x2D8A, r24
    7648:	90 93 8b 2d 	sts	0x2D8B, r25
	   if(syncCounter > 6000){
    764c:	80 91 8a 2d 	lds	r24, 0x2D8A
    7650:	90 91 8b 2d 	lds	r25, 0x2D8B
    7654:	81 57       	subi	r24, 0x71	; 113
    7656:	97 41       	sbci	r25, 0x17	; 23
    7658:	f0 f0       	brcs	.+60     	; 0x7696 <__vector_108+0x146>
		   syncCounter = 0;
    765a:	10 92 8a 2d 	sts	0x2D8A, r1
    765e:	10 92 8b 2d 	sts	0x2D8B, r1
	return true;
}

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
    7662:	80 91 21 04 	lds	r24, 0x0421
    7666:	80 61       	ori	r24, 0x10	; 16
    7668:	e0 e2       	ldi	r30, 0x20	; 32
    766a:	f4 e0       	ldi	r31, 0x04	; 4
    766c:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
    766e:	80 91 21 04 	lds	r24, 0x0421
    7672:	84 fd       	sbrc	r24, 4
    7674:	fc cf       	rjmp	.-8      	; 0x766e <__vector_108+0x11e>
	return RTC32.CNT;
    7676:	80 91 24 04 	lds	r24, 0x0424
    767a:	90 91 25 04 	lds	r25, 0x0425
    767e:	a0 91 26 04 	lds	r26, 0x0426
    7682:	b0 91 27 04 	lds	r27, 0x0427
		   UNIX_Time = Time_Get();
    7686:	80 93 1a 2d 	sts	0x2D1A, r24
    768a:	90 93 1b 2d 	sts	0x2D1B, r25
    768e:	a0 93 1c 2d 	sts	0x2D1C, r26
    7692:	b0 93 1d 2d 	sts	0x2D1D, r27
	
	
	
	
	
	if(okToDisplayGUI){
    7696:	80 91 75 2d 	lds	r24, 0x2D75
    769a:	88 23       	and	r24, r24
    769c:	09 f4       	brne	.+2      	; 0x76a0 <__vector_108+0x150>
    769e:	47 c3       	rjmp	.+1678   	; 0x7d2e <__vector_108+0x7de>
	
	// controls
		if(currentMode == recordMode && Button_Pressed(Button_Pin)){								// switch to sensor screen
    76a0:	80 91 71 2d 	lds	r24, 0x2D71
    76a4:	88 23       	and	r24, r24
    76a6:	61 f4       	brne	.+24     	; 0x76c0 <__vector_108+0x170>
    76a8:	80 91 a8 06 	lds	r24, 0x06A8
    76ac:	81 fd       	sbrc	r24, 1
    76ae:	08 c0       	rjmp	.+16     	; 0x76c0 <__vector_108+0x170>
    76b0:	bf c2       	rjmp	.+1406   	; 0x7c30 <__vector_108+0x6e0>
    76b2:	ca 01       	movw	r24, r20
    76b4:	01 97       	sbiw	r24, 0x01	; 1
    76b6:	f1 f7       	brne	.-4      	; 0x76b4 <__vector_108+0x164>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    76b8:	21 50       	subi	r18, 0x01	; 1
    76ba:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    76bc:	d1 f7       	brne	.-12     	; 0x76b2 <__vector_108+0x162>
    76be:	6c c0       	rjmp	.+216    	; 0x7798 <__vector_108+0x248>
			currentMode = sensorMode;
			display_setBacklight(true);
			backlight_Timer = 0;
			display_clearScreen();
			_delay_ms(250);
		} else if(currentMode == sensorMode && Button_Pressed(Button_Pin)){							// switch to system screen
    76c0:	90 91 71 2d 	lds	r25, 0x2D71
    76c4:	91 30       	cpi	r25, 0x01	; 1
    76c6:	61 f4       	brne	.+24     	; 0x76e0 <__vector_108+0x190>
    76c8:	80 91 a8 06 	lds	r24, 0x06A8
    76cc:	81 fd       	sbrc	r24, 1
    76ce:	08 c0       	rjmp	.+16     	; 0x76e0 <__vector_108+0x190>
    76d0:	be c2       	rjmp	.+1404   	; 0x7c4e <__vector_108+0x6fe>
    76d2:	ca 01       	movw	r24, r20
    76d4:	01 97       	sbiw	r24, 0x01	; 1
    76d6:	f1 f7       	brne	.-4      	; 0x76d4 <__vector_108+0x184>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    76d8:	21 50       	subi	r18, 0x01	; 1
    76da:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    76dc:	d1 f7       	brne	.-12     	; 0x76d2 <__vector_108+0x182>
    76de:	5c c0       	rjmp	.+184    	; 0x7798 <__vector_108+0x248>
    76e0:	80 91 a8 06 	lds	r24, 0x06A8
    76e4:	82 fd       	sbrc	r24, 2
    76e6:	19 c0       	rjmp	.+50     	; 0x771a <__vector_108+0x1ca>
    76e8:	c0 c2       	rjmp	.+1408   	; 0x7c6a <__vector_108+0x71a>
			display_setBacklight(true);
			backlight_Timer = 0;
			display_clearScreen();
			_delay_ms(250);
			
		}  else if(Button_Pressed(Switch_Pin) && !recording && timeIsValid && SD_Inserted()){		// start recording
    76ea:	80 91 6f 2d 	lds	r24, 0x2D6F
    76ee:	88 23       	and	r24, r24
    76f0:	a1 f0       	breq	.+40     	; 0x771a <__vector_108+0x1ca>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    76f2:	80 91 68 06 	lds	r24, 0x0668
    76f6:	80 fd       	sbrc	r24, 0
    76f8:	10 c0       	rjmp	.+32     	; 0x771a <__vector_108+0x1ca>
    76fa:	bd c2       	rjmp	.+1402   	; 0x7c76 <__vector_108+0x726>
			if(percentDiskUsed < 950){
				okToGetRemainingSpace = true;
    76fc:	81 e0       	ldi	r24, 0x01	; 1
    76fe:	80 93 23 47 	sts	0x4723, r24
				while(!okToGetRemainingSpace);
    7702:	80 91 23 47 	lds	r24, 0x4723
    7706:	88 23       	and	r24, r24
    7708:	e1 f3       	breq	.-8      	; 0x7702 <__vector_108+0x1b2>

				okToOpenLogFile = true;
    770a:	81 e0       	ldi	r24, 0x01	; 1
    770c:	80 93 72 2d 	sts	0x2D72, r24
				while(okToOpenLogFile);
    7710:	80 91 72 2d 	lds	r24, 0x2D72
    7714:	88 23       	and	r24, r24
    7716:	e1 f7       	brne	.-8      	; 0x7710 <__vector_108+0x1c0>
    7718:	3f c0       	rjmp	.+126    	; 0x7798 <__vector_108+0x248>
    771a:	80 91 a8 06 	lds	r24, 0x06A8
    771e:	82 ff       	sbrs	r24, 2
    7720:	b9 c2       	rjmp	.+1394   	; 0x7c94 <__vector_108+0x744>
			} 
			
		} else if((!Button_Pressed(Switch_Pin) || !SD_Inserted()) && recording){										// close file
    7722:	80 91 e3 2c 	lds	r24, 0x2CE3
    7726:	88 23       	and	r24, r24
    7728:	b9 f1       	breq	.+110    	; 0x7798 <__vector_108+0x248>
			recording = false;
    772a:	10 92 e3 2c 	sts	0x2CE3, r1

    return tmp2;
}

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    772e:	10 92 2c 2d 	sts	0x2D2C, r1
    7732:	10 92 2d 2d 	sts	0x2D2D, r1
  	temperatureBufferToWriteTo = 1;
    7736:	81 e0       	ldi	r24, 0x01	; 1
    7738:	80 93 a6 2a 	sts	0x2AA6, r24
	okToSendTemperatureBuffer1 = false;
    773c:	10 92 2a 2d 	sts	0x2D2A, r1
	okToSendTemperatureBuffer2 = false;
    7740:	10 92 2b 2d 	sts	0x2D2B, r1
	okToSendPressureBuffer1 = false;
	okToSendPressureBuffer2 = false;
}

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    7744:	10 92 34 2d 	sts	0x2D34, r1
    7748:	10 92 35 2d 	sts	0x2D35, r1
	humidityBufferToWriteTo = 1;
    774c:	80 93 a8 2a 	sts	0x2AA8, r24
	okToSendHumidityBuffer1 = false;
    7750:	10 92 32 2d 	sts	0x2D32, r1
	okToSendHumidityBuffer2 = false;
    7754:	10 92 33 2d 	sts	0x2D33, r1
	okToSendTemperatureBuffer1 = false;
	okToSendTemperatureBuffer2 = false;
}

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    7758:	10 92 30 2d 	sts	0x2D30, r1
    775c:	10 92 31 2d 	sts	0x2D31, r1
	pressureBufferToWriteTo = 1;
    7760:	80 93 a7 2a 	sts	0x2AA7, r24
	okToSendPressureBuffer1 = false;
    7764:	10 92 2e 2d 	sts	0x2D2E, r1
	okToSendPressureBuffer2 = false;
    7768:	10 92 2f 2d 	sts	0x2D2F, r1
	okToSendHumidityBuffer1 = false;
	okToSendHumidityBuffer2 = false;
}

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    776c:	10 92 38 2d 	sts	0x2D38, r1
    7770:	10 92 39 2d 	sts	0x2D39, r1
	microphoneBufferToWriteTo = 1;
    7774:	80 93 a9 2a 	sts	0x2AA9, r24
	okToSendMicrophoneBuffer1 = false;
    7778:	10 92 36 2d 	sts	0x2D36, r1
	okToSendMicrophoneBuffer2 = false;
    777c:	10 92 37 2d 	sts	0x2D37, r1
}

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    7780:	10 92 3c 2d 	sts	0x2D3C, r1
    7784:	10 92 3d 2d 	sts	0x2D3D, r1
	lightBufferToWriteTo = 1;
    7788:	80 93 aa 2a 	sts	0x2AAA, r24
	okToSendLightBuffer1 = false;
    778c:	10 92 3a 2d 	sts	0x2D3A, r1
	okToSendLightBuffer2 = false;
    7790:	10 92 3b 2d 	sts	0x2D3B, r1
			Sensors_ResetTemperatureBuffers();
			Sensors_ResetHumidityBuffers();
			Sensors_ResetPressureBuffers();
			Sensors_ResetMicrophoneBuffers();
			Sensors_ResetLightBuffers();
			okToCloseLogFile = true;
    7794:	80 93 74 2d 	sts	0x2D74, r24
		}

	// load displays

		if(currentMode == recordMode){
    7798:	80 91 71 2d 	lds	r24, 0x2D71
    779c:	88 23       	and	r24, r24
    779e:	09 f0       	breq	.+2      	; 0x77a2 <__vector_108+0x252>
    77a0:	34 c1       	rjmp	.+616    	; 0x7a0a <__vector_108+0x4ba>
			if(recording){
    77a2:	80 91 e3 2c 	lds	r24, 0x2CE3
    77a6:	88 23       	and	r24, r24
    77a8:	09 f4       	brne	.+2      	; 0x77ac <__vector_108+0x25c>
    77aa:	42 c0       	rjmp	.+132    	; 0x7830 <__vector_108+0x2e0>
				sprintf(tempDisplay, "Recording   %4lum", (UNIX_Time - timeRecordingStarted)/60);		// load recording screen
    77ac:	8d b7       	in	r24, 0x3d	; 61
    77ae:	9e b7       	in	r25, 0x3e	; 62
    77b0:	08 97       	sbiw	r24, 0x08	; 8
    77b2:	8d bf       	out	0x3d, r24	; 61
    77b4:	9e bf       	out	0x3e, r25	; 62
    77b6:	0d b7       	in	r16, 0x3d	; 61
    77b8:	1e b7       	in	r17, 0x3e	; 62
    77ba:	0f 5f       	subi	r16, 0xFF	; 255
    77bc:	1f 4f       	sbci	r17, 0xFF	; 255
    77be:	8b e7       	ldi	r24, 0x7B	; 123
    77c0:	e8 2e       	mov	r14, r24
    77c2:	80 e5       	ldi	r24, 0x50	; 80
    77c4:	f8 2e       	mov	r15, r24
    77c6:	ad b7       	in	r26, 0x3d	; 61
    77c8:	be b7       	in	r27, 0x3e	; 62
    77ca:	11 96       	adiw	r26, 0x01	; 1
    77cc:	ed 92       	st	X+, r14
    77ce:	fc 92       	st	X, r15
    77d0:	12 97       	sbiw	r26, 0x02	; 2
    77d2:	83 e3       	ldi	r24, 0x33	; 51
    77d4:	90 e2       	ldi	r25, 0x20	; 32
    77d6:	f8 01       	movw	r30, r16
    77d8:	82 83       	std	Z+2, r24	; 0x02
    77da:	93 83       	std	Z+3, r25	; 0x03
    77dc:	60 91 1a 2d 	lds	r22, 0x2D1A
    77e0:	70 91 1b 2d 	lds	r23, 0x2D1B
    77e4:	80 91 1c 2d 	lds	r24, 0x2D1C
    77e8:	90 91 1d 2d 	lds	r25, 0x2D1D
    77ec:	20 91 10 2d 	lds	r18, 0x2D10
    77f0:	30 91 11 2d 	lds	r19, 0x2D11
    77f4:	40 91 12 2d 	lds	r20, 0x2D12
    77f8:	50 91 13 2d 	lds	r21, 0x2D13
    77fc:	62 1b       	sub	r22, r18
    77fe:	73 0b       	sbc	r23, r19
    7800:	84 0b       	sbc	r24, r20
    7802:	95 0b       	sbc	r25, r21
    7804:	2c e3       	ldi	r18, 0x3C	; 60
    7806:	30 e0       	ldi	r19, 0x00	; 0
    7808:	40 e0       	ldi	r20, 0x00	; 0
    780a:	50 e0       	ldi	r21, 0x00	; 0
    780c:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    7810:	d8 01       	movw	r26, r16
    7812:	14 96       	adiw	r26, 0x04	; 4
    7814:	2d 93       	st	X+, r18
    7816:	3d 93       	st	X+, r19
    7818:	4d 93       	st	X+, r20
    781a:	5c 93       	st	X, r21
    781c:	17 97       	sbiw	r26, 0x07	; 7
    781e:	0e 94 21 50 	call	0xa042	; 0xa042 <sprintf>
				display_putString(tempDisplay,0,0,System5x7);
    7822:	ed b7       	in	r30, 0x3d	; 61
    7824:	fe b7       	in	r31, 0x3e	; 62
    7826:	38 96       	adiw	r30, 0x08	; 8
    7828:	ed bf       	out	0x3d, r30	; 61
    782a:	fe bf       	out	0x3e, r31	; 62
    782c:	c7 01       	movw	r24, r14
    782e:	02 c0       	rjmp	.+4      	; 0x7834 <__vector_108+0x2e4>
			} else {
				display_putString("Paused           ",0,0,System5x7);
    7830:	85 e4       	ldi	r24, 0x45	; 69
    7832:	90 e2       	ldi	r25, 0x20	; 32
    7834:	60 e0       	ldi	r22, 0x00	; 0
    7836:	40 e0       	ldi	r20, 0x00	; 0
    7838:	2c ea       	ldi	r18, 0xAC	; 172
    783a:	3a e2       	ldi	r19, 0x2A	; 42
    783c:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>
			}


			sprintf(tempDisplay, "Uploading    %3u", uploadPercentBS);
    7840:	20 91 59 2d 	lds	r18, 0x2D59
    7844:	00 d0       	rcall	.+0      	; 0x7846 <__vector_108+0x2f6>
    7846:	00 d0       	rcall	.+0      	; 0x7848 <__vector_108+0x2f8>
    7848:	ed b7       	in	r30, 0x3d	; 61
    784a:	fe b7       	in	r31, 0x3e	; 62
    784c:	31 96       	adiw	r30, 0x01	; 1
    784e:	cb e7       	ldi	r28, 0x7B	; 123
    7850:	d0 e5       	ldi	r29, 0x50	; 80
    7852:	ad b7       	in	r26, 0x3d	; 61
    7854:	be b7       	in	r27, 0x3e	; 62
    7856:	11 96       	adiw	r26, 0x01	; 1
    7858:	cd 93       	st	X+, r28
    785a:	dc 93       	st	X, r29
    785c:	12 97       	sbiw	r26, 0x02	; 2
    785e:	87 e5       	ldi	r24, 0x57	; 87
    7860:	90 e2       	ldi	r25, 0x20	; 32
    7862:	82 83       	std	Z+2, r24	; 0x02
    7864:	93 83       	std	Z+3, r25	; 0x03
    7866:	24 83       	std	Z+4, r18	; 0x04
    7868:	15 82       	std	Z+5, r1	; 0x05
    786a:	0e 94 21 50 	call	0xa042	; 0xa042 <sprintf>
			strcat(tempDisplay,"%");
    786e:	ed b7       	in	r30, 0x3d	; 61
    7870:	fe b7       	in	r31, 0x3e	; 62
    7872:	36 96       	adiw	r30, 0x06	; 6
    7874:	ed bf       	out	0x3d, r30	; 61
    7876:	fe bf       	out	0x3e, r31	; 62
    7878:	ce 01       	movw	r24, r28
    787a:	68 e6       	ldi	r22, 0x68	; 104
    787c:	70 e2       	ldi	r23, 0x20	; 32
    787e:	0e 94 72 4f 	call	0x9ee4	; 0x9ee4 <strcat>
			display_putString(tempDisplay,1,0,System5x7);
    7882:	ce 01       	movw	r24, r28
    7884:	61 e0       	ldi	r22, 0x01	; 1
    7886:	40 e0       	ldi	r20, 0x00	; 0
    7888:	2c ea       	ldi	r18, 0xAC	; 172
    788a:	3a e2       	ldi	r19, 0x2A	; 42
    788c:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>
    7890:	80 91 68 06 	lds	r24, 0x0668
    7894:	80 ff       	sbrs	r24, 0
    7896:	03 c2       	rjmp	.+1030   	; 0x7c9e <__vector_108+0x74e>
			if(SD_Inserted()){
				sprintf(tempDisplay,"Disk Used: %3lu.%lu",percentDiskUsed/10,percentDiskUsed%10);
				strcat(tempDisplay,"%");
				display_putString(tempDisplay,2,0,System5x7);
			} else {
				display_putString("Disk Used:  ??.?%",2,0,System5x7);
    7898:	8a e6       	ldi	r24, 0x6A	; 106
    789a:	90 e2       	ldi	r25, 0x20	; 32
    789c:	62 e0       	ldi	r22, 0x02	; 2
    789e:	40 e0       	ldi	r20, 0x00	; 0
    78a0:	2c ea       	ldi	r18, 0xAC	; 172
    78a2:	3a e2       	ldi	r19, 0x2A	; 42
    78a4:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>
			}



			display_putString("                 ",3,0,System5x7);
    78a8:	8c e7       	ldi	r24, 0x7C	; 124
    78aa:	90 e2       	ldi	r25, 0x20	; 32
    78ac:	63 e0       	ldi	r22, 0x03	; 3
    78ae:	40 e0       	ldi	r20, 0x00	; 0
    78b0:	2c ea       	ldi	r18, 0xAC	; 172
    78b2:	3a e2       	ldi	r19, 0x2A	; 42
    78b4:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>
			display_putString("                 ",4,0,System5x7);
    78b8:	8c e7       	ldi	r24, 0x7C	; 124
    78ba:	90 e2       	ldi	r25, 0x20	; 32
    78bc:	64 e0       	ldi	r22, 0x04	; 4
    78be:	40 e0       	ldi	r20, 0x00	; 0
    78c0:	2c ea       	ldi	r18, 0xAC	; 172
    78c2:	3a e2       	ldi	r19, 0x2A	; 42
    78c4:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>
			display_putString("                 ",5,0,System5x7);
    78c8:	8c e7       	ldi	r24, 0x7C	; 124
    78ca:	90 e2       	ldi	r25, 0x20	; 32
    78cc:	65 e0       	ldi	r22, 0x05	; 5
    78ce:	40 e0       	ldi	r20, 0x00	; 0
    78d0:	2c ea       	ldi	r18, 0xAC	; 172
    78d2:	3a e2       	ldi	r19, 0x2A	; 42
    78d4:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>



			Time_UTCSecsToTime(UNIX_Time,&time);
    78d8:	60 91 1a 2d 	lds	r22, 0x2D1A
    78dc:	70 91 1b 2d 	lds	r23, 0x2D1B
    78e0:	80 91 1c 2d 	lds	r24, 0x2D1C
    78e4:	90 91 1d 2d 	lds	r25, 0x2D1D
    78e8:	4c eb       	ldi	r20, 0xBC	; 188
    78ea:	57 e4       	ldi	r21, 0x47	; 71
    78ec:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <Time_UTCSecsToTime>
			clockHour = time.Hour + 24;
			clockHour -= timeZoneShift;
    78f0:	90 91 bf 47 	lds	r25, 0x47BF
    78f4:	98 5e       	subi	r25, 0xE8	; 232
    78f6:	80 91 23 2d 	lds	r24, 0x2D23
    78fa:	98 1b       	sub	r25, r24
    78fc:	90 93 70 2d 	sts	0x2D70, r25
			if(clockHour > 24){
    7900:	99 31       	cpi	r25, 0x19	; 25
    7902:	18 f0       	brcs	.+6      	; 0x790a <__vector_108+0x3ba>
				clockHour -= 24;
    7904:	98 51       	subi	r25, 0x18	; 24
    7906:	90 93 70 2d 	sts	0x2D70, r25
			}

			if(clockHour == 0){
    790a:	90 91 70 2d 	lds	r25, 0x2D70
    790e:	99 23       	and	r25, r25
    7910:	49 f4       	brne	.+18     	; 0x7924 <__vector_108+0x3d4>
				displayAM = true;
    7912:	81 e0       	ldi	r24, 0x01	; 1
    7914:	80 93 77 2d 	sts	0x2D77, r24
				displayPM = false;
    7918:	10 92 78 2d 	sts	0x2D78, r1
				clockHour += 12;
    791c:	8c e0       	ldi	r24, 0x0C	; 12
    791e:	80 93 70 2d 	sts	0x2D70, r24
    7922:	18 c0       	rjmp	.+48     	; 0x7954 <__vector_108+0x404>
			} else if(clockHour == 12){
    7924:	9c 30       	cpi	r25, 0x0C	; 12
    7926:	31 f4       	brne	.+12     	; 0x7934 <__vector_108+0x3e4>
				displayAM = false;
    7928:	10 92 77 2d 	sts	0x2D77, r1
				displayPM = true;
    792c:	81 e0       	ldi	r24, 0x01	; 1
    792e:	80 93 78 2d 	sts	0x2D78, r24
    7932:	10 c0       	rjmp	.+32     	; 0x7954 <__vector_108+0x404>
			} else if(clockHour > 12){
    7934:	9d 30       	cpi	r25, 0x0D	; 13
    7936:	48 f0       	brcs	.+18     	; 0x794a <__vector_108+0x3fa>
				displayAM = false;
    7938:	10 92 77 2d 	sts	0x2D77, r1
				displayPM = true;
    793c:	81 e0       	ldi	r24, 0x01	; 1
    793e:	80 93 78 2d 	sts	0x2D78, r24
				clockHour -= 12;
    7942:	9c 50       	subi	r25, 0x0C	; 12
    7944:	90 93 70 2d 	sts	0x2D70, r25
    7948:	05 c0       	rjmp	.+10     	; 0x7954 <__vector_108+0x404>
			}  else {
				displayAM = true;
    794a:	81 e0       	ldi	r24, 0x01	; 1
    794c:	80 93 77 2d 	sts	0x2D77, r24
				displayPM = false;
    7950:	10 92 78 2d 	sts	0x2D78, r1
			}
			if(timeIsValid){
    7954:	80 91 6f 2d 	lds	r24, 0x2D6F
    7958:	cb e7       	ldi	r28, 0x7B	; 123
    795a:	d0 e5       	ldi	r29, 0x50	; 80
    795c:	88 23       	and	r24, r24
    795e:	c1 f1       	breq	.+112    	; 0x79d0 <__vector_108+0x480>
				
				
				sprintf(tempDisplay,"Time %2u:%02u:%02u ", clockHour, time.Minute, time.Second);
    7960:	2d b7       	in	r18, 0x3d	; 61
    7962:	3e b7       	in	r19, 0x3e	; 62
    7964:	2a 50       	subi	r18, 0x0A	; 10
    7966:	30 40       	sbci	r19, 0x00	; 0
    7968:	2d bf       	out	0x3d, r18	; 61
    796a:	3e bf       	out	0x3e, r19	; 62
    796c:	ed b7       	in	r30, 0x3d	; 61
    796e:	fe b7       	in	r31, 0x3e	; 62
    7970:	31 96       	adiw	r30, 0x01	; 1
    7972:	ad b7       	in	r26, 0x3d	; 61
    7974:	be b7       	in	r27, 0x3e	; 62
    7976:	11 96       	adiw	r26, 0x01	; 1
    7978:	cd 93       	st	X+, r28
    797a:	dc 93       	st	X, r29
    797c:	12 97       	sbiw	r26, 0x02	; 2
    797e:	8e e8       	ldi	r24, 0x8E	; 142
    7980:	90 e2       	ldi	r25, 0x20	; 32
    7982:	82 83       	std	Z+2, r24	; 0x02
    7984:	93 83       	std	Z+3, r25	; 0x03
    7986:	80 91 70 2d 	lds	r24, 0x2D70
    798a:	84 83       	std	Z+4, r24	; 0x04
    798c:	15 82       	std	Z+5, r1	; 0x05
    798e:	80 91 be 47 	lds	r24, 0x47BE
    7992:	86 83       	std	Z+6, r24	; 0x06
    7994:	17 82       	std	Z+7, r1	; 0x07
    7996:	80 91 bd 47 	lds	r24, 0x47BD
    799a:	80 87       	std	Z+8, r24	; 0x08
    799c:	11 86       	std	Z+9, r1	; 0x09
    799e:	0e 94 21 50 	call	0xa042	; 0xa042 <sprintf>
				if(displayAM){
    79a2:	80 91 77 2d 	lds	r24, 0x2D77
    79a6:	ed b7       	in	r30, 0x3d	; 61
    79a8:	fe b7       	in	r31, 0x3e	; 62
    79aa:	3a 96       	adiw	r30, 0x0a	; 10
    79ac:	ed bf       	out	0x3d, r30	; 61
    79ae:	fe bf       	out	0x3e, r31	; 62
    79b0:	88 23       	and	r24, r24
    79b2:	21 f0       	breq	.+8      	; 0x79bc <__vector_108+0x46c>
					strcat(tempDisplay,am);
    79b4:	ce 01       	movw	r24, r28
    79b6:	66 e6       	ldi	r22, 0x66	; 102
    79b8:	76 e2       	ldi	r23, 0x26	; 38
    79ba:	07 c0       	rjmp	.+14     	; 0x79ca <__vector_108+0x47a>
				} else if(displayPM){
    79bc:	80 91 78 2d 	lds	r24, 0x2D78
    79c0:	88 23       	and	r24, r24
    79c2:	59 f0       	breq	.+22     	; 0x79da <__vector_108+0x48a>
					strcat(tempDisplay,pm);
    79c4:	ce 01       	movw	r24, r28
    79c6:	6b e6       	ldi	r22, 0x6B	; 107
    79c8:	76 e2       	ldi	r23, 0x26	; 38
    79ca:	0e 94 72 4f 	call	0x9ee4	; 0x9ee4 <strcat>
    79ce:	05 c0       	rjmp	.+10     	; 0x79da <__vector_108+0x48a>
				}
			} else {
				strcpy(tempDisplay,"Time ??:??:??    ");
    79d0:	ce 01       	movw	r24, r28
    79d2:	62 ea       	ldi	r22, 0xA2	; 162
    79d4:	70 e2       	ldi	r23, 0x20	; 32
    79d6:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <strcpy>
			}
			display_putString(tempDisplay,6,0,System5x7);
    79da:	8b e7       	ldi	r24, 0x7B	; 123
    79dc:	90 e5       	ldi	r25, 0x50	; 80
    79de:	66 e0       	ldi	r22, 0x06	; 6
    79e0:	40 e0       	ldi	r20, 0x00	; 0
    79e2:	2c ea       	ldi	r18, 0xAC	; 172
    79e4:	3a e2       	ldi	r19, 0x2A	; 42
    79e6:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>

		   
			if(connected){
    79ea:	80 91 62 2d 	lds	r24, 0x2D62
    79ee:	88 23       	and	r24, r24
    79f0:	19 f0       	breq	.+6      	; 0x79f8 <__vector_108+0x4a8>
				display_putString("Host Connected   ",7,0,System5x7);
    79f2:	84 eb       	ldi	r24, 0xB4	; 180
    79f4:	90 e2       	ldi	r25, 0x20	; 32
    79f6:	02 c0       	rjmp	.+4      	; 0x79fc <__vector_108+0x4ac>
			} else {
				display_putString("Host Missing     ",7,0,System5x7);
    79f8:	86 ec       	ldi	r24, 0xC6	; 198
    79fa:	90 e2       	ldi	r25, 0x20	; 32
    79fc:	67 e0       	ldi	r22, 0x07	; 7
    79fe:	40 e0       	ldi	r20, 0x00	; 0
    7a00:	2c ea       	ldi	r18, 0xAC	; 172
    7a02:	3a e2       	ldi	r19, 0x2A	; 42
    7a04:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>
    7a08:	92 c1       	rjmp	.+804    	; 0x7d2e <__vector_108+0x7de>
			}


		} else if(currentMode == sensorMode){
    7a0a:	80 91 71 2d 	lds	r24, 0x2D71
    7a0e:	81 30       	cpi	r24, 0x01	; 1
    7a10:	09 f0       	breq	.+2      	; 0x7a14 <__vector_108+0x4c4>
    7a12:	8d c1       	rjmp	.+794    	; 0x7d2e <__vector_108+0x7de>
			display_putString("     Sensors     ",0,0,System5x7);
    7a14:	88 ed       	ldi	r24, 0xD8	; 216
    7a16:	90 e2       	ldi	r25, 0x20	; 32
    7a18:	60 e0       	ldi	r22, 0x00	; 0
    7a1a:	40 e0       	ldi	r20, 0x00	; 0
    7a1c:	2c ea       	ldi	r18, 0xAC	; 172
    7a1e:	3a e2       	ldi	r19, 0x2A	; 42
    7a20:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>
			sprintf(tempDisplay,"Temperature: %3uC", quickTemperature);
    7a24:	20 91 40 2d 	lds	r18, 0x2D40
    7a28:	00 d0       	rcall	.+0      	; 0x7a2a <__vector_108+0x4da>
    7a2a:	00 d0       	rcall	.+0      	; 0x7a2c <__vector_108+0x4dc>
    7a2c:	ed b7       	in	r30, 0x3d	; 61
    7a2e:	fe b7       	in	r31, 0x3e	; 62
    7a30:	31 96       	adiw	r30, 0x01	; 1
    7a32:	bb e7       	ldi	r27, 0x7B	; 123
    7a34:	cb 2e       	mov	r12, r27
    7a36:	b0 e5       	ldi	r27, 0x50	; 80
    7a38:	db 2e       	mov	r13, r27
    7a3a:	ad b7       	in	r26, 0x3d	; 61
    7a3c:	be b7       	in	r27, 0x3e	; 62
    7a3e:	11 96       	adiw	r26, 0x01	; 1
    7a40:	cd 92       	st	X+, r12
    7a42:	dc 92       	st	X, r13
    7a44:	12 97       	sbiw	r26, 0x02	; 2
    7a46:	8a ee       	ldi	r24, 0xEA	; 234
    7a48:	90 e2       	ldi	r25, 0x20	; 32
    7a4a:	82 83       	std	Z+2, r24	; 0x02
    7a4c:	93 83       	std	Z+3, r25	; 0x03
    7a4e:	24 83       	std	Z+4, r18	; 0x04
    7a50:	15 82       	std	Z+5, r1	; 0x05
    7a52:	0e 94 21 50 	call	0xa042	; 0xa042 <sprintf>
			display_putString(tempDisplay,2,0,System5x7);
    7a56:	ed b7       	in	r30, 0x3d	; 61
    7a58:	fe b7       	in	r31, 0x3e	; 62
    7a5a:	36 96       	adiw	r30, 0x06	; 6
    7a5c:	ed bf       	out	0x3d, r30	; 61
    7a5e:	fe bf       	out	0x3e, r31	; 62
    7a60:	c6 01       	movw	r24, r12
    7a62:	62 e0       	ldi	r22, 0x02	; 2
    7a64:	40 e0       	ldi	r20, 0x00	; 0
    7a66:	2c ea       	ldi	r18, 0xAC	; 172
    7a68:	3a e2       	ldi	r19, 0x2A	; 42
    7a6a:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>
			sprintf(tempDisplay,"Humidity:  %3u", quickHumidity);
    7a6e:	20 91 41 2d 	lds	r18, 0x2D41
    7a72:	00 d0       	rcall	.+0      	; 0x7a74 <__vector_108+0x524>
    7a74:	00 d0       	rcall	.+0      	; 0x7a76 <__vector_108+0x526>
    7a76:	ed b7       	in	r30, 0x3d	; 61
    7a78:	fe b7       	in	r31, 0x3e	; 62
    7a7a:	31 96       	adiw	r30, 0x01	; 1
    7a7c:	ad b7       	in	r26, 0x3d	; 61
    7a7e:	be b7       	in	r27, 0x3e	; 62
    7a80:	11 96       	adiw	r26, 0x01	; 1
    7a82:	cd 92       	st	X+, r12
    7a84:	dc 92       	st	X, r13
    7a86:	12 97       	sbiw	r26, 0x02	; 2
    7a88:	8c ef       	ldi	r24, 0xFC	; 252
    7a8a:	90 e2       	ldi	r25, 0x20	; 32
    7a8c:	82 83       	std	Z+2, r24	; 0x02
    7a8e:	93 83       	std	Z+3, r25	; 0x03
    7a90:	24 83       	std	Z+4, r18	; 0x04
    7a92:	15 82       	std	Z+5, r1	; 0x05
    7a94:	0e 94 21 50 	call	0xa042	; 0xa042 <sprintf>
			strcat(tempDisplay, "%RH");
    7a98:	ed b7       	in	r30, 0x3d	; 61
    7a9a:	fe b7       	in	r31, 0x3e	; 62
    7a9c:	36 96       	adiw	r30, 0x06	; 6
    7a9e:	ed bf       	out	0x3d, r30	; 61
    7aa0:	fe bf       	out	0x3e, r31	; 62
    7aa2:	c6 01       	movw	r24, r12
    7aa4:	6b e0       	ldi	r22, 0x0B	; 11
    7aa6:	71 e2       	ldi	r23, 0x21	; 33
    7aa8:	0e 94 72 4f 	call	0x9ee4	; 0x9ee4 <strcat>
			display_putString(tempDisplay,3,0,System5x7);
    7aac:	c6 01       	movw	r24, r12
    7aae:	63 e0       	ldi	r22, 0x03	; 3
    7ab0:	40 e0       	ldi	r20, 0x00	; 0
    7ab2:	2c ea       	ldi	r18, 0xAC	; 172
    7ab4:	3a e2       	ldi	r19, 0x2A	; 42
    7ab6:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>
			sprintf(tempDisplay,"Pressure:  %3ukPa", quickPressure);
    7aba:	20 91 42 2d 	lds	r18, 0x2D42
    7abe:	00 d0       	rcall	.+0      	; 0x7ac0 <__vector_108+0x570>
    7ac0:	00 d0       	rcall	.+0      	; 0x7ac2 <__vector_108+0x572>
    7ac2:	ed b7       	in	r30, 0x3d	; 61
    7ac4:	fe b7       	in	r31, 0x3e	; 62
    7ac6:	31 96       	adiw	r30, 0x01	; 1
    7ac8:	ad b7       	in	r26, 0x3d	; 61
    7aca:	be b7       	in	r27, 0x3e	; 62
    7acc:	11 96       	adiw	r26, 0x01	; 1
    7ace:	cd 92       	st	X+, r12
    7ad0:	dc 92       	st	X, r13
    7ad2:	12 97       	sbiw	r26, 0x02	; 2
    7ad4:	8f e0       	ldi	r24, 0x0F	; 15
    7ad6:	91 e2       	ldi	r25, 0x21	; 33
    7ad8:	82 83       	std	Z+2, r24	; 0x02
    7ada:	93 83       	std	Z+3, r25	; 0x03
    7adc:	24 83       	std	Z+4, r18	; 0x04
    7ade:	15 82       	std	Z+5, r1	; 0x05
    7ae0:	0e 94 21 50 	call	0xa042	; 0xa042 <sprintf>
			display_putString(tempDisplay,4,0,System5x7);
    7ae4:	ed b7       	in	r30, 0x3d	; 61
    7ae6:	fe b7       	in	r31, 0x3e	; 62
    7ae8:	36 96       	adiw	r30, 0x06	; 6
    7aea:	ed bf       	out	0x3d, r30	; 61
    7aec:	fe bf       	out	0x3e, r31	; 62
    7aee:	c6 01       	movw	r24, r12
    7af0:	64 e0       	ldi	r22, 0x04	; 4
    7af2:	40 e0       	ldi	r20, 0x00	; 0
    7af4:	2c ea       	ldi	r18, 0xAC	; 172
    7af6:	3a e2       	ldi	r19, 0x2A	; 42
    7af8:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>
			sprintf(tempDisplay,"Light:      %5u", quickLight);
    7afc:	20 91 43 2d 	lds	r18, 0x2D43
    7b00:	30 91 44 2d 	lds	r19, 0x2D44
    7b04:	00 d0       	rcall	.+0      	; 0x7b06 <__vector_108+0x5b6>
    7b06:	00 d0       	rcall	.+0      	; 0x7b08 <__vector_108+0x5b8>
    7b08:	ed b7       	in	r30, 0x3d	; 61
    7b0a:	fe b7       	in	r31, 0x3e	; 62
    7b0c:	31 96       	adiw	r30, 0x01	; 1
    7b0e:	ad b7       	in	r26, 0x3d	; 61
    7b10:	be b7       	in	r27, 0x3e	; 62
    7b12:	11 96       	adiw	r26, 0x01	; 1
    7b14:	cd 92       	st	X+, r12
    7b16:	dc 92       	st	X, r13
    7b18:	12 97       	sbiw	r26, 0x02	; 2
    7b1a:	81 e2       	ldi	r24, 0x21	; 33
    7b1c:	91 e2       	ldi	r25, 0x21	; 33
    7b1e:	82 83       	std	Z+2, r24	; 0x02
    7b20:	93 83       	std	Z+3, r25	; 0x03
    7b22:	24 83       	std	Z+4, r18	; 0x04
    7b24:	35 83       	std	Z+5, r19	; 0x05
    7b26:	0e 94 21 50 	call	0xa042	; 0xa042 <sprintf>
			display_putString(tempDisplay,5,0,System5x7);
    7b2a:	ed b7       	in	r30, 0x3d	; 61
    7b2c:	fe b7       	in	r31, 0x3e	; 62
    7b2e:	36 96       	adiw	r30, 0x06	; 6
    7b30:	ed bf       	out	0x3d, r30	; 61
    7b32:	fe bf       	out	0x3e, r31	; 62
    7b34:	c6 01       	movw	r24, r12
    7b36:	65 e0       	ldi	r22, 0x05	; 5
    7b38:	40 e0       	ldi	r20, 0x00	; 0
    7b3a:	2c ea       	ldi	r18, 0xAC	; 172
    7b3c:	3a e2       	ldi	r19, 0x2A	; 42
    7b3e:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>

			sprintf(tempDisplay,"Air: %5lu, %5lu", quickSmall, quickLarge);
    7b42:	20 91 4a 2d 	lds	r18, 0x2D4A
    7b46:	30 91 4b 2d 	lds	r19, 0x2D4B
    7b4a:	40 91 4c 2d 	lds	r20, 0x2D4C
    7b4e:	50 91 4d 2d 	lds	r21, 0x2D4D
    7b52:	e0 90 46 2d 	lds	r14, 0x2D46
    7b56:	f0 90 47 2d 	lds	r15, 0x2D47
    7b5a:	00 91 48 2d 	lds	r16, 0x2D48
    7b5e:	10 91 49 2d 	lds	r17, 0x2D49
    7b62:	8d b7       	in	r24, 0x3d	; 61
    7b64:	9e b7       	in	r25, 0x3e	; 62
    7b66:	0c 97       	sbiw	r24, 0x0c	; 12
    7b68:	8d bf       	out	0x3d, r24	; 61
    7b6a:	9e bf       	out	0x3e, r25	; 62
    7b6c:	ed b7       	in	r30, 0x3d	; 61
    7b6e:	fe b7       	in	r31, 0x3e	; 62
    7b70:	31 96       	adiw	r30, 0x01	; 1
    7b72:	ad b7       	in	r26, 0x3d	; 61
    7b74:	be b7       	in	r27, 0x3e	; 62
    7b76:	11 96       	adiw	r26, 0x01	; 1
    7b78:	cd 92       	st	X+, r12
    7b7a:	dc 92       	st	X, r13
    7b7c:	12 97       	sbiw	r26, 0x02	; 2
    7b7e:	81 e3       	ldi	r24, 0x31	; 49
    7b80:	91 e2       	ldi	r25, 0x21	; 33
    7b82:	82 83       	std	Z+2, r24	; 0x02
    7b84:	93 83       	std	Z+3, r25	; 0x03
    7b86:	24 83       	std	Z+4, r18	; 0x04
    7b88:	35 83       	std	Z+5, r19	; 0x05
    7b8a:	46 83       	std	Z+6, r20	; 0x06
    7b8c:	57 83       	std	Z+7, r21	; 0x07
    7b8e:	e0 86       	std	Z+8, r14	; 0x08
    7b90:	f1 86       	std	Z+9, r15	; 0x09
    7b92:	02 87       	std	Z+10, r16	; 0x0a
    7b94:	13 87       	std	Z+11, r17	; 0x0b
    7b96:	0e 94 21 50 	call	0xa042	; 0xa042 <sprintf>
			display_putString(tempDisplay,6,0,System5x7);
    7b9a:	ed b7       	in	r30, 0x3d	; 61
    7b9c:	fe b7       	in	r31, 0x3e	; 62
    7b9e:	3c 96       	adiw	r30, 0x0c	; 12
    7ba0:	ed bf       	out	0x3d, r30	; 61
    7ba2:	fe bf       	out	0x3e, r31	; 62
    7ba4:	c6 01       	movw	r24, r12
    7ba6:	66 e0       	ldi	r22, 0x06	; 6
    7ba8:	40 e0       	ldi	r20, 0x00	; 0
    7baa:	2c ea       	ldi	r18, 0xAC	; 172
    7bac:	3a e2       	ldi	r19, 0x2A	; 42
    7bae:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>
			display_putString("Sound:   ",7,0,System5x7);
    7bb2:	81 e4       	ldi	r24, 0x41	; 65
    7bb4:	91 e2       	ldi	r25, 0x21	; 33
    7bb6:	67 e0       	ldi	r22, 0x07	; 7
    7bb8:	40 e0       	ldi	r20, 0x00	; 0
    7bba:	2c ea       	ldi	r18, 0xAC	; 172
    7bbc:	3a e2       	ldi	r19, 0x2A	; 42
    7bbe:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>

			uint8_t i = 50;
			display_setCursor(7,i);
    7bc2:	87 e0       	ldi	r24, 0x07	; 7
    7bc4:	62 e3       	ldi	r22, 0x32	; 50
    7bc6:	0e 94 cf 2c 	call	0x599e	; 0x599e <display_setCursor>
    7bca:	22 e3       	ldi	r18, 0x32	; 50
    7bcc:	30 e0       	ldi	r19, 0x00	; 0
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    7bce:	a0 ea       	ldi	r26, 0xA0	; 160
    7bd0:	b6 e0       	ldi	r27, 0x06	; 6
    7bd2:	40 e8       	ldi	r20, 0x80	; 128
	Display_SPI.DATA = dataByte;
    7bd4:	e0 ec       	ldi	r30, 0xC0	; 192
    7bd6:	f9 e0       	ldi	r31, 0x09	; 9
			while(i < 102){
				if(i < (quickMic/4 + 50)){
    7bd8:	5f ef       	ldi	r21, 0xFF	; 255
    7bda:	80 91 45 2d 	lds	r24, 0x2D45
    7bde:	86 95       	lsr	r24
    7be0:	86 95       	lsr	r24
    7be2:	90 e0       	ldi	r25, 0x00	; 0
    7be4:	c1 96       	adiw	r24, 0x31	; 49
    7be6:	82 17       	cp	r24, r18
    7be8:	93 07       	cpc	r25, r19
    7bea:	4c f0       	brlt	.+18     	; 0x7bfe <__vector_108+0x6ae>
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    7bec:	15 96       	adiw	r26, 0x05	; 5
    7bee:	4c 93       	st	X, r20
    7bf0:	15 97       	sbiw	r26, 0x05	; 5
	Display_SPI.DATA = dataByte;
    7bf2:	53 83       	std	Z+3, r21	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    7bf4:	80 91 c2 09 	lds	r24, 0x09C2
    7bf8:	87 ff       	sbrs	r24, 7
    7bfa:	fc cf       	rjmp	.-8      	; 0x7bf4 <__vector_108+0x6a4>
    7bfc:	08 c0       	rjmp	.+16     	; 0x7c0e <__vector_108+0x6be>
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    7bfe:	15 96       	adiw	r26, 0x05	; 5
    7c00:	4c 93       	st	X, r20
    7c02:	15 97       	sbiw	r26, 0x05	; 5
	Display_SPI.DATA = dataByte;
    7c04:	13 82       	std	Z+3, r1	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    7c06:	80 91 c2 09 	lds	r24, 0x09C2
    7c0a:	87 ff       	sbrs	r24, 7
    7c0c:	fc cf       	rjmp	.-8      	; 0x7c06 <__vector_108+0x6b6>
    7c0e:	2f 5f       	subi	r18, 0xFF	; 255
    7c10:	3f 4f       	sbci	r19, 0xFF	; 255
			display_putString(tempDisplay,6,0,System5x7);
			display_putString("Sound:   ",7,0,System5x7);

			uint8_t i = 50;
			display_setCursor(7,i);
			while(i < 102){
    7c12:	26 36       	cpi	r18, 0x66	; 102
    7c14:	31 05       	cpc	r19, r1
    7c16:	09 f7       	brne	.-62     	; 0x7bda <__vector_108+0x68a>
    7c18:	8a c0       	rjmp	.+276    	; 0x7d2e <__vector_108+0x7de>
	}
	backlight_Timer++;
	
	
	if(!okToDisplayGUI && Button_Pressed(Button_Pin)){
		backlight_Timer = 0;
    7c1a:	10 92 89 2d 	sts	0x2D89, r1
	}
}

void display_setBacklight(bool state){
	if(state){
		Backlight_Port.OUTSET = 1 << Backlight_Pin;
    7c1e:	81 e0       	ldi	r24, 0x01	; 1
    7c20:	e0 ea       	ldi	r30, 0xA0	; 160
    7c22:	f6 e0       	ldi	r31, 0x06	; 6
    7c24:	85 83       	std	Z+5, r24	; 0x05
    7c26:	24 ec       	ldi	r18, 0xC4	; 196
    7c28:	39 e0       	ldi	r19, 0x09	; 9
    7c2a:	40 e7       	ldi	r20, 0x70	; 112
    7c2c:	51 e0       	ldi	r21, 0x01	; 1
    7c2e:	c1 cc       	rjmp	.-1662   	; 0x75b2 <__vector_108+0x62>
	
	if(okToDisplayGUI){
	
	// controls
		if(currentMode == recordMode && Button_Pressed(Button_Pin)){								// switch to sensor screen
			currentMode = sensorMode;
    7c30:	81 e0       	ldi	r24, 0x01	; 1
    7c32:	80 93 71 2d 	sts	0x2D71, r24
    7c36:	e0 ea       	ldi	r30, 0xA0	; 160
    7c38:	f6 e0       	ldi	r31, 0x06	; 6
    7c3a:	85 83       	std	Z+5, r24	; 0x05
			display_setBacklight(true);
			backlight_Timer = 0;
    7c3c:	10 92 89 2d 	sts	0x2D89, r1
			display_clearScreen();
    7c40:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <display_clearScreen>
    7c44:	24 ec       	ldi	r18, 0xC4	; 196
    7c46:	39 e0       	ldi	r19, 0x09	; 9
    7c48:	40 e7       	ldi	r20, 0x70	; 112
    7c4a:	51 e0       	ldi	r21, 0x01	; 1
    7c4c:	32 cd       	rjmp	.-1436   	; 0x76b2 <__vector_108+0x162>
			_delay_ms(250);
		} else if(currentMode == sensorMode && Button_Pressed(Button_Pin)){							// switch to system screen
			currentMode = recordMode;
    7c4e:	10 92 71 2d 	sts	0x2D71, r1
    7c52:	e0 ea       	ldi	r30, 0xA0	; 160
    7c54:	f6 e0       	ldi	r31, 0x06	; 6
    7c56:	95 83       	std	Z+5, r25	; 0x05
			display_setBacklight(true);
			backlight_Timer = 0;
    7c58:	10 92 89 2d 	sts	0x2D89, r1
			display_clearScreen();
    7c5c:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <display_clearScreen>
    7c60:	24 ec       	ldi	r18, 0xC4	; 196
    7c62:	39 e0       	ldi	r19, 0x09	; 9
    7c64:	40 e7       	ldi	r20, 0x70	; 112
    7c66:	51 e0       	ldi	r21, 0x01	; 1
    7c68:	34 cd       	rjmp	.-1432   	; 0x76d2 <__vector_108+0x182>
			_delay_ms(250);
			
		}  else if(Button_Pressed(Switch_Pin) && !recording && timeIsValid && SD_Inserted()){		// start recording
    7c6a:	80 91 e3 2c 	lds	r24, 0x2CE3
    7c6e:	88 23       	and	r24, r24
    7c70:	09 f0       	breq	.+2      	; 0x7c74 <__vector_108+0x724>
    7c72:	53 cd       	rjmp	.-1370   	; 0x771a <__vector_108+0x1ca>
    7c74:	3a cd       	rjmp	.-1420   	; 0x76ea <__vector_108+0x19a>
			if(percentDiskUsed < 950){
    7c76:	80 91 85 2d 	lds	r24, 0x2D85
    7c7a:	90 91 86 2d 	lds	r25, 0x2D86
    7c7e:	a0 91 87 2d 	lds	r26, 0x2D87
    7c82:	b0 91 88 2d 	lds	r27, 0x2D88
    7c86:	86 5b       	subi	r24, 0xB6	; 182
    7c88:	93 40       	sbci	r25, 0x03	; 3
    7c8a:	a0 40       	sbci	r26, 0x00	; 0
    7c8c:	b0 40       	sbci	r27, 0x00	; 0
    7c8e:	08 f4       	brcc	.+2      	; 0x7c92 <__vector_108+0x742>
    7c90:	35 cd       	rjmp	.-1430   	; 0x76fc <__vector_108+0x1ac>
    7c92:	82 cd       	rjmp	.-1276   	; 0x7798 <__vector_108+0x248>
    7c94:	80 91 68 06 	lds	r24, 0x0668
    7c98:	80 fd       	sbrc	r24, 0
    7c9a:	43 cd       	rjmp	.-1402   	; 0x7722 <__vector_108+0x1d2>
    7c9c:	7d cd       	rjmp	.-1286   	; 0x7798 <__vector_108+0x248>

			sprintf(tempDisplay, "Uploading    %3u", uploadPercentBS);
			strcat(tempDisplay,"%");
			display_putString(tempDisplay,1,0,System5x7);
			if(SD_Inserted()){
				sprintf(tempDisplay,"Disk Used: %3lu.%lu",percentDiskUsed/10,percentDiskUsed%10);
    7c9e:	c0 90 85 2d 	lds	r12, 0x2D85
    7ca2:	d0 90 86 2d 	lds	r13, 0x2D86
    7ca6:	e0 90 87 2d 	lds	r14, 0x2D87
    7caa:	f0 90 88 2d 	lds	r15, 0x2D88
    7cae:	2d b7       	in	r18, 0x3d	; 61
    7cb0:	3e b7       	in	r19, 0x3e	; 62
    7cb2:	2c 50       	subi	r18, 0x0C	; 12
    7cb4:	30 40       	sbci	r19, 0x00	; 0
    7cb6:	2d bf       	out	0x3d, r18	; 61
    7cb8:	3e bf       	out	0x3e, r19	; 62
    7cba:	0d b7       	in	r16, 0x3d	; 61
    7cbc:	1e b7       	in	r17, 0x3e	; 62
    7cbe:	0f 5f       	subi	r16, 0xFF	; 255
    7cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    7cc2:	ad b7       	in	r26, 0x3d	; 61
    7cc4:	be b7       	in	r27, 0x3e	; 62
    7cc6:	11 96       	adiw	r26, 0x01	; 1
    7cc8:	cd 93       	st	X+, r28
    7cca:	dc 93       	st	X, r29
    7ccc:	12 97       	sbiw	r26, 0x02	; 2
    7cce:	8b e4       	ldi	r24, 0x4B	; 75
    7cd0:	91 e2       	ldi	r25, 0x21	; 33
    7cd2:	f8 01       	movw	r30, r16
    7cd4:	82 83       	std	Z+2, r24	; 0x02
    7cd6:	93 83       	std	Z+3, r25	; 0x03
    7cd8:	c7 01       	movw	r24, r14
    7cda:	b6 01       	movw	r22, r12
    7cdc:	2a e0       	ldi	r18, 0x0A	; 10
    7cde:	30 e0       	ldi	r19, 0x00	; 0
    7ce0:	40 e0       	ldi	r20, 0x00	; 0
    7ce2:	50 e0       	ldi	r21, 0x00	; 0
    7ce4:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    7ce8:	d8 01       	movw	r26, r16
    7cea:	14 96       	adiw	r26, 0x04	; 4
    7cec:	2d 93       	st	X+, r18
    7cee:	3d 93       	st	X+, r19
    7cf0:	4d 93       	st	X+, r20
    7cf2:	5c 93       	st	X, r21
    7cf4:	17 97       	sbiw	r26, 0x07	; 7
    7cf6:	c7 01       	movw	r24, r14
    7cf8:	b6 01       	movw	r22, r12
    7cfa:	2a e0       	ldi	r18, 0x0A	; 10
    7cfc:	30 e0       	ldi	r19, 0x00	; 0
    7cfe:	40 e0       	ldi	r20, 0x00	; 0
    7d00:	50 e0       	ldi	r21, 0x00	; 0
    7d02:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    7d06:	f8 01       	movw	r30, r16
    7d08:	60 87       	std	Z+8, r22	; 0x08
    7d0a:	71 87       	std	Z+9, r23	; 0x09
    7d0c:	82 87       	std	Z+10, r24	; 0x0a
    7d0e:	93 87       	std	Z+11, r25	; 0x0b
    7d10:	0e 94 21 50 	call	0xa042	; 0xa042 <sprintf>
				strcat(tempDisplay,"%");
    7d14:	2d b7       	in	r18, 0x3d	; 61
    7d16:	3e b7       	in	r19, 0x3e	; 62
    7d18:	24 5f       	subi	r18, 0xF4	; 244
    7d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    7d1c:	2d bf       	out	0x3d, r18	; 61
    7d1e:	3e bf       	out	0x3e, r19	; 62
    7d20:	ce 01       	movw	r24, r28
    7d22:	68 e6       	ldi	r22, 0x68	; 104
    7d24:	70 e2       	ldi	r23, 0x20	; 32
    7d26:	0e 94 72 4f 	call	0x9ee4	; 0x9ee4 <strcat>
				display_putString(tempDisplay,2,0,System5x7);
    7d2a:	ce 01       	movw	r24, r28
    7d2c:	b7 cd       	rjmp	.-1170   	; 0x789c <__vector_108+0x34c>
			}

			
		}
    }
}
    7d2e:	ff 91       	pop	r31
    7d30:	ef 91       	pop	r30
    7d32:	df 91       	pop	r29
    7d34:	cf 91       	pop	r28
    7d36:	bf 91       	pop	r27
    7d38:	af 91       	pop	r26
    7d3a:	9f 91       	pop	r25
    7d3c:	8f 91       	pop	r24
    7d3e:	7f 91       	pop	r23
    7d40:	6f 91       	pop	r22
    7d42:	5f 91       	pop	r21
    7d44:	4f 91       	pop	r20
    7d46:	3f 91       	pop	r19
    7d48:	2f 91       	pop	r18
    7d4a:	1f 91       	pop	r17
    7d4c:	0f 91       	pop	r16
    7d4e:	ff 90       	pop	r15
    7d50:	ef 90       	pop	r14
    7d52:	df 90       	pop	r13
    7d54:	cf 90       	pop	r12
    7d56:	0f 90       	pop	r0
    7d58:	0b be       	out	0x3b, r0	; 59
    7d5a:	0f 90       	pop	r0
    7d5c:	0f be       	out	0x3f, r0	; 63
    7d5e:	0f 90       	pop	r0
    7d60:	1f 90       	pop	r1
    7d62:	18 95       	reti

00007d64 <display_showSplashScreen>:
	
	Backlight_Port.DIRSET = 1 << Backlight_Pin;

}

void display_showSplashScreen(bool showsd, bool showconnected, bool demo){
    7d64:	df 92       	push	r13
    7d66:	ef 92       	push	r14
    7d68:	ff 92       	push	r15
    7d6a:	0f 93       	push	r16
    7d6c:	1f 93       	push	r17
    7d6e:	df 93       	push	r29
    7d70:	cf 93       	push	r28
    7d72:	cd b7       	in	r28, 0x3d	; 61
    7d74:	de b7       	in	r29, 0x3e	; 62
    7d76:	e2 97       	sbiw	r28, 0x32	; 50
    7d78:	cd bf       	out	0x3d, r28	; 61
    7d7a:	de bf       	out	0x3e, r29	; 62
    7d7c:	f8 2e       	mov	r15, r24
    7d7e:	e6 2e       	mov	r14, r22
    7d80:	d4 2e       	mov	r13, r20
	char tmp [50];
	display_putString("   BaseStation   ",1,0,System5x7);
    7d82:	8f e5       	ldi	r24, 0x5F	; 95
    7d84:	91 e2       	ldi	r25, 0x21	; 33
    7d86:	61 e0       	ldi	r22, 0x01	; 1
    7d88:	40 e0       	ldi	r20, 0x00	; 0
    7d8a:	2c ea       	ldi	r18, 0xAC	; 172
    7d8c:	3a e2       	ldi	r19, 0x2A	; 42
    7d8e:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>
	strcpy(tmp,"  Hardware: v");
    7d92:	8e 01       	movw	r16, r28
    7d94:	0f 5f       	subi	r16, 0xFF	; 255
    7d96:	1f 4f       	sbci	r17, 0xFF	; 255
    7d98:	c8 01       	movw	r24, r16
    7d9a:	61 e7       	ldi	r22, 0x71	; 113
    7d9c:	71 e2       	ldi	r23, 0x21	; 33
    7d9e:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <strcpy>
	strcat(tmp,HardwareVersion);
    7da2:	c8 01       	movw	r24, r16
    7da4:	6f e7       	ldi	r22, 0x7F	; 127
    7da6:	71 e2       	ldi	r23, 0x21	; 33
    7da8:	0e 94 72 4f 	call	0x9ee4	; 0x9ee4 <strcat>
	display_putString(tmp,3,0,System5x7);
    7dac:	c8 01       	movw	r24, r16
    7dae:	63 e0       	ldi	r22, 0x03	; 3
    7db0:	40 e0       	ldi	r20, 0x00	; 0
    7db2:	2c ea       	ldi	r18, 0xAC	; 172
    7db4:	3a e2       	ldi	r19, 0x2A	; 42
    7db6:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>
	tmp[0] = 0;
    7dba:	19 82       	std	Y+1, r1	; 0x01
	strcpy(tmp," Firmware: v");
    7dbc:	c8 01       	movw	r24, r16
    7dbe:	61 e8       	ldi	r22, 0x81	; 129
    7dc0:	71 e2       	ldi	r23, 0x21	; 33
    7dc2:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <strcpy>
	strcat(tmp,FirmwareVersion);
    7dc6:	c8 01       	movw	r24, r16
    7dc8:	6e e8       	ldi	r22, 0x8E	; 142
    7dca:	71 e2       	ldi	r23, 0x21	; 33
    7dcc:	0e 94 72 4f 	call	0x9ee4	; 0x9ee4 <strcat>
	display_putString(tmp,5,0,System5x7);
    7dd0:	c8 01       	movw	r24, r16
    7dd2:	65 e0       	ldi	r22, 0x05	; 5
    7dd4:	40 e0       	ldi	r20, 0x00	; 0
    7dd6:	2c ea       	ldi	r18, 0xAC	; 172
    7dd8:	3a e2       	ldi	r19, 0x2A	; 42
    7dda:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>
	
	if(showsd){
    7dde:	ff 20       	and	r15, r15
    7de0:	19 f0       	breq	.+6      	; 0x7de8 <display_showSplashScreen+0x84>
		display_putString("    SD Removed   ",7,0,System5x7);
    7de2:	83 e9       	ldi	r24, 0x93	; 147
    7de4:	91 e2       	ldi	r25, 0x21	; 33
    7de6:	09 c0       	rjmp	.+18     	; 0x7dfa <display_showSplashScreen+0x96>
	} else if(showconnected){
    7de8:	ee 20       	and	r14, r14
    7dea:	19 f0       	breq	.+6      	; 0x7df2 <display_showSplashScreen+0x8e>
		display_putString("Waiting for sync ",7,0,System5x7);
    7dec:	85 ea       	ldi	r24, 0xA5	; 165
    7dee:	91 e2       	ldi	r25, 0x21	; 33
    7df0:	04 c0       	rjmp	.+8      	; 0x7dfa <display_showSplashScreen+0x96>
	} else if(demo){
    7df2:	dd 20       	and	r13, r13
    7df4:	49 f0       	breq	.+18     	; 0x7e08 <display_showSplashScreen+0xa4>
		display_putString("    Demo Mode    ",7,0,System5x7);
    7df6:	87 eb       	ldi	r24, 0xB7	; 183
    7df8:	91 e2       	ldi	r25, 0x21	; 33
    7dfa:	67 e0       	ldi	r22, 0x07	; 7
    7dfc:	40 e0       	ldi	r20, 0x00	; 0
    7dfe:	2c ea       	ldi	r18, 0xAC	; 172
    7e00:	3a e2       	ldi	r19, 0x2A	; 42
    7e02:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_putString>
    7e06:	03 c0       	rjmp	.+6      	; 0x7e0e <display_showSplashScreen+0xaa>
	} else {
		display_clearPage(7);
    7e08:	87 e0       	ldi	r24, 0x07	; 7
    7e0a:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <display_clearPage>
	}
}
    7e0e:	e2 96       	adiw	r28, 0x32	; 50
    7e10:	cd bf       	out	0x3d, r28	; 61
    7e12:	de bf       	out	0x3e, r29	; 62
    7e14:	cf 91       	pop	r28
    7e16:	df 91       	pop	r29
    7e18:	1f 91       	pop	r17
    7e1a:	0f 91       	pop	r16
    7e1c:	ff 90       	pop	r15
    7e1e:	ef 90       	pop	r14
    7e20:	df 90       	pop	r13
    7e22:	08 95       	ret

00007e24 <SD_WriteString>:
	tmp32[2] = (uint8_t)(var >> 16);
	tmp32[3] = (uint8_t)(var >> 24);
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
    7e24:	ef 92       	push	r14
    7e26:	ff 92       	push	r15
    7e28:	0f 93       	push	r16
    7e2a:	1f 93       	push	r17
    7e2c:	cf 93       	push	r28
    7e2e:	df 93       	push	r29
    7e30:	ec 01       	movw	r28, r24
	f_puts (string, &Log_File);
    7e32:	66 ef       	ldi	r22, 0xF6	; 246
    7e34:	77 e4       	ldi	r23, 0x47	; 71
    7e36:	0e 94 76 2b 	call	0x56ec	; 0x56ec <f_puts>
    7e3a:	60 e0       	ldi	r22, 0x00	; 0
    7e3c:	70 e0       	ldi	r23, 0x00	; 0
    7e3e:	3b c0       	rjmp	.+118    	; 0x7eb6 <SD_WriteString+0x92>
    for (uint16_t i=0; i<strlen(string); i++){
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    7e40:	e0 90 77 4c 	lds	r14, 0x4C77
    7e44:	f0 90 78 4c 	lds	r15, 0x4C78
    7e48:	00 91 79 4c 	lds	r16, 0x4C79
    7e4c:	10 91 7a 4c 	lds	r17, 0x4C7A
    7e50:	20 91 77 4c 	lds	r18, 0x4C77
    7e54:	30 91 78 4c 	lds	r19, 0x4C78
    7e58:	40 91 79 4c 	lds	r20, 0x4C79
    7e5c:	50 91 7a 4c 	lds	r21, 0x4C7A
    7e60:	30 70       	andi	r19, 0x00	; 0
    7e62:	40 70       	andi	r20, 0x00	; 0
    7e64:	50 70       	andi	r21, 0x00	; 0
    7e66:	fe 01       	movw	r30, r28
    7e68:	e6 0f       	add	r30, r22
    7e6a:	f7 1f       	adc	r31, r23
    7e6c:	80 81       	ld	r24, Z
    7e6e:	90 e0       	ldi	r25, 0x00	; 0
    7e70:	a0 e0       	ldi	r26, 0x00	; 0
    7e72:	b0 e0       	ldi	r27, 0x00	; 0
    7e74:	28 27       	eor	r18, r24
    7e76:	39 27       	eor	r19, r25
    7e78:	4a 27       	eor	r20, r26
    7e7a:	5b 27       	eor	r21, r27
    7e7c:	22 0f       	add	r18, r18
    7e7e:	33 1f       	adc	r19, r19
    7e80:	22 0f       	add	r18, r18
    7e82:	33 1f       	adc	r19, r19
    7e84:	20 59       	subi	r18, 0x90	; 144
    7e86:	39 4d       	sbci	r19, 0xD9	; 217
    7e88:	ef 2c       	mov	r14, r15
    7e8a:	f0 2e       	mov	r15, r16
    7e8c:	01 2f       	mov	r16, r17
    7e8e:	11 27       	eor	r17, r17
    7e90:	f9 01       	movw	r30, r18
    7e92:	80 81       	ld	r24, Z
    7e94:	91 81       	ldd	r25, Z+1	; 0x01
    7e96:	a2 81       	ldd	r26, Z+2	; 0x02
    7e98:	b3 81       	ldd	r27, Z+3	; 0x03
    7e9a:	e8 26       	eor	r14, r24
    7e9c:	f9 26       	eor	r15, r25
    7e9e:	0a 27       	eor	r16, r26
    7ea0:	1b 27       	eor	r17, r27
    7ea2:	e0 92 77 4c 	sts	0x4C77, r14
    7ea6:	f0 92 78 4c 	sts	0x4C78, r15
    7eaa:	00 93 79 4c 	sts	0x4C79, r16
    7eae:	10 93 7a 4c 	sts	0x4C7A, r17
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
	f_puts (string, &Log_File);
    for (uint16_t i=0; i<strlen(string); i++){
    7eb2:	6f 5f       	subi	r22, 0xFF	; 255
    7eb4:	7f 4f       	sbci	r23, 0xFF	; 255
    7eb6:	fe 01       	movw	r30, r28
    7eb8:	01 90       	ld	r0, Z+
    7eba:	00 20       	and	r0, r0
    7ebc:	e9 f7       	brne	.-6      	; 0x7eb8 <SD_WriteString+0x94>
    7ebe:	31 97       	sbiw	r30, 0x01	; 1
    7ec0:	ec 1b       	sub	r30, r28
    7ec2:	fd 0b       	sbc	r31, r29
    7ec4:	6e 17       	cp	r22, r30
    7ec6:	7f 07       	cpc	r23, r31
    7ec8:	08 f4       	brcc	.+2      	; 0x7ecc <SD_WriteString+0xa8>
    7eca:	ba cf       	rjmp	.-140    	; 0x7e40 <SD_WriteString+0x1c>
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }
}
    7ecc:	df 91       	pop	r29
    7ece:	cf 91       	pop	r28
    7ed0:	1f 91       	pop	r17
    7ed2:	0f 91       	pop	r16
    7ed4:	ff 90       	pop	r15
    7ed6:	ef 90       	pop	r14
    7ed8:	08 95       	ret

00007eda <SD_WriteAirSampleMinute>:

	f_sync(&Log_File);

}

void SD_WriteAirSampleMinute(void){
    7eda:	0f 93       	push	r16
    7edc:	1f 93       	push	r17
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    7ede:	8f ef       	ldi	r24, 0xFF	; 255
    7ee0:	9f ef       	ldi	r25, 0xFF	; 255
    7ee2:	af ef       	ldi	r26, 0xFF	; 255
    7ee4:	bf ef       	ldi	r27, 0xFF	; 255
    7ee6:	80 93 77 4c 	sts	0x4C77, r24
    7eea:	90 93 78 4c 	sts	0x4C78, r25
    7eee:	a0 93 79 4c 	sts	0x4C79, r26
    7ef2:	b0 93 7a 4c 	sts	0x4C7A, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7ef6:	6c e4       	ldi	r22, 0x4C	; 76
    7ef8:	74 e7       	ldi	r23, 0x74	; 116
    7efa:	8e ed       	ldi	r24, 0xDE	; 222
    7efc:	90 eb       	ldi	r25, 0xB0	; 176
    7efe:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(61);				// record size
    7f02:	6d e3       	ldi	r22, 0x3D	; 61
    7f04:	70 e0       	ldi	r23, 0x00	; 0
    7f06:	80 e0       	ldi	r24, 0x00	; 0
    7f08:	90 e0       	ldi	r25, 0x00	; 0
    7f0a:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write16(3); 		// record type
    7f0e:	83 e0       	ldi	r24, 0x03	; 3
    7f10:	90 e0       	ldi	r25, 0x00	; 0
    7f12:	0e 94 27 2c 	call	0x584e	; 0x584e <SD_Write16>

														// payload

	SD_Write32(airSampleTime);					// time
    7f16:	60 91 0c 2d 	lds	r22, 0x2D0C
    7f1a:	70 91 0d 2d 	lds	r23, 0x2D0D
    7f1e:	80 91 0e 2d 	lds	r24, 0x2D0E
    7f22:	90 91 0f 2d 	lds	r25, 0x2D0F
    7f26:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>

	SD_Write32(110592000);										// sample period (0.01667hz)
    7f2a:	60 e0       	ldi	r22, 0x00	; 0
    7f2c:	70 e8       	ldi	r23, 0x80	; 128
    7f2e:	87 e9       	ldi	r24, 0x97	; 151
    7f30:	96 e0       	ldi	r25, 0x06	; 6
    7f32:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(1);												// number of samples
    7f36:	61 e0       	ldi	r22, 0x01	; 1
    7f38:	70 e0       	ldi	r23, 0x00	; 0
    7f3a:	80 e0       	ldi	r24, 0x00	; 0
    7f3c:	90 e0       	ldi	r25, 0x00	; 0
    7f3e:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>

	SD_WriteString("Air_Small");
    7f42:	89 ec       	ldi	r24, 0xC9	; 201
    7f44:	91 e2       	ldi	r25, 0x21	; 33
    7f46:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    7f4a:	89 e0       	ldi	r24, 0x09	; 9
    7f4c:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("32");
    7f50:	03 ed       	ldi	r16, 0xD3	; 211
    7f52:	11 e2       	ldi	r17, 0x21	; 33
    7f54:	c8 01       	movw	r24, r16
    7f56:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    7f5a:	8a e0       	ldi	r24, 0x0A	; 10
    7f5c:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("Air_Large");
    7f60:	86 ed       	ldi	r24, 0xD6	; 214
    7f62:	91 e2       	ldi	r25, 0x21	; 33
    7f64:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    7f68:	89 e0       	ldi	r24, 0x09	; 9
    7f6a:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("32");
    7f6e:	c8 01       	movw	r24, r16
    7f70:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    7f74:	8a e0       	ldi	r24, 0x0A	; 10
    7f76:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>

	SD_Write8(0x00);
    7f7a:	80 e0       	ldi	r24, 0x00	; 0
    7f7c:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>

	SD_Write32(airCount[0]);
    7f80:	60 91 47 46 	lds	r22, 0x4647
    7f84:	70 91 48 46 	lds	r23, 0x4648
    7f88:	80 91 49 46 	lds	r24, 0x4649
    7f8c:	90 91 4a 46 	lds	r25, 0x464A
    7f90:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(airCount[1]);
    7f94:	60 91 4b 46 	lds	r22, 0x464B
    7f98:	70 91 4c 46 	lds	r23, 0x464C
    7f9c:	80 91 4d 46 	lds	r24, 0x464D
    7fa0:	90 91 4e 46 	lds	r25, 0x464E
    7fa4:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>

	SD_WriteCRC();			// CRC
    7fa8:	0e 94 48 2c 	call	0x5890	; 0x5890 <SD_WriteCRC>

	f_sync(&Log_File);
    7fac:	86 ef       	ldi	r24, 0xF6	; 246
    7fae:	97 e4       	ldi	r25, 0x47	; 71
    7fb0:	0e 94 95 1c 	call	0x392a	; 0x392a <f_sync>

}
    7fb4:	1f 91       	pop	r17
    7fb6:	0f 91       	pop	r16
    7fb8:	08 95       	ret

00007fba <SD_WriteAirSampleSecond>:

	f_sync(&Log_File);

}

void SD_WriteAirSampleSecond(void){
    7fba:	0f 93       	push	r16
    7fbc:	1f 93       	push	r17
    7fbe:	8f ef       	ldi	r24, 0xFF	; 255
    7fc0:	9f ef       	ldi	r25, 0xFF	; 255
    7fc2:	af ef       	ldi	r26, 0xFF	; 255
    7fc4:	bf ef       	ldi	r27, 0xFF	; 255
    7fc6:	80 93 77 4c 	sts	0x4C77, r24
    7fca:	90 93 78 4c 	sts	0x4C78, r25
    7fce:	a0 93 79 4c 	sts	0x4C79, r26
    7fd2:	b0 93 7a 4c 	sts	0x4C7A, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    7fd6:	6c e4       	ldi	r22, 0x4C	; 76
    7fd8:	74 e7       	ldi	r23, 0x74	; 116
    7fda:	8e ed       	ldi	r24, 0xDE	; 222
    7fdc:	90 eb       	ldi	r25, 0xB0	; 176
    7fde:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(105);				// record size
    7fe2:	69 e6       	ldi	r22, 0x69	; 105
    7fe4:	70 e0       	ldi	r23, 0x00	; 0
    7fe6:	80 e0       	ldi	r24, 0x00	; 0
    7fe8:	90 e0       	ldi	r25, 0x00	; 0
    7fea:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write16(3); 		// record type
    7fee:	83 e0       	ldi	r24, 0x03	; 3
    7ff0:	90 e0       	ldi	r25, 0x00	; 0
    7ff2:	0e 94 27 2c 	call	0x584e	; 0x584e <SD_Write16>

														// payload

	SD_Write32(airSampleTime);					// time
    7ff6:	60 91 0c 2d 	lds	r22, 0x2D0C
    7ffa:	70 91 0d 2d 	lds	r23, 0x2D0D
    7ffe:	80 91 0e 2d 	lds	r24, 0x2D0E
    8002:	90 91 0f 2d 	lds	r25, 0x2D0F
    8006:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>

	SD_Write32(1843200);										// sample period (0.01667hz)
    800a:	60 e0       	ldi	r22, 0x00	; 0
    800c:	70 e2       	ldi	r23, 0x20	; 32
    800e:	8c e1       	ldi	r24, 0x1C	; 28
    8010:	90 e0       	ldi	r25, 0x00	; 0
    8012:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(1);												// number of samples
    8016:	61 e0       	ldi	r22, 0x01	; 1
    8018:	70 e0       	ldi	r23, 0x00	; 0
    801a:	80 e0       	ldi	r24, 0x00	; 0
    801c:	90 e0       	ldi	r25, 0x00	; 0
    801e:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>

	SD_WriteString("Air_1");
    8022:	80 ee       	ldi	r24, 0xE0	; 224
    8024:	91 e2       	ldi	r25, 0x21	; 33
    8026:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    802a:	89 e0       	ldi	r24, 0x09	; 9
    802c:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("32");
    8030:	03 ed       	ldi	r16, 0xD3	; 211
    8032:	11 e2       	ldi	r17, 0x21	; 33
    8034:	c8 01       	movw	r24, r16
    8036:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    803a:	8a e0       	ldi	r24, 0x0A	; 10
    803c:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("Air_2");
    8040:	86 ee       	ldi	r24, 0xE6	; 230
    8042:	91 e2       	ldi	r25, 0x21	; 33
    8044:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    8048:	89 e0       	ldi	r24, 0x09	; 9
    804a:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("32");
    804e:	c8 01       	movw	r24, r16
    8050:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    8054:	8a e0       	ldi	r24, 0x0A	; 10
    8056:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("Air_3");
    805a:	8c ee       	ldi	r24, 0xEC	; 236
    805c:	91 e2       	ldi	r25, 0x21	; 33
    805e:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    8062:	89 e0       	ldi	r24, 0x09	; 9
    8064:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("32");
    8068:	c8 01       	movw	r24, r16
    806a:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    806e:	8a e0       	ldi	r24, 0x0A	; 10
    8070:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("Air_4");
    8074:	82 ef       	ldi	r24, 0xF2	; 242
    8076:	91 e2       	ldi	r25, 0x21	; 33
    8078:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    807c:	89 e0       	ldi	r24, 0x09	; 9
    807e:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("32");
    8082:	c8 01       	movw	r24, r16
    8084:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    8088:	8a e0       	ldi	r24, 0x0A	; 10
    808a:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("Air_5");
    808e:	88 ef       	ldi	r24, 0xF8	; 248
    8090:	91 e2       	ldi	r25, 0x21	; 33
    8092:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    8096:	89 e0       	ldi	r24, 0x09	; 9
    8098:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("32");
    809c:	c8 01       	movw	r24, r16
    809e:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    80a2:	8a e0       	ldi	r24, 0x0A	; 10
    80a4:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("Air_6");
    80a8:	8e ef       	ldi	r24, 0xFE	; 254
    80aa:	91 e2       	ldi	r25, 0x21	; 33
    80ac:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    80b0:	89 e0       	ldi	r24, 0x09	; 9
    80b2:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("32");
    80b6:	c8 01       	movw	r24, r16
    80b8:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    80bc:	8a e0       	ldi	r24, 0x0A	; 10
    80be:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>

	SD_Write8(0x00);
    80c2:	80 e0       	ldi	r24, 0x00	; 0
    80c4:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>

	SD_Write32(airCount[0]);
    80c8:	60 91 47 46 	lds	r22, 0x4647
    80cc:	70 91 48 46 	lds	r23, 0x4648
    80d0:	80 91 49 46 	lds	r24, 0x4649
    80d4:	90 91 4a 46 	lds	r25, 0x464A
    80d8:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(airCount[1]);
    80dc:	60 91 4b 46 	lds	r22, 0x464B
    80e0:	70 91 4c 46 	lds	r23, 0x464C
    80e4:	80 91 4d 46 	lds	r24, 0x464D
    80e8:	90 91 4e 46 	lds	r25, 0x464E
    80ec:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(airCount[2]);
    80f0:	60 91 4f 46 	lds	r22, 0x464F
    80f4:	70 91 50 46 	lds	r23, 0x4650
    80f8:	80 91 51 46 	lds	r24, 0x4651
    80fc:	90 91 52 46 	lds	r25, 0x4652
    8100:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(airCount[3]);
    8104:	60 91 53 46 	lds	r22, 0x4653
    8108:	70 91 54 46 	lds	r23, 0x4654
    810c:	80 91 55 46 	lds	r24, 0x4655
    8110:	90 91 56 46 	lds	r25, 0x4656
    8114:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(airCount[4]);
    8118:	60 91 57 46 	lds	r22, 0x4657
    811c:	70 91 58 46 	lds	r23, 0x4658
    8120:	80 91 59 46 	lds	r24, 0x4659
    8124:	90 91 5a 46 	lds	r25, 0x465A
    8128:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(airCount[5]);
    812c:	60 91 5b 46 	lds	r22, 0x465B
    8130:	70 91 5c 46 	lds	r23, 0x465C
    8134:	80 91 5d 46 	lds	r24, 0x465D
    8138:	90 91 5e 46 	lds	r25, 0x465E
    813c:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>

	SD_WriteCRC();			// CRC
    8140:	0e 94 48 2c 	call	0x5890	; 0x5890 <SD_WriteCRC>

	f_sync(&Log_File);
    8144:	86 ef       	ldi	r24, 0xF6	; 246
    8146:	97 e4       	ldi	r25, 0x47	; 71
    8148:	0e 94 95 1c 	call	0x392a	; 0x392a <f_sync>

}
    814c:	1f 91       	pop	r17
    814e:	0f 91       	pop	r16
    8150:	08 95       	ret

00008152 <SD_WriteLightBuffer>:

	f_sync(&Log_File);

}

void SD_WriteLightBuffer(uint8_t bufferNumber){
    8152:	1f 93       	push	r17
    8154:	cf 93       	push	r28
    8156:	df 93       	push	r29
    8158:	18 2f       	mov	r17, r24
    815a:	8f ef       	ldi	r24, 0xFF	; 255
    815c:	9f ef       	ldi	r25, 0xFF	; 255
    815e:	af ef       	ldi	r26, 0xFF	; 255
    8160:	bf ef       	ldi	r27, 0xFF	; 255
    8162:	80 93 77 4c 	sts	0x4C77, r24
    8166:	90 93 78 4c 	sts	0x4C78, r25
    816a:	a0 93 79 4c 	sts	0x4C79, r26
    816e:	b0 93 7a 4c 	sts	0x4C7A, r27


	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    8172:	6c e4       	ldi	r22, 0x4C	; 76
    8174:	74 e7       	ldi	r23, 0x74	; 116
    8176:	8e ed       	ldi	r24, 0xDE	; 222
    8178:	90 eb       	ldi	r25, 0xB0	; 176
    817a:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(244);				// record size
    817e:	64 ef       	ldi	r22, 0xF4	; 244
    8180:	70 e0       	ldi	r23, 0x00	; 0
    8182:	80 e0       	ldi	r24, 0x00	; 0
    8184:	90 e0       	ldi	r25, 0x00	; 0
    8186:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write16(3); 		// record type
    818a:	83 e0       	ldi	r24, 0x03	; 3
    818c:	90 e0       	ldi	r25, 0x00	; 0
    818e:	0e 94 27 2c 	call	0x584e	; 0x584e <SD_Write16>

														// payload
	if(bufferNumber == 1){
    8192:	11 30       	cpi	r17, 0x01	; 1
    8194:	49 f4       	brne	.+18     	; 0x81a8 <SD_WriteLightBuffer+0x56>
		SD_Write32(lightSampleStartTime1);					// time
    8196:	60 91 04 2d 	lds	r22, 0x2D04
    819a:	70 91 05 2d 	lds	r23, 0x2D05
    819e:	80 91 06 2d 	lds	r24, 0x2D06
    81a2:	90 91 07 2d 	lds	r25, 0x2D07
    81a6:	08 c0       	rjmp	.+16     	; 0x81b8 <SD_WriteLightBuffer+0x66>
	} else {
		SD_Write32(lightSampleStartTime2);					// time
    81a8:	60 91 08 2d 	lds	r22, 0x2D08
    81ac:	70 91 09 2d 	lds	r23, 0x2D09
    81b0:	80 91 0a 2d 	lds	r24, 0x2D0A
    81b4:	90 91 0b 2d 	lds	r25, 0x2D0B
    81b8:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    81bc:	60 e0       	ldi	r22, 0x00	; 0
    81be:	70 e2       	ldi	r23, 0x20	; 32
    81c0:	8c e1       	ldi	r24, 0x1C	; 28
    81c2:	90 e0       	ldi	r25, 0x00	; 0
    81c4:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(10);												// number of samples
    81c8:	6a e0       	ldi	r22, 0x0A	; 10
    81ca:	70 e0       	ldi	r23, 0x00	; 0
    81cc:	80 e0       	ldi	r24, 0x00	; 0
    81ce:	90 e0       	ldi	r25, 0x00	; 0
    81d0:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>

	SD_WriteString("Light_Green");
    81d4:	84 e0       	ldi	r24, 0x04	; 4
    81d6:	92 e2       	ldi	r25, 0x22	; 34
    81d8:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    81dc:	89 e0       	ldi	r24, 0x09	; 9
    81de:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("32");
    81e2:	83 ed       	ldi	r24, 0xD3	; 211
    81e4:	91 e2       	ldi	r25, 0x21	; 33
    81e6:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    81ea:	8a e0       	ldi	r24, 0x0A	; 10
    81ec:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("Light_Red");
    81f0:	80 e1       	ldi	r24, 0x10	; 16
    81f2:	92 e2       	ldi	r25, 0x22	; 34
    81f4:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    81f8:	89 e0       	ldi	r24, 0x09	; 9
    81fa:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("32");
    81fe:	83 ed       	ldi	r24, 0xD3	; 211
    8200:	91 e2       	ldi	r25, 0x21	; 33
    8202:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    8206:	8a e0       	ldi	r24, 0x0A	; 10
    8208:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("Light_Blue");
    820c:	8a e1       	ldi	r24, 0x1A	; 26
    820e:	92 e2       	ldi	r25, 0x22	; 34
    8210:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    8214:	89 e0       	ldi	r24, 0x09	; 9
    8216:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("32");
    821a:	83 ed       	ldi	r24, 0xD3	; 211
    821c:	91 e2       	ldi	r25, 0x21	; 33
    821e:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    8222:	8a e0       	ldi	r24, 0x0A	; 10
    8224:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("Light_Clear");
    8228:	85 e2       	ldi	r24, 0x25	; 37
    822a:	92 e2       	ldi	r25, 0x22	; 34
    822c:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    8230:	89 e0       	ldi	r24, 0x09	; 9
    8232:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("32");
    8236:	83 ed       	ldi	r24, 0xD3	; 211
    8238:	91 e2       	ldi	r25, 0x21	; 33
    823a:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    823e:	8a e0       	ldi	r24, 0x0A	; 10
    8240:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>

	SD_Write8(0x00);
    8244:	80 e0       	ldi	r24, 0x00	; 0
    8246:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>

	if(bufferNumber == 1){
    824a:	11 30       	cpi	r17, 0x01	; 1
    824c:	69 f4       	brne	.+26     	; 0x8268 <SD_WriteLightBuffer+0x116>
    824e:	cc eb       	ldi	r28, 0xBC	; 188
    8250:	d0 e5       	ldi	r29, 0x50	; 80
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer1[i]);
    8252:	69 91       	ld	r22, Y+
    8254:	79 91       	ld	r23, Y+
    8256:	89 91       	ld	r24, Y+
    8258:	99 91       	ld	r25, Y+
    825a:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write8(0x0A);

	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 40; i++){
    825e:	81 e5       	ldi	r24, 0x51	; 81
    8260:	cc 35       	cpi	r28, 0x5C	; 92
    8262:	d8 07       	cpc	r29, r24
    8264:	b1 f7       	brne	.-20     	; 0x8252 <SD_WriteLightBuffer+0x100>
    8266:	0c c0       	rjmp	.+24     	; 0x8280 <SD_WriteLightBuffer+0x12e>
    8268:	c3 ec       	ldi	r28, 0xC3	; 195
    826a:	dd e3       	ldi	r29, 0x3D	; 61
			SD_Write32(lightBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer2[i]);
    826c:	69 91       	ld	r22, Y+
    826e:	79 91       	ld	r23, Y+
    8270:	89 91       	ld	r24, Y+
    8272:	99 91       	ld	r25, Y+
    8274:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 40; i++){
			SD_Write32(lightBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 40; i++){
    8278:	8e e3       	ldi	r24, 0x3E	; 62
    827a:	c3 36       	cpi	r28, 0x63	; 99
    827c:	d8 07       	cpc	r29, r24
    827e:	b1 f7       	brne	.-20     	; 0x826c <SD_WriteLightBuffer+0x11a>
			SD_Write32(lightBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    8280:	0e 94 48 2c 	call	0x5890	; 0x5890 <SD_WriteCRC>

	f_sync(&Log_File);
    8284:	86 ef       	ldi	r24, 0xF6	; 246
    8286:	97 e4       	ldi	r25, 0x47	; 71
    8288:	0e 94 95 1c 	call	0x392a	; 0x392a <f_sync>

}
    828c:	df 91       	pop	r29
    828e:	cf 91       	pop	r28
    8290:	1f 91       	pop	r17
    8292:	08 95       	ret

00008294 <SD_WriteMicrophoneBuffer>:

	f_sync(&Log_File);

}

void SD_WriteMicrophoneBuffer(uint8_t bufferNumber){
    8294:	1f 93       	push	r17
    8296:	18 2f       	mov	r17, r24
    8298:	8f ef       	ldi	r24, 0xFF	; 255
    829a:	9f ef       	ldi	r25, 0xFF	; 255
    829c:	af ef       	ldi	r26, 0xFF	; 255
    829e:	bf ef       	ldi	r27, 0xFF	; 255
    82a0:	80 93 77 4c 	sts	0x4C77, r24
    82a4:	90 93 78 4c 	sts	0x4C78, r25
    82a8:	a0 93 79 4c 	sts	0x4C79, r26
    82ac:	b0 93 7a 4c 	sts	0x4C7A, r27

	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    82b0:	6c e4       	ldi	r22, 0x4C	; 76
    82b2:	74 e7       	ldi	r23, 0x74	; 116
    82b4:	8e ed       	ldi	r24, 0xDE	; 222
    82b6:	90 eb       	ldi	r25, 0xB0	; 176
    82b8:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(40+microphoneNumberOfSamples);		// record size
    82bc:	60 e3       	ldi	r22, 0x30	; 48
    82be:	77 e0       	ldi	r23, 0x07	; 7
    82c0:	80 e0       	ldi	r24, 0x00	; 0
    82c2:	90 e0       	ldi	r25, 0x00	; 0
    82c4:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write16(3); 									// record type
    82c8:	83 e0       	ldi	r24, 0x03	; 3
    82ca:	90 e0       	ldi	r25, 0x00	; 0
    82cc:	0e 94 27 2c 	call	0x584e	; 0x584e <SD_Write16>

														// payload
	if(bufferNumber == 1){
    82d0:	11 30       	cpi	r17, 0x01	; 1
    82d2:	49 f4       	brne	.+18     	; 0x82e6 <SD_WriteMicrophoneBuffer+0x52>
		SD_Write32(microphoneSampleStartTime1);					// time
    82d4:	60 91 fc 2c 	lds	r22, 0x2CFC
    82d8:	70 91 fd 2c 	lds	r23, 0x2CFD
    82dc:	80 91 fe 2c 	lds	r24, 0x2CFE
    82e0:	90 91 ff 2c 	lds	r25, 0x2CFF
    82e4:	08 c0       	rjmp	.+16     	; 0x82f6 <SD_WriteMicrophoneBuffer+0x62>
	} else {
		SD_Write32(microphoneSampleStartTime2);					// time
    82e6:	60 91 00 2d 	lds	r22, 0x2D00
    82ea:	70 91 01 2d 	lds	r23, 0x2D01
    82ee:	80 91 02 2d 	lds	r24, 0x2D02
    82f2:	90 91 03 2d 	lds	r25, 0x2D03
    82f6:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	}


	SD_Write32(256);								// sample period (7.2khz)
    82fa:	60 e0       	ldi	r22, 0x00	; 0
    82fc:	71 e0       	ldi	r23, 0x01	; 1
    82fe:	80 e0       	ldi	r24, 0x00	; 0
    8300:	90 e0       	ldi	r25, 0x00	; 0
    8302:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>



	SD_Write32(microphoneNumberOfSamples);			// number of samples
    8306:	68 e0       	ldi	r22, 0x08	; 8
    8308:	77 e0       	ldi	r23, 0x07	; 7
    830a:	80 e0       	ldi	r24, 0x00	; 0
    830c:	90 e0       	ldi	r25, 0x00	; 0
    830e:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>

	SD_WriteString("Microphone");
    8312:	81 e3       	ldi	r24, 0x31	; 49
    8314:	92 e2       	ldi	r25, 0x22	; 34
    8316:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    831a:	89 e0       	ldi	r24, 0x09	; 9
    831c:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("8");
    8320:	8c e3       	ldi	r24, 0x3C	; 60
    8322:	92 e2       	ldi	r25, 0x22	; 34
    8324:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    8328:	8a e0       	ldi	r24, 0x0A	; 10
    832a:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_Write8(0x00);
    832e:	80 e0       	ldi	r24, 0x00	; 0
    8330:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>

	if(bufferNumber == 1){
    8334:	11 30       	cpi	r17, 0x01	; 1
    8336:	19 f4       	brne	.+6      	; 0x833e <SD_WriteMicrophoneBuffer+0xaa>
		SD_WriteBuffer(microphoneBuffer1,microphoneNumberOfSamples);
    8338:	85 e9       	ldi	r24, 0x95	; 149
    833a:	9e e3       	ldi	r25, 0x3E	; 62
    833c:	02 c0       	rjmp	.+4      	; 0x8342 <SD_WriteMicrophoneBuffer+0xae>
	} else {
		SD_WriteBuffer(microphoneBuffer2,microphoneNumberOfSamples);
    833e:	89 e4       	ldi	r24, 0x49	; 73
    8340:	96 e3       	ldi	r25, 0x36	; 54
    8342:	68 e0       	ldi	r22, 0x08	; 8
    8344:	77 e0       	ldi	r23, 0x07	; 7
    8346:	0e 94 a6 2b 	call	0x574c	; 0x574c <SD_WriteBuffer>
	}

	SD_WriteCRC();									// CRC
    834a:	0e 94 48 2c 	call	0x5890	; 0x5890 <SD_WriteCRC>

	f_sync(&Log_File);
    834e:	86 ef       	ldi	r24, 0xF6	; 246
    8350:	97 e4       	ldi	r25, 0x47	; 71
    8352:	0e 94 95 1c 	call	0x392a	; 0x392a <f_sync>

}
    8356:	1f 91       	pop	r17
    8358:	08 95       	ret

0000835a <SD_WritePressureBuffer>:
	f_sync(&Log_File);

}


void SD_WritePressureBuffer(uint8_t bufferNumber){
    835a:	1f 93       	push	r17
    835c:	cf 93       	push	r28
    835e:	df 93       	push	r29
    8360:	18 2f       	mov	r17, r24
    8362:	8f ef       	ldi	r24, 0xFF	; 255
    8364:	9f ef       	ldi	r25, 0xFF	; 255
    8366:	af ef       	ldi	r26, 0xFF	; 255
    8368:	bf ef       	ldi	r27, 0xFF	; 255
    836a:	80 93 77 4c 	sts	0x4C77, r24
    836e:	90 93 78 4c 	sts	0x4C78, r25
    8372:	a0 93 79 4c 	sts	0x4C79, r26
    8376:	b0 93 7a 4c 	sts	0x4C7A, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    837a:	6c e4       	ldi	r22, 0x4C	; 76
    837c:	74 e7       	ldi	r23, 0x74	; 116
    837e:	8e ed       	ldi	r24, 0xDE	; 222
    8380:	90 eb       	ldi	r25, 0xB0	; 176
    8382:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(59);				// record size
    8386:	6b e3       	ldi	r22, 0x3B	; 59
    8388:	70 e0       	ldi	r23, 0x00	; 0
    838a:	80 e0       	ldi	r24, 0x00	; 0
    838c:	90 e0       	ldi	r25, 0x00	; 0
    838e:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write16(3); 		// record type
    8392:	83 e0       	ldi	r24, 0x03	; 3
    8394:	90 e0       	ldi	r25, 0x00	; 0
    8396:	0e 94 27 2c 	call	0x584e	; 0x584e <SD_Write16>

											// payload
	if(bufferNumber == 1){
    839a:	11 30       	cpi	r17, 0x01	; 1
    839c:	49 f4       	brne	.+18     	; 0x83b0 <SD_WritePressureBuffer+0x56>
		SD_Write32(pressureSampleStartTime1);					// time
    839e:	60 91 f4 2c 	lds	r22, 0x2CF4
    83a2:	70 91 f5 2c 	lds	r23, 0x2CF5
    83a6:	80 91 f6 2c 	lds	r24, 0x2CF6
    83aa:	90 91 f7 2c 	lds	r25, 0x2CF7
    83ae:	08 c0       	rjmp	.+16     	; 0x83c0 <SD_WritePressureBuffer+0x66>
	} else {
		SD_Write32(pressureSampleStartTime2);					// time
    83b0:	60 91 f8 2c 	lds	r22, 0x2CF8
    83b4:	70 91 f9 2c 	lds	r23, 0x2CF9
    83b8:	80 91 fa 2c 	lds	r24, 0x2CFA
    83bc:	90 91 fb 2c 	lds	r25, 0x2CFB
    83c0:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    83c4:	60 e0       	ldi	r22, 0x00	; 0
    83c6:	70 e2       	ldi	r23, 0x20	; 32
    83c8:	8c e1       	ldi	r24, 0x1C	; 28
    83ca:	90 e0       	ldi	r25, 0x00	; 0
    83cc:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(10);												// number of samples
    83d0:	6a e0       	ldi	r22, 0x0A	; 10
    83d2:	70 e0       	ldi	r23, 0x00	; 0
    83d4:	80 e0       	ldi	r24, 0x00	; 0
    83d6:	90 e0       	ldi	r25, 0x00	; 0
    83d8:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>

	SD_WriteString("Pressure");
    83dc:	8e e3       	ldi	r24, 0x3E	; 62
    83de:	92 e2       	ldi	r25, 0x22	; 34
    83e0:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    83e4:	89 e0       	ldi	r24, 0x09	; 9
    83e6:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("16");
    83ea:	87 e4       	ldi	r24, 0x47	; 71
    83ec:	92 e2       	ldi	r25, 0x22	; 34
    83ee:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    83f2:	8a e0       	ldi	r24, 0x0A	; 10
    83f4:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_Write8(0x00);
    83f8:	80 e0       	ldi	r24, 0x00	; 0
    83fa:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>

	if(bufferNumber == 1){
    83fe:	11 30       	cpi	r17, 0x01	; 1
    8400:	59 f4       	brne	.+22     	; 0x8418 <SD_WritePressureBuffer+0xbe>
    8402:	c6 e2       	ldi	r28, 0x26	; 38
    8404:	d6 e3       	ldi	r29, 0x36	; 54
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(pressureBuffer1[i]);
    8406:	89 91       	ld	r24, Y+
    8408:	99 91       	ld	r25, Y+
    840a:	0e 94 27 2c 	call	0x584e	; 0x584e <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    840e:	86 e3       	ldi	r24, 0x36	; 54
    8410:	ca 33       	cpi	r28, 0x3A	; 58
    8412:	d8 07       	cpc	r29, r24
    8414:	c1 f7       	brne	.-16     	; 0x8406 <SD_WritePressureBuffer+0xac>
    8416:	0a c0       	rjmp	.+20     	; 0x842c <SD_WritePressureBuffer+0xd2>
    8418:	ce ec       	ldi	r28, 0xCE	; 206
    841a:	d6 e4       	ldi	r29, 0x46	; 70
			SD_Write16(pressureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(pressureBuffer2[i]);
    841c:	89 91       	ld	r24, Y+
    841e:	99 91       	ld	r25, Y+
    8420:	0e 94 27 2c 	call	0x584e	; 0x584e <SD_Write16>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(pressureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    8424:	86 e4       	ldi	r24, 0x46	; 70
    8426:	c2 3e       	cpi	r28, 0xE2	; 226
    8428:	d8 07       	cpc	r29, r24
    842a:	c1 f7       	brne	.-16     	; 0x841c <SD_WritePressureBuffer+0xc2>
			SD_Write16(pressureBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    842c:	0e 94 48 2c 	call	0x5890	; 0x5890 <SD_WriteCRC>

	f_sync(&Log_File);
    8430:	86 ef       	ldi	r24, 0xF6	; 246
    8432:	97 e4       	ldi	r25, 0x47	; 71
    8434:	0e 94 95 1c 	call	0x392a	; 0x392a <f_sync>

}
    8438:	df 91       	pop	r29
    843a:	cf 91       	pop	r28
    843c:	1f 91       	pop	r17
    843e:	08 95       	ret

00008440 <SD_WriteHumidityBuffer>:
		
	f_sync(&Log_File);

}

void SD_WriteHumidityBuffer(uint8_t bufferNumber){
    8440:	1f 93       	push	r17
    8442:	cf 93       	push	r28
    8444:	df 93       	push	r29
    8446:	18 2f       	mov	r17, r24
    8448:	8f ef       	ldi	r24, 0xFF	; 255
    844a:	9f ef       	ldi	r25, 0xFF	; 255
    844c:	af ef       	ldi	r26, 0xFF	; 255
    844e:	bf ef       	ldi	r27, 0xFF	; 255
    8450:	80 93 77 4c 	sts	0x4C77, r24
    8454:	90 93 78 4c 	sts	0x4C78, r25
    8458:	a0 93 79 4c 	sts	0x4C79, r26
    845c:	b0 93 7a 4c 	sts	0x4C7A, r27
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number
    8460:	6c e4       	ldi	r22, 0x4C	; 76
    8462:	74 e7       	ldi	r23, 0x74	; 116
    8464:	8e ed       	ldi	r24, 0xDE	; 222
    8466:	90 eb       	ldi	r25, 0xB0	; 176
    8468:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(59);				// record size
    846c:	6b e3       	ldi	r22, 0x3B	; 59
    846e:	70 e0       	ldi	r23, 0x00	; 0
    8470:	80 e0       	ldi	r24, 0x00	; 0
    8472:	90 e0       	ldi	r25, 0x00	; 0
    8474:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write16(3); 		// record type
    8478:	83 e0       	ldi	r24, 0x03	; 3
    847a:	90 e0       	ldi	r25, 0x00	; 0
    847c:	0e 94 27 2c 	call	0x584e	; 0x584e <SD_Write16>

											// payload
	if(bufferNumber == 1){
    8480:	11 30       	cpi	r17, 0x01	; 1
    8482:	49 f4       	brne	.+18     	; 0x8496 <SD_WriteHumidityBuffer+0x56>
		SD_Write32(humiditySampleStartTime1);					// time
    8484:	60 91 ec 2c 	lds	r22, 0x2CEC
    8488:	70 91 ed 2c 	lds	r23, 0x2CED
    848c:	80 91 ee 2c 	lds	r24, 0x2CEE
    8490:	90 91 ef 2c 	lds	r25, 0x2CEF
    8494:	08 c0       	rjmp	.+16     	; 0x84a6 <SD_WriteHumidityBuffer+0x66>
	} else {
		SD_Write32(humiditySampleStartTime2);					// time
    8496:	60 91 f0 2c 	lds	r22, 0x2CF0
    849a:	70 91 f1 2c 	lds	r23, 0x2CF1
    849e:	80 91 f2 2c 	lds	r24, 0x2CF2
    84a2:	90 91 f3 2c 	lds	r25, 0x2CF3
    84a6:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    84aa:	60 e0       	ldi	r22, 0x00	; 0
    84ac:	70 e2       	ldi	r23, 0x20	; 32
    84ae:	8c e1       	ldi	r24, 0x1C	; 28
    84b0:	90 e0       	ldi	r25, 0x00	; 0
    84b2:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(10);												// number of samples
    84b6:	6a e0       	ldi	r22, 0x0A	; 10
    84b8:	70 e0       	ldi	r23, 0x00	; 0
    84ba:	80 e0       	ldi	r24, 0x00	; 0
    84bc:	90 e0       	ldi	r25, 0x00	; 0
    84be:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>

	SD_WriteString("Humidity");
    84c2:	8a e4       	ldi	r24, 0x4A	; 74
    84c4:	92 e2       	ldi	r25, 0x22	; 34
    84c6:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    84ca:	89 e0       	ldi	r24, 0x09	; 9
    84cc:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("16");
    84d0:	87 e4       	ldi	r24, 0x47	; 71
    84d2:	92 e2       	ldi	r25, 0x22	; 34
    84d4:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    84d8:	8a e0       	ldi	r24, 0x0A	; 10
    84da:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_Write8(0x00);
    84de:	80 e0       	ldi	r24, 0x00	; 0
    84e0:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>

	if(bufferNumber == 1){
    84e4:	11 30       	cpi	r17, 0x01	; 1
    84e6:	59 f4       	brne	.+22     	; 0x84fe <SD_WriteHumidityBuffer+0xbe>
    84e8:	ce e0       	ldi	r28, 0x0E	; 14
    84ea:	d7 e4       	ldi	r29, 0x47	; 71
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(humidityBuffer1[i]);
    84ec:	89 91       	ld	r24, Y+
    84ee:	99 91       	ld	r25, Y+
    84f0:	0e 94 27 2c 	call	0x584e	; 0x584e <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    84f4:	87 e4       	ldi	r24, 0x47	; 71
    84f6:	c2 32       	cpi	r28, 0x22	; 34
    84f8:	d8 07       	cpc	r29, r24
    84fa:	c1 f7       	brne	.-16     	; 0x84ec <SD_WriteHumidityBuffer+0xac>
    84fc:	0a c0       	rjmp	.+20     	; 0x8512 <SD_WriteHumidityBuffer+0xd2>
    84fe:	c0 e6       	ldi	r28, 0x60	; 96
    8500:	dc e4       	ldi	r29, 0x4C	; 76
			SD_Write16(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(humidityBuffer2[i]);
    8502:	89 91       	ld	r24, Y+
    8504:	99 91       	ld	r25, Y+
    8506:	0e 94 27 2c 	call	0x584e	; 0x584e <SD_Write16>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(humidityBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    850a:	8c e4       	ldi	r24, 0x4C	; 76
    850c:	c4 37       	cpi	r28, 0x74	; 116
    850e:	d8 07       	cpc	r29, r24
    8510:	c1 f7       	brne	.-16     	; 0x8502 <SD_WriteHumidityBuffer+0xc2>
			SD_Write16(humidityBuffer2[i]);
		}
	}

	SD_WriteCRC();			// CRC
    8512:	0e 94 48 2c 	call	0x5890	; 0x5890 <SD_WriteCRC>

	f_sync(&Log_File);
    8516:	86 ef       	ldi	r24, 0xF6	; 246
    8518:	97 e4       	ldi	r25, 0x47	; 71
    851a:	0e 94 95 1c 	call	0x392a	; 0x392a <f_sync>

}
    851e:	df 91       	pop	r29
    8520:	cf 91       	pop	r28
    8522:	1f 91       	pop	r17
    8524:	08 95       	ret

00008526 <SD_WriteTemperatureBuffer>:
	f_sync(&Log_File);

}


void SD_WriteTemperatureBuffer(uint8_t bufferNumber){
    8526:	1f 93       	push	r17
    8528:	cf 93       	push	r28
    852a:	df 93       	push	r29
    852c:	18 2f       	mov	r17, r24
    852e:	8f ef       	ldi	r24, 0xFF	; 255
    8530:	9f ef       	ldi	r25, 0xFF	; 255
    8532:	af ef       	ldi	r26, 0xFF	; 255
    8534:	bf ef       	ldi	r27, 0xFF	; 255
    8536:	80 93 77 4c 	sts	0x4C77, r24
    853a:	90 93 78 4c 	sts	0x4C78, r25
    853e:	a0 93 79 4c 	sts	0x4C79, r26
    8542:	b0 93 7a 4c 	sts	0x4C7A, r27
	
		
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);						// magic number 
    8546:	6c e4       	ldi	r22, 0x4C	; 76
    8548:	74 e7       	ldi	r23, 0x74	; 116
    854a:	8e ed       	ldi	r24, 0xDE	; 222
    854c:	90 eb       	ldi	r25, 0xB0	; 176
    854e:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(62);				// record size  
    8552:	6e e3       	ldi	r22, 0x3E	; 62
    8554:	70 e0       	ldi	r23, 0x00	; 0
    8556:	80 e0       	ldi	r24, 0x00	; 0
    8558:	90 e0       	ldi	r25, 0x00	; 0
    855a:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write16(3); 		// record type  
    855e:	83 e0       	ldi	r24, 0x03	; 3
    8560:	90 e0       	ldi	r25, 0x00	; 0
    8562:	0e 94 27 2c 	call	0x584e	; 0x584e <SD_Write16>
	
														// payload
	if(bufferNumber == 1){
    8566:	11 30       	cpi	r17, 0x01	; 1
    8568:	49 f4       	brne	.+18     	; 0x857c <SD_WriteTemperatureBuffer+0x56>
		SD_Write32(temperatureSampleStartTime1);					// time
    856a:	60 91 e4 2c 	lds	r22, 0x2CE4
    856e:	70 91 e5 2c 	lds	r23, 0x2CE5
    8572:	80 91 e6 2c 	lds	r24, 0x2CE6
    8576:	90 91 e7 2c 	lds	r25, 0x2CE7
    857a:	08 c0       	rjmp	.+16     	; 0x858c <SD_WriteTemperatureBuffer+0x66>
	} else {
		SD_Write32(temperatureSampleStartTime2);					// time
    857c:	60 91 e8 2c 	lds	r22, 0x2CE8
    8580:	70 91 e9 2c 	lds	r23, 0x2CE9
    8584:	80 91 ea 2c 	lds	r24, 0x2CEA
    8588:	90 91 eb 2c 	lds	r25, 0x2CEB
    858c:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	}
	SD_Write32(1843200);										// sample period (1hz)
    8590:	60 e0       	ldi	r22, 0x00	; 0
    8592:	70 e2       	ldi	r23, 0x20	; 32
    8594:	8c e1       	ldi	r24, 0x1C	; 28
    8596:	90 e0       	ldi	r25, 0x00	; 0
    8598:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(10);												// number of samples
    859c:	6a e0       	ldi	r22, 0x0A	; 10
    859e:	70 e0       	ldi	r23, 0x00	; 0
    85a0:	80 e0       	ldi	r24, 0x00	; 0
    85a2:	90 e0       	ldi	r25, 0x00	; 0
    85a4:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
		
	SD_WriteString("Temperature");
    85a8:	83 e5       	ldi	r24, 0x53	; 83
    85aa:	92 e2       	ldi	r25, 0x22	; 34
    85ac:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    85b0:	89 e0       	ldi	r24, 0x09	; 9
    85b2:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("16");
    85b6:	87 e4       	ldi	r24, 0x47	; 71
    85b8:	92 e2       	ldi	r25, 0x22	; 34
    85ba:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    85be:	8a e0       	ldi	r24, 0x0A	; 10
    85c0:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_Write8(0x00);
    85c4:	80 e0       	ldi	r24, 0x00	; 0
    85c6:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	
	if(bufferNumber == 1){
    85ca:	11 30       	cpi	r17, 0x01	; 1
    85cc:	59 f4       	brne	.+22     	; 0x85e4 <SD_WriteTemperatureBuffer+0xbe>
    85ce:	cd e9       	ldi	r28, 0x9D	; 157
    85d0:	d5 e4       	ldi	r29, 0x45	; 69
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
    85d2:	89 91       	ld	r24, Y+
    85d4:	99 91       	ld	r25, Y+
    85d6:	0e 94 27 2c 	call	0x584e	; 0x584e <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);
	
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
    85da:	85 e4       	ldi	r24, 0x45	; 69
    85dc:	c1 3b       	cpi	r28, 0xB1	; 177
    85de:	d8 07       	cpc	r29, r24
    85e0:	c1 f7       	brne	.-16     	; 0x85d2 <SD_WriteTemperatureBuffer+0xac>
    85e2:	0a c0       	rjmp	.+20     	; 0x85f8 <SD_WriteTemperatureBuffer+0xd2>
    85e4:	ca eb       	ldi	r28, 0xBA	; 186
    85e6:	d6 e4       	ldi	r29, 0x46	; 70
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer2[i]);
    85e8:	89 91       	ld	r24, Y+
    85ea:	99 91       	ld	r25, Y+
    85ec:	0e 94 27 2c 	call	0x584e	; 0x584e <SD_Write16>
	if(bufferNumber == 1){
		for(uint8_t i = 0; i < 10; i++){
			SD_Write16(temperatureBuffer1[i]);
		}
	} else {
		for(uint8_t i = 0; i < 10; i++){
    85f0:	86 e4       	ldi	r24, 0x46	; 70
    85f2:	ce 3c       	cpi	r28, 0xCE	; 206
    85f4:	d8 07       	cpc	r29, r24
    85f6:	c1 f7       	brne	.-16     	; 0x85e8 <SD_WriteTemperatureBuffer+0xc2>
			SD_Write16(temperatureBuffer2[i]);
		}
	}
	
	SD_WriteCRC();			// CRC			
    85f8:	0e 94 48 2c 	call	0x5890	; 0x5890 <SD_WriteCRC>
		
	f_sync(&Log_File);
    85fc:	86 ef       	ldi	r24, 0xF6	; 246
    85fe:	97 e4       	ldi	r25, 0x47	; 71
    8600:	0e 94 95 1c 	call	0x392a	; 0x392a <f_sync>

}
    8604:	df 91       	pop	r29
    8606:	cf 91       	pop	r28
    8608:	1f 91       	pop	r17
    860a:	08 95       	ret

0000860c <Rs232_SendString>:
void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
	Rs232_Usart.DATA = data;	
}

void Rs232_SendString(char string [],bool CR){
    860c:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    860e:	dc 01       	movw	r26, r24
    8610:	0d 90       	ld	r0, X+
    8612:	00 20       	and	r0, r0
    8614:	e9 f7       	brne	.-6      	; 0x8610 <Rs232_SendString+0x4>
    8616:	11 97       	sbiw	r26, 0x01	; 1
    8618:	a8 1b       	sub	r26, r24
    861a:	b9 0b       	sbc	r27, r25
    861c:	90 e0       	ldi	r25, 0x00	; 0
    861e:	0a c0       	rjmp	.+20     	; 0x8634 <Rs232_SendString+0x28>
		Rs232_SendByte(string[i]);
    8620:	e2 0f       	add	r30, r18
    8622:	f3 1f       	adc	r31, r19
    8624:	40 81       	ld	r20, Z
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    8626:	80 91 a1 09 	lds	r24, 0x09A1
    862a:	85 ff       	sbrs	r24, 5
    862c:	fc cf       	rjmp	.-8      	; 0x8626 <Rs232_SendString+0x1a>
	Rs232_Usart.DATA = data;	
    862e:	40 93 a0 09 	sts	0x09A0, r20
}

void Rs232_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    8632:	9f 5f       	subi	r25, 0xFF	; 255
    8634:	e9 2f       	mov	r30, r25
    8636:	f0 e0       	ldi	r31, 0x00	; 0
    8638:	ea 17       	cp	r30, r26
    863a:	fb 07       	cpc	r31, r27
    863c:	88 f3       	brcs	.-30     	; 0x8620 <Rs232_SendString+0x14>
		Rs232_SendByte(string[i]);
	}

  if(CR){
    863e:	66 23       	and	r22, r22
    8640:	71 f0       	breq	.+28     	; 0x865e <Rs232_SendString+0x52>
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    8642:	80 91 a1 09 	lds	r24, 0x09A1
    8646:	85 ff       	sbrs	r24, 5
    8648:	fc cf       	rjmp	.-8      	; 0x8642 <Rs232_SendString+0x36>
	Rs232_Usart.DATA = data;	
    864a:	8d e0       	ldi	r24, 0x0D	; 13
    864c:	80 93 a0 09 	sts	0x09A0, r24
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    8650:	80 91 a1 09 	lds	r24, 0x09A1
    8654:	85 ff       	sbrs	r24, 5
    8656:	fc cf       	rjmp	.-8      	; 0x8650 <Rs232_SendString+0x44>
	Rs232_Usart.DATA = data;	
    8658:	8a e0       	ldi	r24, 0x0A	; 10
    865a:	80 93 a0 09 	sts	0x09A0, r24
    865e:	08 95       	ret

00008660 <Debug_SendString>:

void Debug_SendString(char string [],bool CR){
    8660:	ef 92       	push	r14
    8662:	ff 92       	push	r15
    8664:	0f 93       	push	r16
    8666:	1f 93       	push	r17
    8668:	cf 93       	push	r28
    866a:	df 93       	push	r29
    866c:	8c 01       	movw	r16, r24
    866e:	e6 2e       	mov	r14, r22
    8670:	ff 24       	eor	r15, r15
    8672:	06 c0       	rjmp	.+12     	; 0x8680 <Debug_SendString+0x20>
	for(uint8_t i = 0; i < strlen(string); i++){
		Debug_SendByte(string[i]);
    8674:	c0 0f       	add	r28, r16
    8676:	d1 1f       	adc	r29, r17
    8678:	88 81       	ld	r24, Y
    867a:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0); // Wait for RTS to be low
	Debug_Usart.DATA = data;
}

void Debug_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    867e:	f3 94       	inc	r15
    8680:	cf 2d       	mov	r28, r15
    8682:	d0 e0       	ldi	r29, 0x00	; 0
    8684:	f8 01       	movw	r30, r16
    8686:	01 90       	ld	r0, Z+
    8688:	00 20       	and	r0, r0
    868a:	e9 f7       	brne	.-6      	; 0x8686 <Debug_SendString+0x26>
    868c:	31 97       	sbiw	r30, 0x01	; 1
    868e:	e0 1b       	sub	r30, r16
    8690:	f1 0b       	sbc	r31, r17
    8692:	ce 17       	cp	r28, r30
    8694:	df 07       	cpc	r29, r31
    8696:	70 f3       	brcs	.-36     	; 0x8674 <Debug_SendString+0x14>
		Debug_SendByte(string[i]);
	}

  if(CR){
    8698:	ee 20       	and	r14, r14
    869a:	31 f0       	breq	.+12     	; 0x86a8 <Debug_SendString+0x48>
		Debug_SendByte(13);
    869c:	8d e0       	ldi	r24, 0x0D	; 13
    869e:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendByte(10);
    86a2:	8a e0       	ldi	r24, 0x0A	; 10
    86a4:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	}
    86a8:	df 91       	pop	r29
    86aa:	cf 91       	pop	r28
    86ac:	1f 91       	pop	r17
    86ae:	0f 91       	pop	r16
    86b0:	ff 90       	pop	r15
    86b2:	ef 90       	pop	r14
    86b4:	08 95       	ret

000086b6 <Uploader_connectToComputer>:
		return false;
	}
	return true;
}

void Uploader_connectToComputer(void){
    86b6:	df 92       	push	r13
    86b8:	ef 92       	push	r14
    86ba:	ff 92       	push	r15
    86bc:	0f 93       	push	r16
    86be:	1f 93       	push	r17
    86c0:	cf 93       	push	r28
    86c2:	df 93       	push	r29
	uint16_t singCounter;
	uint8_t  char1;
	uint8_t  char2;
	
	connected = false;
    86c4:	10 92 62 2d 	sts	0x2D62, r1
	Debug_ClearBuffer();
    86c8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Debug_ClearBuffer>
    86cc:	e1 2c       	mov	r14, r1
    86ce:	58 e4       	ldi	r21, 0x48	; 72
    86d0:	f5 2e       	mov	r15, r21
				char1 = Debug_GetByte(false);
				if(char1 == 'B'){
					_delay_ms(5);
					char2 = Debug_GetByte(false);
					if(char2 == 'T'){
						connected = true;
    86d2:	06 e6       	ldi	r16, 0x66	; 102
    86d4:	1e e0       	ldi	r17, 0x0E	; 14
    86d6:	dd 24       	eor	r13, r13
    86d8:	d3 94       	inc	r13
    86da:	2b c0       	rjmp	.+86     	; 0x8732 <Uploader_connectToComputer+0x7c>
	uint8_t  char2;
	
	connected = false;
	Debug_ClearBuffer();
	while(!connected){
		Debug_SendString("BS",false);
    86dc:	8f e5       	ldi	r24, 0x5F	; 95
    86de:	92 e2       	ldi	r25, 0x22	; 34
    86e0:	60 e0       	ldi	r22, 0x00	; 0
    86e2:	0e 94 30 43 	call	0x8660	; 0x8660 <Debug_SendString>
    86e6:	ce ee       	ldi	r28, 0xEE	; 238
    86e8:	d2 e0       	ldi	r29, 0x02	; 2
		singCounter = 750;
		while(singCounter > 0){
			if(Debug_CharReadyToRead()){
    86ea:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
    86ee:	88 23       	and	r24, r24
    86f0:	d9 f0       	breq	.+54     	; 0x8728 <Uploader_connectToComputer+0x72>
				char1 = Debug_GetByte(false);
    86f2:	80 e0       	ldi	r24, 0x00	; 0
    86f4:	0e 94 ef 01 	call	0x3de	; 0x3de <Debug_GetByte>
				if(char1 == 'B'){
    86f8:	82 34       	cpi	r24, 0x42	; 66
    86fa:	b1 f4       	brne	.+44     	; 0x8728 <Uploader_connectToComputer+0x72>
    86fc:	c7 01       	movw	r24, r14
    86fe:	01 97       	sbiw	r24, 0x01	; 1
    8700:	f1 f7       	brne	.-4      	; 0x86fe <Uploader_connectToComputer+0x48>
					_delay_ms(5);
					char2 = Debug_GetByte(false);
    8702:	80 e0       	ldi	r24, 0x00	; 0
    8704:	0e 94 ef 01 	call	0x3de	; 0x3de <Debug_GetByte>
					if(char2 == 'T'){
    8708:	84 35       	cpi	r24, 0x54	; 84
    870a:	71 f4       	brne	.+28     	; 0x8728 <Uploader_connectToComputer+0x72>
						connected = true;
    870c:	d0 92 62 2d 	sts	0x2D62, r13
						Debug_SendString("BT",false);
    8710:	82 e6       	ldi	r24, 0x62	; 98
    8712:	92 e2       	ldi	r25, 0x22	; 34
    8714:	60 e0       	ldi	r22, 0x00	; 0
    8716:	0e 94 30 43 	call	0x8660	; 0x8660 <Debug_SendString>
						timeOutCounter = 0;
    871a:	10 92 53 2d 	sts	0x2D53, r1
    871e:	10 92 54 2d 	sts	0x2D54, r1
						Debug_ClearBuffer();
    8722:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Debug_ClearBuffer>
    8726:	05 c0       	rjmp	.+10     	; 0x8732 <Uploader_connectToComputer+0x7c>
    8728:	c8 01       	movw	r24, r16
    872a:	01 97       	sbiw	r24, 0x01	; 1
    872c:	f1 f7       	brne	.-4      	; 0x872a <Uploader_connectToComputer+0x74>
						break;
					}
				}
			}
			_delay_ms(1);
			singCounter--;
    872e:	21 97       	sbiw	r28, 0x01	; 1
	connected = false;
	Debug_ClearBuffer();
	while(!connected){
		Debug_SendString("BS",false);
		singCounter = 750;
		while(singCounter > 0){
    8730:	e1 f6       	brne	.-72     	; 0x86ea <Uploader_connectToComputer+0x34>
	uint8_t  char1;
	uint8_t  char2;
	
	connected = false;
	Debug_ClearBuffer();
	while(!connected){
    8732:	80 91 62 2d 	lds	r24, 0x2D62
    8736:	88 23       	and	r24, r24
    8738:	89 f2       	breq	.-94     	; 0x86dc <Uploader_connectToComputer+0x26>
			}
			_delay_ms(1);
			singCounter--;
		}
	}
}
    873a:	df 91       	pop	r29
    873c:	cf 91       	pop	r28
    873e:	1f 91       	pop	r17
    8740:	0f 91       	pop	r16
    8742:	ff 90       	pop	r15
    8744:	ef 90       	pop	r14
    8746:	df 90       	pop	r13
    8748:	08 95       	ret

0000874a <Uploader_sendPort>:
    }
	Debug_SendByte(strlen(server)+2);
	Debug_SendString(server,true);
}

void Uploader_sendPort(void){
    874a:	0f 93       	push	r16
    874c:	1f 93       	push	r17
	Debug_SendByte('O');
    874e:	8f e4       	ldi	r24, 0x4F	; 79
    8750:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	if(port[strlen(port)-1] < 32){
    8754:	ec e5       	ldi	r30, 0x5C	; 92
    8756:	f1 e5       	ldi	r31, 0x51	; 81
    8758:	01 90       	ld	r0, Z+
    875a:	00 20       	and	r0, r0
    875c:	e9 f7       	brne	.-6      	; 0x8758 <Uploader_sendPort+0xe>
    875e:	32 97       	sbiw	r30, 0x02	; 2
    8760:	80 81       	ld	r24, Z
    8762:	80 32       	cpi	r24, 0x20	; 32
    8764:	08 f4       	brcc	.+2      	; 0x8768 <Uploader_sendPort+0x1e>
        port[strlen(port)-1] = 0;
    8766:	10 82       	st	Z, r1
    }
	Debug_SendByte(strlen(port)+2);
    8768:	0c e5       	ldi	r16, 0x5C	; 92
    876a:	11 e5       	ldi	r17, 0x51	; 81
    876c:	f8 01       	movw	r30, r16
    876e:	01 90       	ld	r0, Z+
    8770:	00 20       	and	r0, r0
    8772:	e9 f7       	brne	.-6      	; 0x876e <Uploader_sendPort+0x24>
    8774:	31 97       	sbiw	r30, 0x01	; 1
    8776:	e0 1b       	sub	r30, r16
    8778:	f1 0b       	sbc	r31, r17
    877a:	8e 2f       	mov	r24, r30
    877c:	8e 5f       	subi	r24, 0xFE	; 254
    877e:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	Debug_SendString(port,true);
    8782:	c8 01       	movw	r24, r16
    8784:	61 e0       	ldi	r22, 0x01	; 1
    8786:	0e 94 30 43 	call	0x8660	; 0x8660 <Debug_SendString>
}
    878a:	1f 91       	pop	r17
    878c:	0f 91       	pop	r16
    878e:	08 95       	ret

00008790 <Uploader_sendServer>:
            return false;
        }
    }
}

void Uploader_sendServer(void){
    8790:	0f 93       	push	r16
    8792:	1f 93       	push	r17
	Debug_SendByte('V');
    8794:	86 e5       	ldi	r24, 0x56	; 86
    8796:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	if(server[strlen(server)-1] < 32){
    879a:	e3 e7       	ldi	r30, 0x73	; 115
    879c:	f6 e4       	ldi	r31, 0x46	; 70
    879e:	01 90       	ld	r0, Z+
    87a0:	00 20       	and	r0, r0
    87a2:	e9 f7       	brne	.-6      	; 0x879e <Uploader_sendServer+0xe>
    87a4:	32 97       	sbiw	r30, 0x02	; 2
    87a6:	80 81       	ld	r24, Z
    87a8:	80 32       	cpi	r24, 0x20	; 32
    87aa:	08 f4       	brcc	.+2      	; 0x87ae <Uploader_sendServer+0x1e>
        server[strlen(server)-1] = 0;
    87ac:	10 82       	st	Z, r1
    }
	Debug_SendByte(strlen(server)+2);
    87ae:	03 e7       	ldi	r16, 0x73	; 115
    87b0:	16 e4       	ldi	r17, 0x46	; 70
    87b2:	f8 01       	movw	r30, r16
    87b4:	01 90       	ld	r0, Z+
    87b6:	00 20       	and	r0, r0
    87b8:	e9 f7       	brne	.-6      	; 0x87b4 <Uploader_sendServer+0x24>
    87ba:	31 97       	sbiw	r30, 0x01	; 1
    87bc:	e0 1b       	sub	r30, r16
    87be:	f1 0b       	sbc	r31, r17
    87c0:	8e 2f       	mov	r24, r30
    87c2:	8e 5f       	subi	r24, 0xFE	; 254
    87c4:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	Debug_SendString(server,true);
    87c8:	c8 01       	movw	r24, r16
    87ca:	61 e0       	ldi	r22, 0x01	; 1
    87cc:	0e 94 30 43 	call	0x8660	; 0x8660 <Debug_SendString>
}
    87d0:	1f 91       	pop	r17
    87d2:	0f 91       	pop	r16
    87d4:	08 95       	ret

000087d6 <Uploader_sendNickname>:
    }
	Debug_SendByte(strlen(user)+2);
	Debug_SendString(user,true);
}

void Uploader_sendNickname(void){
    87d6:	0f 93       	push	r16
    87d8:	1f 93       	push	r17
	Debug_SendByte('N');
    87da:	8e e4       	ldi	r24, 0x4E	; 78
    87dc:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	if(nickname[strlen(nickname)-1] < 32){
    87e0:	ee e8       	ldi	r30, 0x8E	; 142
    87e2:	f1 e5       	ldi	r31, 0x51	; 81
    87e4:	01 90       	ld	r0, Z+
    87e6:	00 20       	and	r0, r0
    87e8:	e9 f7       	brne	.-6      	; 0x87e4 <Uploader_sendNickname+0xe>
    87ea:	32 97       	sbiw	r30, 0x02	; 2
    87ec:	80 81       	ld	r24, Z
    87ee:	80 32       	cpi	r24, 0x20	; 32
    87f0:	08 f4       	brcc	.+2      	; 0x87f4 <Uploader_sendNickname+0x1e>
		nickname[strlen(nickname)-1] = 0;
    87f2:	10 82       	st	Z, r1
    }
	Debug_SendByte(strlen(nickname)+2);
    87f4:	0e e8       	ldi	r16, 0x8E	; 142
    87f6:	11 e5       	ldi	r17, 0x51	; 81
    87f8:	f8 01       	movw	r30, r16
    87fa:	01 90       	ld	r0, Z+
    87fc:	00 20       	and	r0, r0
    87fe:	e9 f7       	brne	.-6      	; 0x87fa <Uploader_sendNickname+0x24>
    8800:	31 97       	sbiw	r30, 0x01	; 1
    8802:	e0 1b       	sub	r30, r16
    8804:	f1 0b       	sbc	r31, r17
    8806:	8e 2f       	mov	r24, r30
    8808:	8e 5f       	subi	r24, 0xFE	; 254
    880a:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	Debug_SendString(nickname,true);
    880e:	c8 01       	movw	r24, r16
    8810:	61 e0       	ldi	r22, 0x01	; 1
    8812:	0e 94 30 43 	call	0x8660	; 0x8660 <Debug_SendString>
}
    8816:	1f 91       	pop	r17
    8818:	0f 91       	pop	r16
    881a:	08 95       	ret

0000881c <Uploader_sendUser>:
		Debug_SendByte(0);
		Debug_SendString("",true);
	}
}

void Uploader_sendUser(void){
    881c:	0f 93       	push	r16
    881e:	1f 93       	push	r17
	Debug_SendByte('U');
    8820:	85 e5       	ldi	r24, 0x55	; 85
    8822:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	if(user[strlen(user)-1] < 32){
    8826:	ef e5       	ldi	r30, 0x5F	; 95
    8828:	f6 e4       	ldi	r31, 0x46	; 70
    882a:	01 90       	ld	r0, Z+
    882c:	00 20       	and	r0, r0
    882e:	e9 f7       	brne	.-6      	; 0x882a <Uploader_sendUser+0xe>
    8830:	32 97       	sbiw	r30, 0x02	; 2
    8832:	80 81       	ld	r24, Z
    8834:	80 32       	cpi	r24, 0x20	; 32
    8836:	08 f4       	brcc	.+2      	; 0x883a <Uploader_sendUser+0x1e>
        user[strlen(user)-1] = 0;
    8838:	10 82       	st	Z, r1
    }
	Debug_SendByte(strlen(user)+2);
    883a:	0f e5       	ldi	r16, 0x5F	; 95
    883c:	16 e4       	ldi	r17, 0x46	; 70
    883e:	f8 01       	movw	r30, r16
    8840:	01 90       	ld	r0, Z+
    8842:	00 20       	and	r0, r0
    8844:	e9 f7       	brne	.-6      	; 0x8840 <Uploader_sendUser+0x24>
    8846:	31 97       	sbiw	r30, 0x01	; 1
    8848:	e0 1b       	sub	r30, r16
    884a:	f1 0b       	sbc	r31, r17
    884c:	8e 2f       	mov	r24, r30
    884e:	8e 5f       	subi	r24, 0xFE	; 254
    8850:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
	Debug_SendString(user,true);
    8854:	c8 01       	movw	r24, r16
    8856:	61 e0       	ldi	r22, 0x01	; 1
    8858:	0e 94 30 43 	call	0x8660	; 0x8660 <Debug_SendString>
}
    885c:	1f 91       	pop	r17
    885e:	0f 91       	pop	r16
    8860:	08 95       	ret

00008862 <Uploader_sendKey>:
		Debug_SendByte(0);
		Debug_SendString("",true);
	}
}

void Uploader_sendKey(void){
    8862:	0f 93       	push	r16
    8864:	1f 93       	push	r17
	if(phraseRead){
    8866:	80 91 25 2d 	lds	r24, 0x2D25
    886a:	88 23       	and	r24, r24
    886c:	81 f0       	breq	.+32     	; 0x888e <Uploader_sendKey+0x2c>
		if(phrase[strlen(phrase)-1] < 32){
    886e:	e5 e2       	ldi	r30, 0x25	; 37
    8870:	f7 e4       	ldi	r31, 0x47	; 71
    8872:	01 90       	ld	r0, Z+
    8874:	00 20       	and	r0, r0
    8876:	e9 f7       	brne	.-6      	; 0x8872 <Uploader_sendKey+0x10>
    8878:	32 97       	sbiw	r30, 0x02	; 2
    887a:	80 81       	ld	r24, Z
    887c:	80 32       	cpi	r24, 0x20	; 32
    887e:	08 f4       	brcc	.+2      	; 0x8882 <Uploader_sendKey+0x20>
			phrase[strlen(phrase)-1] = 0;
    8880:	10 82       	st	Z, r1
		}
		Debug_SendByte('K');
    8882:	8b e4       	ldi	r24, 0x4B	; 75
    8884:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendByte(strlen(phrase)+2);
    8888:	05 e2       	ldi	r16, 0x25	; 37
    888a:	17 e4       	ldi	r17, 0x47	; 71
    888c:	13 c0       	rjmp	.+38     	; 0x88b4 <Uploader_sendKey+0x52>
		Debug_SendString(phrase,true);
	} else if(keyRead){
    888e:	80 91 26 2d 	lds	r24, 0x2D26
    8892:	88 23       	and	r24, r24
    8894:	e1 f0       	breq	.+56     	; 0x88ce <Uploader_sendKey+0x6c>
		if(key[strlen(key)-1] < 32){
    8896:	e4 ec       	ldi	r30, 0xC4	; 196
    8898:	f7 e4       	ldi	r31, 0x47	; 71
    889a:	01 90       	ld	r0, Z+
    889c:	00 20       	and	r0, r0
    889e:	e9 f7       	brne	.-6      	; 0x889a <Uploader_sendKey+0x38>
    88a0:	32 97       	sbiw	r30, 0x02	; 2
    88a2:	80 81       	ld	r24, Z
    88a4:	80 32       	cpi	r24, 0x20	; 32
    88a6:	08 f4       	brcc	.+2      	; 0x88aa <Uploader_sendKey+0x48>
			key[strlen(key)-1] = 0;
    88a8:	10 82       	st	Z, r1
		}
		Debug_SendByte('K');
    88aa:	8b e4       	ldi	r24, 0x4B	; 75
    88ac:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendByte(strlen(key)+2);
    88b0:	04 ec       	ldi	r16, 0xC4	; 196
    88b2:	17 e4       	ldi	r17, 0x47	; 71
    88b4:	f8 01       	movw	r30, r16
    88b6:	01 90       	ld	r0, Z+
    88b8:	00 20       	and	r0, r0
    88ba:	e9 f7       	brne	.-6      	; 0x88b6 <Uploader_sendKey+0x54>
    88bc:	31 97       	sbiw	r30, 0x01	; 1
    88be:	e0 1b       	sub	r30, r16
    88c0:	f1 0b       	sbc	r31, r17
    88c2:	8e 2f       	mov	r24, r30
    88c4:	8e 5f       	subi	r24, 0xFE	; 254
    88c6:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendString(key,true);
    88ca:	c8 01       	movw	r24, r16
    88cc:	08 c0       	rjmp	.+16     	; 0x88de <Uploader_sendKey+0x7c>
	} else {
		Debug_SendByte('K');
    88ce:	8b e4       	ldi	r24, 0x4B	; 75
    88d0:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendByte(0);
    88d4:	80 e0       	ldi	r24, 0x00	; 0
    88d6:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendString("",true);
    88da:	85 e6       	ldi	r24, 0x65	; 101
    88dc:	92 e2       	ldi	r25, 0x22	; 34
    88de:	61 e0       	ldi	r22, 0x01	; 1
    88e0:	0e 94 30 43 	call	0x8660	; 0x8660 <Debug_SendString>
	}
}
    88e4:	1f 91       	pop	r17
    88e6:	0f 91       	pop	r16
    88e8:	08 95       	ret

000088ea <Uploader_sendAuthType>:
		Debug_SendByte(0);
		Debug_SendString("",true);
	}
}

void Uploader_sendAuthType(void){
    88ea:	0f 93       	push	r16
    88ec:	1f 93       	push	r17
	if(authRead){
    88ee:	80 91 24 2d 	lds	r24, 0x2D24
    88f2:	88 23       	and	r24, r24
    88f4:	e1 f0       	breq	.+56     	; 0x892e <Uploader_sendAuthType+0x44>
		if(auth[strlen(auth)-1] < 32){
    88f6:	ed e7       	ldi	r30, 0x7D	; 125
    88f8:	fd e3       	ldi	r31, 0x3D	; 61
    88fa:	01 90       	ld	r0, Z+
    88fc:	00 20       	and	r0, r0
    88fe:	e9 f7       	brne	.-6      	; 0x88fa <Uploader_sendAuthType+0x10>
    8900:	32 97       	sbiw	r30, 0x02	; 2
    8902:	80 81       	ld	r24, Z
    8904:	80 32       	cpi	r24, 0x20	; 32
    8906:	08 f4       	brcc	.+2      	; 0x890a <Uploader_sendAuthType+0x20>
			auth[strlen(auth)-1] = 0;
    8908:	10 82       	st	Z, r1
		}
		Debug_SendByte('A');
    890a:	81 e4       	ldi	r24, 0x41	; 65
    890c:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendByte(strlen(auth)+2);
    8910:	0d e7       	ldi	r16, 0x7D	; 125
    8912:	1d e3       	ldi	r17, 0x3D	; 61
    8914:	f8 01       	movw	r30, r16
    8916:	01 90       	ld	r0, Z+
    8918:	00 20       	and	r0, r0
    891a:	e9 f7       	brne	.-6      	; 0x8916 <Uploader_sendAuthType+0x2c>
    891c:	31 97       	sbiw	r30, 0x01	; 1
    891e:	e0 1b       	sub	r30, r16
    8920:	f1 0b       	sbc	r31, r17
    8922:	8e 2f       	mov	r24, r30
    8924:	8e 5f       	subi	r24, 0xFE	; 254
    8926:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendString(auth,true);
    892a:	c8 01       	movw	r24, r16
    892c:	08 c0       	rjmp	.+16     	; 0x893e <Uploader_sendAuthType+0x54>
	} else {
		Debug_SendByte('A');
    892e:	81 e4       	ldi	r24, 0x41	; 65
    8930:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendByte(0);
    8934:	80 e0       	ldi	r24, 0x00	; 0
    8936:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendString("",true);
    893a:	85 e6       	ldi	r24, 0x65	; 101
    893c:	92 e2       	ldi	r25, 0x22	; 34
    893e:	61 e0       	ldi	r22, 0x01	; 1
    8940:	0e 94 30 43 	call	0x8660	; 0x8660 <Debug_SendString>
	}
}
    8944:	1f 91       	pop	r17
    8946:	0f 91       	pop	r16
    8948:	08 95       	ret

0000894a <Uploader_sendSSID>:
        }
    }
}


void Uploader_sendSSID(void){
    894a:	0f 93       	push	r16
    894c:	1f 93       	push	r17
	if(ssidRead){
    894e:	80 91 27 2d 	lds	r24, 0x2D27
    8952:	88 23       	and	r24, r24
    8954:	e1 f0       	breq	.+56     	; 0x898e <Uploader_sendSSID+0x44>
		if(ssid[strlen(ssid)-1] < 32){
    8956:	e3 ef       	ldi	r30, 0xF3	; 243
    8958:	f1 e3       	ldi	r31, 0x31	; 49
    895a:	01 90       	ld	r0, Z+
    895c:	00 20       	and	r0, r0
    895e:	e9 f7       	brne	.-6      	; 0x895a <Uploader_sendSSID+0x10>
    8960:	32 97       	sbiw	r30, 0x02	; 2
    8962:	80 81       	ld	r24, Z
    8964:	80 32       	cpi	r24, 0x20	; 32
    8966:	08 f4       	brcc	.+2      	; 0x896a <Uploader_sendSSID+0x20>
			ssid[strlen(ssid)-1] = 0;
    8968:	10 82       	st	Z, r1
		}
		Debug_SendByte('S');
    896a:	83 e5       	ldi	r24, 0x53	; 83
    896c:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendByte(strlen(ssid)+2);
    8970:	03 ef       	ldi	r16, 0xF3	; 243
    8972:	11 e3       	ldi	r17, 0x31	; 49
    8974:	f8 01       	movw	r30, r16
    8976:	01 90       	ld	r0, Z+
    8978:	00 20       	and	r0, r0
    897a:	e9 f7       	brne	.-6      	; 0x8976 <Uploader_sendSSID+0x2c>
    897c:	31 97       	sbiw	r30, 0x01	; 1
    897e:	e0 1b       	sub	r30, r16
    8980:	f1 0b       	sbc	r31, r17
    8982:	8e 2f       	mov	r24, r30
    8984:	8e 5f       	subi	r24, 0xFE	; 254
    8986:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendString(ssid,true);
    898a:	c8 01       	movw	r24, r16
    898c:	08 c0       	rjmp	.+16     	; 0x899e <Uploader_sendSSID+0x54>
	} else {
		Debug_SendByte('S');
    898e:	83 e5       	ldi	r24, 0x53	; 83
    8990:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendByte(0);
    8994:	80 e0       	ldi	r24, 0x00	; 0
    8996:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
		Debug_SendString("",true);
    899a:	85 e6       	ldi	r24, 0x65	; 101
    899c:	92 e2       	ldi	r25, 0x22	; 34
    899e:	61 e0       	ldi	r22, 0x01	; 1
    89a0:	0e 94 30 43 	call	0x8660	; 0x8660 <Debug_SendString>
	}
}
    89a4:	1f 91       	pop	r17
    89a6:	0f 91       	pop	r16
    89a8:	08 95       	ret

000089aa <Uploader_sendFilename>:
    }
	Debug_SendByte(strlen(nickname)+2);
	Debug_SendString(nickname,true);
}

void Uploader_sendFilename(void){
    89aa:	1f 93       	push	r17
    Debug_SendByte('F');
    89ac:	86 e4       	ldi	r24, 0x46	; 70
    89ae:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    okToOpenDirectory = true;
    89b2:	81 e0       	ldi	r24, 0x01	; 1
    89b4:	80 93 64 2d 	sts	0x2D64, r24
    while(okToOpenDirectory);
    89b8:	80 91 64 2d 	lds	r24, 0x2D64
    89bc:	88 23       	and	r24, r24
    89be:	e1 f7       	brne	.-8      	; 0x89b8 <Uploader_sendFilename+0xe>
	
    while(true){
        okToGrabNextFileName = true;
    89c0:	11 e0       	ldi	r17, 0x01	; 1
    89c2:	10 93 65 2d 	sts	0x2D65, r17
        while(okToGrabNextFileName);
    89c6:	80 91 65 2d 	lds	r24, 0x2D65
    89ca:	88 23       	and	r24, r24
    89cc:	e1 f7       	brne	.-8      	; 0x89c6 <Uploader_sendFilename+0x1c>
        if(availableFileName[0] == 0){
    89ce:	80 91 ad 50 	lds	r24, 0x50AD
    89d2:	88 23       	and	r24, r24
    89d4:	39 f4       	brne	.+14     	; 0x89e4 <Uploader_sendFilename+0x3a>
            Debug_SendString("",true);
    89d6:	85 e6       	ldi	r24, 0x65	; 101
    89d8:	92 e2       	ldi	r25, 0x22	; 34
    89da:	61 e0       	ldi	r22, 0x01	; 1
    89dc:	0e 94 30 43 	call	0x8660	; 0x8660 <Debug_SendString>
					}
				}
			}
        }
    }
}
    89e0:	1f 91       	pop	r17
    89e2:	08 95       	ret
        while(okToGrabNextFileName);
        if(availableFileName[0] == 0){
            Debug_SendString("",true);
            return;
        } else {
            if(recording){
    89e4:	80 91 e3 2c 	lds	r24, 0x2CE3
    89e8:	88 23       	and	r24, r24
    89ea:	b9 f0       	breq	.+46     	; 0x8a1a <Uploader_sendFilename+0x70>
				if((strcasecmp(currentLogFile,fno.fname)) != 0){		// file is NOT the current file
    89ec:	8a e3       	ldi	r24, 0x3A	; 58
    89ee:	96 e3       	ldi	r25, 0x36	; 54
    89f0:	6a e5       	ldi	r22, 0x5A	; 90
    89f2:	7d e3       	ldi	r23, 0x3D	; 61
    89f4:	0e 94 3a 4f 	call	0x9e74	; 0x9e74 <strcasecmp>
    89f8:	89 2b       	or	r24, r25
    89fa:	19 f3       	breq	.-58     	; 0x89c2 <Uploader_sendFilename+0x18>
			    	if(strcasestr(fno.fname,".BT") != NULL){						// file has .bt extension
    89fc:	8a e5       	ldi	r24, 0x5A	; 90
    89fe:	9d e3       	ldi	r25, 0x3D	; 61
    8a00:	66 e6       	ldi	r22, 0x66	; 102
    8a02:	72 e2       	ldi	r23, 0x22	; 34
    8a04:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <strcasestr>
    8a08:	89 2b       	or	r24, r25
    8a0a:	d9 f2       	breq	.-74     	; 0x89c2 <Uploader_sendFilename+0x18>
				    	if(strcasestr(fno.fname,".BTU") == NULL){
    8a0c:	8a e5       	ldi	r24, 0x5A	; 90
    8a0e:	9d e3       	ldi	r25, 0x3D	; 61
    8a10:	6a e6       	ldi	r22, 0x6A	; 106
    8a12:	72 e2       	ldi	r23, 0x22	; 34
    8a14:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <strcasestr>
    8a18:	0e c0       	rjmp	.+28     	; 0x8a36 <Uploader_sendFilename+0x8c>
						    Debug_SendByte(',');
						}
					}
				}
			} else {
				if(strcasestr(fno.fname,".BT") != NULL){						// file has .bt extension
    8a1a:	8a e5       	ldi	r24, 0x5A	; 90
    8a1c:	9d e3       	ldi	r25, 0x3D	; 61
    8a1e:	66 e6       	ldi	r22, 0x66	; 102
    8a20:	72 e2       	ldi	r23, 0x22	; 34
    8a22:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <strcasestr>
    8a26:	89 2b       	or	r24, r25
    8a28:	61 f2       	breq	.-104    	; 0x89c2 <Uploader_sendFilename+0x18>
					if(strcasestr(fno.fname,".BTU") == NULL){
    8a2a:	8a e5       	ldi	r24, 0x5A	; 90
    8a2c:	9d e3       	ldi	r25, 0x3D	; 61
    8a2e:	6a e6       	ldi	r22, 0x6A	; 106
    8a30:	72 e2       	ldi	r23, 0x22	; 34
    8a32:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <strcasestr>
    8a36:	89 2b       	or	r24, r25
    8a38:	21 f6       	brne	.-120    	; 0x89c2 <Uploader_sendFilename+0x18>
						strcpy(availableFileName,fno.fname);
    8a3a:	8d ea       	ldi	r24, 0xAD	; 173
    8a3c:	90 e5       	ldi	r25, 0x50	; 80
    8a3e:	6a e5       	ldi	r22, 0x5A	; 90
    8a40:	7d e3       	ldi	r23, 0x3D	; 61
    8a42:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <strcpy>
						Debug_SendString(availableFileName,false);
    8a46:	8d ea       	ldi	r24, 0xAD	; 173
    8a48:	90 e5       	ldi	r25, 0x50	; 80
    8a4a:	60 e0       	ldi	r22, 0x00	; 0
    8a4c:	0e 94 30 43 	call	0x8660	; 0x8660 <Debug_SendString>
						Debug_SendByte(',');
    8a50:	8c e2       	ldi	r24, 0x2C	; 44
    8a52:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    8a56:	b5 cf       	rjmp	.-150    	; 0x89c2 <Uploader_sendFilename+0x18>

00008a58 <Uploader_Update>:
volatile bool fileExists				= false;
volatile bool timeIsValid				= false;


bool Uploader_Update(void){
	if(Debug_CharReadyToRead()){
    8a58:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
    8a5c:	88 23       	and	r24, r24
    8a5e:	09 f4       	brne	.+2      	; 0x8a62 <Uploader_Update+0xa>
    8a60:	6e c0       	rjmp	.+220    	; 0x8b3e <Uploader_Update+0xe6>
		
		timeOutCounter = 0;
    8a62:	10 92 53 2d 	sts	0x2D53, r1
    8a66:	10 92 54 2d 	sts	0x2D54, r1
		command[0] = Debug_GetByte(false);
    8a6a:	80 e0       	ldi	r24, 0x00	; 0
    8a6c:	0e 94 ef 01 	call	0x3de	; 0x3de <Debug_GetByte>
    8a70:	80 93 63 3e 	sts	0x3E63, r24
		
		if(command[0] == 'T'){                          // supply the time
    8a74:	84 35       	cpi	r24, 0x54	; 84
    8a76:	29 f5       	brne	.+74     	; 0x8ac2 <Uploader_Update+0x6a>
			if(Uploader_getTime()){
    8a78:	0e 94 94 36 	call	0x6d28	; 0x6d28 <Uploader_getTime>
    8a7c:	88 23       	and	r24, r24
    8a7e:	f1 f0       	breq	.+60     	; 0x8abc <Uploader_Update+0x64>
				timeIsValid = true;
    8a80:	81 e0       	ldi	r24, 0x01	; 1
    8a82:	80 93 6f 2d 	sts	0x2D6F, r24
	return true;
}

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
    8a86:	80 91 21 04 	lds	r24, 0x0421
    8a8a:	80 61       	ori	r24, 0x10	; 16
    8a8c:	e0 e2       	ldi	r30, 0x20	; 32
    8a8e:	f4 e0       	ldi	r31, 0x04	; 4
    8a90:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
    8a92:	80 91 21 04 	lds	r24, 0x0421
    8a96:	84 fd       	sbrc	r24, 4
    8a98:	fc cf       	rjmp	.-8      	; 0x8a92 <Uploader_Update+0x3a>
	return RTC32.CNT;
    8a9a:	80 91 24 04 	lds	r24, 0x0424
    8a9e:	90 91 25 04 	lds	r25, 0x0425
    8aa2:	a0 91 26 04 	lds	r26, 0x0426
    8aa6:	b0 91 27 04 	lds	r27, 0x0427
				UNIX_Time = Time_Get();
    8aaa:	80 93 1a 2d 	sts	0x2D1A, r24
    8aae:	90 93 1b 2d 	sts	0x2D1B, r25
    8ab2:	a0 93 1c 2d 	sts	0x2D1C, r26
    8ab6:	b0 93 1d 2d 	sts	0x2D1D, r27
    8aba:	41 c0       	rjmp	.+130    	; 0x8b3e <Uploader_Update+0xe6>
			} else {
				timeIsValid = false;
    8abc:	10 92 6f 2d 	sts	0x2D6F, r1
    8ac0:	55 c0       	rjmp	.+170    	; 0x8b6c <Uploader_Update+0x114>
				return false;
			}
		} else if(command[0] == 'S'){                          // request SSID
    8ac2:	83 35       	cpi	r24, 0x53	; 83
    8ac4:	19 f4       	brne	.+6      	; 0x8acc <Uploader_Update+0x74>
			Uploader_sendSSID();
    8ac6:	0e 94 a5 44 	call	0x894a	; 0x894a <Uploader_sendSSID>
    8aca:	39 c0       	rjmp	.+114    	; 0x8b3e <Uploader_Update+0xe6>
		} else if(command[0] == 'A'){                          // request authorization type
    8acc:	81 34       	cpi	r24, 0x41	; 65
    8ace:	19 f4       	brne	.+6      	; 0x8ad6 <Uploader_Update+0x7e>
			Uploader_sendAuthType();
    8ad0:	0e 94 75 44 	call	0x88ea	; 0x88ea <Uploader_sendAuthType>
    8ad4:	34 c0       	rjmp	.+104    	; 0x8b3e <Uploader_Update+0xe6>
		} else if(command[0] == 'K'){                          // request authorisation key
    8ad6:	8b 34       	cpi	r24, 0x4B	; 75
    8ad8:	19 f4       	brne	.+6      	; 0x8ae0 <Uploader_Update+0x88>
			Uploader_sendKey();
    8ada:	0e 94 31 44 	call	0x8862	; 0x8862 <Uploader_sendKey>
    8ade:	2f c0       	rjmp	.+94     	; 0x8b3e <Uploader_Update+0xe6>
		} else if(command[0] == 'U'){                          // request user
    8ae0:	85 35       	cpi	r24, 0x55	; 85
    8ae2:	19 f4       	brne	.+6      	; 0x8aea <Uploader_Update+0x92>
			Uploader_sendUser();
    8ae4:	0e 94 0e 44 	call	0x881c	; 0x881c <Uploader_sendUser>
    8ae8:	2a c0       	rjmp	.+84     	; 0x8b3e <Uploader_Update+0xe6>
		} else if(command[0] == 'N'){                           // request nickname
    8aea:	8e 34       	cpi	r24, 0x4E	; 78
    8aec:	19 f4       	brne	.+6      	; 0x8af4 <Uploader_Update+0x9c>
			Uploader_sendNickname();
    8aee:	0e 94 eb 43 	call	0x87d6	; 0x87d6 <Uploader_sendNickname>
    8af2:	25 c0       	rjmp	.+74     	; 0x8b3e <Uploader_Update+0xe6>
		} else if(command[0] == 'F'){                           // request filename
    8af4:	86 34       	cpi	r24, 0x46	; 70
    8af6:	19 f4       	brne	.+6      	; 0x8afe <Uploader_Update+0xa6>
			Uploader_sendFilename();
    8af8:	0e 94 d5 44 	call	0x89aa	; 0x89aa <Uploader_sendFilename>
    8afc:	20 c0       	rjmp	.+64     	; 0x8b3e <Uploader_Update+0xe6>
		} else if(command[0] == 'D'){                           // request data from file
    8afe:	84 34       	cpi	r24, 0x44	; 68
    8b00:	19 f4       	brne	.+6      	; 0x8b08 <Uploader_Update+0xb0>
			if(!Uploader_uploadFile()){
    8b02:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <Uploader_uploadFile>
    8b06:	04 c0       	rjmp	.+8      	; 0x8b10 <Uploader_Update+0xb8>
				return false;
			}
		} else if(command[0] == 'E'){                   // erase file
    8b08:	85 34       	cpi	r24, 0x45	; 69
    8b0a:	29 f4       	brne	.+10     	; 0x8b16 <Uploader_Update+0xbe>
			if(!Uploader_eraseFile()){
    8b0c:	0e 94 e4 36 	call	0x6dc8	; 0x6dc8 <Uploader_eraseFile>
    8b10:	88 23       	and	r24, r24
    8b12:	a9 f4       	brne	.+42     	; 0x8b3e <Uploader_Update+0xe6>
    8b14:	2b c0       	rjmp	.+86     	; 0x8b6c <Uploader_Update+0x114>
				return false;
			}
		} else if(command[0] == 'V'){                   // request server for post
    8b16:	86 35       	cpi	r24, 0x56	; 86
    8b18:	19 f4       	brne	.+6      	; 0x8b20 <Uploader_Update+0xc8>
			Uploader_sendServer();
    8b1a:	0e 94 c8 43 	call	0x8790	; 0x8790 <Uploader_sendServer>
    8b1e:	0f c0       	rjmp	.+30     	; 0x8b3e <Uploader_Update+0xe6>
		} else if(command[0] == 'O'){                   // request port for post
    8b20:	8f 34       	cpi	r24, 0x4F	; 79
    8b22:	19 f4       	brne	.+6      	; 0x8b2a <Uploader_Update+0xd2>
			Uploader_sendPort();
    8b24:	0e 94 a5 43 	call	0x874a	; 0x874a <Uploader_sendPort>
    8b28:	0a c0       	rjmp	.+20     	; 0x8b3e <Uploader_Update+0xe6>
		}  else if(command[0] == 'R'){                   // reset
    8b2a:	82 35       	cpi	r24, 0x52	; 82
    8b2c:	41 f4       	brne	.+16     	; 0x8b3e <Uploader_Update+0xe6>
    8b2e:	80 e0       	ldi	r24, 0x00	; 0
    8b30:	98 e4       	ldi	r25, 0x48	; 72
    8b32:	01 97       	sbiw	r24, 0x01	; 1
    8b34:	f1 f7       	brne	.-4      	; 0x8b32 <Uploader_Update+0xda>
			_delay_ms(5);
			Debug_SendByte('R');
    8b36:	82 e5       	ldi	r24, 0x52	; 82
    8b38:	0e 94 12 02 	call	0x424	; 0x424 <Debug_SendByte>
    8b3c:	17 c0       	rjmp	.+46     	; 0x8b6c <Uploader_Update+0x114>
    8b3e:	86 e6       	ldi	r24, 0x66	; 102
    8b40:	9e e0       	ldi	r25, 0x0E	; 14
    8b42:	01 97       	sbiw	r24, 0x01	; 1
    8b44:	f1 f7       	brne	.-4      	; 0x8b42 <Uploader_Update+0xea>
			return false;
		}
	}
	_delay_ms(1);
	timeOutCounter++;
    8b46:	80 91 53 2d 	lds	r24, 0x2D53
    8b4a:	90 91 54 2d 	lds	r25, 0x2D54
    8b4e:	01 96       	adiw	r24, 0x01	; 1
    8b50:	80 93 53 2d 	sts	0x2D53, r24
    8b54:	90 93 54 2d 	sts	0x2D54, r25
	if(timeOutCounter > 30000){
    8b58:	80 91 53 2d 	lds	r24, 0x2D53
    8b5c:	90 91 54 2d 	lds	r25, 0x2D54
    8b60:	20 e0       	ldi	r18, 0x00	; 0
    8b62:	81 53       	subi	r24, 0x31	; 49
    8b64:	95 47       	sbci	r25, 0x75	; 117
    8b66:	18 f4       	brcc	.+6      	; 0x8b6e <Uploader_Update+0x116>
    8b68:	21 e0       	ldi	r18, 0x01	; 1
    8b6a:	01 c0       	rjmp	.+2      	; 0x8b6e <Uploader_Update+0x116>
    8b6c:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}
	return true;
}
    8b6e:	82 2f       	mov	r24, r18
    8b70:	08 95       	ret

00008b72 <SD_MakeFileName>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
}

void SD_MakeFileName(uint32_t var){
    8b72:	0f 93       	push	r16
    8b74:	1f 93       	push	r17
	fileName[0] = '/';
    8b76:	09 e6       	ldi	r16, 0x69	; 105
    8b78:	1d e3       	ldi	r17, 0x3D	; 61
    8b7a:	2f e2       	ldi	r18, 0x2F	; 47
    8b7c:	20 93 69 3d 	sts	0x3D69, r18
	ltoa(var, fileName+1, 16);
    8b80:	a8 01       	movw	r20, r16
    8b82:	4f 5f       	subi	r20, 0xFF	; 255
    8b84:	5f 4f       	sbci	r21, 0xFF	; 255
    8b86:	20 e1       	ldi	r18, 0x10	; 16
    8b88:	30 e0       	ldi	r19, 0x00	; 0
    8b8a:	0e 94 d8 4f 	call	0x9fb0	; 0x9fb0 <ltoa>
	strcat(fileName, ".bt");
    8b8e:	c8 01       	movw	r24, r16
    8b90:	6f e6       	ldi	r22, 0x6F	; 111
    8b92:	72 e2       	ldi	r23, 0x22	; 34
    8b94:	0e 94 72 4f 	call	0x9ee4	; 0x9ee4 <strcat>
}
    8b98:	1f 91       	pop	r17
    8b9a:	0f 91       	pop	r16
    8b9c:	08 95       	ret

00008b9e <SD_Open>:
	f_mount(1, &fso1);
	return tmp;
}


uint8_t SD_Open(char string []){
    8b9e:	cf 93       	push	r28
    8ba0:	df 93       	push	r29
    8ba2:	ec 01       	movw	r28, r24
	strcpy(currentLogFile,string);
    8ba4:	8a e3       	ldi	r24, 0x3A	; 58
    8ba6:	96 e3       	ldi	r25, 0x36	; 54
    8ba8:	be 01       	movw	r22, r28
    8baa:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <strcpy>
	strupr(currentLogFile);
    8bae:	8a e3       	ldi	r24, 0x3A	; 58
    8bb0:	96 e3       	ldi	r25, 0x36	; 54
    8bb2:	0e 94 ce 4f 	call	0x9f9c	; 0x9f9c <strupr>
    8bb6:	21 e0       	ldi	r18, 0x01	; 1
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    8bb8:	aa e3       	ldi	r26, 0x3A	; 58
    8bba:	b6 e3       	ldi	r27, 0x36	; 54
    8bbc:	07 c0       	rjmp	.+14     	; 0x8bcc <SD_Open+0x2e>
		currentLogFile[i-1] = currentLogFile[i];
    8bbe:	fc 01       	movw	r30, r24
    8bc0:	e6 5c       	subi	r30, 0xC6	; 198
    8bc2:	f9 4c       	sbci	r31, 0xC9	; 201
    8bc4:	80 81       	ld	r24, Z
    8bc6:	31 97       	sbiw	r30, 0x01	; 1
    8bc8:	80 83       	st	Z, r24


uint8_t SD_Open(char string []){
	strcpy(currentLogFile,string);
	strupr(currentLogFile);
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    8bca:	2f 5f       	subi	r18, 0xFF	; 255
    8bcc:	fd 01       	movw	r30, r26
    8bce:	01 90       	ld	r0, Z+
    8bd0:	00 20       	and	r0, r0
    8bd2:	e9 f7       	brne	.-6      	; 0x8bce <SD_Open+0x30>
    8bd4:	31 97       	sbiw	r30, 0x01	; 1
    8bd6:	ea 53       	subi	r30, 0x3A	; 58
    8bd8:	f6 43       	sbci	r31, 0x36	; 54
    8bda:	82 2f       	mov	r24, r18
    8bdc:	90 e0       	ldi	r25, 0x00	; 0
    8bde:	8e 17       	cp	r24, r30
    8be0:	9f 07       	cpc	r25, r31
    8be2:	68 f3       	brcs	.-38     	; 0x8bbe <SD_Open+0x20>
		currentLogFile[i-1] = currentLogFile[i];
	}
	currentLogFile[strlen(currentLogFile) - 1] = 0;
    8be4:	e7 5c       	subi	r30, 0xC7	; 199
    8be6:	f9 4c       	sbci	r31, 0xC9	; 201
    8be8:	10 82       	st	Z, r1

	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    8bea:	86 ef       	ldi	r24, 0xF6	; 246
    8bec:	97 e4       	ldi	r25, 0x47	; 71
    8bee:	be 01       	movw	r22, r28
    8bf0:	43 e1       	ldi	r20, 0x13	; 19
    8bf2:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <f_open>
}
    8bf6:	df 91       	pop	r29
    8bf8:	cf 91       	pop	r28
    8bfa:	08 95       	ret

00008bfc <SD_StartLogFile>:
        okToEraseFile = false;
	    goto sdInterrupt;
	}
}

uint8_t SD_StartLogFile(uint32_t time){
    8bfc:	1f 93       	push	r17
	uint8_t resp;
	
	SD_MakeFileName(time);
    8bfe:	0e 94 b9 45 	call	0x8b72	; 0x8b72 <SD_MakeFileName>
	resp = SD_Open(fileName);
    8c02:	89 e6       	ldi	r24, 0x69	; 105
    8c04:	9d e3       	ldi	r25, 0x3D	; 61
    8c06:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <SD_Open>
    8c0a:	18 2f       	mov	r17, r24
	if(resp != FR_OK){
    8c0c:	88 23       	and	r24, r24
    8c0e:	09 f0       	breq	.+2      	; 0x8c12 <SD_StartLogFile+0x16>
    8c10:	bc c0       	rjmp	.+376    	; 0x8d8a <SD_StartLogFile+0x18e>
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    8c12:	8f ef       	ldi	r24, 0xFF	; 255
    8c14:	9f ef       	ldi	r25, 0xFF	; 255
    8c16:	af ef       	ldi	r26, 0xFF	; 255
    8c18:	bf ef       	ldi	r27, 0xFF	; 255
    8c1a:	80 93 77 4c 	sts	0x4C77, r24
    8c1e:	90 93 78 4c 	sts	0x4C78, r25
    8c22:	a0 93 79 4c 	sts	0x4C79, r26
    8c26:	b0 93 7a 4c 	sts	0x4C7A, r27
	    return resp;
	}
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);               // magic number
    8c2a:	6c e4       	ldi	r22, 0x4C	; 76
    8c2c:	74 e7       	ldi	r23, 0x74	; 116
    8c2e:	8e ed       	ldi	r24, 0xDE	; 222
    8c30:	90 eb       	ldi	r25, 0xB0	; 176
    8c32:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(StartFileLength);		    // record size
    8c36:	67 e4       	ldi	r22, 0x47	; 71
    8c38:	73 e0       	ldi	r23, 0x03	; 3
    8c3a:	80 e0       	ldi	r24, 0x00	; 0
    8c3c:	90 e0       	ldi	r25, 0x00	; 0
    8c3e:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write16(RTYPE_START_OF_FILE); 		// record type
    8c42:	81 e0       	ldi	r24, 0x01	; 1
    8c44:	90 e0       	ldi	r25, 0x00	; 0
    8c46:	0e 94 27 2c 	call	0x584e	; 0x584e <SD_Write16>
	
	// payload
	SD_Write16(0x0100);						// protocol version
    8c4a:	80 e0       	ldi	r24, 0x00	; 0
    8c4c:	91 e0       	ldi	r25, 0x01	; 1
    8c4e:	0e 94 27 2c 	call	0x584e	; 0x584e <SD_Write16>
	SD_Write8(0x02);						// time protocol
    8c52:	82 e0       	ldi	r24, 0x02	; 2
    8c54:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_Write32(Time_Get32BitTimer());		// time
    8c58:	0e 94 b0 02 	call	0x560	; 0x560 <Time_Get32BitTimer>
    8c5c:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write32(542535);						// picoseconds per tick (48bit) (truly is 542534.722)
    8c60:	67 e4       	ldi	r22, 0x47	; 71
    8c62:	77 e4       	ldi	r23, 0x47	; 71
    8c64:	88 e0       	ldi	r24, 0x08	; 8
    8c66:	90 e0       	ldi	r25, 0x00	; 0
    8c68:	0e 94 0d 2c 	call	0x581a	; 0x581a <SD_Write32>
	SD_Write16(0);
    8c6c:	80 e0       	ldi	r24, 0x00	; 0
    8c6e:	90 e0       	ldi	r25, 0x00	; 0
    8c70:	0e 94 27 2c 	call	0x584e	; 0x584e <SD_Write16>
	
	SD_WriteString("device_class");
    8c74:	83 e7       	ldi	r24, 0x73	; 115
    8c76:	92 e2       	ldi	r25, 0x22	; 34
    8c78:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    8c7c:	89 e0       	ldi	r24, 0x09	; 9
    8c7e:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString(DeviceClass);
    8c82:	80 e8       	ldi	r24, 0x80	; 128
    8c84:	92 e2       	ldi	r25, 0x22	; 34
    8c86:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    8c8a:	8a e0       	ldi	r24, 0x0A	; 10
    8c8c:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	
	SD_WriteString("device_id");
    8c90:	8c e8       	ldi	r24, 0x8C	; 140
    8c92:	92 e2       	ldi	r25, 0x22	; 34
    8c94:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    8c98:	89 e0       	ldi	r24, 0x09	; 9
    8c9a:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString(deviceID);
    8c9e:	86 ea       	ldi	r24, 0xA6	; 166
    8ca0:	96 e4       	ldi	r25, 0x46	; 70
    8ca2:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    8ca6:	8a e0       	ldi	r24, 0x0A	; 10
    8ca8:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	
	SD_WriteString("firmware_version");
    8cac:	86 e9       	ldi	r24, 0x96	; 150
    8cae:	92 e2       	ldi	r25, 0x22	; 34
    8cb0:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    8cb4:	89 e0       	ldi	r24, 0x09	; 9
    8cb6:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString(FirmwareVersion);
    8cba:	8e e8       	ldi	r24, 0x8E	; 142
    8cbc:	91 e2       	ldi	r25, 0x21	; 33
    8cbe:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    8cc2:	8a e0       	ldi	r24, 0x0A	; 10
    8cc4:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	
	SD_WriteString("hardware_version");
    8cc8:	87 ea       	ldi	r24, 0xA7	; 167
    8cca:	92 e2       	ldi	r25, 0x22	; 34
    8ccc:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    8cd0:	89 e0       	ldi	r24, 0x09	; 9
    8cd2:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString(HardwareVersion);
    8cd6:	8f e7       	ldi	r24, 0x7F	; 127
    8cd8:	91 e2       	ldi	r25, 0x21	; 33
    8cda:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    8cde:	8a e0       	ldi	r24, 0x0A	; 10
    8ce0:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	
	SD_WriteString("channel_specs");
    8ce4:	88 eb       	ldi	r24, 0xB8	; 184
    8ce6:	92 e2       	ldi	r25, 0x22	; 34
    8ce8:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x09);
    8cec:	89 e0       	ldi	r24, 0x09	; 9
    8cee:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	SD_WriteString("{\"Temperature\":{\"units\": \"deg C\", \"scale\": 0.1},");
    8cf2:	86 ec       	ldi	r24, 0xC6	; 198
    8cf4:	92 e2       	ldi	r25, 0x22	; 34
    8cf6:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_WriteString("\"Humidity\":{\"units\": \"%RH\", \"scale\": 0.1},");
    8cfa:	87 ef       	ldi	r24, 0xF7	; 247
    8cfc:	92 e2       	ldi	r25, 0x22	; 34
    8cfe:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_WriteString("\"Pressure\":{\"units\": \"kPa\", \"scale\": 0.1},");
    8d02:	82 e2       	ldi	r24, 0x22	; 34
    8d04:	93 e2       	ldi	r25, 0x23	; 35
    8d06:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_WriteString("\"Light_Green\":{\"units\": \"bits\", \"scale\": 1},");				// 44
    8d0a:	8d e4       	ldi	r24, 0x4D	; 77
    8d0c:	93 e2       	ldi	r25, 0x23	; 35
    8d0e:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_WriteString("\"Light_Red\":{\"units\": \"bits\", \"scale\": 1},");				// 42
    8d12:	8a e7       	ldi	r24, 0x7A	; 122
    8d14:	93 e2       	ldi	r25, 0x23	; 35
    8d16:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_WriteString("\"Light_Blue\":{\"units\": \"bits\", \"scale\": 1},");				// 43
    8d1a:	85 ea       	ldi	r24, 0xA5	; 165
    8d1c:	93 e2       	ldi	r25, 0x23	; 35
    8d1e:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_WriteString("\"Light_Clear\":{\"units\": \"bits\", \"scale\": 1},");				// 44
    8d22:	81 ed       	ldi	r24, 0xD1	; 209
    8d24:	93 e2       	ldi	r25, 0x23	; 35
    8d26:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_WriteString("\"Air_1\":{\"units\": \"#particles\", \"scale\": 1},");				// 44
    8d2a:	8e ef       	ldi	r24, 0xFE	; 254
    8d2c:	93 e2       	ldi	r25, 0x23	; 35
    8d2e:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_WriteString("\"Air_2\":{\"units\": \"#particles\", \"scale\": 1},");				// 44
    8d32:	8b e2       	ldi	r24, 0x2B	; 43
    8d34:	94 e2       	ldi	r25, 0x24	; 36
    8d36:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_WriteString("\"Air_3\":{\"units\": \"#particles\", \"scale\": 1},");				// 44
    8d3a:	88 e5       	ldi	r24, 0x58	; 88
    8d3c:	94 e2       	ldi	r25, 0x24	; 36
    8d3e:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_WriteString("\"Air_4\":{\"units\": \"#particles\", \"scale\": 1},");				// 44
    8d42:	85 e8       	ldi	r24, 0x85	; 133
    8d44:	94 e2       	ldi	r25, 0x24	; 36
    8d46:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_WriteString("\"Air_5\":{\"units\": \"#particles\", \"scale\": 1},");				// 44
    8d4a:	82 eb       	ldi	r24, 0xB2	; 178
    8d4c:	94 e2       	ldi	r25, 0x24	; 36
    8d4e:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_WriteString("\"Air_6\":{\"units\": \"#particles\", \"scale\": 1},");				// 44
    8d52:	8f ed       	ldi	r24, 0xDF	; 223
    8d54:	94 e2       	ldi	r25, 0x24	; 36
    8d56:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_WriteString("\"Air_Small\":{\"units\": \"#particles\", \"scale\": 1},");				// 48
    8d5a:	8c e0       	ldi	r24, 0x0C	; 12
    8d5c:	95 e2       	ldi	r25, 0x25	; 37
    8d5e:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_WriteString("\"Air_Large\":{\"units\": \"#particles\", \"scale\": 1},");				// 48
    8d62:	8d e3       	ldi	r24, 0x3D	; 61
    8d64:	95 e2       	ldi	r25, 0x25	; 37
    8d66:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_WriteString("\"Microphone\":{\"units\": \"bits\", \"scale\": 1}}");
    8d6a:	8e e6       	ldi	r24, 0x6E	; 110
    8d6c:	95 e2       	ldi	r25, 0x25	; 37
    8d6e:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <SD_WriteString>
	SD_Write8(0x0A);
    8d72:	8a e0       	ldi	r24, 0x0A	; 10
    8d74:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	
	SD_Write8(0x00);
    8d78:	80 e0       	ldi	r24, 0x00	; 0
    8d7a:	0e 94 32 2c 	call	0x5864	; 0x5864 <SD_Write8>
	
	SD_WriteCRC();							// CRC			
    8d7e:	0e 94 48 2c 	call	0x5890	; 0x5890 <SD_WriteCRC>
	
	
	f_sync(&Log_File);
    8d82:	86 ef       	ldi	r24, 0xF6	; 246
    8d84:	97 e4       	ldi	r25, 0x47	; 71
    8d86:	0e 94 95 1c 	call	0x392a	; 0x392a <f_sync>
	
	return resp;
}
    8d8a:	81 2f       	mov	r24, r17
    8d8c:	1f 91       	pop	r17
    8d8e:	08 95       	ret

00008d90 <__vector_53>:
	SD_Writer_Timer.INTCTRLA = (SD_Writer_Timer.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;

}

ISR(SD_Writer_Timer_vect)
{
    8d90:	1f 92       	push	r1
    8d92:	0f 92       	push	r0
    8d94:	0f b6       	in	r0, 0x3f	; 63
    8d96:	0f 92       	push	r0
    8d98:	0b b6       	in	r0, 0x3b	; 59
    8d9a:	0f 92       	push	r0
    8d9c:	11 24       	eor	r1, r1
    8d9e:	8f 92       	push	r8
    8da0:	9f 92       	push	r9
    8da2:	af 92       	push	r10
    8da4:	bf 92       	push	r11
    8da6:	df 92       	push	r13
    8da8:	ef 92       	push	r14
    8daa:	ff 92       	push	r15
    8dac:	0f 93       	push	r16
    8dae:	1f 93       	push	r17
    8db0:	2f 93       	push	r18
    8db2:	3f 93       	push	r19
    8db4:	4f 93       	push	r20
    8db6:	5f 93       	push	r21
    8db8:	6f 93       	push	r22
    8dba:	7f 93       	push	r23
    8dbc:	8f 93       	push	r24
    8dbe:	9f 93       	push	r25
    8dc0:	af 93       	push	r26
    8dc2:	bf 93       	push	r27
    8dc4:	ef 93       	push	r30
    8dc6:	ff 93       	push	r31
    8dc8:	df 93       	push	r29
    8dca:	cf 93       	push	r28
    8dcc:	0f 92       	push	r0
    8dce:	0f 92       	push	r0
    8dd0:	cd b7       	in	r28, 0x3d	; 61
    8dd2:	de b7       	in	r29, 0x3e	; 62
	   goto sdInterrupt;
	}

    if(okToFillUploadFileBuffer){
        uint16_t tmp;
        f_read(&Upload_File,&uploadFileBuffer,uploadChunkSize,&tmp);
    8dd4:	5e 01       	movw	r10, r28
    8dd6:	08 94       	sec
    8dd8:	a1 1c       	adc	r10, r1
    8dda:	b1 1c       	adc	r11, r1
    8ddc:	e0 e7       	ldi	r30, 0x70	; 112
    8dde:	8e 2e       	mov	r8, r30
    8de0:	e1 e0       	ldi	r30, 0x01	; 1
    8de2:	9e 2e       	mov	r9, r30
	

	
    sdInterrupt:

	if(okToSendMicrophoneBuffer1 && recording && !restartingFile){
    8de4:	80 91 36 2d 	lds	r24, 0x2D36
    8de8:	88 23       	and	r24, r24
    8dea:	71 f0       	breq	.+28     	; 0x8e08 <__vector_53+0x78>
    8dec:	80 91 e3 2c 	lds	r24, 0x2CE3
    8df0:	88 23       	and	r24, r24
    8df2:	51 f0       	breq	.+20     	; 0x8e08 <__vector_53+0x78>
    8df4:	80 91 76 2d 	lds	r24, 0x2D76
    8df8:	88 23       	and	r24, r24
    8dfa:	31 f4       	brne	.+12     	; 0x8e08 <__vector_53+0x78>
		SD_WriteMicrophoneBuffer(1);
    8dfc:	81 e0       	ldi	r24, 0x01	; 1
    8dfe:	0e 94 4a 41 	call	0x8294	; 0x8294 <SD_WriteMicrophoneBuffer>
		okToSendMicrophoneBuffer1  = false;
    8e02:	10 92 36 2d 	sts	0x2D36, r1
    8e06:	ee cf       	rjmp	.-36     	; 0x8de4 <__vector_53+0x54>
        goto sdInterrupt;
	} else if (okToSendMicrophoneBuffer2 && recording && !restartingFile){
    8e08:	80 91 37 2d 	lds	r24, 0x2D37
    8e0c:	88 23       	and	r24, r24
    8e0e:	71 f0       	breq	.+28     	; 0x8e2c <__vector_53+0x9c>
    8e10:	80 91 e3 2c 	lds	r24, 0x2CE3
    8e14:	88 23       	and	r24, r24
    8e16:	51 f0       	breq	.+20     	; 0x8e2c <__vector_53+0x9c>
    8e18:	80 91 76 2d 	lds	r24, 0x2D76
    8e1c:	88 23       	and	r24, r24
    8e1e:	31 f4       	brne	.+12     	; 0x8e2c <__vector_53+0x9c>
		SD_WriteMicrophoneBuffer(2);
    8e20:	82 e0       	ldi	r24, 0x02	; 2
    8e22:	0e 94 4a 41 	call	0x8294	; 0x8294 <SD_WriteMicrophoneBuffer>
		okToSendMicrophoneBuffer2 = false;
    8e26:	10 92 37 2d 	sts	0x2D37, r1
    8e2a:	dc cf       	rjmp	.-72     	; 0x8de4 <__vector_53+0x54>
		goto sdInterrupt;
	}

    if(okToSendAirQuality && !restartingFile){
    8e2c:	80 91 22 2d 	lds	r24, 0x2D22
    8e30:	88 23       	and	r24, r24
    8e32:	09 f4       	brne	.+2      	; 0x8e36 <__vector_53+0xa6>
    8e34:	d4 c0       	rjmp	.+424    	; 0x8fde <__vector_53+0x24e>
    8e36:	80 91 76 2d 	lds	r24, 0x2D76
    8e3a:	88 23       	and	r24, r24
    8e3c:	09 f0       	breq	.+2      	; 0x8e40 <__vector_53+0xb0>
    8e3e:	cf c0       	rjmp	.+414    	; 0x8fde <__vector_53+0x24e>
    8e40:	dd 24       	eor	r13, r13
    8e42:	d3 94       	inc	r13
    8e44:	10 e0       	ldi	r17, 0x00	; 0
    8e46:	02 c0       	rjmp	.+4      	; 0x8e4c <__vector_53+0xbc>
		uint8_t numberOfBins = 1;
		uint8_t counter = 0;
		while(Rs232_CharReadyToRead()){
			airQualityString[counter] = Rs232_GetByte(false);
			if(airQualityString[counter] == ','){
			    numberOfBins++;
    8e48:	d3 94       	inc	r13
			}
			counter++;
    8e4a:	1f 5f       	subi	r17, 0xFF	; 255
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
    8e4c:	20 91 20 2d 	lds	r18, 0x2D20
    8e50:	30 91 21 2d 	lds	r19, 0x2D21
    8e54:	80 91 1e 2d 	lds	r24, 0x2D1E
    8e58:	90 91 1f 2d 	lds	r25, 0x2D1F
    8e5c:	28 17       	cp	r18, r24
    8e5e:	39 07       	cpc	r19, r25
    8e60:	09 f0       	breq	.+2      	; 0x8e64 <__vector_53+0xd4>
    8e62:	b9 c2       	rjmp	.+1394   	; 0x93d6 <__vector_53+0x646>
		}
		if(strstr(airQualityString,"Dylos") == NULL){
    8e64:	83 ee       	ldi	r24, 0xE3	; 227
    8e66:	95 e4       	ldi	r25, 0x45	; 69
    8e68:	6a e9       	ldi	r22, 0x9A	; 154
    8e6a:	75 e2       	ldi	r23, 0x25	; 37
    8e6c:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <strstr>
    8e70:	00 97       	sbiw	r24, 0x00	; 0
    8e72:	09 f0       	breq	.+2      	; 0x8e76 <__vector_53+0xe6>
    8e74:	b7 cf       	rjmp	.-146    	; 0x8de4 <__vector_53+0x54>
			airSampleTime = Time_Get32BitTimer();
    8e76:	0e 94 b0 02 	call	0x560	; 0x560 <Time_Get32BitTimer>
    8e7a:	60 93 0c 2d 	sts	0x2D0C, r22
    8e7e:	70 93 0d 2d 	sts	0x2D0D, r23
    8e82:	80 93 0e 2d 	sts	0x2D0E, r24
    8e86:	90 93 0f 2d 	sts	0x2D0F, r25
			airCount[0] = atol(strtok(airQualityString,","));
    8e8a:	83 ee       	ldi	r24, 0xE3	; 227
    8e8c:	95 e4       	ldi	r25, 0x45	; 69
    8e8e:	60 ea       	ldi	r22, 0xA0	; 160
    8e90:	75 e2       	ldi	r23, 0x25	; 37
    8e92:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
    8e96:	0e 94 fc 4e 	call	0x9df8	; 0x9df8 <atol>
    8e9a:	60 93 47 46 	sts	0x4647, r22
    8e9e:	70 93 48 46 	sts	0x4648, r23
    8ea2:	80 93 49 46 	sts	0x4649, r24
    8ea6:	90 93 4a 46 	sts	0x464A, r25
    8eaa:	7b e4       	ldi	r23, 0x4B	; 75
    8eac:	e7 2e       	mov	r14, r23
    8eae:	76 e4       	ldi	r23, 0x46	; 70
    8eb0:	f7 2e       	mov	r15, r23
			for(uint8_t i = 0; i < numberOfBins; i++){
    8eb2:	0d 2d       	mov	r16, r13
    8eb4:	10 e0       	ldi	r17, 0x00	; 0
    8eb6:	00 0f       	add	r16, r16
    8eb8:	11 1f       	adc	r17, r17
    8eba:	00 0f       	add	r16, r16
    8ebc:	11 1f       	adc	r17, r17
    8ebe:	0e 0d       	add	r16, r14
    8ec0:	1f 1d       	adc	r17, r15
    8ec2:	0e c0       	rjmp	.+28     	; 0x8ee0 <__vector_53+0x150>
			    airCount[i+1] = atol(strtok(NULL,","));
    8ec4:	80 e0       	ldi	r24, 0x00	; 0
    8ec6:	90 e0       	ldi	r25, 0x00	; 0
    8ec8:	60 ea       	ldi	r22, 0xA0	; 160
    8eca:	75 e2       	ldi	r23, 0x25	; 37
    8ecc:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
    8ed0:	0e 94 fc 4e 	call	0x9df8	; 0x9df8 <atol>
    8ed4:	f7 01       	movw	r30, r14
    8ed6:	61 93       	st	Z+, r22
    8ed8:	71 93       	st	Z+, r23
    8eda:	81 93       	st	Z+, r24
    8edc:	91 93       	st	Z+, r25
    8ede:	7f 01       	movw	r14, r30
			counter++;
		}
		if(strstr(airQualityString,"Dylos") == NULL){
			airSampleTime = Time_Get32BitTimer();
			airCount[0] = atol(strtok(airQualityString,","));
			for(uint8_t i = 0; i < numberOfBins; i++){
    8ee0:	e0 16       	cp	r14, r16
    8ee2:	f1 06       	cpc	r15, r17
    8ee4:	79 f7       	brne	.-34     	; 0x8ec4 <__vector_53+0x134>
    8ee6:	20 91 47 46 	lds	r18, 0x4647
    8eea:	30 91 48 46 	lds	r19, 0x4648
    8eee:	40 91 49 46 	lds	r20, 0x4649
    8ef2:	50 91 4a 46 	lds	r21, 0x464A
			    airCount[i+1] = atol(strtok(NULL,","));
			}
			if(numberOfBins == 2){
    8ef6:	f2 e0       	ldi	r31, 0x02	; 2
    8ef8:	df 16       	cp	r13, r31
    8efa:	01 f5       	brne	.+64     	; 0x8f3c <__vector_53+0x1ac>

			    quickSmall = airCount[0];
    8efc:	20 93 4a 2d 	sts	0x2D4A, r18
    8f00:	30 93 4b 2d 	sts	0x2D4B, r19
    8f04:	40 93 4c 2d 	sts	0x2D4C, r20
    8f08:	50 93 4d 2d 	sts	0x2D4D, r21
			    quickLarge = airCount[1];
    8f0c:	80 91 4b 46 	lds	r24, 0x464B
    8f10:	90 91 4c 46 	lds	r25, 0x464C
    8f14:	a0 91 4d 46 	lds	r26, 0x464D
    8f18:	b0 91 4e 46 	lds	r27, 0x464E
    8f1c:	80 93 46 2d 	sts	0x2D46, r24
    8f20:	90 93 47 2d 	sts	0x2D47, r25
    8f24:	a0 93 48 2d 	sts	0x2D48, r26
    8f28:	b0 93 49 2d 	sts	0x2D49, r27
			    if(recording){
    8f2c:	80 91 e3 2c 	lds	r24, 0x2CE3
    8f30:	88 23       	and	r24, r24
    8f32:	09 f4       	brne	.+2      	; 0x8f36 <__vector_53+0x1a6>
    8f34:	51 c0       	rjmp	.+162    	; 0x8fd8 <__vector_53+0x248>
					SD_WriteAirSampleMinute();
    8f36:	0e 94 6d 3f 	call	0x7eda	; 0x7eda <SD_WriteAirSampleMinute>
    8f3a:	4e c0       	rjmp	.+156    	; 0x8fd8 <__vector_53+0x248>
				}
				okToSendAirQuality = false;
			} else {
			    quickSmall = airCount[0] + airCount[1];
    8f3c:	80 91 4b 46 	lds	r24, 0x464B
    8f40:	90 91 4c 46 	lds	r25, 0x464C
    8f44:	a0 91 4d 46 	lds	r26, 0x464D
    8f48:	b0 91 4e 46 	lds	r27, 0x464E
    8f4c:	82 0f       	add	r24, r18
    8f4e:	93 1f       	adc	r25, r19
    8f50:	a4 1f       	adc	r26, r20
    8f52:	b5 1f       	adc	r27, r21
    8f54:	80 93 4a 2d 	sts	0x2D4A, r24
    8f58:	90 93 4b 2d 	sts	0x2D4B, r25
    8f5c:	a0 93 4c 2d 	sts	0x2D4C, r26
    8f60:	b0 93 4d 2d 	sts	0x2D4D, r27
			    quickLarge = airCount[2] + airCount[3] + airCount[4] + airCount[5];
    8f64:	80 91 53 46 	lds	r24, 0x4653
    8f68:	90 91 54 46 	lds	r25, 0x4654
    8f6c:	a0 91 55 46 	lds	r26, 0x4655
    8f70:	b0 91 56 46 	lds	r27, 0x4656
    8f74:	20 91 4f 46 	lds	r18, 0x464F
    8f78:	30 91 50 46 	lds	r19, 0x4650
    8f7c:	40 91 51 46 	lds	r20, 0x4651
    8f80:	50 91 52 46 	lds	r21, 0x4652
    8f84:	82 0f       	add	r24, r18
    8f86:	93 1f       	adc	r25, r19
    8f88:	a4 1f       	adc	r26, r20
    8f8a:	b5 1f       	adc	r27, r21
    8f8c:	20 91 57 46 	lds	r18, 0x4657
    8f90:	30 91 58 46 	lds	r19, 0x4658
    8f94:	40 91 59 46 	lds	r20, 0x4659
    8f98:	50 91 5a 46 	lds	r21, 0x465A
    8f9c:	82 0f       	add	r24, r18
    8f9e:	93 1f       	adc	r25, r19
    8fa0:	a4 1f       	adc	r26, r20
    8fa2:	b5 1f       	adc	r27, r21
    8fa4:	20 91 5b 46 	lds	r18, 0x465B
    8fa8:	30 91 5c 46 	lds	r19, 0x465C
    8fac:	40 91 5d 46 	lds	r20, 0x465D
    8fb0:	50 91 5e 46 	lds	r21, 0x465E
    8fb4:	82 0f       	add	r24, r18
    8fb6:	93 1f       	adc	r25, r19
    8fb8:	a4 1f       	adc	r26, r20
    8fba:	b5 1f       	adc	r27, r21
    8fbc:	80 93 46 2d 	sts	0x2D46, r24
    8fc0:	90 93 47 2d 	sts	0x2D47, r25
    8fc4:	a0 93 48 2d 	sts	0x2D48, r26
    8fc8:	b0 93 49 2d 	sts	0x2D49, r27
				
			    if(recording){
    8fcc:	80 91 e3 2c 	lds	r24, 0x2CE3
    8fd0:	88 23       	and	r24, r24
    8fd2:	11 f0       	breq	.+4      	; 0x8fd8 <__vector_53+0x248>
					SD_WriteAirSampleSecond();
    8fd4:	0e 94 dd 3f 	call	0x7fba	; 0x7fba <SD_WriteAirSampleSecond>
					
				}
				okToSendAirQuality = false;
    8fd8:	10 92 22 2d 	sts	0x2D22, r1
    8fdc:	03 cf       	rjmp	.-506    	; 0x8de4 <__vector_53+0x54>
			}
        } 
		goto sdInterrupt;
	}

	if(okToSendTemperatureBuffer1 && recording && !restartingFile){
    8fde:	80 91 2a 2d 	lds	r24, 0x2D2A
    8fe2:	88 23       	and	r24, r24
    8fe4:	71 f0       	breq	.+28     	; 0x9002 <__vector_53+0x272>
    8fe6:	80 91 e3 2c 	lds	r24, 0x2CE3
    8fea:	88 23       	and	r24, r24
    8fec:	51 f0       	breq	.+20     	; 0x9002 <__vector_53+0x272>
    8fee:	80 91 76 2d 	lds	r24, 0x2D76
    8ff2:	88 23       	and	r24, r24
    8ff4:	31 f4       	brne	.+12     	; 0x9002 <__vector_53+0x272>
		SD_WriteTemperatureBuffer(1);
    8ff6:	81 e0       	ldi	r24, 0x01	; 1
    8ff8:	0e 94 93 42 	call	0x8526	; 0x8526 <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer1 = false;
    8ffc:	10 92 2a 2d 	sts	0x2D2A, r1
    9000:	f1 ce       	rjmp	.-542    	; 0x8de4 <__vector_53+0x54>
		goto sdInterrupt;
	} else if (okToSendTemperatureBuffer2 && recording && !restartingFile){
    9002:	80 91 2b 2d 	lds	r24, 0x2D2B
    9006:	88 23       	and	r24, r24
    9008:	71 f0       	breq	.+28     	; 0x9026 <__vector_53+0x296>
    900a:	80 91 e3 2c 	lds	r24, 0x2CE3
    900e:	88 23       	and	r24, r24
    9010:	51 f0       	breq	.+20     	; 0x9026 <__vector_53+0x296>
    9012:	80 91 76 2d 	lds	r24, 0x2D76
    9016:	88 23       	and	r24, r24
    9018:	31 f4       	brne	.+12     	; 0x9026 <__vector_53+0x296>
		SD_WriteTemperatureBuffer(2);
    901a:	82 e0       	ldi	r24, 0x02	; 2
    901c:	0e 94 93 42 	call	0x8526	; 0x8526 <SD_WriteTemperatureBuffer>
		okToSendTemperatureBuffer2 = false;
    9020:	10 92 2b 2d 	sts	0x2D2B, r1
    9024:	df ce       	rjmp	.-578    	; 0x8de4 <__vector_53+0x54>
		goto sdInterrupt;
	}

	if(okToSendHumidityBuffer1 && recording && !restartingFile){
    9026:	80 91 32 2d 	lds	r24, 0x2D32
    902a:	88 23       	and	r24, r24
    902c:	71 f0       	breq	.+28     	; 0x904a <__vector_53+0x2ba>
    902e:	80 91 e3 2c 	lds	r24, 0x2CE3
    9032:	88 23       	and	r24, r24
    9034:	51 f0       	breq	.+20     	; 0x904a <__vector_53+0x2ba>
    9036:	80 91 76 2d 	lds	r24, 0x2D76
    903a:	88 23       	and	r24, r24
    903c:	31 f4       	brne	.+12     	; 0x904a <__vector_53+0x2ba>
		SD_WriteHumidityBuffer(1);
    903e:	81 e0       	ldi	r24, 0x01	; 1
    9040:	0e 94 20 42 	call	0x8440	; 0x8440 <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer1 = false;
    9044:	10 92 32 2d 	sts	0x2D32, r1
    9048:	cd ce       	rjmp	.-614    	; 0x8de4 <__vector_53+0x54>
		goto sdInterrupt;
	} else if (okToSendHumidityBuffer2 && recording && !restartingFile){
    904a:	80 91 33 2d 	lds	r24, 0x2D33
    904e:	88 23       	and	r24, r24
    9050:	71 f0       	breq	.+28     	; 0x906e <__vector_53+0x2de>
    9052:	80 91 e3 2c 	lds	r24, 0x2CE3
    9056:	88 23       	and	r24, r24
    9058:	51 f0       	breq	.+20     	; 0x906e <__vector_53+0x2de>
    905a:	80 91 76 2d 	lds	r24, 0x2D76
    905e:	88 23       	and	r24, r24
    9060:	31 f4       	brne	.+12     	; 0x906e <__vector_53+0x2de>
		SD_WriteHumidityBuffer(2);
    9062:	82 e0       	ldi	r24, 0x02	; 2
    9064:	0e 94 20 42 	call	0x8440	; 0x8440 <SD_WriteHumidityBuffer>
		okToSendHumidityBuffer2 = false;
    9068:	10 92 33 2d 	sts	0x2D33, r1
    906c:	bb ce       	rjmp	.-650    	; 0x8de4 <__vector_53+0x54>
		goto sdInterrupt;
	}

	if(okToSendPressureBuffer1 && recording && !restartingFile){
    906e:	80 91 2e 2d 	lds	r24, 0x2D2E
    9072:	88 23       	and	r24, r24
    9074:	71 f0       	breq	.+28     	; 0x9092 <__vector_53+0x302>
    9076:	80 91 e3 2c 	lds	r24, 0x2CE3
    907a:	88 23       	and	r24, r24
    907c:	51 f0       	breq	.+20     	; 0x9092 <__vector_53+0x302>
    907e:	80 91 76 2d 	lds	r24, 0x2D76
    9082:	88 23       	and	r24, r24
    9084:	31 f4       	brne	.+12     	; 0x9092 <__vector_53+0x302>
		SD_WritePressureBuffer(1);
    9086:	81 e0       	ldi	r24, 0x01	; 1
    9088:	0e 94 ad 41 	call	0x835a	; 0x835a <SD_WritePressureBuffer>
		okToSendPressureBuffer1 = false;
    908c:	10 92 2e 2d 	sts	0x2D2E, r1
    9090:	a9 ce       	rjmp	.-686    	; 0x8de4 <__vector_53+0x54>
		goto sdInterrupt;
	} else if (okToSendPressureBuffer2 && recording && !restartingFile){
    9092:	80 91 2f 2d 	lds	r24, 0x2D2F
    9096:	88 23       	and	r24, r24
    9098:	71 f0       	breq	.+28     	; 0x90b6 <__vector_53+0x326>
    909a:	80 91 e3 2c 	lds	r24, 0x2CE3
    909e:	88 23       	and	r24, r24
    90a0:	51 f0       	breq	.+20     	; 0x90b6 <__vector_53+0x326>
    90a2:	80 91 76 2d 	lds	r24, 0x2D76
    90a6:	88 23       	and	r24, r24
    90a8:	31 f4       	brne	.+12     	; 0x90b6 <__vector_53+0x326>
		SD_WritePressureBuffer(2);
    90aa:	82 e0       	ldi	r24, 0x02	; 2
    90ac:	0e 94 ad 41 	call	0x835a	; 0x835a <SD_WritePressureBuffer>
		okToSendPressureBuffer2 = false;
    90b0:	10 92 2f 2d 	sts	0x2D2F, r1
    90b4:	97 ce       	rjmp	.-722    	; 0x8de4 <__vector_53+0x54>
		goto sdInterrupt;
	}

	if(okToSendLightBuffer1 && recording && !restartingFile){
    90b6:	80 91 3a 2d 	lds	r24, 0x2D3A
    90ba:	88 23       	and	r24, r24
    90bc:	71 f0       	breq	.+28     	; 0x90da <__vector_53+0x34a>
    90be:	80 91 e3 2c 	lds	r24, 0x2CE3
    90c2:	88 23       	and	r24, r24
    90c4:	51 f0       	breq	.+20     	; 0x90da <__vector_53+0x34a>
    90c6:	80 91 76 2d 	lds	r24, 0x2D76
    90ca:	88 23       	and	r24, r24
    90cc:	31 f4       	brne	.+12     	; 0x90da <__vector_53+0x34a>
		SD_WriteLightBuffer(1);
    90ce:	81 e0       	ldi	r24, 0x01	; 1
    90d0:	0e 94 a9 40 	call	0x8152	; 0x8152 <SD_WriteLightBuffer>
		okToSendLightBuffer1 = false;
    90d4:	10 92 3a 2d 	sts	0x2D3A, r1
    90d8:	85 ce       	rjmp	.-758    	; 0x8de4 <__vector_53+0x54>
		goto sdInterrupt;
	} else if (okToSendLightBuffer2 && recording && !restartingFile){
    90da:	80 91 3b 2d 	lds	r24, 0x2D3B
    90de:	88 23       	and	r24, r24
    90e0:	71 f0       	breq	.+28     	; 0x90fe <__vector_53+0x36e>
    90e2:	80 91 e3 2c 	lds	r24, 0x2CE3
    90e6:	88 23       	and	r24, r24
    90e8:	51 f0       	breq	.+20     	; 0x90fe <__vector_53+0x36e>
    90ea:	80 91 76 2d 	lds	r24, 0x2D76
    90ee:	88 23       	and	r24, r24
    90f0:	31 f4       	brne	.+12     	; 0x90fe <__vector_53+0x36e>
		SD_WriteLightBuffer(2);
    90f2:	82 e0       	ldi	r24, 0x02	; 2
    90f4:	0e 94 a9 40 	call	0x8152	; 0x8152 <SD_WriteLightBuffer>
		okToSendLightBuffer2 = false;
    90f8:	10 92 3b 2d 	sts	0x2D3B, r1
    90fc:	73 ce       	rjmp	.-794    	; 0x8de4 <__vector_53+0x54>
		goto sdInterrupt;
	}


	if(okToSendRTCBlock && recording){
    90fe:	80 91 3e 2d 	lds	r24, 0x2D3E
    9102:	88 23       	and	r24, r24
    9104:	99 f0       	breq	.+38     	; 0x912c <__vector_53+0x39c>
    9106:	80 91 e3 2c 	lds	r24, 0x2CE3
    910a:	88 23       	and	r24, r24
    910c:	79 f0       	breq	.+30     	; 0x912c <__vector_53+0x39c>
		SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_Time);
    910e:	0e 94 b0 02 	call	0x560	; 0x560 <Time_Get32BitTimer>
    9112:	20 91 1a 2d 	lds	r18, 0x2D1A
    9116:	30 91 1b 2d 	lds	r19, 0x2D1B
    911a:	40 91 1c 2d 	lds	r20, 0x2D1C
    911e:	50 91 1d 2d 	lds	r21, 0x2D1D
    9122:	0e 94 ed 39 	call	0x73da	; 0x73da <SD_WriteRTCBlock>
		okToSendRTCBlock = false;
    9126:	10 92 3e 2d 	sts	0x2D3E, r1
    912a:	5c ce       	rjmp	.-840    	; 0x8de4 <__vector_53+0x54>
		goto sdInterrupt;
	}

	if(okToOpenLogFile && (percentDiskUsed < 950)){
    912c:	80 91 72 2d 	lds	r24, 0x2D72
    9130:	88 23       	and	r24, r24
    9132:	09 f4       	brne	.+2      	; 0x9136 <__vector_53+0x3a6>
    9134:	5e c0       	rjmp	.+188    	; 0x91f2 <__vector_53+0x462>
    9136:	80 91 85 2d 	lds	r24, 0x2D85
    913a:	90 91 86 2d 	lds	r25, 0x2D86
    913e:	a0 91 87 2d 	lds	r26, 0x2D87
    9142:	b0 91 88 2d 	lds	r27, 0x2D88
    9146:	86 5b       	subi	r24, 0xB6	; 182
    9148:	93 40       	sbci	r25, 0x03	; 3
    914a:	a0 40       	sbci	r26, 0x00	; 0
    914c:	b0 40       	sbci	r27, 0x00	; 0
    914e:	08 f0       	brcs	.+2      	; 0x9152 <__vector_53+0x3c2>
    9150:	50 c0       	rjmp	.+160    	; 0x91f2 <__vector_53+0x462>
		if(SD_StartLogFile(UNIX_Time) == FR_OK){  // open file
    9152:	60 91 1a 2d 	lds	r22, 0x2D1A
    9156:	70 91 1b 2d 	lds	r23, 0x2D1B
    915a:	80 91 1c 2d 	lds	r24, 0x2D1C
    915e:	90 91 1d 2d 	lds	r25, 0x2D1D
    9162:	0e 94 fe 45 	call	0x8bfc	; 0x8bfc <SD_StartLogFile>
    9166:	88 23       	and	r24, r24
    9168:	09 f0       	breq	.+2      	; 0x916c <__vector_53+0x3dc>
    916a:	41 c0       	rjmp	.+130    	; 0x91ee <__vector_53+0x45e>
    916c:	88 ee       	ldi	r24, 0xE8	; 232
    916e:	93 e0       	ldi	r25, 0x03	; 3
    9170:	f4 01       	movw	r30, r8
    9172:	31 97       	sbiw	r30, 0x01	; 1
    9174:	f1 f7       	brne	.-4      	; 0x9172 <__vector_53+0x3e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9176:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9178:	d9 f7       	brne	.-10     	; 0x9170 <__vector_53+0x3e0>
			_delay_ms(100);

            timeToStopRecording = UNIX_Time + fileLengthInSeconds;
    917a:	80 91 1a 2d 	lds	r24, 0x2D1A
    917e:	90 91 1b 2d 	lds	r25, 0x2D1B
    9182:	a0 91 1c 2d 	lds	r26, 0x2D1C
    9186:	b0 91 1d 2d 	lds	r27, 0x2D1D
    918a:	8c 57       	subi	r24, 0x7C	; 124
    918c:	9c 4f       	sbci	r25, 0xFC	; 252
    918e:	af 4f       	sbci	r26, 0xFF	; 255
    9190:	bf 4f       	sbci	r27, 0xFF	; 255
    9192:	80 93 79 2d 	sts	0x2D79, r24
    9196:	90 93 7a 2d 	sts	0x2D7A, r25
    919a:	a0 93 7b 2d 	sts	0x2D7B, r26
    919e:	b0 93 7c 2d 	sts	0x2D7C, r27
    91a2:	84 58       	subi	r24, 0x84	; 132
    91a4:	93 40       	sbci	r25, 0x03	; 3
    91a6:	a0 40       	sbci	r26, 0x00	; 0
    91a8:	b0 40       	sbci	r27, 0x00	; 0

		    timeRecordingStarted = UNIX_Time;
    91aa:	80 93 10 2d 	sts	0x2D10, r24
    91ae:	90 93 11 2d 	sts	0x2D11, r25
    91b2:	a0 93 12 2d 	sts	0x2D12, r26
    91b6:	b0 93 13 2d 	sts	0x2D13, r27
		    SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_Time);
    91ba:	0e 94 b0 02 	call	0x560	; 0x560 <Time_Get32BitTimer>
    91be:	20 91 1a 2d 	lds	r18, 0x2D1A
    91c2:	30 91 1b 2d 	lds	r19, 0x2D1B
    91c6:	40 91 1c 2d 	lds	r20, 0x2D1C
    91ca:	50 91 1d 2d 	lds	r21, 0x2D1D
    91ce:	0e 94 ed 39 	call	0x73da	; 0x73da <SD_WriteRTCBlock>
	}
	return tmp;
}

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
    91d2:	80 91 20 2d 	lds	r24, 0x2D20
    91d6:	90 91 21 2d 	lds	r25, 0x2D21
    91da:	80 93 1e 2d 	sts	0x2D1E, r24
    91de:	90 93 1f 2d 	sts	0x2D1F, r25

		    Rs232_ClearBuffer();
		    recording = true;
    91e2:	81 e0       	ldi	r24, 0x01	; 1
    91e4:	80 93 e3 2c 	sts	0x2CE3, r24
		    okToOpenLogFile = false;
    91e8:	10 92 72 2d 	sts	0x2D72, r1
    91ec:	02 c0       	rjmp	.+4      	; 0x91f2 <__vector_53+0x462>
		} else {
		    SD_Init();
    91ee:	0e 94 66 2c 	call	0x58cc	; 0x58cc <SD_Init>
		}
	}
	if(okToCloseLogFile){
    91f2:	80 91 74 2d 	lds	r24, 0x2D74
    91f6:	88 23       	and	r24, r24
    91f8:	29 f0       	breq	.+10     	; 0x9204 <__vector_53+0x474>
		SD_Close();
    91fa:	0e 94 9a 2b 	call	0x5734	; 0x5734 <SD_Close>
		okToCloseLogFile = false;
    91fe:	10 92 74 2d 	sts	0x2D74, r1
    9202:	f0 cd       	rjmp	.-1056   	; 0x8de4 <__vector_53+0x54>





	if(okToOpenDirectory){
    9204:	80 91 64 2d 	lds	r24, 0x2D64
    9208:	88 23       	and	r24, r24
    920a:	41 f0       	breq	.+16     	; 0x921c <__vector_53+0x48c>
        f_opendir(&dir, "/");
    920c:	86 e1       	ldi	r24, 0x16	; 22
    920e:	9a e4       	ldi	r25, 0x4A	; 74
    9210:	62 ea       	ldi	r22, 0xA2	; 162
    9212:	75 e2       	ldi	r23, 0x25	; 37
    9214:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <f_opendir>
        okToOpenDirectory = false;
    9218:	10 92 64 2d 	sts	0x2D64, r1
	}

	if(okToGrabNextFileName){
    921c:	80 91 65 2d 	lds	r24, 0x2D65
    9220:	88 23       	and	r24, r24
    9222:	d9 f0       	breq	.+54     	; 0x925a <__vector_53+0x4ca>
        availableFileName[0] = 0;
    9224:	10 92 ad 50 	sts	0x50AD, r1
        if((f_readdir(&dir, &fno) == FR_OK)){
    9228:	86 e1       	ldi	r24, 0x16	; 22
    922a:	9a e4       	ldi	r25, 0x4A	; 74
    922c:	61 e5       	ldi	r22, 0x51	; 81
    922e:	7d e3       	ldi	r23, 0x3D	; 61
    9230:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <f_readdir>
    9234:	88 23       	and	r24, r24
    9236:	69 f4       	brne	.+26     	; 0x9252 <__vector_53+0x4c2>
            if(fno.fname[0] != 0){
    9238:	80 91 5a 3d 	lds	r24, 0x3D5A
    923c:	88 23       	and	r24, r24
    923e:	31 f0       	breq	.+12     	; 0x924c <__vector_53+0x4bc>
                strcpy(availableFileName,fno.fname);
    9240:	8d ea       	ldi	r24, 0xAD	; 173
    9242:	90 e5       	ldi	r25, 0x50	; 80
    9244:	6a e5       	ldi	r22, 0x5A	; 90
    9246:	7d e3       	ldi	r23, 0x3D	; 61
    9248:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <strcpy>
	        }
	        okToGrabNextFileName = false;
    924c:	10 92 65 2d 	sts	0x2D65, r1
    9250:	04 c0       	rjmp	.+8      	; 0x925a <__vector_53+0x4ca>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    9252:	80 91 68 06 	lds	r24, 0x0668
    9256:	80 ff       	sbrs	r24, 0
    9258:	ca c0       	rjmp	.+404    	; 0x93ee <__vector_53+0x65e>
            SD_Init();
            f_opendir(&dir, "/");
        }
	}

	if(okToOpenFileToUpload){
    925a:	80 91 68 2d 	lds	r24, 0x2D68
    925e:	88 23       	and	r24, r24
    9260:	99 f1       	breq	.+102    	; 0x92c8 <__vector_53+0x538>
	   f_stat(fileToUpload,&fno);
    9262:	87 e1       	ldi	r24, 0x17	; 23
    9264:	96 e3       	ldi	r25, 0x36	; 54
    9266:	61 e5       	ldi	r22, 0x51	; 81
    9268:	7d e3       	ldi	r23, 0x3D	; 61
    926a:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <f_stat>
	   uploadFileSize = fno.fsize;
    926e:	80 91 51 3d 	lds	r24, 0x3D51
    9272:	90 91 52 3d 	lds	r25, 0x3D52
    9276:	a0 91 53 3d 	lds	r26, 0x3D53
    927a:	b0 91 54 3d 	lds	r27, 0x3D54
    927e:	80 93 55 2d 	sts	0x2D55, r24
    9282:	90 93 56 2d 	sts	0x2D56, r25
    9286:	a0 93 57 2d 	sts	0x2D57, r26
    928a:	b0 93 58 2d 	sts	0x2D58, r27

	   if(f_open(&Upload_File, fileToUpload, FA_READ | FA_WRITE | FA_OPEN_EXISTING) == FR_OK){
    928e:	8c e2       	ldi	r24, 0x2C	; 44
    9290:	9a e4       	ldi	r25, 0x4A	; 74
    9292:	67 e1       	ldi	r22, 0x17	; 23
    9294:	76 e3       	ldi	r23, 0x36	; 54
    9296:	43 e0       	ldi	r20, 0x03	; 3
    9298:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <f_open>
    929c:	88 23       	and	r24, r24
    929e:	21 f4       	brne	.+8      	; 0x92a8 <__vector_53+0x518>
	      fileExists = true;
    92a0:	81 e0       	ldi	r24, 0x01	; 1
    92a2:	80 93 6e 2d 	sts	0x2D6E, r24
    92a6:	02 c0       	rjmp	.+4      	; 0x92ac <__vector_53+0x51c>
	   } else {
	      fileExists = false;
    92a8:	10 92 6e 2d 	sts	0x2D6E, r1
	   }
	   f_lseek(&Upload_File, 0);
    92ac:	8c e2       	ldi	r24, 0x2C	; 44
    92ae:	9a e4       	ldi	r25, 0x4A	; 74
    92b0:	40 e0       	ldi	r20, 0x00	; 0
    92b2:	50 e0       	ldi	r21, 0x00	; 0
    92b4:	60 e0       	ldi	r22, 0x00	; 0
    92b6:	70 e0       	ldi	r23, 0x00	; 0
    92b8:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <f_lseek>
	   uploadFileOpened = true;
    92bc:	81 e0       	ldi	r24, 0x01	; 1
    92be:	80 93 69 2d 	sts	0x2D69, r24
	   okToOpenFileToUpload = false;
    92c2:	10 92 68 2d 	sts	0x2D68, r1
    92c6:	8e cd       	rjmp	.-1252   	; 0x8de4 <__vector_53+0x54>
	   goto sdInterrupt;
	}

    if(okToFillUploadFileBuffer){
    92c8:	80 91 6a 2d 	lds	r24, 0x2D6A
    92cc:	88 23       	and	r24, r24
    92ce:	79 f0       	breq	.+30     	; 0x92ee <__vector_53+0x55e>
        uint16_t tmp;
        f_read(&Upload_File,&uploadFileBuffer,uploadChunkSize,&tmp);
    92d0:	8c e2       	ldi	r24, 0x2C	; 44
    92d2:	9a e4       	ldi	r25, 0x4A	; 74
    92d4:	67 e2       	ldi	r22, 0x27	; 39
    92d6:	72 e3       	ldi	r23, 0x32	; 50
    92d8:	48 ee       	ldi	r20, 0xE8	; 232
    92da:	53 e0       	ldi	r21, 0x03	; 3
    92dc:	95 01       	movw	r18, r10
    92de:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <f_read>
        okToFillUploadFileBuffer = false;
    92e2:	10 92 6a 2d 	sts	0x2D6A, r1
        uploadFileBufferFull = true;
    92e6:	81 e0       	ldi	r24, 0x01	; 1
    92e8:	80 93 6b 2d 	sts	0x2D6B, r24
    92ec:	7b cd       	rjmp	.-1290   	; 0x8de4 <__vector_53+0x54>
        goto sdInterrupt;
    }


	if(okToCloseUploadFile){
    92ee:	80 91 6c 2d 	lds	r24, 0x2D6C
    92f2:	88 23       	and	r24, r24
    92f4:	89 f0       	breq	.+34     	; 0x9318 <__vector_53+0x588>
	    f_sync(&Upload_File);
    92f6:	8c e2       	ldi	r24, 0x2C	; 44
    92f8:	9a e4       	ldi	r25, 0x4A	; 74
    92fa:	0e 94 95 1c 	call	0x392a	; 0x392a <f_sync>
	    f_close(&Upload_File);
    92fe:	8c e2       	ldi	r24, 0x2C	; 44
    9300:	9a e4       	ldi	r25, 0x4A	; 74
    9302:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <f_close>
	    strcpy(fileToUpload,"");
    9306:	87 e1       	ldi	r24, 0x17	; 23
    9308:	96 e3       	ldi	r25, 0x36	; 54
    930a:	65 e6       	ldi	r22, 0x65	; 101
    930c:	72 e2       	ldi	r23, 0x22	; 34
    930e:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <strcpy>
		okToCloseUploadFile = false;
    9312:	10 92 6c 2d 	sts	0x2D6C, r1
    9316:	66 cd       	rjmp	.-1332   	; 0x8de4 <__vector_53+0x54>
		goto sdInterrupt;
	}

	if(okToGetRemainingSpace){
    9318:	80 91 23 47 	lds	r24, 0x4723
    931c:	88 23       	and	r24, r24
    931e:	09 f4       	brne	.+2      	; 0x9322 <__vector_53+0x592>
    9320:	47 c0       	rjmp	.+142    	; 0x93b0 <__vector_53+0x620>
	    if(f_getfree("0:",&spaceRemainingOnDisk,&fs) != FR_OK){
    9322:	84 ea       	ldi	r24, 0xA4	; 164
    9324:	95 e2       	ldi	r25, 0x25	; 37
    9326:	6d e7       	ldi	r22, 0x7D	; 125
    9328:	7d e2       	ldi	r23, 0x2D	; 45
    932a:	47 e6       	ldi	r20, 0x67	; 103
    932c:	5d e3       	ldi	r21, 0x3D	; 61
    932e:	0e 94 34 20 	call	0x4068	; 0x4068 <f_getfree>
    9332:	88 23       	and	r24, r24
    9334:	41 f0       	breq	.+16     	; 0x9346 <__vector_53+0x5b6>
           spaceRemainingOnDisk = 0;
    9336:	10 92 7d 2d 	sts	0x2D7D, r1
    933a:	10 92 7e 2d 	sts	0x2D7E, r1
    933e:	10 92 7f 2d 	sts	0x2D7F, r1
    9342:	10 92 80 2d 	sts	0x2D80, r1
	    }
	    totalDiskSpace = fs->max_clust;
    9346:	e0 91 67 3d 	lds	r30, 0x3D67
    934a:	f0 91 68 3d 	lds	r31, 0x3D68
    934e:	e2 8c       	ldd	r14, Z+26	; 0x1a
    9350:	f3 8c       	ldd	r15, Z+27	; 0x1b
    9352:	04 8d       	ldd	r16, Z+28	; 0x1c
    9354:	15 8d       	ldd	r17, Z+29	; 0x1d
    9356:	e0 92 81 2d 	sts	0x2D81, r14
    935a:	f0 92 82 2d 	sts	0x2D82, r15
    935e:	00 93 83 2d 	sts	0x2D83, r16
    9362:	10 93 84 2d 	sts	0x2D84, r17

        percentDiskUsed = totalDiskSpace - spaceRemainingOnDisk;
	    percentDiskUsed *= 1000;
    9366:	80 91 7d 2d 	lds	r24, 0x2D7D
    936a:	90 91 7e 2d 	lds	r25, 0x2D7E
    936e:	a0 91 7f 2d 	lds	r26, 0x2D7F
    9372:	b0 91 80 2d 	lds	r27, 0x2D80
    9376:	a8 01       	movw	r20, r16
    9378:	97 01       	movw	r18, r14
    937a:	28 1b       	sub	r18, r24
    937c:	39 0b       	sbc	r19, r25
    937e:	4a 0b       	sbc	r20, r26
    9380:	5b 0b       	sbc	r21, r27
    9382:	ca 01       	movw	r24, r20
    9384:	b9 01       	movw	r22, r18
    9386:	28 ee       	ldi	r18, 0xE8	; 232
    9388:	33 e0       	ldi	r19, 0x03	; 3
    938a:	40 e0       	ldi	r20, 0x00	; 0
    938c:	50 e0       	ldi	r21, 0x00	; 0
    938e:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <__mulsi3>
	    percentDiskUsed /= totalDiskSpace;
    9392:	a8 01       	movw	r20, r16
    9394:	97 01       	movw	r18, r14
    9396:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    939a:	20 93 85 2d 	sts	0x2D85, r18
    939e:	30 93 86 2d 	sts	0x2D86, r19
    93a2:	40 93 87 2d 	sts	0x2D87, r20
    93a6:	50 93 88 2d 	sts	0x2D88, r21

	    okToGetRemainingSpace = false;
    93aa:	10 92 23 47 	sts	0x4723, r1
    93ae:	1a cd       	rjmp	.-1484   	; 0x8de4 <__vector_53+0x54>
	    goto sdInterrupt;
	}

	if(okToEraseFile){
    93b0:	80 91 6d 2d 	lds	r24, 0x2D6D
    93b4:	88 23       	and	r24, r24
    93b6:	21 f1       	breq	.+72     	; 0x9400 <__vector_53+0x670>
        eraseFileReturn = f_unlink(fileToErase);
    93b8:	8c e4       	ldi	r24, 0x4C	; 76
    93ba:	9c e4       	ldi	r25, 0x4C	; 76
    93bc:	0e 94 e7 21 	call	0x43ce	; 0x43ce <f_unlink>
    93c0:	80 93 24 47 	sts	0x4724, r24
        strcpy(fileToUpload,"");
    93c4:	87 e1       	ldi	r24, 0x17	; 23
    93c6:	96 e3       	ldi	r25, 0x36	; 54
    93c8:	65 e6       	ldi	r22, 0x65	; 101
    93ca:	72 e2       	ldi	r23, 0x22	; 34
    93cc:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <strcpy>
        okToEraseFile = false;
    93d0:	10 92 6d 2d 	sts	0x2D6D, r1
    93d4:	07 cd       	rjmp	.-1522   	; 0x8de4 <__vector_53+0x54>

    if(okToSendAirQuality && !restartingFile){
		uint8_t numberOfBins = 1;
		uint8_t counter = 0;
		while(Rs232_CharReadyToRead()){
			airQualityString[counter] = Rs232_GetByte(false);
    93d6:	80 e0       	ldi	r24, 0x00	; 0
    93d8:	0e 94 01 04 	call	0x802	; 0x802 <Rs232_GetByte>
    93dc:	e1 2f       	mov	r30, r17
    93de:	f0 e0       	ldi	r31, 0x00	; 0
    93e0:	ed 51       	subi	r30, 0x1D	; 29
    93e2:	fa 4b       	sbci	r31, 0xBA	; 186
    93e4:	80 83       	st	Z, r24
			if(airQualityString[counter] == ','){
    93e6:	8c 32       	cpi	r24, 0x2C	; 44
    93e8:	09 f0       	breq	.+2      	; 0x93ec <__vector_53+0x65c>
    93ea:	2f cd       	rjmp	.-1442   	; 0x8e4a <__vector_53+0xba>
    93ec:	2d cd       	rjmp	.-1446   	; 0x8e48 <__vector_53+0xb8>
            if(fno.fname[0] != 0){
                strcpy(availableFileName,fno.fname);
	        }
	        okToGrabNextFileName = false;
        } else if(SD_Inserted()){
            SD_Init();
    93ee:	0e 94 66 2c 	call	0x58cc	; 0x58cc <SD_Init>
            f_opendir(&dir, "/");
    93f2:	86 e1       	ldi	r24, 0x16	; 22
    93f4:	9a e4       	ldi	r25, 0x4A	; 74
    93f6:	62 ea       	ldi	r22, 0xA2	; 162
    93f8:	75 e2       	ldi	r23, 0x25	; 37
    93fa:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <f_opendir>
    93fe:	2d cf       	rjmp	.-422    	; 0x925a <__vector_53+0x4ca>
        eraseFileReturn = f_unlink(fileToErase);
        strcpy(fileToUpload,"");
        okToEraseFile = false;
	    goto sdInterrupt;
	}
}
    9400:	0f 90       	pop	r0
    9402:	0f 90       	pop	r0
    9404:	cf 91       	pop	r28
    9406:	df 91       	pop	r29
    9408:	ff 91       	pop	r31
    940a:	ef 91       	pop	r30
    940c:	bf 91       	pop	r27
    940e:	af 91       	pop	r26
    9410:	9f 91       	pop	r25
    9412:	8f 91       	pop	r24
    9414:	7f 91       	pop	r23
    9416:	6f 91       	pop	r22
    9418:	5f 91       	pop	r21
    941a:	4f 91       	pop	r20
    941c:	3f 91       	pop	r19
    941e:	2f 91       	pop	r18
    9420:	1f 91       	pop	r17
    9422:	0f 91       	pop	r16
    9424:	ff 90       	pop	r15
    9426:	ef 90       	pop	r14
    9428:	df 90       	pop	r13
    942a:	bf 90       	pop	r11
    942c:	af 90       	pop	r10
    942e:	9f 90       	pop	r9
    9430:	8f 90       	pop	r8
    9432:	0f 90       	pop	r0
    9434:	0b be       	out	0x3b, r0	; 59
    9436:	0f 90       	pop	r0
    9438:	0f be       	out	0x3f, r0	; 63
    943a:	0f 90       	pop	r0
    943c:	1f 90       	pop	r1
    943e:	18 95       	reti

00009440 <SD_Read_config_file>:
	fileName[0] = '/';
	ltoa(var, fileName+1, 16);
	strcat(fileName, ".bt");
}

void SD_Read_config_file(void){
    9440:	af 92       	push	r10
    9442:	bf 92       	push	r11
    9444:	cf 92       	push	r12
    9446:	df 92       	push	r13
    9448:	ef 92       	push	r14
    944a:	ff 92       	push	r15
    944c:	0f 93       	push	r16
    944e:	1f 93       	push	r17
    9450:	df 93       	push	r29
    9452:	cf 93       	push	r28
    9454:	cd b7       	in	r28, 0x3d	; 61
    9456:	de b7       	in	r29, 0x3e	; 62
    9458:	e2 97       	sbiw	r28, 0x32	; 50
    945a:	cd bf       	out	0x3d, r28	; 61
    945c:	de bf       	out	0x3e, r29	; 62
	char temp [50];
	
	SD_Open("/config.txt");
    945e:	87 ea       	ldi	r24, 0xA7	; 167
    9460:	95 e2       	ldi	r25, 0x25	; 37
    9462:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <SD_Open>
    f_lseek(&Log_File, 0);
    9466:	86 ef       	ldi	r24, 0xF6	; 246
    9468:	97 e4       	ldi	r25, 0x47	; 71
    946a:	40 e0       	ldi	r20, 0x00	; 0
    946c:	50 e0       	ldi	r21, 0x00	; 0
    946e:	60 e0       	ldi	r22, 0x00	; 0
    9470:	70 e0       	ldi	r23, 0x00	; 0
    9472:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <f_lseek>
	
	while(true){
        f_gets(temp,50,&Log_File);
    9476:	8e 01       	movw	r16, r28
    9478:	0f 5f       	subi	r16, 0xFF	; 255
    947a:	1f 4f       	sbci	r17, 0xFF	; 255
            } else if(strstr(temp,"recordFast") != 0){
                strtok(temp,"=");
                strcpy(fastString,strtok(NULL,"="));
            } else if(strstr(temp,"zone") != 0){
				strtok(temp,"=");
                memmove(zone,strtok(NULL,"="),4);
    947c:	bc e5       	ldi	r27, 0x5C	; 92
    947e:	eb 2e       	mov	r14, r27
    9480:	b6 e2       	ldi	r27, 0x26	; 38
    9482:	fb 2e       	mov	r15, r27
                        break;
                    }
                }
            } else if(strstr(temp,"nickname") != 0){
                strtok(temp,"=");
	            strcpy(nickname,strtok(NULL,"="));
    9484:	ae e8       	ldi	r26, 0x8E	; 142
    9486:	ca 2e       	mov	r12, r26
    9488:	a1 e5       	ldi	r26, 0x51	; 81
    948a:	da 2e       	mov	r13, r26
				strtok(temp,"=");
                strcpy(auth,strtok(NULL,"="));
				authRead = true;
            } else if(strstr(temp,"user") != 0){
                strtok(temp,"=");
                strcpy(user,strtok(NULL,"="));
    948c:	ff e5       	ldi	r31, 0x5F	; 95
    948e:	af 2e       	mov	r10, r31
    9490:	f6 e4       	ldi	r31, 0x46	; 70
    9492:	bf 2e       	mov	r11, r31
	
	SD_Open("/config.txt");
    f_lseek(&Log_File, 0);
	
	while(true){
        f_gets(temp,50,&Log_File);
    9494:	c8 01       	movw	r24, r16
    9496:	62 e3       	ldi	r22, 0x32	; 50
    9498:	70 e0       	ldi	r23, 0x00	; 0
    949a:	46 ef       	ldi	r20, 0xF6	; 246
    949c:	57 e4       	ldi	r21, 0x47	; 71
    949e:	0e 94 02 2b 	call	0x5604	; 0x5604 <f_gets>
        if(temp[0] != 0){
    94a2:	89 81       	ldd	r24, Y+1	; 0x01
    94a4:	88 23       	and	r24, r24
    94a6:	09 f4       	brne	.+2      	; 0x94aa <SD_Read_config_file+0x6a>
    94a8:	96 c1       	rjmp	.+812    	; 0x97d6 <SD_Read_config_file+0x396>
            if(strstr(temp,"ssid") != 0){
    94aa:	c8 01       	movw	r24, r16
    94ac:	63 eb       	ldi	r22, 0xB3	; 179
    94ae:	75 e2       	ldi	r23, 0x25	; 37
    94b0:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <strstr>
    94b4:	00 97       	sbiw	r24, 0x00	; 0
    94b6:	a1 f0       	breq	.+40     	; 0x94e0 <SD_Read_config_file+0xa0>
                strtok(temp,"=");
    94b8:	c8 01       	movw	r24, r16
    94ba:	68 eb       	ldi	r22, 0xB8	; 184
    94bc:	75 e2       	ldi	r23, 0x25	; 37
    94be:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
                strcpy(ssid,strtok(NULL,"="));
    94c2:	80 e0       	ldi	r24, 0x00	; 0
    94c4:	90 e0       	ldi	r25, 0x00	; 0
    94c6:	68 eb       	ldi	r22, 0xB8	; 184
    94c8:	75 e2       	ldi	r23, 0x25	; 37
    94ca:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
    94ce:	bc 01       	movw	r22, r24
    94d0:	83 ef       	ldi	r24, 0xF3	; 243
    94d2:	91 e3       	ldi	r25, 0x31	; 49
    94d4:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <strcpy>
                ssidRead = true;
    94d8:	81 e0       	ldi	r24, 0x01	; 1
    94da:	80 93 27 2d 	sts	0x2D27, r24
    94de:	da cf       	rjmp	.-76     	; 0x9494 <SD_Read_config_file+0x54>
            } else if(strstr(temp,"phrase") != 0){
    94e0:	c8 01       	movw	r24, r16
    94e2:	6a eb       	ldi	r22, 0xBA	; 186
    94e4:	75 e2       	ldi	r23, 0x25	; 37
    94e6:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <strstr>
    94ea:	00 97       	sbiw	r24, 0x00	; 0
    94ec:	a1 f0       	breq	.+40     	; 0x9516 <SD_Read_config_file+0xd6>
                strtok(temp,"=");
    94ee:	c8 01       	movw	r24, r16
    94f0:	68 eb       	ldi	r22, 0xB8	; 184
    94f2:	75 e2       	ldi	r23, 0x25	; 37
    94f4:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
                strcpy(phrase,strtok(NULL,"="));
    94f8:	80 e0       	ldi	r24, 0x00	; 0
    94fa:	90 e0       	ldi	r25, 0x00	; 0
    94fc:	68 eb       	ldi	r22, 0xB8	; 184
    94fe:	75 e2       	ldi	r23, 0x25	; 37
    9500:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
    9504:	bc 01       	movw	r22, r24
    9506:	85 e2       	ldi	r24, 0x25	; 37
    9508:	97 e4       	ldi	r25, 0x47	; 71
    950a:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <strcpy>
                phraseRead = true;
    950e:	81 e0       	ldi	r24, 0x01	; 1
    9510:	80 93 25 2d 	sts	0x2D25, r24
    9514:	bf cf       	rjmp	.-130    	; 0x9494 <SD_Read_config_file+0x54>
            } else if(strstr(temp,"key") != 0){
    9516:	c8 01       	movw	r24, r16
    9518:	61 ec       	ldi	r22, 0xC1	; 193
    951a:	75 e2       	ldi	r23, 0x25	; 37
    951c:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <strstr>
    9520:	00 97       	sbiw	r24, 0x00	; 0
    9522:	a1 f0       	breq	.+40     	; 0x954c <SD_Read_config_file+0x10c>
                strtok(temp,"=");
    9524:	c8 01       	movw	r24, r16
    9526:	68 eb       	ldi	r22, 0xB8	; 184
    9528:	75 e2       	ldi	r23, 0x25	; 37
    952a:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
                strcpy(key,strtok(NULL,"="));
    952e:	80 e0       	ldi	r24, 0x00	; 0
    9530:	90 e0       	ldi	r25, 0x00	; 0
    9532:	68 eb       	ldi	r22, 0xB8	; 184
    9534:	75 e2       	ldi	r23, 0x25	; 37
    9536:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
    953a:	bc 01       	movw	r22, r24
    953c:	84 ec       	ldi	r24, 0xC4	; 196
    953e:	97 e4       	ldi	r25, 0x47	; 71
    9540:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <strcpy>
                keyRead = true;
    9544:	81 e0       	ldi	r24, 0x01	; 1
    9546:	80 93 26 2d 	sts	0x2D26, r24
    954a:	a4 cf       	rjmp	.-184    	; 0x9494 <SD_Read_config_file+0x54>
            } else if(strstr(temp,"port") != 0){
    954c:	c8 01       	movw	r24, r16
    954e:	65 ec       	ldi	r22, 0xC5	; 197
    9550:	75 e2       	ldi	r23, 0x25	; 37
    9552:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <strstr>
    9556:	00 97       	sbiw	r24, 0x00	; 0
    9558:	79 f0       	breq	.+30     	; 0x9578 <SD_Read_config_file+0x138>
                strtok(temp,"=");
    955a:	c8 01       	movw	r24, r16
    955c:	68 eb       	ldi	r22, 0xB8	; 184
    955e:	75 e2       	ldi	r23, 0x25	; 37
    9560:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
				strcpy(port,strtok(NULL,"="));
    9564:	80 e0       	ldi	r24, 0x00	; 0
    9566:	90 e0       	ldi	r25, 0x00	; 0
    9568:	68 eb       	ldi	r22, 0xB8	; 184
    956a:	75 e2       	ldi	r23, 0x25	; 37
    956c:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
    9570:	bc 01       	movw	r22, r24
    9572:	8c e5       	ldi	r24, 0x5C	; 92
    9574:	91 e5       	ldi	r25, 0x51	; 81
    9576:	8c c0       	rjmp	.+280    	; 0x9690 <SD_Read_config_file+0x250>
            } else if(strstr(temp,"auth") != 0){
    9578:	c8 01       	movw	r24, r16
    957a:	6a ec       	ldi	r22, 0xCA	; 202
    957c:	75 e2       	ldi	r23, 0x25	; 37
    957e:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <strstr>
    9582:	00 97       	sbiw	r24, 0x00	; 0
    9584:	a1 f0       	breq	.+40     	; 0x95ae <SD_Read_config_file+0x16e>
				strtok(temp,"=");
    9586:	c8 01       	movw	r24, r16
    9588:	68 eb       	ldi	r22, 0xB8	; 184
    958a:	75 e2       	ldi	r23, 0x25	; 37
    958c:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
                strcpy(auth,strtok(NULL,"="));
    9590:	80 e0       	ldi	r24, 0x00	; 0
    9592:	90 e0       	ldi	r25, 0x00	; 0
    9594:	68 eb       	ldi	r22, 0xB8	; 184
    9596:	75 e2       	ldi	r23, 0x25	; 37
    9598:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
    959c:	bc 01       	movw	r22, r24
    959e:	8d e7       	ldi	r24, 0x7D	; 125
    95a0:	9d e3       	ldi	r25, 0x3D	; 61
    95a2:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <strcpy>
				authRead = true;
    95a6:	81 e0       	ldi	r24, 0x01	; 1
    95a8:	80 93 24 2d 	sts	0x2D24, r24
    95ac:	73 cf       	rjmp	.-282    	; 0x9494 <SD_Read_config_file+0x54>
            } else if(strstr(temp,"user") != 0){
    95ae:	c8 01       	movw	r24, r16
    95b0:	6f ec       	ldi	r22, 0xCF	; 207
    95b2:	75 e2       	ldi	r23, 0x25	; 37
    95b4:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <strstr>
    95b8:	00 97       	sbiw	r24, 0x00	; 0
    95ba:	31 f1       	breq	.+76     	; 0x9608 <SD_Read_config_file+0x1c8>
                strtok(temp,"=");
    95bc:	c8 01       	movw	r24, r16
    95be:	68 eb       	ldi	r22, 0xB8	; 184
    95c0:	75 e2       	ldi	r23, 0x25	; 37
    95c2:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
                strcpy(user,strtok(NULL,"="));
    95c6:	80 e0       	ldi	r24, 0x00	; 0
    95c8:	90 e0       	ldi	r25, 0x00	; 0
    95ca:	68 eb       	ldi	r22, 0xB8	; 184
    95cc:	75 e2       	ldi	r23, 0x25	; 37
    95ce:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
    95d2:	bc 01       	movw	r22, r24
    95d4:	8f e5       	ldi	r24, 0x5F	; 95
    95d6:	96 e4       	ldi	r25, 0x46	; 70
    95d8:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <strcpy>
                for(uint8_t i = 0; i < strlen(user); i++){
    95dc:	f5 01       	movw	r30, r10
    95de:	01 90       	ld	r0, Z+
    95e0:	00 20       	and	r0, r0
    95e2:	e9 f7       	brne	.-6      	; 0x95de <SD_Read_config_file+0x19e>
    95e4:	31 97       	sbiw	r30, 0x01	; 1
    95e6:	ef 55       	subi	r30, 0x5F	; 95
    95e8:	f6 44       	sbci	r31, 0x46	; 70
    95ea:	20 e0       	ldi	r18, 0x00	; 0
    95ec:	07 c0       	rjmp	.+14     	; 0x95fc <SD_Read_config_file+0x1bc>
                    if(user[i] < ' '){
    95ee:	dc 01       	movw	r26, r24
    95f0:	a1 5a       	subi	r26, 0xA1	; 161
    95f2:	b9 4b       	sbci	r27, 0xB9	; 185
    95f4:	8c 91       	ld	r24, X
    95f6:	80 32       	cpi	r24, 0x20	; 32
    95f8:	68 f1       	brcs	.+90     	; 0x9654 <SD_Read_config_file+0x214>
                strcpy(auth,strtok(NULL,"="));
				authRead = true;
            } else if(strstr(temp,"user") != 0){
                strtok(temp,"=");
                strcpy(user,strtok(NULL,"="));
                for(uint8_t i = 0; i < strlen(user); i++){
    95fa:	2f 5f       	subi	r18, 0xFF	; 255
    95fc:	82 2f       	mov	r24, r18
    95fe:	90 e0       	ldi	r25, 0x00	; 0
    9600:	8e 17       	cp	r24, r30
    9602:	9f 07       	cpc	r25, r31
    9604:	a0 f3       	brcs	.-24     	; 0x95ee <SD_Read_config_file+0x1ae>
    9606:	46 cf       	rjmp	.-372    	; 0x9494 <SD_Read_config_file+0x54>
                    if(user[i] < ' '){
                        user[i] = 0;
                        break;
                    }
                }
            } else if(strstr(temp,"nickname") != 0){
    9608:	c8 01       	movw	r24, r16
    960a:	64 ed       	ldi	r22, 0xD4	; 212
    960c:	75 e2       	ldi	r23, 0x25	; 37
    960e:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <strstr>
    9612:	00 97       	sbiw	r24, 0x00	; 0
    9614:	41 f1       	breq	.+80     	; 0x9666 <SD_Read_config_file+0x226>
                strtok(temp,"=");
    9616:	c8 01       	movw	r24, r16
    9618:	68 eb       	ldi	r22, 0xB8	; 184
    961a:	75 e2       	ldi	r23, 0x25	; 37
    961c:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
	            strcpy(nickname,strtok(NULL,"="));
    9620:	80 e0       	ldi	r24, 0x00	; 0
    9622:	90 e0       	ldi	r25, 0x00	; 0
    9624:	68 eb       	ldi	r22, 0xB8	; 184
    9626:	75 e2       	ldi	r23, 0x25	; 37
    9628:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
    962c:	bc 01       	movw	r22, r24
    962e:	8e e8       	ldi	r24, 0x8E	; 142
    9630:	91 e5       	ldi	r25, 0x51	; 81
    9632:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <strcpy>
                for(uint8_t i = 0; i < strlen(nickname); i++){
    9636:	f6 01       	movw	r30, r12
    9638:	01 90       	ld	r0, Z+
    963a:	00 20       	and	r0, r0
    963c:	e9 f7       	brne	.-6      	; 0x9638 <SD_Read_config_file+0x1f8>
    963e:	31 97       	sbiw	r30, 0x01	; 1
    9640:	ee 58       	subi	r30, 0x8E	; 142
    9642:	f1 45       	sbci	r31, 0x51	; 81
    9644:	20 e0       	ldi	r18, 0x00	; 0
    9646:	09 c0       	rjmp	.+18     	; 0x965a <SD_Read_config_file+0x21a>
                    if(nickname[i] < ' '){
    9648:	dc 01       	movw	r26, r24
    964a:	a2 57       	subi	r26, 0x72	; 114
    964c:	be 4a       	sbci	r27, 0xAE	; 174
    964e:	8c 91       	ld	r24, X
    9650:	80 32       	cpi	r24, 0x20	; 32
    9652:	10 f4       	brcc	.+4      	; 0x9658 <SD_Read_config_file+0x218>
                        nickname[i] = 0;
    9654:	1c 92       	st	X, r1
    9656:	1e cf       	rjmp	.-452    	; 0x9494 <SD_Read_config_file+0x54>
                    }
                }
            } else if(strstr(temp,"nickname") != 0){
                strtok(temp,"=");
	            strcpy(nickname,strtok(NULL,"="));
                for(uint8_t i = 0; i < strlen(nickname); i++){
    9658:	2f 5f       	subi	r18, 0xFF	; 255
    965a:	82 2f       	mov	r24, r18
    965c:	90 e0       	ldi	r25, 0x00	; 0
    965e:	8e 17       	cp	r24, r30
    9660:	9f 07       	cpc	r25, r31
    9662:	90 f3       	brcs	.-28     	; 0x9648 <SD_Read_config_file+0x208>
    9664:	17 cf       	rjmp	.-466    	; 0x9494 <SD_Read_config_file+0x54>
                        nickname[i] = 0;
                        break;
                    }
                }
				
            } else if(strstr(temp,"server") != 0){
    9666:	c8 01       	movw	r24, r16
    9668:	6d ed       	ldi	r22, 0xDD	; 221
    966a:	75 e2       	ldi	r23, 0x25	; 37
    966c:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <strstr>
    9670:	00 97       	sbiw	r24, 0x00	; 0
    9672:	89 f0       	breq	.+34     	; 0x9696 <SD_Read_config_file+0x256>
                strtok(temp,"=");
    9674:	c8 01       	movw	r24, r16
    9676:	68 eb       	ldi	r22, 0xB8	; 184
    9678:	75 e2       	ldi	r23, 0x25	; 37
    967a:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
                strcpy(server,strtok(NULL,"="));
    967e:	80 e0       	ldi	r24, 0x00	; 0
    9680:	90 e0       	ldi	r25, 0x00	; 0
    9682:	68 eb       	ldi	r22, 0xB8	; 184
    9684:	75 e2       	ldi	r23, 0x25	; 37
    9686:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
    968a:	bc 01       	movw	r22, r24
    968c:	83 e7       	ldi	r24, 0x73	; 115
    968e:	96 e4       	ldi	r25, 0x46	; 70
    9690:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <strcpy>
    9694:	ff ce       	rjmp	.-514    	; 0x9494 <SD_Read_config_file+0x54>
            } else if(strstr(temp,"daylightTime") != 0){
    9696:	c8 01       	movw	r24, r16
    9698:	64 ee       	ldi	r22, 0xE4	; 228
    969a:	75 e2       	ldi	r23, 0x25	; 37
    969c:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <strstr>
    96a0:	00 97       	sbiw	r24, 0x00	; 0
    96a2:	79 f0       	breq	.+30     	; 0x96c2 <SD_Read_config_file+0x282>
                strtok(temp,"=");
    96a4:	c8 01       	movw	r24, r16
    96a6:	68 eb       	ldi	r22, 0xB8	; 184
    96a8:	75 e2       	ldi	r23, 0x25	; 37
    96aa:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
                strcpy(daylightTime,strtok(NULL,"="));
    96ae:	80 e0       	ldi	r24, 0x00	; 0
    96b0:	90 e0       	ldi	r25, 0x00	; 0
    96b2:	68 eb       	ldi	r22, 0xB8	; 184
    96b4:	75 e2       	ldi	r23, 0x25	; 37
    96b6:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
    96ba:	bc 01       	movw	r22, r24
    96bc:	88 ef       	ldi	r24, 0xF8	; 248
    96be:	96 e4       	ldi	r25, 0x46	; 70
    96c0:	e7 cf       	rjmp	.-50     	; 0x9690 <SD_Read_config_file+0x250>
            } else if(strstr(temp,"demoMode") != 0){
    96c2:	c8 01       	movw	r24, r16
    96c4:	61 ef       	ldi	r22, 0xF1	; 241
    96c6:	75 e2       	ldi	r23, 0x25	; 37
    96c8:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <strstr>
    96cc:	00 97       	sbiw	r24, 0x00	; 0
    96ce:	79 f0       	breq	.+30     	; 0x96ee <SD_Read_config_file+0x2ae>
                strtok(temp,"=");
    96d0:	c8 01       	movw	r24, r16
    96d2:	68 eb       	ldi	r22, 0xB8	; 184
    96d4:	75 e2       	ldi	r23, 0x25	; 37
    96d6:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
                strcpy(demoModeString,strtok(NULL,"="));
    96da:	80 e0       	ldi	r24, 0x00	; 0
    96dc:	90 e0       	ldi	r25, 0x00	; 0
    96de:	68 eb       	ldi	r22, 0xB8	; 184
    96e0:	75 e2       	ldi	r23, 0x25	; 37
    96e2:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
    96e6:	bc 01       	movw	r22, r24
    96e8:	89 e6       	ldi	r24, 0x69	; 105
    96ea:	96 e4       	ldi	r25, 0x46	; 70
    96ec:	d1 cf       	rjmp	.-94     	; 0x9690 <SD_Read_config_file+0x250>
            } else if(strstr(temp,"recordFast") != 0){
    96ee:	c8 01       	movw	r24, r16
    96f0:	6a ef       	ldi	r22, 0xFA	; 250
    96f2:	75 e2       	ldi	r23, 0x25	; 37
    96f4:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <strstr>
    96f8:	00 97       	sbiw	r24, 0x00	; 0
    96fa:	79 f0       	breq	.+30     	; 0x971a <SD_Read_config_file+0x2da>
                strtok(temp,"=");
    96fc:	c8 01       	movw	r24, r16
    96fe:	68 eb       	ldi	r22, 0xB8	; 184
    9700:	75 e2       	ldi	r23, 0x25	; 37
    9702:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
                strcpy(fastString,strtok(NULL,"="));
    9706:	80 e0       	ldi	r24, 0x00	; 0
    9708:	90 e0       	ldi	r25, 0x00	; 0
    970a:	68 eb       	ldi	r22, 0xB8	; 184
    970c:	75 e2       	ldi	r23, 0x25	; 37
    970e:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
    9712:	bc 01       	movw	r22, r24
    9714:	80 ec       	ldi	r24, 0xC0	; 192
    9716:	91 e5       	ldi	r25, 0x51	; 81
    9718:	bb cf       	rjmp	.-138    	; 0x9690 <SD_Read_config_file+0x250>
            } else if(strstr(temp,"zone") != 0){
    971a:	c8 01       	movw	r24, r16
    971c:	65 e0       	ldi	r22, 0x05	; 5
    971e:	76 e2       	ldi	r23, 0x26	; 38
    9720:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <strstr>
    9724:	00 97       	sbiw	r24, 0x00	; 0
    9726:	09 f4       	brne	.+2      	; 0x972a <SD_Read_config_file+0x2ea>
    9728:	b5 ce       	rjmp	.-662    	; 0x9494 <SD_Read_config_file+0x54>
				strtok(temp,"=");
    972a:	c8 01       	movw	r24, r16
    972c:	68 eb       	ldi	r22, 0xB8	; 184
    972e:	75 e2       	ldi	r23, 0x25	; 37
    9730:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
                memmove(zone,strtok(NULL,"="),4);
    9734:	80 e0       	ldi	r24, 0x00	; 0
    9736:	90 e0       	ldi	r25, 0x00	; 0
    9738:	68 eb       	ldi	r22, 0xB8	; 184
    973a:	75 e2       	ldi	r23, 0x25	; 37
    973c:	0e 94 23 4f 	call	0x9e46	; 0x9e46 <strtok>
    9740:	bc 01       	movw	r22, r24
    9742:	8c e5       	ldi	r24, 0x5C	; 92
    9744:	96 e2       	ldi	r25, 0x26	; 38
    9746:	44 e0       	ldi	r20, 0x04	; 4
    9748:	50 e0       	ldi	r21, 0x00	; 0
    974a:	0e 94 28 4f 	call	0x9e50	; 0x9e50 <memmove>
    974e:	20 e0       	ldi	r18, 0x00	; 0
    9750:	08 c0       	rjmp	.+16     	; 0x9762 <SD_Read_config_file+0x322>
                for(uint8_t i = 0;  i < strlen(zone); i++){
                    if(zone[i] < ' '){
    9752:	fc 01       	movw	r30, r24
    9754:	e4 5a       	subi	r30, 0xA4	; 164
    9756:	f9 4d       	sbci	r31, 0xD9	; 217
    9758:	80 81       	ld	r24, Z
    975a:	80 32       	cpi	r24, 0x20	; 32
    975c:	08 f4       	brcc	.+2      	; 0x9760 <SD_Read_config_file+0x320>
                        zone[i] = 0;
    975e:	10 82       	st	Z, r1
                strtok(temp,"=");
                strcpy(fastString,strtok(NULL,"="));
            } else if(strstr(temp,"zone") != 0){
				strtok(temp,"=");
                memmove(zone,strtok(NULL,"="),4);
                for(uint8_t i = 0;  i < strlen(zone); i++){
    9760:	2f 5f       	subi	r18, 0xFF	; 255
    9762:	f7 01       	movw	r30, r14
    9764:	01 90       	ld	r0, Z+
    9766:	00 20       	and	r0, r0
    9768:	e9 f7       	brne	.-6      	; 0x9764 <SD_Read_config_file+0x324>
    976a:	31 97       	sbiw	r30, 0x01	; 1
    976c:	ec 55       	subi	r30, 0x5C	; 92
    976e:	f6 42       	sbci	r31, 0x26	; 38
    9770:	82 2f       	mov	r24, r18
    9772:	90 e0       	ldi	r25, 0x00	; 0
    9774:	8e 17       	cp	r24, r30
    9776:	9f 07       	cpc	r25, r31
    9778:	60 f3       	brcs	.-40     	; 0x9752 <SD_Read_config_file+0x312>
                    if(zone[i] < ' '){
                        zone[i] = 0;
                    }
                }
                if(strcmp(zone,"EST") == 0){
    977a:	8c e5       	ldi	r24, 0x5C	; 92
    977c:	96 e2       	ldi	r25, 0x26	; 38
    977e:	6a e0       	ldi	r22, 0x0A	; 10
    9780:	76 e2       	ldi	r23, 0x26	; 38
    9782:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <strcmp>
    9786:	00 97       	sbiw	r24, 0x00	; 0
    9788:	11 f4       	brne	.+4      	; 0x978e <SD_Read_config_file+0x34e>
                    timeZoneShift = 5;
    978a:	85 e0       	ldi	r24, 0x05	; 5
    978c:	1e c0       	rjmp	.+60     	; 0x97ca <SD_Read_config_file+0x38a>
                    zoneChanged = true;
                } else if(strcmp(zone,"CST") == 0){
    978e:	8c e5       	ldi	r24, 0x5C	; 92
    9790:	96 e2       	ldi	r25, 0x26	; 38
    9792:	6e e0       	ldi	r22, 0x0E	; 14
    9794:	76 e2       	ldi	r23, 0x26	; 38
    9796:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <strcmp>
    979a:	00 97       	sbiw	r24, 0x00	; 0
    979c:	11 f4       	brne	.+4      	; 0x97a2 <SD_Read_config_file+0x362>
                    timeZoneShift = 6;
    979e:	86 e0       	ldi	r24, 0x06	; 6
    97a0:	14 c0       	rjmp	.+40     	; 0x97ca <SD_Read_config_file+0x38a>
                    zoneChanged = true;
                } else if(strcmp(zone,"MST") == 0){
    97a2:	8c e5       	ldi	r24, 0x5C	; 92
    97a4:	96 e2       	ldi	r25, 0x26	; 38
    97a6:	62 e1       	ldi	r22, 0x12	; 18
    97a8:	76 e2       	ldi	r23, 0x26	; 38
    97aa:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <strcmp>
    97ae:	00 97       	sbiw	r24, 0x00	; 0
    97b0:	11 f4       	brne	.+4      	; 0x97b6 <SD_Read_config_file+0x376>
                    timeZoneShift = 7;
    97b2:	87 e0       	ldi	r24, 0x07	; 7
    97b4:	0a c0       	rjmp	.+20     	; 0x97ca <SD_Read_config_file+0x38a>
                    zoneChanged = true;
                } else if(strcmp(zone,"PST") == 0){
    97b6:	8c e5       	ldi	r24, 0x5C	; 92
    97b8:	96 e2       	ldi	r25, 0x26	; 38
    97ba:	66 e1       	ldi	r22, 0x16	; 22
    97bc:	76 e2       	ldi	r23, 0x26	; 38
    97be:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <strcmp>
    97c2:	00 97       	sbiw	r24, 0x00	; 0
    97c4:	09 f0       	breq	.+2      	; 0x97c8 <SD_Read_config_file+0x388>
    97c6:	66 ce       	rjmp	.-820    	; 0x9494 <SD_Read_config_file+0x54>
                    timeZoneShift = 8;
    97c8:	88 e0       	ldi	r24, 0x08	; 8
    97ca:	80 93 23 2d 	sts	0x2D23, r24
                    zoneChanged = true;
    97ce:	81 e0       	ldi	r24, 0x01	; 1
    97d0:	80 93 28 2d 	sts	0x2D28, r24
    97d4:	5f ce       	rjmp	.-834    	; 0x9494 <SD_Read_config_file+0x54>
	        }
	    } else {
	        break;
	    }
	}
    if(server[strlen(server)-1] < 32){
    97d6:	e3 e7       	ldi	r30, 0x73	; 115
    97d8:	f6 e4       	ldi	r31, 0x46	; 70
    97da:	01 90       	ld	r0, Z+
    97dc:	00 20       	and	r0, r0
    97de:	e9 f7       	brne	.-6      	; 0x97da <SD_Read_config_file+0x39a>
    97e0:	32 97       	sbiw	r30, 0x02	; 2
    97e2:	80 81       	ld	r24, Z
    97e4:	80 32       	cpi	r24, 0x20	; 32
    97e6:	08 f4       	brcc	.+2      	; 0x97ea <SD_Read_config_file+0x3aa>
        server[strlen(server)-1] = 0;
    97e8:	10 82       	st	Z, r1
    }
	strcat(serverOpenCommand,server);
    97ea:	8a e2       	ldi	r24, 0x2A	; 42
    97ec:	96 e2       	ldi	r25, 0x26	; 38
    97ee:	63 e7       	ldi	r22, 0x73	; 115
    97f0:	76 e4       	ldi	r23, 0x46	; 70
    97f2:	0e 94 72 4f 	call	0x9ee4	; 0x9ee4 <strcat>
	strcat(serverOpenCommand," ");
    97f6:	8a e2       	ldi	r24, 0x2A	; 42
    97f8:	96 e2       	ldi	r25, 0x26	; 38
    97fa:	6a e1       	ldi	r22, 0x1A	; 26
    97fc:	76 e2       	ldi	r23, 0x26	; 38
    97fe:	0e 94 72 4f 	call	0x9ee4	; 0x9ee4 <strcat>
	strcat(serverOpenCommand,port);
    9802:	8a e2       	ldi	r24, 0x2A	; 42
    9804:	96 e2       	ldi	r25, 0x26	; 38
    9806:	6c e5       	ldi	r22, 0x5C	; 92
    9808:	71 e5       	ldi	r23, 0x51	; 81
    980a:	0e 94 72 4f 	call	0x9ee4	; 0x9ee4 <strcat>
	
    if((strstr(daylightTime,"true") != 0) && (zoneChanged)){
    980e:	88 ef       	ldi	r24, 0xF8	; 248
    9810:	96 e4       	ldi	r25, 0x46	; 70
    9812:	6c e1       	ldi	r22, 0x1C	; 28
    9814:	76 e2       	ldi	r23, 0x26	; 38
    9816:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <strstr>
    981a:	00 97       	sbiw	r24, 0x00	; 0
    981c:	49 f0       	breq	.+18     	; 0x9830 <SD_Read_config_file+0x3f0>
    981e:	80 91 28 2d 	lds	r24, 0x2D28
    9822:	88 23       	and	r24, r24
    9824:	29 f0       	breq	.+10     	; 0x9830 <SD_Read_config_file+0x3f0>
        timeZoneShift--;
    9826:	80 91 23 2d 	lds	r24, 0x2D23
    982a:	81 50       	subi	r24, 0x01	; 1
    982c:	80 93 23 2d 	sts	0x2D23, r24
    }
    if((strstr(demoModeString,"true") != 0)){
    9830:	89 e6       	ldi	r24, 0x69	; 105
    9832:	96 e4       	ldi	r25, 0x46	; 70
    9834:	6c e1       	ldi	r22, 0x1C	; 28
    9836:	76 e2       	ldi	r23, 0x26	; 38
    9838:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <strstr>
    983c:	00 97       	sbiw	r24, 0x00	; 0
    983e:	19 f0       	breq	.+6      	; 0x9846 <SD_Read_config_file+0x406>
        demoMode = true;
    9840:	81 e0       	ldi	r24, 0x01	; 1
    9842:	80 93 14 2d 	sts	0x2D14, r24
    }
    if((strstr(fastString,"true") != 0)){
    9846:	80 ec       	ldi	r24, 0xC0	; 192
    9848:	91 e5       	ldi	r25, 0x51	; 81
    984a:	6c e1       	ldi	r22, 0x1C	; 28
    984c:	76 e2       	ldi	r23, 0x26	; 38
    984e:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <strstr>
    9852:	00 97       	sbiw	r24, 0x00	; 0
    9854:	19 f0       	breq	.+6      	; 0x985c <SD_Read_config_file+0x41c>
        wantToRecordFast = true;
    9856:	81 e0       	ldi	r24, 0x01	; 1
    9858:	80 93 e2 2c 	sts	0x2CE2, r24
    }
}
    985c:	e2 96       	adiw	r28, 0x32	; 50
    985e:	cd bf       	out	0x3d, r28	; 61
    9860:	de bf       	out	0x3e, r29	; 62
    9862:	cf 91       	pop	r28
    9864:	df 91       	pop	r29
    9866:	1f 91       	pop	r17
    9868:	0f 91       	pop	r16
    986a:	ff 90       	pop	r15
    986c:	ef 90       	pop	r14
    986e:	df 90       	pop	r13
    9870:	cf 90       	pop	r12
    9872:	bf 90       	pop	r11
    9874:	af 90       	pop	r10
    9876:	08 95       	ret

00009878 <main>:


// ********************************** Main Program *********************************


int main(void){
    9878:	ff 92       	push	r15
    987a:	0f 93       	push	r16
    987c:	1f 93       	push	r17
    987e:	df 93       	push	r29
    9880:	cf 93       	push	r28
    9882:	0f 92       	push	r0
    9884:	cd b7       	in	r28, 0x3d	; 61
    9886:	de b7       	in	r29, 0x3e	; 62
	Clock_Init();
    9888:	0e 94 83 39 	call	0x7306	; 0x7306 <Clock_Init>
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    988c:	8f b7       	in	r24, 0x3f	; 63
    988e:	89 83       	std	Y+1, r24	; 0x01
    cli();
    9890:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    9892:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    9894:	21 e0       	ldi	r18, 0x01	; 1
    9896:	86 e9       	ldi	r24, 0x96	; 150
    9898:	90 e0       	ldi	r25, 0x00	; 0
    989a:	fc 01       	movw	r30, r24
    989c:	08 ed       	ldi	r16, 0xD8	; 216
    989e:	04 bf       	out	0x34, r16	; 52
    98a0:	20 83       	st	Z, r18
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
    98a2:	89 81       	ldd	r24, Y+1	; 0x01
    98a4:	8f bf       	out	0x3f, r24	; 63
	Disable_JTAG();
	getDeviceID();
    98a6:	0e 94 35 3a 	call	0x746a	; 0x746a <getDeviceID>
	display_init();
    98aa:	0e 94 4a 2d 	call	0x5a94	; 0x5a94 <display_init>
	Time_Init();
    98ae:	0e 94 1e 02 	call	0x43c	; 0x43c <Time_Init>
	Sensors_Init();
    98b2:	0e 94 2d 30 	call	0x605a	; 0x605a <Sensors_Init>
	Debug_Init(460800);
    98b6:	60 e0       	ldi	r22, 0x00	; 0
    98b8:	78 e0       	ldi	r23, 0x08	; 8
    98ba:	87 e0       	ldi	r24, 0x07	; 7
    98bc:	90 e0       	ldi	r25, 0x00	; 0
    98be:	0e 94 84 01 	call	0x308	; 0x308 <Debug_Init>
//___________________________________________

#include "button.h"

void Button_Init(uint8_t button){
	Button_Port.DIRCLR = (1 << button);
    98c2:	e0 ea       	ldi	r30, 0xA0	; 160
    98c4:	f6 e0       	ldi	r31, 0x06	; 6
    98c6:	82 e0       	ldi	r24, 0x02	; 2
    98c8:	82 83       	std	Z+2, r24	; 0x02
	PORTCFG.MPCMASK = (1 << button);
    98ca:	80 93 b0 00 	sts	0x00B0, r24
	Button_Port.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;
    98ce:	98 e3       	ldi	r25, 0x38	; 56
    98d0:	90 8b       	std	Z+16, r25	; 0x10
//___________________________________________

#include "button.h"

void Button_Init(uint8_t button){
	Button_Port.DIRCLR = (1 << button);
    98d2:	84 e0       	ldi	r24, 0x04	; 4
    98d4:	82 83       	std	Z+2, r24	; 0x02
	PORTCFG.MPCMASK = (1 << button);
    98d6:	80 93 b0 00 	sts	0x00B0, r24
	Button_Port.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;
    98da:	90 8b       	std	Z+16, r25	; 0x10
	Button_Init(Button_Pin);
	Button_Init(Switch_Pin);
	Rs232_Init();
    98dc:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Rs232_Init>
	Light_Init(LightAddress);
    98e0:	82 e7       	ldi	r24, 0x72	; 114
    98e2:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <Light_Init>
	Display_BackgroundWriter_Init();
    98e6:	0e 94 cf 39 	call	0x739e	; 0x739e <Display_BackgroundWriter_Init>
	SD_BackroundWriter_Init();
    98ea:	0e 94 de 39 	call	0x73bc	; 0x73bc <SD_BackroundWriter_Init>
    SD_Init();
    98ee:	0e 94 66 2c 	call	0x58cc	; 0x58cc <SD_Init>
}


void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    98f2:	80 91 a2 00 	lds	r24, 0x00A2
    98f6:	87 60       	ori	r24, 0x07	; 7
    98f8:	e0 ea       	ldi	r30, 0xA0	; 160
    98fa:	f0 e0       	ldi	r31, 0x00	; 0
    98fc:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    98fe:	78 94       	sei
	SD_BackroundWriter_Init();
    SD_Init();
	Interrupt_Init();
	
	
	if(Time_CheckVBatSystem() && (Time_Get() > 1000000)){				// grab time from rtc32 if enabled and valid
    9900:	0e 94 83 02 	call	0x506	; 0x506 <Time_CheckVBatSystem>
    9904:	88 23       	and	r24, r24
    9906:	d1 f1       	breq	.+116    	; 0x997c <main+0x104>
	return true;
}

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
    9908:	80 91 21 04 	lds	r24, 0x0421
    990c:	80 61       	ori	r24, 0x10	; 16
    990e:	e0 e2       	ldi	r30, 0x20	; 32
    9910:	f4 e0       	ldi	r31, 0x04	; 4
    9912:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
    9914:	e0 e2       	ldi	r30, 0x20	; 32
    9916:	f4 e0       	ldi	r31, 0x04	; 4
    9918:	80 91 21 04 	lds	r24, 0x0421
    991c:	84 fd       	sbrc	r24, 4
    991e:	fa cf       	rjmp	.-12     	; 0x9914 <main+0x9c>
	return RTC32.CNT;
    9920:	80 91 24 04 	lds	r24, 0x0424
    9924:	90 91 25 04 	lds	r25, 0x0425
    9928:	a0 91 26 04 	lds	r26, 0x0426
    992c:	b0 91 27 04 	lds	r27, 0x0427
    9930:	81 54       	subi	r24, 0x41	; 65
    9932:	92 44       	sbci	r25, 0x42	; 66
    9934:	af 40       	sbci	r26, 0x0F	; 15
    9936:	b0 40       	sbci	r27, 0x00	; 0
    9938:	08 f1       	brcs	.+66     	; 0x997c <main+0x104>
		timeIsValid = true;
    993a:	81 e0       	ldi	r24, 0x01	; 1
    993c:	80 93 6f 2d 	sts	0x2D6F, r24
		RTC32.INTCTRL = ( RTC32.INTCTRL & ~RTC32_COMPINTLVL_gm ) | RTC32_COMPINTLVL_LO_gc;
    9940:	80 91 22 04 	lds	r24, 0x0422
    9944:	83 7f       	andi	r24, 0xF3	; 243
    9946:	84 60       	ori	r24, 0x04	; 4
    9948:	82 83       	std	Z+2, r24	; 0x02
	return true;
}

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
    994a:	80 91 21 04 	lds	r24, 0x0421
    994e:	80 61       	ori	r24, 0x10	; 16
    9950:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
    9952:	80 91 21 04 	lds	r24, 0x0421
    9956:	84 fd       	sbrc	r24, 4
    9958:	fc cf       	rjmp	.-8      	; 0x9952 <main+0xda>
	return RTC32.CNT;
    995a:	80 91 24 04 	lds	r24, 0x0424
    995e:	90 91 25 04 	lds	r25, 0x0425
    9962:	a0 91 26 04 	lds	r26, 0x0426
    9966:	b0 91 27 04 	lds	r27, 0x0427
		UNIX_Time = Time_Get();
    996a:	80 93 1a 2d 	sts	0x2D1A, r24
    996e:	90 93 1b 2d 	sts	0x2D1B, r25
    9972:	a0 93 1c 2d 	sts	0x2D1C, r26
    9976:	b0 93 1d 2d 	sts	0x2D1D, r27
    997a:	15 c0       	rjmp	.+42     	; 0x99a6 <main+0x12e>
	} else {
		VBAT.CTRL = VBAT_ACCEN_bm;
    997c:	82 e0       	ldi	r24, 0x02	; 2
    997e:	80 93 f0 00 	sts	0x00F0, r24
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    9982:	8f b7       	in	r24, 0x3f	; 63
    9984:	89 83       	std	Y+1, r24	; 0x01
    cli();
    9986:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    9988:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    998a:	21 e0       	ldi	r18, 0x01	; 1
    998c:	80 ef       	ldi	r24, 0xF0	; 240
    998e:	90 e0       	ldi	r25, 0x00	; 0
    9990:	fc 01       	movw	r30, r24
    9992:	08 ed       	ldi	r16, 0xD8	; 216
    9994:	04 bf       	out	0x34, r16	; 52
    9996:	20 83       	st	Z, r18
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
    9998:	89 81       	ldd	r24, Y+1	; 0x01
    999a:	8f bf       	out	0x3f, r24	; 63
		CCPWrite(&VBAT.CTRL, VBAT_RESET_bm);		// Reset battery backup
		RTC32.CTRL = 0;								// disable RTC32
    999c:	10 92 20 04 	sts	0x0420, r1
		RTC32.INTCTRL = 0;
    99a0:	e0 e2       	ldi	r30, 0x20	; 32
    99a2:	f4 e0       	ldi	r31, 0x04	; 4
    99a4:	12 82       	std	Z+2, r1	; 0x02
	
	}
	
	display_showSplashScreen(false,false,false);
    99a6:	80 e0       	ldi	r24, 0x00	; 0
    99a8:	60 e0       	ldi	r22, 0x00	; 0
    99aa:	40 e0       	ldi	r20, 0x00	; 0
    99ac:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <display_showSplashScreen>
    99b0:	88 e8       	ldi	r24, 0x88	; 136
    99b2:	93 e1       	ldi	r25, 0x13	; 19
    99b4:	20 e7       	ldi	r18, 0x70	; 112
    99b6:	31 e0       	ldi	r19, 0x01	; 1
    99b8:	f9 01       	movw	r30, r18
    99ba:	31 97       	sbiw	r30, 0x01	; 1
    99bc:	f1 f7       	brne	.-4      	; 0x99ba <main+0x142>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    99be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    99c0:	d9 f7       	brne	.-10     	; 0x99b8 <main+0x140>
    99c2:	06 c0       	rjmp	.+12     	; 0x99d0 <main+0x158>
    99c4:	f8 01       	movw	r30, r16
    99c6:	31 97       	sbiw	r30, 0x01	; 1
    99c8:	f1 f7       	brne	.-4      	; 0x99c6 <main+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    99ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    99cc:	d9 f7       	brne	.-10     	; 0x99c4 <main+0x14c>
    99ce:	02 c0       	rjmp	.+4      	; 0x99d4 <main+0x15c>
    99d0:	00 e7       	ldi	r16, 0x70	; 112
    99d2:	11 e0       	ldi	r17, 0x01	; 1
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	if((SD_CD_Port.IN & (1<<SD_CD)) > 0 ){
    99d4:	80 91 68 06 	lds	r24, 0x0668
    99d8:	80 ff       	sbrs	r24, 0
    99da:	08 c0       	rjmp	.+16     	; 0x99ec <main+0x174>
	_delay_ms(500);
	
	while(!SD_Inserted()){
		display_showSplashScreen(true,false,false);			// waiting for SD card
    99dc:	81 e0       	ldi	r24, 0x01	; 1
    99de:	60 e0       	ldi	r22, 0x00	; 0
    99e0:	40 e0       	ldi	r20, 0x00	; 0
    99e2:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <display_showSplashScreen>
    99e6:	84 ec       	ldi	r24, 0xC4	; 196
    99e8:	99 e0       	ldi	r25, 0x09	; 9
    99ea:	ec cf       	rjmp	.-40     	; 0x99c4 <main+0x14c>
    99ec:	80 e1       	ldi	r24, 0x10	; 16
    99ee:	97 e2       	ldi	r25, 0x27	; 39
    99f0:	20 e7       	ldi	r18, 0x70	; 112
    99f2:	31 e0       	ldi	r19, 0x01	; 1
    99f4:	f9 01       	movw	r30, r18
    99f6:	31 97       	sbiw	r30, 0x01	; 1
    99f8:	f1 f7       	brne	.-4      	; 0x99f6 <main+0x17e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    99fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    99fc:	d9 f7       	brne	.-10     	; 0x99f4 <main+0x17c>
		_delay_ms(250);
	}
	_delay_ms(1000);
	SD_Read_config_file();
    99fe:	0e 94 20 4a 	call	0x9440	; 0x9440 <SD_Read_config_file>

    if(demoMode){
    9a02:	80 91 14 2d 	lds	r24, 0x2D14
    9a06:	88 23       	and	r24, r24
    9a08:	39 f4       	brne	.+14     	; 0x9a18 <main+0x1a0>
    9a0a:	28 e8       	ldi	r18, 0x88	; 136
    9a0c:	33 e1       	ldi	r19, 0x13	; 19
	}
	
Reset:
	
	_delay_ms(500);
	okToDisplayGUI = true;
    9a0e:	ff 24       	eor	r15, r15
    9a10:	f3 94       	inc	r15
    9a12:	00 e7       	ldi	r16, 0x70	; 112
    9a14:	11 e0       	ldi	r17, 0x01	; 1
    9a16:	16 c0       	rjmp	.+44     	; 0x9a44 <main+0x1cc>
	}
	_delay_ms(1000);
	SD_Read_config_file();

    if(demoMode){
		display_showSplashScreen(false,false,true);
    9a18:	80 e0       	ldi	r24, 0x00	; 0
    9a1a:	60 e0       	ldi	r22, 0x00	; 0
    9a1c:	41 e0       	ldi	r20, 0x01	; 1
    9a1e:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <display_showSplashScreen>
    9a22:	80 e1       	ldi	r24, 0x10	; 16
    9a24:	97 e2       	ldi	r25, 0x27	; 39
    9a26:	20 e7       	ldi	r18, 0x70	; 112
    9a28:	31 e0       	ldi	r19, 0x01	; 1
    9a2a:	f9 01       	movw	r30, r18
    9a2c:	31 97       	sbiw	r30, 0x01	; 1
    9a2e:	f1 f7       	brne	.-4      	; 0x9a2c <main+0x1b4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9a30:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9a32:	d9 f7       	brne	.-10     	; 0x9a2a <main+0x1b2>
		_delay_ms(1000);
		display_clearScreen();
    9a34:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <display_clearScreen>
    9a38:	ff cf       	rjmp	.-2      	; 0x9a38 <main+0x1c0>
    9a3a:	c8 01       	movw	r24, r16
    9a3c:	01 97       	sbiw	r24, 0x01	; 1
    9a3e:	f1 f7       	brne	.-4      	; 0x9a3c <main+0x1c4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9a40:	21 50       	subi	r18, 0x01	; 1
    9a42:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9a44:	21 15       	cp	r18, r1
    9a46:	31 05       	cpc	r19, r1
    9a48:	c1 f7       	brne	.-16     	; 0x9a3a <main+0x1c2>
	}
	
Reset:
	
	_delay_ms(500);
	okToDisplayGUI = true;
    9a4a:	f0 92 75 2d 	sts	0x2D75, r15
    9a4e:	88 ee       	ldi	r24, 0xE8	; 232
    9a50:	93 e0       	ldi	r25, 0x03	; 3
    9a52:	f8 01       	movw	r30, r16
    9a54:	31 97       	sbiw	r30, 0x01	; 1
    9a56:	f1 f7       	brne	.-4      	; 0x9a54 <main+0x1dc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9a58:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9a5a:	d9 f7       	brne	.-10     	; 0x9a52 <main+0x1da>
	_delay_ms(100);	
	connected = false;
    9a5c:	10 92 62 2d 	sts	0x2D62, r1
	Uploader_connectToComputer();
    9a60:	0e 94 5b 43 	call	0x86b6	; 0x86b6 <Uploader_connectToComputer>
	connected = true;
    9a64:	f0 92 62 2d 	sts	0x2D62, r15
	
    while(true){
		if(!Uploader_Update()){
    9a68:	0e 94 2c 45 	call	0x8a58	; 0x8a58 <Uploader_Update>
    9a6c:	88 23       	and	r24, r24
    9a6e:	e1 f7       	brne	.-8      	; 0x9a68 <main+0x1f0>
    9a70:	28 e8       	ldi	r18, 0x88	; 136
    9a72:	33 e1       	ldi	r19, 0x13	; 19
    9a74:	e2 cf       	rjmp	.-60     	; 0x9a3a <main+0x1c2>

00009a76 <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const char* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    9a76:	2f 92       	push	r2
    9a78:	3f 92       	push	r3
    9a7a:	4f 92       	push	r4
    9a7c:	5f 92       	push	r5
    9a7e:	6f 92       	push	r6
    9a80:	7f 92       	push	r7
    9a82:	8f 92       	push	r8
    9a84:	9f 92       	push	r9
    9a86:	af 92       	push	r10
    9a88:	bf 92       	push	r11
    9a8a:	cf 92       	push	r12
    9a8c:	df 92       	push	r13
    9a8e:	ef 92       	push	r14
    9a90:	ff 92       	push	r15
    9a92:	0f 93       	push	r16
    9a94:	1f 93       	push	r17
    9a96:	df 93       	push	r29
    9a98:	cf 93       	push	r28
    9a9a:	cd b7       	in	r28, 0x3d	; 61
    9a9c:	de b7       	in	r29, 0x3e	; 62
    9a9e:	63 97       	sbiw	r28, 0x13	; 19
    9aa0:	cd bf       	out	0x3d, r28	; 61
    9aa2:	de bf       	out	0x3e, r29	; 62
    9aa4:	6b a4       	ldd	r6, Y+43	; 0x2b
    9aa6:	7c a4       	ldd	r7, Y+44	; 0x2c
    9aa8:	8e 01       	movw	r16, r28
    9aaa:	03 5d       	subi	r16, 0xD3	; 211
    9aac:	1f 4f       	sbci	r17, 0xFF	; 255
    9aae:	19 8a       	std	Y+17, r1	; 0x11
    9ab0:	1a 8a       	std	Y+18, r1	; 0x12
    9ab2:	20 e0       	ldi	r18, 0x00	; 0
    9ab4:	30 e0       	ldi	r19, 0x00	; 0


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    9ab6:	d3 01       	movw	r26, r6
    9ab8:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    9aba:	88 23       	and	r24, r24
    9abc:	09 f4       	brne	.+2      	; 0x9ac0 <f_printf+0x4a>
    9abe:	17 c1       	rjmp	.+558    	; 0x9cee <f_printf+0x278>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    9ac0:	08 94       	sec
    9ac2:	61 1c       	adc	r6, r1
    9ac4:	71 1c       	adc	r7, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape cahracter */
    9ac6:	85 32       	cpi	r24, 0x25	; 37
    9ac8:	71 f0       	breq	.+28     	; 0x9ae6 <f_printf+0x70>
			cc = f_putc(c, fil);
    9aca:	90 e0       	ldi	r25, 0x00	; 0
    9acc:	69 a5       	ldd	r22, Y+41	; 0x29
    9ace:	7a a5       	ldd	r23, Y+42	; 0x2a
    9ad0:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <f_putc>
    9ad4:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    9ad6:	bf ef       	ldi	r27, 0xFF	; 255
    9ad8:	8f 3f       	cpi	r24, 0xFF	; 255
    9ada:	9b 07       	cpc	r25, r27
    9adc:	11 f4       	brne	.+4      	; 0x9ae2 <f_printf+0x6c>
    9ade:	48 01       	movw	r8, r16
    9ae0:	fa c0       	rjmp	.+500    	; 0x9cd6 <f_printf+0x260>
    9ae2:	48 01       	movw	r8, r16
    9ae4:	4c c0       	rjmp	.+152    	; 0x9b7e <f_printf+0x108>
			continue;
		}
		w = f = 0;
		c = *str++;
    9ae6:	d3 01       	movw	r26, r6
    9ae8:	ed 91       	ld	r30, X+
    9aea:	3d 01       	movw	r6, r26
		if (c == '0') {				/* Flag: '0' padding */
    9aec:	e0 33       	cpi	r30, 0x30	; 48
    9aee:	11 f0       	breq	.+4      	; 0x9af4 <f_printf+0x7e>
    9af0:	1b 8a       	std	Y+19, r1	; 0x13
    9af2:	04 c0       	rjmp	.+8      	; 0x9afc <f_printf+0x86>
			f = 1; c = *str++;
    9af4:	ed 91       	ld	r30, X+
    9af6:	3d 01       	movw	r6, r26
    9af8:	b1 e0       	ldi	r27, 0x01	; 1
    9afa:	bb 8b       	std	Y+19, r27	; 0x13
    9afc:	aa 24       	eor	r10, r10
    9afe:	bb 24       	eor	r11, r11
    9b00:	13 c0       	rjmp	.+38     	; 0x9b28 <f_printf+0xb2>
		}
		while (c >= '0' && c <= '9') {	/* Precision */
			w = w * 10 + (c - '0');
    9b02:	c5 01       	movw	r24, r10
    9b04:	53 e0       	ldi	r21, 0x03	; 3
    9b06:	88 0f       	add	r24, r24
    9b08:	99 1f       	adc	r25, r25
    9b0a:	5a 95       	dec	r21
    9b0c:	e1 f7       	brne	.-8      	; 0x9b06 <f_printf+0x90>
    9b0e:	aa 0c       	add	r10, r10
    9b10:	bb 1c       	adc	r11, r11
    9b12:	a8 0e       	add	r10, r24
    9b14:	b9 1e       	adc	r11, r25
    9b16:	ae 0e       	add	r10, r30
    9b18:	b1 1c       	adc	r11, r1
    9b1a:	e0 ed       	ldi	r30, 0xD0	; 208
    9b1c:	ff ef       	ldi	r31, 0xFF	; 255
    9b1e:	ae 0e       	add	r10, r30
    9b20:	bf 1e       	adc	r11, r31
			c = *str++;
    9b22:	d3 01       	movw	r26, r6
    9b24:	ed 91       	ld	r30, X+
    9b26:	3d 01       	movw	r6, r26
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (c >= '0' && c <= '9') {	/* Precision */
    9b28:	8e 2f       	mov	r24, r30
    9b2a:	80 53       	subi	r24, 0x30	; 48
    9b2c:	8a 30       	cpi	r24, 0x0A	; 10
    9b2e:	48 f3       	brcs	.-46     	; 0x9b02 <f_printf+0x8c>
			w = w * 10 + (c - '0');
			c = *str++;
		}
		if (c == 'l') {				/* Prefix: Size is long int */
    9b30:	ec 36       	cpi	r30, 0x6C	; 108
    9b32:	31 f4       	brne	.+12     	; 0x9b40 <f_printf+0xca>
			f |= 2; c = *str++;
    9b34:	bb 89       	ldd	r27, Y+19	; 0x13
    9b36:	b2 60       	ori	r27, 0x02	; 2
    9b38:	bb 8b       	std	Y+19, r27	; 0x13
    9b3a:	d3 01       	movw	r26, r6
    9b3c:	ed 91       	ld	r30, X+
    9b3e:	3d 01       	movw	r6, r26
		}
		if (c == 's') {				/* Type is string */
    9b40:	e3 37       	cpi	r30, 0x73	; 115
    9b42:	49 f4       	brne	.+18     	; 0x9b56 <f_printf+0xe0>
			cc = f_puts(va_arg(arp, char*), fil);
    9b44:	32 e0       	ldi	r19, 0x02	; 2
    9b46:	83 2e       	mov	r8, r19
    9b48:	91 2c       	mov	r9, r1
    9b4a:	80 0e       	add	r8, r16
    9b4c:	91 1e       	adc	r9, r17
    9b4e:	f8 01       	movw	r30, r16
    9b50:	80 81       	ld	r24, Z
    9b52:	91 81       	ldd	r25, Z+1	; 0x01
    9b54:	bb c0       	rjmp	.+374    	; 0x9ccc <f_printf+0x256>
			continue;
		}
		if (c == 'c') {				/* Type is character */
    9b56:	e3 36       	cpi	r30, 0x63	; 99
    9b58:	a9 f4       	brne	.+42     	; 0x9b84 <f_printf+0x10e>
			cc = f_putc(va_arg(arp, int), fil);
    9b5a:	22 e0       	ldi	r18, 0x02	; 2
    9b5c:	82 2e       	mov	r8, r18
    9b5e:	91 2c       	mov	r9, r1
    9b60:	80 0e       	add	r8, r16
    9b62:	91 1e       	adc	r9, r17
    9b64:	d8 01       	movw	r26, r16
    9b66:	8d 91       	ld	r24, X+
    9b68:	9c 91       	ld	r25, X
    9b6a:	69 a5       	ldd	r22, Y+41	; 0x29
    9b6c:	7a a5       	ldd	r23, Y+42	; 0x2a
    9b6e:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <f_putc>
    9b72:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    9b74:	bf ef       	ldi	r27, 0xFF	; 255
    9b76:	8f 3f       	cpi	r24, 0xFF	; 255
    9b78:	9b 07       	cpc	r25, r27
    9b7a:	09 f4       	brne	.+2      	; 0x9b7e <f_printf+0x108>
    9b7c:	ac c0       	rjmp	.+344    	; 0x9cd6 <f_printf+0x260>
    9b7e:	21 e0       	ldi	r18, 0x01	; 1
    9b80:	30 e0       	ldi	r19, 0x00	; 0
    9b82:	a9 c0       	rjmp	.+338    	; 0x9cd6 <f_printf+0x260>
			continue;
		}
		r = 0;
		if (c == 'd') r = 10;		/* Type is signed decimal */
    9b84:	e4 36       	cpi	r30, 0x64	; 100
    9b86:	39 f0       	breq	.+14     	; 0x9b96 <f_printf+0x120>
		if (c == 'u') r = 10;		/* Type is unsigned decimal */
    9b88:	e5 37       	cpi	r30, 0x75	; 117
    9b8a:	29 f0       	breq	.+10     	; 0x9b96 <f_printf+0x120>
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
    9b8c:	e8 35       	cpi	r30, 0x58	; 88
    9b8e:	09 f0       	breq	.+2      	; 0x9b92 <f_printf+0x11c>
    9b90:	ae c0       	rjmp	.+348    	; 0x9cee <f_printf+0x278>
    9b92:	20 e1       	ldi	r18, 0x10	; 16
    9b94:	01 c0       	rjmp	.+2      	; 0x9b98 <f_printf+0x122>
    9b96:	2a e0       	ldi	r18, 0x0A	; 10
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
    9b98:	fb 89       	ldd	r31, Y+19	; 0x13
    9b9a:	f1 ff       	sbrs	r31, 1
    9b9c:	0d c0       	rjmp	.+26     	; 0x9bb8 <f_printf+0x142>
			val = (ULONG)va_arg(arp, long);
    9b9e:	94 e0       	ldi	r25, 0x04	; 4
    9ba0:	89 2e       	mov	r8, r25
    9ba2:	91 2c       	mov	r9, r1
    9ba4:	80 0e       	add	r8, r16
    9ba6:	91 1e       	adc	r9, r17
    9ba8:	d8 01       	movw	r26, r16
    9baa:	ed 90       	ld	r14, X+
    9bac:	fd 90       	ld	r15, X+
    9bae:	0d 91       	ld	r16, X+
    9bb0:	1c 91       	ld	r17, X
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
		}
		/* Put numeral string */
		if (c == 'd') {
    9bb2:	e4 36       	cpi	r30, 0x64	; 100
    9bb4:	09 f5       	brne	.+66     	; 0x9bf8 <f_printf+0x182>
    9bb6:	13 c0       	rjmp	.+38     	; 0x9bde <f_printf+0x168>
    9bb8:	c8 01       	movw	r24, r16
    9bba:	02 96       	adiw	r24, 0x02	; 2
    9bbc:	d8 01       	movw	r26, r16
    9bbe:	6d 91       	ld	r22, X+
    9bc0:	7c 91       	ld	r23, X
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
			val = (ULONG)va_arg(arp, long);
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
    9bc2:	e4 36       	cpi	r30, 0x64	; 100
    9bc4:	39 f4       	brne	.+14     	; 0x9bd4 <f_printf+0x15e>
    9bc6:	4c 01       	movw	r8, r24
    9bc8:	7b 01       	movw	r14, r22
    9bca:	00 27       	eor	r16, r16
    9bcc:	f7 fc       	sbrc	r15, 7
    9bce:	00 95       	com	r16
    9bd0:	10 2f       	mov	r17, r16
    9bd2:	05 c0       	rjmp	.+10     	; 0x9bde <f_printf+0x168>
    9bd4:	4c 01       	movw	r8, r24
    9bd6:	7b 01       	movw	r14, r22
    9bd8:	00 e0       	ldi	r16, 0x00	; 0
    9bda:	10 e0       	ldi	r17, 0x00	; 0
    9bdc:	0d c0       	rjmp	.+26     	; 0x9bf8 <f_printf+0x182>
		}
		/* Put numeral string */
		if (c == 'd') {
			if (val & 0x80000000) {
    9bde:	17 ff       	sbrs	r17, 7
    9be0:	0b c0       	rjmp	.+22     	; 0x9bf8 <f_printf+0x182>
				val = 0 - val;
    9be2:	10 95       	com	r17
    9be4:	00 95       	com	r16
    9be6:	f0 94       	com	r15
    9be8:	e0 94       	com	r14
    9bea:	e1 1c       	adc	r14, r1
    9bec:	f1 1c       	adc	r15, r1
    9bee:	01 1d       	adc	r16, r1
    9bf0:	11 1d       	adc	r17, r1
				f |= 4;
    9bf2:	bb 89       	ldd	r27, Y+19	; 0x13
    9bf4:	b4 60       	ori	r27, 0x04	; 4
    9bf6:	bb 8b       	std	Y+19, r27	; 0x13
			}
		}
		i = sizeof(s) - 1; s[i] = 0;
    9bf8:	18 8a       	std	Y+16, r1	; 0x10
    9bfa:	8f e0       	ldi	r24, 0x0F	; 15
    9bfc:	c8 2e       	mov	r12, r24
    9bfe:	d1 2c       	mov	r13, r1
		do {
			c = (UCHAR)(val % r + '0');
    9c00:	22 2e       	mov	r2, r18
    9c02:	33 24       	eor	r3, r3
    9c04:	44 24       	eor	r4, r4
    9c06:	55 24       	eor	r5, r5
    9c08:	c8 01       	movw	r24, r16
    9c0a:	b7 01       	movw	r22, r14
    9c0c:	a2 01       	movw	r20, r4
    9c0e:	91 01       	movw	r18, r2
    9c10:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    9c14:	86 2f       	mov	r24, r22
    9c16:	80 5d       	subi	r24, 0xD0	; 208
			if (c > '9') c += 7;
    9c18:	8a 33       	cpi	r24, 0x3A	; 58
    9c1a:	08 f0       	brcs	.+2      	; 0x9c1e <f_printf+0x1a8>
    9c1c:	89 5f       	subi	r24, 0xF9	; 249
			s[--i] = c;
    9c1e:	08 94       	sec
    9c20:	c1 08       	sbc	r12, r1
    9c22:	d1 08       	sbc	r13, r1
    9c24:	e1 e0       	ldi	r30, 0x01	; 1
    9c26:	f0 e0       	ldi	r31, 0x00	; 0
    9c28:	ec 0f       	add	r30, r28
    9c2a:	fd 1f       	adc	r31, r29
    9c2c:	ec 0d       	add	r30, r12
    9c2e:	fd 1d       	adc	r31, r13
    9c30:	80 83       	st	Z, r24
			val /= r;
		} while (i && val);
    9c32:	c1 14       	cp	r12, r1
    9c34:	d1 04       	cpc	r13, r1
    9c36:	e9 f0       	breq	.+58     	; 0x9c72 <f_printf+0x1fc>
		i = sizeof(s) - 1; s[i] = 0;
		do {
			c = (UCHAR)(val % r + '0');
			if (c > '9') c += 7;
			s[--i] = c;
			val /= r;
    9c38:	c8 01       	movw	r24, r16
    9c3a:	b7 01       	movw	r22, r14
    9c3c:	a2 01       	movw	r20, r4
    9c3e:	91 01       	movw	r18, r2
    9c40:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    9c44:	c9 01       	movw	r24, r18
    9c46:	da 01       	movw	r26, r20
    9c48:	7c 01       	movw	r14, r24
    9c4a:	8d 01       	movw	r16, r26
		} while (i && val);
    9c4c:	e1 14       	cp	r14, r1
    9c4e:	f1 04       	cpc	r15, r1
    9c50:	01 05       	cpc	r16, r1
    9c52:	11 05       	cpc	r17, r1
    9c54:	c9 f6       	brne	.-78     	; 0x9c08 <f_printf+0x192>
		if (i && (f & 4)) s[--i] = '-';
    9c56:	eb 89       	ldd	r30, Y+19	; 0x13
    9c58:	e2 ff       	sbrs	r30, 2
    9c5a:	0b c0       	rjmp	.+22     	; 0x9c72 <f_printf+0x1fc>
    9c5c:	08 94       	sec
    9c5e:	c1 08       	sbc	r12, r1
    9c60:	d1 08       	sbc	r13, r1
    9c62:	e1 e0       	ldi	r30, 0x01	; 1
    9c64:	f0 e0       	ldi	r31, 0x00	; 0
    9c66:	ec 0f       	add	r30, r28
    9c68:	fd 1f       	adc	r31, r29
    9c6a:	ec 0d       	add	r30, r12
    9c6c:	fd 1d       	adc	r31, r13
    9c6e:	4d e2       	ldi	r20, 0x2D	; 45
    9c70:	40 83       	st	Z, r20
		w = sizeof(s) - 1 - w;
    9c72:	8f e0       	ldi	r24, 0x0F	; 15
    9c74:	90 e0       	ldi	r25, 0x00	; 0
    9c76:	8a 19       	sub	r24, r10
    9c78:	9b 09       	sbc	r25, r11
    9c7a:	08 94       	sec
    9c7c:	c1 08       	sbc	r12, r1
    9c7e:	d1 08       	sbc	r13, r1
    9c80:	e1 e0       	ldi	r30, 0x01	; 1
    9c82:	f0 e0       	ldi	r31, 0x00	; 0
    9c84:	ec 0f       	add	r30, r28
    9c86:	fd 1f       	adc	r31, r29
    9c88:	ec 0d       	add	r30, r12
    9c8a:	fd 1d       	adc	r31, r13
    9c8c:	08 94       	sec
    9c8e:	c1 1c       	adc	r12, r1
    9c90:	d1 1c       	adc	r13, r1
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
    9c92:	ab 89       	ldd	r26, Y+19	; 0x13
    9c94:	2a 2f       	mov	r18, r26
    9c96:	30 e0       	ldi	r19, 0x00	; 0
    9c98:	21 70       	andi	r18, 0x01	; 1
    9c9a:	30 70       	andi	r19, 0x00	; 0
    9c9c:	0b c0       	rjmp	.+22     	; 0x9cb4 <f_printf+0x23e>
    9c9e:	08 94       	sec
    9ca0:	c1 08       	sbc	r12, r1
    9ca2:	d1 08       	sbc	r13, r1
    9ca4:	21 15       	cp	r18, r1
    9ca6:	31 05       	cpc	r19, r1
    9ca8:	11 f4       	brne	.+4      	; 0x9cae <f_printf+0x238>
    9caa:	40 e2       	ldi	r20, 0x20	; 32
    9cac:	01 c0       	rjmp	.+2      	; 0x9cb0 <f_printf+0x23a>
    9cae:	40 e3       	ldi	r20, 0x30	; 48
    9cb0:	40 83       	st	Z, r20
    9cb2:	31 97       	sbiw	r30, 0x01	; 1
    9cb4:	c1 14       	cp	r12, r1
    9cb6:	d1 04       	cpc	r13, r1
    9cb8:	19 f0       	breq	.+6      	; 0x9cc0 <f_printf+0x24a>
    9cba:	8c 15       	cp	r24, r12
    9cbc:	9d 05       	cpc	r25, r13
    9cbe:	7c f3       	brlt	.-34     	; 0x9c9e <f_printf+0x228>
		cc = f_puts(&s[i], fil);
    9cc0:	81 e0       	ldi	r24, 0x01	; 1
    9cc2:	90 e0       	ldi	r25, 0x00	; 0
    9cc4:	8c 0f       	add	r24, r28
    9cc6:	9d 1f       	adc	r25, r29
    9cc8:	8c 0d       	add	r24, r12
    9cca:	9d 1d       	adc	r25, r13
    9ccc:	69 a5       	ldd	r22, Y+41	; 0x29
    9cce:	7a a5       	ldd	r23, Y+42	; 0x2a
    9cd0:	0e 94 76 2b 	call	0x56ec	; 0x56ec <f_puts>
    9cd4:	9c 01       	movw	r18, r24
	int i, w, res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    9cd6:	e9 89       	ldd	r30, Y+17	; 0x11
    9cd8:	fa 89       	ldd	r31, Y+18	; 0x12
    9cda:	e2 0f       	add	r30, r18
    9cdc:	f3 1f       	adc	r31, r19
    9cde:	e9 8b       	std	Y+17, r30	; 0x11
    9ce0:	fa 8b       	std	Y+18, r31	; 0x12
    9ce2:	ff ef       	ldi	r31, 0xFF	; 255
    9ce4:	2f 3f       	cpi	r18, 0xFF	; 255
    9ce6:	3f 07       	cpc	r19, r31
    9ce8:	41 f0       	breq	.+16     	; 0x9cfa <f_printf+0x284>
    9cea:	84 01       	movw	r16, r8
    9cec:	e4 ce       	rjmp	.-568    	; 0x9ab6 <f_printf+0x40>
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
		cc = f_puts(&s[i], fil);
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    9cee:	4f ef       	ldi	r20, 0xFF	; 255
    9cf0:	2f 3f       	cpi	r18, 0xFF	; 255
    9cf2:	34 07       	cpc	r19, r20
    9cf4:	11 f0       	breq	.+4      	; 0x9cfa <f_printf+0x284>
    9cf6:	29 89       	ldd	r18, Y+17	; 0x11
    9cf8:	3a 89       	ldd	r19, Y+18	; 0x12
}
    9cfa:	c9 01       	movw	r24, r18
    9cfc:	63 96       	adiw	r28, 0x13	; 19
    9cfe:	cd bf       	out	0x3d, r28	; 61
    9d00:	de bf       	out	0x3e, r29	; 62
    9d02:	cf 91       	pop	r28
    9d04:	df 91       	pop	r29
    9d06:	1f 91       	pop	r17
    9d08:	0f 91       	pop	r16
    9d0a:	ff 90       	pop	r15
    9d0c:	ef 90       	pop	r14
    9d0e:	df 90       	pop	r13
    9d10:	cf 90       	pop	r12
    9d12:	bf 90       	pop	r11
    9d14:	af 90       	pop	r10
    9d16:	9f 90       	pop	r9
    9d18:	8f 90       	pop	r8
    9d1a:	7f 90       	pop	r7
    9d1c:	6f 90       	pop	r6
    9d1e:	5f 90       	pop	r5
    9d20:	4f 90       	pop	r4
    9d22:	3f 90       	pop	r3
    9d24:	2f 90       	pop	r2
    9d26:	08 95       	ret

00009d28 <__mulsi3>:
    9d28:	62 9f       	mul	r22, r18
    9d2a:	d0 01       	movw	r26, r0
    9d2c:	73 9f       	mul	r23, r19
    9d2e:	f0 01       	movw	r30, r0
    9d30:	82 9f       	mul	r24, r18
    9d32:	e0 0d       	add	r30, r0
    9d34:	f1 1d       	adc	r31, r1
    9d36:	64 9f       	mul	r22, r20
    9d38:	e0 0d       	add	r30, r0
    9d3a:	f1 1d       	adc	r31, r1
    9d3c:	92 9f       	mul	r25, r18
    9d3e:	f0 0d       	add	r31, r0
    9d40:	83 9f       	mul	r24, r19
    9d42:	f0 0d       	add	r31, r0
    9d44:	74 9f       	mul	r23, r20
    9d46:	f0 0d       	add	r31, r0
    9d48:	65 9f       	mul	r22, r21
    9d4a:	f0 0d       	add	r31, r0
    9d4c:	99 27       	eor	r25, r25
    9d4e:	72 9f       	mul	r23, r18
    9d50:	b0 0d       	add	r27, r0
    9d52:	e1 1d       	adc	r30, r1
    9d54:	f9 1f       	adc	r31, r25
    9d56:	63 9f       	mul	r22, r19
    9d58:	b0 0d       	add	r27, r0
    9d5a:	e1 1d       	adc	r30, r1
    9d5c:	f9 1f       	adc	r31, r25
    9d5e:	bd 01       	movw	r22, r26
    9d60:	cf 01       	movw	r24, r30
    9d62:	11 24       	eor	r1, r1
    9d64:	08 95       	ret

00009d66 <__udivmodhi4>:
    9d66:	aa 1b       	sub	r26, r26
    9d68:	bb 1b       	sub	r27, r27
    9d6a:	51 e1       	ldi	r21, 0x11	; 17
    9d6c:	07 c0       	rjmp	.+14     	; 0x9d7c <__udivmodhi4_ep>

00009d6e <__udivmodhi4_loop>:
    9d6e:	aa 1f       	adc	r26, r26
    9d70:	bb 1f       	adc	r27, r27
    9d72:	a6 17       	cp	r26, r22
    9d74:	b7 07       	cpc	r27, r23
    9d76:	10 f0       	brcs	.+4      	; 0x9d7c <__udivmodhi4_ep>
    9d78:	a6 1b       	sub	r26, r22
    9d7a:	b7 0b       	sbc	r27, r23

00009d7c <__udivmodhi4_ep>:
    9d7c:	88 1f       	adc	r24, r24
    9d7e:	99 1f       	adc	r25, r25
    9d80:	5a 95       	dec	r21
    9d82:	a9 f7       	brne	.-22     	; 0x9d6e <__udivmodhi4_loop>
    9d84:	80 95       	com	r24
    9d86:	90 95       	com	r25
    9d88:	bc 01       	movw	r22, r24
    9d8a:	cd 01       	movw	r24, r26
    9d8c:	08 95       	ret

00009d8e <__divmodhi4>:
    9d8e:	97 fb       	bst	r25, 7
    9d90:	09 2e       	mov	r0, r25
    9d92:	07 26       	eor	r0, r23
    9d94:	0a d0       	rcall	.+20     	; 0x9daa <__divmodhi4_neg1>
    9d96:	77 fd       	sbrc	r23, 7
    9d98:	04 d0       	rcall	.+8      	; 0x9da2 <__divmodhi4_neg2>
    9d9a:	e5 df       	rcall	.-54     	; 0x9d66 <__udivmodhi4>
    9d9c:	06 d0       	rcall	.+12     	; 0x9daa <__divmodhi4_neg1>
    9d9e:	00 20       	and	r0, r0
    9da0:	1a f4       	brpl	.+6      	; 0x9da8 <__divmodhi4_exit>

00009da2 <__divmodhi4_neg2>:
    9da2:	70 95       	com	r23
    9da4:	61 95       	neg	r22
    9da6:	7f 4f       	sbci	r23, 0xFF	; 255

00009da8 <__divmodhi4_exit>:
    9da8:	08 95       	ret

00009daa <__divmodhi4_neg1>:
    9daa:	f6 f7       	brtc	.-4      	; 0x9da8 <__divmodhi4_exit>
    9dac:	90 95       	com	r25
    9dae:	81 95       	neg	r24
    9db0:	9f 4f       	sbci	r25, 0xFF	; 255
    9db2:	08 95       	ret

00009db4 <__udivmodsi4>:
    9db4:	a1 e2       	ldi	r26, 0x21	; 33
    9db6:	1a 2e       	mov	r1, r26
    9db8:	aa 1b       	sub	r26, r26
    9dba:	bb 1b       	sub	r27, r27
    9dbc:	fd 01       	movw	r30, r26
    9dbe:	0d c0       	rjmp	.+26     	; 0x9dda <__udivmodsi4_ep>

00009dc0 <__udivmodsi4_loop>:
    9dc0:	aa 1f       	adc	r26, r26
    9dc2:	bb 1f       	adc	r27, r27
    9dc4:	ee 1f       	adc	r30, r30
    9dc6:	ff 1f       	adc	r31, r31
    9dc8:	a2 17       	cp	r26, r18
    9dca:	b3 07       	cpc	r27, r19
    9dcc:	e4 07       	cpc	r30, r20
    9dce:	f5 07       	cpc	r31, r21
    9dd0:	20 f0       	brcs	.+8      	; 0x9dda <__udivmodsi4_ep>
    9dd2:	a2 1b       	sub	r26, r18
    9dd4:	b3 0b       	sbc	r27, r19
    9dd6:	e4 0b       	sbc	r30, r20
    9dd8:	f5 0b       	sbc	r31, r21

00009dda <__udivmodsi4_ep>:
    9dda:	66 1f       	adc	r22, r22
    9ddc:	77 1f       	adc	r23, r23
    9dde:	88 1f       	adc	r24, r24
    9de0:	99 1f       	adc	r25, r25
    9de2:	1a 94       	dec	r1
    9de4:	69 f7       	brne	.-38     	; 0x9dc0 <__udivmodsi4_loop>
    9de6:	60 95       	com	r22
    9de8:	70 95       	com	r23
    9dea:	80 95       	com	r24
    9dec:	90 95       	com	r25
    9dee:	9b 01       	movw	r18, r22
    9df0:	ac 01       	movw	r20, r24
    9df2:	bd 01       	movw	r22, r26
    9df4:	cf 01       	movw	r24, r30
    9df6:	08 95       	ret

00009df8 <atol>:
    9df8:	1f 93       	push	r17
    9dfa:	fc 01       	movw	r30, r24
    9dfc:	99 27       	eor	r25, r25
    9dfe:	88 27       	eor	r24, r24
    9e00:	bc 01       	movw	r22, r24
    9e02:	e8 94       	clt
    9e04:	11 91       	ld	r17, Z+
    9e06:	10 32       	cpi	r17, 0x20	; 32
    9e08:	e9 f3       	breq	.-6      	; 0x9e04 <atol+0xc>
    9e0a:	19 30       	cpi	r17, 0x09	; 9
    9e0c:	10 f0       	brcs	.+4      	; 0x9e12 <atol+0x1a>
    9e0e:	1e 30       	cpi	r17, 0x0E	; 14
    9e10:	c8 f3       	brcs	.-14     	; 0x9e04 <atol+0xc>
    9e12:	1b 32       	cpi	r17, 0x2B	; 43
    9e14:	51 f0       	breq	.+20     	; 0x9e2a <atol+0x32>
    9e16:	1d 32       	cpi	r17, 0x2D	; 45
    9e18:	49 f4       	brne	.+18     	; 0x9e2c <atol+0x34>
    9e1a:	68 94       	set
    9e1c:	06 c0       	rjmp	.+12     	; 0x9e2a <atol+0x32>
    9e1e:	0e 94 0c 50 	call	0xa018	; 0xa018 <__mulsi_const_10>
    9e22:	61 0f       	add	r22, r17
    9e24:	71 1d       	adc	r23, r1
    9e26:	81 1d       	adc	r24, r1
    9e28:	91 1d       	adc	r25, r1
    9e2a:	11 91       	ld	r17, Z+
    9e2c:	10 53       	subi	r17, 0x30	; 48
    9e2e:	1a 30       	cpi	r17, 0x0A	; 10
    9e30:	b0 f3       	brcs	.-20     	; 0x9e1e <atol+0x26>
    9e32:	3e f4       	brtc	.+14     	; 0x9e42 <atol+0x4a>
    9e34:	90 95       	com	r25
    9e36:	80 95       	com	r24
    9e38:	70 95       	com	r23
    9e3a:	61 95       	neg	r22
    9e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    9e3e:	8f 4f       	sbci	r24, 0xFF	; 255
    9e40:	9f 4f       	sbci	r25, 0xFF	; 255
    9e42:	1f 91       	pop	r17
    9e44:	08 95       	ret

00009e46 <strtok>:
    9e46:	41 ef       	ldi	r20, 0xF1	; 241
    9e48:	51 e3       	ldi	r21, 0x31	; 49
    9e4a:	0e 94 a7 4f 	call	0x9f4e	; 0x9f4e <strtok_r>
    9e4e:	08 95       	ret

00009e50 <memmove>:
    9e50:	68 17       	cp	r22, r24
    9e52:	79 07       	cpc	r23, r25
    9e54:	68 f4       	brcc	.+26     	; 0x9e70 <memmove+0x20>
    9e56:	fb 01       	movw	r30, r22
    9e58:	dc 01       	movw	r26, r24
    9e5a:	e4 0f       	add	r30, r20
    9e5c:	f5 1f       	adc	r31, r21
    9e5e:	a4 0f       	add	r26, r20
    9e60:	b5 1f       	adc	r27, r21
    9e62:	02 c0       	rjmp	.+4      	; 0x9e68 <memmove+0x18>
    9e64:	02 90       	ld	r0, -Z
    9e66:	0e 92       	st	-X, r0
    9e68:	41 50       	subi	r20, 0x01	; 1
    9e6a:	50 40       	sbci	r21, 0x00	; 0
    9e6c:	d8 f7       	brcc	.-10     	; 0x9e64 <memmove+0x14>
    9e6e:	08 95       	ret
    9e70:	0c 94 57 52 	jmp	0xa4ae	; 0xa4ae <memcpy>

00009e74 <strcasecmp>:
    9e74:	fb 01       	movw	r30, r22
    9e76:	dc 01       	movw	r26, r24
    9e78:	8d 91       	ld	r24, X+
    9e7a:	81 34       	cpi	r24, 0x41	; 65
    9e7c:	1c f0       	brlt	.+6      	; 0x9e84 <strcasecmp+0x10>
    9e7e:	8b 35       	cpi	r24, 0x5B	; 91
    9e80:	0c f4       	brge	.+2      	; 0x9e84 <strcasecmp+0x10>
    9e82:	80 5e       	subi	r24, 0xE0	; 224
    9e84:	61 91       	ld	r22, Z+
    9e86:	61 34       	cpi	r22, 0x41	; 65
    9e88:	1c f0       	brlt	.+6      	; 0x9e90 <strcasecmp+0x1c>
    9e8a:	6b 35       	cpi	r22, 0x5B	; 91
    9e8c:	0c f4       	brge	.+2      	; 0x9e90 <strcasecmp+0x1c>
    9e8e:	60 5e       	subi	r22, 0xE0	; 224
    9e90:	86 1b       	sub	r24, r22
    9e92:	61 11       	cpse	r22, r1
    9e94:	89 f3       	breq	.-30     	; 0x9e78 <strcasecmp+0x4>
    9e96:	99 0b       	sbc	r25, r25
    9e98:	08 95       	ret

00009e9a <strcasestr>:
    9e9a:	fb 01       	movw	r30, r22
    9e9c:	51 91       	ld	r21, Z+
    9e9e:	55 23       	and	r21, r21
    9ea0:	b1 f0       	breq	.+44     	; 0x9ece <strcasestr+0x34>
    9ea2:	bf 01       	movw	r22, r30
    9ea4:	dc 01       	movw	r26, r24
    9ea6:	05 2e       	mov	r0, r21
    9ea8:	4d 91       	ld	r20, X+
    9eaa:	44 23       	and	r20, r20
    9eac:	69 f0       	breq	.+26     	; 0x9ec8 <strcasestr+0x2e>
    9eae:	10 d0       	rcall	.+32     	; 0x9ed0 <strcasestr+0x36>
    9eb0:	d9 f7       	brne	.-10     	; 0x9ea8 <strcasestr+0xe>
    9eb2:	cd 01       	movw	r24, r26
    9eb4:	01 90       	ld	r0, Z+
    9eb6:	00 20       	and	r0, r0
    9eb8:	49 f0       	breq	.+18     	; 0x9ecc <strcasestr+0x32>
    9eba:	4d 91       	ld	r20, X+
    9ebc:	41 11       	cpse	r20, r1
    9ebe:	08 d0       	rcall	.+16     	; 0x9ed0 <strcasestr+0x36>
    9ec0:	c9 f3       	breq	.-14     	; 0x9eb4 <strcasestr+0x1a>
    9ec2:	fb 01       	movw	r30, r22
    9ec4:	41 11       	cpse	r20, r1
    9ec6:	ee cf       	rjmp	.-36     	; 0x9ea4 <strcasestr+0xa>
    9ec8:	81 e0       	ldi	r24, 0x01	; 1
    9eca:	90 e0       	ldi	r25, 0x00	; 0
    9ecc:	01 97       	sbiw	r24, 0x01	; 1
    9ece:	08 95       	ret
    9ed0:	40 25       	eor	r20, r0
    9ed2:	39 f0       	breq	.+14     	; 0x9ee2 <strcasestr+0x48>
    9ed4:	40 32       	cpi	r20, 0x20	; 32
    9ed6:	29 f4       	brne	.+10     	; 0x9ee2 <strcasestr+0x48>
    9ed8:	40 29       	or	r20, r0
    9eda:	4b 57       	subi	r20, 0x7B	; 123
    9edc:	46 5e       	subi	r20, 0xE6	; 230
    9ede:	08 f0       	brcs	.+2      	; 0x9ee2 <strcasestr+0x48>
    9ee0:	18 94       	sez
    9ee2:	08 95       	ret

00009ee4 <strcat>:
    9ee4:	fb 01       	movw	r30, r22
    9ee6:	dc 01       	movw	r26, r24
    9ee8:	0d 90       	ld	r0, X+
    9eea:	00 20       	and	r0, r0
    9eec:	e9 f7       	brne	.-6      	; 0x9ee8 <strcat+0x4>
    9eee:	11 97       	sbiw	r26, 0x01	; 1
    9ef0:	01 90       	ld	r0, Z+
    9ef2:	0d 92       	st	X+, r0
    9ef4:	00 20       	and	r0, r0
    9ef6:	e1 f7       	brne	.-8      	; 0x9ef0 <strcat+0xc>
    9ef8:	08 95       	ret

00009efa <strcmp>:
    9efa:	fb 01       	movw	r30, r22
    9efc:	dc 01       	movw	r26, r24
    9efe:	8d 91       	ld	r24, X+
    9f00:	01 90       	ld	r0, Z+
    9f02:	80 19       	sub	r24, r0
    9f04:	01 10       	cpse	r0, r1
    9f06:	d9 f3       	breq	.-10     	; 0x9efe <strcmp+0x4>
    9f08:	99 0b       	sbc	r25, r25
    9f0a:	08 95       	ret

00009f0c <strcpy>:
    9f0c:	fb 01       	movw	r30, r22
    9f0e:	dc 01       	movw	r26, r24
    9f10:	01 90       	ld	r0, Z+
    9f12:	0d 92       	st	X+, r0
    9f14:	00 20       	and	r0, r0
    9f16:	e1 f7       	brne	.-8      	; 0x9f10 <strcpy+0x4>
    9f18:	08 95       	ret

00009f1a <strstr>:
    9f1a:	fb 01       	movw	r30, r22
    9f1c:	51 91       	ld	r21, Z+
    9f1e:	55 23       	and	r21, r21
    9f20:	a9 f0       	breq	.+42     	; 0x9f4c <strstr+0x32>
    9f22:	bf 01       	movw	r22, r30
    9f24:	dc 01       	movw	r26, r24
    9f26:	4d 91       	ld	r20, X+
    9f28:	45 17       	cp	r20, r21
    9f2a:	41 11       	cpse	r20, r1
    9f2c:	e1 f7       	brne	.-8      	; 0x9f26 <strstr+0xc>
    9f2e:	59 f4       	brne	.+22     	; 0x9f46 <strstr+0x2c>
    9f30:	cd 01       	movw	r24, r26
    9f32:	01 90       	ld	r0, Z+
    9f34:	00 20       	and	r0, r0
    9f36:	49 f0       	breq	.+18     	; 0x9f4a <strstr+0x30>
    9f38:	4d 91       	ld	r20, X+
    9f3a:	40 15       	cp	r20, r0
    9f3c:	41 11       	cpse	r20, r1
    9f3e:	c9 f3       	breq	.-14     	; 0x9f32 <strstr+0x18>
    9f40:	fb 01       	movw	r30, r22
    9f42:	41 11       	cpse	r20, r1
    9f44:	ef cf       	rjmp	.-34     	; 0x9f24 <strstr+0xa>
    9f46:	81 e0       	ldi	r24, 0x01	; 1
    9f48:	90 e0       	ldi	r25, 0x00	; 0
    9f4a:	01 97       	sbiw	r24, 0x01	; 1
    9f4c:	08 95       	ret

00009f4e <strtok_r>:
    9f4e:	fa 01       	movw	r30, r20
    9f50:	a1 91       	ld	r26, Z+
    9f52:	b0 81       	ld	r27, Z
    9f54:	00 97       	sbiw	r24, 0x00	; 0
    9f56:	19 f4       	brne	.+6      	; 0x9f5e <strtok_r+0x10>
    9f58:	10 97       	sbiw	r26, 0x00	; 0
    9f5a:	e1 f0       	breq	.+56     	; 0x9f94 <strtok_r+0x46>
    9f5c:	cd 01       	movw	r24, r26
    9f5e:	dc 01       	movw	r26, r24
    9f60:	cd 01       	movw	r24, r26
    9f62:	0d 90       	ld	r0, X+
    9f64:	00 20       	and	r0, r0
    9f66:	11 f4       	brne	.+4      	; 0x9f6c <strtok_r+0x1e>
    9f68:	c0 01       	movw	r24, r0
    9f6a:	13 c0       	rjmp	.+38     	; 0x9f92 <strtok_r+0x44>
    9f6c:	fb 01       	movw	r30, r22
    9f6e:	21 91       	ld	r18, Z+
    9f70:	22 23       	and	r18, r18
    9f72:	19 f0       	breq	.+6      	; 0x9f7a <strtok_r+0x2c>
    9f74:	20 15       	cp	r18, r0
    9f76:	d9 f7       	brne	.-10     	; 0x9f6e <strtok_r+0x20>
    9f78:	f3 cf       	rjmp	.-26     	; 0x9f60 <strtok_r+0x12>
    9f7a:	fb 01       	movw	r30, r22
    9f7c:	21 91       	ld	r18, Z+
    9f7e:	20 15       	cp	r18, r0
    9f80:	19 f4       	brne	.+6      	; 0x9f88 <strtok_r+0x3a>
    9f82:	1e 92       	st	-X, r1
    9f84:	11 96       	adiw	r26, 0x01	; 1
    9f86:	06 c0       	rjmp	.+12     	; 0x9f94 <strtok_r+0x46>
    9f88:	22 23       	and	r18, r18
    9f8a:	c1 f7       	brne	.-16     	; 0x9f7c <strtok_r+0x2e>
    9f8c:	0d 90       	ld	r0, X+
    9f8e:	00 20       	and	r0, r0
    9f90:	a1 f7       	brne	.-24     	; 0x9f7a <strtok_r+0x2c>
    9f92:	d0 01       	movw	r26, r0
    9f94:	fa 01       	movw	r30, r20
    9f96:	a1 93       	st	Z+, r26
    9f98:	b0 83       	st	Z, r27
    9f9a:	08 95       	ret

00009f9c <strupr>:
    9f9c:	dc 01       	movw	r26, r24
    9f9e:	6c 91       	ld	r22, X
    9fa0:	61 56       	subi	r22, 0x61	; 97
    9fa2:	6a 31       	cpi	r22, 0x1A	; 26
    9fa4:	08 f0       	brcs	.+2      	; 0x9fa8 <strupr+0xc>
    9fa6:	60 5e       	subi	r22, 0xE0	; 224
    9fa8:	6f 5b       	subi	r22, 0xBF	; 191
    9faa:	6d 93       	st	X+, r22
    9fac:	c1 f7       	brne	.-16     	; 0x9f9e <strupr+0x2>
    9fae:	08 95       	ret

00009fb0 <ltoa>:
    9fb0:	fa 01       	movw	r30, r20
    9fb2:	cf 93       	push	r28
    9fb4:	ff 93       	push	r31
    9fb6:	ef 93       	push	r30
    9fb8:	22 30       	cpi	r18, 0x02	; 2
    9fba:	44 f1       	brlt	.+80     	; 0xa00c <ltoa+0x5c>
    9fbc:	25 32       	cpi	r18, 0x25	; 37
    9fbe:	34 f5       	brge	.+76     	; 0xa00c <ltoa+0x5c>
    9fc0:	c2 2f       	mov	r28, r18
    9fc2:	e8 94       	clt
    9fc4:	ca 30       	cpi	r28, 0x0A	; 10
    9fc6:	49 f4       	brne	.+18     	; 0x9fda <ltoa+0x2a>
    9fc8:	97 fb       	bst	r25, 7
    9fca:	3e f4       	brtc	.+14     	; 0x9fda <ltoa+0x2a>
    9fcc:	90 95       	com	r25
    9fce:	80 95       	com	r24
    9fd0:	70 95       	com	r23
    9fd2:	61 95       	neg	r22
    9fd4:	7f 4f       	sbci	r23, 0xFF	; 255
    9fd6:	8f 4f       	sbci	r24, 0xFF	; 255
    9fd8:	9f 4f       	sbci	r25, 0xFF	; 255
    9fda:	2c 2f       	mov	r18, r28
    9fdc:	33 27       	eor	r19, r19
    9fde:	44 27       	eor	r20, r20
    9fe0:	55 27       	eor	r21, r21
    9fe2:	ff 93       	push	r31
    9fe4:	ef 93       	push	r30
    9fe6:	0e 94 da 4e 	call	0x9db4	; 0x9db4 <__udivmodsi4>
    9fea:	ef 91       	pop	r30
    9fec:	ff 91       	pop	r31
    9fee:	60 5d       	subi	r22, 0xD0	; 208
    9ff0:	6a 33       	cpi	r22, 0x3A	; 58
    9ff2:	0c f0       	brlt	.+2      	; 0x9ff6 <ltoa+0x46>
    9ff4:	69 5d       	subi	r22, 0xD9	; 217
    9ff6:	61 93       	st	Z+, r22
    9ff8:	b9 01       	movw	r22, r18
    9ffa:	ca 01       	movw	r24, r20
    9ffc:	60 50       	subi	r22, 0x00	; 0
    9ffe:	70 40       	sbci	r23, 0x00	; 0
    a000:	80 40       	sbci	r24, 0x00	; 0
    a002:	90 40       	sbci	r25, 0x00	; 0
    a004:	51 f7       	brne	.-44     	; 0x9fda <ltoa+0x2a>
    a006:	16 f4       	brtc	.+4      	; 0xa00c <ltoa+0x5c>
    a008:	cd e2       	ldi	r28, 0x2D	; 45
    a00a:	c1 93       	st	Z+, r28
    a00c:	10 82       	st	Z, r1
    a00e:	8f 91       	pop	r24
    a010:	9f 91       	pop	r25
    a012:	cf 91       	pop	r28
    a014:	0c 94 6b 52 	jmp	0xa4d6	; 0xa4d6 <strrev>

0000a018 <__mulsi_const_10>:
    a018:	59 2f       	mov	r21, r25
    a01a:	48 2f       	mov	r20, r24
    a01c:	37 2f       	mov	r19, r23
    a01e:	26 2f       	mov	r18, r22
    a020:	66 0f       	add	r22, r22
    a022:	77 1f       	adc	r23, r23
    a024:	88 1f       	adc	r24, r24
    a026:	99 1f       	adc	r25, r25
    a028:	66 0f       	add	r22, r22
    a02a:	77 1f       	adc	r23, r23
    a02c:	88 1f       	adc	r24, r24
    a02e:	99 1f       	adc	r25, r25
    a030:	62 0f       	add	r22, r18
    a032:	73 1f       	adc	r23, r19
    a034:	84 1f       	adc	r24, r20
    a036:	95 1f       	adc	r25, r21
    a038:	66 0f       	add	r22, r22
    a03a:	77 1f       	adc	r23, r23
    a03c:	88 1f       	adc	r24, r24
    a03e:	99 1f       	adc	r25, r25
    a040:	08 95       	ret

0000a042 <sprintf>:
    a042:	0f 93       	push	r16
    a044:	1f 93       	push	r17
    a046:	df 93       	push	r29
    a048:	cf 93       	push	r28
    a04a:	cd b7       	in	r28, 0x3d	; 61
    a04c:	de b7       	in	r29, 0x3e	; 62
    a04e:	2e 97       	sbiw	r28, 0x0e	; 14
    a050:	cd bf       	out	0x3d, r28	; 61
    a052:	de bf       	out	0x3e, r29	; 62
    a054:	0e 89       	ldd	r16, Y+22	; 0x16
    a056:	1f 89       	ldd	r17, Y+23	; 0x17
    a058:	86 e0       	ldi	r24, 0x06	; 6
    a05a:	8c 83       	std	Y+4, r24	; 0x04
    a05c:	09 83       	std	Y+1, r16	; 0x01
    a05e:	1a 83       	std	Y+2, r17	; 0x02
    a060:	8f ef       	ldi	r24, 0xFF	; 255
    a062:	9f e7       	ldi	r25, 0x7F	; 127
    a064:	8d 83       	std	Y+5, r24	; 0x05
    a066:	9e 83       	std	Y+6, r25	; 0x06
    a068:	9e 01       	movw	r18, r28
    a06a:	26 5e       	subi	r18, 0xE6	; 230
    a06c:	3f 4f       	sbci	r19, 0xFF	; 255
    a06e:	ce 01       	movw	r24, r28
    a070:	01 96       	adiw	r24, 0x01	; 1
    a072:	68 8d       	ldd	r22, Y+24	; 0x18
    a074:	79 8d       	ldd	r23, Y+25	; 0x19
    a076:	a9 01       	movw	r20, r18
    a078:	0e 94 4c 50 	call	0xa098	; 0xa098 <vfprintf>
    a07c:	2f 81       	ldd	r18, Y+7	; 0x07
    a07e:	38 85       	ldd	r19, Y+8	; 0x08
    a080:	02 0f       	add	r16, r18
    a082:	13 1f       	adc	r17, r19
    a084:	f8 01       	movw	r30, r16
    a086:	10 82       	st	Z, r1
    a088:	2e 96       	adiw	r28, 0x0e	; 14
    a08a:	cd bf       	out	0x3d, r28	; 61
    a08c:	de bf       	out	0x3e, r29	; 62
    a08e:	cf 91       	pop	r28
    a090:	df 91       	pop	r29
    a092:	1f 91       	pop	r17
    a094:	0f 91       	pop	r16
    a096:	08 95       	ret

0000a098 <vfprintf>:
    a098:	2f 92       	push	r2
    a09a:	3f 92       	push	r3
    a09c:	4f 92       	push	r4
    a09e:	5f 92       	push	r5
    a0a0:	6f 92       	push	r6
    a0a2:	7f 92       	push	r7
    a0a4:	8f 92       	push	r8
    a0a6:	9f 92       	push	r9
    a0a8:	af 92       	push	r10
    a0aa:	bf 92       	push	r11
    a0ac:	cf 92       	push	r12
    a0ae:	df 92       	push	r13
    a0b0:	ef 92       	push	r14
    a0b2:	ff 92       	push	r15
    a0b4:	0f 93       	push	r16
    a0b6:	1f 93       	push	r17
    a0b8:	df 93       	push	r29
    a0ba:	cf 93       	push	r28
    a0bc:	cd b7       	in	r28, 0x3d	; 61
    a0be:	de b7       	in	r29, 0x3e	; 62
    a0c0:	2b 97       	sbiw	r28, 0x0b	; 11
    a0c2:	cd bf       	out	0x3d, r28	; 61
    a0c4:	de bf       	out	0x3e, r29	; 62
    a0c6:	3c 01       	movw	r6, r24
    a0c8:	2b 01       	movw	r4, r22
    a0ca:	5a 01       	movw	r10, r20
    a0cc:	fc 01       	movw	r30, r24
    a0ce:	16 82       	std	Z+6, r1	; 0x06
    a0d0:	17 82       	std	Z+7, r1	; 0x07
    a0d2:	83 81       	ldd	r24, Z+3	; 0x03
    a0d4:	81 fd       	sbrc	r24, 1
    a0d6:	03 c0       	rjmp	.+6      	; 0xa0de <vfprintf+0x46>
    a0d8:	6f ef       	ldi	r22, 0xFF	; 255
    a0da:	7f ef       	ldi	r23, 0xFF	; 255
    a0dc:	c6 c1       	rjmp	.+908    	; 0xa46a <vfprintf+0x3d2>
    a0de:	9a e0       	ldi	r25, 0x0A	; 10
    a0e0:	89 2e       	mov	r8, r25
    a0e2:	1e 01       	movw	r2, r28
    a0e4:	08 94       	sec
    a0e6:	21 1c       	adc	r2, r1
    a0e8:	31 1c       	adc	r3, r1
    a0ea:	f3 01       	movw	r30, r6
    a0ec:	23 81       	ldd	r18, Z+3	; 0x03
    a0ee:	f2 01       	movw	r30, r4
    a0f0:	23 fd       	sbrc	r18, 3
    a0f2:	85 91       	lpm	r24, Z+
    a0f4:	23 ff       	sbrs	r18, 3
    a0f6:	81 91       	ld	r24, Z+
    a0f8:	2f 01       	movw	r4, r30
    a0fa:	88 23       	and	r24, r24
    a0fc:	09 f4       	brne	.+2      	; 0xa100 <vfprintf+0x68>
    a0fe:	b2 c1       	rjmp	.+868    	; 0xa464 <vfprintf+0x3cc>
    a100:	85 32       	cpi	r24, 0x25	; 37
    a102:	39 f4       	brne	.+14     	; 0xa112 <vfprintf+0x7a>
    a104:	23 fd       	sbrc	r18, 3
    a106:	85 91       	lpm	r24, Z+
    a108:	23 ff       	sbrs	r18, 3
    a10a:	81 91       	ld	r24, Z+
    a10c:	2f 01       	movw	r4, r30
    a10e:	85 32       	cpi	r24, 0x25	; 37
    a110:	29 f4       	brne	.+10     	; 0xa11c <vfprintf+0x84>
    a112:	90 e0       	ldi	r25, 0x00	; 0
    a114:	b3 01       	movw	r22, r6
    a116:	0e 94 7b 52 	call	0xa4f6	; 0xa4f6 <fputc>
    a11a:	e7 cf       	rjmp	.-50     	; 0xa0ea <vfprintf+0x52>
    a11c:	98 2f       	mov	r25, r24
    a11e:	ff 24       	eor	r15, r15
    a120:	ee 24       	eor	r14, r14
    a122:	99 24       	eor	r9, r9
    a124:	ff e1       	ldi	r31, 0x1F	; 31
    a126:	ff 15       	cp	r31, r15
    a128:	d0 f0       	brcs	.+52     	; 0xa15e <vfprintf+0xc6>
    a12a:	9b 32       	cpi	r25, 0x2B	; 43
    a12c:	69 f0       	breq	.+26     	; 0xa148 <vfprintf+0xb0>
    a12e:	9c 32       	cpi	r25, 0x2C	; 44
    a130:	28 f4       	brcc	.+10     	; 0xa13c <vfprintf+0xa4>
    a132:	90 32       	cpi	r25, 0x20	; 32
    a134:	59 f0       	breq	.+22     	; 0xa14c <vfprintf+0xb4>
    a136:	93 32       	cpi	r25, 0x23	; 35
    a138:	91 f4       	brne	.+36     	; 0xa15e <vfprintf+0xc6>
    a13a:	0e c0       	rjmp	.+28     	; 0xa158 <vfprintf+0xc0>
    a13c:	9d 32       	cpi	r25, 0x2D	; 45
    a13e:	49 f0       	breq	.+18     	; 0xa152 <vfprintf+0xba>
    a140:	90 33       	cpi	r25, 0x30	; 48
    a142:	69 f4       	brne	.+26     	; 0xa15e <vfprintf+0xc6>
    a144:	41 e0       	ldi	r20, 0x01	; 1
    a146:	24 c0       	rjmp	.+72     	; 0xa190 <vfprintf+0xf8>
    a148:	52 e0       	ldi	r21, 0x02	; 2
    a14a:	f5 2a       	or	r15, r21
    a14c:	84 e0       	ldi	r24, 0x04	; 4
    a14e:	f8 2a       	or	r15, r24
    a150:	28 c0       	rjmp	.+80     	; 0xa1a2 <vfprintf+0x10a>
    a152:	98 e0       	ldi	r25, 0x08	; 8
    a154:	f9 2a       	or	r15, r25
    a156:	25 c0       	rjmp	.+74     	; 0xa1a2 <vfprintf+0x10a>
    a158:	e0 e1       	ldi	r30, 0x10	; 16
    a15a:	fe 2a       	or	r15, r30
    a15c:	22 c0       	rjmp	.+68     	; 0xa1a2 <vfprintf+0x10a>
    a15e:	f7 fc       	sbrc	r15, 7
    a160:	29 c0       	rjmp	.+82     	; 0xa1b4 <vfprintf+0x11c>
    a162:	89 2f       	mov	r24, r25
    a164:	80 53       	subi	r24, 0x30	; 48
    a166:	8a 30       	cpi	r24, 0x0A	; 10
    a168:	70 f4       	brcc	.+28     	; 0xa186 <vfprintf+0xee>
    a16a:	f6 fe       	sbrs	r15, 6
    a16c:	05 c0       	rjmp	.+10     	; 0xa178 <vfprintf+0xe0>
    a16e:	98 9c       	mul	r9, r8
    a170:	90 2c       	mov	r9, r0
    a172:	11 24       	eor	r1, r1
    a174:	98 0e       	add	r9, r24
    a176:	15 c0       	rjmp	.+42     	; 0xa1a2 <vfprintf+0x10a>
    a178:	e8 9c       	mul	r14, r8
    a17a:	e0 2c       	mov	r14, r0
    a17c:	11 24       	eor	r1, r1
    a17e:	e8 0e       	add	r14, r24
    a180:	f0 e2       	ldi	r31, 0x20	; 32
    a182:	ff 2a       	or	r15, r31
    a184:	0e c0       	rjmp	.+28     	; 0xa1a2 <vfprintf+0x10a>
    a186:	9e 32       	cpi	r25, 0x2E	; 46
    a188:	29 f4       	brne	.+10     	; 0xa194 <vfprintf+0xfc>
    a18a:	f6 fc       	sbrc	r15, 6
    a18c:	6b c1       	rjmp	.+726    	; 0xa464 <vfprintf+0x3cc>
    a18e:	40 e4       	ldi	r20, 0x40	; 64
    a190:	f4 2a       	or	r15, r20
    a192:	07 c0       	rjmp	.+14     	; 0xa1a2 <vfprintf+0x10a>
    a194:	9c 36       	cpi	r25, 0x6C	; 108
    a196:	19 f4       	brne	.+6      	; 0xa19e <vfprintf+0x106>
    a198:	50 e8       	ldi	r21, 0x80	; 128
    a19a:	f5 2a       	or	r15, r21
    a19c:	02 c0       	rjmp	.+4      	; 0xa1a2 <vfprintf+0x10a>
    a19e:	98 36       	cpi	r25, 0x68	; 104
    a1a0:	49 f4       	brne	.+18     	; 0xa1b4 <vfprintf+0x11c>
    a1a2:	f2 01       	movw	r30, r4
    a1a4:	23 fd       	sbrc	r18, 3
    a1a6:	95 91       	lpm	r25, Z+
    a1a8:	23 ff       	sbrs	r18, 3
    a1aa:	91 91       	ld	r25, Z+
    a1ac:	2f 01       	movw	r4, r30
    a1ae:	99 23       	and	r25, r25
    a1b0:	09 f0       	breq	.+2      	; 0xa1b4 <vfprintf+0x11c>
    a1b2:	b8 cf       	rjmp	.-144    	; 0xa124 <vfprintf+0x8c>
    a1b4:	89 2f       	mov	r24, r25
    a1b6:	85 54       	subi	r24, 0x45	; 69
    a1b8:	83 30       	cpi	r24, 0x03	; 3
    a1ba:	18 f0       	brcs	.+6      	; 0xa1c2 <vfprintf+0x12a>
    a1bc:	80 52       	subi	r24, 0x20	; 32
    a1be:	83 30       	cpi	r24, 0x03	; 3
    a1c0:	38 f4       	brcc	.+14     	; 0xa1d0 <vfprintf+0x138>
    a1c2:	44 e0       	ldi	r20, 0x04	; 4
    a1c4:	50 e0       	ldi	r21, 0x00	; 0
    a1c6:	a4 0e       	add	r10, r20
    a1c8:	b5 1e       	adc	r11, r21
    a1ca:	5f e3       	ldi	r21, 0x3F	; 63
    a1cc:	59 83       	std	Y+1, r21	; 0x01
    a1ce:	0f c0       	rjmp	.+30     	; 0xa1ee <vfprintf+0x156>
    a1d0:	93 36       	cpi	r25, 0x63	; 99
    a1d2:	31 f0       	breq	.+12     	; 0xa1e0 <vfprintf+0x148>
    a1d4:	93 37       	cpi	r25, 0x73	; 115
    a1d6:	79 f0       	breq	.+30     	; 0xa1f6 <vfprintf+0x15e>
    a1d8:	93 35       	cpi	r25, 0x53	; 83
    a1da:	09 f0       	breq	.+2      	; 0xa1de <vfprintf+0x146>
    a1dc:	56 c0       	rjmp	.+172    	; 0xa28a <vfprintf+0x1f2>
    a1de:	20 c0       	rjmp	.+64     	; 0xa220 <vfprintf+0x188>
    a1e0:	f5 01       	movw	r30, r10
    a1e2:	80 81       	ld	r24, Z
    a1e4:	89 83       	std	Y+1, r24	; 0x01
    a1e6:	42 e0       	ldi	r20, 0x02	; 2
    a1e8:	50 e0       	ldi	r21, 0x00	; 0
    a1ea:	a4 0e       	add	r10, r20
    a1ec:	b5 1e       	adc	r11, r21
    a1ee:	61 01       	movw	r12, r2
    a1f0:	01 e0       	ldi	r16, 0x01	; 1
    a1f2:	10 e0       	ldi	r17, 0x00	; 0
    a1f4:	12 c0       	rjmp	.+36     	; 0xa21a <vfprintf+0x182>
    a1f6:	f5 01       	movw	r30, r10
    a1f8:	c0 80       	ld	r12, Z
    a1fa:	d1 80       	ldd	r13, Z+1	; 0x01
    a1fc:	f6 fc       	sbrc	r15, 6
    a1fe:	03 c0       	rjmp	.+6      	; 0xa206 <vfprintf+0x16e>
    a200:	6f ef       	ldi	r22, 0xFF	; 255
    a202:	7f ef       	ldi	r23, 0xFF	; 255
    a204:	02 c0       	rjmp	.+4      	; 0xa20a <vfprintf+0x172>
    a206:	69 2d       	mov	r22, r9
    a208:	70 e0       	ldi	r23, 0x00	; 0
    a20a:	42 e0       	ldi	r20, 0x02	; 2
    a20c:	50 e0       	ldi	r21, 0x00	; 0
    a20e:	a4 0e       	add	r10, r20
    a210:	b5 1e       	adc	r11, r21
    a212:	c6 01       	movw	r24, r12
    a214:	0e 94 60 52 	call	0xa4c0	; 0xa4c0 <strnlen>
    a218:	8c 01       	movw	r16, r24
    a21a:	5f e7       	ldi	r21, 0x7F	; 127
    a21c:	f5 22       	and	r15, r21
    a21e:	14 c0       	rjmp	.+40     	; 0xa248 <vfprintf+0x1b0>
    a220:	f5 01       	movw	r30, r10
    a222:	c0 80       	ld	r12, Z
    a224:	d1 80       	ldd	r13, Z+1	; 0x01
    a226:	f6 fc       	sbrc	r15, 6
    a228:	03 c0       	rjmp	.+6      	; 0xa230 <vfprintf+0x198>
    a22a:	6f ef       	ldi	r22, 0xFF	; 255
    a22c:	7f ef       	ldi	r23, 0xFF	; 255
    a22e:	02 c0       	rjmp	.+4      	; 0xa234 <vfprintf+0x19c>
    a230:	69 2d       	mov	r22, r9
    a232:	70 e0       	ldi	r23, 0x00	; 0
    a234:	42 e0       	ldi	r20, 0x02	; 2
    a236:	50 e0       	ldi	r21, 0x00	; 0
    a238:	a4 0e       	add	r10, r20
    a23a:	b5 1e       	adc	r11, r21
    a23c:	c6 01       	movw	r24, r12
    a23e:	0e 94 4c 52 	call	0xa498	; 0xa498 <strnlen_P>
    a242:	8c 01       	movw	r16, r24
    a244:	50 e8       	ldi	r21, 0x80	; 128
    a246:	f5 2a       	or	r15, r21
    a248:	f3 fe       	sbrs	r15, 3
    a24a:	07 c0       	rjmp	.+14     	; 0xa25a <vfprintf+0x1c2>
    a24c:	1a c0       	rjmp	.+52     	; 0xa282 <vfprintf+0x1ea>
    a24e:	80 e2       	ldi	r24, 0x20	; 32
    a250:	90 e0       	ldi	r25, 0x00	; 0
    a252:	b3 01       	movw	r22, r6
    a254:	0e 94 7b 52 	call	0xa4f6	; 0xa4f6 <fputc>
    a258:	ea 94       	dec	r14
    a25a:	8e 2d       	mov	r24, r14
    a25c:	90 e0       	ldi	r25, 0x00	; 0
    a25e:	08 17       	cp	r16, r24
    a260:	19 07       	cpc	r17, r25
    a262:	a8 f3       	brcs	.-22     	; 0xa24e <vfprintf+0x1b6>
    a264:	0e c0       	rjmp	.+28     	; 0xa282 <vfprintf+0x1ea>
    a266:	f6 01       	movw	r30, r12
    a268:	f7 fc       	sbrc	r15, 7
    a26a:	85 91       	lpm	r24, Z+
    a26c:	f7 fe       	sbrs	r15, 7
    a26e:	81 91       	ld	r24, Z+
    a270:	6f 01       	movw	r12, r30
    a272:	90 e0       	ldi	r25, 0x00	; 0
    a274:	b3 01       	movw	r22, r6
    a276:	0e 94 7b 52 	call	0xa4f6	; 0xa4f6 <fputc>
    a27a:	e1 10       	cpse	r14, r1
    a27c:	ea 94       	dec	r14
    a27e:	01 50       	subi	r16, 0x01	; 1
    a280:	10 40       	sbci	r17, 0x00	; 0
    a282:	01 15       	cp	r16, r1
    a284:	11 05       	cpc	r17, r1
    a286:	79 f7       	brne	.-34     	; 0xa266 <vfprintf+0x1ce>
    a288:	ea c0       	rjmp	.+468    	; 0xa45e <vfprintf+0x3c6>
    a28a:	94 36       	cpi	r25, 0x64	; 100
    a28c:	11 f0       	breq	.+4      	; 0xa292 <vfprintf+0x1fa>
    a28e:	99 36       	cpi	r25, 0x69	; 105
    a290:	69 f5       	brne	.+90     	; 0xa2ec <vfprintf+0x254>
    a292:	f7 fe       	sbrs	r15, 7
    a294:	08 c0       	rjmp	.+16     	; 0xa2a6 <vfprintf+0x20e>
    a296:	f5 01       	movw	r30, r10
    a298:	20 81       	ld	r18, Z
    a29a:	31 81       	ldd	r19, Z+1	; 0x01
    a29c:	42 81       	ldd	r20, Z+2	; 0x02
    a29e:	53 81       	ldd	r21, Z+3	; 0x03
    a2a0:	84 e0       	ldi	r24, 0x04	; 4
    a2a2:	90 e0       	ldi	r25, 0x00	; 0
    a2a4:	0a c0       	rjmp	.+20     	; 0xa2ba <vfprintf+0x222>
    a2a6:	f5 01       	movw	r30, r10
    a2a8:	80 81       	ld	r24, Z
    a2aa:	91 81       	ldd	r25, Z+1	; 0x01
    a2ac:	9c 01       	movw	r18, r24
    a2ae:	44 27       	eor	r20, r20
    a2b0:	37 fd       	sbrc	r19, 7
    a2b2:	40 95       	com	r20
    a2b4:	54 2f       	mov	r21, r20
    a2b6:	82 e0       	ldi	r24, 0x02	; 2
    a2b8:	90 e0       	ldi	r25, 0x00	; 0
    a2ba:	a8 0e       	add	r10, r24
    a2bc:	b9 1e       	adc	r11, r25
    a2be:	9f e6       	ldi	r25, 0x6F	; 111
    a2c0:	f9 22       	and	r15, r25
    a2c2:	57 ff       	sbrs	r21, 7
    a2c4:	09 c0       	rjmp	.+18     	; 0xa2d8 <vfprintf+0x240>
    a2c6:	50 95       	com	r21
    a2c8:	40 95       	com	r20
    a2ca:	30 95       	com	r19
    a2cc:	21 95       	neg	r18
    a2ce:	3f 4f       	sbci	r19, 0xFF	; 255
    a2d0:	4f 4f       	sbci	r20, 0xFF	; 255
    a2d2:	5f 4f       	sbci	r21, 0xFF	; 255
    a2d4:	e0 e8       	ldi	r30, 0x80	; 128
    a2d6:	fe 2a       	or	r15, r30
    a2d8:	ca 01       	movw	r24, r20
    a2da:	b9 01       	movw	r22, r18
    a2dc:	a1 01       	movw	r20, r2
    a2de:	2a e0       	ldi	r18, 0x0A	; 10
    a2e0:	30 e0       	ldi	r19, 0x00	; 0
    a2e2:	0e 94 a7 52 	call	0xa54e	; 0xa54e <__ultoa_invert>
    a2e6:	d8 2e       	mov	r13, r24
    a2e8:	d2 18       	sub	r13, r2
    a2ea:	40 c0       	rjmp	.+128    	; 0xa36c <vfprintf+0x2d4>
    a2ec:	95 37       	cpi	r25, 0x75	; 117
    a2ee:	29 f4       	brne	.+10     	; 0xa2fa <vfprintf+0x262>
    a2f0:	1f 2d       	mov	r17, r15
    a2f2:	1f 7e       	andi	r17, 0xEF	; 239
    a2f4:	2a e0       	ldi	r18, 0x0A	; 10
    a2f6:	30 e0       	ldi	r19, 0x00	; 0
    a2f8:	1d c0       	rjmp	.+58     	; 0xa334 <vfprintf+0x29c>
    a2fa:	1f 2d       	mov	r17, r15
    a2fc:	19 7f       	andi	r17, 0xF9	; 249
    a2fe:	9f 36       	cpi	r25, 0x6F	; 111
    a300:	61 f0       	breq	.+24     	; 0xa31a <vfprintf+0x282>
    a302:	90 37       	cpi	r25, 0x70	; 112
    a304:	20 f4       	brcc	.+8      	; 0xa30e <vfprintf+0x276>
    a306:	98 35       	cpi	r25, 0x58	; 88
    a308:	09 f0       	breq	.+2      	; 0xa30c <vfprintf+0x274>
    a30a:	ac c0       	rjmp	.+344    	; 0xa464 <vfprintf+0x3cc>
    a30c:	0f c0       	rjmp	.+30     	; 0xa32c <vfprintf+0x294>
    a30e:	90 37       	cpi	r25, 0x70	; 112
    a310:	39 f0       	breq	.+14     	; 0xa320 <vfprintf+0x288>
    a312:	98 37       	cpi	r25, 0x78	; 120
    a314:	09 f0       	breq	.+2      	; 0xa318 <vfprintf+0x280>
    a316:	a6 c0       	rjmp	.+332    	; 0xa464 <vfprintf+0x3cc>
    a318:	04 c0       	rjmp	.+8      	; 0xa322 <vfprintf+0x28a>
    a31a:	28 e0       	ldi	r18, 0x08	; 8
    a31c:	30 e0       	ldi	r19, 0x00	; 0
    a31e:	0a c0       	rjmp	.+20     	; 0xa334 <vfprintf+0x29c>
    a320:	10 61       	ori	r17, 0x10	; 16
    a322:	14 fd       	sbrc	r17, 4
    a324:	14 60       	ori	r17, 0x04	; 4
    a326:	20 e1       	ldi	r18, 0x10	; 16
    a328:	30 e0       	ldi	r19, 0x00	; 0
    a32a:	04 c0       	rjmp	.+8      	; 0xa334 <vfprintf+0x29c>
    a32c:	14 fd       	sbrc	r17, 4
    a32e:	16 60       	ori	r17, 0x06	; 6
    a330:	20 e1       	ldi	r18, 0x10	; 16
    a332:	32 e0       	ldi	r19, 0x02	; 2
    a334:	17 ff       	sbrs	r17, 7
    a336:	08 c0       	rjmp	.+16     	; 0xa348 <vfprintf+0x2b0>
    a338:	f5 01       	movw	r30, r10
    a33a:	60 81       	ld	r22, Z
    a33c:	71 81       	ldd	r23, Z+1	; 0x01
    a33e:	82 81       	ldd	r24, Z+2	; 0x02
    a340:	93 81       	ldd	r25, Z+3	; 0x03
    a342:	44 e0       	ldi	r20, 0x04	; 4
    a344:	50 e0       	ldi	r21, 0x00	; 0
    a346:	08 c0       	rjmp	.+16     	; 0xa358 <vfprintf+0x2c0>
    a348:	f5 01       	movw	r30, r10
    a34a:	80 81       	ld	r24, Z
    a34c:	91 81       	ldd	r25, Z+1	; 0x01
    a34e:	bc 01       	movw	r22, r24
    a350:	80 e0       	ldi	r24, 0x00	; 0
    a352:	90 e0       	ldi	r25, 0x00	; 0
    a354:	42 e0       	ldi	r20, 0x02	; 2
    a356:	50 e0       	ldi	r21, 0x00	; 0
    a358:	a4 0e       	add	r10, r20
    a35a:	b5 1e       	adc	r11, r21
    a35c:	a1 01       	movw	r20, r2
    a35e:	0e 94 a7 52 	call	0xa54e	; 0xa54e <__ultoa_invert>
    a362:	d8 2e       	mov	r13, r24
    a364:	d2 18       	sub	r13, r2
    a366:	8f e7       	ldi	r24, 0x7F	; 127
    a368:	f8 2e       	mov	r15, r24
    a36a:	f1 22       	and	r15, r17
    a36c:	f6 fe       	sbrs	r15, 6
    a36e:	0b c0       	rjmp	.+22     	; 0xa386 <vfprintf+0x2ee>
    a370:	5e ef       	ldi	r21, 0xFE	; 254
    a372:	f5 22       	and	r15, r21
    a374:	d9 14       	cp	r13, r9
    a376:	38 f4       	brcc	.+14     	; 0xa386 <vfprintf+0x2ee>
    a378:	f4 fe       	sbrs	r15, 4
    a37a:	07 c0       	rjmp	.+14     	; 0xa38a <vfprintf+0x2f2>
    a37c:	f2 fc       	sbrc	r15, 2
    a37e:	05 c0       	rjmp	.+10     	; 0xa38a <vfprintf+0x2f2>
    a380:	8f ee       	ldi	r24, 0xEF	; 239
    a382:	f8 22       	and	r15, r24
    a384:	02 c0       	rjmp	.+4      	; 0xa38a <vfprintf+0x2f2>
    a386:	1d 2d       	mov	r17, r13
    a388:	01 c0       	rjmp	.+2      	; 0xa38c <vfprintf+0x2f4>
    a38a:	19 2d       	mov	r17, r9
    a38c:	f4 fe       	sbrs	r15, 4
    a38e:	0d c0       	rjmp	.+26     	; 0xa3aa <vfprintf+0x312>
    a390:	fe 01       	movw	r30, r28
    a392:	ed 0d       	add	r30, r13
    a394:	f1 1d       	adc	r31, r1
    a396:	80 81       	ld	r24, Z
    a398:	80 33       	cpi	r24, 0x30	; 48
    a39a:	19 f4       	brne	.+6      	; 0xa3a2 <vfprintf+0x30a>
    a39c:	99 ee       	ldi	r25, 0xE9	; 233
    a39e:	f9 22       	and	r15, r25
    a3a0:	08 c0       	rjmp	.+16     	; 0xa3b2 <vfprintf+0x31a>
    a3a2:	1f 5f       	subi	r17, 0xFF	; 255
    a3a4:	f2 fe       	sbrs	r15, 2
    a3a6:	05 c0       	rjmp	.+10     	; 0xa3b2 <vfprintf+0x31a>
    a3a8:	03 c0       	rjmp	.+6      	; 0xa3b0 <vfprintf+0x318>
    a3aa:	8f 2d       	mov	r24, r15
    a3ac:	86 78       	andi	r24, 0x86	; 134
    a3ae:	09 f0       	breq	.+2      	; 0xa3b2 <vfprintf+0x31a>
    a3b0:	1f 5f       	subi	r17, 0xFF	; 255
    a3b2:	0f 2d       	mov	r16, r15
    a3b4:	f3 fc       	sbrc	r15, 3
    a3b6:	14 c0       	rjmp	.+40     	; 0xa3e0 <vfprintf+0x348>
    a3b8:	f0 fe       	sbrs	r15, 0
    a3ba:	0f c0       	rjmp	.+30     	; 0xa3da <vfprintf+0x342>
    a3bc:	1e 15       	cp	r17, r14
    a3be:	10 f0       	brcs	.+4      	; 0xa3c4 <vfprintf+0x32c>
    a3c0:	9d 2c       	mov	r9, r13
    a3c2:	0b c0       	rjmp	.+22     	; 0xa3da <vfprintf+0x342>
    a3c4:	9d 2c       	mov	r9, r13
    a3c6:	9e 0c       	add	r9, r14
    a3c8:	91 1a       	sub	r9, r17
    a3ca:	1e 2d       	mov	r17, r14
    a3cc:	06 c0       	rjmp	.+12     	; 0xa3da <vfprintf+0x342>
    a3ce:	80 e2       	ldi	r24, 0x20	; 32
    a3d0:	90 e0       	ldi	r25, 0x00	; 0
    a3d2:	b3 01       	movw	r22, r6
    a3d4:	0e 94 7b 52 	call	0xa4f6	; 0xa4f6 <fputc>
    a3d8:	1f 5f       	subi	r17, 0xFF	; 255
    a3da:	1e 15       	cp	r17, r14
    a3dc:	c0 f3       	brcs	.-16     	; 0xa3ce <vfprintf+0x336>
    a3de:	04 c0       	rjmp	.+8      	; 0xa3e8 <vfprintf+0x350>
    a3e0:	1e 15       	cp	r17, r14
    a3e2:	10 f4       	brcc	.+4      	; 0xa3e8 <vfprintf+0x350>
    a3e4:	e1 1a       	sub	r14, r17
    a3e6:	01 c0       	rjmp	.+2      	; 0xa3ea <vfprintf+0x352>
    a3e8:	ee 24       	eor	r14, r14
    a3ea:	04 ff       	sbrs	r16, 4
    a3ec:	0f c0       	rjmp	.+30     	; 0xa40c <vfprintf+0x374>
    a3ee:	80 e3       	ldi	r24, 0x30	; 48
    a3f0:	90 e0       	ldi	r25, 0x00	; 0
    a3f2:	b3 01       	movw	r22, r6
    a3f4:	0e 94 7b 52 	call	0xa4f6	; 0xa4f6 <fputc>
    a3f8:	02 ff       	sbrs	r16, 2
    a3fa:	1d c0       	rjmp	.+58     	; 0xa436 <vfprintf+0x39e>
    a3fc:	01 fd       	sbrc	r16, 1
    a3fe:	03 c0       	rjmp	.+6      	; 0xa406 <vfprintf+0x36e>
    a400:	88 e7       	ldi	r24, 0x78	; 120
    a402:	90 e0       	ldi	r25, 0x00	; 0
    a404:	0e c0       	rjmp	.+28     	; 0xa422 <vfprintf+0x38a>
    a406:	88 e5       	ldi	r24, 0x58	; 88
    a408:	90 e0       	ldi	r25, 0x00	; 0
    a40a:	0b c0       	rjmp	.+22     	; 0xa422 <vfprintf+0x38a>
    a40c:	80 2f       	mov	r24, r16
    a40e:	86 78       	andi	r24, 0x86	; 134
    a410:	91 f0       	breq	.+36     	; 0xa436 <vfprintf+0x39e>
    a412:	01 ff       	sbrs	r16, 1
    a414:	02 c0       	rjmp	.+4      	; 0xa41a <vfprintf+0x382>
    a416:	8b e2       	ldi	r24, 0x2B	; 43
    a418:	01 c0       	rjmp	.+2      	; 0xa41c <vfprintf+0x384>
    a41a:	80 e2       	ldi	r24, 0x20	; 32
    a41c:	f7 fc       	sbrc	r15, 7
    a41e:	8d e2       	ldi	r24, 0x2D	; 45
    a420:	90 e0       	ldi	r25, 0x00	; 0
    a422:	b3 01       	movw	r22, r6
    a424:	0e 94 7b 52 	call	0xa4f6	; 0xa4f6 <fputc>
    a428:	06 c0       	rjmp	.+12     	; 0xa436 <vfprintf+0x39e>
    a42a:	80 e3       	ldi	r24, 0x30	; 48
    a42c:	90 e0       	ldi	r25, 0x00	; 0
    a42e:	b3 01       	movw	r22, r6
    a430:	0e 94 7b 52 	call	0xa4f6	; 0xa4f6 <fputc>
    a434:	9a 94       	dec	r9
    a436:	d9 14       	cp	r13, r9
    a438:	c0 f3       	brcs	.-16     	; 0xa42a <vfprintf+0x392>
    a43a:	da 94       	dec	r13
    a43c:	f1 01       	movw	r30, r2
    a43e:	ed 0d       	add	r30, r13
    a440:	f1 1d       	adc	r31, r1
    a442:	80 81       	ld	r24, Z
    a444:	90 e0       	ldi	r25, 0x00	; 0
    a446:	b3 01       	movw	r22, r6
    a448:	0e 94 7b 52 	call	0xa4f6	; 0xa4f6 <fputc>
    a44c:	dd 20       	and	r13, r13
    a44e:	a9 f7       	brne	.-22     	; 0xa43a <vfprintf+0x3a2>
    a450:	06 c0       	rjmp	.+12     	; 0xa45e <vfprintf+0x3c6>
    a452:	80 e2       	ldi	r24, 0x20	; 32
    a454:	90 e0       	ldi	r25, 0x00	; 0
    a456:	b3 01       	movw	r22, r6
    a458:	0e 94 7b 52 	call	0xa4f6	; 0xa4f6 <fputc>
    a45c:	ea 94       	dec	r14
    a45e:	ee 20       	and	r14, r14
    a460:	c1 f7       	brne	.-16     	; 0xa452 <vfprintf+0x3ba>
    a462:	43 ce       	rjmp	.-890    	; 0xa0ea <vfprintf+0x52>
    a464:	f3 01       	movw	r30, r6
    a466:	66 81       	ldd	r22, Z+6	; 0x06
    a468:	77 81       	ldd	r23, Z+7	; 0x07
    a46a:	cb 01       	movw	r24, r22
    a46c:	2b 96       	adiw	r28, 0x0b	; 11
    a46e:	cd bf       	out	0x3d, r28	; 61
    a470:	de bf       	out	0x3e, r29	; 62
    a472:	cf 91       	pop	r28
    a474:	df 91       	pop	r29
    a476:	1f 91       	pop	r17
    a478:	0f 91       	pop	r16
    a47a:	ff 90       	pop	r15
    a47c:	ef 90       	pop	r14
    a47e:	df 90       	pop	r13
    a480:	cf 90       	pop	r12
    a482:	bf 90       	pop	r11
    a484:	af 90       	pop	r10
    a486:	9f 90       	pop	r9
    a488:	8f 90       	pop	r8
    a48a:	7f 90       	pop	r7
    a48c:	6f 90       	pop	r6
    a48e:	5f 90       	pop	r5
    a490:	4f 90       	pop	r4
    a492:	3f 90       	pop	r3
    a494:	2f 90       	pop	r2
    a496:	08 95       	ret

0000a498 <strnlen_P>:
    a498:	fc 01       	movw	r30, r24
    a49a:	05 90       	lpm	r0, Z+
    a49c:	61 50       	subi	r22, 0x01	; 1
    a49e:	70 40       	sbci	r23, 0x00	; 0
    a4a0:	01 10       	cpse	r0, r1
    a4a2:	d8 f7       	brcc	.-10     	; 0xa49a <strnlen_P+0x2>
    a4a4:	80 95       	com	r24
    a4a6:	90 95       	com	r25
    a4a8:	8e 0f       	add	r24, r30
    a4aa:	9f 1f       	adc	r25, r31
    a4ac:	08 95       	ret

0000a4ae <memcpy>:
    a4ae:	fb 01       	movw	r30, r22
    a4b0:	dc 01       	movw	r26, r24
    a4b2:	02 c0       	rjmp	.+4      	; 0xa4b8 <memcpy+0xa>
    a4b4:	01 90       	ld	r0, Z+
    a4b6:	0d 92       	st	X+, r0
    a4b8:	41 50       	subi	r20, 0x01	; 1
    a4ba:	50 40       	sbci	r21, 0x00	; 0
    a4bc:	d8 f7       	brcc	.-10     	; 0xa4b4 <memcpy+0x6>
    a4be:	08 95       	ret

0000a4c0 <strnlen>:
    a4c0:	fc 01       	movw	r30, r24
    a4c2:	61 50       	subi	r22, 0x01	; 1
    a4c4:	70 40       	sbci	r23, 0x00	; 0
    a4c6:	01 90       	ld	r0, Z+
    a4c8:	01 10       	cpse	r0, r1
    a4ca:	d8 f7       	brcc	.-10     	; 0xa4c2 <strnlen+0x2>
    a4cc:	80 95       	com	r24
    a4ce:	90 95       	com	r25
    a4d0:	8e 0f       	add	r24, r30
    a4d2:	9f 1f       	adc	r25, r31
    a4d4:	08 95       	ret

0000a4d6 <strrev>:
    a4d6:	dc 01       	movw	r26, r24
    a4d8:	fc 01       	movw	r30, r24
    a4da:	67 2f       	mov	r22, r23
    a4dc:	71 91       	ld	r23, Z+
    a4de:	77 23       	and	r23, r23
    a4e0:	e1 f7       	brne	.-8      	; 0xa4da <strrev+0x4>
    a4e2:	32 97       	sbiw	r30, 0x02	; 2
    a4e4:	04 c0       	rjmp	.+8      	; 0xa4ee <strrev+0x18>
    a4e6:	7c 91       	ld	r23, X
    a4e8:	6d 93       	st	X+, r22
    a4ea:	70 83       	st	Z, r23
    a4ec:	62 91       	ld	r22, -Z
    a4ee:	ae 17       	cp	r26, r30
    a4f0:	bf 07       	cpc	r27, r31
    a4f2:	c8 f3       	brcs	.-14     	; 0xa4e6 <strrev+0x10>
    a4f4:	08 95       	ret

0000a4f6 <fputc>:
    a4f6:	0f 93       	push	r16
    a4f8:	1f 93       	push	r17
    a4fa:	cf 93       	push	r28
    a4fc:	df 93       	push	r29
    a4fe:	8c 01       	movw	r16, r24
    a500:	eb 01       	movw	r28, r22
    a502:	8b 81       	ldd	r24, Y+3	; 0x03
    a504:	81 ff       	sbrs	r24, 1
    a506:	1b c0       	rjmp	.+54     	; 0xa53e <fputc+0x48>
    a508:	82 ff       	sbrs	r24, 2
    a50a:	0d c0       	rjmp	.+26     	; 0xa526 <fputc+0x30>
    a50c:	2e 81       	ldd	r18, Y+6	; 0x06
    a50e:	3f 81       	ldd	r19, Y+7	; 0x07
    a510:	8c 81       	ldd	r24, Y+4	; 0x04
    a512:	9d 81       	ldd	r25, Y+5	; 0x05
    a514:	28 17       	cp	r18, r24
    a516:	39 07       	cpc	r19, r25
    a518:	64 f4       	brge	.+24     	; 0xa532 <fputc+0x3c>
    a51a:	e8 81       	ld	r30, Y
    a51c:	f9 81       	ldd	r31, Y+1	; 0x01
    a51e:	01 93       	st	Z+, r16
    a520:	e8 83       	st	Y, r30
    a522:	f9 83       	std	Y+1, r31	; 0x01
    a524:	06 c0       	rjmp	.+12     	; 0xa532 <fputc+0x3c>
    a526:	e8 85       	ldd	r30, Y+8	; 0x08
    a528:	f9 85       	ldd	r31, Y+9	; 0x09
    a52a:	80 2f       	mov	r24, r16
    a52c:	19 95       	eicall
    a52e:	89 2b       	or	r24, r25
    a530:	31 f4       	brne	.+12     	; 0xa53e <fputc+0x48>
    a532:	8e 81       	ldd	r24, Y+6	; 0x06
    a534:	9f 81       	ldd	r25, Y+7	; 0x07
    a536:	01 96       	adiw	r24, 0x01	; 1
    a538:	8e 83       	std	Y+6, r24	; 0x06
    a53a:	9f 83       	std	Y+7, r25	; 0x07
    a53c:	02 c0       	rjmp	.+4      	; 0xa542 <fputc+0x4c>
    a53e:	0f ef       	ldi	r16, 0xFF	; 255
    a540:	1f ef       	ldi	r17, 0xFF	; 255
    a542:	c8 01       	movw	r24, r16
    a544:	df 91       	pop	r29
    a546:	cf 91       	pop	r28
    a548:	1f 91       	pop	r17
    a54a:	0f 91       	pop	r16
    a54c:	08 95       	ret

0000a54e <__ultoa_invert>:
    a54e:	fa 01       	movw	r30, r20
    a550:	aa 27       	eor	r26, r26
    a552:	28 30       	cpi	r18, 0x08	; 8
    a554:	51 f1       	breq	.+84     	; 0xa5aa <__ultoa_invert+0x5c>
    a556:	20 31       	cpi	r18, 0x10	; 16
    a558:	81 f1       	breq	.+96     	; 0xa5ba <__ultoa_invert+0x6c>
    a55a:	e8 94       	clt
    a55c:	6f 93       	push	r22
    a55e:	6e 7f       	andi	r22, 0xFE	; 254
    a560:	6e 5f       	subi	r22, 0xFE	; 254
    a562:	7f 4f       	sbci	r23, 0xFF	; 255
    a564:	8f 4f       	sbci	r24, 0xFF	; 255
    a566:	9f 4f       	sbci	r25, 0xFF	; 255
    a568:	af 4f       	sbci	r26, 0xFF	; 255
    a56a:	b1 e0       	ldi	r27, 0x01	; 1
    a56c:	3e d0       	rcall	.+124    	; 0xa5ea <__ultoa_invert+0x9c>
    a56e:	b4 e0       	ldi	r27, 0x04	; 4
    a570:	3c d0       	rcall	.+120    	; 0xa5ea <__ultoa_invert+0x9c>
    a572:	67 0f       	add	r22, r23
    a574:	78 1f       	adc	r23, r24
    a576:	89 1f       	adc	r24, r25
    a578:	9a 1f       	adc	r25, r26
    a57a:	a1 1d       	adc	r26, r1
    a57c:	68 0f       	add	r22, r24
    a57e:	79 1f       	adc	r23, r25
    a580:	8a 1f       	adc	r24, r26
    a582:	91 1d       	adc	r25, r1
    a584:	a1 1d       	adc	r26, r1
    a586:	6a 0f       	add	r22, r26
    a588:	71 1d       	adc	r23, r1
    a58a:	81 1d       	adc	r24, r1
    a58c:	91 1d       	adc	r25, r1
    a58e:	a1 1d       	adc	r26, r1
    a590:	20 d0       	rcall	.+64     	; 0xa5d2 <__ultoa_invert+0x84>
    a592:	09 f4       	brne	.+2      	; 0xa596 <__ultoa_invert+0x48>
    a594:	68 94       	set
    a596:	3f 91       	pop	r19
    a598:	2a e0       	ldi	r18, 0x0A	; 10
    a59a:	26 9f       	mul	r18, r22
    a59c:	11 24       	eor	r1, r1
    a59e:	30 19       	sub	r19, r0
    a5a0:	30 5d       	subi	r19, 0xD0	; 208
    a5a2:	31 93       	st	Z+, r19
    a5a4:	de f6       	brtc	.-74     	; 0xa55c <__ultoa_invert+0xe>
    a5a6:	cf 01       	movw	r24, r30
    a5a8:	08 95       	ret
    a5aa:	46 2f       	mov	r20, r22
    a5ac:	47 70       	andi	r20, 0x07	; 7
    a5ae:	40 5d       	subi	r20, 0xD0	; 208
    a5b0:	41 93       	st	Z+, r20
    a5b2:	b3 e0       	ldi	r27, 0x03	; 3
    a5b4:	0f d0       	rcall	.+30     	; 0xa5d4 <__ultoa_invert+0x86>
    a5b6:	c9 f7       	brne	.-14     	; 0xa5aa <__ultoa_invert+0x5c>
    a5b8:	f6 cf       	rjmp	.-20     	; 0xa5a6 <__ultoa_invert+0x58>
    a5ba:	46 2f       	mov	r20, r22
    a5bc:	4f 70       	andi	r20, 0x0F	; 15
    a5be:	40 5d       	subi	r20, 0xD0	; 208
    a5c0:	4a 33       	cpi	r20, 0x3A	; 58
    a5c2:	18 f0       	brcs	.+6      	; 0xa5ca <__ultoa_invert+0x7c>
    a5c4:	49 5d       	subi	r20, 0xD9	; 217
    a5c6:	31 fd       	sbrc	r19, 1
    a5c8:	40 52       	subi	r20, 0x20	; 32
    a5ca:	41 93       	st	Z+, r20
    a5cc:	02 d0       	rcall	.+4      	; 0xa5d2 <__ultoa_invert+0x84>
    a5ce:	a9 f7       	brne	.-22     	; 0xa5ba <__ultoa_invert+0x6c>
    a5d0:	ea cf       	rjmp	.-44     	; 0xa5a6 <__ultoa_invert+0x58>
    a5d2:	b4 e0       	ldi	r27, 0x04	; 4
    a5d4:	a6 95       	lsr	r26
    a5d6:	97 95       	ror	r25
    a5d8:	87 95       	ror	r24
    a5da:	77 95       	ror	r23
    a5dc:	67 95       	ror	r22
    a5de:	ba 95       	dec	r27
    a5e0:	c9 f7       	brne	.-14     	; 0xa5d4 <__ultoa_invert+0x86>
    a5e2:	00 97       	sbiw	r24, 0x00	; 0
    a5e4:	61 05       	cpc	r22, r1
    a5e6:	71 05       	cpc	r23, r1
    a5e8:	08 95       	ret
    a5ea:	9b 01       	movw	r18, r22
    a5ec:	ac 01       	movw	r20, r24
    a5ee:	0a 2e       	mov	r0, r26
    a5f0:	06 94       	lsr	r0
    a5f2:	57 95       	ror	r21
    a5f4:	47 95       	ror	r20
    a5f6:	37 95       	ror	r19
    a5f8:	27 95       	ror	r18
    a5fa:	ba 95       	dec	r27
    a5fc:	c9 f7       	brne	.-14     	; 0xa5f0 <__ultoa_invert+0xa2>
    a5fe:	62 0f       	add	r22, r18
    a600:	73 1f       	adc	r23, r19
    a602:	84 1f       	adc	r24, r20
    a604:	95 1f       	adc	r25, r21
    a606:	a0 1d       	adc	r26, r0
    a608:	08 95       	ret

0000a60a <_exit>:
    a60a:	f8 94       	cli

0000a60c <__stop_program>:
    a60c:	ff cf       	rjmp	.-2      	; 0xa60c <__stop_program>
