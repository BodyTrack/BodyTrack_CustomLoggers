
mainBaseStation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a9d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000ce0  00802000  0000a9d0  0000aa64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002a40  00802ce0  00802ce0  0000b744  2**0
                  ALLOC
  3 .stab         00001ef0  00000000  00000000  0000b744  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000715  00000000  00000000  0000d634  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  0000dd49  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000163d  00000000  00000000  0000dde9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000890d  00000000  00000000  0000f426  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a30  00000000  00000000  00017d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006e12  00000000  00000000  00018763  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a40  00000000  00000000  0001f578  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000045b7  00000000  00000000  0001ffb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000065f1  00000000  00000000  0002456f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003a8  00000000  00000000  0002ab60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      bc:	0c 94 ce 2d 	jmp	0x5b9c	; 0x5b9c <__vector_47>
      c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d4:	0c 94 f9 48 	jmp	0x91f2	; 0x91f2 <__vector_53>
      d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ec:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      fc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     100:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     104:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     108:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     10c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     110:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     114:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     118:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     11c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     120:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     124:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     128:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     12c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     130:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     134:	0c 94 83 36 	jmp	0x6d06	; 0x6d06 <__vector_77>
     138:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     13c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     140:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     144:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     148:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     14c:	0c 94 ab 33 	jmp	0x6756	; 0x6756 <__vector_83>
     150:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     154:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     158:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     15c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     160:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_88>
     164:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     168:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     16c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     170:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     174:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     178:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     17c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     180:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     184:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     188:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     18c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     190:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     194:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     198:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     19c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a0:	0c 94 a6 3a 	jmp	0x754c	; 0x754c <__vector_104>
     1a4:	0c 94 1e 3b 	jmp	0x763c	; 0x763c <__vector_105>
     1a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b0:	0c 94 64 43 	jmp	0x86c8	; 0x86c8 <__vector_108>
     1b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e5       	ldi	r29, 0x5F	; 95
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	1c e2       	ldi	r17, 0x2C	; 44
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	e0 ed       	ldi	r30, 0xD0	; 208
     200:	f9 ea       	ldi	r31, 0xA9	; 169
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a0 3e       	cpi	r26, 0xE0	; 224
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	17 e5       	ldi	r17, 0x57	; 87
     214:	a0 ee       	ldi	r26, 0xE0	; 224
     216:	bc e2       	ldi	r27, 0x2C	; 44
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a0 32       	cpi	r26, 0x20	; 32
     21e:	b1 07       	cpc	r27, r17
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 d7 4d 	call	0x9bae	; 0x9bae <main>
     226:	0c 94 e6 54 	jmp	0xa9cc	; 0xa9cc <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <CCPWrite>:
bool demoMode = false;
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
     22e:	0f 93       	push	r16
     230:	df 93       	push	r29
     232:	cf 93       	push	r28
     234:	0f 92       	push	r0
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
    uint8_t volatile saved_sreg = SREG;
     23a:	2f b7       	in	r18, 0x3f	; 63
     23c:	29 83       	std	Y+1, r18	; 0x01
    cli();
     23e:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     240:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     242:	fc 01       	movw	r30, r24
     244:	08 ed       	ldi	r16, 0xD8	; 216
     246:	04 bf       	out	0x34, r16	; 52
     248:	60 83       	st	Z, r22
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	8f bf       	out	0x3f, r24	; 63
}
     24e:	0f 90       	pop	r0
     250:	cf 91       	pop	r28
     252:	df 91       	pop	r29
     254:	0f 91       	pop	r16
     256:	08 95       	ret

00000258 <Debug_CharReadyToRead>:
	}
}


bool Debug_CharReadyToRead(void){
    Debug_writeLocation  = DMA.Debug_DMA_Channel.DESTADDR1 << 8;
     258:	20 91 1d 01 	lds	r18, 0x011D
     25c:	92 2f       	mov	r25, r18
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	80 93 ff 2c 	sts	0x2CFF, r24
     264:	90 93 00 2d 	sts	0x2D00, r25
	Debug_writeLocation += DMA.Debug_DMA_Channel.DESTADDR0;
     268:	80 91 ff 2c 	lds	r24, 0x2CFF
     26c:	90 91 00 2d 	lds	r25, 0x2D00
     270:	20 91 1c 01 	lds	r18, 0x011C
     274:	82 0f       	add	r24, r18
     276:	91 1d       	adc	r25, r1
     278:	80 93 ff 2c 	sts	0x2CFF, r24
     27c:	90 93 00 2d 	sts	0x2D00, r25
	Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);
     280:	80 91 ff 2c 	lds	r24, 0x2CFF
     284:	90 91 00 2d 	lds	r25, 0x2D00
     288:	8f 5f       	subi	r24, 0xFF	; 255
     28a:	9f 44       	sbci	r25, 0x4F	; 79
     28c:	80 93 ff 2c 	sts	0x2CFF, r24
     290:	90 93 00 2d 	sts	0x2D00, r25



	if(Debug_writeLocation == Debug_readLocation){
     294:	20 91 ff 2c 	lds	r18, 0x2CFF
     298:	30 91 00 2d 	lds	r19, 0x2D00
     29c:	80 91 fd 2c 	lds	r24, 0x2CFD
     2a0:	90 91 fe 2c 	lds	r25, 0x2CFE
     2a4:	40 e0       	ldi	r20, 0x00	; 0
     2a6:	28 17       	cp	r18, r24
     2a8:	39 07       	cpc	r19, r25
     2aa:	09 f0       	breq	.+2      	; 0x2ae <Debug_CharReadyToRead+0x56>
     2ac:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     2ae:	84 2f       	mov	r24, r20
     2b0:	08 95       	ret

000002b2 <Debug_ClearBuffer>:
	
	Debug_ClearBuffer();
	
}
void Debug_ClearBuffer(void){
	if(Debug_CharReadyToRead()){
     2b2:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
     2b6:	88 23       	and	r24, r24
     2b8:	31 f1       	breq	.+76     	; 0x306 <Debug_ClearBuffer+0x54>
		Debug_writeLocation  = DMA.Debug_DMA_Channel.DESTADDR1 << 8;
     2ba:	20 91 1d 01 	lds	r18, 0x011D
     2be:	92 2f       	mov	r25, r18
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	80 93 ff 2c 	sts	0x2CFF, r24
     2c6:	90 93 00 2d 	sts	0x2D00, r25
		Debug_writeLocation += DMA.Debug_DMA_Channel.DESTADDR0;
     2ca:	80 91 ff 2c 	lds	r24, 0x2CFF
     2ce:	90 91 00 2d 	lds	r25, 0x2D00
     2d2:	20 91 1c 01 	lds	r18, 0x011C
     2d6:	82 0f       	add	r24, r18
     2d8:	91 1d       	adc	r25, r1
     2da:	80 93 ff 2c 	sts	0x2CFF, r24
     2de:	90 93 00 2d 	sts	0x2D00, r25
		Debug_writeLocation -= (uint16_t)(&DebugBuffer[0]);
     2e2:	80 91 ff 2c 	lds	r24, 0x2CFF
     2e6:	90 91 00 2d 	lds	r25, 0x2D00
     2ea:	8f 5f       	subi	r24, 0xFF	; 255
     2ec:	9f 44       	sbci	r25, 0x4F	; 79
     2ee:	80 93 ff 2c 	sts	0x2CFF, r24
     2f2:	90 93 00 2d 	sts	0x2D00, r25
		Debug_readLocation = Debug_writeLocation;
     2f6:	80 91 ff 2c 	lds	r24, 0x2CFF
     2fa:	90 91 00 2d 	lds	r25, 0x2D00
     2fe:	80 93 fd 2c 	sts	0x2CFD, r24
     302:	90 93 fe 2c 	sts	0x2CFE, r25
     306:	08 95       	ret

00000308 <Debug_Init>:
volatile uint16_t  	Debug_readLocation = 0;
volatile uint16_t   Debug_writeLocation = 0;

volatile uint32_t	Debug_timeOutCounter = 0;

void Debug_Init(uint32_t baud){
     308:	ab 01       	movw	r20, r22
     30a:	bc 01       	movw	r22, r24
	
	DMA.CTRL |= DMA_ENABLE_bm; // enable DMA
     30c:	e0 e0       	ldi	r30, 0x00	; 0
     30e:	f1 e0       	ldi	r31, 0x01	; 1
     310:	80 91 00 01 	lds	r24, 0x0100
     314:	80 68       	ori	r24, 0x80	; 128
     316:	80 93 00 01 	sts	0x0100, r24
	
	// Debug
	DMA.Debug_DMA_Channel.ADDRCTRL |= DMA_CH_SRCRELOAD_NONE_gc | DMA_CH_SRCDIR_FIXED_gc	| DMA_CH_DESTRELOAD_BLOCK_gc | DMA_CH_DESTDIR_INC_gc;
     31a:	80 91 12 01 	lds	r24, 0x0112
     31e:	85 60       	ori	r24, 0x05	; 5
     320:	82 8b       	std	Z+18, r24	; 0x12
	DMA.Debug_DMA_Channel.TRIGSRC = DMA_CH_TRIGSRC_USARTC0_RXC_gc;
     322:	8b e4       	ldi	r24, 0x4B	; 75
     324:	83 8b       	std	Z+19, r24	; 0x13
	DMA.Debug_DMA_Channel.TRFCNT = Debug_BufferSize;	
     326:	84 e6       	ldi	r24, 0x64	; 100
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	84 8b       	std	Z+20, r24	; 0x14
     32c:	95 8b       	std	Z+21, r25	; 0x15
	DMA.Debug_DMA_Channel.REPCNT  = 0;		// repeat forever
     32e:	16 8a       	std	Z+22, r1	; 0x16
	
	DMA.Debug_DMA_Channel.SRCADDR0 = (((uint16_t)(&Debug_Usart.DATA) >> 0) & 0xFF);
     330:	80 ea       	ldi	r24, 0xA0	; 160
     332:	80 8f       	std	Z+24, r24	; 0x18
	DMA.Debug_DMA_Channel.SRCADDR1 = (((uint16_t)(&Debug_Usart.DATA) >> 8) & 0xFF);
     334:	28 e0       	ldi	r18, 0x08	; 8
     336:	21 8f       	std	Z+25, r18	; 0x19
	DMA.Debug_DMA_Channel.SRCADDR2 = 0x00;
     338:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.Debug_DMA_Channel.DESTADDR0 = (((uint16_t)(&DebugBuffer[0]) >> 0) & 0xFF);
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	9f e4       	ldi	r25, 0x4F	; 79
     33e:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.Debug_DMA_Channel.DESTADDR1 = (((uint16_t)(&DebugBuffer[0]) >> 8) & 0xFF);
     340:	95 8f       	std	Z+29, r25	; 0x1d
	DMA.Debug_DMA_Channel.DESTADDR2 = 0x00;
     342:	16 8e       	std	Z+30, r1	; 0x1e
	
	DMA.Debug_DMA_Channel.CTRLA |= DMA_CH_ENABLE_bm | DMA_CH_REPEAT_bm | DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm;
     344:	80 91 10 01 	lds	r24, 0x0110
     348:	84 6a       	ori	r24, 0xA4	; 164
     34a:	80 8b       	std	Z+16, r24	; 0x10
	
	Debug_Port.DIRSET = Debug_TX_pin_bm;
     34c:	e0 e4       	ldi	r30, 0x40	; 64
     34e:	f6 e0       	ldi	r31, 0x06	; 6
     350:	21 83       	std	Z+1, r18	; 0x01
	Debug_Port.DIRCLR = Debug_RX_pin_bm;
     352:	84 e0       	ldi	r24, 0x04	; 4
     354:	82 83       	std	Z+2, r24	; 0x02


    Debug_Flow_Port.DIRCLR = (1<<Debug_RTS_pin);
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	92 83       	std	Z+2, r25	; 0x02
    Debug_Flow_Port.DIRSET = (1<<Debug_CTS_pin);
     35a:	82 e0       	ldi	r24, 0x02	; 2
     35c:	81 83       	std	Z+1, r24	; 0x01
	Debug_Flow_Port.OUTCLR = (1<<Debug_CTS_pin);
     35e:	86 83       	std	Z+6, r24	; 0x06

	Debug_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);	 	    				
     360:	e0 ea       	ldi	r30, 0xA0	; 160
     362:	f8 e0       	ldi	r31, 0x08	; 8
     364:	83 e0       	ldi	r24, 0x03	; 3
     366:	85 83       	std	Z+5, r24	; 0x05

	if(baud == 9600){
     368:	40 38       	cpi	r20, 0x80	; 128
     36a:	25 e2       	ldi	r18, 0x25	; 37
     36c:	52 07       	cpc	r21, r18
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	62 07       	cpc	r22, r18
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	72 07       	cpc	r23, r18
     376:	11 f4       	brne	.+4      	; 0x37c <Debug_Init+0x74>
		Debug_Usart.BAUDCTRLA = 95 & 0xFF;
     378:	8f e5       	ldi	r24, 0x5F	; 95
     37a:	09 c0       	rjmp	.+18     	; 0x38e <Debug_Init+0x86>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
	} else if(baud == 115200){
     37c:	40 30       	cpi	r20, 0x00	; 0
     37e:	22 ec       	ldi	r18, 0xC2	; 194
     380:	52 07       	cpc	r21, r18
     382:	21 e0       	ldi	r18, 0x01	; 1
     384:	62 07       	cpc	r22, r18
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	72 07       	cpc	r23, r18
     38a:	19 f4       	brne	.+6      	; 0x392 <Debug_Init+0x8a>
		Debug_Usart.BAUDCTRLA = 7 & 0xFF;
     38c:	87 e0       	ldi	r24, 0x07	; 7
     38e:	86 83       	std	Z+6, r24	; 0x06
     390:	18 c0       	rjmp	.+48     	; 0x3c2 <Debug_Init+0xba>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(7 >> 8);
	} else if(baud == 230400){
     392:	40 30       	cpi	r20, 0x00	; 0
     394:	24 e8       	ldi	r18, 0x84	; 132
     396:	52 07       	cpc	r21, r18
     398:	23 e0       	ldi	r18, 0x03	; 3
     39a:	62 07       	cpc	r22, r18
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	72 07       	cpc	r23, r18
     3a0:	b1 f3       	breq	.-20     	; 0x38e <Debug_Init+0x86>
		Debug_Usart.BAUDCTRLA = 3 & 0xFF;
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(3 >> 8);
	}else if(baud == 460800){
     3a2:	40 30       	cpi	r20, 0x00	; 0
     3a4:	88 e0       	ldi	r24, 0x08	; 8
     3a6:	58 07       	cpc	r21, r24
     3a8:	87 e0       	ldi	r24, 0x07	; 7
     3aa:	68 07       	cpc	r22, r24
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	78 07       	cpc	r23, r24
     3b0:	11 f4       	brne	.+4      	; 0x3b6 <Debug_Init+0xae>
		Debug_Usart.BAUDCTRLA = 1 & 0xFF;
     3b2:	96 83       	std	Z+6, r25	; 0x06
     3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <Debug_Init+0xba>
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(1 >> 8);
	} else if(baud == 921600){
     3b6:	40 50       	subi	r20, 0x00	; 0
     3b8:	50 41       	sbci	r21, 0x10	; 16
     3ba:	6e 40       	sbci	r22, 0x0E	; 14
     3bc:	70 40       	sbci	r23, 0x00	; 0
     3be:	11 f4       	brne	.+4      	; 0x3c4 <Debug_Init+0xbc>
		Debug_Usart.BAUDCTRLA = 0 & 0xFF;
     3c0:	16 82       	std	Z+6, r1	; 0x06
		Debug_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(0 >> 8);
     3c2:	17 82       	std	Z+7, r1	; 0x07
	}

	Debug_Usart.CTRLB |= USART_RXEN_bm;
     3c4:	e0 ea       	ldi	r30, 0xA0	; 160
     3c6:	f8 e0       	ldi	r31, 0x08	; 8
     3c8:	80 91 a4 08 	lds	r24, 0x08A4
     3cc:	80 61       	ori	r24, 0x10	; 16
     3ce:	84 83       	std	Z+4, r24	; 0x04
	Debug_Usart.CTRLB |= USART_TXEN_bm;
     3d0:	80 91 a4 08 	lds	r24, 0x08A4
     3d4:	88 60       	ori	r24, 0x08	; 8
     3d6:	84 83       	std	Z+4, r24	; 0x04
	
	Debug_Usart.CTRLA |= USART_RXCINTLVL_MED_gc;
     3d8:	80 91 a3 08 	lds	r24, 0x08A3
     3dc:	80 62       	ori	r24, 0x20	; 32
     3de:	83 83       	std	Z+3, r24	; 0x03
	
	Debug_ClearBuffer();
     3e0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Debug_ClearBuffer>
	
}
     3e4:	08 95       	ret

000003e6 <Debug_GetByte>:
		return true;
	}
}

uint8_t Debug_GetByte(bool blocking){
	if(blocking){
     3e6:	88 23       	and	r24, r24
     3e8:	21 f0       	breq	.+8      	; 0x3f2 <Debug_GetByte+0xc>
		while(!Debug_CharReadyToRead());
     3ea:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
     3ee:	88 23       	and	r24, r24
     3f0:	e1 f3       	breq	.-8      	; 0x3ea <Debug_GetByte+0x4>
	}

	uint8_t tmp = DebugBuffer[Debug_readLocation];
     3f2:	e0 91 fd 2c 	lds	r30, 0x2CFD
     3f6:	f0 91 fe 2c 	lds	r31, 0x2CFE
     3fa:	e1 50       	subi	r30, 0x01	; 1
     3fc:	f0 4b       	sbci	r31, 0xB0	; 176
     3fe:	e0 81       	ld	r30, Z
	Debug_readLocation++;
     400:	80 91 fd 2c 	lds	r24, 0x2CFD
     404:	90 91 fe 2c 	lds	r25, 0x2CFE
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	80 93 fd 2c 	sts	0x2CFD, r24
     40e:	90 93 fe 2c 	sts	0x2CFE, r25
	if(Debug_readLocation >= Debug_BufferSize){
     412:	80 91 fd 2c 	lds	r24, 0x2CFD
     416:	90 91 fe 2c 	lds	r25, 0x2CFE
     41a:	84 36       	cpi	r24, 0x64	; 100
     41c:	91 05       	cpc	r25, r1
     41e:	20 f0       	brcs	.+8      	; 0x428 <Debug_GetByte+0x42>
	  Debug_readLocation=0;
     420:	10 92 fd 2c 	sts	0x2CFD, r1
     424:	10 92 fe 2c 	sts	0x2CFE, r1
	}
	return tmp;
}
     428:	8e 2f       	mov	r24, r30
     42a:	08 95       	ret

0000042c <Debug_SendByte>:


bool Debug_SendByte(uint8_t data){
     42c:	48 2f       	mov	r20, r24
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
     42e:	80 91 a1 08 	lds	r24, 0x08A1
     432:	85 ff       	sbrs	r24, 5
     434:	fc cf       	rjmp	.-8      	; 0x42e <Debug_SendByte+0x2>
     436:	2e c0       	rjmp	.+92     	; 0x494 <Debug_SendByte+0x68>
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){	// Wait for RTS to be low
		Debug_timeOutCounter++;
     438:	80 91 01 2d 	lds	r24, 0x2D01
     43c:	90 91 02 2d 	lds	r25, 0x2D02
     440:	a0 91 03 2d 	lds	r26, 0x2D03
     444:	b0 91 04 2d 	lds	r27, 0x2D04
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	a1 1d       	adc	r26, r1
     44c:	b1 1d       	adc	r27, r1
     44e:	80 93 01 2d 	sts	0x2D01, r24
     452:	90 93 02 2d 	sts	0x2D02, r25
     456:	a0 93 03 2d 	sts	0x2D03, r26
     45a:	b0 93 04 2d 	sts	0x2D04, r27
		if(Debug_timeOutCounter > 10000){
     45e:	80 91 01 2d 	lds	r24, 0x2D01
     462:	90 91 02 2d 	lds	r25, 0x2D02
     466:	a0 91 03 2d 	lds	r26, 0x2D03
     46a:	b0 91 04 2d 	lds	r27, 0x2D04
     46e:	81 51       	subi	r24, 0x11	; 17
     470:	97 42       	sbci	r25, 0x27	; 39
     472:	a0 40       	sbci	r26, 0x00	; 0
     474:	b0 40       	sbci	r27, 0x00	; 0
     476:	50 f0       	brcs	.+20     	; 0x48c <Debug_SendByte+0x60>
			Debug_timeOutCounter = 0;
     478:	10 92 01 2d 	sts	0x2D01, r1
     47c:	10 92 02 2d 	sts	0x2D02, r1
     480:	10 92 03 2d 	sts	0x2D03, r1
     484:	10 92 04 2d 	sts	0x2D04, r1
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	08 95       	ret
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     48c:	c9 01       	movw	r24, r18
     48e:	01 97       	sbiw	r24, 0x01	; 1
     490:	f1 f7       	brne	.-4      	; 0x48e <Debug_SendByte+0x62>
     492:	02 c0       	rjmp	.+4      	; 0x498 <Debug_SendByte+0x6c>
     494:	26 e6       	ldi	r18, 0x66	; 102
     496:	3e e0       	ldi	r19, 0x0E	; 14
}


bool Debug_SendByte(uint8_t data){
	while(!(Debug_Usart.STATUS & USART_DREIF_bm));
	while(((Debug_Flow_Port.IN)&(1<<Debug_RTS_pin)) > 0){	// Wait for RTS to be low
     498:	80 91 48 06 	lds	r24, 0x0648
     49c:	80 fd       	sbrc	r24, 0
     49e:	cc cf       	rjmp	.-104    	; 0x438 <Debug_SendByte+0xc>
			return false;
		} else {
			_delay_ms(1);
		}
	}
	Debug_Usart.DATA = data;
     4a0:	40 93 a0 08 	sts	0x08A0, r20
     4a4:	81 e0       	ldi	r24, 0x01	; 1
	return true;
}
     4a6:	08 95       	ret

000004a8 <Rs232_Init>:

char				airQualityString[100];
uint32_t			airCount[6];

void Rs232_Init(void){
	Rs232_Port.DIRSET = Rs232_TX_pin_bm;
     4a8:	e0 e6       	ldi	r30, 0x60	; 96
     4aa:	f6 e0       	ldi	r31, 0x06	; 6
     4ac:	88 e0       	ldi	r24, 0x08	; 8
     4ae:	81 83       	std	Z+1, r24	; 0x01
	Rs232_Port.DIRCLR = Rs232_RX_pin_bm;
     4b0:	84 e0       	ldi	r24, 0x04	; 4
     4b2:	82 83       	std	Z+2, r24	; 0x02
   
	Rs232_Usart.CTRLC = USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | (false ? USART_SBMODE_bm : 0);
     4b4:	e0 ea       	ldi	r30, 0xA0	; 160
     4b6:	f9 e0       	ldi	r31, 0x09	; 9
     4b8:	83 e0       	ldi	r24, 0x03	; 3
     4ba:	85 83       	std	Z+5, r24	; 0x05
	 	    				
	Rs232_Usart.BAUDCTRLA = 95 & 0xFF;
     4bc:	8f e5       	ldi	r24, 0x5F	; 95
     4be:	86 83       	std	Z+6, r24	; 0x06
	Rs232_Usart.BAUDCTRLB = (0 << USART_BSCALE0_bp)|(95 >> 8);
     4c0:	17 82       	std	Z+7, r1	; 0x07


	Rs232_Usart.CTRLB |= USART_RXEN_bm;
     4c2:	84 81       	ldd	r24, Z+4	; 0x04
     4c4:	80 61       	ori	r24, 0x10	; 16
     4c6:	84 83       	std	Z+4, r24	; 0x04
	Rs232_Usart.CTRLB |= USART_TXEN_bm;
     4c8:	84 81       	ldd	r24, Z+4	; 0x04
     4ca:	88 60       	ori	r24, 0x08	; 8
     4cc:	84 83       	std	Z+4, r24	; 0x04
	
	Rs232_Usart.CTRLA |= USART_RXCINTLVL_HI_gc;
     4ce:	83 81       	ldd	r24, Z+3	; 0x03
     4d0:	80 63       	ori	r24, 0x30	; 48
     4d2:	83 83       	std	Z+3, r24	; 0x03
}
     4d4:	08 95       	ret

000004d6 <Rs232_CharReadyToRead>:



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     4d6:	20 91 07 2d 	lds	r18, 0x2D07
     4da:	30 91 08 2d 	lds	r19, 0x2D08
     4de:	80 91 05 2d 	lds	r24, 0x2D05
     4e2:	90 91 06 2d 	lds	r25, 0x2D06
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	28 17       	cp	r18, r24
     4ea:	39 07       	cpc	r19, r25
     4ec:	09 f0       	breq	.+2      	; 0x4f0 <Rs232_CharReadyToRead+0x1a>
     4ee:	41 e0       	ldi	r20, 0x01	; 1
		return false;  
	} else { 
		return true;
	}
}
     4f0:	84 2f       	mov	r24, r20
     4f2:	08 95       	ret

000004f4 <Rs232_GetByte>:

uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
     4f4:	88 23       	and	r24, r24
     4f6:	59 f0       	breq	.+22     	; 0x50e <Rs232_GetByte+0x1a>
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
     4f8:	20 91 07 2d 	lds	r18, 0x2D07
     4fc:	30 91 08 2d 	lds	r19, 0x2D08
     500:	80 91 05 2d 	lds	r24, 0x2D05
     504:	90 91 06 2d 	lds	r25, 0x2D06
     508:	28 17       	cp	r18, r24
     50a:	39 07       	cpc	r19, r25
     50c:	a9 f3       	breq	.-22     	; 0x4f8 <Rs232_GetByte+0x4>
uint8_t Rs232_GetByte(bool blocking){
	if(blocking){
		while(!Rs232_CharReadyToRead());
	}

	uint8_t tmp = Rs232Buffer[Rs232_readLocation];
     50e:	e0 91 05 2d 	lds	r30, 0x2D05
     512:	f0 91 06 2d 	lds	r31, 0x2D06
     516:	e0 52       	subi	r30, 0x20	; 32
     518:	fa 4a       	sbci	r31, 0xAA	; 170
     51a:	e0 81       	ld	r30, Z
	Rs232_readLocation++;
     51c:	80 91 05 2d 	lds	r24, 0x2D05
     520:	90 91 06 2d 	lds	r25, 0x2D06
     524:	01 96       	adiw	r24, 0x01	; 1
     526:	80 93 05 2d 	sts	0x2D05, r24
     52a:	90 93 06 2d 	sts	0x2D06, r25
	if(Rs232_readLocation >= Rs232_BufferSize){
     52e:	80 91 05 2d 	lds	r24, 0x2D05
     532:	90 91 06 2d 	lds	r25, 0x2D06
     536:	84 36       	cpi	r24, 0x64	; 100
     538:	91 05       	cpc	r25, r1
     53a:	20 f0       	brcs	.+8      	; 0x544 <Rs232_GetByte+0x50>
	  Rs232_readLocation=0;
     53c:	10 92 05 2d 	sts	0x2D05, r1
     540:	10 92 06 2d 	sts	0x2D06, r1
	}
	return tmp;
}
     544:	8e 2f       	mov	r24, r30
     546:	08 95       	ret

00000548 <Rs232_ClearBuffer>:

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
     548:	80 91 07 2d 	lds	r24, 0x2D07
     54c:	90 91 08 2d 	lds	r25, 0x2D08
     550:	80 93 05 2d 	sts	0x2D05, r24
     554:	90 93 06 2d 	sts	0x2D06, r25
}
     558:	08 95       	ret

0000055a <Rs232_SendByte>:

void Rs232_SendByte(uint8_t data){
     55a:	98 2f       	mov	r25, r24
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
     55c:	80 91 a1 09 	lds	r24, 0x09A1
     560:	85 ff       	sbrs	r24, 5
     562:	fc cf       	rjmp	.-8      	; 0x55c <Rs232_SendByte+0x2>
	Rs232_Usart.DATA = data;	
     564:	90 93 a0 09 	sts	0x09A0, r25
}
     568:	08 95       	ret

0000056a <__vector_88>:
		Rs232_SendByte(13);
		Rs232_SendByte(10);
	}
}

ISR(Rs232_RXC_vect){
     56a:	1f 92       	push	r1
     56c:	0f 92       	push	r0
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	0f 92       	push	r0
     572:	0b b6       	in	r0, 0x3b	; 59
     574:	0f 92       	push	r0
     576:	11 24       	eor	r1, r1
     578:	8f 93       	push	r24
     57a:	9f 93       	push	r25
     57c:	ef 93       	push	r30
     57e:	ff 93       	push	r31
	Rs232Buffer[Rs232_writeLocation] = Rs232_Usart.DATA;
     580:	e0 91 07 2d 	lds	r30, 0x2D07
     584:	f0 91 08 2d 	lds	r31, 0x2D08
     588:	80 91 a0 09 	lds	r24, 0x09A0
     58c:	e0 52       	subi	r30, 0x20	; 32
     58e:	fa 4a       	sbci	r31, 0xAA	; 170
     590:	80 83       	st	Z, r24

	if(Rs232Buffer[Rs232_writeLocation] == 0x0A){
     592:	e0 91 07 2d 	lds	r30, 0x2D07
     596:	f0 91 08 2d 	lds	r31, 0x2D08
     59a:	e0 52       	subi	r30, 0x20	; 32
     59c:	fa 4a       	sbci	r31, 0xAA	; 170
     59e:	80 81       	ld	r24, Z
     5a0:	8a 30       	cpi	r24, 0x0A	; 10
     5a2:	19 f4       	brne	.+6      	; 0x5aa <__vector_88+0x40>
		okToSendAirQuality = true;
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	80 93 09 2d 	sts	0x2D09, r24
	}
	Rs232_writeLocation++;
     5aa:	80 91 07 2d 	lds	r24, 0x2D07
     5ae:	90 91 08 2d 	lds	r25, 0x2D08
     5b2:	01 96       	adiw	r24, 0x01	; 1
     5b4:	80 93 07 2d 	sts	0x2D07, r24
     5b8:	90 93 08 2d 	sts	0x2D08, r25
	if(Rs232_writeLocation >= Rs232_BufferSize){
     5bc:	80 91 07 2d 	lds	r24, 0x2D07
     5c0:	90 91 08 2d 	lds	r25, 0x2D08
     5c4:	84 36       	cpi	r24, 0x64	; 100
     5c6:	91 05       	cpc	r25, r1
     5c8:	20 f0       	brcs	.+8      	; 0x5d2 <__vector_88+0x68>
		Rs232_writeLocation = 0;
     5ca:	10 92 07 2d 	sts	0x2D07, r1
     5ce:	10 92 08 2d 	sts	0x2D08, r1
	}
}
     5d2:	ff 91       	pop	r31
     5d4:	ef 91       	pop	r30
     5d6:	9f 91       	pop	r25
     5d8:	8f 91       	pop	r24
     5da:	0f 90       	pop	r0
     5dc:	0b be       	out	0x3b, r0	; 59
     5de:	0f 90       	pop	r0
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	0f 90       	pop	r0
     5e4:	1f 90       	pop	r1
     5e6:	18 95       	reti

000005e8 <Time_Init>:
	
	// 32 bit counter
  /* We need to set up the event user
   * Which event channel should be input for the peripheral, and what should be the action. */
  
	Time_TimerHigh.CTRLA = Time_EventClockSource; //Select event channel 0 as clock source for TCC1.
     5e8:	88 e0       	ldi	r24, 0x08	; 8
     5ea:	80 93 40 08 	sts	0x0840, r24
   * event channel used */
  
   /* Select TCC0 overflow as event channel 0 multiplexer input.
    * This is all code required to configure one event channel */
  
	EVSYS.Time_EventChannelMux = Time_EventInput;
     5ee:	80 ec       	ldi	r24, 0xC0	; 192
     5f0:	80 93 80 01 	sts	0x0180, r24
    
  /* TCC0 is used as the 16 LSB for the timer. This runs from the normal (prescaled) Peripheral Clock */  
  
  //Select system clock divided by 8 as clock source for TCC0.
	Time_TimerLow.PER = 0xFFFF;
     5f4:	e0 e0       	ldi	r30, 0x00	; 0
     5f6:	f8 e0       	ldi	r31, 0x08	; 8
     5f8:	8f ef       	ldi	r24, 0xFF	; 255
     5fa:	9f ef       	ldi	r25, 0xFF	; 255
     5fc:	86 a3       	std	Z+38, r24	; 0x26
     5fe:	97 a3       	std	Z+39, r25	; 0x27
	Time_TimerLow.CTRLA = (Time_TimerLow.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;   // 1.8432 megehertz
     600:	80 81       	ld	r24, Z
     602:	80 7f       	andi	r24, 0xF0	; 240
     604:	84 60       	ori	r24, 0x04	; 4
     606:	80 83       	st	Z, r24
	
	
}
     608:	08 95       	ret

0000060a <Time_Set>:

void Time_Set(uint32_t time){
     60a:	0f 93       	push	r16
     60c:	df 93       	push	r29
     60e:	cf 93       	push	r28
     610:	0f 92       	push	r0
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	ab 01       	movw	r20, r22
     618:	bc 01       	movw	r22, r24
	cli();
     61a:	f8 94       	cli
	VBAT.CTRL = VBAT_ACCEN_bm;
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	80 93 f0 00 	sts	0x00F0, r24
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
     622:	8f b7       	in	r24, 0x3f	; 63
     624:	89 83       	std	Y+1, r24	; 0x01
    cli();
     626:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     628:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     62a:	21 e0       	ldi	r18, 0x01	; 1
     62c:	80 ef       	ldi	r24, 0xF0	; 240
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	fc 01       	movw	r30, r24
     632:	08 ed       	ldi	r16, 0xD8	; 216
     634:	04 bf       	out	0x34, r16	; 52
     636:	20 83       	st	Z, r18
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	8f bf       	out	0x3f, r24	; 63
	CCPWrite(&VBAT.CTRL, VBAT_RESET_bm);		// Reset battery backup
	VBAT.CTRL |= VBAT_XOSCFDEN_bm;				// enable oscillator failure detection
     63c:	80 91 f0 00 	lds	r24, 0x00F0
     640:	84 60       	ori	r24, 0x04	; 4
     642:	80 93 f0 00 	sts	0x00F0, r24
	VBAT.CTRL |= VBAT_XOSCEN_bm;				// enable 1hz output from oscillator
     646:	80 91 f0 00 	lds	r24, 0x00F0
     64a:	88 60       	ori	r24, 0x08	; 8
     64c:	80 93 f0 00 	sts	0x00F0, r24
	
	/* Disable the RTC32 module before writing to it. Wait for synch. */
	RTC32.CTRL &= ~RTC32_ENABLE_bm;
     650:	80 91 20 04 	lds	r24, 0x0420
     654:	8e 7f       	andi	r24, 0xFE	; 254
     656:	80 93 20 04 	sts	0x0420, r24
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm);
     65a:	e0 e2       	ldi	r30, 0x20	; 32
     65c:	f4 e0       	ldi	r31, 0x04	; 4
     65e:	80 91 21 04 	lds	r24, 0x0421
     662:	80 fd       	sbrc	r24, 0
     664:	fa cf       	rjmp	.-12     	; 0x65a <Time_Set+0x50>
	
	/* Write PER, COMP and CNT. */
	RTC32.PER = 0xFFFFFFFF - 1;
     666:	8e ef       	ldi	r24, 0xFE	; 254
     668:	9f ef       	ldi	r25, 0xFF	; 255
     66a:	af ef       	ldi	r26, 0xFF	; 255
     66c:	bf ef       	ldi	r27, 0xFF	; 255
     66e:	80 87       	std	Z+8, r24	; 0x08
     670:	91 87       	std	Z+9, r25	; 0x09
     672:	a2 87       	std	Z+10, r26	; 0x0a
     674:	b3 87       	std	Z+11, r27	; 0x0b
	RTC32.COMP = 0;
     676:	14 86       	std	Z+12, r1	; 0x0c
     678:	15 86       	std	Z+13, r1	; 0x0d
     67a:	16 86       	std	Z+14, r1	; 0x0e
     67c:	17 86       	std	Z+15, r1	; 0x0f
	RTC32.CNT = time;
     67e:	44 83       	std	Z+4, r20	; 0x04
     680:	55 83       	std	Z+5, r21	; 0x05
     682:	66 83       	std	Z+6, r22	; 0x06
     684:	77 83       	std	Z+7, r23	; 0x07
	
	/* Re-enable the RTC32 module, synchronize before returning. */
	RTC32.CTRL |= RTC32_ENABLE_bm;
     686:	80 91 20 04 	lds	r24, 0x0420
     68a:	81 60       	ori	r24, 0x01	; 1
     68c:	80 93 20 04 	sts	0x0420, r24
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm);
     690:	80 91 21 04 	lds	r24, 0x0421
     694:	80 fd       	sbrc	r24, 0
     696:	fc cf       	rjmp	.-8      	; 0x690 <Time_Set+0x86>
	
	RTC32.INTCTRL = ( RTC32.INTCTRL & ~RTC32_COMPINTLVL_gm ) | RTC32_COMPINTLVL_LO_gc;
     698:	80 91 22 04 	lds	r24, 0x0422
     69c:	83 7f       	andi	r24, 0xF3	; 243
     69e:	84 60       	ori	r24, 0x04	; 4
     6a0:	e0 e2       	ldi	r30, 0x20	; 32
     6a2:	f4 e0       	ldi	r31, 0x04	; 4
     6a4:	82 83       	std	Z+2, r24	; 0x02
	sei();
     6a6:	78 94       	sei
}
     6a8:	0f 90       	pop	r0
     6aa:	cf 91       	pop	r28
     6ac:	df 91       	pop	r29
     6ae:	0f 91       	pop	r16
     6b0:	08 95       	ret

000006b2 <Time_CheckVBatSystem>:

bool Time_CheckVBatSystem(void){
	if (VBAT.STATUS & VBAT_BBPWR_bm){
     6b2:	80 91 f1 00 	lds	r24, 0x00F1
     6b6:	87 fd       	sbrc	r24, 7
     6b8:	12 c0       	rjmp	.+36     	; 0x6de <Time_CheckVBatSystem+0x2c>
		return false;
	} else {
		if (VBAT.STATUS & VBAT_BBPORF_bm) {
     6ba:	80 91 f1 00 	lds	r24, 0x00F1
     6be:	80 fd       	sbrc	r24, 0
     6c0:	0e c0       	rjmp	.+28     	; 0x6de <Time_CheckVBatSystem+0x2c>
			return false;
		} else if (VBAT.STATUS & VBAT_BBBORF_bm){
     6c2:	80 91 f1 00 	lds	r24, 0x00F1
     6c6:	81 fd       	sbrc	r24, 1
     6c8:	0a c0       	rjmp	.+20     	; 0x6de <Time_CheckVBatSystem+0x2c>
			return false;
		} else {
			VBAT.CTRL = VBAT_ACCEN_bm;
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	80 93 f0 00 	sts	0x00F0, r24
			if (VBAT.STATUS & VBAT_XOSCFAIL_bm){
     6d0:	80 91 f1 00 	lds	r24, 0x00F1
     6d4:	86 95       	lsr	r24
     6d6:	86 95       	lsr	r24
     6d8:	80 95       	com	r24
     6da:	81 70       	andi	r24, 0x01	; 1
     6dc:	08 95       	ret
     6de:	80 e0       	ldi	r24, 0x00	; 0
				return false;
			} 
		}
	}
	return true;
}
     6e0:	08 95       	ret

000006e2 <Time_Get>:

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
     6e2:	80 91 21 04 	lds	r24, 0x0421
     6e6:	80 61       	ori	r24, 0x10	; 16
     6e8:	e0 e2       	ldi	r30, 0x20	; 32
     6ea:	f4 e0       	ldi	r31, 0x04	; 4
     6ec:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
     6ee:	80 91 21 04 	lds	r24, 0x0421
     6f2:	84 fd       	sbrc	r24, 4
     6f4:	fc cf       	rjmp	.-8      	; 0x6ee <Time_Get+0xc>
	return RTC32.CNT;
     6f6:	20 91 24 04 	lds	r18, 0x0424
     6fa:	30 91 25 04 	lds	r19, 0x0425
     6fe:	40 91 26 04 	lds	r20, 0x0426
     702:	50 91 27 04 	lds	r21, 0x0427
	//sei();
}
     706:	b9 01       	movw	r22, r18
     708:	ca 01       	movw	r24, r20
     70a:	08 95       	ret

0000070c <Time_Get32BitTimer>:

uint32_t Time_Get32BitTimer(void){
  cli();
     70c:	f8 94       	cli
  uint16_t high = Time_TimerHighCNT;
     70e:	20 91 60 08 	lds	r18, 0x0860
     712:	30 91 61 08 	lds	r19, 0x0861
  uint16_t low  = Time_TimerLowCNT;
     716:	60 91 20 08 	lds	r22, 0x0820
     71a:	70 91 21 08 	lds	r23, 0x0821
  uint32_t result = 0;

  if(high != Time_TimerHighCNT){
     71e:	80 91 60 08 	lds	r24, 0x0860
     722:	90 91 61 08 	lds	r25, 0x0861
     726:	28 17       	cp	r18, r24
     728:	39 07       	cpc	r19, r25
     72a:	41 f0       	breq	.+16     	; 0x73c <Time_Get32BitTimer+0x30>
	 high = Time_TimerHighCNT;
     72c:	20 91 60 08 	lds	r18, 0x0860
     730:	30 91 61 08 	lds	r19, 0x0861
	 low  = Time_TimerLowCNT;
     734:	60 91 20 08 	lds	r22, 0x0820
     738:	70 91 21 08 	lds	r23, 0x0821
  }
  result = high * 65536 + low;
  sei();
     73c:	78 94       	sei
     73e:	40 e0       	ldi	r20, 0x00	; 0
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	a9 01       	movw	r20, r18
     744:	33 27       	eor	r19, r19
     746:	22 27       	eor	r18, r18
     748:	cb 01       	movw	r24, r22
     74a:	a0 e0       	ldi	r26, 0x00	; 0
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	28 0f       	add	r18, r24
     750:	39 1f       	adc	r19, r25
     752:	4a 1f       	adc	r20, r26
     754:	5b 1f       	adc	r21, r27
  return result;
}
     756:	b9 01       	movw	r22, r18
     758:	ca 01       	movw	r24, r20
     75a:	08 95       	ret

0000075c <Time_UTCSecsToTime>:


//Takes in UTC Epoch Time since 1970
//Returns calendar time in time_t struct
time_t * Time_UTCSecsToTime(uint32_t UTCSecs, time_t * tm) {
     75c:	8f 92       	push	r8
     75e:	9f 92       	push	r9
     760:	af 92       	push	r10
     762:	bf 92       	push	r11
     764:	cf 92       	push	r12
     766:	df 92       	push	r13
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	7b 01       	movw	r14, r22
     776:	8c 01       	movw	r16, r24
     778:	ea 01       	movw	r28, r20
	uint8_t year;
	uint8_t month, monthLength;
	unsigned long days;
	
	tm->Second = UTCSecs % 60;
     77a:	2c e3       	ldi	r18, 0x3C	; 60
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	40 e0       	ldi	r20, 0x00	; 0
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
     786:	69 83       	std	Y+1, r22	; 0x01
	UTCSecs /= 60; // now it is minutes
     788:	c8 01       	movw	r24, r16
     78a:	b7 01       	movw	r22, r14
     78c:	2c e3       	ldi	r18, 0x3C	; 60
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
     798:	12 2f       	mov	r17, r18
     79a:	03 2f       	mov	r16, r19
     79c:	f4 2e       	mov	r15, r20
     79e:	e5 2e       	mov	r14, r21
	tm->Minute = UTCSecs % 60;
     7a0:	62 2f       	mov	r22, r18
     7a2:	73 2f       	mov	r23, r19
     7a4:	84 2f       	mov	r24, r20
     7a6:	95 2f       	mov	r25, r21
     7a8:	2c e3       	ldi	r18, 0x3C	; 60
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	40 e0       	ldi	r20, 0x00	; 0
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
     7b4:	6a 83       	std	Y+2, r22	; 0x02
	UTCSecs /= 60; // now it is hours
     7b6:	61 2f       	mov	r22, r17
     7b8:	70 2f       	mov	r23, r16
     7ba:	8f 2d       	mov	r24, r15
     7bc:	9e 2d       	mov	r25, r14
     7be:	2c e3       	ldi	r18, 0x3C	; 60
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
     7ca:	12 2f       	mov	r17, r18
     7cc:	03 2f       	mov	r16, r19
     7ce:	f4 2e       	mov	r15, r20
     7d0:	e5 2e       	mov	r14, r21
	tm->Hour = UTCSecs % 24;
     7d2:	62 2f       	mov	r22, r18
     7d4:	73 2f       	mov	r23, r19
     7d6:	84 2f       	mov	r24, r20
     7d8:	95 2f       	mov	r25, r21
     7da:	28 e1       	ldi	r18, 0x18	; 24
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
     7e6:	6b 83       	std	Y+3, r22	; 0x03
	UTCSecs /= 24; // now it is days
     7e8:	61 2f       	mov	r22, r17
     7ea:	70 2f       	mov	r23, r16
     7ec:	8f 2d       	mov	r24, r15
     7ee:	9e 2d       	mov	r25, r14
     7f0:	28 e1       	ldi	r18, 0x18	; 24
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	40 e0       	ldi	r20, 0x00	; 0
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
     7fc:	79 01       	movw	r14, r18
     7fe:	8a 01       	movw	r16, r20
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
     800:	c8 01       	movw	r24, r16
     802:	b7 01       	movw	r22, r14
     804:	6c 5f       	subi	r22, 0xFC	; 252
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	8f 4f       	sbci	r24, 0xFF	; 255
     80a:	9f 4f       	sbci	r25, 0xFF	; 255
     80c:	27 e0       	ldi	r18, 0x07	; 7
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	40 e0       	ldi	r20, 0x00	; 0
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
     818:	6f 5f       	subi	r22, 0xFF	; 255
     81a:	6c 83       	std	Y+4, r22	; 0x04
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	aa 24       	eor	r10, r10
     820:	bb 24       	eor	r11, r11
     822:	65 01       	movw	r12, r10
     824:	01 c0       	rjmp	.+2      	; 0x828 <Time_UTCSecsToTime+0xcc>
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
		year++;
     826:	2f 5f       	subi	r18, 0xFF	; 255
	UTCSecs /= 24; // now it is days
	tm->Wday = ((UTCSecs + 4) % 7) + 1;  // Sunday is day 1 
	
	year = 0;  
	days = 0;
	while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= UTCSecs) {
     828:	82 2e       	mov	r8, r18
     82a:	99 24       	eor	r9, r9
     82c:	f4 01       	movw	r30, r8
     82e:	ee 54       	subi	r30, 0x4E	; 78
     830:	f8 4f       	sbci	r31, 0xF8	; 248
     832:	cf 01       	movw	r24, r30
     834:	83 70       	andi	r24, 0x03	; 3
     836:	90 70       	andi	r25, 0x00	; 0
     838:	89 2b       	or	r24, r25
     83a:	99 f4       	brne	.+38     	; 0x862 <Time_UTCSecsToTime+0x106>
     83c:	cf 01       	movw	r24, r30
     83e:	64 e6       	ldi	r22, 0x64	; 100
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	0e 94 87 50 	call	0xa10e	; 0xa10e <__divmodhi4>
     846:	89 2b       	or	r24, r25
     848:	39 f4       	brne	.+14     	; 0x858 <Time_UTCSecsToTime+0xfc>
     84a:	cf 01       	movw	r24, r30
     84c:	60 e9       	ldi	r22, 0x90	; 144
     84e:	71 e0       	ldi	r23, 0x01	; 1
     850:	0e 94 87 50 	call	0xa10e	; 0xa10e <__divmodhi4>
     854:	89 2b       	or	r24, r25
     856:	29 f4       	brne	.+10     	; 0x862 <Time_UTCSecsToTime+0x106>
     858:	8e e6       	ldi	r24, 0x6E	; 110
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	a0 e0       	ldi	r26, 0x00	; 0
     85e:	b0 e0       	ldi	r27, 0x00	; 0
     860:	04 c0       	rjmp	.+8      	; 0x86a <Time_UTCSecsToTime+0x10e>
     862:	8d e6       	ldi	r24, 0x6D	; 109
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	a0 e0       	ldi	r26, 0x00	; 0
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	a8 0e       	add	r10, r24
     86c:	b9 1e       	adc	r11, r25
     86e:	ca 1e       	adc	r12, r26
     870:	db 1e       	adc	r13, r27
     872:	c5 01       	movw	r24, r10
     874:	a0 e0       	ldi	r26, 0x00	; 0
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e8 16       	cp	r14, r24
     87a:	f9 06       	cpc	r15, r25
     87c:	0a 07       	cpc	r16, r26
     87e:	1b 07       	cpc	r17, r27
     880:	90 f6       	brcc	.-92     	; 0x826 <Time_UTCSecsToTime+0xca>
		year++;
	}
	
	tm->Year = year; // year is offset from 1970 
     882:	2f 83       	std	Y+7, r18	; 0x07
	
	
	days -= LEAP_YEAR(year) ? 366 : 365;
     884:	f4 01       	movw	r30, r8
     886:	ee 54       	subi	r30, 0x4E	; 78
     888:	f8 4f       	sbci	r31, 0xF8	; 248
     88a:	93 e0       	ldi	r25, 0x03	; 3
     88c:	89 2e       	mov	r8, r25
     88e:	91 2c       	mov	r9, r1
     890:	8e 22       	and	r8, r30
     892:	9f 22       	and	r9, r31
     894:	81 14       	cp	r8, r1
     896:	91 04       	cpc	r9, r1
     898:	99 f4       	brne	.+38     	; 0x8c0 <Time_UTCSecsToTime+0x164>
     89a:	cf 01       	movw	r24, r30
     89c:	64 e6       	ldi	r22, 0x64	; 100
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	0e 94 87 50 	call	0xa10e	; 0xa10e <__divmodhi4>
     8a4:	89 2b       	or	r24, r25
     8a6:	39 f4       	brne	.+14     	; 0x8b6 <Time_UTCSecsToTime+0x15a>
     8a8:	cf 01       	movw	r24, r30
     8aa:	60 e9       	ldi	r22, 0x90	; 144
     8ac:	71 e0       	ldi	r23, 0x01	; 1
     8ae:	0e 94 87 50 	call	0xa10e	; 0xa10e <__divmodhi4>
     8b2:	89 2b       	or	r24, r25
     8b4:	29 f4       	brne	.+10     	; 0x8c0 <Time_UTCSecsToTime+0x164>
     8b6:	8e e6       	ldi	r24, 0x6E	; 110
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	a0 e0       	ldi	r26, 0x00	; 0
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	04 c0       	rjmp	.+8      	; 0x8c8 <Time_UTCSecsToTime+0x16c>
     8c0:	8d e6       	ldi	r24, 0x6D	; 109
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	a0 e0       	ldi	r26, 0x00	; 0
     8c6:	b0 e0       	ldi	r27, 0x00	; 0
	UTCSecs  -= days; // now it is days in this year, starting at 0
     8c8:	a8 1a       	sub	r10, r24
     8ca:	b9 0a       	sbc	r11, r25
     8cc:	ca 0a       	sbc	r12, r26
     8ce:	db 0a       	sbc	r13, r27
     8d0:	98 01       	movw	r18, r16
     8d2:	87 01       	movw	r16, r14
     8d4:	0a 19       	sub	r16, r10
     8d6:	1b 09       	sbc	r17, r11
     8d8:	2c 09       	sbc	r18, r12
     8da:	3d 09       	sbc	r19, r13
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
	      	if (LEAP_YEAR(year)) {
     8dc:	cf 01       	movw	r24, r30
     8de:	64 e6       	ldi	r22, 0x64	; 100
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	0e 94 87 50 	call	0xa10e	; 0xa10e <__divmodhi4>
     8e6:	7c 01       	movw	r14, r24
     8e8:	cf 01       	movw	r24, r30
     8ea:	60 e9       	ldi	r22, 0x90	; 144
     8ec:	71 e0       	ldi	r23, 0x01	; 1
     8ee:	0e 94 87 50 	call	0xa10e	; 0xa10e <__divmodhi4>
     8f2:	ac 01       	movw	r20, r24
     8f4:	e4 ed       	ldi	r30, 0xD4	; 212
     8f6:	fc e2       	ldi	r31, 0x2C	; 44
     8f8:	60 e0       	ldi	r22, 0x00	; 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
    	if (month==1) { // february
     8fa:	61 30       	cpi	r22, 0x01	; 1
     8fc:	51 f4       	brne	.+20     	; 0x912 <Time_UTCSecsToTime+0x1b6>
	      	if (LEAP_YEAR(year)) {
     8fe:	81 14       	cp	r8, r1
     900:	91 04       	cpc	r9, r1
     902:	49 f4       	brne	.+18     	; 0x916 <Time_UTCSecsToTime+0x1ba>
     904:	e1 14       	cp	r14, r1
     906:	f1 04       	cpc	r15, r1
     908:	41 f4       	brne	.+16     	; 0x91a <Time_UTCSecsToTime+0x1be>
     90a:	41 15       	cp	r20, r1
     90c:	51 05       	cpc	r21, r1
     90e:	29 f0       	breq	.+10     	; 0x91a <Time_UTCSecsToTime+0x1be>
     910:	02 c0       	rjmp	.+4      	; 0x916 <Time_UTCSecsToTime+0x1ba>
	       		monthLength=29;
	      	} else {
	        	monthLength=28;
	      	}
    	} else {
      		monthLength = monthDays[month];
     912:	80 81       	ld	r24, Z
     914:	03 c0       	rjmp	.+6      	; 0x91c <Time_UTCSecsToTime+0x1c0>
     916:	8c e1       	ldi	r24, 0x1C	; 28
     918:	01 c0       	rjmp	.+2      	; 0x91c <Time_UTCSecsToTime+0x1c0>
     91a:	8d e1       	ldi	r24, 0x1D	; 29
    	}
		
    	if (UTCSecs >= monthLength) {
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	a0 e0       	ldi	r26, 0x00	; 0
     920:	b0 e0       	ldi	r27, 0x00	; 0
     922:	08 17       	cp	r16, r24
     924:	19 07       	cpc	r17, r25
     926:	2a 07       	cpc	r18, r26
     928:	3b 07       	cpc	r19, r27
     92a:	40 f0       	brcs	.+16     	; 0x93c <Time_UTCSecsToTime+0x1e0>
      		UTCSecs -= monthLength;
     92c:	08 1b       	sub	r16, r24
     92e:	19 0b       	sbc	r17, r25
     930:	2a 0b       	sbc	r18, r26
     932:	3b 0b       	sbc	r19, r27
	UTCSecs  -= days; // now it is days in this year, starting at 0
	
	days=0;
	month=0;
	monthLength=0;
	for (month=0; month<12; month++) {
     934:	6f 5f       	subi	r22, 0xFF	; 255
     936:	31 96       	adiw	r30, 0x01	; 1
     938:	6c 30       	cpi	r22, 0x0C	; 12
     93a:	f9 f6       	brne	.-66     	; 0x8fa <Time_UTCSecsToTime+0x19e>
      		UTCSecs -= monthLength;
    	} else {
        	break;
  		}
	}
	tm->Month = month + 1;  // jan is month 1  
     93c:	6f 5f       	subi	r22, 0xFF	; 255
     93e:	6e 83       	std	Y+6, r22	; 0x06
	tm->Day = UTCSecs + 1;     // day of month 
     940:	80 2f       	mov	r24, r16
     942:	8f 5f       	subi	r24, 0xFF	; 255
     944:	8d 83       	std	Y+5, r24	; 0x05
	
	return tm;	
}
     946:	ce 01       	movw	r24, r28
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	ff 90       	pop	r15
     952:	ef 90       	pop	r14
     954:	df 90       	pop	r13
     956:	cf 90       	pop	r12
     958:	bf 90       	pop	r11
     95a:	af 90       	pop	r10
     95c:	9f 90       	pop	r9
     95e:	8f 90       	pop	r8
     960:	08 95       	ret

00000962 <wait_ready>:
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
     962:	82 e3       	ldi	r24, 0x32	; 50
     964:	80 93 5e 2d 	sts	0x2D5E, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     968:	8f ef       	ldi	r24, 0xFF	; 255
     96a:	e0 ec       	ldi	r30, 0xC0	; 192
     96c:	f8 e0       	ldi	r31, 0x08	; 8
     96e:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     970:	80 91 c2 08 	lds	r24, 0x08C2
     974:	87 ff       	sbrs	r24, 7
     976:	fc cf       	rjmp	.-8      	; 0x970 <wait_ready+0xe>
	return SD_SPI.DATA;
     978:	80 91 c3 08 	lds	r24, 0x08C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     97c:	e0 ec       	ldi	r30, 0xC0	; 192
     97e:	f8 e0       	ldi	r31, 0x08	; 8
     980:	2f ef       	ldi	r18, 0xFF	; 255
     982:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     984:	80 91 c2 08 	lds	r24, 0x08C2
     988:	87 ff       	sbrs	r24, 7
     98a:	fc cf       	rjmp	.-8      	; 0x984 <wait_ready+0x22>
	return SD_SPI.DATA;
     98c:	90 91 c3 08 	lds	r25, 0x08C3

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
     990:	9f 3f       	cpi	r25, 0xFF	; 255
     992:	21 f0       	breq	.+8      	; 0x99c <wait_ready+0x3a>
     994:	80 91 5e 2d 	lds	r24, 0x2D5E
     998:	88 23       	and	r24, r24
     99a:	99 f7       	brne	.-26     	; 0x982 <wait_ready+0x20>

	return res;
}
     99c:	89 2f       	mov	r24, r25
     99e:	08 95       	ret

000009a0 <select>:
/* Select the card and wait ready                                        */
/*-----------------------------------------------------------------------*/

static
BOOL select (void)	/* TRUE:Successful, FALSE:Timeout */
{
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
	CS_LOW();
     9a6:	c0 e4       	ldi	r28, 0x40	; 64
     9a8:	d6 e0       	ldi	r29, 0x06	; 6
     9aa:	10 e1       	ldi	r17, 0x10	; 16
     9ac:	1e 83       	std	Y+6, r17	; 0x06
	if (wait_ready() != 0xFF) {
     9ae:	0e 94 b1 04 	call	0x962	; 0x962 <wait_ready>
     9b2:	8f 3f       	cpi	r24, 0xFF	; 255
     9b4:	11 f4       	brne	.+4      	; 0x9ba <select+0x1a>
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	0c c0       	rjmp	.+24     	; 0x9d2 <select+0x32>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     9ba:	1d 83       	std	Y+5, r17	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     9bc:	8f ef       	ldi	r24, 0xFF	; 255
     9be:	e0 ec       	ldi	r30, 0xC0	; 192
     9c0:	f8 e0       	ldi	r31, 0x08	; 8
     9c2:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     9c4:	80 91 c2 08 	lds	r24, 0x08C2
     9c8:	87 ff       	sbrs	r24, 7
     9ca:	fc cf       	rjmp	.-8      	; 0x9c4 <select+0x24>
	return SD_SPI.DATA;
     9cc:	80 91 c3 08 	lds	r24, 0x08C3
     9d0:	80 e0       	ldi	r24, 0x00	; 0
	if (wait_ready() != 0xFF) {
		deselect();
		return FALSE;
	}
	return TRUE;
}
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	08 95       	ret

000009da <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     9da:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
     9dc:	84 e1       	ldi	r24, 0x14	; 20
     9de:	80 93 5d 2d 	sts	0x2D5D, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     9e2:	a0 ec       	ldi	r26, 0xC0	; 192
     9e4:	b8 e0       	ldi	r27, 0x08	; 8
     9e6:	9f ef       	ldi	r25, 0xFF	; 255
     9e8:	13 96       	adiw	r26, 0x03	; 3
     9ea:	9c 93       	st	X, r25
     9ec:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     9ee:	80 91 c2 08 	lds	r24, 0x08C2
     9f2:	87 ff       	sbrs	r24, 7
     9f4:	fc cf       	rjmp	.-8      	; 0x9ee <rcvr_datablock+0x14>
	return SD_SPI.DATA;
     9f6:	80 91 c3 08 	lds	r24, 0x08C3


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
     9fa:	8f 3f       	cpi	r24, 0xFF	; 255
     9fc:	29 f4       	brne	.+10     	; 0xa08 <rcvr_datablock+0x2e>
     9fe:	80 91 5d 2d 	lds	r24, 0x2D5D
     a02:	88 23       	and	r24, r24
     a04:	89 f7       	brne	.-30     	; 0x9e8 <rcvr_datablock+0xe>
     a06:	49 c0       	rjmp	.+146    	; 0xa9a <rcvr_datablock+0xc0>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
     a08:	8e 3f       	cpi	r24, 0xFE	; 254
     a0a:	09 f0       	breq	.+2      	; 0xa0e <rcvr_datablock+0x34>
     a0c:	46 c0       	rjmp	.+140    	; 0xa9a <rcvr_datablock+0xc0>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
     a0e:	a0 ec       	ldi	r26, 0xC0	; 192
     a10:	b8 e0       	ldi	r27, 0x08	; 8
     a12:	9f ef       	ldi	r25, 0xFF	; 255
     a14:	13 96       	adiw	r26, 0x03	; 3
     a16:	9c 93       	st	X, r25
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	80 91 c2 08 	lds	r24, 0x08C2
     a1e:	87 ff       	sbrs	r24, 7
     a20:	fc cf       	rjmp	.-8      	; 0xa1a <rcvr_datablock+0x40>
     a22:	80 91 c3 08 	lds	r24, 0x08C3
     a26:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
     a28:	13 96       	adiw	r26, 0x03	; 3
     a2a:	9c 93       	st	X, r25
     a2c:	13 97       	sbiw	r26, 0x03	; 3
     a2e:	80 91 c2 08 	lds	r24, 0x08C2
     a32:	87 ff       	sbrs	r24, 7
     a34:	fc cf       	rjmp	.-8      	; 0xa2e <rcvr_datablock+0x54>
     a36:	80 91 c3 08 	lds	r24, 0x08C3
     a3a:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
     a3c:	13 96       	adiw	r26, 0x03	; 3
     a3e:	9c 93       	st	X, r25
     a40:	13 97       	sbiw	r26, 0x03	; 3
     a42:	80 91 c2 08 	lds	r24, 0x08C2
     a46:	87 ff       	sbrs	r24, 7
     a48:	fc cf       	rjmp	.-8      	; 0xa42 <rcvr_datablock+0x68>
     a4a:	80 91 c3 08 	lds	r24, 0x08C3
     a4e:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
     a50:	13 96       	adiw	r26, 0x03	; 3
     a52:	9c 93       	st	X, r25
     a54:	13 97       	sbiw	r26, 0x03	; 3
     a56:	80 91 c2 08 	lds	r24, 0x08C2
     a5a:	87 ff       	sbrs	r24, 7
     a5c:	fc cf       	rjmp	.-8      	; 0xa56 <rcvr_datablock+0x7c>
     a5e:	80 91 c3 08 	lds	r24, 0x08C3
     a62:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
     a64:	64 50       	subi	r22, 0x04	; 4
     a66:	70 40       	sbci	r23, 0x00	; 0
     a68:	11 f0       	breq	.+4      	; 0xa6e <rcvr_datablock+0x94>
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     a6a:	34 96       	adiw	r30, 0x04	; 4
     a6c:	d3 cf       	rjmp	.-90     	; 0xa14 <rcvr_datablock+0x3a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	e0 ec       	ldi	r30, 0xC0	; 192
     a72:	f8 e0       	ldi	r31, 0x08	; 8
     a74:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     a76:	80 91 c2 08 	lds	r24, 0x08C2
     a7a:	87 ff       	sbrs	r24, 7
     a7c:	fc cf       	rjmp	.-8      	; 0xa76 <rcvr_datablock+0x9c>
	return SD_SPI.DATA;
     a7e:	80 91 c3 08 	lds	r24, 0x08C3
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     a82:	8f ef       	ldi	r24, 0xFF	; 255
     a84:	e0 ec       	ldi	r30, 0xC0	; 192
     a86:	f8 e0       	ldi	r31, 0x08	; 8
     a88:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     a8a:	80 91 c2 08 	lds	r24, 0x08C2
     a8e:	87 ff       	sbrs	r24, 7
     a90:	fc cf       	rjmp	.-8      	; 0xa8a <rcvr_datablock+0xb0>
	return SD_SPI.DATA;
     a92:	80 91 c3 08 	lds	r24, 0x08C3
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	08 95       	ret
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
     a9a:	80 e0       	ldi	r24, 0x00	; 0
}
     a9c:	08 95       	ret

00000a9e <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	ec 01       	movw	r28, r24
     aa6:	16 2f       	mov	r17, r22
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
     aa8:	0e 94 b1 04 	call	0x962	; 0x962 <wait_ready>
     aac:	8f 3f       	cpi	r24, 0xFF	; 255
     aae:	11 f0       	breq	.+4      	; 0xab4 <xmit_datablock+0x16>
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	3f c0       	rjmp	.+126    	; 0xb32 <xmit_datablock+0x94>

	xmit_spi(token);					/* Xmit data token */
     ab4:	e0 ec       	ldi	r30, 0xC0	; 192
     ab6:	f8 e0       	ldi	r31, 0x08	; 8
     ab8:	13 83       	std	Z+3, r17	; 0x03
     aba:	80 91 c2 08 	lds	r24, 0x08C2
     abe:	87 ff       	sbrs	r24, 7
     ac0:	fc cf       	rjmp	.-8      	; 0xaba <xmit_datablock+0x1c>
	if (token != 0xFD) {	/* Is data token */
     ac2:	1d 3f       	cpi	r17, 0xFD	; 253
     ac4:	11 f4       	brne	.+4      	; 0xaca <xmit_datablock+0x2c>
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	34 c0       	rjmp	.+104    	; 0xb32 <xmit_datablock+0x94>
     aca:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
     acc:	e0 ec       	ldi	r30, 0xC0	; 192
     ace:	f8 e0       	ldi	r31, 0x08	; 8
     ad0:	88 81       	ld	r24, Y
     ad2:	83 83       	std	Z+3, r24	; 0x03
     ad4:	80 91 c2 08 	lds	r24, 0x08C2
     ad8:	87 ff       	sbrs	r24, 7
     ada:	fc cf       	rjmp	.-8      	; 0xad4 <xmit_datablock+0x36>
			xmit_spi(*buff++);
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	83 83       	std	Z+3, r24	; 0x03
     ae0:	80 91 c2 08 	lds	r24, 0x08C2
     ae4:	87 ff       	sbrs	r24, 7
     ae6:	fc cf       	rjmp	.-8      	; 0xae0 <xmit_datablock+0x42>
		} while (--wc);
     ae8:	91 50       	subi	r25, 0x01	; 1
     aea:	11 f0       	breq	.+4      	; 0xaf0 <xmit_datablock+0x52>
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     aec:	22 96       	adiw	r28, 0x02	; 2
     aee:	f0 cf       	rjmp	.-32     	; 0xad0 <xmit_datablock+0x32>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
     af0:	8f ef       	ldi	r24, 0xFF	; 255
     af2:	e0 ec       	ldi	r30, 0xC0	; 192
     af4:	f8 e0       	ldi	r31, 0x08	; 8
     af6:	83 83       	std	Z+3, r24	; 0x03
     af8:	80 91 c2 08 	lds	r24, 0x08C2
     afc:	87 ff       	sbrs	r24, 7
     afe:	fc cf       	rjmp	.-8      	; 0xaf8 <xmit_datablock+0x5a>
		xmit_spi(0xFF);
     b00:	8f ef       	ldi	r24, 0xFF	; 255
     b02:	e0 ec       	ldi	r30, 0xC0	; 192
     b04:	f8 e0       	ldi	r31, 0x08	; 8
     b06:	83 83       	std	Z+3, r24	; 0x03
     b08:	80 91 c2 08 	lds	r24, 0x08C2
     b0c:	87 ff       	sbrs	r24, 7
     b0e:	fc cf       	rjmp	.-8      	; 0xb08 <xmit_datablock+0x6a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b10:	8f ef       	ldi	r24, 0xFF	; 255
     b12:	e0 ec       	ldi	r30, 0xC0	; 192
     b14:	f8 e0       	ldi	r31, 0x08	; 8
     b16:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     b18:	80 91 c2 08 	lds	r24, 0x08C2
     b1c:	87 ff       	sbrs	r24, 7
     b1e:	fc cf       	rjmp	.-8      	; 0xb18 <xmit_datablock+0x7a>
	return SD_SPI.DATA;
     b20:	80 91 c3 08 	lds	r24, 0x08C3
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	8f 71       	andi	r24, 0x1F	; 31
     b28:	85 30       	cpi	r24, 0x05	; 5
     b2a:	09 f0       	breq	.+2      	; 0xb2e <xmit_datablock+0x90>
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	98 27       	eor	r25, r24
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
}
     b32:	89 2f       	mov	r24, r25
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	1f 91       	pop	r17
     b3a:	08 95       	ret

00000b3c <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     b3c:	df 92       	push	r13
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	d8 2e       	mov	r13, r24
     b48:	7a 01       	movw	r14, r20
     b4a:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     b4c:	87 ff       	sbrs	r24, 7
     b4e:	0c c0       	rjmp	.+24     	; 0xb68 <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     b50:	87 e7       	ldi	r24, 0x77	; 119
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
		if (res > 1) return res;
     b5e:	82 30       	cpi	r24, 0x02	; 2
     b60:	08 f0       	brcs	.+2      	; 0xb64 <send_cmd+0x28>
     b62:	72 c0       	rjmp	.+228    	; 0xc48 <send_cmd+0x10c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     b64:	8f e7       	ldi	r24, 0x7F	; 127
     b66:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     b68:	80 e1       	ldi	r24, 0x10	; 16
     b6a:	e0 e4       	ldi	r30, 0x40	; 64
     b6c:	f6 e0       	ldi	r31, 0x06	; 6
     b6e:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     b70:	8f ef       	ldi	r24, 0xFF	; 255
     b72:	e0 ec       	ldi	r30, 0xC0	; 192
     b74:	f8 e0       	ldi	r31, 0x08	; 8
     b76:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     b78:	80 91 c2 08 	lds	r24, 0x08C2
     b7c:	87 ff       	sbrs	r24, 7
     b7e:	fc cf       	rjmp	.-8      	; 0xb78 <send_cmd+0x3c>
	return SD_SPI.DATA;
     b80:	80 91 c3 08 	lds	r24, 0x08C3
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
     b84:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <select>
     b88:	88 23       	and	r24, r24
     b8a:	11 f4       	brne	.+4      	; 0xb90 <send_cmd+0x54>
     b8c:	8f ef       	ldi	r24, 0xFF	; 255
     b8e:	5c c0       	rjmp	.+184    	; 0xc48 <send_cmd+0x10c>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
     b90:	e0 ec       	ldi	r30, 0xC0	; 192
     b92:	f8 e0       	ldi	r31, 0x08	; 8
     b94:	d3 82       	std	Z+3, r13	; 0x03
     b96:	80 91 c2 08 	lds	r24, 0x08C2
     b9a:	87 ff       	sbrs	r24, 7
     b9c:	fc cf       	rjmp	.-8      	; 0xb96 <send_cmd+0x5a>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     b9e:	81 2f       	mov	r24, r17
     ba0:	99 27       	eor	r25, r25
     ba2:	aa 27       	eor	r26, r26
     ba4:	bb 27       	eor	r27, r27
     ba6:	e0 ec       	ldi	r30, 0xC0	; 192
     ba8:	f8 e0       	ldi	r31, 0x08	; 8
     baa:	83 83       	std	Z+3, r24	; 0x03
     bac:	80 91 c2 08 	lds	r24, 0x08C2
     bb0:	87 ff       	sbrs	r24, 7
     bb2:	fc cf       	rjmp	.-8      	; 0xbac <send_cmd+0x70>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     bb4:	c8 01       	movw	r24, r16
     bb6:	aa 27       	eor	r26, r26
     bb8:	bb 27       	eor	r27, r27
     bba:	e0 ec       	ldi	r30, 0xC0	; 192
     bbc:	f8 e0       	ldi	r31, 0x08	; 8
     bbe:	83 83       	std	Z+3, r24	; 0x03
     bc0:	80 91 c2 08 	lds	r24, 0x08C2
     bc4:	87 ff       	sbrs	r24, 7
     bc6:	fc cf       	rjmp	.-8      	; 0xbc0 <send_cmd+0x84>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     bc8:	bb 27       	eor	r27, r27
     bca:	a1 2f       	mov	r26, r17
     bcc:	90 2f       	mov	r25, r16
     bce:	8f 2d       	mov	r24, r15
     bd0:	e0 ec       	ldi	r30, 0xC0	; 192
     bd2:	f8 e0       	ldi	r31, 0x08	; 8
     bd4:	83 83       	std	Z+3, r24	; 0x03
     bd6:	80 91 c2 08 	lds	r24, 0x08C2
     bda:	87 ff       	sbrs	r24, 7
     bdc:	fc cf       	rjmp	.-8      	; 0xbd6 <send_cmd+0x9a>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     bde:	e0 ec       	ldi	r30, 0xC0	; 192
     be0:	f8 e0       	ldi	r31, 0x08	; 8
     be2:	e3 82       	std	Z+3, r14	; 0x03
     be4:	80 91 c2 08 	lds	r24, 0x08C2
     be8:	87 ff       	sbrs	r24, 7
     bea:	fc cf       	rjmp	.-8      	; 0xbe4 <send_cmd+0xa8>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     bec:	80 e4       	ldi	r24, 0x40	; 64
     bee:	d8 16       	cp	r13, r24
     bf0:	11 f4       	brne	.+4      	; 0xbf6 <send_cmd+0xba>
     bf2:	85 e9       	ldi	r24, 0x95	; 149
     bf4:	06 c0       	rjmp	.+12     	; 0xc02 <send_cmd+0xc6>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     bf6:	88 e4       	ldi	r24, 0x48	; 72
     bf8:	d8 16       	cp	r13, r24
     bfa:	11 f4       	brne	.+4      	; 0xc00 <send_cmd+0xc4>
     bfc:	87 e8       	ldi	r24, 0x87	; 135
     bfe:	01 c0       	rjmp	.+2      	; 0xc02 <send_cmd+0xc6>
     c00:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
     c02:	e0 ec       	ldi	r30, 0xC0	; 192
     c04:	f8 e0       	ldi	r31, 0x08	; 8
     c06:	83 83       	std	Z+3, r24	; 0x03
     c08:	80 91 c2 08 	lds	r24, 0x08C2
     c0c:	87 ff       	sbrs	r24, 7
     c0e:	fc cf       	rjmp	.-8      	; 0xc08 <send_cmd+0xcc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
     c10:	8c e4       	ldi	r24, 0x4C	; 76
     c12:	d8 16       	cp	r13, r24
     c14:	51 f4       	brne	.+20     	; 0xc2a <send_cmd+0xee>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c16:	8f ef       	ldi	r24, 0xFF	; 255
     c18:	e0 ec       	ldi	r30, 0xC0	; 192
     c1a:	f8 e0       	ldi	r31, 0x08	; 8
     c1c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c1e:	80 91 c2 08 	lds	r24, 0x08C2
     c22:	87 ff       	sbrs	r24, 7
     c24:	fc cf       	rjmp	.-8      	; 0xc1e <send_cmd+0xe2>
	return SD_SPI.DATA;
     c26:	80 91 c3 08 	lds	r24, 0x08C3
     c2a:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c2c:	e0 ec       	ldi	r30, 0xC0	; 192
     c2e:	f8 e0       	ldi	r31, 0x08	; 8
     c30:	2f ef       	ldi	r18, 0xFF	; 255
     c32:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     c34:	80 91 c2 08 	lds	r24, 0x08C2
     c38:	87 ff       	sbrs	r24, 7
     c3a:	fc cf       	rjmp	.-8      	; 0xc34 <send_cmd+0xf8>
	return SD_SPI.DATA;
     c3c:	80 91 c3 08 	lds	r24, 0x08C3
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
     c40:	87 ff       	sbrs	r24, 7
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <send_cmd+0x10c>
     c44:	91 50       	subi	r25, 0x01	; 1
     c46:	a9 f7       	brne	.-22     	; 0xc32 <send_cmd+0xf6>
	return res;			/* Return with the response value */
}
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	08 95       	ret

00000c54 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	00 d0       	rcall	.+0      	; 0xc62 <disk_initialize+0xe>
     c62:	0f 92       	push	r0
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	//if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     c68:	80 91 d3 2c 	lds	r24, 0x2CD3
     c6c:	81 fd       	sbrc	r24, 1
     c6e:	cc c0       	rjmp	.+408    	; 0xe08 <disk_initialize+0x1b4>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
     c70:	e0 e4       	ldi	r30, 0x40	; 64
     c72:	f6 e0       	ldi	r31, 0x06	; 6
     c74:	80 eb       	ldi	r24, 0xB0	; 176
     c76:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
     c78:	88 e3       	ldi	r24, 0x38	; 56
     c7a:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
     c7c:	14 82       	std	Z+4, r1	; 0x04
     c7e:	8c e2       	ldi	r24, 0x2C	; 44
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	20 e7       	ldi	r18, 0x70	; 112
     c84:	31 e0       	ldi	r19, 0x01	; 1
     c86:	f9 01       	movw	r30, r18
     c88:	31 97       	sbiw	r30, 0x01	; 1
     c8a:	f1 f7       	brne	.-4      	; 0xc88 <disk_initialize+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c8c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c8e:	d9 f7       	brne	.-10     	; 0xc86 <disk_initialize+0x32>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
     c90:	83 e5       	ldi	r24, 0x53	; 83
     c92:	80 93 c0 08 	sts	0x08C0, r24
     c96:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     c98:	e0 ec       	ldi	r30, 0xC0	; 192
     c9a:	f8 e0       	ldi	r31, 0x08	; 8
     c9c:	2f ef       	ldi	r18, 0xFF	; 255
     c9e:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     ca0:	80 91 c2 08 	lds	r24, 0x08C2
     ca4:	87 ff       	sbrs	r24, 7
     ca6:	fc cf       	rjmp	.-8      	; 0xca0 <disk_initialize+0x4c>
	return SD_SPI.DATA;
     ca8:	80 91 c3 08 	lds	r24, 0x08C3

	
	power_on();							/* Force socket power on */
	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc)); // 16MHz
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
     cac:	91 50       	subi	r25, 0x01	; 1
     cae:	b9 f7       	brne	.-18     	; 0xc9e <disk_initialize+0x4a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     cb0:	80 e4       	ldi	r24, 0x40	; 64
     cb2:	40 e0       	ldi	r20, 0x00	; 0
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <disk_initialize+0x70>
     cc2:	87 c0       	rjmp	.+270    	; 0xdd2 <disk_initialize+0x17e>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     cc4:	84 e6       	ldi	r24, 0x64	; 100
     cc6:	80 93 5d 2d 	sts	0x2D5D, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
     cca:	88 e4       	ldi	r24, 0x48	; 72
     ccc:	4a ea       	ldi	r20, 0xAA	; 170
     cce:	51 e0       	ldi	r21, 0x01	; 1
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	09 f0       	breq	.+2      	; 0xcde <disk_initialize+0x8a>
     cdc:	53 c0       	rjmp	.+166    	; 0xd84 <disk_initialize+0x130>
     cde:	7e 01       	movw	r14, r28
     ce0:	08 94       	sec
     ce2:	e1 1c       	adc	r14, r1
     ce4:	f1 1c       	adc	r15, r1
     ce6:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     ce8:	e0 ec       	ldi	r30, 0xC0	; 192
     cea:	f8 e0       	ldi	r31, 0x08	; 8
     cec:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     cee:	9e 01       	movw	r18, r28
     cf0:	2b 5f       	subi	r18, 0xFB	; 251
     cf2:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     cf4:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     cf6:	80 91 c2 08 	lds	r24, 0x08C2
     cfa:	87 ff       	sbrs	r24, 7
     cfc:	fc cf       	rjmp	.-8      	; 0xcf6 <disk_initialize+0xa2>
	return SD_SPI.DATA;
     cfe:	80 91 c3 08 	lds	r24, 0x08C3

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
     d02:	d8 01       	movw	r26, r16
     d04:	8d 93       	st	X+, r24
     d06:	8d 01       	movw	r16, r26
     d08:	a2 17       	cp	r26, r18
     d0a:	b3 07       	cpc	r27, r19
     d0c:	99 f7       	brne	.-26     	; 0xcf4 <disk_initialize+0xa0>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	09 f0       	breq	.+2      	; 0xd16 <disk_initialize+0xc2>
     d14:	5e c0       	rjmp	.+188    	; 0xdd2 <disk_initialize+0x17e>
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	8a 3a       	cpi	r24, 0xAA	; 170
     d1a:	09 f0       	breq	.+2      	; 0xd1e <disk_initialize+0xca>
     d1c:	5a c0       	rjmp	.+180    	; 0xdd2 <disk_initialize+0x17e>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     d1e:	80 91 5d 2d 	lds	r24, 0x2D5D
     d22:	88 23       	and	r24, r24
     d24:	49 f0       	breq	.+18     	; 0xd38 <disk_initialize+0xe4>
     d26:	89 ee       	ldi	r24, 0xE9	; 233
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	70 e4       	ldi	r23, 0x40	; 64
     d30:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
     d34:	88 23       	and	r24, r24
     d36:	99 f7       	brne	.-26     	; 0xd1e <disk_initialize+0xca>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     d38:	80 91 5d 2d 	lds	r24, 0x2D5D
     d3c:	88 23       	and	r24, r24
     d3e:	09 f4       	brne	.+2      	; 0xd42 <disk_initialize+0xee>
     d40:	48 c0       	rjmp	.+144    	; 0xdd2 <disk_initialize+0x17e>
     d42:	8a e7       	ldi	r24, 0x7A	; 122
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	50 e0       	ldi	r21, 0x00	; 0
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
     d50:	88 23       	and	r24, r24
     d52:	09 f0       	breq	.+2      	; 0xd56 <disk_initialize+0x102>
     d54:	3e c0       	rjmp	.+124    	; 0xdd2 <disk_initialize+0x17e>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     d56:	e0 ec       	ldi	r30, 0xC0	; 192
     d58:	f8 e0       	ldi	r31, 0x08	; 8
     d5a:	9f ef       	ldi	r25, 0xFF	; 255
     d5c:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     d5e:	80 91 c2 08 	lds	r24, 0x08C2
     d62:	87 ff       	sbrs	r24, 7
     d64:	fc cf       	rjmp	.-8      	; 0xd5e <disk_initialize+0x10a>
	return SD_SPI.DATA;
     d66:	80 91 c3 08 	lds	r24, 0x08C3
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
     d6a:	d7 01       	movw	r26, r14
     d6c:	8d 93       	st	X+, r24
     d6e:	7d 01       	movw	r14, r26
     d70:	a0 17       	cp	r26, r16
     d72:	b1 07       	cpc	r27, r17
     d74:	99 f7       	brne	.-26     	; 0xd5c <disk_initialize+0x108>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	86 fd       	sbrc	r24, 6
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <disk_initialize+0x12c>
     d7c:	14 e0       	ldi	r17, 0x04	; 4
     d7e:	2a c0       	rjmp	.+84     	; 0xdd4 <disk_initialize+0x180>
     d80:	1c e0       	ldi	r17, 0x0C	; 12
     d82:	28 c0       	rjmp	.+80     	; 0xdd4 <disk_initialize+0x180>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     d84:	89 ee       	ldi	r24, 0xE9	; 233
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	18 f0       	brcs	.+6      	; 0xd9c <disk_initialize+0x148>
     d96:	01 e4       	ldi	r16, 0x41	; 65
     d98:	11 e0       	ldi	r17, 0x01	; 1
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <disk_initialize+0x14c>
     d9c:	09 ee       	ldi	r16, 0xE9	; 233
     d9e:	12 e0       	ldi	r17, 0x02	; 2
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     da0:	80 91 5d 2d 	lds	r24, 0x2D5D
     da4:	88 23       	and	r24, r24
     da6:	49 f0       	breq	.+18     	; 0xdba <disk_initialize+0x166>
     da8:	80 2f       	mov	r24, r16
     daa:	40 e0       	ldi	r20, 0x00	; 0
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
     db6:	88 23       	and	r24, r24
     db8:	99 f7       	brne	.-26     	; 0xda0 <disk_initialize+0x14c>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     dba:	80 91 5d 2d 	lds	r24, 0x2D5D
     dbe:	88 23       	and	r24, r24
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <disk_initialize+0x17e>
     dc2:	80 e5       	ldi	r24, 0x50	; 80
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	52 e0       	ldi	r21, 0x02	; 2
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
     dd0:	81 11       	cpse	r24, r1
     dd2:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
     dd4:	10 93 5f 2d 	sts	0x2D5F, r17
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     dd8:	80 e1       	ldi	r24, 0x10	; 16
     dda:	e0 e4       	ldi	r30, 0x40	; 64
     ddc:	f6 e0       	ldi	r31, 0x06	; 6
     dde:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     de0:	8f ef       	ldi	r24, 0xFF	; 255
     de2:	e0 ec       	ldi	r30, 0xC0	; 192
     de4:	f8 e0       	ldi	r31, 0x08	; 8
     de6:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     de8:	80 91 c2 08 	lds	r24, 0x08C2
     dec:	87 ff       	sbrs	r24, 7
     dee:	fc cf       	rjmp	.-8      	; 0xde8 <disk_initialize+0x194>
	return SD_SPI.DATA;
     df0:	80 91 c3 08 	lds	r24, 0x08C3
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <disk_initialize+0x1b4>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     df8:	80 91 d3 2c 	lds	r24, 0x2CD3
     dfc:	8e 7f       	andi	r24, 0xFE	; 254
     dfe:	80 93 d3 2c 	sts	0x2CD3, r24
		FCLK_FAST();
     e02:	80 ed       	ldi	r24, 0xD0	; 208
     e04:	80 93 c0 08 	sts	0x08C0, r24
	} else {			/* Initialization failed */
		power_off();
	}

	//CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc)); // 32MHz
	return Stat;
     e08:	80 91 d3 2c 	lds	r24, 0x2CD3
}
     e0c:	24 96       	adiw	r28, 0x04	; 4
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	ff 90       	pop	r15
     e1c:	ef 90       	pop	r14
     e1e:	08 95       	ret

00000e20 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     e20:	88 23       	and	r24, r24
     e22:	11 f0       	breq	.+4      	; 0xe28 <disk_status+0x8>
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	08 95       	ret
	return Stat;
     e28:	80 91 d3 2c 	lds	r24, 0x2CD3
}
     e2c:	08 95       	ret

00000e2e <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     e2e:	0f 93       	push	r16
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     e36:	88 23       	and	r24, r24
     e38:	09 f0       	breq	.+2      	; 0xe3c <disk_read+0xe>
     e3a:	53 c0       	rjmp	.+166    	; 0xee2 <disk_read+0xb4>
     e3c:	00 23       	and	r16, r16
     e3e:	09 f4       	brne	.+2      	; 0xe42 <disk_read+0x14>
     e40:	50 c0       	rjmp	.+160    	; 0xee2 <disk_read+0xb4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     e42:	80 91 d3 2c 	lds	r24, 0x2CD3
     e46:	80 ff       	sbrs	r24, 0
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <disk_read+0x20>
     e4a:	03 e0       	ldi	r16, 0x03	; 3
     e4c:	4b c0       	rjmp	.+150    	; 0xee4 <disk_read+0xb6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     e4e:	80 91 5f 2d 	lds	r24, 0x2D5F
     e52:	83 fd       	sbrc	r24, 3
     e54:	07 c0       	rjmp	.+14     	; 0xe64 <disk_read+0x36>
     e56:	69 e0       	ldi	r22, 0x09	; 9
     e58:	22 0f       	add	r18, r18
     e5a:	33 1f       	adc	r19, r19
     e5c:	44 1f       	adc	r20, r20
     e5e:	55 1f       	adc	r21, r21
     e60:	6a 95       	dec	r22
     e62:	d1 f7       	brne	.-12     	; 0xe58 <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
     e64:	01 30       	cpi	r16, 0x01	; 1
     e66:	89 f4       	brne	.+34     	; 0xe8a <disk_read+0x5c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     e68:	81 e5       	ldi	r24, 0x51	; 81
     e6a:	ba 01       	movw	r22, r20
     e6c:	a9 01       	movw	r20, r18
     e6e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
     e72:	88 23       	and	r24, r24
     e74:	21 f5       	brne	.+72     	; 0xebe <disk_read+0x90>
     e76:	ce 01       	movw	r24, r28
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	72 e0       	ldi	r23, 0x02	; 2
     e7c:	0e 94 ed 04 	call	0x9da	; 0x9da <rcvr_datablock>
     e80:	00 e0       	ldi	r16, 0x00	; 0
     e82:	88 23       	and	r24, r24
     e84:	e1 f4       	brne	.+56     	; 0xebe <disk_read+0x90>
     e86:	01 e0       	ldi	r16, 0x01	; 1
     e88:	1a c0       	rjmp	.+52     	; 0xebe <disk_read+0x90>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     e8a:	82 e5       	ldi	r24, 0x52	; 82
     e8c:	ba 01       	movw	r22, r20
     e8e:	a9 01       	movw	r20, r18
     e90:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
     e94:	88 23       	and	r24, r24
     e96:	99 f4       	brne	.+38     	; 0xebe <disk_read+0x90>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     e98:	ce 01       	movw	r24, r28
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	72 e0       	ldi	r23, 0x02	; 2
     e9e:	0e 94 ed 04 	call	0x9da	; 0x9da <rcvr_datablock>
     ea2:	88 23       	and	r24, r24
     ea4:	29 f0       	breq	.+10     	; 0xeb0 <disk_read+0x82>
				buff += 512;
			} while (--count);
     ea6:	01 50       	subi	r16, 0x01	; 1
     ea8:	19 f0       	breq	.+6      	; 0xeb0 <disk_read+0x82>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
     eaa:	c0 50       	subi	r28, 0x00	; 0
     eac:	de 4f       	sbci	r29, 0xFE	; 254
     eae:	f4 cf       	rjmp	.-24     	; 0xe98 <disk_read+0x6a>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     eb0:	8c e4       	ldi	r24, 0x4C	; 76
     eb2:	40 e0       	ldi	r20, 0x00	; 0
     eb4:	50 e0       	ldi	r21, 0x00	; 0
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     ebe:	80 e1       	ldi	r24, 0x10	; 16
     ec0:	e0 e4       	ldi	r30, 0x40	; 64
     ec2:	f6 e0       	ldi	r31, 0x06	; 6
     ec4:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	e0 ec       	ldi	r30, 0xC0	; 192
     eca:	f8 e0       	ldi	r31, 0x08	; 8
     ecc:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     ece:	80 91 c2 08 	lds	r24, 0x08C2
     ed2:	87 ff       	sbrs	r24, 7
     ed4:	fc cf       	rjmp	.-8      	; 0xece <disk_read+0xa0>
	return SD_SPI.DATA;
     ed6:	80 91 c3 08 	lds	r24, 0x08C3
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     eda:	00 23       	and	r16, r16
     edc:	19 f0       	breq	.+6      	; 0xee4 <disk_read+0xb6>
     ede:	01 e0       	ldi	r16, 0x01	; 1
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <disk_read+0xb6>
     ee2:	04 e0       	ldi	r16, 0x04	; 4
}
     ee4:	80 2f       	mov	r24, r16
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	0f 91       	pop	r16
     eec:	08 95       	ret

00000eee <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     eee:	cf 92       	push	r12
     ef0:	df 92       	push	r13
     ef2:	ef 92       	push	r14
     ef4:	ff 92       	push	r15
     ef6:	0f 93       	push	r16
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	eb 01       	movw	r28, r22
     efe:	69 01       	movw	r12, r18
     f00:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     f02:	88 23       	and	r24, r24
     f04:	09 f0       	breq	.+2      	; 0xf08 <disk_write+0x1a>
     f06:	61 c0       	rjmp	.+194    	; 0xfca <disk_write+0xdc>
     f08:	00 23       	and	r16, r16
     f0a:	09 f4       	brne	.+2      	; 0xf0e <disk_write+0x20>
     f0c:	5e c0       	rjmp	.+188    	; 0xfca <disk_write+0xdc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     f0e:	80 91 d3 2c 	lds	r24, 0x2CD3
     f12:	80 ff       	sbrs	r24, 0
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <disk_write+0x2c>
     f16:	03 e0       	ldi	r16, 0x03	; 3
     f18:	59 c0       	rjmp	.+178    	; 0xfcc <disk_write+0xde>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     f1a:	80 91 d3 2c 	lds	r24, 0x2CD3
     f1e:	82 ff       	sbrs	r24, 2
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <disk_write+0x38>
     f22:	02 e0       	ldi	r16, 0x02	; 2
     f24:	53 c0       	rjmp	.+166    	; 0xfcc <disk_write+0xde>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     f26:	80 91 5f 2d 	lds	r24, 0x2D5F
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	83 fd       	sbrc	r24, 3
     f2e:	07 c0       	rjmp	.+14     	; 0xf3e <disk_write+0x50>
     f30:	79 e0       	ldi	r23, 0x09	; 9
     f32:	cc 0c       	add	r12, r12
     f34:	dd 1c       	adc	r13, r13
     f36:	ee 1c       	adc	r14, r14
     f38:	ff 1c       	adc	r15, r15
     f3a:	7a 95       	dec	r23
     f3c:	d1 f7       	brne	.-12     	; 0xf32 <disk_write+0x44>

	if (count == 1) {	/* Single block write */
     f3e:	01 30       	cpi	r16, 0x01	; 1
     f40:	69 f4       	brne	.+26     	; 0xf5c <disk_write+0x6e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     f42:	88 e5       	ldi	r24, 0x58	; 88
     f44:	b7 01       	movw	r22, r14
     f46:	a6 01       	movw	r20, r12
     f48:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
     f4c:	88 23       	and	r24, r24
     f4e:	59 f5       	brne	.+86     	; 0xfa6 <disk_write+0xb8>
     f50:	ce 01       	movw	r24, r28
     f52:	6e ef       	ldi	r22, 0xFE	; 254
     f54:	0e 94 4f 05 	call	0xa9e	; 0xa9e <xmit_datablock>
     f58:	00 e0       	ldi	r16, 0x00	; 0
     f5a:	22 c0       	rjmp	.+68     	; 0xfa0 <disk_write+0xb2>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     f5c:	86 70       	andi	r24, 0x06	; 6
     f5e:	90 70       	andi	r25, 0x00	; 0
     f60:	89 2b       	or	r24, r25
     f62:	39 f0       	breq	.+14     	; 0xf72 <disk_write+0x84>
     f64:	40 2f       	mov	r20, r16
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	87 ed       	ldi	r24, 0xD7	; 215
     f6e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     f72:	89 e5       	ldi	r24, 0x59	; 89
     f74:	b7 01       	movw	r22, r14
     f76:	a6 01       	movw	r20, r12
     f78:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
     f7c:	88 23       	and	r24, r24
     f7e:	99 f4       	brne	.+38     	; 0xfa6 <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     f80:	ce 01       	movw	r24, r28
     f82:	6c ef       	ldi	r22, 0xFC	; 252
     f84:	0e 94 4f 05 	call	0xa9e	; 0xa9e <xmit_datablock>
     f88:	88 23       	and	r24, r24
     f8a:	29 f0       	breq	.+10     	; 0xf96 <disk_write+0xa8>
				buff += 512;
			} while (--count);
     f8c:	01 50       	subi	r16, 0x01	; 1
     f8e:	19 f0       	breq	.+6      	; 0xf96 <disk_write+0xa8>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
     f90:	c0 50       	subi	r28, 0x00	; 0
     f92:	de 4f       	sbci	r29, 0xFE	; 254
     f94:	f5 cf       	rjmp	.-22     	; 0xf80 <disk_write+0x92>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	6d ef       	ldi	r22, 0xFD	; 253
     f9c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <xmit_datablock>
     fa0:	88 23       	and	r24, r24
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <disk_write+0xb8>
     fa4:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     fa6:	80 e1       	ldi	r24, 0x10	; 16
     fa8:	e0 e4       	ldi	r30, 0x40	; 64
     faa:	f6 e0       	ldi	r31, 0x06	; 6
     fac:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
     fae:	8f ef       	ldi	r24, 0xFF	; 255
     fb0:	e0 ec       	ldi	r30, 0xC0	; 192
     fb2:	f8 e0       	ldi	r31, 0x08	; 8
     fb4:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
     fb6:	80 91 c2 08 	lds	r24, 0x08C2
     fba:	87 ff       	sbrs	r24, 7
     fbc:	fc cf       	rjmp	.-8      	; 0xfb6 <disk_write+0xc8>
	return SD_SPI.DATA;
     fbe:	80 91 c3 08 	lds	r24, 0x08C3
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     fc2:	00 23       	and	r16, r16
     fc4:	19 f0       	breq	.+6      	; 0xfcc <disk_write+0xde>
     fc6:	01 e0       	ldi	r16, 0x01	; 1
     fc8:	01 c0       	rjmp	.+2      	; 0xfcc <disk_write+0xde>
     fca:	04 e0       	ldi	r16, 0x04	; 4
}
     fcc:	80 2f       	mov	r24, r16
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	0f 91       	pop	r16
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	df 90       	pop	r13
     fda:	cf 90       	pop	r12
     fdc:	08 95       	ret

00000fde <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	60 97       	sbiw	r28, 0x10	; 16
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
     ff4:	88 23       	and	r24, r24
     ff6:	09 f0       	breq	.+2      	; 0xffa <disk_ioctl+0x1c>
     ff8:	b8 c1       	rjmp	.+880    	; 0x136a <disk_ioctl+0x38c>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     ffa:	64 30       	cpi	r22, 0x04	; 4
     ffc:	01 f5       	brne	.+64     	; 0x103e <disk_ioctl+0x60>
		switch (*ptr) {
     ffe:	fa 01       	movw	r30, r20
    1000:	80 81       	ld	r24, Z
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	39 f0       	breq	.+14     	; 0x1014 <disk_ioctl+0x36>
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	08 f4       	brcc	.+2      	; 0x100c <disk_ioctl+0x2e>
    100a:	b1 c1       	rjmp	.+866    	; 0x136e <disk_ioctl+0x390>
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	09 f0       	breq	.+2      	; 0x1012 <disk_ioctl+0x34>
    1010:	ac c1       	rjmp	.+856    	; 0x136a <disk_ioctl+0x38c>
    1012:	11 c0       	rjmp	.+34     	; 0x1036 <disk_ioctl+0x58>

static
void power_on (void)
{
	// Initialize SPI
	SD_PORT.DIRSET = SD_SPI_SS_bm | SD_SPI_MOSI_bm | SD_SPI_SCK_bm;
    1014:	e0 e4       	ldi	r30, 0x40	; 64
    1016:	f6 e0       	ldi	r31, 0x06	; 6
    1018:	80 eb       	ldi	r24, 0xB0	; 176
    101a:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.PIN6CTRL = PORT_OPC_WIREDANDPULL_gc;
    101c:	88 e3       	ldi	r24, 0x38	; 56
    101e:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.OUT = 0x00;
    1020:	14 82       	std	Z+4, r1	; 0x04
    1022:	8c e2       	ldi	r24, 0x2C	; 44
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	20 e7       	ldi	r18, 0x70	; 112
    1028:	31 e0       	ldi	r19, 0x01	; 1
    102a:	f9 01       	movw	r30, r18
    102c:	31 97       	sbiw	r30, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <disk_ioctl+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1030:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1032:	d9 f7       	brne	.-10     	; 0x102a <disk_ioctl+0x4c>
    1034:	9c c1       	rjmp	.+824    	; 0x136e <disk_ioctl+0x390>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	fa 01       	movw	r30, r20
    103a:	81 83       	std	Z+1, r24	; 0x01
    103c:	98 c1       	rjmp	.+816    	; 0x136e <disk_ioctl+0x390>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    103e:	80 91 d3 2c 	lds	r24, 0x2CD3
    1042:	80 ff       	sbrs	r24, 0
    1044:	02 c0       	rjmp	.+4      	; 0x104a <disk_ioctl+0x6c>
    1046:	93 e0       	ldi	r25, 0x03	; 3
    1048:	93 c1       	rjmp	.+806    	; 0x1370 <disk_ioctl+0x392>

		switch (ctrl) {
    104a:	6a 30       	cpi	r22, 0x0A	; 10
    104c:	09 f4       	brne	.+2      	; 0x1050 <disk_ioctl+0x72>
    104e:	2f c1       	rjmp	.+606    	; 0x12ae <disk_ioctl+0x2d0>
    1050:	6b 30       	cpi	r22, 0x0B	; 11
    1052:	50 f4       	brcc	.+20     	; 0x1068 <disk_ioctl+0x8a>
    1054:	61 30       	cpi	r22, 0x01	; 1
    1056:	51 f1       	breq	.+84     	; 0x10ac <disk_ioctl+0xce>
    1058:	61 30       	cpi	r22, 0x01	; 1
    105a:	a0 f0       	brcs	.+40     	; 0x1084 <disk_ioctl+0xa6>
    105c:	62 30       	cpi	r22, 0x02	; 2
    105e:	09 f4       	brne	.+2      	; 0x1062 <disk_ioctl+0x84>
    1060:	86 c0       	rjmp	.+268    	; 0x116e <disk_ioctl+0x190>
    1062:	63 30       	cpi	r22, 0x03	; 3
    1064:	69 f4       	brne	.+26     	; 0x1080 <disk_ioctl+0xa2>
    1066:	89 c0       	rjmp	.+274    	; 0x117a <disk_ioctl+0x19c>
    1068:	6c 30       	cpi	r22, 0x0C	; 12
    106a:	09 f4       	brne	.+2      	; 0x106e <disk_ioctl+0x90>
    106c:	27 c1       	rjmp	.+590    	; 0x12bc <disk_ioctl+0x2de>
    106e:	6c 30       	cpi	r22, 0x0C	; 12
    1070:	08 f4       	brcc	.+2      	; 0x1074 <disk_ioctl+0x96>
    1072:	22 c1       	rjmp	.+580    	; 0x12b8 <disk_ioctl+0x2da>
    1074:	6d 30       	cpi	r22, 0x0D	; 13
    1076:	09 f4       	brne	.+2      	; 0x107a <disk_ioctl+0x9c>
    1078:	2e c1       	rjmp	.+604    	; 0x12d6 <disk_ioctl+0x2f8>
    107a:	6e 30       	cpi	r22, 0x0E	; 14
    107c:	09 f4       	brne	.+2      	; 0x1080 <disk_ioctl+0xa2>
    107e:	4a c1       	rjmp	.+660    	; 0x1314 <disk_ioctl+0x336>
    1080:	94 e0       	ldi	r25, 0x04	; 4
    1082:	64 c1       	rjmp	.+712    	; 0x134c <disk_ioctl+0x36e>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
    1084:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <select>
    1088:	88 23       	and	r24, r24
    108a:	09 f4       	brne	.+2      	; 0x108e <disk_ioctl+0xb0>
    108c:	5e c1       	rjmp	.+700    	; 0x134a <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    108e:	80 e1       	ldi	r24, 0x10	; 16
    1090:	e0 e4       	ldi	r30, 0x40	; 64
    1092:	f6 e0       	ldi	r31, 0x06	; 6
    1094:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1096:	8f ef       	ldi	r24, 0xFF	; 255
    1098:	e0 ec       	ldi	r30, 0xC0	; 192
    109a:	f8 e0       	ldi	r31, 0x08	; 8
    109c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    109e:	80 91 c2 08 	lds	r24, 0x08C2
    10a2:	87 ff       	sbrs	r24, 7
    10a4:	fc cf       	rjmp	.-8      	; 0x109e <disk_ioctl+0xc0>
	return SD_SPI.DATA;
    10a6:	80 91 c3 08 	lds	r24, 0x08C3
    10aa:	ff c0       	rjmp	.+510    	; 0x12aa <disk_ioctl+0x2cc>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    10ac:	89 e4       	ldi	r24, 0x49	; 73
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
    10ba:	88 23       	and	r24, r24
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <disk_ioctl+0xe2>
    10be:	45 c1       	rjmp	.+650    	; 0x134a <disk_ioctl+0x36c>
    10c0:	ce 01       	movw	r24, r28
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	60 e1       	ldi	r22, 0x10	; 16
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	0e 94 ed 04 	call	0x9da	; 0x9da <rcvr_datablock>
    10cc:	88 23       	and	r24, r24
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <disk_ioctl+0xf4>
    10d0:	3c c1       	rjmp	.+632    	; 0x134a <disk_ioctl+0x36c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	82 95       	swap	r24
    10d6:	86 95       	lsr	r24
    10d8:	86 95       	lsr	r24
    10da:	83 70       	andi	r24, 0x03	; 3
    10dc:	7a 85       	ldd	r23, Y+10	; 0x0a
    10de:	49 85       	ldd	r20, Y+9	; 0x09
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	89 f4       	brne	.+34     	; 0x1106 <disk_ioctl+0x128>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    10e4:	87 2f       	mov	r24, r23
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	34 2f       	mov	r19, r20
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	82 0f       	add	r24, r18
    10f0:	93 1f       	adc	r25, r19
    10f2:	a0 e0       	ldi	r26, 0x00	; 0
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	2a e0       	ldi	r18, 0x0A	; 10
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	aa 1f       	adc	r26, r26
    10fe:	bb 1f       	adc	r27, r27
    1100:	2a 95       	dec	r18
    1102:	d1 f7       	brne	.-12     	; 0x10f8 <disk_ioctl+0x11a>
    1104:	cd c0       	rjmp	.+410    	; 0x12a0 <disk_ioctl+0x2c2>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    1106:	42 95       	swap	r20
    1108:	46 95       	lsr	r20
    110a:	46 95       	lsr	r20
    110c:	43 70       	andi	r20, 0x03	; 3
    110e:	28 85       	ldd	r18, Y+8	; 0x08
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	22 0f       	add	r18, r18
    1114:	33 1f       	adc	r19, r19
    1116:	22 0f       	add	r18, r18
    1118:	33 1f       	adc	r19, r19
    111a:	24 0f       	add	r18, r20
    111c:	31 1d       	adc	r19, r1
    111e:	2f 5f       	subi	r18, 0xFF	; 255
    1120:	3f 4f       	sbci	r19, 0xFF	; 255
    1122:	8f 81       	ldd	r24, Y+7	; 0x07
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	83 70       	andi	r24, 0x03	; 3
    1128:	90 70       	andi	r25, 0x00	; 0
    112a:	98 2f       	mov	r25, r24
    112c:	88 27       	eor	r24, r24
    112e:	99 0f       	add	r25, r25
    1130:	99 0f       	add	r25, r25
    1132:	28 0f       	add	r18, r24
    1134:	39 1f       	adc	r19, r25
    1136:	40 e0       	ldi	r20, 0x00	; 0
    1138:	50 e0       	ldi	r21, 0x00	; 0
    113a:	8e 81       	ldd	r24, Y+6	; 0x06
    113c:	8f 70       	andi	r24, 0x0F	; 15
    113e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1140:	66 1f       	adc	r22, r22
    1142:	66 27       	eor	r22, r22
    1144:	66 1f       	adc	r22, r22
    1146:	86 0f       	add	r24, r22
    1148:	8e 5f       	subi	r24, 0xFE	; 254
    114a:	73 70       	andi	r23, 0x03	; 3
    114c:	77 0f       	add	r23, r23
    114e:	87 0f       	add	r24, r23
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	09 97       	sbiw	r24, 0x09	; 9
    1154:	04 c0       	rjmp	.+8      	; 0x115e <disk_ioctl+0x180>
    1156:	22 0f       	add	r18, r18
    1158:	33 1f       	adc	r19, r19
    115a:	44 1f       	adc	r20, r20
    115c:	55 1f       	adc	r21, r21
    115e:	8a 95       	dec	r24
    1160:	d2 f7       	brpl	.-12     	; 0x1156 <disk_ioctl+0x178>
    1162:	f8 01       	movw	r30, r16
    1164:	20 83       	st	Z, r18
    1166:	31 83       	std	Z+1, r19	; 0x01
    1168:	42 83       	std	Z+2, r20	; 0x02
    116a:	53 83       	std	Z+3, r21	; 0x03
    116c:	9e c0       	rjmp	.+316    	; 0x12aa <disk_ioctl+0x2cc>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	92 e0       	ldi	r25, 0x02	; 2
    1172:	fa 01       	movw	r30, r20
    1174:	80 83       	st	Z, r24
    1176:	91 83       	std	Z+1, r25	; 0x01
    1178:	98 c0       	rjmp	.+304    	; 0x12aa <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
    117a:	80 91 5f 2d 	lds	r24, 0x2D5F
    117e:	f8 2e       	mov	r15, r24
    1180:	82 ff       	sbrs	r24, 2
    1182:	39 c0       	rjmp	.+114    	; 0x11f6 <disk_ioctl+0x218>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    1184:	8d ec       	ldi	r24, 0xCD	; 205
    1186:	40 e0       	ldi	r20, 0x00	; 0
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
    1192:	88 23       	and	r24, r24
    1194:	09 f0       	breq	.+2      	; 0x1198 <disk_ioctl+0x1ba>
    1196:	d9 c0       	rjmp	.+434    	; 0x134a <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1198:	8f ef       	ldi	r24, 0xFF	; 255
    119a:	e0 ec       	ldi	r30, 0xC0	; 192
    119c:	f8 e0       	ldi	r31, 0x08	; 8
    119e:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    11a0:	80 91 c2 08 	lds	r24, 0x08C2
    11a4:	87 ff       	sbrs	r24, 7
    11a6:	fc cf       	rjmp	.-8      	; 0x11a0 <disk_ioctl+0x1c2>
	return SD_SPI.DATA;
    11a8:	80 91 c3 08 	lds	r24, 0x08C3

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    11ac:	ce 01       	movw	r24, r28
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	60 e1       	ldi	r22, 0x10	; 16
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	0e 94 ed 04 	call	0x9da	; 0x9da <rcvr_datablock>
    11b8:	88 23       	and	r24, r24
    11ba:	09 f4       	brne	.+2      	; 0x11be <disk_ioctl+0x1e0>
    11bc:	c6 c0       	rjmp	.+396    	; 0x134a <disk_ioctl+0x36c>
    11be:	90 e3       	ldi	r25, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    11c0:	e0 ec       	ldi	r30, 0xC0	; 192
    11c2:	f8 e0       	ldi	r31, 0x08	; 8
    11c4:	2f ef       	ldi	r18, 0xFF	; 255
    11c6:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    11c8:	80 91 c2 08 	lds	r24, 0x08C2
    11cc:	87 ff       	sbrs	r24, 7
    11ce:	fc cf       	rjmp	.-8      	; 0x11c8 <disk_ioctl+0x1ea>
	return SD_SPI.DATA;
    11d0:	80 91 c3 08 	lds	r24, 0x08C3
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    11d4:	91 50       	subi	r25, 0x01	; 1
    11d6:	b9 f7       	brne	.-18     	; 0x11c6 <disk_ioctl+0x1e8>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    11d8:	2b 85       	ldd	r18, Y+11	; 0x0b
    11da:	22 95       	swap	r18
    11dc:	2f 70       	andi	r18, 0x0F	; 15
    11de:	80 e1       	ldi	r24, 0x10	; 16
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	a0 e0       	ldi	r26, 0x00	; 0
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <disk_ioctl+0x212>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	aa 1f       	adc	r26, r26
    11ee:	bb 1f       	adc	r27, r27
    11f0:	2a 95       	dec	r18
    11f2:	d2 f7       	brpl	.-12     	; 0x11e8 <disk_ioctl+0x20a>
    11f4:	55 c0       	rjmp	.+170    	; 0x12a0 <disk_ioctl+0x2c2>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    11f6:	89 e4       	ldi	r24, 0x49	; 73
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
    1204:	88 23       	and	r24, r24
    1206:	09 f0       	breq	.+2      	; 0x120a <disk_ioctl+0x22c>
    1208:	a0 c0       	rjmp	.+320    	; 0x134a <disk_ioctl+0x36c>
    120a:	ce 01       	movw	r24, r28
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	60 e1       	ldi	r22, 0x10	; 16
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	0e 94 ed 04 	call	0x9da	; 0x9da <rcvr_datablock>
    1216:	88 23       	and	r24, r24
    1218:	09 f4       	brne	.+2      	; 0x121c <disk_ioctl+0x23e>
    121a:	97 c0       	rjmp	.+302    	; 0x134a <disk_ioctl+0x36c>
    121c:	4b 85       	ldd	r20, Y+11	; 0x0b
    121e:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
    1220:	f1 fe       	sbrs	r15, 1
    1222:	1b c0       	rjmp	.+54     	; 0x125a <disk_ioctl+0x27c>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    1224:	88 1f       	adc	r24, r24
    1226:	88 27       	eor	r24, r24
    1228:	88 1f       	adc	r24, r24
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	24 2f       	mov	r18, r20
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	2f 73       	andi	r18, 0x3F	; 63
    1234:	30 70       	andi	r19, 0x00	; 0
    1236:	22 0f       	add	r18, r18
    1238:	33 1f       	adc	r19, r19
    123a:	82 0f       	add	r24, r18
    123c:	93 1f       	adc	r25, r19
    123e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1240:	22 95       	swap	r18
    1242:	26 95       	lsr	r18
    1244:	26 95       	lsr	r18
    1246:	23 70       	andi	r18, 0x03	; 3
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	21 50       	subi	r18, 0x01	; 1
    124c:	30 40       	sbci	r19, 0x00	; 0
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <disk_ioctl+0x276>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	2a 95       	dec	r18
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <disk_ioctl+0x272>
    1258:	21 c0       	rjmp	.+66     	; 0x129c <disk_ioctl+0x2be>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	23 70       	andi	r18, 0x03	; 3
    1260:	30 70       	andi	r19, 0x00	; 0
    1262:	f3 e0       	ldi	r31, 0x03	; 3
    1264:	22 0f       	add	r18, r18
    1266:	33 1f       	adc	r19, r19
    1268:	fa 95       	dec	r31
    126a:	e1 f7       	brne	.-8      	; 0x1264 <disk_ioctl+0x286>
    126c:	82 95       	swap	r24
    126e:	86 95       	lsr	r24
    1270:	87 70       	andi	r24, 0x07	; 7
    1272:	28 0f       	add	r18, r24
    1274:	31 1d       	adc	r19, r1
    1276:	2f 5f       	subi	r18, 0xFF	; 255
    1278:	3f 4f       	sbci	r19, 0xFF	; 255
    127a:	84 2f       	mov	r24, r20
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	8c 77       	andi	r24, 0x7C	; 124
    1280:	90 70       	andi	r25, 0x00	; 0
    1282:	95 95       	asr	r25
    1284:	87 95       	ror	r24
    1286:	95 95       	asr	r25
    1288:	87 95       	ror	r24
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	ac 01       	movw	r20, r24
    128e:	24 9f       	mul	r18, r20
    1290:	c0 01       	movw	r24, r0
    1292:	25 9f       	mul	r18, r21
    1294:	90 0d       	add	r25, r0
    1296:	34 9f       	mul	r19, r20
    1298:	90 0d       	add	r25, r0
    129a:	11 24       	eor	r1, r1
    129c:	a0 e0       	ldi	r26, 0x00	; 0
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	f8 01       	movw	r30, r16
    12a2:	80 83       	st	Z, r24
    12a4:	91 83       	std	Z+1, r25	; 0x01
    12a6:	a2 83       	std	Z+2, r26	; 0x02
    12a8:	b3 83       	std	Z+3, r27	; 0x03
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	4f c0       	rjmp	.+158    	; 0x134c <disk_ioctl+0x36e>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    12ae:	80 91 5f 2d 	lds	r24, 0x2D5F
    12b2:	fa 01       	movw	r30, r20
    12b4:	80 83       	st	Z, r24
    12b6:	f9 cf       	rjmp	.-14     	; 0x12aa <disk_ioctl+0x2cc>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    12b8:	89 e4       	ldi	r24, 0x49	; 73
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <disk_ioctl+0x2e0>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    12bc:	8a e4       	ldi	r24, 0x4A	; 74
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	50 e0       	ldi	r21, 0x00	; 0
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
    12ca:	88 23       	and	r24, r24
    12cc:	f1 f5       	brne	.+124    	; 0x134a <disk_ioctl+0x36c>
    12ce:	c8 01       	movw	r24, r16
    12d0:	60 e1       	ldi	r22, 0x10	; 16
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	35 c0       	rjmp	.+106    	; 0x1340 <disk_ioctl+0x362>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    12d6:	8a e7       	ldi	r24, 0x7A	; 122
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
    12e4:	88 23       	and	r24, r24
    12e6:	89 f5       	brne	.+98     	; 0x134a <disk_ioctl+0x36c>
    12e8:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    12ea:	a0 ec       	ldi	r26, 0xC0	; 192
    12ec:	b8 e0       	ldi	r27, 0x08	; 8
    12ee:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    12f0:	98 01       	movw	r18, r16
    12f2:	2d 5f       	subi	r18, 0xFD	; 253
    12f4:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    12f6:	13 96       	adiw	r26, 0x03	; 3
    12f8:	9c 93       	st	X, r25
    12fa:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    12fc:	80 91 c2 08 	lds	r24, 0x08C2
    1300:	87 ff       	sbrs	r24, 7
    1302:	fc cf       	rjmp	.-8      	; 0x12fc <disk_ioctl+0x31e>
	return SD_SPI.DATA;
    1304:	80 91 c3 08 	lds	r24, 0x08C3
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    1308:	80 83       	st	Z, r24
    130a:	e2 17       	cp	r30, r18
    130c:	f3 07       	cpc	r31, r19
    130e:	69 f2       	breq	.-102    	; 0x12aa <disk_ioctl+0x2cc>
    1310:	31 96       	adiw	r30, 0x01	; 1
    1312:	f1 cf       	rjmp	.-30     	; 0x12f6 <disk_ioctl+0x318>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    1314:	8d ec       	ldi	r24, 0xCD	; 205
    1316:	40 e0       	ldi	r20, 0x00	; 0
    1318:	50 e0       	ldi	r21, 0x00	; 0
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <send_cmd>
    1322:	88 23       	and	r24, r24
    1324:	91 f4       	brne	.+36     	; 0x134a <disk_ioctl+0x36c>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	e0 ec       	ldi	r30, 0xC0	; 192
    132a:	f8 e0       	ldi	r31, 0x08	; 8
    132c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    132e:	80 91 c2 08 	lds	r24, 0x08C2
    1332:	87 ff       	sbrs	r24, 7
    1334:	fc cf       	rjmp	.-8      	; 0x132e <disk_ioctl+0x350>
	return SD_SPI.DATA;
    1336:	80 91 c3 08 	lds	r24, 0x08C3
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
    133a:	c8 01       	movw	r24, r16
    133c:	60 e4       	ldi	r22, 0x40	; 64
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	0e 94 ed 04 	call	0x9da	; 0x9da <rcvr_datablock>
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	88 23       	and	r24, r24
    1348:	09 f4       	brne	.+2      	; 0x134c <disk_ioctl+0x36e>
    134a:	91 e0       	ldi	r25, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    134c:	80 e1       	ldi	r24, 0x10	; 16
    134e:	e0 e4       	ldi	r30, 0x40	; 64
    1350:	f6 e0       	ldi	r31, 0x06	; 6
    1352:	85 83       	std	Z+5, r24	; 0x05
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SD_SPI.DATA = 0xFF;
    1354:	8f ef       	ldi	r24, 0xFF	; 255
    1356:	e0 ec       	ldi	r30, 0xC0	; 192
    1358:	f8 e0       	ldi	r31, 0x08	; 8
    135a:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SD_SPI.STATUS, SPI_IF_bp);
    135c:	80 91 c2 08 	lds	r24, 0x08C2
    1360:	87 ff       	sbrs	r24, 7
    1362:	fc cf       	rjmp	.-8      	; 0x135c <disk_ioctl+0x37e>
	return SD_SPI.DATA;
    1364:	80 91 c3 08 	lds	r24, 0x08C3
    1368:	03 c0       	rjmp	.+6      	; 0x1370 <disk_ioctl+0x392>
    136a:	94 e0       	ldi	r25, 0x04	; 4
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <disk_ioctl+0x392>
    136e:	90 e0       	ldi	r25, 0x00	; 0

		deselect();
	}

	return res;
}
    1370:	89 2f       	mov	r24, r25
    1372:	60 96       	adiw	r28, 0x10	; 16
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	1f 91       	pop	r17
    137e:	0f 91       	pop	r16
    1380:	ff 90       	pop	r15
    1382:	08 95       	ret

00001384 <disk_timerproc>:

void disk_timerproc (void)
{
    BYTE n, s;

    n = Timer1;    /* 100Hz decrement timer */
    1384:	80 91 5d 2d 	lds	r24, 0x2D5D
    if (n) Timer1 = --n;
    1388:	88 23       	and	r24, r24
    138a:	19 f0       	breq	.+6      	; 0x1392 <disk_timerproc+0xe>
    138c:	81 50       	subi	r24, 0x01	; 1
    138e:	80 93 5d 2d 	sts	0x2D5D, r24
    n = Timer2;
    1392:	80 91 5e 2d 	lds	r24, 0x2D5E
    if (n) Timer2 = --n;
    1396:	88 23       	and	r24, r24
    1398:	19 f0       	breq	.+6      	; 0x13a0 <disk_timerproc+0x1c>
    139a:	81 50       	subi	r24, 0x01	; 1
    139c:	80 93 5e 2d 	sts	0x2D5E, r24

	s = Stat;
    13a0:	80 91 d3 2c 	lds	r24, 0x2CD3

    s &= ~STA_NODISK;
    s &= ~STA_PROTECT;
    13a4:	89 7f       	andi	r24, 0xF9	; 249

    Stat = s;
    13a6:	80 93 d3 2c 	sts	0x2CD3, r24
}
    13aa:	08 95       	ret

000013ac <get_fattime>:
/* the system does not support a real time clock.          */
/* This is not required in read-only configuration.        */


DWORD get_fattime (void)
{
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	28 97       	sbiw	r28, 0x08	; 8
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	de bf       	out	0x3e, r29	; 62
	uint32_t temp;
	time_t tempT;
	
	Time_UTCSecsToTime((UNIX_Time-14400),&tempT);
    13c2:	60 91 0a 2d 	lds	r22, 0x2D0A
    13c6:	70 91 0b 2d 	lds	r23, 0x2D0B
    13ca:	80 91 0c 2d 	lds	r24, 0x2D0C
    13ce:	90 91 0d 2d 	lds	r25, 0x2D0D
    13d2:	60 54       	subi	r22, 0x40	; 64
    13d4:	78 43       	sbci	r23, 0x38	; 56
    13d6:	80 40       	sbci	r24, 0x00	; 0
    13d8:	90 40       	sbci	r25, 0x00	; 0
    13da:	ae 01       	movw	r20, r28
    13dc:	4f 5f       	subi	r20, 0xFF	; 255
    13de:	5f 4f       	sbci	r21, 0xFF	; 255
    13e0:	0e 94 ae 03 	call	0x75c	; 0x75c <Time_UTCSecsToTime>
		
	temp =  ((uint32_t)(tempT.Year - 10) << 25); //set year (since 1980)
    13e4:	88 85       	ldd	r24, Y+8	; 0x08
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0a 97       	sbiw	r24, 0x0a	; 10
    13ea:	7c 01       	movw	r14, r24
    13ec:	00 27       	eor	r16, r16
    13ee:	f7 fc       	sbrc	r15, 7
    13f0:	00 95       	com	r16
    13f2:	10 2f       	mov	r17, r16
    13f4:	a9 e1       	ldi	r26, 0x19	; 25
    13f6:	ee 0c       	add	r14, r14
    13f8:	ff 1c       	adc	r15, r15
    13fa:	00 1f       	adc	r16, r16
    13fc:	11 1f       	adc	r17, r17
    13fe:	aa 95       	dec	r26
    1400:	d1 f7       	brne	.-12     	; 0x13f6 <get_fattime+0x4a>
	temp |= ((uint32_t)tempT.Month       << 21); 
    1402:	2e 81       	ldd	r18, Y+6	; 0x06
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	40 e0       	ldi	r20, 0x00	; 0
    1408:	50 e0       	ldi	r21, 0x00	; 0
    140a:	a9 01       	movw	r20, r18
    140c:	33 27       	eor	r19, r19
    140e:	22 27       	eor	r18, r18
    1410:	8f 81       	ldd	r24, Y+7	; 0x07
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a0 e0       	ldi	r26, 0x00	; 0
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e5 e1       	ldi	r30, 0x15	; 21
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	aa 1f       	adc	r26, r26
    1420:	bb 1f       	adc	r27, r27
    1422:	ea 95       	dec	r30
    1424:	d1 f7       	brne	.-12     	; 0x141a <get_fattime+0x6e>
    1426:	28 2b       	or	r18, r24
    1428:	39 2b       	or	r19, r25
    142a:	4a 2b       	or	r20, r26
    142c:	5b 2b       	or	r21, r27
	temp |= ((uint32_t)tempT.Day         << 16);
    142e:	8c 81       	ldd	r24, Y+4	; 0x04
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	a0 e0       	ldi	r26, 0x00	; 0
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	7b e0       	ldi	r23, 0x0B	; 11
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	aa 1f       	adc	r26, r26
    143e:	bb 1f       	adc	r27, r27
    1440:	7a 95       	dec	r23
    1442:	d1 f7       	brne	.-12     	; 0x1438 <get_fattime+0x8c>
    1444:	28 2b       	or	r18, r24
    1446:	39 2b       	or	r19, r25
    1448:	4a 2b       	or	r20, r26
    144a:	5b 2b       	or	r21, r27
	temp |= ((uint32_t)tempT.Hour        << 11);
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	a0 e0       	ldi	r26, 0x00	; 0
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	65 e0       	ldi	r22, 0x05	; 5
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	aa 1f       	adc	r26, r26
    145c:	bb 1f       	adc	r27, r27
    145e:	6a 95       	dec	r22
    1460:	d1 f7       	brne	.-12     	; 0x1456 <get_fattime+0xaa>
    1462:	28 2b       	or	r18, r24
    1464:	39 2b       	or	r19, r25
    1466:	4a 2b       	or	r20, r26
    1468:	5b 2b       	or	r21, r27
	temp |= ((uint32_t)tempT.Minute      <<  5);
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	86 95       	lsr	r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a0 e0       	ldi	r26, 0x00	; 0
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	28 2b       	or	r18, r24
    1476:	39 2b       	or	r19, r25
    1478:	4a 2b       	or	r20, r26
    147a:	5b 2b       	or	r21, r27
    147c:	2e 29       	or	r18, r14
    147e:	3f 29       	or	r19, r15
    1480:	40 2b       	or	r20, r16
    1482:	51 2b       	or	r21, r17
	temp |= ((uint32_t)tempT.Second / 2); //seconds/2, ie 0..29 is the range
	return (temp);
}
    1484:	b9 01       	movw	r22, r18
    1486:	ca 01       	movw	r24, r20
    1488:	28 96       	adiw	r28, 0x08	; 8
    148a:	cd bf       	out	0x3d, r28	; 61
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	1f 91       	pop	r17
    1494:	0f 91       	pop	r16
    1496:	ff 90       	pop	r15
    1498:	ef 90       	pop	r14
    149a:	08 95       	ret

0000149c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    149c:	6f 92       	push	r6
    149e:	7f 92       	push	r7
    14a0:	8f 92       	push	r8
    14a2:	9f 92       	push	r9
    14a4:	af 92       	push	r10
    14a6:	bf 92       	push	r11
    14a8:	cf 92       	push	r12
    14aa:	df 92       	push	r13
    14ac:	ef 92       	push	r14
    14ae:	ff 92       	push	r15
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	ec 01       	movw	r28, r24
    14ba:	4a 01       	movw	r8, r20
    14bc:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    14be:	ca a4       	ldd	r12, Y+42	; 0x2a
    14c0:	db a4       	ldd	r13, Y+43	; 0x2b
    14c2:	ec a4       	ldd	r14, Y+44	; 0x2c
    14c4:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    14c6:	c4 16       	cp	r12, r20
    14c8:	d5 06       	cpc	r13, r21
    14ca:	e6 06       	cpc	r14, r22
    14cc:	f7 06       	cpc	r15, r23
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <move_window+0x36>
    14d0:	4e c0       	rjmp	.+156    	; 0x156e <move_window+0xd2>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    14d2:	8c 81       	ldd	r24, Y+4	; 0x04
    14d4:	88 23       	and	r24, r24
    14d6:	a1 f1       	breq	.+104    	; 0x1540 <move_window+0xa4>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
    14d8:	be e2       	ldi	r27, 0x2E	; 46
    14da:	6b 2e       	mov	r6, r27
    14dc:	71 2c       	mov	r7, r1
    14de:	6c 0e       	add	r6, r28
    14e0:	7d 1e       	adc	r7, r29
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	b3 01       	movw	r22, r6
    14e6:	a7 01       	movw	r20, r14
    14e8:	96 01       	movw	r18, r12
    14ea:	01 e0       	ldi	r16, 0x01	; 1
    14ec:	0e 94 77 07 	call	0xeee	; 0xeee <disk_write>
    14f0:	88 23       	and	r24, r24
    14f2:	d9 f5       	brne	.+118    	; 0x156a <move_window+0xce>
				return FR_DISK_ERR;
			fs->wflag = 0;
    14f4:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
    14f6:	8e 89       	ldd	r24, Y+22	; 0x16
    14f8:	9f 89       	ldd	r25, Y+23	; 0x17
    14fa:	a8 8d       	ldd	r26, Y+24	; 0x18
    14fc:	b9 8d       	ldd	r27, Y+25	; 0x19
    14fe:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1500:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1502:	48 a1       	ldd	r20, Y+32	; 0x20
    1504:	59 a1       	ldd	r21, Y+33	; 0x21
    1506:	82 0f       	add	r24, r18
    1508:	93 1f       	adc	r25, r19
    150a:	a4 1f       	adc	r26, r20
    150c:	b5 1f       	adc	r27, r21
    150e:	c8 16       	cp	r12, r24
    1510:	d9 06       	cpc	r13, r25
    1512:	ea 06       	cpc	r14, r26
    1514:	fb 06       	cpc	r15, r27
    1516:	a0 f4       	brcc	.+40     	; 0x1540 <move_window+0xa4>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    1518:	1b 81       	ldd	r17, Y+3	; 0x03
    151a:	10 c0       	rjmp	.+32     	; 0x153c <move_window+0xa0>
					wsect += fs->sects_fat;
    151c:	8e 89       	ldd	r24, Y+22	; 0x16
    151e:	9f 89       	ldd	r25, Y+23	; 0x17
    1520:	a8 8d       	ldd	r26, Y+24	; 0x18
    1522:	b9 8d       	ldd	r27, Y+25	; 0x19
    1524:	c8 0e       	add	r12, r24
    1526:	d9 1e       	adc	r13, r25
    1528:	ea 1e       	adc	r14, r26
    152a:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	b3 01       	movw	r22, r6
    1530:	a7 01       	movw	r20, r14
    1532:	96 01       	movw	r18, r12
    1534:	01 e0       	ldi	r16, 0x01	; 1
    1536:	0e 94 77 07 	call	0xeee	; 0xeee <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
    153a:	11 50       	subi	r17, 0x01	; 1
    153c:	12 30       	cpi	r17, 0x02	; 2
    153e:	70 f7       	brcc	.-36     	; 0x151c <move_window+0x80>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    1540:	81 14       	cp	r8, r1
    1542:	91 04       	cpc	r9, r1
    1544:	a1 04       	cpc	r10, r1
    1546:	b1 04       	cpc	r11, r1
    1548:	91 f0       	breq	.+36     	; 0x156e <move_window+0xd2>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
    154a:	be 01       	movw	r22, r28
    154c:	62 5d       	subi	r22, 0xD2	; 210
    154e:	7f 4f       	sbci	r23, 0xFF	; 255
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	a5 01       	movw	r20, r10
    1554:	94 01       	movw	r18, r8
    1556:	01 e0       	ldi	r16, 0x01	; 1
    1558:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_read>
    155c:	88 23       	and	r24, r24
    155e:	29 f4       	brne	.+10     	; 0x156a <move_window+0xce>
				return FR_DISK_ERR;
			fs->winsect = sector;
    1560:	8a a6       	std	Y+42, r8	; 0x2a
    1562:	9b a6       	std	Y+43, r9	; 0x2b
    1564:	ac a6       	std	Y+44, r10	; 0x2c
    1566:	bd a6       	std	Y+45, r11	; 0x2d
    1568:	03 c0       	rjmp	.+6      	; 0x1570 <move_window+0xd4>
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <move_window+0xd4>
    156e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	ff 90       	pop	r15
    157a:	ef 90       	pop	r14
    157c:	df 90       	pop	r13
    157e:	cf 90       	pop	r12
    1580:	bf 90       	pop	r11
    1582:	af 90       	pop	r10
    1584:	9f 90       	pop	r9
    1586:	8f 90       	pop	r8
    1588:	7f 90       	pop	r7
    158a:	6f 90       	pop	r6
    158c:	08 95       	ret

0000158e <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    158e:	0f 93       	push	r16
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    1596:	40 e0       	ldi	r20, 0x00	; 0
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
	if (res == FR_OK) {
    15a2:	88 23       	and	r24, r24
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <sync+0x1a>
    15a6:	7e c0       	rjmp	.+252    	; 0x16a4 <sync+0x116>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    15a8:	88 81       	ld	r24, Y
    15aa:	83 30       	cpi	r24, 0x03	; 3
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <sync+0x22>
    15ae:	72 c0       	rjmp	.+228    	; 0x1694 <sync+0x106>
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	88 23       	and	r24, r24
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <sync+0x2a>
    15b6:	6e c0       	rjmp	.+220    	; 0x1694 <sync+0x106>
			fs->winsect = 0;
    15b8:	1a a6       	std	Y+42, r1	; 0x2a
    15ba:	1b a6       	std	Y+43, r1	; 0x2b
    15bc:	1c a6       	std	Y+44, r1	; 0x2c
    15be:	1d a6       	std	Y+45, r1	; 0x2d
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    15c0:	be 01       	movw	r22, r28
    15c2:	62 5d       	subi	r22, 0xD2	; 210
    15c4:	7f 4f       	sbci	r23, 0xFF	; 255
    15c6:	fb 01       	movw	r30, r22
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	92 e0       	ldi	r25, 0x02	; 2
    15cc:	01 c0       	rjmp	.+2      	; 0x15d0 <sync+0x42>
	while (cnt--) *d++ = (char)val;
    15ce:	11 92       	st	Z+, r1
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	2f ef       	ldi	r18, 0xFF	; 255
    15d4:	8f 3f       	cpi	r24, 0xFF	; 255
    15d6:	92 07       	cpc	r25, r18
    15d8:	d1 f7       	brne	.-12     	; 0x15ce <sync+0x40>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    15da:	c4 5d       	subi	r28, 0xD4	; 212
    15dc:	dd 4f       	sbci	r29, 0xFD	; 253
    15de:	85 e5       	ldi	r24, 0x55	; 85
    15e0:	89 93       	st	Y+, r24
    15e2:	8a ea       	ldi	r24, 0xAA	; 170
    15e4:	88 83       	st	Y, r24
    15e6:	cd 52       	subi	r28, 0x2D	; 45
    15e8:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    15ea:	82 e5       	ldi	r24, 0x52	; 82
    15ec:	8e a7       	std	Y+46, r24	; 0x2e
    15ee:	8f a7       	std	Y+47, r24	; 0x2f
    15f0:	21 e6       	ldi	r18, 0x61	; 97
    15f2:	28 ab       	std	Y+48, r18	; 0x30
    15f4:	91 e4       	ldi	r25, 0x41	; 65
    15f6:	99 ab       	std	Y+49, r25	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    15f8:	ce 5e       	subi	r28, 0xEE	; 238
    15fa:	dd 4f       	sbci	r29, 0xFD	; 253
    15fc:	82 e7       	ldi	r24, 0x72	; 114
    15fe:	89 93       	st	Y+, r24
    1600:	89 93       	st	Y+, r24
    1602:	99 93       	st	Y+, r25
    1604:	28 83       	st	Y, r18
    1606:	c5 51       	subi	r28, 0x15	; 21
    1608:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    160a:	8e 85       	ldd	r24, Y+14	; 0x0e
    160c:	ca 5e       	subi	r28, 0xEA	; 234
    160e:	dd 4f       	sbci	r29, 0xFD	; 253
    1610:	88 83       	st	Y, r24
    1612:	c6 51       	subi	r28, 0x16	; 22
    1614:	d2 40       	sbci	r29, 0x02	; 2
    1616:	8f 85       	ldd	r24, Y+15	; 0x0f
    1618:	c9 5e       	subi	r28, 0xE9	; 233
    161a:	dd 4f       	sbci	r29, 0xFD	; 253
    161c:	88 83       	st	Y, r24
    161e:	c7 51       	subi	r28, 0x17	; 23
    1620:	d2 40       	sbci	r29, 0x02	; 2
    1622:	8e 85       	ldd	r24, Y+14	; 0x0e
    1624:	9f 85       	ldd	r25, Y+15	; 0x0f
    1626:	a8 89       	ldd	r26, Y+16	; 0x10
    1628:	b9 89       	ldd	r27, Y+17	; 0x11
    162a:	9d 01       	movw	r18, r26
    162c:	44 27       	eor	r20, r20
    162e:	55 27       	eor	r21, r21
    1630:	c8 5e       	subi	r28, 0xE8	; 232
    1632:	dd 4f       	sbci	r29, 0xFD	; 253
    1634:	28 83       	st	Y, r18
    1636:	21 96       	adiw	r28, 0x01	; 1
    1638:	8b 2f       	mov	r24, r27
    163a:	99 27       	eor	r25, r25
    163c:	aa 27       	eor	r26, r26
    163e:	bb 27       	eor	r27, r27
    1640:	88 83       	st	Y, r24
    1642:	c9 51       	subi	r28, 0x19	; 25
    1644:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    1646:	8a 85       	ldd	r24, Y+10	; 0x0a
    1648:	c6 5e       	subi	r28, 0xE6	; 230
    164a:	dd 4f       	sbci	r29, 0xFD	; 253
    164c:	88 83       	st	Y, r24
    164e:	ca 51       	subi	r28, 0x1A	; 26
    1650:	d2 40       	sbci	r29, 0x02	; 2
    1652:	8b 85       	ldd	r24, Y+11	; 0x0b
    1654:	c5 5e       	subi	r28, 0xE5	; 229
    1656:	dd 4f       	sbci	r29, 0xFD	; 253
    1658:	88 83       	st	Y, r24
    165a:	cb 51       	subi	r28, 0x1B	; 27
    165c:	d2 40       	sbci	r29, 0x02	; 2
    165e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1660:	9b 85       	ldd	r25, Y+11	; 0x0b
    1662:	ac 85       	ldd	r26, Y+12	; 0x0c
    1664:	bd 85       	ldd	r27, Y+13	; 0x0d
    1666:	9d 01       	movw	r18, r26
    1668:	44 27       	eor	r20, r20
    166a:	55 27       	eor	r21, r21
    166c:	c4 5e       	subi	r28, 0xE4	; 228
    166e:	dd 4f       	sbci	r29, 0xFD	; 253
    1670:	28 83       	st	Y, r18
    1672:	21 96       	adiw	r28, 0x01	; 1
    1674:	8b 2f       	mov	r24, r27
    1676:	99 27       	eor	r25, r25
    1678:	aa 27       	eor	r26, r26
    167a:	bb 27       	eor	r27, r27
    167c:	88 83       	st	Y, r24
    167e:	cd 51       	subi	r28, 0x1D	; 29
    1680:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    1682:	2a 89       	ldd	r18, Y+18	; 0x12
    1684:	3b 89       	ldd	r19, Y+19	; 0x13
    1686:	4c 89       	ldd	r20, Y+20	; 0x14
    1688:	5d 89       	ldd	r21, Y+21	; 0x15
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	01 e0       	ldi	r16, 0x01	; 1
    168e:	0e 94 77 07 	call	0xeee	; 0xeee <disk_write>
			fs->fsi_flag = 0;
    1692:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	40 e0       	ldi	r20, 0x00	; 0
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	0e 94 ef 07 	call	0xfde	; 0xfde <disk_ioctl>
    16a0:	81 11       	cpse	r24, r1
    16a2:	81 e0       	ldi	r24, 0x01	; 1
			res = FR_DISK_ERR;
	}

	return res;
}
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	0f 91       	pop	r16
    16aa:	08 95       	ret

000016ac <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    16ac:	7f 92       	push	r7
    16ae:	8f 92       	push	r8
    16b0:	9f 92       	push	r9
    16b2:	af 92       	push	r10
    16b4:	bf 92       	push	r11
    16b6:	cf 92       	push	r12
    16b8:	df 92       	push	r13
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	4c 01       	movw	r8, r24
    16c8:	7a 01       	movw	r14, r20
    16ca:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
    16cc:	42 30       	cpi	r20, 0x02	; 2
    16ce:	51 05       	cpc	r21, r1
    16d0:	61 05       	cpc	r22, r1
    16d2:	71 05       	cpc	r23, r1
    16d4:	08 f4       	brcc	.+2      	; 0x16d8 <get_fat+0x2c>
    16d6:	bb c0       	rjmp	.+374    	; 0x184e <get_fat+0x1a2>
    16d8:	f4 01       	movw	r30, r8
    16da:	82 8d       	ldd	r24, Z+26	; 0x1a
    16dc:	93 8d       	ldd	r25, Z+27	; 0x1b
    16de:	a4 8d       	ldd	r26, Z+28	; 0x1c
    16e0:	b5 8d       	ldd	r27, Z+29	; 0x1d
    16e2:	48 17       	cp	r20, r24
    16e4:	59 07       	cpc	r21, r25
    16e6:	6a 07       	cpc	r22, r26
    16e8:	7b 07       	cpc	r23, r27
    16ea:	08 f0       	brcs	.+2      	; 0x16ee <get_fat+0x42>
    16ec:	b0 c0       	rjmp	.+352    	; 0x184e <get_fat+0x1a2>
		return 1;

	fsect = fs->fatbase;
    16ee:	a6 8c       	ldd	r10, Z+30	; 0x1e
    16f0:	b7 8c       	ldd	r11, Z+31	; 0x1f
    16f2:	c0 a0       	ldd	r12, Z+32	; 0x20
    16f4:	d1 a0       	ldd	r13, Z+33	; 0x21
	switch (fs->fs_type) {
    16f6:	80 81       	ld	r24, Z
    16f8:	82 30       	cpi	r24, 0x02	; 2
    16fa:	09 f4       	brne	.+2      	; 0x16fe <get_fat+0x52>
    16fc:	4d c0       	rjmp	.+154    	; 0x1798 <get_fat+0xec>
    16fe:	83 30       	cpi	r24, 0x03	; 3
    1700:	09 f4       	brne	.+2      	; 0x1704 <get_fat+0x58>
    1702:	68 c0       	rjmp	.+208    	; 0x17d4 <get_fat+0x128>
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	09 f0       	breq	.+2      	; 0x170a <get_fat+0x5e>
    1708:	a7 c0       	rjmp	.+334    	; 0x1858 <get_fat+0x1ac>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
    170a:	ea 01       	movw	r28, r20
    170c:	d6 95       	lsr	r29
    170e:	c7 95       	ror	r28
    1710:	ce 0d       	add	r28, r14
    1712:	df 1d       	adc	r29, r15
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    1714:	ae 01       	movw	r20, r28
    1716:	45 2f       	mov	r20, r21
    1718:	55 27       	eor	r21, r21
    171a:	46 95       	lsr	r20
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	4a 0d       	add	r20, r10
    1722:	5b 1d       	adc	r21, r11
    1724:	6c 1d       	adc	r22, r12
    1726:	7d 1d       	adc	r23, r13
    1728:	c4 01       	movw	r24, r8
    172a:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    172e:	88 23       	and	r24, r24
    1730:	09 f0       	breq	.+2      	; 0x1734 <get_fat+0x88>
    1732:	92 c0       	rjmp	.+292    	; 0x1858 <get_fat+0x1ac>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    1734:	fe 01       	movw	r30, r28
    1736:	f1 70       	andi	r31, 0x01	; 1
    1738:	e8 0d       	add	r30, r8
    173a:	f9 1d       	adc	r31, r9
    173c:	76 a4       	ldd	r7, Z+46	; 0x2e
    173e:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    1740:	ae 01       	movw	r20, r28
    1742:	45 2f       	mov	r20, r21
    1744:	55 27       	eor	r21, r21
    1746:	46 95       	lsr	r20
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	4a 0d       	add	r20, r10
    174e:	5b 1d       	adc	r21, r11
    1750:	6c 1d       	adc	r22, r12
    1752:	7d 1d       	adc	r23, r13
    1754:	c4 01       	movw	r24, r8
    1756:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    175a:	88 23       	and	r24, r24
    175c:	09 f0       	breq	.+2      	; 0x1760 <get_fat+0xb4>
    175e:	7c c0       	rjmp	.+248    	; 0x1858 <get_fat+0x1ac>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    1760:	67 2d       	mov	r22, r7
    1762:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    1764:	d1 70       	andi	r29, 0x01	; 1
    1766:	c8 0d       	add	r28, r8
    1768:	d9 1d       	adc	r29, r9
    176a:	9e a5       	ldd	r25, Y+46	; 0x2e
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	68 2b       	or	r22, r24
    1770:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1772:	c7 01       	movw	r24, r14
    1774:	81 70       	andi	r24, 0x01	; 1
    1776:	90 70       	andi	r25, 0x00	; 0
    1778:	89 2b       	or	r24, r25
    177a:	39 f0       	breq	.+14     	; 0x178a <get_fat+0xde>
    177c:	94 e0       	ldi	r25, 0x04	; 4
    177e:	76 95       	lsr	r23
    1780:	67 95       	ror	r22
    1782:	9a 95       	dec	r25
    1784:	e1 f7       	brne	.-8      	; 0x177e <get_fat+0xd2>
    1786:	9b 01       	movw	r18, r22
    1788:	22 c0       	rjmp	.+68     	; 0x17ce <get_fat+0x122>
    178a:	9b 01       	movw	r18, r22
    178c:	40 e0       	ldi	r20, 0x00	; 0
    178e:	50 e0       	ldi	r21, 0x00	; 0
    1790:	3f 70       	andi	r19, 0x0F	; 15
    1792:	40 70       	andi	r20, 0x00	; 0
    1794:	50 70       	andi	r21, 0x00	; 0
    1796:	64 c0       	rjmp	.+200    	; 0x1860 <get_fat+0x1b4>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    1798:	45 2f       	mov	r20, r21
    179a:	56 2f       	mov	r21, r22
    179c:	67 2f       	mov	r22, r23
    179e:	77 27       	eor	r23, r23
    17a0:	4a 0d       	add	r20, r10
    17a2:	5b 1d       	adc	r21, r11
    17a4:	6c 1d       	adc	r22, r12
    17a6:	7d 1d       	adc	r23, r13
    17a8:	c4 01       	movw	r24, r8
    17aa:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    17ae:	88 23       	and	r24, r24
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <get_fat+0x108>
    17b2:	52 c0       	rjmp	.+164    	; 0x1858 <get_fat+0x1ac>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    17b4:	f7 01       	movw	r30, r14
    17b6:	ee 0f       	add	r30, r30
    17b8:	ff 1f       	adc	r31, r31
    17ba:	f1 70       	andi	r31, 0x01	; 1
    17bc:	e8 0d       	add	r30, r8
    17be:	f9 1d       	adc	r31, r9
    17c0:	97 a5       	ldd	r25, Z+47	; 0x2f
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	26 a5       	ldd	r18, Z+46	; 0x2e
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	82 2b       	or	r24, r18
    17ca:	93 2b       	or	r25, r19
    17cc:	9c 01       	movw	r18, r24
    17ce:	40 e0       	ldi	r20, 0x00	; 0
    17d0:	50 e0       	ldi	r21, 0x00	; 0
    17d2:	46 c0       	rjmp	.+140    	; 0x1860 <get_fat+0x1b4>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    17d4:	b7 e0       	ldi	r27, 0x07	; 7
    17d6:	76 95       	lsr	r23
    17d8:	67 95       	ror	r22
    17da:	57 95       	ror	r21
    17dc:	47 95       	ror	r20
    17de:	ba 95       	dec	r27
    17e0:	d1 f7       	brne	.-12     	; 0x17d6 <get_fat+0x12a>
    17e2:	4a 0d       	add	r20, r10
    17e4:	5b 1d       	adc	r21, r11
    17e6:	6c 1d       	adc	r22, r12
    17e8:	7d 1d       	adc	r23, r13
    17ea:	c4 01       	movw	r24, r8
    17ec:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    17f0:	88 23       	and	r24, r24
    17f2:	91 f5       	brne	.+100    	; 0x1858 <get_fat+0x1ac>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    17f4:	f7 01       	movw	r30, r14
    17f6:	ee 0f       	add	r30, r30
    17f8:	ff 1f       	adc	r31, r31
    17fa:	ee 0f       	add	r30, r30
    17fc:	ff 1f       	adc	r31, r31
    17fe:	f1 70       	andi	r31, 0x01	; 1
    1800:	e8 0d       	add	r30, r8
    1802:	f9 1d       	adc	r31, r9
    1804:	81 a9       	ldd	r24, Z+49	; 0x31
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a0 e0       	ldi	r26, 0x00	; 0
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	58 2f       	mov	r21, r24
    180e:	44 27       	eor	r20, r20
    1810:	33 27       	eor	r19, r19
    1812:	22 27       	eor	r18, r18
    1814:	80 a9       	ldd	r24, Z+48	; 0x30
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a0 e0       	ldi	r26, 0x00	; 0
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	dc 01       	movw	r26, r24
    181e:	99 27       	eor	r25, r25
    1820:	88 27       	eor	r24, r24
    1822:	28 2b       	or	r18, r24
    1824:	39 2b       	or	r19, r25
    1826:	4a 2b       	or	r20, r26
    1828:	5b 2b       	or	r21, r27
    182a:	86 a5       	ldd	r24, Z+46	; 0x2e
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	a0 e0       	ldi	r26, 0x00	; 0
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	28 2b       	or	r18, r24
    1834:	39 2b       	or	r19, r25
    1836:	4a 2b       	or	r20, r26
    1838:	5b 2b       	or	r21, r27
    183a:	97 a5       	ldd	r25, Z+47	; 0x2f
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	a0 e0       	ldi	r26, 0x00	; 0
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	28 2b       	or	r18, r24
    1844:	39 2b       	or	r19, r25
    1846:	4a 2b       	or	r20, r26
    1848:	5b 2b       	or	r21, r27
    184a:	5f 70       	andi	r21, 0x0F	; 15
    184c:	09 c0       	rjmp	.+18     	; 0x1860 <get_fat+0x1b4>
    184e:	21 e0       	ldi	r18, 0x01	; 1
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	04 c0       	rjmp	.+8      	; 0x1860 <get_fat+0x1b4>
    1858:	2f ef       	ldi	r18, 0xFF	; 255
    185a:	3f ef       	ldi	r19, 0xFF	; 255
    185c:	4f ef       	ldi	r20, 0xFF	; 255
    185e:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
    1860:	b9 01       	movw	r22, r18
    1862:	ca 01       	movw	r24, r20
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	ff 90       	pop	r15
    186e:	ef 90       	pop	r14
    1870:	df 90       	pop	r13
    1872:	cf 90       	pop	r12
    1874:	bf 90       	pop	r11
    1876:	af 90       	pop	r10
    1878:	9f 90       	pop	r9
    187a:	8f 90       	pop	r8
    187c:	7f 90       	pop	r7
    187e:	08 95       	ret

00001880 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1880:	2f 92       	push	r2
    1882:	3f 92       	push	r3
    1884:	4f 92       	push	r4
    1886:	5f 92       	push	r5
    1888:	6f 92       	push	r6
    188a:	7f 92       	push	r7
    188c:	8f 92       	push	r8
    188e:	9f 92       	push	r9
    1890:	af 92       	push	r10
    1892:	bf 92       	push	r11
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	3c 01       	movw	r6, r24
    18a6:	6a 01       	movw	r12, r20
    18a8:	7b 01       	movw	r14, r22
    18aa:	48 01       	movw	r8, r16
    18ac:	59 01       	movw	r10, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
    18ae:	42 30       	cpi	r20, 0x02	; 2
    18b0:	51 05       	cpc	r21, r1
    18b2:	61 05       	cpc	r22, r1
    18b4:	71 05       	cpc	r23, r1
    18b6:	08 f4       	brcc	.+2      	; 0x18ba <put_fat+0x3a>
    18b8:	ba c0       	rjmp	.+372    	; 0x1a2e <put_fat+0x1ae>
    18ba:	f3 01       	movw	r30, r6
    18bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    18be:	93 8d       	ldd	r25, Z+27	; 0x1b
    18c0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    18c2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    18c4:	48 17       	cp	r20, r24
    18c6:	59 07       	cpc	r21, r25
    18c8:	6a 07       	cpc	r22, r26
    18ca:	7b 07       	cpc	r23, r27
    18cc:	08 f0       	brcs	.+2      	; 0x18d0 <put_fat+0x50>
    18ce:	af c0       	rjmp	.+350    	; 0x1a2e <put_fat+0x1ae>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
    18d0:	26 8c       	ldd	r2, Z+30	; 0x1e
    18d2:	37 8c       	ldd	r3, Z+31	; 0x1f
    18d4:	40 a0       	ldd	r4, Z+32	; 0x20
    18d6:	51 a0       	ldd	r5, Z+33	; 0x21
		switch (fs->fs_type) {
    18d8:	80 81       	ld	r24, Z
    18da:	82 30       	cpi	r24, 0x02	; 2
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <put_fat+0x60>
    18de:	64 c0       	rjmp	.+200    	; 0x19a8 <put_fat+0x128>
    18e0:	83 30       	cpi	r24, 0x03	; 3
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <put_fat+0x66>
    18e4:	7a c0       	rjmp	.+244    	; 0x19da <put_fat+0x15a>
    18e6:	81 30       	cpi	r24, 0x01	; 1
    18e8:	11 f0       	breq	.+4      	; 0x18ee <put_fat+0x6e>
    18ea:	22 e0       	ldi	r18, 0x02	; 2
    18ec:	9c c0       	rjmp	.+312    	; 0x1a26 <put_fat+0x1a6>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    18ee:	ea 01       	movw	r28, r20
    18f0:	d6 95       	lsr	r29
    18f2:	c7 95       	ror	r28
    18f4:	c4 0f       	add	r28, r20
    18f6:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
    18f8:	ae 01       	movw	r20, r28
    18fa:	45 2f       	mov	r20, r21
    18fc:	55 27       	eor	r21, r21
    18fe:	46 95       	lsr	r20
    1900:	60 e0       	ldi	r22, 0x00	; 0
    1902:	70 e0       	ldi	r23, 0x00	; 0
    1904:	42 0d       	add	r20, r2
    1906:	53 1d       	adc	r21, r3
    1908:	64 1d       	adc	r22, r4
    190a:	75 1d       	adc	r23, r5
    190c:	c3 01       	movw	r24, r6
    190e:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    1912:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1914:	88 23       	and	r24, r24
    1916:	09 f0       	breq	.+2      	; 0x191a <put_fat+0x9a>
    1918:	86 c0       	rjmp	.+268    	; 0x1a26 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    191a:	de 01       	movw	r26, r28
    191c:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    191e:	86 01       	movw	r16, r12
    1920:	01 70       	andi	r16, 0x01	; 1
    1922:	10 70       	andi	r17, 0x00	; 0
    1924:	01 15       	cp	r16, r1
    1926:	11 05       	cpc	r17, r1
    1928:	51 f0       	breq	.+20     	; 0x193e <put_fat+0xbe>
    192a:	f3 01       	movw	r30, r6
    192c:	ea 0f       	add	r30, r26
    192e:	fb 1f       	adc	r31, r27
    1930:	86 a5       	ldd	r24, Z+46	; 0x2e
    1932:	8f 70       	andi	r24, 0x0F	; 15
    1934:	98 2d       	mov	r25, r8
    1936:	92 95       	swap	r25
    1938:	90 7f       	andi	r25, 0xF0	; 240
    193a:	98 2b       	or	r25, r24
    193c:	01 c0       	rjmp	.+2      	; 0x1940 <put_fat+0xc0>
    193e:	98 2d       	mov	r25, r8
    1940:	a6 0d       	add	r26, r6
    1942:	b7 1d       	adc	r27, r7
    1944:	9e 96       	adiw	r26, 0x2e	; 46
    1946:	9c 93       	st	X, r25
			bc++;
    1948:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	f3 01       	movw	r30, r6
    194e:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
    1950:	ae 01       	movw	r20, r28
    1952:	45 2f       	mov	r20, r21
    1954:	55 27       	eor	r21, r21
    1956:	46 95       	lsr	r20
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	42 0d       	add	r20, r2
    195e:	53 1d       	adc	r21, r3
    1960:	64 1d       	adc	r22, r4
    1962:	75 1d       	adc	r23, r5
    1964:	c3 01       	movw	r24, r6
    1966:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    196a:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    196c:	88 23       	and	r24, r24
    196e:	09 f0       	breq	.+2      	; 0x1972 <put_fat+0xf2>
    1970:	5a c0       	rjmp	.+180    	; 0x1a26 <put_fat+0x1a6>
			p = &fs->win[bc & (SS(fs) - 1)];
    1972:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1974:	01 2b       	or	r16, r17
    1976:	49 f0       	breq	.+18     	; 0x198a <put_fat+0x10a>
    1978:	34 e0       	ldi	r19, 0x04	; 4
    197a:	b6 94       	lsr	r11
    197c:	a7 94       	ror	r10
    197e:	97 94       	ror	r9
    1980:	87 94       	ror	r8
    1982:	3a 95       	dec	r19
    1984:	d1 f7       	brne	.-12     	; 0x197a <put_fat+0xfa>
    1986:	48 2d       	mov	r20, r8
    1988:	0b c0       	rjmp	.+22     	; 0x19a0 <put_fat+0x120>
    198a:	f3 01       	movw	r30, r6
    198c:	ec 0f       	add	r30, r28
    198e:	fd 1f       	adc	r31, r29
    1990:	46 a5       	ldd	r20, Z+46	; 0x2e
    1992:	40 7f       	andi	r20, 0xF0	; 240
    1994:	bb 27       	eor	r27, r27
    1996:	ab 2d       	mov	r26, r11
    1998:	9a 2d       	mov	r25, r10
    199a:	89 2d       	mov	r24, r9
    199c:	8f 70       	andi	r24, 0x0F	; 15
    199e:	48 2b       	or	r20, r24
    19a0:	c6 0d       	add	r28, r6
    19a2:	d7 1d       	adc	r29, r7
    19a4:	4e a7       	std	Y+46, r20	; 0x2e
    19a6:	3f c0       	rjmp	.+126    	; 0x1a26 <put_fat+0x1a6>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
    19a8:	45 2f       	mov	r20, r21
    19aa:	56 2f       	mov	r21, r22
    19ac:	67 2f       	mov	r22, r23
    19ae:	77 27       	eor	r23, r23
    19b0:	42 0d       	add	r20, r2
    19b2:	53 1d       	adc	r21, r3
    19b4:	64 1d       	adc	r22, r4
    19b6:	75 1d       	adc	r23, r5
    19b8:	c3 01       	movw	r24, r6
    19ba:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    19be:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    19c0:	88 23       	and	r24, r24
    19c2:	89 f5       	brne	.+98     	; 0x1a26 <put_fat+0x1a6>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
    19c4:	f6 01       	movw	r30, r12
    19c6:	ee 0f       	add	r30, r30
    19c8:	ff 1f       	adc	r31, r31
    19ca:	f1 70       	andi	r31, 0x01	; 1
    19cc:	e6 0d       	add	r30, r6
    19ce:	f7 1d       	adc	r31, r7
    19d0:	86 a6       	std	Z+46, r8	; 0x2e
    19d2:	89 2d       	mov	r24, r9
    19d4:	99 27       	eor	r25, r25
    19d6:	87 a7       	std	Z+47, r24	; 0x2f
    19d8:	26 c0       	rjmp	.+76     	; 0x1a26 <put_fat+0x1a6>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
    19da:	b7 e0       	ldi	r27, 0x07	; 7
    19dc:	76 95       	lsr	r23
    19de:	67 95       	ror	r22
    19e0:	57 95       	ror	r21
    19e2:	47 95       	ror	r20
    19e4:	ba 95       	dec	r27
    19e6:	d1 f7       	brne	.-12     	; 0x19dc <put_fat+0x15c>
    19e8:	42 0d       	add	r20, r2
    19ea:	53 1d       	adc	r21, r3
    19ec:	64 1d       	adc	r22, r4
    19ee:	75 1d       	adc	r23, r5
    19f0:	c3 01       	movw	r24, r6
    19f2:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    19f6:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    19f8:	88 23       	and	r24, r24
    19fa:	a9 f4       	brne	.+42     	; 0x1a26 <put_fat+0x1a6>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
    19fc:	f6 01       	movw	r30, r12
    19fe:	ee 0f       	add	r30, r30
    1a00:	ff 1f       	adc	r31, r31
    1a02:	ee 0f       	add	r30, r30
    1a04:	ff 1f       	adc	r31, r31
    1a06:	f1 70       	andi	r31, 0x01	; 1
    1a08:	e6 0d       	add	r30, r6
    1a0a:	f7 1d       	adc	r31, r7
    1a0c:	86 a6       	std	Z+46, r8	; 0x2e
    1a0e:	89 2d       	mov	r24, r9
    1a10:	99 27       	eor	r25, r25
    1a12:	87 a7       	std	Z+47, r24	; 0x2f
    1a14:	c5 01       	movw	r24, r10
    1a16:	aa 27       	eor	r26, r26
    1a18:	bb 27       	eor	r27, r27
    1a1a:	80 ab       	std	Z+48, r24	; 0x30
    1a1c:	8b 2d       	mov	r24, r11
    1a1e:	99 27       	eor	r25, r25
    1a20:	aa 27       	eor	r26, r26
    1a22:	bb 27       	eor	r27, r27
    1a24:	81 ab       	std	Z+49, r24	; 0x31
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	f3 01       	movw	r30, r6
    1a2a:	84 83       	std	Z+4, r24	; 0x04
    1a2c:	01 c0       	rjmp	.+2      	; 0x1a30 <put_fat+0x1b0>
    1a2e:	22 e0       	ldi	r18, 0x02	; 2
	}

	return res;
}
    1a30:	82 2f       	mov	r24, r18
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	ff 90       	pop	r15
    1a3c:	ef 90       	pop	r14
    1a3e:	df 90       	pop	r13
    1a40:	cf 90       	pop	r12
    1a42:	bf 90       	pop	r11
    1a44:	af 90       	pop	r10
    1a46:	9f 90       	pop	r9
    1a48:	8f 90       	pop	r8
    1a4a:	7f 90       	pop	r7
    1a4c:	6f 90       	pop	r6
    1a4e:	5f 90       	pop	r5
    1a50:	4f 90       	pop	r4
    1a52:	3f 90       	pop	r3
    1a54:	2f 90       	pop	r2
    1a56:	08 95       	ret

00001a58 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    1a58:	9f 92       	push	r9
    1a5a:	af 92       	push	r10
    1a5c:	bf 92       	push	r11
    1a5e:	cf 92       	push	r12
    1a60:	df 92       	push	r13
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	ec 01       	movw	r28, r24
    1a70:	7a 01       	movw	r14, r20
    1a72:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    1a74:	42 30       	cpi	r20, 0x02	; 2
    1a76:	51 05       	cpc	r21, r1
    1a78:	61 05       	cpc	r22, r1
    1a7a:	71 05       	cpc	r23, r1
    1a7c:	08 f4       	brcc	.+2      	; 0x1a80 <remove_chain+0x28>
    1a7e:	58 c0       	rjmp	.+176    	; 0x1b30 <remove_chain+0xd8>
    1a80:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a82:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a84:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1a86:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1a88:	48 17       	cp	r20, r24
    1a8a:	59 07       	cpc	r21, r25
    1a8c:	6a 07       	cpc	r22, r26
    1a8e:	7b 07       	cpc	r23, r27
    1a90:	08 f4       	brcc	.+2      	; 0x1a94 <remove_chain+0x3c>
    1a92:	41 c0       	rjmp	.+130    	; 0x1b16 <remove_chain+0xbe>
    1a94:	4d c0       	rjmp	.+154    	; 0x1b30 <remove_chain+0xd8>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1a96:	ce 01       	movw	r24, r28
    1a98:	b8 01       	movw	r22, r16
    1a9a:	a7 01       	movw	r20, r14
    1a9c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <get_fat>
    1aa0:	5b 01       	movw	r10, r22
    1aa2:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    1aa4:	61 15       	cp	r22, r1
    1aa6:	71 05       	cpc	r23, r1
    1aa8:	81 05       	cpc	r24, r1
    1aaa:	91 05       	cpc	r25, r1
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <remove_chain+0x58>
    1aae:	42 c0       	rjmp	.+132    	; 0x1b34 <remove_chain+0xdc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	a8 16       	cp	r10, r24
    1ab4:	b1 04       	cpc	r11, r1
    1ab6:	c1 04       	cpc	r12, r1
    1ab8:	d1 04       	cpc	r13, r1
    1aba:	d1 f1       	breq	.+116    	; 0x1b30 <remove_chain+0xd8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1abc:	2f ef       	ldi	r18, 0xFF	; 255
    1abe:	a2 16       	cp	r10, r18
    1ac0:	2f ef       	ldi	r18, 0xFF	; 255
    1ac2:	b2 06       	cpc	r11, r18
    1ac4:	2f ef       	ldi	r18, 0xFF	; 255
    1ac6:	c2 06       	cpc	r12, r18
    1ac8:	2f ef       	ldi	r18, 0xFF	; 255
    1aca:	d2 06       	cpc	r13, r18
    1acc:	11 f4       	brne	.+4      	; 0x1ad2 <remove_chain+0x7a>
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	32 c0       	rjmp	.+100    	; 0x1b36 <remove_chain+0xde>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	b8 01       	movw	r22, r16
    1ad6:	a7 01       	movw	r20, r14
    1ad8:	00 e0       	ldi	r16, 0x00	; 0
    1ada:	10 e0       	ldi	r17, 0x00	; 0
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	0e 94 40 0c 	call	0x1880	; 0x1880 <put_fat>
			if (res != FR_OK) break;
    1ae4:	88 23       	and	r24, r24
    1ae6:	39 f5       	brne	.+78     	; 0x1b36 <remove_chain+0xde>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    1ae8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1aea:	9f 85       	ldd	r25, Y+15	; 0x0f
    1aec:	a8 89       	ldd	r26, Y+16	; 0x10
    1aee:	b9 89       	ldd	r27, Y+17	; 0x11
    1af0:	8f 3f       	cpi	r24, 0xFF	; 255
    1af2:	2f ef       	ldi	r18, 0xFF	; 255
    1af4:	92 07       	cpc	r25, r18
    1af6:	2f ef       	ldi	r18, 0xFF	; 255
    1af8:	a2 07       	cpc	r26, r18
    1afa:	2f ef       	ldi	r18, 0xFF	; 255
    1afc:	b2 07       	cpc	r27, r18
    1afe:	41 f0       	breq	.+16     	; 0x1b10 <remove_chain+0xb8>
				fs->free_clust++;
    1b00:	01 96       	adiw	r24, 0x01	; 1
    1b02:	a1 1d       	adc	r26, r1
    1b04:	b1 1d       	adc	r27, r1
    1b06:	8e 87       	std	Y+14, r24	; 0x0e
    1b08:	9f 87       	std	Y+15, r25	; 0x0f
    1b0a:	a8 8b       	std	Y+16, r26	; 0x10
    1b0c:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    1b0e:	9d 82       	std	Y+5, r9	; 0x05
    1b10:	86 01       	movw	r16, r12
    1b12:	75 01       	movw	r14, r10
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <remove_chain+0xc2>
    1b16:	99 24       	eor	r9, r9
    1b18:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    1b1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b1c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b1e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1b20:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1b22:	e8 16       	cp	r14, r24
    1b24:	f9 06       	cpc	r15, r25
    1b26:	0a 07       	cpc	r16, r26
    1b28:	1b 07       	cpc	r17, r27
    1b2a:	08 f4       	brcc	.+2      	; 0x1b2e <remove_chain+0xd6>
    1b2c:	b4 cf       	rjmp	.-152    	; 0x1a96 <remove_chain+0x3e>
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <remove_chain+0xdc>
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	01 c0       	rjmp	.+2      	; 0x1b36 <remove_chain+0xde>
    1b34:	80 e0       	ldi	r24, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	1f 91       	pop	r17
    1b3c:	0f 91       	pop	r16
    1b3e:	ff 90       	pop	r15
    1b40:	ef 90       	pop	r14
    1b42:	df 90       	pop	r13
    1b44:	cf 90       	pop	r12
    1b46:	bf 90       	pop	r11
    1b48:	af 90       	pop	r10
    1b4a:	9f 90       	pop	r9
    1b4c:	08 95       	ret

00001b4e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1b4e:	2f 92       	push	r2
    1b50:	3f 92       	push	r3
    1b52:	4f 92       	push	r4
    1b54:	5f 92       	push	r5
    1b56:	6f 92       	push	r6
    1b58:	7f 92       	push	r7
    1b5a:	8f 92       	push	r8
    1b5c:	9f 92       	push	r9
    1b5e:	af 92       	push	r10
    1b60:	bf 92       	push	r11
    1b62:	cf 92       	push	r12
    1b64:	df 92       	push	r13
    1b66:	ef 92       	push	r14
    1b68:	ff 92       	push	r15
    1b6a:	0f 93       	push	r16
    1b6c:	1f 93       	push	r17
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <create_chain+0x26>
    1b74:	0f 92       	push	r0
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	1c 01       	movw	r2, r24
    1b7c:	2a 01       	movw	r4, r20
    1b7e:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
    1b80:	dc 01       	movw	r26, r24
    1b82:	5a 96       	adiw	r26, 0x1a	; 26
    1b84:	8d 91       	ld	r24, X+
    1b86:	9d 91       	ld	r25, X+
    1b88:	0d 90       	ld	r0, X+
    1b8a:	bc 91       	ld	r27, X
    1b8c:	a0 2d       	mov	r26, r0
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	ab 83       	std	Y+3, r26	; 0x03
    1b94:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
    1b96:	41 15       	cp	r20, r1
    1b98:	51 05       	cpc	r21, r1
    1b9a:	61 05       	cpc	r22, r1
    1b9c:	71 05       	cpc	r23, r1
    1b9e:	81 f4       	brne	.+32     	; 0x1bc0 <create_chain+0x72>
		scl = fs->last_clust;			/* Get suggested start point */
    1ba0:	f1 01       	movw	r30, r2
    1ba2:	82 84       	ldd	r8, Z+10	; 0x0a
    1ba4:	93 84       	ldd	r9, Z+11	; 0x0b
    1ba6:	a4 84       	ldd	r10, Z+12	; 0x0c
    1ba8:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
    1baa:	81 14       	cp	r8, r1
    1bac:	91 04       	cpc	r9, r1
    1bae:	a1 04       	cpc	r10, r1
    1bb0:	b1 04       	cpc	r11, r1
    1bb2:	11 f1       	breq	.+68     	; 0x1bf8 <create_chain+0xaa>
    1bb4:	88 16       	cp	r8, r24
    1bb6:	99 06       	cpc	r9, r25
    1bb8:	aa 06       	cpc	r10, r26
    1bba:	bb 06       	cpc	r11, r27
    1bbc:	e8 f4       	brcc	.+58     	; 0x1bf8 <create_chain+0xaa>
    1bbe:	21 c0       	rjmp	.+66     	; 0x1c02 <create_chain+0xb4>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1bc0:	c1 01       	movw	r24, r2
    1bc2:	0e 94 56 0b 	call	0x16ac	; 0x16ac <get_fat>
    1bc6:	9b 01       	movw	r18, r22
    1bc8:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1bca:	62 30       	cpi	r22, 0x02	; 2
    1bcc:	71 05       	cpc	r23, r1
    1bce:	81 05       	cpc	r24, r1
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	28 f4       	brcc	.+10     	; 0x1bde <create_chain+0x90>
    1bd4:	21 e0       	ldi	r18, 0x01	; 1
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	50 e0       	ldi	r21, 0x00	; 0
    1bdc:	93 c0       	rjmp	.+294    	; 0x1d04 <create_chain+0x1b6>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	9a 81       	ldd	r25, Y+2	; 0x02
    1be2:	ab 81       	ldd	r26, Y+3	; 0x03
    1be4:	bc 81       	ldd	r27, Y+4	; 0x04
    1be6:	28 17       	cp	r18, r24
    1be8:	39 07       	cpc	r19, r25
    1bea:	4a 07       	cpc	r20, r26
    1bec:	5b 07       	cpc	r21, r27
    1bee:	08 f4       	brcc	.+2      	; 0x1bf2 <create_chain+0xa4>
    1bf0:	89 c0       	rjmp	.+274    	; 0x1d04 <create_chain+0x1b6>
    1bf2:	53 01       	movw	r10, r6
    1bf4:	42 01       	movw	r8, r4
    1bf6:	05 c0       	rjmp	.+10     	; 0x1c02 <create_chain+0xb4>
    1bf8:	a1 e0       	ldi	r26, 0x01	; 1
    1bfa:	8a 2e       	mov	r8, r26
    1bfc:	91 2c       	mov	r9, r1
    1bfe:	a1 2c       	mov	r10, r1
    1c00:	b1 2c       	mov	r11, r1
    1c02:	75 01       	movw	r14, r10
    1c04:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1c06:	08 94       	sec
    1c08:	c1 1c       	adc	r12, r1
    1c0a:	d1 1c       	adc	r13, r1
    1c0c:	e1 1c       	adc	r14, r1
    1c0e:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	9a 81       	ldd	r25, Y+2	; 0x02
    1c14:	ab 81       	ldd	r26, Y+3	; 0x03
    1c16:	bc 81       	ldd	r27, Y+4	; 0x04
    1c18:	c8 16       	cp	r12, r24
    1c1a:	d9 06       	cpc	r13, r25
    1c1c:	ea 06       	cpc	r14, r26
    1c1e:	fb 06       	cpc	r15, r27
    1c20:	60 f0       	brcs	.+24     	; 0x1c3a <create_chain+0xec>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    1c22:	92 e0       	ldi	r25, 0x02	; 2
    1c24:	89 16       	cp	r8, r25
    1c26:	91 04       	cpc	r9, r1
    1c28:	a1 04       	cpc	r10, r1
    1c2a:	b1 04       	cpc	r11, r1
    1c2c:	08 f4       	brcc	.+2      	; 0x1c30 <create_chain+0xe2>
    1c2e:	61 c0       	rjmp	.+194    	; 0x1cf2 <create_chain+0x1a4>
    1c30:	f2 e0       	ldi	r31, 0x02	; 2
    1c32:	cf 2e       	mov	r12, r31
    1c34:	d1 2c       	mov	r13, r1
    1c36:	e1 2c       	mov	r14, r1
    1c38:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1c3a:	c1 01       	movw	r24, r2
    1c3c:	b7 01       	movw	r22, r14
    1c3e:	a6 01       	movw	r20, r12
    1c40:	0e 94 56 0b 	call	0x16ac	; 0x16ac <get_fat>
    1c44:	9b 01       	movw	r18, r22
    1c46:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    1c48:	61 15       	cp	r22, r1
    1c4a:	71 05       	cpc	r23, r1
    1c4c:	81 05       	cpc	r24, r1
    1c4e:	91 05       	cpc	r25, r1
    1c50:	a9 f0       	breq	.+42     	; 0x1c7c <create_chain+0x12e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    1c52:	6f 3f       	cpi	r22, 0xFF	; 255
    1c54:	af ef       	ldi	r26, 0xFF	; 255
    1c56:	7a 07       	cpc	r23, r26
    1c58:	af ef       	ldi	r26, 0xFF	; 255
    1c5a:	8a 07       	cpc	r24, r26
    1c5c:	af ef       	ldi	r26, 0xFF	; 255
    1c5e:	9a 07       	cpc	r25, r26
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <create_chain+0x116>
    1c62:	50 c0       	rjmp	.+160    	; 0x1d04 <create_chain+0x1b6>
    1c64:	61 30       	cpi	r22, 0x01	; 1
    1c66:	71 05       	cpc	r23, r1
    1c68:	81 05       	cpc	r24, r1
    1c6a:	91 05       	cpc	r25, r1
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <create_chain+0x122>
    1c6e:	4a c0       	rjmp	.+148    	; 0x1d04 <create_chain+0x1b6>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    1c70:	c8 14       	cp	r12, r8
    1c72:	d9 04       	cpc	r13, r9
    1c74:	ea 04       	cpc	r14, r10
    1c76:	fb 04       	cpc	r15, r11
    1c78:	31 f6       	brne	.-116    	; 0x1c06 <create_chain+0xb8>
    1c7a:	3b c0       	rjmp	.+118    	; 0x1cf2 <create_chain+0x1a4>
    1c7c:	bc 2c       	mov	r11, r12
    1c7e:	ad 2c       	mov	r10, r13
    1c80:	9e 2c       	mov	r9, r14
    1c82:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    1c84:	c1 01       	movw	r24, r2
    1c86:	a6 01       	movw	r20, r12
    1c88:	b7 01       	movw	r22, r14
    1c8a:	0f ef       	ldi	r16, 0xFF	; 255
    1c8c:	1f ef       	ldi	r17, 0xFF	; 255
    1c8e:	2f ef       	ldi	r18, 0xFF	; 255
    1c90:	3f e0       	ldi	r19, 0x0F	; 15
    1c92:	0e 94 40 0c 	call	0x1880	; 0x1880 <put_fat>
    1c96:	88 23       	and	r24, r24
    1c98:	89 f5       	brne	.+98     	; 0x1cfc <create_chain+0x1ae>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    1c9a:	41 14       	cp	r4, r1
    1c9c:	51 04       	cpc	r5, r1
    1c9e:	61 04       	cpc	r6, r1
    1ca0:	71 04       	cpc	r7, r1
    1ca2:	49 f0       	breq	.+18     	; 0x1cb6 <create_chain+0x168>
		if (put_fat(fs, clst, ncl))
    1ca4:	c1 01       	movw	r24, r2
    1ca6:	b3 01       	movw	r22, r6
    1ca8:	a2 01       	movw	r20, r4
    1caa:	86 01       	movw	r16, r12
    1cac:	97 01       	movw	r18, r14
    1cae:	0e 94 40 0c 	call	0x1880	; 0x1880 <put_fat>
    1cb2:	88 23       	and	r24, r24
    1cb4:	19 f5       	brne	.+70     	; 0x1cfc <create_chain+0x1ae>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    1cb6:	f1 01       	movw	r30, r2
    1cb8:	b2 86       	std	Z+10, r11	; 0x0a
    1cba:	a3 86       	std	Z+11, r10	; 0x0b
    1cbc:	94 86       	std	Z+12, r9	; 0x0c
    1cbe:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    1cc0:	86 85       	ldd	r24, Z+14	; 0x0e
    1cc2:	97 85       	ldd	r25, Z+15	; 0x0f
    1cc4:	a0 89       	ldd	r26, Z+16	; 0x10
    1cc6:	b1 89       	ldd	r27, Z+17	; 0x11
    1cc8:	8f 3f       	cpi	r24, 0xFF	; 255
    1cca:	ff ef       	ldi	r31, 0xFF	; 255
    1ccc:	9f 07       	cpc	r25, r31
    1cce:	ff ef       	ldi	r31, 0xFF	; 255
    1cd0:	af 07       	cpc	r26, r31
    1cd2:	ff ef       	ldi	r31, 0xFF	; 255
    1cd4:	bf 07       	cpc	r27, r31
    1cd6:	51 f0       	breq	.+20     	; 0x1cec <create_chain+0x19e>
		fs->free_clust--;
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	a1 09       	sbc	r26, r1
    1cdc:	b1 09       	sbc	r27, r1
    1cde:	f1 01       	movw	r30, r2
    1ce0:	86 87       	std	Z+14, r24	; 0x0e
    1ce2:	97 87       	std	Z+15, r25	; 0x0f
    1ce4:	a0 8b       	std	Z+16, r26	; 0x10
    1ce6:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	85 83       	std	Z+5, r24	; 0x05
    1cec:	a7 01       	movw	r20, r14
    1cee:	96 01       	movw	r18, r12
    1cf0:	09 c0       	rjmp	.+18     	; 0x1d04 <create_chain+0x1b6>
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e0       	ldi	r20, 0x00	; 0
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	04 c0       	rjmp	.+8      	; 0x1d04 <create_chain+0x1b6>
    1cfc:	2f ef       	ldi	r18, 0xFF	; 255
    1cfe:	3f ef       	ldi	r19, 0xFF	; 255
    1d00:	4f ef       	ldi	r20, 0xFF	; 255
    1d02:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    1d04:	b9 01       	movw	r22, r18
    1d06:	ca 01       	movw	r24, r20
    1d08:	24 96       	adiw	r28, 0x04	; 4
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	ff 90       	pop	r15
    1d18:	ef 90       	pop	r14
    1d1a:	df 90       	pop	r13
    1d1c:	cf 90       	pop	r12
    1d1e:	bf 90       	pop	r11
    1d20:	af 90       	pop	r10
    1d22:	9f 90       	pop	r9
    1d24:	8f 90       	pop	r8
    1d26:	7f 90       	pop	r7
    1d28:	6f 90       	pop	r6
    1d2a:	5f 90       	pop	r5
    1d2c:	4f 90       	pop	r4
    1d2e:	3f 90       	pop	r3
    1d30:	2f 90       	pop	r2
    1d32:	08 95       	ret

00001d34 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    1d34:	ef 92       	push	r14
    1d36:	ff 92       	push	r15
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	ec 01       	movw	r28, r24
    1d42:	7a 01       	movw	r14, r20
    1d44:	8b 01       	movw	r16, r22
	clst -= 2;
    1d46:	8e ef       	ldi	r24, 0xFE	; 254
    1d48:	9f ef       	ldi	r25, 0xFF	; 255
    1d4a:	af ef       	ldi	r26, 0xFF	; 255
    1d4c:	bf ef       	ldi	r27, 0xFF	; 255
    1d4e:	e8 0e       	add	r14, r24
    1d50:	f9 1e       	adc	r15, r25
    1d52:	0a 1f       	adc	r16, r26
    1d54:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1d56:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d58:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d5a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1d5c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1d5e:	02 97       	sbiw	r24, 0x02	; 2
    1d60:	a1 09       	sbc	r26, r1
    1d62:	b1 09       	sbc	r27, r1
    1d64:	e8 16       	cp	r14, r24
    1d66:	f9 06       	cpc	r15, r25
    1d68:	0a 07       	cpc	r16, r26
    1d6a:	1b 07       	cpc	r17, r27
    1d6c:	28 f0       	brcs	.+10     	; 0x1d78 <clust2sect+0x44>
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e0       	ldi	r20, 0x00	; 0
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	12 c0       	rjmp	.+36     	; 0x1d9c <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    1d78:	2a 81       	ldd	r18, Y+2	; 0x02
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e0       	ldi	r20, 0x00	; 0
    1d7e:	50 e0       	ldi	r21, 0x00	; 0
    1d80:	c8 01       	movw	r24, r16
    1d82:	b7 01       	movw	r22, r14
    1d84:	0e 94 54 50 	call	0xa0a8	; 0xa0a8 <__mulsi3>
    1d88:	9b 01       	movw	r18, r22
    1d8a:	ac 01       	movw	r20, r24
    1d8c:	8e a1       	ldd	r24, Y+38	; 0x26
    1d8e:	9f a1       	ldd	r25, Y+39	; 0x27
    1d90:	a8 a5       	ldd	r26, Y+40	; 0x28
    1d92:	b9 a5       	ldd	r27, Y+41	; 0x29
    1d94:	28 0f       	add	r18, r24
    1d96:	39 1f       	adc	r19, r25
    1d98:	4a 1f       	adc	r20, r26
    1d9a:	5b 1f       	adc	r21, r27
}
    1d9c:	b9 01       	movw	r22, r18
    1d9e:	ca 01       	movw	r24, r20
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	ff 90       	pop	r15
    1daa:	ef 90       	pop	r14
    1dac:	08 95       	ret

00001dae <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    1dae:	af 92       	push	r10
    1db0:	bf 92       	push	r11
    1db2:	cf 92       	push	r12
    1db4:	df 92       	push	r13
    1db6:	ef 92       	push	r14
    1db8:	ff 92       	push	r15
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	5c 01       	movw	r10, r24
    1dc4:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	14 96       	adiw	r26, 0x04	; 4
    1dca:	6d 93       	st	X+, r22
    1dcc:	7c 93       	st	X, r23
    1dce:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    1dd0:	16 96       	adiw	r26, 0x06	; 6
    1dd2:	4d 91       	ld	r20, X+
    1dd4:	5d 91       	ld	r21, X+
    1dd6:	6d 91       	ld	r22, X+
    1dd8:	7c 91       	ld	r23, X
    1dda:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    1ddc:	41 30       	cpi	r20, 0x01	; 1
    1dde:	51 05       	cpc	r21, r1
    1de0:	61 05       	cpc	r22, r1
    1de2:	71 05       	cpc	r23, r1
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <dir_seek+0x3a>
    1de6:	d3 c0       	rjmp	.+422    	; 0x1f8e <dir_seek+0x1e0>
    1de8:	ed 91       	ld	r30, X+
    1dea:	fc 91       	ld	r31, X
    1dec:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dee:	93 8d       	ldd	r25, Z+27	; 0x1b
    1df0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1df2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1df4:	48 17       	cp	r20, r24
    1df6:	59 07       	cpc	r21, r25
    1df8:	6a 07       	cpc	r22, r26
    1dfa:	7b 07       	cpc	r23, r27
    1dfc:	08 f0       	brcs	.+2      	; 0x1e00 <dir_seek+0x52>
    1dfe:	c7 c0       	rjmp	.+398    	; 0x1f8e <dir_seek+0x1e0>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1e00:	41 15       	cp	r20, r1
    1e02:	51 05       	cpc	r21, r1
    1e04:	61 05       	cpc	r22, r1
    1e06:	71 05       	cpc	r23, r1
    1e08:	81 f5       	brne	.+96     	; 0x1e6a <dir_seek+0xbc>
    1e0a:	80 81       	ld	r24, Z
    1e0c:	83 30       	cpi	r24, 0x03	; 3
    1e0e:	49 f4       	brne	.+18     	; 0x1e22 <dir_seek+0x74>
		clst = dj->fs->dirbase;
    1e10:	42 a1       	ldd	r20, Z+34	; 0x22
    1e12:	53 a1       	ldd	r21, Z+35	; 0x23
    1e14:	64 a1       	ldd	r22, Z+36	; 0x24
    1e16:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table */
    1e18:	41 15       	cp	r20, r1
    1e1a:	51 05       	cpc	r21, r1
    1e1c:	61 05       	cpc	r22, r1
    1e1e:	71 05       	cpc	r23, r1
    1e20:	21 f5       	brne	.+72     	; 0x1e6a <dir_seek+0xbc>
		dj->clust = clst;
    1e22:	f5 01       	movw	r30, r10
    1e24:	12 86       	std	Z+10, r1	; 0x0a
    1e26:	13 86       	std	Z+11, r1	; 0x0b
    1e28:	14 86       	std	Z+12, r1	; 0x0c
    1e2a:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1e2c:	01 90       	ld	r0, Z+
    1e2e:	f0 81       	ld	r31, Z
    1e30:	e0 2d       	mov	r30, r0
    1e32:	80 85       	ldd	r24, Z+8	; 0x08
    1e34:	91 85       	ldd	r25, Z+9	; 0x09
    1e36:	c8 16       	cp	r12, r24
    1e38:	d9 06       	cpc	r13, r25
    1e3a:	08 f0       	brcs	.+2      	; 0x1e3e <dir_seek+0x90>
    1e3c:	a8 c0       	rjmp	.+336    	; 0x1f8e <dir_seek+0x1e0>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    1e3e:	c6 01       	movw	r24, r12
    1e40:	24 e0       	ldi	r18, 0x04	; 4
    1e42:	96 95       	lsr	r25
    1e44:	87 95       	ror	r24
    1e46:	2a 95       	dec	r18
    1e48:	e1 f7       	brne	.-8      	; 0x1e42 <dir_seek+0x94>
    1e4a:	a0 e0       	ldi	r26, 0x00	; 0
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	22 a1       	ldd	r18, Z+34	; 0x22
    1e50:	33 a1       	ldd	r19, Z+35	; 0x23
    1e52:	44 a1       	ldd	r20, Z+36	; 0x24
    1e54:	55 a1       	ldd	r21, Z+37	; 0x25
    1e56:	82 0f       	add	r24, r18
    1e58:	93 1f       	adc	r25, r19
    1e5a:	a4 1f       	adc	r26, r20
    1e5c:	b5 1f       	adc	r27, r21
    1e5e:	f5 01       	movw	r30, r10
    1e60:	86 87       	std	Z+14, r24	; 0x0e
    1e62:	97 87       	std	Z+15, r25	; 0x0f
    1e64:	a0 8b       	std	Z+16, r26	; 0x10
    1e66:	b1 8b       	std	Z+17, r27	; 0x11
    1e68:	7a c0       	rjmp	.+244    	; 0x1f5e <dir_seek+0x1b0>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    1e6a:	82 81       	ldd	r24, Z+2	; 0x02
    1e6c:	08 2f       	mov	r16, r24
    1e6e:	10 e0       	ldi	r17, 0x00	; 0
    1e70:	94 e0       	ldi	r25, 0x04	; 4
    1e72:	00 0f       	add	r16, r16
    1e74:	11 1f       	adc	r17, r17
    1e76:	9a 95       	dec	r25
    1e78:	e1 f7       	brne	.-8      	; 0x1e72 <dir_seek+0xc4>
    1e7a:	24 c0       	rjmp	.+72     	; 0x1ec4 <dir_seek+0x116>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	0e 94 56 0b 	call	0x16ac	; 0x16ac <get_fat>
    1e82:	ab 01       	movw	r20, r22
    1e84:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1e86:	4f 3f       	cpi	r20, 0xFF	; 255
    1e88:	ff ef       	ldi	r31, 0xFF	; 255
    1e8a:	5f 07       	cpc	r21, r31
    1e8c:	ff ef       	ldi	r31, 0xFF	; 255
    1e8e:	6f 07       	cpc	r22, r31
    1e90:	ff ef       	ldi	r31, 0xFF	; 255
    1e92:	7f 07       	cpc	r23, r31
    1e94:	11 f4       	brne	.+4      	; 0x1e9a <dir_seek+0xec>
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	7b c0       	rjmp	.+246    	; 0x1f90 <dir_seek+0x1e2>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    1e9a:	42 30       	cpi	r20, 0x02	; 2
    1e9c:	51 05       	cpc	r21, r1
    1e9e:	61 05       	cpc	r22, r1
    1ea0:	71 05       	cpc	r23, r1
    1ea2:	08 f4       	brcc	.+2      	; 0x1ea6 <dir_seek+0xf8>
    1ea4:	74 c0       	rjmp	.+232    	; 0x1f8e <dir_seek+0x1e0>
    1ea6:	d5 01       	movw	r26, r10
    1ea8:	ed 91       	ld	r30, X+
    1eaa:	fc 91       	ld	r31, X
    1eac:	82 8d       	ldd	r24, Z+26	; 0x1a
    1eae:	93 8d       	ldd	r25, Z+27	; 0x1b
    1eb0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1eb2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1eb4:	48 17       	cp	r20, r24
    1eb6:	59 07       	cpc	r21, r25
    1eb8:	6a 07       	cpc	r22, r26
    1eba:	7b 07       	cpc	r23, r27
    1ebc:	08 f0       	brcs	.+2      	; 0x1ec0 <dir_seek+0x112>
    1ebe:	67 c0       	rjmp	.+206    	; 0x1f8e <dir_seek+0x1e0>
				return FR_INT_ERR;
			idx -= ic;
    1ec0:	c0 1a       	sub	r12, r16
    1ec2:	d1 0a       	sbc	r13, r17
    1ec4:	f5 01       	movw	r30, r10
    1ec6:	c0 81       	ld	r28, Z
    1ec8:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1eca:	c0 16       	cp	r12, r16
    1ecc:	d1 06       	cpc	r13, r17
    1ece:	b0 f6       	brcc	.-84     	; 0x1e7c <dir_seek+0xce>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1ed0:	d5 01       	movw	r26, r10
    1ed2:	1a 96       	adiw	r26, 0x0a	; 10
    1ed4:	4d 93       	st	X+, r20
    1ed6:	5d 93       	st	X+, r21
    1ed8:	6d 93       	st	X+, r22
    1eda:	7c 93       	st	X, r23
    1edc:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1ede:	8e ef       	ldi	r24, 0xFE	; 254
    1ee0:	e8 2e       	mov	r14, r24
    1ee2:	8f ef       	ldi	r24, 0xFF	; 255
    1ee4:	f8 2e       	mov	r15, r24
    1ee6:	8f ef       	ldi	r24, 0xFF	; 255
    1ee8:	08 2f       	mov	r16, r24
    1eea:	8f ef       	ldi	r24, 0xFF	; 255
    1eec:	18 2f       	mov	r17, r24
    1eee:	e4 0e       	add	r14, r20
    1ef0:	f5 1e       	adc	r15, r21
    1ef2:	06 1f       	adc	r16, r22
    1ef4:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1ef6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ef8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1efa:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1efc:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1efe:	02 97       	sbiw	r24, 0x02	; 2
    1f00:	a1 09       	sbc	r26, r1
    1f02:	b1 09       	sbc	r27, r1
    1f04:	e8 16       	cp	r14, r24
    1f06:	f9 06       	cpc	r15, r25
    1f08:	0a 07       	cpc	r16, r26
    1f0a:	1b 07       	cpc	r17, r27
    1f0c:	28 f0       	brcs	.+10     	; 0x1f18 <dir_seek+0x16a>
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e0       	ldi	r20, 0x00	; 0
    1f14:	50 e0       	ldi	r21, 0x00	; 0
    1f16:	12 c0       	rjmp	.+36     	; 0x1f3c <dir_seek+0x18e>
	return clst * fs->csize + fs->database;
    1f18:	2a 81       	ldd	r18, Y+2	; 0x02
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e0       	ldi	r20, 0x00	; 0
    1f1e:	50 e0       	ldi	r21, 0x00	; 0
    1f20:	c8 01       	movw	r24, r16
    1f22:	b7 01       	movw	r22, r14
    1f24:	0e 94 54 50 	call	0xa0a8	; 0xa0a8 <__mulsi3>
    1f28:	9b 01       	movw	r18, r22
    1f2a:	ac 01       	movw	r20, r24
    1f2c:	8e a1       	ldd	r24, Y+38	; 0x26
    1f2e:	9f a1       	ldd	r25, Y+39	; 0x27
    1f30:	a8 a5       	ldd	r26, Y+40	; 0x28
    1f32:	b9 a5       	ldd	r27, Y+41	; 0x29
    1f34:	28 0f       	add	r18, r24
    1f36:	39 1f       	adc	r19, r25
    1f38:	4a 1f       	adc	r20, r26
    1f3a:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    1f3c:	c6 01       	movw	r24, r12
    1f3e:	14 e0       	ldi	r17, 0x04	; 4
    1f40:	96 95       	lsr	r25
    1f42:	87 95       	ror	r24
    1f44:	1a 95       	dec	r17
    1f46:	e1 f7       	brne	.-8      	; 0x1f40 <dir_seek+0x192>
    1f48:	a0 e0       	ldi	r26, 0x00	; 0
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	28 0f       	add	r18, r24
    1f4e:	39 1f       	adc	r19, r25
    1f50:	4a 1f       	adc	r20, r26
    1f52:	5b 1f       	adc	r21, r27
    1f54:	f5 01       	movw	r30, r10
    1f56:	26 87       	std	Z+14, r18	; 0x0e
    1f58:	37 87       	std	Z+15, r19	; 0x0f
    1f5a:	40 8b       	std	Z+16, r20	; 0x10
    1f5c:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    1f5e:	ff e0       	ldi	r31, 0x0F	; 15
    1f60:	cf 22       	and	r12, r31
    1f62:	dd 24       	eor	r13, r13
    1f64:	b5 e0       	ldi	r27, 0x05	; 5
    1f66:	cc 0c       	add	r12, r12
    1f68:	dd 1c       	adc	r13, r13
    1f6a:	ba 95       	dec	r27
    1f6c:	e1 f7       	brne	.-8      	; 0x1f66 <dir_seek+0x1b8>
    1f6e:	8e e2       	ldi	r24, 0x2E	; 46
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	c8 0e       	add	r12, r24
    1f74:	d9 1e       	adc	r13, r25
    1f76:	d5 01       	movw	r26, r10
    1f78:	8d 91       	ld	r24, X+
    1f7a:	9c 91       	ld	r25, X
    1f7c:	11 97       	sbiw	r26, 0x01	; 1
    1f7e:	8c 0d       	add	r24, r12
    1f80:	9d 1d       	adc	r25, r13
    1f82:	52 96       	adiw	r26, 0x12	; 18
    1f84:	8d 93       	st	X+, r24
    1f86:	9c 93       	st	X, r25
    1f88:	53 97       	sbiw	r26, 0x13	; 19
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	01 c0       	rjmp	.+2      	; 0x1f90 <dir_seek+0x1e2>

	return FR_OK;	/* Seek succeeded */
    1f8e:	82 e0       	ldi	r24, 0x02	; 2
}
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	1f 91       	pop	r17
    1f96:	0f 91       	pop	r16
    1f98:	ff 90       	pop	r15
    1f9a:	ef 90       	pop	r14
    1f9c:	df 90       	pop	r13
    1f9e:	cf 90       	pop	r12
    1fa0:	bf 90       	pop	r11
    1fa2:	af 90       	pop	r10
    1fa4:	08 95       	ret

00001fa6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    1fa6:	4f 92       	push	r4
    1fa8:	5f 92       	push	r5
    1faa:	6f 92       	push	r6
    1fac:	7f 92       	push	r7
    1fae:	8f 92       	push	r8
    1fb0:	9f 92       	push	r9
    1fb2:	af 92       	push	r10
    1fb4:	bf 92       	push	r11
    1fb6:	cf 92       	push	r12
    1fb8:	df 92       	push	r13
    1fba:	ef 92       	push	r14
    1fbc:	ff 92       	push	r15
    1fbe:	0f 93       	push	r16
    1fc0:	1f 93       	push	r17
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	ec 01       	movw	r28, r24
    1fc8:	d6 2e       	mov	r13, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    1fca:	6c 80       	ldd	r6, Y+4	; 0x04
    1fcc:	7d 80       	ldd	r7, Y+5	; 0x05
    1fce:	08 94       	sec
    1fd0:	61 1c       	adc	r6, r1
    1fd2:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1fd4:	61 14       	cp	r6, r1
    1fd6:	71 04       	cpc	r7, r1
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <dir_next+0x36>
    1fda:	4c c1       	rjmp	.+664    	; 0x2274 <dir_next+0x2ce>
    1fdc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fde:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fe0:	a8 89       	ldd	r26, Y+16	; 0x10
    1fe2:	b9 89       	ldd	r27, Y+17	; 0x11
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	a1 05       	cpc	r26, r1
    1fe8:	b1 05       	cpc	r27, r1
    1fea:	09 f4       	brne	.+2      	; 0x1fee <dir_next+0x48>
    1fec:	43 c1       	rjmp	.+646    	; 0x2274 <dir_next+0x2ce>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    1fee:	1f e0       	ldi	r17, 0x0F	; 15
    1ff0:	41 2e       	mov	r4, r17
    1ff2:	51 2c       	mov	r5, r1
    1ff4:	46 20       	and	r4, r6
    1ff6:	57 20       	and	r5, r7
    1ff8:	41 14       	cp	r4, r1
    1ffa:	51 04       	cpc	r5, r1
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <dir_next+0x5a>
    1ffe:	27 c1       	rjmp	.+590    	; 0x224e <dir_next+0x2a8>
		dj->sect++;					/* Next sector */
    2000:	01 96       	adiw	r24, 0x01	; 1
    2002:	a1 1d       	adc	r26, r1
    2004:	b1 1d       	adc	r27, r1
    2006:	8e 87       	std	Y+14, r24	; 0x0e
    2008:	9f 87       	std	Y+15, r25	; 0x0f
    200a:	a8 8b       	std	Y+16, r26	; 0x10
    200c:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    200e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2010:	5b 85       	ldd	r21, Y+11	; 0x0b
    2012:	6c 85       	ldd	r22, Y+12	; 0x0c
    2014:	7d 85       	ldd	r23, Y+13	; 0x0d
    2016:	e8 81       	ld	r30, Y
    2018:	f9 81       	ldd	r31, Y+1	; 0x01
    201a:	41 15       	cp	r20, r1
    201c:	51 05       	cpc	r21, r1
    201e:	61 05       	cpc	r22, r1
    2020:	71 05       	cpc	r23, r1
    2022:	39 f4       	brne	.+14     	; 0x2032 <dir_next+0x8c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    2024:	80 85       	ldd	r24, Z+8	; 0x08
    2026:	91 85       	ldd	r25, Z+9	; 0x09
    2028:	68 16       	cp	r6, r24
    202a:	79 06       	cpc	r7, r25
    202c:	08 f4       	brcc	.+2      	; 0x2030 <dir_next+0x8a>
    202e:	0f c1       	rjmp	.+542    	; 0x224e <dir_next+0x2a8>
    2030:	21 c1       	rjmp	.+578    	; 0x2274 <dir_next+0x2ce>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    2032:	82 81       	ldd	r24, Z+2	; 0x02
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	93 01       	movw	r18, r6
    203a:	a4 e0       	ldi	r26, 0x04	; 4
    203c:	36 95       	lsr	r19
    203e:	27 95       	ror	r18
    2040:	aa 95       	dec	r26
    2042:	e1 f7       	brne	.-8      	; 0x203c <dir_next+0x96>
    2044:	82 23       	and	r24, r18
    2046:	93 23       	and	r25, r19
    2048:	89 2b       	or	r24, r25
    204a:	09 f0       	breq	.+2      	; 0x204e <dir_next+0xa8>
    204c:	00 c1       	rjmp	.+512    	; 0x224e <dir_next+0x2a8>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    204e:	cf 01       	movw	r24, r30
    2050:	0e 94 56 0b 	call	0x16ac	; 0x16ac <get_fat>
    2054:	7b 01       	movw	r14, r22
    2056:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    2058:	62 30       	cpi	r22, 0x02	; 2
    205a:	71 05       	cpc	r23, r1
    205c:	81 05       	cpc	r24, r1
    205e:	91 05       	cpc	r25, r1
    2060:	08 f4       	brcc	.+2      	; 0x2064 <dir_next+0xbe>
    2062:	0a c1       	rjmp	.+532    	; 0x2278 <dir_next+0x2d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2064:	8f ef       	ldi	r24, 0xFF	; 255
    2066:	e8 16       	cp	r14, r24
    2068:	8f ef       	ldi	r24, 0xFF	; 255
    206a:	f8 06       	cpc	r15, r24
    206c:	8f ef       	ldi	r24, 0xFF	; 255
    206e:	08 07       	cpc	r16, r24
    2070:	8f ef       	ldi	r24, 0xFF	; 255
    2072:	18 07       	cpc	r17, r24
    2074:	09 f4       	brne	.+2      	; 0x2078 <dir_next+0xd2>
    2076:	02 c1       	rjmp	.+516    	; 0x227c <dir_next+0x2d6>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    2078:	e8 81       	ld	r30, Y
    207a:	f9 81       	ldd	r31, Y+1	; 0x01
    207c:	82 8d       	ldd	r24, Z+26	; 0x1a
    207e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2080:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2082:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2084:	e8 16       	cp	r14, r24
    2086:	f9 06       	cpc	r15, r25
    2088:	0a 07       	cpc	r16, r26
    208a:	1b 07       	cpc	r17, r27
    208c:	08 f4       	brcc	.+2      	; 0x2090 <dir_next+0xea>
    208e:	a6 c0       	rjmp	.+332    	; 0x21dc <dir_next+0x236>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    2090:	dd 20       	and	r13, r13
    2092:	09 f4       	brne	.+2      	; 0x2096 <dir_next+0xf0>
    2094:	ef c0       	rjmp	.+478    	; 0x2274 <dir_next+0x2ce>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    2096:	4a 85       	ldd	r20, Y+10	; 0x0a
    2098:	5b 85       	ldd	r21, Y+11	; 0x0b
    209a:	6c 85       	ldd	r22, Y+12	; 0x0c
    209c:	7d 85       	ldd	r23, Y+13	; 0x0d
    209e:	cf 01       	movw	r24, r30
    20a0:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <create_chain>
    20a4:	7b 01       	movw	r14, r22
    20a6:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    20a8:	61 15       	cp	r22, r1
    20aa:	71 05       	cpc	r23, r1
    20ac:	81 05       	cpc	r24, r1
    20ae:	91 05       	cpc	r25, r1
    20b0:	11 f4       	brne	.+4      	; 0x20b6 <dir_next+0x110>
    20b2:	87 e0       	ldi	r24, 0x07	; 7
    20b4:	e4 c0       	rjmp	.+456    	; 0x227e <dir_next+0x2d8>
					if (clst == 1) return FR_INT_ERR;
    20b6:	91 e0       	ldi	r25, 0x01	; 1
    20b8:	e9 16       	cp	r14, r25
    20ba:	f1 04       	cpc	r15, r1
    20bc:	01 05       	cpc	r16, r1
    20be:	11 05       	cpc	r17, r1
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <dir_next+0x11e>
    20c2:	da c0       	rjmp	.+436    	; 0x2278 <dir_next+0x2d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    20c4:	af ef       	ldi	r26, 0xFF	; 255
    20c6:	ea 16       	cp	r14, r26
    20c8:	af ef       	ldi	r26, 0xFF	; 255
    20ca:	fa 06       	cpc	r15, r26
    20cc:	af ef       	ldi	r26, 0xFF	; 255
    20ce:	0a 07       	cpc	r16, r26
    20d0:	af ef       	ldi	r26, 0xFF	; 255
    20d2:	1a 07       	cpc	r17, r26
    20d4:	09 f4       	brne	.+2      	; 0x20d8 <dir_next+0x132>
    20d6:	d2 c0       	rjmp	.+420    	; 0x227c <dir_next+0x2d6>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    20d8:	88 81       	ld	r24, Y
    20da:	99 81       	ldd	r25, Y+1	; 0x01
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	50 e0       	ldi	r21, 0x00	; 0
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	70 e0       	ldi	r23, 0x00	; 0
    20e4:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    20e8:	88 23       	and	r24, r24
    20ea:	09 f0       	breq	.+2      	; 0x20ee <dir_next+0x148>
    20ec:	c7 c0       	rjmp	.+398    	; 0x227c <dir_next+0x2d6>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    20ee:	e8 81       	ld	r30, Y
    20f0:	f9 81       	ldd	r31, Y+1	; 0x01
    20f2:	be 96       	adiw	r30, 0x2e	; 46
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	92 e0       	ldi	r25, 0x02	; 2
    20f8:	01 c0       	rjmp	.+2      	; 0x20fc <dir_next+0x156>
	while (cnt--) *d++ = (char)val;
    20fa:	11 92       	st	Z+, r1
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	bf ef       	ldi	r27, 0xFF	; 255
    2100:	8f 3f       	cpi	r24, 0xFF	; 255
    2102:	9b 07       	cpc	r25, r27
    2104:	d1 f7       	brne	.-12     	; 0x20fa <dir_next+0x154>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    2106:	88 80       	ld	r8, Y
    2108:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    210a:	4e ef       	ldi	r20, 0xFE	; 254
    210c:	a4 2e       	mov	r10, r20
    210e:	4f ef       	ldi	r20, 0xFF	; 255
    2110:	b4 2e       	mov	r11, r20
    2112:	4f ef       	ldi	r20, 0xFF	; 255
    2114:	c4 2e       	mov	r12, r20
    2116:	4f ef       	ldi	r20, 0xFF	; 255
    2118:	d4 2e       	mov	r13, r20
    211a:	ae 0c       	add	r10, r14
    211c:	bf 1c       	adc	r11, r15
    211e:	c0 1e       	adc	r12, r16
    2120:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    2122:	f4 01       	movw	r30, r8
    2124:	82 8d       	ldd	r24, Z+26	; 0x1a
    2126:	93 8d       	ldd	r25, Z+27	; 0x1b
    2128:	a4 8d       	ldd	r26, Z+28	; 0x1c
    212a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    212c:	02 97       	sbiw	r24, 0x02	; 2
    212e:	a1 09       	sbc	r26, r1
    2130:	b1 09       	sbc	r27, r1
    2132:	a8 16       	cp	r10, r24
    2134:	b9 06       	cpc	r11, r25
    2136:	ca 06       	cpc	r12, r26
    2138:	db 06       	cpc	r13, r27
    213a:	28 f0       	brcs	.+10     	; 0x2146 <dir_next+0x1a0>
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	50 e0       	ldi	r21, 0x00	; 0
    2144:	15 c0       	rjmp	.+42     	; 0x2170 <dir_next+0x1ca>
	return clst * fs->csize + fs->database;
    2146:	d4 01       	movw	r26, r8
    2148:	12 96       	adiw	r26, 0x02	; 2
    214a:	2c 91       	ld	r18, X
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e0       	ldi	r20, 0x00	; 0
    2150:	50 e0       	ldi	r21, 0x00	; 0
    2152:	c6 01       	movw	r24, r12
    2154:	b5 01       	movw	r22, r10
    2156:	0e 94 54 50 	call	0xa0a8	; 0xa0a8 <__mulsi3>
    215a:	9b 01       	movw	r18, r22
    215c:	ac 01       	movw	r20, r24
    215e:	f4 01       	movw	r30, r8
    2160:	86 a1       	ldd	r24, Z+38	; 0x26
    2162:	97 a1       	ldd	r25, Z+39	; 0x27
    2164:	a0 a5       	ldd	r26, Z+40	; 0x28
    2166:	b1 a5       	ldd	r27, Z+41	; 0x29
    2168:	28 0f       	add	r18, r24
    216a:	39 1f       	adc	r19, r25
    216c:	4a 1f       	adc	r20, r26
    216e:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    2170:	d4 01       	movw	r26, r8
    2172:	9a 96       	adiw	r26, 0x2a	; 42
    2174:	2d 93       	st	X+, r18
    2176:	3d 93       	st	X+, r19
    2178:	4d 93       	st	X+, r20
    217a:	5c 93       	st	X, r21
    217c:	9d 97       	sbiw	r26, 0x2d	; 45
    217e:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    2180:	cc 24       	eor	r12, r12
    2182:	c3 94       	inc	r12
    2184:	1a c0       	rjmp	.+52     	; 0x21ba <dir_next+0x214>
    2186:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    2188:	88 81       	ld	r24, Y
    218a:	99 81       	ldd	r25, Y+1	; 0x01
    218c:	40 e0       	ldi	r20, 0x00	; 0
    218e:	50 e0       	ldi	r21, 0x00	; 0
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	70 e0       	ldi	r23, 0x00	; 0
    2194:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    2198:	88 23       	and	r24, r24
    219a:	09 f0       	breq	.+2      	; 0x219e <dir_next+0x1f8>
    219c:	6f c0       	rjmp	.+222    	; 0x227c <dir_next+0x2d6>
						dj->fs->winsect++;
    219e:	e8 81       	ld	r30, Y
    21a0:	f9 81       	ldd	r31, Y+1	; 0x01
    21a2:	82 a5       	ldd	r24, Z+42	; 0x2a
    21a4:	93 a5       	ldd	r25, Z+43	; 0x2b
    21a6:	a4 a5       	ldd	r26, Z+44	; 0x2c
    21a8:	b5 a5       	ldd	r27, Z+45	; 0x2d
    21aa:	01 96       	adiw	r24, 0x01	; 1
    21ac:	a1 1d       	adc	r26, r1
    21ae:	b1 1d       	adc	r27, r1
    21b0:	82 a7       	std	Z+42, r24	; 0x2a
    21b2:	93 a7       	std	Z+43, r25	; 0x2b
    21b4:	a4 a7       	std	Z+44, r26	; 0x2c
    21b6:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    21b8:	d3 94       	inc	r13
    21ba:	e8 81       	ld	r30, Y
    21bc:	f9 81       	ldd	r31, Y+1	; 0x01
    21be:	82 81       	ldd	r24, Z+2	; 0x02
    21c0:	d8 16       	cp	r13, r24
    21c2:	08 f3       	brcs	.-62     	; 0x2186 <dir_next+0x1e0>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    21c4:	82 a5       	ldd	r24, Z+42	; 0x2a
    21c6:	93 a5       	ldd	r25, Z+43	; 0x2b
    21c8:	a4 a5       	ldd	r26, Z+44	; 0x2c
    21ca:	b5 a5       	ldd	r27, Z+45	; 0x2d
    21cc:	8d 19       	sub	r24, r13
    21ce:	91 09       	sbc	r25, r1
    21d0:	a1 09       	sbc	r26, r1
    21d2:	b1 09       	sbc	r27, r1
    21d4:	82 a7       	std	Z+42, r24	; 0x2a
    21d6:	93 a7       	std	Z+43, r25	; 0x2b
    21d8:	a4 a7       	std	Z+44, r26	; 0x2c
    21da:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    21dc:	ea 86       	std	Y+10, r14	; 0x0a
    21de:	fb 86       	std	Y+11, r15	; 0x0b
    21e0:	0c 87       	std	Y+12, r16	; 0x0c
    21e2:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    21e4:	c8 80       	ld	r12, Y
    21e6:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    21e8:	8e ef       	ldi	r24, 0xFE	; 254
    21ea:	9f ef       	ldi	r25, 0xFF	; 255
    21ec:	af ef       	ldi	r26, 0xFF	; 255
    21ee:	bf ef       	ldi	r27, 0xFF	; 255
    21f0:	e8 0e       	add	r14, r24
    21f2:	f9 1e       	adc	r15, r25
    21f4:	0a 1f       	adc	r16, r26
    21f6:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    21f8:	f6 01       	movw	r30, r12
    21fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    21fc:	93 8d       	ldd	r25, Z+27	; 0x1b
    21fe:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2200:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2202:	02 97       	sbiw	r24, 0x02	; 2
    2204:	a1 09       	sbc	r26, r1
    2206:	b1 09       	sbc	r27, r1
    2208:	e8 16       	cp	r14, r24
    220a:	f9 06       	cpc	r15, r25
    220c:	0a 07       	cpc	r16, r26
    220e:	1b 07       	cpc	r17, r27
    2210:	28 f0       	brcs	.+10     	; 0x221c <dir_next+0x276>
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	50 e0       	ldi	r21, 0x00	; 0
    221a:	15 c0       	rjmp	.+42     	; 0x2246 <dir_next+0x2a0>
	return clst * fs->csize + fs->database;
    221c:	d6 01       	movw	r26, r12
    221e:	12 96       	adiw	r26, 0x02	; 2
    2220:	2c 91       	ld	r18, X
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e0       	ldi	r20, 0x00	; 0
    2226:	50 e0       	ldi	r21, 0x00	; 0
    2228:	c8 01       	movw	r24, r16
    222a:	b7 01       	movw	r22, r14
    222c:	0e 94 54 50 	call	0xa0a8	; 0xa0a8 <__mulsi3>
    2230:	9b 01       	movw	r18, r22
    2232:	ac 01       	movw	r20, r24
    2234:	f6 01       	movw	r30, r12
    2236:	86 a1       	ldd	r24, Z+38	; 0x26
    2238:	97 a1       	ldd	r25, Z+39	; 0x27
    223a:	a0 a5       	ldd	r26, Z+40	; 0x28
    223c:	b1 a5       	ldd	r27, Z+41	; 0x29
    223e:	28 0f       	add	r18, r24
    2240:	39 1f       	adc	r19, r25
    2242:	4a 1f       	adc	r20, r26
    2244:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    2246:	2e 87       	std	Y+14, r18	; 0x0e
    2248:	3f 87       	std	Y+15, r19	; 0x0f
    224a:	48 8b       	std	Y+16, r20	; 0x10
    224c:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    224e:	6c 82       	std	Y+4, r6	; 0x04
    2250:	7d 82       	std	Y+5, r7	; 0x05
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    2252:	35 e0       	ldi	r19, 0x05	; 5
    2254:	44 0c       	add	r4, r4
    2256:	55 1c       	adc	r5, r5
    2258:	3a 95       	dec	r19
    225a:	e1 f7       	brne	.-8      	; 0x2254 <dir_next+0x2ae>
    225c:	8e e2       	ldi	r24, 0x2E	; 46
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	48 0e       	add	r4, r24
    2262:	59 1e       	adc	r5, r25
    2264:	88 81       	ld	r24, Y
    2266:	99 81       	ldd	r25, Y+1	; 0x01
    2268:	84 0d       	add	r24, r4
    226a:	95 1d       	adc	r25, r5
    226c:	8a 8b       	std	Y+18, r24	; 0x12
    226e:	9b 8b       	std	Y+19, r25	; 0x13
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	05 c0       	rjmp	.+10     	; 0x227e <dir_next+0x2d8>

	return FR_OK;
    2274:	84 e0       	ldi	r24, 0x04	; 4
    2276:	03 c0       	rjmp	.+6      	; 0x227e <dir_next+0x2d8>
    2278:	82 e0       	ldi	r24, 0x02	; 2
    227a:	01 c0       	rjmp	.+2      	; 0x227e <dir_next+0x2d8>
    227c:	81 e0       	ldi	r24, 0x01	; 1
}
    227e:	df 91       	pop	r29
    2280:	cf 91       	pop	r28
    2282:	1f 91       	pop	r17
    2284:	0f 91       	pop	r16
    2286:	ff 90       	pop	r15
    2288:	ef 90       	pop	r14
    228a:	df 90       	pop	r13
    228c:	cf 90       	pop	r12
    228e:	bf 90       	pop	r11
    2290:	af 90       	pop	r10
    2292:	9f 90       	pop	r9
    2294:	8f 90       	pop	r8
    2296:	7f 90       	pop	r7
    2298:	6f 90       	pop	r6
    229a:	5f 90       	pop	r5
    229c:	4f 90       	pop	r4
    229e:	08 95       	ret

000022a0 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    22a0:	cf 93       	push	r28
    22a2:	df 93       	push	r29
    22a4:	ec 01       	movw	r28, r24
    22a6:	94 e0       	ldi	r25, 0x04	; 4
    22a8:	1a c0       	rjmp	.+52     	; 0x22de <dir_read+0x3e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    22aa:	88 81       	ld	r24, Y
    22ac:	99 81       	ldd	r25, Y+1	; 0x01
    22ae:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    22b2:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    22b4:	88 23       	and	r24, r24
    22b6:	f1 f4       	brne	.+60     	; 0x22f4 <dir_read+0x54>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    22b8:	ea 89       	ldd	r30, Y+18	; 0x12
    22ba:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    22bc:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    22be:	88 23       	and	r24, r24
    22c0:	09 f1       	breq	.+66     	; 0x2304 <dir_read+0x64>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    22c2:	85 3e       	cpi	r24, 0xE5	; 229
    22c4:	29 f0       	breq	.+10     	; 0x22d0 <dir_read+0x30>
    22c6:	8e 32       	cpi	r24, 0x2E	; 46
    22c8:	19 f0       	breq	.+6      	; 0x22d0 <dir_read+0x30>
    22ca:	83 85       	ldd	r24, Z+11	; 0x0b
    22cc:	83 ff       	sbrs	r24, 3
    22ce:	16 c0       	rjmp	.+44     	; 0x22fc <dir_read+0x5c>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    22d0:	ce 01       	movw	r24, r28
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <dir_next>
    22d8:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    22da:	88 23       	and	r24, r24
    22dc:	59 f4       	brne	.+22     	; 0x22f4 <dir_read+0x54>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    22de:	4e 85       	ldd	r20, Y+14	; 0x0e
    22e0:	5f 85       	ldd	r21, Y+15	; 0x0f
    22e2:	68 89       	ldd	r22, Y+16	; 0x10
    22e4:	79 89       	ldd	r23, Y+17	; 0x11
    22e6:	41 15       	cp	r20, r1
    22e8:	51 05       	cpc	r21, r1
    22ea:	61 05       	cpc	r22, r1
    22ec:	71 05       	cpc	r23, r1
    22ee:	e9 f6       	brne	.-70     	; 0x22aa <dir_read+0xa>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    22f0:	99 23       	and	r25, r25
    22f2:	21 f0       	breq	.+8      	; 0x22fc <dir_read+0x5c>
    22f4:	1e 86       	std	Y+14, r1	; 0x0e
    22f6:	1f 86       	std	Y+15, r1	; 0x0f
    22f8:	18 8a       	std	Y+16, r1	; 0x10
    22fa:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    22fc:	89 2f       	mov	r24, r25
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	08 95       	ret
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    2304:	94 e0       	ldi	r25, 0x04	; 4
    2306:	f6 cf       	rjmp	.-20     	; 0x22f4 <dir_read+0x54>

00002308 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    230e:	60 e0       	ldi	r22, 0x00	; 0
    2310:	70 e0       	ldi	r23, 0x00	; 0
    2312:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <dir_seek>
    2316:	48 2f       	mov	r20, r24
	if (res == FR_OK) {
    2318:	88 23       	and	r24, r24
    231a:	e9 f5       	brne	.+122    	; 0x2396 <dir_register+0x8e>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    231c:	4e 85       	ldd	r20, Y+14	; 0x0e
    231e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2320:	68 89       	ldd	r22, Y+16	; 0x10
    2322:	79 89       	ldd	r23, Y+17	; 0x11
    2324:	88 81       	ld	r24, Y
    2326:	99 81       	ldd	r25, Y+1	; 0x01
    2328:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    232c:	48 2f       	mov	r20, r24
			if (res != FR_OK) break;
    232e:	88 23       	and	r24, r24
    2330:	91 f5       	brne	.+100    	; 0x2396 <dir_register+0x8e>
			c = *dj->dir;
    2332:	ea 89       	ldd	r30, Y+18	; 0x12
    2334:	fb 89       	ldd	r31, Y+19	; 0x13
    2336:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    2338:	e5 3e       	cpi	r30, 0xE5	; 229
    233a:	89 f1       	breq	.+98     	; 0x239e <dir_register+0x96>
    233c:	ee 23       	and	r30, r30
    233e:	79 f1       	breq	.+94     	; 0x239e <dir_register+0x96>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    2340:	ce 01       	movw	r24, r28
    2342:	61 e0       	ldi	r22, 0x01	; 1
    2344:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <dir_next>
    2348:	e6 cf       	rjmp	.-52     	; 0x2316 <dir_register+0xe>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    234a:	6a 89       	ldd	r22, Y+18	; 0x12
    234c:	7b 89       	ldd	r23, Y+19	; 0x13
    234e:	fb 01       	movw	r30, r22
    2350:	80 e2       	ldi	r24, 0x20	; 32
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	01 c0       	rjmp	.+2      	; 0x2358 <dir_register+0x50>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2356:	11 92       	st	Z+, r1
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	2f ef       	ldi	r18, 0xFF	; 255
    235c:	8f 3f       	cpi	r24, 0xFF	; 255
    235e:	92 07       	cpc	r25, r18
    2360:	d1 f7       	brne	.-12     	; 0x2356 <dir_register+0x4e>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    2362:	8c 89       	ldd	r24, Y+20	; 0x14
    2364:	9d 89       	ldd	r25, Y+21	; 0x15
    2366:	9c 01       	movw	r18, r24
    2368:	d9 01       	movw	r26, r18
    236a:	fb 01       	movw	r30, r22
    236c:	2b e0       	ldi	r18, 0x0B	; 11
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <dir_register+0x6e>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    2372:	8d 91       	ld	r24, X+
    2374:	81 93       	st	Z+, r24
    2376:	21 50       	subi	r18, 0x01	; 1
    2378:	30 40       	sbci	r19, 0x00	; 0
    237a:	8f ef       	ldi	r24, 0xFF	; 255
    237c:	2f 3f       	cpi	r18, 0xFF	; 255
    237e:	38 07       	cpc	r19, r24
    2380:	c1 f7       	brne	.-16     	; 0x2372 <dir_register+0x6a>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    2382:	ec 89       	ldd	r30, Y+20	; 0x14
    2384:	fd 89       	ldd	r31, Y+21	; 0x15
    2386:	83 85       	ldd	r24, Z+11	; 0x0b
    2388:	88 71       	andi	r24, 0x18	; 24
    238a:	fb 01       	movw	r30, r22
    238c:	84 87       	std	Z+12, r24	; 0x0c
			dj->fs->wflag = 1;
    238e:	e8 81       	ld	r30, Y
    2390:	f9 81       	ldd	r31, Y+1	; 0x01
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    2396:	84 2f       	mov	r24, r20
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    239e:	4e 85       	ldd	r20, Y+14	; 0x0e
    23a0:	5f 85       	ldd	r21, Y+15	; 0x0f
    23a2:	68 89       	ldd	r22, Y+16	; 0x10
    23a4:	79 89       	ldd	r23, Y+17	; 0x11
    23a6:	88 81       	ld	r24, Y
    23a8:	99 81       	ldd	r25, Y+1	; 0x01
    23aa:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    23ae:	48 2f       	mov	r20, r24
		if (res == FR_OK) {
    23b0:	88 23       	and	r24, r24
    23b2:	59 f2       	breq	.-106    	; 0x234a <dir_register+0x42>
    23b4:	f0 cf       	rjmp	.-32     	; 0x2396 <dir_register+0x8e>

000023b6 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
    23ba:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
    23bc:	6c 81       	ldd	r22, Y+4	; 0x04
    23be:	7d 81       	ldd	r23, Y+5	; 0x05
    23c0:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <dir_seek>
    23c4:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    23c6:	88 23       	and	r24, r24
    23c8:	99 f4       	brne	.+38     	; 0x23f0 <dir_remove+0x3a>
		res = move_window(dj->fs, dj->sect);
    23ca:	4e 85       	ldd	r20, Y+14	; 0x0e
    23cc:	5f 85       	ldd	r21, Y+15	; 0x0f
    23ce:	68 89       	ldd	r22, Y+16	; 0x10
    23d0:	79 89       	ldd	r23, Y+17	; 0x11
    23d2:	88 81       	ld	r24, Y
    23d4:	99 81       	ldd	r25, Y+1	; 0x01
    23d6:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    23da:	98 2f       	mov	r25, r24
		if (res == FR_OK) {
    23dc:	88 23       	and	r24, r24
    23de:	41 f4       	brne	.+16     	; 0x23f0 <dir_remove+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
    23e0:	ea 89       	ldd	r30, Y+18	; 0x12
    23e2:	fb 89       	ldd	r31, Y+19	; 0x13
    23e4:	85 ee       	ldi	r24, 0xE5	; 229
    23e6:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
    23e8:	e8 81       	ld	r30, Y
    23ea:	f9 81       	ldd	r31, Y+1	; 0x01
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    23f0:	89 2f       	mov	r24, r25
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	08 95       	ret

000023f8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    23f8:	ef 92       	push	r14
    23fa:	ff 92       	push	r15
    23fc:	0f 93       	push	r16
    23fe:	1f 93       	push	r17
    2400:	cf 93       	push	r28
    2402:	df 93       	push	r29
    2404:	fc 01       	movw	r30, r24
    2406:	7b 01       	movw	r14, r22
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    2408:	eb 01       	movw	r28, r22
    240a:	29 96       	adiw	r28, 0x09	; 9
	if (dj->sect) {
    240c:	86 85       	ldd	r24, Z+14	; 0x0e
    240e:	97 85       	ldd	r25, Z+15	; 0x0f
    2410:	a0 89       	ldd	r26, Z+16	; 0x10
    2412:	b1 89       	ldd	r27, Z+17	; 0x11
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	a1 05       	cpc	r26, r1
    2418:	b1 05       	cpc	r27, r1
    241a:	09 f4       	brne	.+2      	; 0x241e <get_fileinfo+0x26>
    241c:	71 c0       	rjmp	.+226    	; 0x2500 <get_fileinfo+0x108>
		dir = dj->dir;
    241e:	62 89       	ldd	r22, Z+18	; 0x12
    2420:	73 89       	ldd	r23, Z+19	; 0x13
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	90 e0       	ldi	r25, 0x00	; 0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    2426:	fb 01       	movw	r30, r22
    2428:	e8 0f       	add	r30, r24
    242a:	f9 1f       	adc	r31, r25
    242c:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    242e:	e0 32       	cpi	r30, 0x20	; 32
    2430:	41 f0       	breq	.+16     	; 0x2442 <get_fileinfo+0x4a>
			if (c == 0x05) c = 0xE5;
    2432:	e5 30       	cpi	r30, 0x05	; 5
    2434:	09 f4       	brne	.+2      	; 0x2438 <get_fileinfo+0x40>
    2436:	e5 ee       	ldi	r30, 0xE5	; 229
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
    2438:	e9 93       	st	Y+, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    243a:	01 96       	adiw	r24, 0x01	; 1
    243c:	88 30       	cpi	r24, 0x08	; 8
    243e:	91 05       	cpc	r25, r1
    2440:	91 f7       	brne	.-28     	; 0x2426 <get_fileinfo+0x2e>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    2442:	db 01       	movw	r26, r22
    2444:	18 96       	adiw	r26, 0x08	; 8
    2446:	8c 91       	ld	r24, X
    2448:	80 32       	cpi	r24, 0x20	; 32
    244a:	11 f4       	brne	.+4      	; 0x2450 <get_fileinfo+0x58>
    244c:	8e 01       	movw	r16, r28
    244e:	12 c0       	rjmp	.+36     	; 0x2474 <get_fileinfo+0x7c>
			*p++ = '.';
    2450:	8e e2       	ldi	r24, 0x2E	; 46
    2452:	fe 01       	movw	r30, r28
    2454:	81 93       	st	Z+, r24
    2456:	8f 01       	movw	r16, r30
    2458:	fb 01       	movw	r30, r22
			for (i = 8; i < 11; i++) {
    245a:	9e 01       	movw	r18, r28
    245c:	2c 5f       	subi	r18, 0xFC	; 252
    245e:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
    2460:	80 85       	ldd	r24, Z+8	; 0x08
				if (c == ' ') break;
    2462:	80 32       	cpi	r24, 0x20	; 32
    2464:	39 f0       	breq	.+14     	; 0x2474 <get_fileinfo+0x7c>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
    2466:	d8 01       	movw	r26, r16
    2468:	8d 93       	st	X+, r24
    246a:	8d 01       	movw	r16, r26
    246c:	31 96       	adiw	r30, 0x01	; 1
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    246e:	a2 17       	cp	r26, r18
    2470:	b3 07       	cpc	r27, r19
    2472:	b1 f7       	brne	.-20     	; 0x2460 <get_fileinfo+0x68>
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    2474:	fb 01       	movw	r30, r22
    2476:	83 85       	ldd	r24, Z+11	; 0x0b
    2478:	d7 01       	movw	r26, r14
    247a:	18 96       	adiw	r26, 0x08	; 8
    247c:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    247e:	27 8d       	ldd	r18, Z+31	; 0x1f
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	40 e0       	ldi	r20, 0x00	; 0
    2484:	50 e0       	ldi	r21, 0x00	; 0
    2486:	52 2f       	mov	r21, r18
    2488:	44 27       	eor	r20, r20
    248a:	33 27       	eor	r19, r19
    248c:	22 27       	eor	r18, r18
    248e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	a0 e0       	ldi	r26, 0x00	; 0
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	dc 01       	movw	r26, r24
    2498:	99 27       	eor	r25, r25
    249a:	88 27       	eor	r24, r24
    249c:	28 2b       	or	r18, r24
    249e:	39 2b       	or	r19, r25
    24a0:	4a 2b       	or	r20, r26
    24a2:	5b 2b       	or	r21, r27
    24a4:	84 8d       	ldd	r24, Z+28	; 0x1c
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	a0 e0       	ldi	r26, 0x00	; 0
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	28 2b       	or	r18, r24
    24ae:	39 2b       	or	r19, r25
    24b0:	4a 2b       	or	r20, r26
    24b2:	5b 2b       	or	r21, r27
    24b4:	95 8d       	ldd	r25, Z+29	; 0x1d
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	a0 e0       	ldi	r26, 0x00	; 0
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	28 2b       	or	r18, r24
    24be:	39 2b       	or	r19, r25
    24c0:	4a 2b       	or	r20, r26
    24c2:	5b 2b       	or	r21, r27
    24c4:	f7 01       	movw	r30, r14
    24c6:	20 83       	st	Z, r18
    24c8:	31 83       	std	Z+1, r19	; 0x01
    24ca:	42 83       	std	Z+2, r20	; 0x02
    24cc:	53 83       	std	Z+3, r21	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    24ce:	db 01       	movw	r26, r22
    24d0:	59 96       	adiw	r26, 0x19	; 25
    24d2:	9c 91       	ld	r25, X
    24d4:	59 97       	sbiw	r26, 0x19	; 25
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	58 96       	adiw	r26, 0x18	; 24
    24da:	2c 91       	ld	r18, X
    24dc:	58 97       	sbiw	r26, 0x18	; 24
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	82 2b       	or	r24, r18
    24e2:	93 2b       	or	r25, r19
    24e4:	84 83       	std	Z+4, r24	; 0x04
    24e6:	95 83       	std	Z+5, r25	; 0x05
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    24e8:	57 96       	adiw	r26, 0x17	; 23
    24ea:	9c 91       	ld	r25, X
    24ec:	57 97       	sbiw	r26, 0x17	; 23
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	56 96       	adiw	r26, 0x16	; 22
    24f2:	2c 91       	ld	r18, X
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	82 2b       	or	r24, r18
    24f8:	93 2b       	or	r25, r19
    24fa:	86 83       	std	Z+6, r24	; 0x06
    24fc:	97 83       	std	Z+7, r25	; 0x07
    24fe:	e8 01       	movw	r28, r16
	}
	*p = 0;
    2500:	18 82       	st	Y, r1
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
    2502:	df 91       	pop	r29
    2504:	cf 91       	pop	r28
    2506:	1f 91       	pop	r17
    2508:	0f 91       	pop	r16
    250a:	ff 90       	pop	r15
    250c:	ef 90       	pop	r14
    250e:	08 95       	ret

00002510 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    2510:	5f 92       	push	r5
    2512:	6f 92       	push	r6
    2514:	7f 92       	push	r7
    2516:	8f 92       	push	r8
    2518:	9f 92       	push	r9
    251a:	af 92       	push	r10
    251c:	bf 92       	push	r11
    251e:	cf 92       	push	r12
    2520:	df 92       	push	r13
    2522:	ef 92       	push	r14
    2524:	ff 92       	push	r15
    2526:	0f 93       	push	r16
    2528:	1f 93       	push	r17
    252a:	cf 93       	push	r28
    252c:	df 93       	push	r29
    252e:	ec 01       	movw	r28, r24
    2530:	7b 01       	movw	r14, r22
    2532:	03 c0       	rjmp	.+6      	; 0x253a <follow_path+0x2a>
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    2534:	08 94       	sec
    2536:	e1 1c       	adc	r14, r1
    2538:	f1 1c       	adc	r15, r1
    253a:	f7 01       	movw	r30, r14
    253c:	80 81       	ld	r24, Z
    253e:	80 32       	cpi	r24, 0x20	; 32
    2540:	c9 f3       	breq	.-14     	; 0x2534 <follow_path+0x24>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    2542:	8f 32       	cpi	r24, 0x2F	; 47
    2544:	11 f0       	breq	.+4      	; 0x254a <follow_path+0x3a>
    2546:	8c 35       	cpi	r24, 0x5C	; 92
    2548:	19 f4       	brne	.+6      	; 0x2550 <follow_path+0x40>
		path++;
    254a:	08 94       	sec
    254c:	e1 1c       	adc	r14, r1
    254e:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Start from the root dir */
    2550:	1e 82       	std	Y+6, r1	; 0x06
    2552:	1f 82       	std	Y+7, r1	; 0x07
    2554:	18 86       	std	Y+8, r1	; 0x08
    2556:	19 86       	std	Y+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    2558:	f7 01       	movw	r30, r14
    255a:	80 81       	ld	r24, Z
    255c:	80 32       	cpi	r24, 0x20	; 32
    255e:	40 f4       	brcc	.+16     	; 0x2570 <follow_path+0x60>
		res = dir_seek(dj, 0);
    2560:	ce 01       	movw	r24, r28
    2562:	60 e0       	ldi	r22, 0x00	; 0
    2564:	70 e0       	ldi	r23, 0x00	; 0
    2566:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <dir_seek>
		dj->dir = NULL;
    256a:	1a 8a       	std	Y+18, r1	; 0x12
    256c:	1b 8a       	std	Y+19, r1	; 0x13
    256e:	13 c1       	rjmp	.+550    	; 0x2796 <follow_path+0x286>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2570:	00 e2       	ldi	r16, 0x20	; 32
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    2572:	45 e0       	ldi	r20, 0x05	; 5
    2574:	54 2e       	mov	r5, r20
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    2576:	ac 89       	ldd	r26, Y+20	; 0x14
    2578:	bd 89       	ldd	r27, Y+21	; 0x15
    257a:	fd 01       	movw	r30, r26
    257c:	8b e0       	ldi	r24, 0x0B	; 11
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	01 c0       	rjmp	.+2      	; 0x2584 <follow_path+0x74>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2582:	01 93       	st	Z+, r16
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	2f ef       	ldi	r18, 0xFF	; 255
    2588:	8f 3f       	cpi	r24, 0xFF	; 255
    258a:	92 07       	cpc	r25, r18
    258c:	d1 f7       	brne	.-12     	; 0x2582 <follow_path+0x72>
    258e:	38 e0       	ldi	r19, 0x08	; 8
    2590:	a3 2e       	mov	r10, r19
    2592:	b1 2c       	mov	r11, r1
    2594:	10 e0       	ldi	r17, 0x00	; 0
    2596:	40 e0       	ldi	r20, 0x00	; 0
    2598:	50 e0       	ldi	r21, 0x00	; 0
    259a:	cc 24       	eor	r12, r12
    259c:	dd 24       	eor	r13, r13
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    259e:	f7 01       	movw	r30, r14
    25a0:	ec 0d       	add	r30, r12
    25a2:	fd 1d       	adc	r31, r13
    25a4:	20 81       	ld	r18, Z
    25a6:	08 94       	sec
    25a8:	c1 1c       	adc	r12, r1
    25aa:	d1 1c       	adc	r13, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    25ac:	21 32       	cpi	r18, 0x21	; 33
    25ae:	08 f4       	brcc	.+2      	; 0x25b2 <follow_path+0xa2>
    25b0:	66 c0       	rjmp	.+204    	; 0x267e <follow_path+0x16e>
    25b2:	2f 32       	cpi	r18, 0x2F	; 47
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <follow_path+0xa8>
    25b6:	ff c0       	rjmp	.+510    	; 0x27b6 <follow_path+0x2a6>
    25b8:	2c 35       	cpi	r18, 0x5C	; 92
    25ba:	09 f4       	brne	.+2      	; 0x25be <follow_path+0xae>
    25bc:	fc c0       	rjmp	.+504    	; 0x27b6 <follow_path+0x2a6>
		if (c == '.' || i >= ni) {
    25be:	2e 32       	cpi	r18, 0x2E	; 46
    25c0:	19 f0       	breq	.+6      	; 0x25c8 <follow_path+0xb8>
    25c2:	4a 15       	cp	r20, r10
    25c4:	5b 05       	cpc	r21, r11
    25c6:	84 f0       	brlt	.+32     	; 0x25e8 <follow_path+0xd8>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    25c8:	88 e0       	ldi	r24, 0x08	; 8
    25ca:	a8 16       	cp	r10, r24
    25cc:	b1 04       	cpc	r11, r1
    25ce:	09 f0       	breq	.+2      	; 0x25d2 <follow_path+0xc2>
    25d0:	dd c0       	rjmp	.+442    	; 0x278c <follow_path+0x27c>
    25d2:	2e 32       	cpi	r18, 0x2E	; 46
    25d4:	09 f0       	breq	.+2      	; 0x25d8 <follow_path+0xc8>
    25d6:	da c0       	rjmp	.+436    	; 0x278c <follow_path+0x27c>
			i = 8; ni = 11;
			b <<= 2; continue;
    25d8:	11 0f       	add	r17, r17
    25da:	11 0f       	add	r17, r17
    25dc:	2b e0       	ldi	r18, 0x0B	; 11
    25de:	a2 2e       	mov	r10, r18
    25e0:	b1 2c       	mov	r11, r1
    25e2:	48 e0       	ldi	r20, 0x08	; 8
    25e4:	50 e0       	ldi	r21, 0x00	; 0
    25e6:	db cf       	rjmp	.-74     	; 0x259e <follow_path+0x8e>
		}
		if (c >= 0x80) {				/* Extended char */
    25e8:	27 fd       	sbrc	r18, 7
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    25ea:	13 60       	ori	r17, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    25ec:	82 2f       	mov	r24, r18
    25ee:	81 58       	subi	r24, 0x81	; 129
    25f0:	8f 31       	cpi	r24, 0x1F	; 31
    25f2:	18 f0       	brcs	.+6      	; 0x25fa <follow_path+0xea>
    25f4:	8f 55       	subi	r24, 0x5F	; 95
    25f6:	8d 31       	cpi	r24, 0x1D	; 29
    25f8:	08 f5       	brcc	.+66     	; 0x263c <follow_path+0x12c>
			d = p[si++];				/* Get 2nd byte */
    25fa:	f7 01       	movw	r30, r14
    25fc:	ec 0d       	add	r30, r12
    25fe:	fd 1d       	adc	r31, r13
    2600:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    2602:	83 2f       	mov	r24, r19
    2604:	80 54       	subi	r24, 0x40	; 64
    2606:	8f 33       	cpi	r24, 0x3F	; 63
    2608:	20 f0       	brcs	.+8      	; 0x2612 <follow_path+0x102>
    260a:	80 54       	subi	r24, 0x40	; 64
    260c:	8d 37       	cpi	r24, 0x7D	; 125
    260e:	08 f0       	brcs	.+2      	; 0x2612 <follow_path+0x102>
    2610:	bd c0       	rjmp	.+378    	; 0x278c <follow_path+0x27c>
    2612:	c5 01       	movw	r24, r10
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	48 17       	cp	r20, r24
    2618:	59 07       	cpc	r21, r25
    261a:	0c f0       	brlt	.+2      	; 0x261e <follow_path+0x10e>
    261c:	b7 c0       	rjmp	.+366    	; 0x278c <follow_path+0x27c>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    261e:	08 94       	sec
    2620:	c1 1c       	adc	r12, r1
    2622:	d1 1c       	adc	r13, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    2624:	fd 01       	movw	r30, r26
    2626:	e4 0f       	add	r30, r20
    2628:	f5 1f       	adc	r31, r21
    262a:	20 83       	st	Z, r18
    262c:	ca 01       	movw	r24, r20
    262e:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    2630:	fd 01       	movw	r30, r26
    2632:	e8 0f       	add	r30, r24
    2634:	f9 1f       	adc	r31, r25
    2636:	30 83       	st	Z, r19
    2638:	ac 01       	movw	r20, r24
    263a:	1e c0       	rjmp	.+60     	; 0x2678 <follow_path+0x168>
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    263c:	62 2f       	mov	r22, r18
    263e:	70 e0       	ldi	r23, 0x00	; 0
    2640:	e0 e0       	ldi	r30, 0x00	; 0
    2642:	f0 e2       	ldi	r31, 0x20	; 32
    2644:	01 c0       	rjmp	.+2      	; 0x2648 <follow_path+0x138>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    2646:	31 96       	adiw	r30, 0x01	; 1
    2648:	80 81       	ld	r24, Z
    264a:	88 23       	and	r24, r24
    264c:	29 f0       	breq	.+10     	; 0x2658 <follow_path+0x148>
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	86 17       	cp	r24, r22
    2652:	97 07       	cpc	r25, r23
    2654:	c1 f7       	brne	.-16     	; 0x2646 <follow_path+0x136>
    2656:	9a c0       	rjmp	.+308    	; 0x278c <follow_path+0x27c>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    2658:	82 2f       	mov	r24, r18
    265a:	81 54       	subi	r24, 0x41	; 65
    265c:	8a 31       	cpi	r24, 0x1A	; 26
    265e:	10 f4       	brcc	.+4      	; 0x2664 <follow_path+0x154>
				b |= 2;
    2660:	12 60       	ori	r17, 0x02	; 2
    2662:	06 c0       	rjmp	.+12     	; 0x2670 <follow_path+0x160>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    2664:	82 2f       	mov	r24, r18
    2666:	81 56       	subi	r24, 0x61	; 97
    2668:	8a 31       	cpi	r24, 0x1A	; 26
    266a:	10 f4       	brcc	.+4      	; 0x2670 <follow_path+0x160>
					b |= 1; c -= 0x20;
    266c:	11 60       	ori	r17, 0x01	; 1
    266e:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    2670:	fd 01       	movw	r30, r26
    2672:	e4 0f       	add	r30, r20
    2674:	f5 1f       	adc	r31, r21
    2676:	20 83       	st	Z, r18
    2678:	4f 5f       	subi	r20, 0xFF	; 255
    267a:	5f 4f       	sbci	r21, 0xFF	; 255
    267c:	90 cf       	rjmp	.-224    	; 0x259e <follow_path+0x8e>
    267e:	91 2f       	mov	r25, r17
    2680:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    2682:	45 2b       	or	r20, r21
    2684:	09 f4       	brne	.+2      	; 0x2688 <follow_path+0x178>
    2686:	82 c0       	rjmp	.+260    	; 0x278c <follow_path+0x27c>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    2688:	8c 91       	ld	r24, X
    268a:	85 3e       	cpi	r24, 0xE5	; 229
    268c:	09 f4       	brne	.+2      	; 0x2690 <follow_path+0x180>
    268e:	5c 92       	st	X, r5

	if (ni == 8) b <<= 2;
    2690:	e8 e0       	ldi	r30, 0x08	; 8
    2692:	ae 16       	cp	r10, r30
    2694:	b1 04       	cpc	r11, r1
    2696:	19 f4       	brne	.+6      	; 0x269e <follow_path+0x18e>
    2698:	91 2f       	mov	r25, r17
    269a:	99 0f       	add	r25, r25
    269c:	99 0f       	add	r25, r25
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    269e:	29 2f       	mov	r18, r25
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	c9 01       	movw	r24, r18
    26a4:	83 70       	andi	r24, 0x03	; 3
    26a6:	90 70       	andi	r25, 0x00	; 0
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	09 f4       	brne	.+2      	; 0x26ae <follow_path+0x19e>
    26ac:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    26ae:	2c 70       	andi	r18, 0x0C	; 12
    26b0:	30 70       	andi	r19, 0x00	; 0
    26b2:	24 30       	cpi	r18, 0x04	; 4
    26b4:	31 05       	cpc	r19, r1
    26b6:	09 f4       	brne	.+2      	; 0x26ba <follow_path+0x1aa>
    26b8:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    26ba:	1b 96       	adiw	r26, 0x0b	; 11
    26bc:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    26be:	ce 01       	movw	r24, r28
    26c0:	60 e0       	ldi	r22, 0x00	; 0
    26c2:	70 e0       	ldi	r23, 0x00	; 0
    26c4:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <dir_seek>
    26c8:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    26ca:	88 23       	and	r24, r24
    26cc:	71 f5       	brne	.+92     	; 0x272a <follow_path+0x21a>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    26ce:	4e 85       	ldd	r20, Y+14	; 0x0e
    26d0:	5f 85       	ldd	r21, Y+15	; 0x0f
    26d2:	68 89       	ldd	r22, Y+16	; 0x10
    26d4:	79 89       	ldd	r23, Y+17	; 0x11
    26d6:	88 81       	ld	r24, Y
    26d8:	99 81       	ldd	r25, Y+1	; 0x01
    26da:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    26de:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    26e0:	88 23       	and	r24, r24
    26e2:	19 f5       	brne	.+70     	; 0x272a <follow_path+0x21a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    26e4:	ea 89       	ldd	r30, Y+18	; 0x12
    26e6:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    26e8:	80 81       	ld	r24, Z
    26ea:	88 23       	and	r24, r24
    26ec:	11 f4       	brne	.+4      	; 0x26f2 <follow_path+0x1e2>
    26ee:	44 e0       	ldi	r20, 0x04	; 4
    26f0:	1c c0       	rjmp	.+56     	; 0x272a <follow_path+0x21a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    26f2:	83 85       	ldd	r24, Z+11	; 0x0b
    26f4:	83 fd       	sbrc	r24, 3
    26f6:	14 c0       	rjmp	.+40     	; 0x2720 <follow_path+0x210>
    26f8:	df 01       	movw	r26, r30
    26fa:	8c 89       	ldd	r24, Y+20	; 0x14
    26fc:	9d 89       	ldd	r25, Y+21	; 0x15
    26fe:	9c 01       	movw	r18, r24
    2700:	f9 01       	movw	r30, r18
    2702:	2b e0       	ldi	r18, 0x0B	; 11
    2704:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    2706:	21 50       	subi	r18, 0x01	; 1
    2708:	30 40       	sbci	r19, 0x00	; 0
    270a:	8f ef       	ldi	r24, 0xFF	; 255
    270c:	2f 3f       	cpi	r18, 0xFF	; 255
    270e:	38 07       	cpc	r19, r24
    2710:	61 f0       	breq	.+24     	; 0x272a <follow_path+0x21a>
    2712:	9c 91       	ld	r25, X
    2714:	80 81       	ld	r24, Z
    2716:	98 17       	cp	r25, r24
    2718:	19 f4       	brne	.+6      	; 0x2720 <follow_path+0x210>
    271a:	11 96       	adiw	r26, 0x01	; 1
    271c:	31 96       	adiw	r30, 0x01	; 1
    271e:	f3 cf       	rjmp	.-26     	; 0x2706 <follow_path+0x1f6>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    2720:	ce 01       	movw	r24, r28
    2722:	60 e0       	ldi	r22, 0x00	; 0
    2724:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <dir_next>
    2728:	cf cf       	rjmp	.-98     	; 0x26c8 <follow_path+0x1b8>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    272a:	ec 89       	ldd	r30, Y+20	; 0x14
    272c:	fd 89       	ldd	r31, Y+21	; 0x15
    272e:	93 85       	ldd	r25, Z+11	; 0x0b
    2730:	94 70       	andi	r25, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    2732:	44 23       	and	r20, r20
    2734:	31 f0       	breq	.+12     	; 0x2742 <follow_path+0x232>
    2736:	84 2f       	mov	r24, r20
				if (res == FR_NO_FILE && !last)
    2738:	44 30       	cpi	r20, 0x04	; 4
    273a:	51 f5       	brne	.+84     	; 0x2790 <follow_path+0x280>
    273c:	99 23       	and	r25, r25
    273e:	51 f1       	breq	.+84     	; 0x2794 <follow_path+0x284>
    2740:	2a c0       	rjmp	.+84     	; 0x2796 <follow_path+0x286>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    2742:	99 23       	and	r25, r25
    2744:	29 f5       	brne	.+74     	; 0x2790 <follow_path+0x280>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    2746:	ea 89       	ldd	r30, Y+18	; 0x12
    2748:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    274a:	83 85       	ldd	r24, Z+11	; 0x0b
    274c:	84 ff       	sbrs	r24, 4
    274e:	22 c0       	rjmp	.+68     	; 0x2794 <follow_path+0x284>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    2750:	ec 0c       	add	r14, r12
    2752:	fd 1c       	adc	r15, r13
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    2754:	75 88       	ldd	r7, Z+21	; 0x15
    2756:	66 24       	eor	r6, r6
    2758:	24 89       	ldd	r18, Z+20	; 0x14
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	26 29       	or	r18, r6
    275e:	37 29       	or	r19, r7
    2760:	40 e0       	ldi	r20, 0x00	; 0
    2762:	50 e0       	ldi	r21, 0x00	; 0
    2764:	a9 01       	movw	r20, r18
    2766:	33 27       	eor	r19, r19
    2768:	22 27       	eor	r18, r18
    276a:	93 8c       	ldd	r9, Z+27	; 0x1b
    276c:	88 24       	eor	r8, r8
    276e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	88 29       	or	r24, r8
    2774:	99 29       	or	r25, r9
    2776:	a0 e0       	ldi	r26, 0x00	; 0
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	28 2b       	or	r18, r24
    277c:	39 2b       	or	r19, r25
    277e:	4a 2b       	or	r20, r26
    2780:	5b 2b       	or	r21, r27
    2782:	2e 83       	std	Y+6, r18	; 0x06
    2784:	3f 83       	std	Y+7, r19	; 0x07
    2786:	48 87       	std	Y+8, r20	; 0x08
    2788:	59 87       	std	Y+9, r21	; 0x09
    278a:	f5 ce       	rjmp	.-534    	; 0x2576 <follow_path+0x66>
		}
    278c:	86 e0       	ldi	r24, 0x06	; 6
    278e:	03 c0       	rjmp	.+6      	; 0x2796 <follow_path+0x286>
    2790:	84 2f       	mov	r24, r20
    2792:	01 c0       	rjmp	.+2      	; 0x2796 <follow_path+0x286>
    2794:	85 e0       	ldi	r24, 0x05	; 5
	}

	return res;
}
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	1f 91       	pop	r17
    279c:	0f 91       	pop	r16
    279e:	ff 90       	pop	r15
    27a0:	ef 90       	pop	r14
    27a2:	df 90       	pop	r13
    27a4:	cf 90       	pop	r12
    27a6:	bf 90       	pop	r11
    27a8:	af 90       	pop	r10
    27aa:	9f 90       	pop	r9
    27ac:	8f 90       	pop	r8
    27ae:	7f 90       	pop	r7
    27b0:	6f 90       	pop	r6
    27b2:	5f 90       	pop	r5
    27b4:	08 95       	ret
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
    27b6:	91 2f       	mov	r25, r17
    27b8:	60 e0       	ldi	r22, 0x00	; 0
    27ba:	63 cf       	rjmp	.-314    	; 0x2682 <follow_path+0x172>

000027bc <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    27bc:	0f 93       	push	r16
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	ec 01       	movw	r28, r24
    27c4:	9a 01       	movw	r18, r20
    27c6:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    27c8:	bc 01       	movw	r22, r24
    27ca:	62 5d       	subi	r22, 0xD2	; 210
    27cc:	7f 4f       	sbci	r23, 0xFF	; 255
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	01 e0       	ldi	r16, 0x01	; 1
    27d2:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_read>
    27d6:	88 23       	and	r24, r24
    27d8:	11 f0       	breq	.+4      	; 0x27de <check_fs+0x22>
    27da:	63 e0       	ldi	r22, 0x03	; 3
    27dc:	6d c0       	rjmp	.+218    	; 0x28b8 <check_fs+0xfc>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    27de:	c3 5d       	subi	r28, 0xD3	; 211
    27e0:	dd 4f       	sbci	r29, 0xFD	; 253
    27e2:	98 81       	ld	r25, Y
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	2a 91       	ld	r18, -Y
    27e8:	cc 52       	subi	r28, 0x2C	; 44
    27ea:	d2 40       	sbci	r29, 0x02	; 2
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	82 2b       	or	r24, r18
    27f0:	93 2b       	or	r25, r19
    27f2:	85 55       	subi	r24, 0x55	; 85
    27f4:	9a 4a       	sbci	r25, 0xAA	; 170
    27f6:	11 f0       	breq	.+4      	; 0x27fc <check_fs+0x40>
    27f8:	62 e0       	ldi	r22, 0x02	; 2
    27fa:	5e c0       	rjmp	.+188    	; 0x28b8 <check_fs+0xfc>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    27fc:	c9 59       	subi	r28, 0x99	; 153
    27fe:	df 4f       	sbci	r29, 0xFF	; 255
    2800:	28 81       	ld	r18, Y
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e0       	ldi	r20, 0x00	; 0
    2806:	50 e0       	ldi	r21, 0x00	; 0
    2808:	52 2f       	mov	r21, r18
    280a:	44 27       	eor	r20, r20
    280c:	33 27       	eor	r19, r19
    280e:	22 27       	eor	r18, r18
    2810:	8a 91       	ld	r24, -Y
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	a0 e0       	ldi	r26, 0x00	; 0
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	dc 01       	movw	r26, r24
    281a:	99 27       	eor	r25, r25
    281c:	88 27       	eor	r24, r24
    281e:	28 2b       	or	r18, r24
    2820:	39 2b       	or	r19, r25
    2822:	4a 2b       	or	r20, r26
    2824:	5b 2b       	or	r21, r27
    2826:	22 97       	sbiw	r28, 0x02	; 2
    2828:	89 91       	ld	r24, Y+
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	a0 e0       	ldi	r26, 0x00	; 0
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	28 2b       	or	r18, r24
    2832:	39 2b       	or	r19, r25
    2834:	4a 2b       	or	r20, r26
    2836:	5b 2b       	or	r21, r27
    2838:	98 81       	ld	r25, Y
    283a:	c5 56       	subi	r28, 0x65	; 101
    283c:	d0 40       	sbci	r29, 0x00	; 0
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	a0 e0       	ldi	r26, 0x00	; 0
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	28 2b       	or	r18, r24
    2846:	39 2b       	or	r19, r25
    2848:	4a 2b       	or	r20, r26
    284a:	5b 2b       	or	r21, r27
    284c:	50 70       	andi	r21, 0x00	; 0
    284e:	26 54       	subi	r18, 0x46	; 70
    2850:	31 44       	sbci	r19, 0x41	; 65
    2852:	44 45       	sbci	r20, 0x54	; 84
    2854:	50 40       	sbci	r21, 0x00	; 0
    2856:	11 f4       	brne	.+4      	; 0x285c <check_fs+0xa0>
    2858:	60 e0       	ldi	r22, 0x00	; 0
    285a:	2e c0       	rjmp	.+92     	; 0x28b8 <check_fs+0xfc>
    285c:	60 e0       	ldi	r22, 0x00	; 0
    285e:	cd 57       	subi	r28, 0x7D	; 125
    2860:	df 4f       	sbci	r29, 0xFF	; 255
    2862:	28 81       	ld	r18, Y
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e0       	ldi	r20, 0x00	; 0
    2868:	50 e0       	ldi	r21, 0x00	; 0
    286a:	52 2f       	mov	r21, r18
    286c:	44 27       	eor	r20, r20
    286e:	33 27       	eor	r19, r19
    2870:	22 27       	eor	r18, r18
    2872:	8a 91       	ld	r24, -Y
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	a0 e0       	ldi	r26, 0x00	; 0
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	dc 01       	movw	r26, r24
    287c:	99 27       	eor	r25, r25
    287e:	88 27       	eor	r24, r24
    2880:	28 2b       	or	r18, r24
    2882:	39 2b       	or	r19, r25
    2884:	4a 2b       	or	r20, r26
    2886:	5b 2b       	or	r21, r27
    2888:	22 97       	sbiw	r28, 0x02	; 2
    288a:	89 91       	ld	r24, Y+
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	a0 e0       	ldi	r26, 0x00	; 0
    2890:	b0 e0       	ldi	r27, 0x00	; 0
    2892:	28 2b       	or	r18, r24
    2894:	39 2b       	or	r19, r25
    2896:	4a 2b       	or	r20, r26
    2898:	5b 2b       	or	r21, r27
    289a:	98 81       	ld	r25, Y
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	a0 e0       	ldi	r26, 0x00	; 0
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	28 2b       	or	r18, r24
    28a4:	39 2b       	or	r19, r25
    28a6:	4a 2b       	or	r20, r26
    28a8:	5b 2b       	or	r21, r27
    28aa:	50 70       	andi	r21, 0x00	; 0
    28ac:	26 54       	subi	r18, 0x46	; 70
    28ae:	31 44       	sbci	r19, 0x41	; 65
    28b0:	44 45       	sbci	r20, 0x54	; 84
    28b2:	50 40       	sbci	r21, 0x00	; 0
    28b4:	09 f0       	breq	.+2      	; 0x28b8 <check_fs+0xfc>
    28b6:	61 e0       	ldi	r22, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    28b8:	86 2f       	mov	r24, r22
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	0f 91       	pop	r16
    28c0:	08 95       	ret

000028c2 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    28c2:	6f 92       	push	r6
    28c4:	7f 92       	push	r7
    28c6:	8f 92       	push	r8
    28c8:	9f 92       	push	r9
    28ca:	af 92       	push	r10
    28cc:	bf 92       	push	r11
    28ce:	cf 92       	push	r12
    28d0:	df 92       	push	r13
    28d2:	ef 92       	push	r14
    28d4:	ff 92       	push	r15
    28d6:	0f 93       	push	r16
    28d8:	1f 93       	push	r17
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	fc 01       	movw	r30, r24
    28e0:	9b 01       	movw	r18, r22
    28e2:	f4 2e       	mov	r15, r20
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    28e4:	a0 81       	ld	r26, Z
    28e6:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    28e8:	8c 91       	ld	r24, X
    28ea:	08 2f       	mov	r16, r24
    28ec:	10 e0       	ldi	r17, 0x00	; 0
    28ee:	00 53       	subi	r16, 0x30	; 48
    28f0:	10 40       	sbci	r17, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    28f2:	0a 30       	cpi	r16, 0x0A	; 10
    28f4:	11 05       	cpc	r17, r1
    28f6:	68 f4       	brcc	.+26     	; 0x2912 <chk_mounted+0x50>
    28f8:	11 96       	adiw	r26, 0x01	; 1
    28fa:	8c 91       	ld	r24, X
    28fc:	11 97       	sbiw	r26, 0x01	; 1
    28fe:	8a 33       	cpi	r24, 0x3A	; 58
    2900:	41 f4       	brne	.+16     	; 0x2912 <chk_mounted+0x50>
		p += 2; *path = p;			/* Return pointer to the path name */
    2902:	12 96       	adiw	r26, 0x02	; 2
    2904:	a0 83       	st	Z, r26
    2906:	b1 83       	std	Z+1, r27	; 0x01
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    2908:	02 30       	cpi	r16, 0x02	; 2
    290a:	11 05       	cpc	r17, r1
    290c:	20 f0       	brcs	.+8      	; 0x2916 <chk_mounted+0x54>
    290e:	8b e0       	ldi	r24, 0x0B	; 11
    2910:	91 c2       	rjmp	.+1314   	; 0x2e34 <chk_mounted+0x572>
    2912:	00 e0       	ldi	r16, 0x00	; 0
    2914:	10 e0       	ldi	r17, 0x00	; 0
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    2916:	f8 01       	movw	r30, r16
    2918:	ee 0f       	add	r30, r30
    291a:	ff 1f       	adc	r31, r31
    291c:	e0 5a       	subi	r30, 0xA0	; 160
    291e:	f2 4d       	sbci	r31, 0xD2	; 210
    2920:	c0 81       	ld	r28, Z
    2922:	d1 81       	ldd	r29, Z+1	; 0x01
    2924:	f9 01       	movw	r30, r18
    2926:	c0 83       	st	Z, r28
    2928:	d1 83       	std	Z+1, r29	; 0x01
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    292a:	20 97       	sbiw	r28, 0x00	; 0
    292c:	11 f4       	brne	.+4      	; 0x2932 <chk_mounted+0x70>
    292e:	8c e0       	ldi	r24, 0x0C	; 12
    2930:	81 c2       	rjmp	.+1282   	; 0x2e34 <chk_mounted+0x572>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    2932:	88 81       	ld	r24, Y
    2934:	88 23       	and	r24, r24
    2936:	79 f0       	breq	.+30     	; 0x2956 <chk_mounted+0x94>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	88 23       	and	r24, r24
    293c:	11 f0       	breq	.+4      	; 0x2942 <chk_mounted+0x80>
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <chk_mounted+0x84>
	return Stat;
    2942:	80 91 d3 2c 	lds	r24, 0x2CD3
		stat = disk_status(fs->drive);
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    2946:	80 fd       	sbrc	r24, 0
    2948:	06 c0       	rjmp	.+12     	; 0x2956 <chk_mounted+0x94>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    294a:	ff 20       	and	r15, r15
    294c:	09 f4       	brne	.+2      	; 0x2950 <chk_mounted+0x8e>
    294e:	6f c2       	rjmp	.+1246   	; 0x2e2e <chk_mounted+0x56c>
    2950:	82 fd       	sbrc	r24, 2
    2952:	6b c2       	rjmp	.+1238   	; 0x2e2a <chk_mounted+0x568>
    2954:	6c c2       	rjmp	.+1240   	; 0x2e2e <chk_mounted+0x56c>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    2956:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    2958:	f8 01       	movw	r30, r16
    295a:	ee 0f       	add	r30, r30
    295c:	ff 1f       	adc	r31, r31
    295e:	e6 5d       	subi	r30, 0xD6	; 214
    2960:	f9 4d       	sbci	r31, 0xD9	; 217
    2962:	80 81       	ld	r24, Z
    2964:	89 83       	std	Y+1, r24	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    2966:	0e 94 2a 06 	call	0xc54	; 0xc54 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    296a:	80 ff       	sbrs	r24, 0
    296c:	02 c0       	rjmp	.+4      	; 0x2972 <chk_mounted+0xb0>
    296e:	83 e0       	ldi	r24, 0x03	; 3
    2970:	61 c2       	rjmp	.+1218   	; 0x2e34 <chk_mounted+0x572>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    2972:	ff 20       	and	r15, r15
    2974:	11 f0       	breq	.+4      	; 0x297a <chk_mounted+0xb8>
    2976:	82 fd       	sbrc	r24, 2
    2978:	58 c2       	rjmp	.+1200   	; 0x2e2a <chk_mounted+0x568>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    297a:	ce 01       	movw	r24, r28
    297c:	40 e0       	ldi	r20, 0x00	; 0
    297e:	50 e0       	ldi	r21, 0x00	; 0
    2980:	60 e0       	ldi	r22, 0x00	; 0
    2982:	70 e0       	ldi	r23, 0x00	; 0
    2984:	0e 94 de 13 	call	0x27bc	; 0x27bc <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    2988:	81 30       	cpi	r24, 0x01	; 1
    298a:	21 f0       	breq	.+8      	; 0x2994 <chk_mounted+0xd2>
    298c:	aa 24       	eor	r10, r10
    298e:	bb 24       	eor	r11, r11
    2990:	65 01       	movw	r12, r10
    2992:	3d c0       	rjmp	.+122    	; 0x2a0e <chk_mounted+0x14c>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    2994:	00 0f       	add	r16, r16
    2996:	11 1f       	adc	r17, r17
    2998:	06 5d       	subi	r16, 0xD6	; 214
    299a:	19 4d       	sbci	r17, 0xD9	; 217
    299c:	f8 01       	movw	r30, r16
    299e:	81 81       	ldd	r24, Z+1	; 0x01
    29a0:	e8 2f       	mov	r30, r24
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	a4 e0       	ldi	r26, 0x04	; 4
    29a6:	ee 0f       	add	r30, r30
    29a8:	ff 1f       	adc	r31, r31
    29aa:	aa 95       	dec	r26
    29ac:	e1 f7       	brne	.-8      	; 0x29a6 <chk_mounted+0xe4>
    29ae:	e4 51       	subi	r30, 0x14	; 20
    29b0:	fe 4f       	sbci	r31, 0xFE	; 254
    29b2:	ec 0f       	add	r30, r28
    29b4:	fd 1f       	adc	r31, r29
		if (tbl[4]) {									/* Is the partition existing? */
    29b6:	84 81       	ldd	r24, Z+4	; 0x04
    29b8:	88 23       	and	r24, r24
    29ba:	09 f4       	brne	.+2      	; 0x29be <chk_mounted+0xfc>
    29bc:	3a c2       	rjmp	.+1140   	; 0x2e32 <chk_mounted+0x570>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    29be:	83 85       	ldd	r24, Z+11	; 0x0b
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	a0 e0       	ldi	r26, 0x00	; 0
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	d8 2e       	mov	r13, r24
    29c8:	cc 24       	eor	r12, r12
    29ca:	bb 24       	eor	r11, r11
    29cc:	aa 24       	eor	r10, r10
    29ce:	82 85       	ldd	r24, Z+10	; 0x0a
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	a0 e0       	ldi	r26, 0x00	; 0
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	dc 01       	movw	r26, r24
    29d8:	99 27       	eor	r25, r25
    29da:	88 27       	eor	r24, r24
    29dc:	a8 2a       	or	r10, r24
    29de:	b9 2a       	or	r11, r25
    29e0:	ca 2a       	or	r12, r26
    29e2:	db 2a       	or	r13, r27
    29e4:	80 85       	ldd	r24, Z+8	; 0x08
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	a0 e0       	ldi	r26, 0x00	; 0
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	a8 2a       	or	r10, r24
    29ee:	b9 2a       	or	r11, r25
    29f0:	ca 2a       	or	r12, r26
    29f2:	db 2a       	or	r13, r27
    29f4:	91 85       	ldd	r25, Z+9	; 0x09
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	a0 e0       	ldi	r26, 0x00	; 0
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	a8 2a       	or	r10, r24
    29fe:	b9 2a       	or	r11, r25
    2a00:	ca 2a       	or	r12, r26
    2a02:	db 2a       	or	r13, r27
			fmt = check_fs(fs, bsect);					/* Check the partition */
    2a04:	ce 01       	movw	r24, r28
    2a06:	b6 01       	movw	r22, r12
    2a08:	a5 01       	movw	r20, r10
    2a0a:	0e 94 de 13 	call	0x27bc	; 0x27bc <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    2a0e:	83 30       	cpi	r24, 0x03	; 3
    2a10:	11 f4       	brne	.+4      	; 0x2a16 <chk_mounted+0x154>
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	0f c2       	rjmp	.+1054   	; 0x2e34 <chk_mounted+0x572>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    2a16:	88 23       	and	r24, r24
    2a18:	09 f0       	breq	.+2      	; 0x2a1c <chk_mounted+0x15a>
    2a1a:	0b c2       	rjmp	.+1046   	; 0x2e32 <chk_mounted+0x570>
    2a1c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	29 ad       	ldd	r18, Y+57	; 0x39
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	82 2b       	or	r24, r18
    2a26:	93 2b       	or	r25, r19
    2a28:	80 50       	subi	r24, 0x00	; 0
    2a2a:	92 40       	sbci	r25, 0x02	; 2
    2a2c:	09 f0       	breq	.+2      	; 0x2a30 <chk_mounted+0x16e>
    2a2e:	01 c2       	rjmp	.+1026   	; 0x2e32 <chk_mounted+0x570>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    2a30:	cb 5b       	subi	r28, 0xBB	; 187
    2a32:	df 4f       	sbci	r29, 0xFF	; 255
    2a34:	98 81       	ld	r25, Y
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	2a 91       	ld	r18, -Y
    2a3a:	c4 54       	subi	r28, 0x44	; 68
    2a3c:	d0 40       	sbci	r29, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	82 2b       	or	r24, r18
    2a42:	93 2b       	or	r25, r19
    2a44:	7c 01       	movw	r14, r24
    2a46:	00 e0       	ldi	r16, 0x00	; 0
    2a48:	10 e0       	ldi	r17, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    2a4a:	e1 14       	cp	r14, r1
    2a4c:	f1 04       	cpc	r15, r1
    2a4e:	01 05       	cpc	r16, r1
    2a50:	11 05       	cpc	r17, r1
    2a52:	41 f5       	brne	.+80     	; 0x2aa4 <chk_mounted+0x1e2>
    2a54:	cb 5a       	subi	r28, 0xAB	; 171
    2a56:	df 4f       	sbci	r29, 0xFF	; 255
    2a58:	88 81       	ld	r24, Y
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	a0 e0       	ldi	r26, 0x00	; 0
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	18 2f       	mov	r17, r24
    2a62:	00 27       	eor	r16, r16
    2a64:	ff 24       	eor	r15, r15
    2a66:	ee 24       	eor	r14, r14
    2a68:	8a 91       	ld	r24, -Y
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	a0 e0       	ldi	r26, 0x00	; 0
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	dc 01       	movw	r26, r24
    2a72:	99 27       	eor	r25, r25
    2a74:	88 27       	eor	r24, r24
    2a76:	e8 2a       	or	r14, r24
    2a78:	f9 2a       	or	r15, r25
    2a7a:	0a 2b       	or	r16, r26
    2a7c:	1b 2b       	or	r17, r27
    2a7e:	22 97       	sbiw	r28, 0x02	; 2
    2a80:	89 91       	ld	r24, Y+
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	a0 e0       	ldi	r26, 0x00	; 0
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	e8 2a       	or	r14, r24
    2a8a:	f9 2a       	or	r15, r25
    2a8c:	0a 2b       	or	r16, r26
    2a8e:	1b 2b       	or	r17, r27
    2a90:	98 81       	ld	r25, Y
    2a92:	c3 55       	subi	r28, 0x53	; 83
    2a94:	d0 40       	sbci	r29, 0x00	; 0
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	a0 e0       	ldi	r26, 0x00	; 0
    2a9a:	b0 e0       	ldi	r27, 0x00	; 0
    2a9c:	e8 2a       	or	r14, r24
    2a9e:	f9 2a       	or	r15, r25
    2aa0:	0a 2b       	or	r16, r26
    2aa2:	1b 2b       	or	r17, r27
	fs->sects_fat = fsize;
    2aa4:	ee 8a       	std	Y+22, r14	; 0x16
    2aa6:	ff 8a       	std	Y+23, r15	; 0x17
    2aa8:	08 8f       	std	Y+24, r16	; 0x18
    2aaa:	19 8f       	std	Y+25, r17	; 0x19
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    2aac:	2e ad       	ldd	r18, Y+62	; 0x3e
    2aae:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e0       	ldi	r20, 0x00	; 0
    2ab4:	50 e0       	ldi	r21, 0x00	; 0
    2ab6:	c8 01       	movw	r24, r16
    2ab8:	b7 01       	movw	r22, r14
    2aba:	0e 94 54 50 	call	0xa0a8	; 0xa0a8 <__mulsi3>
    2abe:	3b 01       	movw	r6, r22
    2ac0:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    2ac2:	9d ad       	ldd	r25, Y+61	; 0x3d
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	2c ad       	ldd	r18, Y+60	; 0x3c
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	82 2b       	or	r24, r18
    2acc:	93 2b       	or	r25, r19
    2ace:	a0 e0       	ldi	r26, 0x00	; 0
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	8a 0d       	add	r24, r10
    2ad4:	9b 1d       	adc	r25, r11
    2ad6:	ac 1d       	adc	r26, r12
    2ad8:	bd 1d       	adc	r27, r13
    2ada:	8e 8f       	std	Y+30, r24	; 0x1e
    2adc:	9f 8f       	std	Y+31, r25	; 0x1f
    2ade:	a8 a3       	std	Y+32, r26	; 0x20
    2ae0:	b9 a3       	std	Y+33, r27	; 0x21
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    2ae2:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ae4:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    2ae6:	c0 5c       	subi	r28, 0xC0	; 192
    2ae8:	df 4f       	sbci	r29, 0xFF	; 255
    2aea:	98 81       	ld	r25, Y
    2aec:	c0 54       	subi	r28, 0x40	; 64
    2aee:	d0 40       	sbci	r29, 0x00	; 0
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	2f ad       	ldd	r18, Y+63	; 0x3f
    2af4:	42 2f       	mov	r20, r18
    2af6:	50 e0       	ldi	r21, 0x00	; 0
    2af8:	48 2b       	or	r20, r24
    2afa:	59 2b       	or	r21, r25
    2afc:	48 87       	std	Y+8, r20	; 0x08
    2afe:	59 87       	std	Y+9, r21	; 0x09
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    2b00:	ce 5b       	subi	r28, 0xBE	; 190
    2b02:	df 4f       	sbci	r29, 0xFF	; 255
    2b04:	98 81       	ld	r25, Y
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	2a 91       	ld	r18, -Y
    2b0a:	c1 54       	subi	r28, 0x41	; 65
    2b0c:	d0 40       	sbci	r29, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	82 2b       	or	r24, r18
    2b12:	93 2b       	or	r25, r19
    2b14:	7c 01       	movw	r14, r24
    2b16:	00 e0       	ldi	r16, 0x00	; 0
    2b18:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    2b1a:	e1 14       	cp	r14, r1
    2b1c:	f1 04       	cpc	r15, r1
    2b1e:	01 05       	cpc	r16, r1
    2b20:	11 05       	cpc	r17, r1
    2b22:	41 f5       	brne	.+80     	; 0x2b74 <chk_mounted+0x2b2>
    2b24:	cf 5a       	subi	r28, 0xAF	; 175
    2b26:	df 4f       	sbci	r29, 0xFF	; 255
    2b28:	88 81       	ld	r24, Y
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	a0 e0       	ldi	r26, 0x00	; 0
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	18 2f       	mov	r17, r24
    2b32:	00 27       	eor	r16, r16
    2b34:	ff 24       	eor	r15, r15
    2b36:	ee 24       	eor	r14, r14
    2b38:	8a 91       	ld	r24, -Y
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	a0 e0       	ldi	r26, 0x00	; 0
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	dc 01       	movw	r26, r24
    2b42:	99 27       	eor	r25, r25
    2b44:	88 27       	eor	r24, r24
    2b46:	e8 2a       	or	r14, r24
    2b48:	f9 2a       	or	r15, r25
    2b4a:	0a 2b       	or	r16, r26
    2b4c:	1b 2b       	or	r17, r27
    2b4e:	22 97       	sbiw	r28, 0x02	; 2
    2b50:	89 91       	ld	r24, Y+
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	a0 e0       	ldi	r26, 0x00	; 0
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	e8 2a       	or	r14, r24
    2b5a:	f9 2a       	or	r15, r25
    2b5c:	0a 2b       	or	r16, r26
    2b5e:	1b 2b       	or	r17, r27
    2b60:	98 81       	ld	r25, Y
    2b62:	cf 54       	subi	r28, 0x4F	; 79
    2b64:	d0 40       	sbci	r29, 0x00	; 0
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	a0 e0       	ldi	r26, 0x00	; 0
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	e8 2a       	or	r14, r24
    2b6e:	f9 2a       	or	r15, r25
    2b70:	0a 2b       	or	r16, r26
    2b72:	1b 2b       	or	r17, r27
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    2b74:	9d ad       	ldd	r25, Y+61	; 0x3d
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	2c ad       	ldd	r18, Y+60	; 0x3c
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	82 2b       	or	r24, r18
    2b7e:	93 2b       	or	r25, r19
    2b80:	a0 e0       	ldi	r26, 0x00	; 0
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	e8 1a       	sub	r14, r24
    2b86:	f9 0a       	sbc	r15, r25
    2b88:	0a 0b       	sbc	r16, r26
    2b8a:	1b 0b       	sbc	r17, r27
    2b8c:	e6 18       	sub	r14, r6
    2b8e:	f7 08       	sbc	r15, r7
    2b90:	08 09       	sbc	r16, r8
    2b92:	19 09       	sbc	r17, r9
    2b94:	f4 e0       	ldi	r31, 0x04	; 4
    2b96:	56 95       	lsr	r21
    2b98:	47 95       	ror	r20
    2b9a:	fa 95       	dec	r31
    2b9c:	e1 f7       	brne	.-8      	; 0x2b96 <chk_mounted+0x2d4>
    2b9e:	ca 01       	movw	r24, r20
    2ba0:	a0 e0       	ldi	r26, 0x00	; 0
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	e8 1a       	sub	r14, r24
    2ba6:	f9 0a       	sbc	r15, r25
    2ba8:	0a 0b       	sbc	r16, r26
    2baa:	1b 0b       	sbc	r17, r27
    2bac:	2a 81       	ldd	r18, Y+2	; 0x02
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e0       	ldi	r20, 0x00	; 0
    2bb2:	50 e0       	ldi	r21, 0x00	; 0
    2bb4:	c8 01       	movw	r24, r16
    2bb6:	b7 01       	movw	r22, r14
    2bb8:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    2bbc:	2e 5f       	subi	r18, 0xFE	; 254
    2bbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc0:	4f 4f       	sbci	r20, 0xFF	; 255
    2bc2:	5f 4f       	sbci	r21, 0xFF	; 255
    2bc4:	2a 8f       	std	Y+26, r18	; 0x1a
    2bc6:	3b 8f       	std	Y+27, r19	; 0x1b
    2bc8:	4c 8f       	std	Y+28, r20	; 0x1c
    2bca:	5d 8f       	std	Y+29, r21	; 0x1d
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    2bcc:	27 3f       	cpi	r18, 0xF7	; 247
    2bce:	8f e0       	ldi	r24, 0x0F	; 15
    2bd0:	38 07       	cpc	r19, r24
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	48 07       	cpc	r20, r24
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	58 07       	cpc	r21, r24
    2bda:	10 f4       	brcc	.+4      	; 0x2be0 <chk_mounted+0x31e>
    2bdc:	11 e0       	ldi	r17, 0x01	; 1
    2bde:	07 c0       	rjmp	.+14     	; 0x2bee <chk_mounted+0x32c>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    2be0:	27 5f       	subi	r18, 0xF7	; 247
    2be2:	3f 4f       	sbci	r19, 0xFF	; 255
    2be4:	40 40       	sbci	r20, 0x00	; 0
    2be6:	50 40       	sbci	r21, 0x00	; 0
    2be8:	08 f0       	brcs	.+2      	; 0x2bec <chk_mounted+0x32a>
    2bea:	33 c1       	rjmp	.+614    	; 0x2e52 <chk_mounted+0x590>
    2bec:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    2bee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bf0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bf2:	a8 a1       	ldd	r26, Y+32	; 0x20
    2bf4:	b9 a1       	ldd	r27, Y+33	; 0x21
    2bf6:	86 0d       	add	r24, r6
    2bf8:	97 1d       	adc	r25, r7
    2bfa:	a8 1d       	adc	r26, r8
    2bfc:	b9 1d       	adc	r27, r9
    2bfe:	8a a3       	std	Y+34, r24	; 0x22
    2c00:	9b a3       	std	Y+35, r25	; 0x23
    2c02:	ac a3       	std	Y+36, r26	; 0x24
    2c04:	bd a3       	std	Y+37, r27	; 0x25
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    2c06:	88 85       	ldd	r24, Y+8	; 0x08
    2c08:	99 85       	ldd	r25, Y+9	; 0x09
    2c0a:	e4 e0       	ldi	r30, 0x04	; 4
    2c0c:	96 95       	lsr	r25
    2c0e:	87 95       	ror	r24
    2c10:	ea 95       	dec	r30
    2c12:	e1 f7       	brne	.-8      	; 0x2c0c <chk_mounted+0x34a>
    2c14:	a0 e0       	ldi	r26, 0x00	; 0
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2c1a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2c1c:	48 a1       	ldd	r20, Y+32	; 0x20
    2c1e:	59 a1       	ldd	r21, Y+33	; 0x21
    2c20:	82 0f       	add	r24, r18
    2c22:	93 1f       	adc	r25, r19
    2c24:	a4 1f       	adc	r26, r20
    2c26:	b5 1f       	adc	r27, r21
    2c28:	86 0d       	add	r24, r6
    2c2a:	97 1d       	adc	r25, r7
    2c2c:	a8 1d       	adc	r26, r8
    2c2e:	b9 1d       	adc	r27, r9
    2c30:	8e a3       	std	Y+38, r24	; 0x26
    2c32:	9f a3       	std	Y+39, r25	; 0x27
    2c34:	a8 a7       	std	Y+40, r26	; 0x28
    2c36:	b9 a7       	std	Y+41, r27	; 0x29

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    2c38:	8f ef       	ldi	r24, 0xFF	; 255
    2c3a:	9f ef       	ldi	r25, 0xFF	; 255
    2c3c:	af ef       	ldi	r26, 0xFF	; 255
    2c3e:	bf ef       	ldi	r27, 0xFF	; 255
    2c40:	8e 87       	std	Y+14, r24	; 0x0e
    2c42:	9f 87       	std	Y+15, r25	; 0x0f
    2c44:	a8 8b       	std	Y+16, r26	; 0x10
    2c46:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    2c48:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    2c4a:	13 30       	cpi	r17, 0x03	; 3
    2c4c:	09 f0       	breq	.+2      	; 0x2c50 <chk_mounted+0x38e>
    2c4e:	dc c0       	rjmp	.+440    	; 0x2e08 <chk_mounted+0x546>
	 	fs->fsi_flag = 0;
    2c50:	1d 82       	std	Y+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    2c52:	c1 5a       	subi	r28, 0xA1	; 161
    2c54:	df 4f       	sbci	r29, 0xFF	; 255
    2c56:	38 81       	ld	r19, Y
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	8a 91       	ld	r24, -Y
    2c5c:	ce 55       	subi	r28, 0x5E	; 94
    2c5e:	d0 40       	sbci	r29, 0x00	; 0
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	28 2b       	or	r18, r24
    2c64:	39 2b       	or	r19, r25
    2c66:	40 e0       	ldi	r20, 0x00	; 0
    2c68:	50 e0       	ldi	r21, 0x00	; 0
    2c6a:	2a 0d       	add	r18, r10
    2c6c:	3b 1d       	adc	r19, r11
    2c6e:	4c 1d       	adc	r20, r12
    2c70:	5d 1d       	adc	r21, r13
    2c72:	2a 8b       	std	Y+18, r18	; 0x12
    2c74:	3b 8b       	std	Y+19, r19	; 0x13
    2c76:	4c 8b       	std	Y+20, r20	; 0x14
    2c78:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    2c7a:	be 01       	movw	r22, r28
    2c7c:	62 5d       	subi	r22, 0xD2	; 210
    2c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	01 e0       	ldi	r16, 0x01	; 1
    2c84:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_read>
    2c88:	88 23       	and	r24, r24
    2c8a:	09 f0       	breq	.+2      	; 0x2c8e <chk_mounted+0x3cc>
    2c8c:	bd c0       	rjmp	.+378    	; 0x2e08 <chk_mounted+0x546>
    2c8e:	c3 5d       	subi	r28, 0xD3	; 211
    2c90:	dd 4f       	sbci	r29, 0xFD	; 253
    2c92:	98 81       	ld	r25, Y
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	2a 91       	ld	r18, -Y
    2c98:	cc 52       	subi	r28, 0x2C	; 44
    2c9a:	d2 40       	sbci	r29, 0x02	; 2
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	82 2b       	or	r24, r18
    2ca0:	93 2b       	or	r25, r19
    2ca2:	85 55       	subi	r24, 0x55	; 85
    2ca4:	9a 4a       	sbci	r25, 0xAA	; 170
    2ca6:	09 f0       	breq	.+2      	; 0x2caa <chk_mounted+0x3e8>
    2ca8:	af c0       	rjmp	.+350    	; 0x2e08 <chk_mounted+0x546>
    2caa:	29 a9       	ldd	r18, Y+49	; 0x31
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	40 e0       	ldi	r20, 0x00	; 0
    2cb0:	50 e0       	ldi	r21, 0x00	; 0
    2cb2:	52 2f       	mov	r21, r18
    2cb4:	44 27       	eor	r20, r20
    2cb6:	33 27       	eor	r19, r19
    2cb8:	22 27       	eor	r18, r18
    2cba:	88 a9       	ldd	r24, Y+48	; 0x30
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	a0 e0       	ldi	r26, 0x00	; 0
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	99 27       	eor	r25, r25
    2cc6:	88 27       	eor	r24, r24
    2cc8:	28 2b       	or	r18, r24
    2cca:	39 2b       	or	r19, r25
    2ccc:	4a 2b       	or	r20, r26
    2cce:	5b 2b       	or	r21, r27
    2cd0:	8e a5       	ldd	r24, Y+46	; 0x2e
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	a0 e0       	ldi	r26, 0x00	; 0
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	28 2b       	or	r18, r24
    2cda:	39 2b       	or	r19, r25
    2cdc:	4a 2b       	or	r20, r26
    2cde:	5b 2b       	or	r21, r27
    2ce0:	9f a5       	ldd	r25, Y+47	; 0x2f
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	a0 e0       	ldi	r26, 0x00	; 0
    2ce6:	b0 e0       	ldi	r27, 0x00	; 0
    2ce8:	28 2b       	or	r18, r24
    2cea:	39 2b       	or	r19, r25
    2cec:	4a 2b       	or	r20, r26
    2cee:	5b 2b       	or	r21, r27
    2cf0:	22 55       	subi	r18, 0x52	; 82
    2cf2:	32 45       	sbci	r19, 0x52	; 82
    2cf4:	41 46       	sbci	r20, 0x61	; 97
    2cf6:	51 44       	sbci	r21, 0x41	; 65
    2cf8:	09 f0       	breq	.+2      	; 0x2cfc <chk_mounted+0x43a>
    2cfa:	86 c0       	rjmp	.+268    	; 0x2e08 <chk_mounted+0x546>
    2cfc:	cb 5e       	subi	r28, 0xEB	; 235
    2cfe:	dd 4f       	sbci	r29, 0xFD	; 253
    2d00:	28 81       	ld	r18, Y
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	40 e0       	ldi	r20, 0x00	; 0
    2d06:	50 e0       	ldi	r21, 0x00	; 0
    2d08:	52 2f       	mov	r21, r18
    2d0a:	44 27       	eor	r20, r20
    2d0c:	33 27       	eor	r19, r19
    2d0e:	22 27       	eor	r18, r18
    2d10:	8a 91       	ld	r24, -Y
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	a0 e0       	ldi	r26, 0x00	; 0
    2d16:	b0 e0       	ldi	r27, 0x00	; 0
    2d18:	dc 01       	movw	r26, r24
    2d1a:	99 27       	eor	r25, r25
    2d1c:	88 27       	eor	r24, r24
    2d1e:	28 2b       	or	r18, r24
    2d20:	39 2b       	or	r19, r25
    2d22:	4a 2b       	or	r20, r26
    2d24:	5b 2b       	or	r21, r27
    2d26:	22 97       	sbiw	r28, 0x02	; 2
    2d28:	89 91       	ld	r24, Y+
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	a0 e0       	ldi	r26, 0x00	; 0
    2d2e:	b0 e0       	ldi	r27, 0x00	; 0
    2d30:	28 2b       	or	r18, r24
    2d32:	39 2b       	or	r19, r25
    2d34:	4a 2b       	or	r20, r26
    2d36:	5b 2b       	or	r21, r27
    2d38:	98 81       	ld	r25, Y
    2d3a:	c3 51       	subi	r28, 0x13	; 19
    2d3c:	d2 40       	sbci	r29, 0x02	; 2
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	a0 e0       	ldi	r26, 0x00	; 0
    2d42:	b0 e0       	ldi	r27, 0x00	; 0
    2d44:	28 2b       	or	r18, r24
    2d46:	39 2b       	or	r19, r25
    2d48:	4a 2b       	or	r20, r26
    2d4a:	5b 2b       	or	r21, r27
    2d4c:	22 57       	subi	r18, 0x72	; 114
    2d4e:	32 47       	sbci	r19, 0x72	; 114
    2d50:	41 44       	sbci	r20, 0x41	; 65
    2d52:	51 46       	sbci	r21, 0x61	; 97
    2d54:	09 f0       	breq	.+2      	; 0x2d58 <chk_mounted+0x496>
    2d56:	58 c0       	rjmp	.+176    	; 0x2e08 <chk_mounted+0x546>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    2d58:	c3 5e       	subi	r28, 0xE3	; 227
    2d5a:	dd 4f       	sbci	r29, 0xFD	; 253
    2d5c:	28 81       	ld	r18, Y
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e0       	ldi	r20, 0x00	; 0
    2d62:	50 e0       	ldi	r21, 0x00	; 0
    2d64:	52 2f       	mov	r21, r18
    2d66:	44 27       	eor	r20, r20
    2d68:	33 27       	eor	r19, r19
    2d6a:	22 27       	eor	r18, r18
    2d6c:	8a 91       	ld	r24, -Y
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	a0 e0       	ldi	r26, 0x00	; 0
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	dc 01       	movw	r26, r24
    2d76:	99 27       	eor	r25, r25
    2d78:	88 27       	eor	r24, r24
    2d7a:	28 2b       	or	r18, r24
    2d7c:	39 2b       	or	r19, r25
    2d7e:	4a 2b       	or	r20, r26
    2d80:	5b 2b       	or	r21, r27
    2d82:	22 97       	sbiw	r28, 0x02	; 2
    2d84:	89 91       	ld	r24, Y+
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	a0 e0       	ldi	r26, 0x00	; 0
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	28 2b       	or	r18, r24
    2d8e:	39 2b       	or	r19, r25
    2d90:	4a 2b       	or	r20, r26
    2d92:	5b 2b       	or	r21, r27
    2d94:	98 81       	ld	r25, Y
    2d96:	cb 51       	subi	r28, 0x1B	; 27
    2d98:	d2 40       	sbci	r29, 0x02	; 2
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	a0 e0       	ldi	r26, 0x00	; 0
    2d9e:	b0 e0       	ldi	r27, 0x00	; 0
    2da0:	28 2b       	or	r18, r24
    2da2:	39 2b       	or	r19, r25
    2da4:	4a 2b       	or	r20, r26
    2da6:	5b 2b       	or	r21, r27
    2da8:	2a 87       	std	Y+10, r18	; 0x0a
    2daa:	3b 87       	std	Y+11, r19	; 0x0b
    2dac:	4c 87       	std	Y+12, r20	; 0x0c
    2dae:	5d 87       	std	Y+13, r21	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2db0:	c7 5e       	subi	r28, 0xE7	; 231
    2db2:	dd 4f       	sbci	r29, 0xFD	; 253
    2db4:	28 81       	ld	r18, Y
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	40 e0       	ldi	r20, 0x00	; 0
    2dba:	50 e0       	ldi	r21, 0x00	; 0
    2dbc:	52 2f       	mov	r21, r18
    2dbe:	44 27       	eor	r20, r20
    2dc0:	33 27       	eor	r19, r19
    2dc2:	22 27       	eor	r18, r18
    2dc4:	8a 91       	ld	r24, -Y
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	a0 e0       	ldi	r26, 0x00	; 0
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	dc 01       	movw	r26, r24
    2dce:	99 27       	eor	r25, r25
    2dd0:	88 27       	eor	r24, r24
    2dd2:	28 2b       	or	r18, r24
    2dd4:	39 2b       	or	r19, r25
    2dd6:	4a 2b       	or	r20, r26
    2dd8:	5b 2b       	or	r21, r27
    2dda:	22 97       	sbiw	r28, 0x02	; 2
    2ddc:	89 91       	ld	r24, Y+
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	a0 e0       	ldi	r26, 0x00	; 0
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	28 2b       	or	r18, r24
    2de6:	39 2b       	or	r19, r25
    2de8:	4a 2b       	or	r20, r26
    2dea:	5b 2b       	or	r21, r27
    2dec:	98 81       	ld	r25, Y
    2dee:	c7 51       	subi	r28, 0x17	; 23
    2df0:	d2 40       	sbci	r29, 0x02	; 2
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	a0 e0       	ldi	r26, 0x00	; 0
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	28 2b       	or	r18, r24
    2dfa:	39 2b       	or	r19, r25
    2dfc:	4a 2b       	or	r20, r26
    2dfe:	5b 2b       	or	r21, r27
    2e00:	2e 87       	std	Y+14, r18	; 0x0e
    2e02:	3f 87       	std	Y+15, r19	; 0x0f
    2e04:	48 8b       	std	Y+16, r20	; 0x10
    2e06:	59 8b       	std	Y+17, r21	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    2e08:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    2e0a:	1a a6       	std	Y+42, r1	; 0x2a
    2e0c:	1b a6       	std	Y+43, r1	; 0x2b
    2e0e:	1c a6       	std	Y+44, r1	; 0x2c
    2e10:	1d a6       	std	Y+45, r1	; 0x2d
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    2e12:	80 91 64 2d 	lds	r24, 0x2D64
    2e16:	90 91 65 2d 	lds	r25, 0x2D65
    2e1a:	01 96       	adiw	r24, 0x01	; 1
    2e1c:	80 93 64 2d 	sts	0x2D64, r24
    2e20:	90 93 65 2d 	sts	0x2D65, r25
    2e24:	8e 83       	std	Y+6, r24	; 0x06
    2e26:	9f 83       	std	Y+7, r25	; 0x07
    2e28:	02 c0       	rjmp	.+4      	; 0x2e2e <chk_mounted+0x56c>

	return FR_OK;
    2e2a:	8a e0       	ldi	r24, 0x0A	; 10
    2e2c:	03 c0       	rjmp	.+6      	; 0x2e34 <chk_mounted+0x572>
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	01 c0       	rjmp	.+2      	; 0x2e34 <chk_mounted+0x572>
    2e32:	8d e0       	ldi	r24, 0x0D	; 13
}
    2e34:	df 91       	pop	r29
    2e36:	cf 91       	pop	r28
    2e38:	1f 91       	pop	r17
    2e3a:	0f 91       	pop	r16
    2e3c:	ff 90       	pop	r15
    2e3e:	ef 90       	pop	r14
    2e40:	df 90       	pop	r13
    2e42:	cf 90       	pop	r12
    2e44:	bf 90       	pop	r11
    2e46:	af 90       	pop	r10
    2e48:	9f 90       	pop	r9
    2e4a:	8f 90       	pop	r8
    2e4c:	7f 90       	pop	r7
    2e4e:	6f 90       	pop	r6
    2e50:	08 95       	ret
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2e52:	c3 5a       	subi	r28, 0xA3	; 163
    2e54:	df 4f       	sbci	r29, 0xFF	; 255
    2e56:	28 81       	ld	r18, Y
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	40 e0       	ldi	r20, 0x00	; 0
    2e5c:	50 e0       	ldi	r21, 0x00	; 0
    2e5e:	52 2f       	mov	r21, r18
    2e60:	44 27       	eor	r20, r20
    2e62:	33 27       	eor	r19, r19
    2e64:	22 27       	eor	r18, r18
    2e66:	8a 91       	ld	r24, -Y
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	a0 e0       	ldi	r26, 0x00	; 0
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	dc 01       	movw	r26, r24
    2e70:	99 27       	eor	r25, r25
    2e72:	88 27       	eor	r24, r24
    2e74:	28 2b       	or	r18, r24
    2e76:	39 2b       	or	r19, r25
    2e78:	4a 2b       	or	r20, r26
    2e7a:	5b 2b       	or	r21, r27
    2e7c:	22 97       	sbiw	r28, 0x02	; 2
    2e7e:	89 91       	ld	r24, Y+
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	a0 e0       	ldi	r26, 0x00	; 0
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	28 2b       	or	r18, r24
    2e88:	39 2b       	or	r19, r25
    2e8a:	4a 2b       	or	r20, r26
    2e8c:	5b 2b       	or	r21, r27
    2e8e:	98 81       	ld	r25, Y
    2e90:	cb 55       	subi	r28, 0x5B	; 91
    2e92:	d0 40       	sbci	r29, 0x00	; 0
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	a0 e0       	ldi	r26, 0x00	; 0
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	28 2b       	or	r18, r24
    2e9c:	39 2b       	or	r19, r25
    2e9e:	4a 2b       	or	r20, r26
    2ea0:	5b 2b       	or	r21, r27
    2ea2:	2a a3       	std	Y+34, r18	; 0x22
    2ea4:	3b a3       	std	Y+35, r19	; 0x23
    2ea6:	4c a3       	std	Y+36, r20	; 0x24
    2ea8:	5d a3       	std	Y+37, r21	; 0x25
    2eaa:	13 e0       	ldi	r17, 0x03	; 3
    2eac:	ac ce       	rjmp	.-680    	; 0x2c06 <chk_mounted+0x344>

00002eae <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    2eae:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    2eb0:	00 97       	sbiw	r24, 0x00	; 0
    2eb2:	a9 f0       	breq	.+42     	; 0x2ede <validate+0x30>
    2eb4:	80 81       	ld	r24, Z
    2eb6:	88 23       	and	r24, r24
    2eb8:	91 f0       	breq	.+36     	; 0x2ede <validate+0x30>
    2eba:	86 81       	ldd	r24, Z+6	; 0x06
    2ebc:	97 81       	ldd	r25, Z+7	; 0x07
    2ebe:	86 17       	cp	r24, r22
    2ec0:	97 07       	cpc	r25, r23
    2ec2:	69 f4       	brne	.+26     	; 0x2ede <validate+0x30>

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2ec4:	81 81       	ldd	r24, Z+1	; 0x01
    2ec6:	88 23       	and	r24, r24
    2ec8:	11 f0       	breq	.+4      	; 0x2ece <validate+0x20>
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	02 c0       	rjmp	.+4      	; 0x2ed2 <validate+0x24>
	return Stat;
    2ece:	80 91 d3 2c 	lds	r24, 0x2CD3
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
    2ed2:	80 fd       	sbrc	r24, 0
    2ed4:	02 c0       	rjmp	.+4      	; 0x2eda <validate+0x2c>
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	08 95       	ret
    2eda:	83 e0       	ldi	r24, 0x03	; 3
    2edc:	08 95       	ret
    2ede:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    2ee0:	08 95       	ret

00002ee2 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    2ee2:	cf 93       	push	r28
    2ee4:	df 93       	push	r29
    2ee6:	eb 01       	movw	r28, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    2ee8:	82 30       	cpi	r24, 0x02	; 2
    2eea:	10 f0       	brcs	.+4      	; 0x2ef0 <f_mount+0xe>
    2eec:	8b e0       	ldi	r24, 0x0B	; 11
    2eee:	17 c0       	rjmp	.+46     	; 0x2f1e <f_mount+0x3c>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    2ef0:	a8 2f       	mov	r26, r24
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	fd 01       	movw	r30, r26
    2ef6:	ee 0f       	add	r30, r30
    2ef8:	ff 1f       	adc	r31, r31
    2efa:	e0 5a       	subi	r30, 0xA0	; 160
    2efc:	f2 4d       	sbci	r31, 0xD2	; 210
    2efe:	01 90       	ld	r0, Z+
    2f00:	f0 81       	ld	r31, Z
    2f02:	e0 2d       	mov	r30, r0

	if (rfs) {
    2f04:	30 97       	sbiw	r30, 0x00	; 0
    2f06:	09 f0       	breq	.+2      	; 0x2f0a <f_mount+0x28>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    2f08:	10 82       	st	Z, r1
	}

	if (fs) {
    2f0a:	20 97       	sbiw	r28, 0x00	; 0
    2f0c:	09 f0       	breq	.+2      	; 0x2f10 <f_mount+0x2e>
		fs->fs_type = 0;			/* Clear new fs object */
    2f0e:	18 82       	st	Y, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    2f10:	aa 0f       	add	r26, r26
    2f12:	bb 1f       	adc	r27, r27
    2f14:	a0 5a       	subi	r26, 0xA0	; 160
    2f16:	b2 4d       	sbci	r27, 0xD2	; 210
    2f18:	cd 93       	st	X+, r28
    2f1a:	dc 93       	st	X, r29
    2f1c:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    2f1e:	df 91       	pop	r29
    2f20:	cf 91       	pop	r28
    2f22:	08 95       	ret

00002f24 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2f24:	5f 92       	push	r5
    2f26:	6f 92       	push	r6
    2f28:	7f 92       	push	r7
    2f2a:	8f 92       	push	r8
    2f2c:	9f 92       	push	r9
    2f2e:	af 92       	push	r10
    2f30:	bf 92       	push	r11
    2f32:	cf 92       	push	r12
    2f34:	df 92       	push	r13
    2f36:	ef 92       	push	r14
    2f38:	ff 92       	push	r15
    2f3a:	0f 93       	push	r16
    2f3c:	1f 93       	push	r17
    2f3e:	df 93       	push	r29
    2f40:	cf 93       	push	r28
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
    2f46:	a4 97       	sbiw	r28, 0x24	; 36
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	de bf       	out	0x3e, r29	; 62
    2f4c:	3c 01       	movw	r6, r24
    2f4e:	6b a3       	std	Y+35, r22	; 0x23
    2f50:	7c a3       	std	Y+36, r23	; 0x24
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    2f52:	dc 01       	movw	r26, r24
    2f54:	1d 92       	st	X+, r1
    2f56:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    2f58:	5f e1       	ldi	r21, 0x1F	; 31
    2f5a:	55 2e       	mov	r5, r21
    2f5c:	54 22       	and	r5, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    2f5e:	8e 01       	movw	r16, r28
    2f60:	03 5f       	subi	r16, 0xF3	; 243
    2f62:	1f 4f       	sbci	r17, 0xFF	; 255
    2f64:	4e 71       	andi	r20, 0x1E	; 30
    2f66:	ce 01       	movw	r24, r28
    2f68:	83 96       	adiw	r24, 0x23	; 35
    2f6a:	b8 01       	movw	r22, r16
    2f6c:	0e 94 61 14 	call	0x28c2	; 0x28c2 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2f70:	88 23       	and	r24, r24
    2f72:	11 f0       	breq	.+4      	; 0x2f78 <f_open+0x54>
    2f74:	28 2f       	mov	r18, r24
    2f76:	37 c1       	rjmp	.+622    	; 0x31e6 <f_open+0x2c2>
	INITBUF(dj, sfn, lfn);
    2f78:	ce 01       	movw	r24, r28
    2f7a:	01 96       	adiw	r24, 0x01	; 1
    2f7c:	89 a3       	std	Y+33, r24	; 0x21
    2f7e:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);	/* Follow the file path */
    2f80:	6b a1       	ldd	r22, Y+35	; 0x23
    2f82:	7c a1       	ldd	r23, Y+36	; 0x24
    2f84:	c8 01       	movw	r24, r16
    2f86:	0e 94 88 12 	call	0x2510	; 0x2510 <follow_path>
    2f8a:	28 2f       	mov	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2f8c:	45 2d       	mov	r20, r5
    2f8e:	50 e0       	ldi	r21, 0x00	; 0
    2f90:	ca 01       	movw	r24, r20
    2f92:	8c 71       	andi	r24, 0x1C	; 28
    2f94:	90 70       	andi	r25, 0x00	; 0
    2f96:	89 2b       	or	r24, r25
    2f98:	09 f4       	brne	.+2      	; 0x2f9c <f_open+0x78>
    2f9a:	88 c0       	rjmp	.+272    	; 0x30ac <f_open+0x188>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    2f9c:	22 23       	and	r18, r18
    2f9e:	79 f0       	breq	.+30     	; 0x2fbe <f_open+0x9a>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    2fa0:	24 30       	cpi	r18, 0x04	; 4
    2fa2:	09 f0       	breq	.+2      	; 0x2fa6 <f_open+0x82>
    2fa4:	20 c1       	rjmp	.+576    	; 0x31e6 <f_open+0x2c2>
				res = dir_register(&dj);
    2fa6:	c8 01       	movw	r24, r16
    2fa8:	0e 94 84 11 	call	0x2308	; 0x2308 <dir_register>
    2fac:	28 2f       	mov	r18, r24
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2fae:	88 23       	and	r24, r24
    2fb0:	09 f0       	breq	.+2      	; 0x2fb4 <f_open+0x90>
    2fb2:	19 c1       	rjmp	.+562    	; 0x31e6 <f_open+0x2c2>
			mode |= FA_CREATE_ALWAYS;
    2fb4:	b8 e0       	ldi	r27, 0x08	; 8
    2fb6:	5b 2a       	or	r5, r27
			dir = dj.dir;			/* Created entry (SFN entry) */
    2fb8:	cf 8c       	ldd	r12, Y+31	; 0x1f
    2fba:	d8 a0       	ldd	r13, Y+32	; 0x20
    2fbc:	5b c0       	rjmp	.+182    	; 0x3074 <f_open+0x150>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    2fbe:	52 fe       	sbrs	r5, 2
    2fc0:	02 c0       	rjmp	.+4      	; 0x2fc6 <f_open+0xa2>
    2fc2:	28 e0       	ldi	r18, 0x08	; 8
    2fc4:	10 c1       	rjmp	.+544    	; 0x31e6 <f_open+0x2c2>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    2fc6:	cf 8c       	ldd	r12, Y+31	; 0x1f
    2fc8:	d8 a0       	ldd	r13, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    2fca:	c1 14       	cp	r12, r1
    2fcc:	d1 04       	cpc	r13, r1
    2fce:	09 f4       	brne	.+2      	; 0x2fd2 <f_open+0xae>
    2fd0:	07 c1       	rjmp	.+526    	; 0x31e0 <f_open+0x2bc>
    2fd2:	f6 01       	movw	r30, r12
    2fd4:	83 85       	ldd	r24, Z+11	; 0x0b
    2fd6:	81 71       	andi	r24, 0x11	; 17
    2fd8:	09 f0       	breq	.+2      	; 0x2fdc <f_open+0xb8>
    2fda:	02 c1       	rjmp	.+516    	; 0x31e0 <f_open+0x2bc>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    2fdc:	53 fe       	sbrs	r5, 3
    2fde:	4a c0       	rjmp	.+148    	; 0x3074 <f_open+0x150>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    2fe0:	95 89       	ldd	r25, Z+21	; 0x15
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	24 89       	ldd	r18, Z+20	; 0x14
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	82 2b       	or	r24, r18
    2fea:	93 2b       	or	r25, r19
    2fec:	a0 e0       	ldi	r26, 0x00	; 0
    2fee:	b0 e0       	ldi	r27, 0x00	; 0
    2ff0:	8c 01       	movw	r16, r24
    2ff2:	ff 24       	eor	r15, r15
    2ff4:	ee 24       	eor	r14, r14
    2ff6:	93 8d       	ldd	r25, Z+27	; 0x1b
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	22 8d       	ldd	r18, Z+26	; 0x1a
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	82 2b       	or	r24, r18
    3000:	93 2b       	or	r25, r19
    3002:	a0 e0       	ldi	r26, 0x00	; 0
    3004:	b0 e0       	ldi	r27, 0x00	; 0
    3006:	e8 2a       	or	r14, r24
    3008:	f9 2a       	or	r15, r25
    300a:	0a 2b       	or	r16, r26
    300c:	1b 2b       	or	r17, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    300e:	14 8a       	std	Z+20, r1	; 0x14
    3010:	15 8a       	std	Z+21, r1	; 0x15
				ST_WORD(dir+DIR_FstClusLO, 0);
    3012:	12 8e       	std	Z+26, r1	; 0x1a
    3014:	13 8e       	std	Z+27, r1	; 0x1b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    3016:	14 8e       	std	Z+28, r1	; 0x1c
    3018:	15 8e       	std	Z+29, r1	; 0x1d
    301a:	16 8e       	std	Z+30, r1	; 0x1e
    301c:	17 8e       	std	Z+31, r1	; 0x1f
				dj.fs->wflag = 1;
    301e:	ed 85       	ldd	r30, Y+13	; 0x0d
    3020:	fe 85       	ldd	r31, Y+14	; 0x0e
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    3026:	82 a4       	ldd	r8, Z+42	; 0x2a
    3028:	93 a4       	ldd	r9, Z+43	; 0x2b
    302a:	a4 a4       	ldd	r10, Z+44	; 0x2c
    302c:	b5 a4       	ldd	r11, Z+45	; 0x2d
				if (cl) {
    302e:	e1 14       	cp	r14, r1
    3030:	f1 04       	cpc	r15, r1
    3032:	01 05       	cpc	r16, r1
    3034:	11 05       	cpc	r17, r1
    3036:	a1 f0       	breq	.+40     	; 0x3060 <f_open+0x13c>
					res = remove_chain(dj.fs, cl);
    3038:	cf 01       	movw	r24, r30
    303a:	b8 01       	movw	r22, r16
    303c:	a7 01       	movw	r20, r14
    303e:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <remove_chain>
    3042:	28 2f       	mov	r18, r24
					if (res) LEAVE_FF(dj.fs, res);
    3044:	88 23       	and	r24, r24
    3046:	09 f0       	breq	.+2      	; 0x304a <f_open+0x126>
    3048:	ce c0       	rjmp	.+412    	; 0x31e6 <f_open+0x2c2>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    304a:	ed 85       	ldd	r30, Y+13	; 0x0d
    304c:	fe 85       	ldd	r31, Y+14	; 0x0e
    304e:	08 94       	sec
    3050:	e1 08       	sbc	r14, r1
    3052:	f1 08       	sbc	r15, r1
    3054:	01 09       	sbc	r16, r1
    3056:	11 09       	sbc	r17, r1
    3058:	e2 86       	std	Z+10, r14	; 0x0a
    305a:	f3 86       	std	Z+11, r15	; 0x0b
    305c:	04 87       	std	Z+12, r16	; 0x0c
    305e:	15 87       	std	Z+13, r17	; 0x0d
				}
				res = move_window(dj.fs, ps);
    3060:	8d 85       	ldd	r24, Y+13	; 0x0d
    3062:	9e 85       	ldd	r25, Y+14	; 0x0e
    3064:	b5 01       	movw	r22, r10
    3066:	a4 01       	movw	r20, r8
    3068:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    306c:	28 2f       	mov	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    306e:	88 23       	and	r24, r24
    3070:	09 f0       	breq	.+2      	; 0x3074 <f_open+0x150>
    3072:	b9 c0       	rjmp	.+370    	; 0x31e6 <f_open+0x2c2>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    3074:	53 fe       	sbrs	r5, 3
    3076:	2c c0       	rjmp	.+88     	; 0x30d0 <f_open+0x1ac>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    3078:	d6 01       	movw	r26, r12
    307a:	1b 96       	adiw	r26, 0x0b	; 11
    307c:	1c 92       	st	X, r1
			ps = get_fattime();
    307e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    3082:	f6 01       	movw	r30, r12
    3084:	66 87       	std	Z+14, r22	; 0x0e
    3086:	27 2f       	mov	r18, r23
    3088:	33 27       	eor	r19, r19
    308a:	27 87       	std	Z+15, r18	; 0x0f
    308c:	9c 01       	movw	r18, r24
    308e:	44 27       	eor	r20, r20
    3090:	55 27       	eor	r21, r21
    3092:	20 8b       	std	Z+16, r18	; 0x10
    3094:	69 2f       	mov	r22, r25
    3096:	77 27       	eor	r23, r23
    3098:	88 27       	eor	r24, r24
    309a:	99 27       	eor	r25, r25
    309c:	61 8b       	std	Z+17, r22	; 0x11
			dj.fs->wflag = 1;
    309e:	ed 85       	ldd	r30, Y+13	; 0x0d
    30a0:	fe 85       	ldd	r31, Y+14	; 0x0e
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    30a6:	f0 e2       	ldi	r31, 0x20	; 32
    30a8:	5f 2a       	or	r5, r31
    30aa:	12 c0       	rjmp	.+36     	; 0x30d0 <f_open+0x1ac>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    30ac:	22 23       	and	r18, r18
    30ae:	09 f0       	breq	.+2      	; 0x30b2 <f_open+0x18e>
    30b0:	9a c0       	rjmp	.+308    	; 0x31e6 <f_open+0x2c2>
		dir = dj.dir;
    30b2:	cf 8c       	ldd	r12, Y+31	; 0x1f
    30b4:	d8 a0       	ldd	r13, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    30b6:	c1 14       	cp	r12, r1
    30b8:	d1 04       	cpc	r13, r1
    30ba:	09 f4       	brne	.+2      	; 0x30be <f_open+0x19a>
    30bc:	93 c0       	rjmp	.+294    	; 0x31e4 <f_open+0x2c0>
    30be:	d6 01       	movw	r26, r12
    30c0:	1b 96       	adiw	r26, 0x0b	; 11
    30c2:	8c 91       	ld	r24, X
    30c4:	84 fd       	sbrc	r24, 4
    30c6:	8e c0       	rjmp	.+284    	; 0x31e4 <f_open+0x2c0>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    30c8:	51 fe       	sbrs	r5, 1
    30ca:	02 c0       	rjmp	.+4      	; 0x30d0 <f_open+0x1ac>
    30cc:	80 fd       	sbrc	r24, 0
    30ce:	88 c0       	rjmp	.+272    	; 0x31e0 <f_open+0x2bc>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    30d0:	ed 85       	ldd	r30, Y+13	; 0x0d
    30d2:	fe 85       	ldd	r31, Y+14	; 0x0e
    30d4:	22 a5       	ldd	r18, Z+42	; 0x2a
    30d6:	33 a5       	ldd	r19, Z+43	; 0x2b
    30d8:	44 a5       	ldd	r20, Z+44	; 0x2c
    30da:	55 a5       	ldd	r21, Z+45	; 0x2d
    30dc:	d3 01       	movw	r26, r6
    30de:	5a 96       	adiw	r26, 0x1a	; 26
    30e0:	2d 93       	st	X+, r18
    30e2:	3d 93       	st	X+, r19
    30e4:	4d 93       	st	X+, r20
    30e6:	5c 93       	st	X, r21
    30e8:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    30ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30ec:	98 a1       	ldd	r25, Y+32	; 0x20
    30ee:	5e 96       	adiw	r26, 0x1e	; 30
    30f0:	8d 93       	st	X+, r24
    30f2:	9c 93       	st	X, r25
    30f4:	5f 97       	sbiw	r26, 0x1f	; 31
#endif
	fp->flag = mode;					/* File access mode */
    30f6:	14 96       	adiw	r26, 0x04	; 4
    30f8:	5c 92       	st	X, r5
	fp->org_clust =						/* File start cluster */
    30fa:	d6 01       	movw	r26, r12
    30fc:	55 96       	adiw	r26, 0x15	; 21
    30fe:	3c 91       	ld	r19, X
    3100:	55 97       	sbiw	r26, 0x15	; 21
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	54 96       	adiw	r26, 0x14	; 20
    3106:	8c 91       	ld	r24, X
    3108:	54 97       	sbiw	r26, 0x14	; 20
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	28 2b       	or	r18, r24
    310e:	39 2b       	or	r19, r25
    3110:	40 e0       	ldi	r20, 0x00	; 0
    3112:	50 e0       	ldi	r21, 0x00	; 0
    3114:	a9 01       	movw	r20, r18
    3116:	33 27       	eor	r19, r19
    3118:	22 27       	eor	r18, r18
    311a:	5b 96       	adiw	r26, 0x1b	; 27
    311c:	9c 91       	ld	r25, X
    311e:	5b 97       	sbiw	r26, 0x1b	; 27
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	5a 96       	adiw	r26, 0x1a	; 26
    3124:	6c 91       	ld	r22, X
    3126:	70 e0       	ldi	r23, 0x00	; 0
    3128:	86 2b       	or	r24, r22
    312a:	97 2b       	or	r25, r23
    312c:	a0 e0       	ldi	r26, 0x00	; 0
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	28 2b       	or	r18, r24
    3132:	39 2b       	or	r19, r25
    3134:	4a 2b       	or	r20, r26
    3136:	5b 2b       	or	r21, r27
    3138:	d3 01       	movw	r26, r6
    313a:	1e 96       	adiw	r26, 0x0e	; 14
    313c:	2d 93       	st	X+, r18
    313e:	3d 93       	st	X+, r19
    3140:	4d 93       	st	X+, r20
    3142:	5c 93       	st	X, r21
    3144:	51 97       	sbiw	r26, 0x11	; 17
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    3146:	d6 01       	movw	r26, r12
    3148:	5f 96       	adiw	r26, 0x1f	; 31
    314a:	2c 91       	ld	r18, X
    314c:	5f 97       	sbiw	r26, 0x1f	; 31
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	40 e0       	ldi	r20, 0x00	; 0
    3152:	50 e0       	ldi	r21, 0x00	; 0
    3154:	52 2f       	mov	r21, r18
    3156:	44 27       	eor	r20, r20
    3158:	33 27       	eor	r19, r19
    315a:	22 27       	eor	r18, r18
    315c:	5e 96       	adiw	r26, 0x1e	; 30
    315e:	8c 91       	ld	r24, X
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	a0 e0       	ldi	r26, 0x00	; 0
    3164:	b0 e0       	ldi	r27, 0x00	; 0
    3166:	dc 01       	movw	r26, r24
    3168:	99 27       	eor	r25, r25
    316a:	88 27       	eor	r24, r24
    316c:	28 2b       	or	r18, r24
    316e:	39 2b       	or	r19, r25
    3170:	4a 2b       	or	r20, r26
    3172:	5b 2b       	or	r21, r27
    3174:	d6 01       	movw	r26, r12
    3176:	5c 96       	adiw	r26, 0x1c	; 28
    3178:	8c 91       	ld	r24, X
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	a0 e0       	ldi	r26, 0x00	; 0
    317e:	b0 e0       	ldi	r27, 0x00	; 0
    3180:	28 2b       	or	r18, r24
    3182:	39 2b       	or	r19, r25
    3184:	4a 2b       	or	r20, r26
    3186:	5b 2b       	or	r21, r27
    3188:	d6 01       	movw	r26, r12
    318a:	5d 96       	adiw	r26, 0x1d	; 29
    318c:	9c 91       	ld	r25, X
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	a0 e0       	ldi	r26, 0x00	; 0
    3192:	b0 e0       	ldi	r27, 0x00	; 0
    3194:	28 2b       	or	r18, r24
    3196:	39 2b       	or	r19, r25
    3198:	4a 2b       	or	r20, r26
    319a:	5b 2b       	or	r21, r27
    319c:	d3 01       	movw	r26, r6
    319e:	1a 96       	adiw	r26, 0x0a	; 10
    31a0:	2d 93       	st	X+, r18
    31a2:	3d 93       	st	X+, r19
    31a4:	4d 93       	st	X+, r20
    31a6:	5c 93       	st	X, r21
    31a8:	1d 97       	sbiw	r26, 0x0d	; 13
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    31aa:	16 96       	adiw	r26, 0x06	; 6
    31ac:	1d 92       	st	X+, r1
    31ae:	1d 92       	st	X+, r1
    31b0:	1d 92       	st	X+, r1
    31b2:	1c 92       	st	X, r1
    31b4:	19 97       	sbiw	r26, 0x09	; 9
    31b6:	8f ef       	ldi	r24, 0xFF	; 255
    31b8:	15 96       	adiw	r26, 0x05	; 5
    31ba:	8c 93       	st	X, r24
    31bc:	15 97       	sbiw	r26, 0x05	; 5
	fp->dsect = 0;
    31be:	56 96       	adiw	r26, 0x16	; 22
    31c0:	1d 92       	st	X+, r1
    31c2:	1d 92       	st	X+, r1
    31c4:	1d 92       	st	X+, r1
    31c6:	1c 92       	st	X, r1
    31c8:	59 97       	sbiw	r26, 0x19	; 25
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    31ca:	ed 93       	st	X+, r30
    31cc:	fc 93       	st	X, r31
    31ce:	11 97       	sbiw	r26, 0x01	; 1
    31d0:	86 81       	ldd	r24, Z+6	; 0x06
    31d2:	97 81       	ldd	r25, Z+7	; 0x07
    31d4:	12 96       	adiw	r26, 0x02	; 2
    31d6:	8d 93       	st	X+, r24
    31d8:	9c 93       	st	X, r25
    31da:	13 97       	sbiw	r26, 0x03	; 3
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	03 c0       	rjmp	.+6      	; 0x31e6 <f_open+0x2c2>

	LEAVE_FF(dj.fs, FR_OK);
    31e0:	27 e0       	ldi	r18, 0x07	; 7
    31e2:	01 c0       	rjmp	.+2      	; 0x31e6 <f_open+0x2c2>
    31e4:	24 e0       	ldi	r18, 0x04	; 4
}
    31e6:	82 2f       	mov	r24, r18
    31e8:	a4 96       	adiw	r28, 0x24	; 36
    31ea:	cd bf       	out	0x3d, r28	; 61
    31ec:	de bf       	out	0x3e, r29	; 62
    31ee:	cf 91       	pop	r28
    31f0:	df 91       	pop	r29
    31f2:	1f 91       	pop	r17
    31f4:	0f 91       	pop	r16
    31f6:	ff 90       	pop	r15
    31f8:	ef 90       	pop	r14
    31fa:	df 90       	pop	r13
    31fc:	cf 90       	pop	r12
    31fe:	bf 90       	pop	r11
    3200:	af 90       	pop	r10
    3202:	9f 90       	pop	r9
    3204:	8f 90       	pop	r8
    3206:	7f 90       	pop	r7
    3208:	6f 90       	pop	r6
    320a:	5f 90       	pop	r5
    320c:	08 95       	ret

0000320e <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    320e:	2f 92       	push	r2
    3210:	3f 92       	push	r3
    3212:	4f 92       	push	r4
    3214:	5f 92       	push	r5
    3216:	6f 92       	push	r6
    3218:	7f 92       	push	r7
    321a:	8f 92       	push	r8
    321c:	9f 92       	push	r9
    321e:	af 92       	push	r10
    3220:	bf 92       	push	r11
    3222:	cf 92       	push	r12
    3224:	df 92       	push	r13
    3226:	ef 92       	push	r14
    3228:	ff 92       	push	r15
    322a:	0f 93       	push	r16
    322c:	1f 93       	push	r17
    322e:	df 93       	push	r29
    3230:	cf 93       	push	r28
    3232:	00 d0       	rcall	.+0      	; 0x3234 <f_read+0x26>
    3234:	0f 92       	push	r0
    3236:	cd b7       	in	r28, 0x3d	; 61
    3238:	de b7       	in	r29, 0x3e	; 62
    323a:	8b 83       	std	Y+3, r24	; 0x03
    323c:	9c 83       	std	Y+4, r25	; 0x04
    323e:	16 2f       	mov	r17, r22
    3240:	07 2f       	mov	r16, r23
    3242:	4a 01       	movw	r8, r20
    3244:	29 83       	std	Y+1, r18	; 0x01
    3246:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
    3248:	d9 01       	movw	r26, r18
    324a:	1d 92       	st	X+, r1
    324c:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    324e:	fc 01       	movw	r30, r24
    3250:	62 81       	ldd	r22, Z+2	; 0x02
    3252:	73 81       	ldd	r23, Z+3	; 0x03
    3254:	80 81       	ld	r24, Z
    3256:	91 81       	ldd	r25, Z+1	; 0x01
    3258:	0e 94 57 17 	call	0x2eae	; 0x2eae <validate>
    325c:	78 2e       	mov	r7, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    325e:	88 23       	and	r24, r24
    3260:	09 f0       	breq	.+2      	; 0x3264 <f_read+0x56>
    3262:	b4 c1       	rjmp	.+872    	; 0x35cc <f_read+0x3be>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    3264:	ab 81       	ldd	r26, Y+3	; 0x03
    3266:	bc 81       	ldd	r27, Y+4	; 0x04
    3268:	14 96       	adiw	r26, 0x04	; 4
    326a:	8c 91       	ld	r24, X
    326c:	87 fd       	sbrc	r24, 7
    326e:	66 c0       	rjmp	.+204    	; 0x333c <f_read+0x12e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    3270:	80 fd       	sbrc	r24, 0
    3272:	03 c0       	rjmp	.+6      	; 0x327a <f_read+0x6c>
    3274:	07 e0       	ldi	r16, 0x07	; 7
    3276:	70 2e       	mov	r7, r16
    3278:	a9 c1       	rjmp	.+850    	; 0x35cc <f_read+0x3be>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    327a:	eb 81       	ldd	r30, Y+3	; 0x03
    327c:	fc 81       	ldd	r31, Y+4	; 0x04
    327e:	22 85       	ldd	r18, Z+10	; 0x0a
    3280:	33 85       	ldd	r19, Z+11	; 0x0b
    3282:	44 85       	ldd	r20, Z+12	; 0x0c
    3284:	55 85       	ldd	r21, Z+13	; 0x0d
    3286:	86 81       	ldd	r24, Z+6	; 0x06
    3288:	97 81       	ldd	r25, Z+7	; 0x07
    328a:	a0 85       	ldd	r26, Z+8	; 0x08
    328c:	b1 85       	ldd	r27, Z+9	; 0x09
    328e:	28 1b       	sub	r18, r24
    3290:	39 0b       	sbc	r19, r25
    3292:	4a 0b       	sbc	r20, r26
    3294:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    3296:	c4 01       	movw	r24, r8
    3298:	a0 e0       	ldi	r26, 0x00	; 0
    329a:	b0 e0       	ldi	r27, 0x00	; 0
    329c:	28 17       	cp	r18, r24
    329e:	39 07       	cpc	r19, r25
    32a0:	4a 07       	cpc	r20, r26
    32a2:	5b 07       	cpc	r21, r27
    32a4:	08 f4       	brcc	.+2      	; 0x32a8 <f_read+0x9a>
    32a6:	49 01       	movw	r8, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    32a8:	81 2f       	mov	r24, r17
    32aa:	90 2f       	mov	r25, r16
    32ac:	9c 01       	movw	r18, r24
    32ae:	29 01       	movw	r4, r18

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    32b0:	10 e2       	ldi	r17, 0x20	; 32
    32b2:	21 2e       	mov	r2, r17
    32b4:	31 2c       	mov	r3, r1
    32b6:	6b 81       	ldd	r22, Y+3	; 0x03
    32b8:	7c 81       	ldd	r23, Y+4	; 0x04
    32ba:	26 0e       	add	r2, r22
    32bc:	37 1e       	adc	r3, r23
    32be:	82 c1       	rjmp	.+772    	; 0x35c4 <f_read+0x3b6>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    32c0:	ab 81       	ldd	r26, Y+3	; 0x03
    32c2:	bc 81       	ldd	r27, Y+4	; 0x04
    32c4:	16 96       	adiw	r26, 0x06	; 6
    32c6:	2d 91       	ld	r18, X+
    32c8:	3d 91       	ld	r19, X+
    32ca:	4d 91       	ld	r20, X+
    32cc:	5c 91       	ld	r21, X
    32ce:	19 97       	sbiw	r26, 0x09	; 9
    32d0:	da 01       	movw	r26, r20
    32d2:	c9 01       	movw	r24, r18
    32d4:	91 70       	andi	r25, 0x01	; 1
    32d6:	a0 70       	andi	r26, 0x00	; 0
    32d8:	b0 70       	andi	r27, 0x00	; 0
    32da:	00 97       	sbiw	r24, 0x00	; 0
    32dc:	a1 05       	cpc	r26, r1
    32de:	b1 05       	cpc	r27, r1
    32e0:	09 f0       	breq	.+2      	; 0x32e4 <f_read+0xd6>
    32e2:	2c c1       	rjmp	.+600    	; 0x353c <f_read+0x32e>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    32e4:	ab 81       	ldd	r26, Y+3	; 0x03
    32e6:	bc 81       	ldd	r27, Y+4	; 0x04
    32e8:	ed 91       	ld	r30, X+
    32ea:	fc 91       	ld	r31, X
    32ec:	11 97       	sbiw	r26, 0x01	; 1
    32ee:	15 96       	adiw	r26, 0x05	; 5
    32f0:	9c 91       	ld	r25, X
    32f2:	15 97       	sbiw	r26, 0x05	; 5
    32f4:	82 81       	ldd	r24, Z+2	; 0x02
    32f6:	98 17       	cp	r25, r24
    32f8:	a0 f1       	brcs	.+104    	; 0x3362 <f_read+0x154>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    32fa:	21 15       	cp	r18, r1
    32fc:	31 05       	cpc	r19, r1
    32fe:	41 05       	cpc	r20, r1
    3300:	51 05       	cpc	r21, r1
    3302:	39 f4       	brne	.+14     	; 0x3312 <f_read+0x104>
    3304:	1e 96       	adiw	r26, 0x0e	; 14
    3306:	6d 91       	ld	r22, X+
    3308:	7d 91       	ld	r23, X+
    330a:	8d 91       	ld	r24, X+
    330c:	9c 91       	ld	r25, X
    330e:	51 97       	sbiw	r26, 0x11	; 17
    3310:	0b c0       	rjmp	.+22     	; 0x3328 <f_read+0x11a>
    3312:	ab 81       	ldd	r26, Y+3	; 0x03
    3314:	bc 81       	ldd	r27, Y+4	; 0x04
    3316:	52 96       	adiw	r26, 0x12	; 18
    3318:	4d 91       	ld	r20, X+
    331a:	5d 91       	ld	r21, X+
    331c:	6d 91       	ld	r22, X+
    331e:	7c 91       	ld	r23, X
    3320:	55 97       	sbiw	r26, 0x15	; 21
    3322:	cf 01       	movw	r24, r30
    3324:	0e 94 56 0b 	call	0x16ac	; 0x16ac <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    3328:	62 30       	cpi	r22, 0x02	; 2
    332a:	71 05       	cpc	r23, r1
    332c:	81 05       	cpc	r24, r1
    332e:	91 05       	cpc	r25, r1
    3330:	40 f4       	brcc	.+16     	; 0x3342 <f_read+0x134>
    3332:	eb 81       	ldd	r30, Y+3	; 0x03
    3334:	fc 81       	ldd	r31, Y+4	; 0x04
    3336:	84 81       	ldd	r24, Z+4	; 0x04
    3338:	80 68       	ori	r24, 0x80	; 128
    333a:	84 83       	std	Z+4, r24	; 0x04
    333c:	b2 e0       	ldi	r27, 0x02	; 2
    333e:	7b 2e       	mov	r7, r27
    3340:	45 c1       	rjmp	.+650    	; 0x35cc <f_read+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3342:	6f 3f       	cpi	r22, 0xFF	; 255
    3344:	ff ef       	ldi	r31, 0xFF	; 255
    3346:	7f 07       	cpc	r23, r31
    3348:	ff ef       	ldi	r31, 0xFF	; 255
    334a:	8f 07       	cpc	r24, r31
    334c:	ff ef       	ldi	r31, 0xFF	; 255
    334e:	9f 07       	cpc	r25, r31
    3350:	09 f4       	brne	.+2      	; 0x3354 <f_read+0x146>
    3352:	e0 c0       	rjmp	.+448    	; 0x3514 <f_read+0x306>
				fp->curr_clust = clst;				/* Update current cluster */
    3354:	eb 81       	ldd	r30, Y+3	; 0x03
    3356:	fc 81       	ldd	r31, Y+4	; 0x04
    3358:	62 8b       	std	Z+18, r22	; 0x12
    335a:	73 8b       	std	Z+19, r23	; 0x13
    335c:	84 8b       	std	Z+20, r24	; 0x14
    335e:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    3360:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    3362:	ab 81       	ldd	r26, Y+3	; 0x03
    3364:	bc 81       	ldd	r27, Y+4	; 0x04
    3366:	0d 91       	ld	r16, X+
    3368:	1c 91       	ld	r17, X
    336a:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    336c:	52 96       	adiw	r26, 0x12	; 18
    336e:	2d 91       	ld	r18, X+
    3370:	3d 91       	ld	r19, X+
    3372:	4d 91       	ld	r20, X+
    3374:	5c 91       	ld	r21, X
    3376:	55 97       	sbiw	r26, 0x15	; 21
    3378:	22 50       	subi	r18, 0x02	; 2
    337a:	30 40       	sbci	r19, 0x00	; 0
    337c:	40 40       	sbci	r20, 0x00	; 0
    337e:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3380:	f8 01       	movw	r30, r16
    3382:	82 8d       	ldd	r24, Z+26	; 0x1a
    3384:	93 8d       	ldd	r25, Z+27	; 0x1b
    3386:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3388:	b5 8d       	ldd	r27, Z+29	; 0x1d
    338a:	02 97       	sbiw	r24, 0x02	; 2
    338c:	a1 09       	sbc	r26, r1
    338e:	b1 09       	sbc	r27, r1
    3390:	28 17       	cp	r18, r24
    3392:	39 07       	cpc	r19, r25
    3394:	4a 07       	cpc	r20, r26
    3396:	5b 07       	cpc	r21, r27
    3398:	b8 f4       	brcc	.+46     	; 0x33c8 <f_read+0x1ba>
	return clst * fs->csize + fs->database;
    339a:	62 80       	ldd	r6, Z+2	; 0x02
    339c:	66 2d       	mov	r22, r6
    339e:	70 e0       	ldi	r23, 0x00	; 0
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	0e 94 54 50 	call	0xa0a8	; 0xa0a8 <__mulsi3>
    33a8:	9b 01       	movw	r18, r22
    33aa:	ac 01       	movw	r20, r24
    33ac:	f8 01       	movw	r30, r16
    33ae:	86 a1       	ldd	r24, Z+38	; 0x26
    33b0:	97 a1       	ldd	r25, Z+39	; 0x27
    33b2:	a0 a5       	ldd	r26, Z+40	; 0x28
    33b4:	b1 a5       	ldd	r27, Z+41	; 0x29
    33b6:	28 0f       	add	r18, r24
    33b8:	39 1f       	adc	r19, r25
    33ba:	4a 1f       	adc	r20, r26
    33bc:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    33be:	21 15       	cp	r18, r1
    33c0:	31 05       	cpc	r19, r1
    33c2:	41 05       	cpc	r20, r1
    33c4:	51 05       	cpc	r21, r1
    33c6:	49 f4       	brne	.+18     	; 0x33da <f_read+0x1cc>
    33c8:	ab 81       	ldd	r26, Y+3	; 0x03
    33ca:	bc 81       	ldd	r27, Y+4	; 0x04
    33cc:	14 96       	adiw	r26, 0x04	; 4
    33ce:	8c 91       	ld	r24, X
    33d0:	14 97       	sbiw	r26, 0x04	; 4
    33d2:	80 68       	ori	r24, 0x80	; 128
    33d4:	14 96       	adiw	r26, 0x04	; 4
    33d6:	8c 93       	st	X, r24
    33d8:	b1 cf       	rjmp	.-158    	; 0x333c <f_read+0x12e>
			sect += fp->csect;
    33da:	eb 81       	ldd	r30, Y+3	; 0x03
    33dc:	fc 81       	ldd	r31, Y+4	; 0x04
    33de:	85 81       	ldd	r24, Z+5	; 0x05
    33e0:	59 01       	movw	r10, r18
    33e2:	6a 01       	movw	r12, r20
    33e4:	a8 0e       	add	r10, r24
    33e6:	b1 1c       	adc	r11, r1
    33e8:	c1 1c       	adc	r12, r1
    33ea:	d1 1c       	adc	r13, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    33ec:	74 01       	movw	r14, r8
    33ee:	ef 2c       	mov	r14, r15
    33f0:	ff 24       	eor	r15, r15
    33f2:	e6 94       	lsr	r14
			if (cc) {								/* Read maximum contiguous sectors directly */
    33f4:	e1 14       	cp	r14, r1
    33f6:	f1 04       	cpc	r15, r1
    33f8:	09 f4       	brne	.+2      	; 0x33fc <f_read+0x1ee>
    33fa:	53 c0       	rjmp	.+166    	; 0x34a2 <f_read+0x294>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    33fc:	28 2f       	mov	r18, r24
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	c7 01       	movw	r24, r14
    3402:	82 0f       	add	r24, r18
    3404:	93 1f       	adc	r25, r19
    3406:	66 2d       	mov	r22, r6
    3408:	70 e0       	ldi	r23, 0x00	; 0
    340a:	68 17       	cp	r22, r24
    340c:	79 07       	cpc	r23, r25
    340e:	18 f4       	brcc	.+6      	; 0x3416 <f_read+0x208>
					cc = fp->fs->csize - fp->csect;
    3410:	7b 01       	movw	r14, r22
    3412:	e2 1a       	sub	r14, r18
    3414:	f3 0a       	sbc	r15, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    3416:	d8 01       	movw	r26, r16
    3418:	11 96       	adiw	r26, 0x01	; 1
    341a:	8c 91       	ld	r24, X
    341c:	b2 01       	movw	r22, r4
    341e:	a6 01       	movw	r20, r12
    3420:	95 01       	movw	r18, r10
    3422:	0e 2d       	mov	r16, r14
    3424:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_read>
    3428:	eb 81       	ldd	r30, Y+3	; 0x03
    342a:	fc 81       	ldd	r31, Y+4	; 0x04
    342c:	94 81       	ldd	r25, Z+4	; 0x04
    342e:	88 23       	and	r24, r24
    3430:	19 f0       	breq	.+6      	; 0x3438 <f_read+0x22a>
					ABORT(fp->fs, FR_DISK_ERR);
    3432:	90 68       	ori	r25, 0x80	; 128
    3434:	94 83       	std	Z+4, r25	; 0x04
    3436:	76 c0       	rjmp	.+236    	; 0x3524 <f_read+0x316>
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
    3438:	96 ff       	sbrs	r25, 6
    343a:	29 c0       	rjmp	.+82     	; 0x348e <f_read+0x280>
    343c:	ab 81       	ldd	r26, Y+3	; 0x03
    343e:	bc 81       	ldd	r27, Y+4	; 0x04
    3440:	56 96       	adiw	r26, 0x16	; 22
    3442:	2d 91       	ld	r18, X+
    3444:	3d 91       	ld	r19, X+
    3446:	4d 91       	ld	r20, X+
    3448:	5c 91       	ld	r21, X
    344a:	59 97       	sbiw	r26, 0x19	; 25
    344c:	2a 19       	sub	r18, r10
    344e:	3b 09       	sbc	r19, r11
    3450:	4c 09       	sbc	r20, r12
    3452:	5d 09       	sbc	r21, r13
    3454:	c7 01       	movw	r24, r14
    3456:	a0 e0       	ldi	r26, 0x00	; 0
    3458:	b0 e0       	ldi	r27, 0x00	; 0
    345a:	28 17       	cp	r18, r24
    345c:	39 07       	cpc	r19, r25
    345e:	4a 07       	cpc	r20, r26
    3460:	5b 07       	cpc	r21, r27
    3462:	a8 f4       	brcc	.+42     	; 0x348e <f_read+0x280>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    3464:	f9 e0       	ldi	r31, 0x09	; 9
    3466:	22 0f       	add	r18, r18
    3468:	33 1f       	adc	r19, r19
    346a:	44 1f       	adc	r20, r20
    346c:	55 1f       	adc	r21, r21
    346e:	fa 95       	dec	r31
    3470:	d1 f7       	brne	.-12     	; 0x3466 <f_read+0x258>
    3472:	c2 01       	movw	r24, r4
    3474:	82 0f       	add	r24, r18
    3476:	93 1f       	adc	r25, r19
    3478:	d1 01       	movw	r26, r2
    347a:	fc 01       	movw	r30, r24
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    347c:	9c 01       	movw	r18, r24
    347e:	20 50       	subi	r18, 0x00	; 0
    3480:	3e 4f       	sbci	r19, 0xFE	; 254
    3482:	02 c0       	rjmp	.+4      	; 0x3488 <f_read+0x27a>
    3484:	8d 91       	ld	r24, X+
    3486:	81 93       	st	Z+, r24
    3488:	e2 17       	cp	r30, r18
    348a:	f3 07       	cpc	r31, r19
    348c:	d9 f7       	brne	.-10     	; 0x3484 <f_read+0x276>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    348e:	eb 81       	ldd	r30, Y+3	; 0x03
    3490:	fc 81       	ldd	r31, Y+4	; 0x04
    3492:	85 81       	ldd	r24, Z+5	; 0x05
    3494:	8e 0d       	add	r24, r14
    3496:	85 83       	std	Z+5, r24	; 0x05
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    3498:	b7 01       	movw	r22, r14
    349a:	76 2f       	mov	r23, r22
    349c:	66 27       	eor	r22, r22
    349e:	77 0f       	add	r23, r23
    34a0:	74 c0       	rjmp	.+232    	; 0x358a <f_read+0x37c>
				continue;
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
    34a2:	ab 81       	ldd	r26, Y+3	; 0x03
    34a4:	bc 81       	ldd	r27, Y+4	; 0x04
    34a6:	14 96       	adiw	r26, 0x04	; 4
    34a8:	8c 91       	ld	r24, X
    34aa:	14 97       	sbiw	r26, 0x04	; 4
    34ac:	86 ff       	sbrs	r24, 6
    34ae:	1b c0       	rjmp	.+54     	; 0x34e6 <f_read+0x2d8>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    34b0:	56 96       	adiw	r26, 0x16	; 22
    34b2:	2d 91       	ld	r18, X+
    34b4:	3d 91       	ld	r19, X+
    34b6:	4d 91       	ld	r20, X+
    34b8:	5c 91       	ld	r21, X
    34ba:	59 97       	sbiw	r26, 0x19	; 25
    34bc:	f8 01       	movw	r30, r16
    34be:	81 81       	ldd	r24, Z+1	; 0x01
    34c0:	b1 01       	movw	r22, r2
    34c2:	01 e0       	ldi	r16, 0x01	; 1
    34c4:	0e 94 77 07 	call	0xeee	; 0xeee <disk_write>
    34c8:	ab 81       	ldd	r26, Y+3	; 0x03
    34ca:	bc 81       	ldd	r27, Y+4	; 0x04
    34cc:	14 96       	adiw	r26, 0x04	; 4
    34ce:	9c 91       	ld	r25, X
    34d0:	14 97       	sbiw	r26, 0x04	; 4
    34d2:	88 23       	and	r24, r24
    34d4:	21 f0       	breq	.+8      	; 0x34de <f_read+0x2d0>
					ABORT(fp->fs, FR_DISK_ERR);
    34d6:	90 68       	ori	r25, 0x80	; 128
    34d8:	14 96       	adiw	r26, 0x04	; 4
    34da:	9c 93       	st	X, r25
    34dc:	23 c0       	rjmp	.+70     	; 0x3524 <f_read+0x316>
				fp->flag &= ~FA__DIRTY;
    34de:	9f 7b       	andi	r25, 0xBF	; 191
    34e0:	eb 81       	ldd	r30, Y+3	; 0x03
    34e2:	fc 81       	ldd	r31, Y+4	; 0x04
    34e4:	94 83       	std	Z+4, r25	; 0x04
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
    34e6:	eb 81       	ldd	r30, Y+3	; 0x03
    34e8:	fc 81       	ldd	r31, Y+4	; 0x04
    34ea:	86 89       	ldd	r24, Z+22	; 0x16
    34ec:	97 89       	ldd	r25, Z+23	; 0x17
    34ee:	a0 8d       	ldd	r26, Z+24	; 0x18
    34f0:	b1 8d       	ldd	r27, Z+25	; 0x19
    34f2:	8a 15       	cp	r24, r10
    34f4:	9b 05       	cpc	r25, r11
    34f6:	ac 05       	cpc	r26, r12
    34f8:	bd 05       	cpc	r27, r13
    34fa:	b9 f0       	breq	.+46     	; 0x352a <f_read+0x31c>
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
    34fc:	01 90       	ld	r0, Z+
    34fe:	f0 81       	ld	r31, Z
    3500:	e0 2d       	mov	r30, r0
    3502:	81 81       	ldd	r24, Z+1	; 0x01
    3504:	b1 01       	movw	r22, r2
    3506:	a6 01       	movw	r20, r12
    3508:	95 01       	movw	r18, r10
    350a:	01 e0       	ldi	r16, 0x01	; 1
    350c:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_read>
    3510:	88 23       	and	r24, r24
    3512:	59 f0       	breq	.+22     	; 0x352a <f_read+0x31c>
					ABORT(fp->fs, FR_DISK_ERR);
    3514:	ab 81       	ldd	r26, Y+3	; 0x03
    3516:	bc 81       	ldd	r27, Y+4	; 0x04
    3518:	14 96       	adiw	r26, 0x04	; 4
    351a:	8c 91       	ld	r24, X
    351c:	14 97       	sbiw	r26, 0x04	; 4
    351e:	80 68       	ori	r24, 0x80	; 128
    3520:	14 96       	adiw	r26, 0x04	; 4
    3522:	8c 93       	st	X, r24
    3524:	77 24       	eor	r7, r7
    3526:	73 94       	inc	r7
    3528:	51 c0       	rjmp	.+162    	; 0x35cc <f_read+0x3be>
			}
#endif
			fp->dsect = sect;
    352a:	eb 81       	ldd	r30, Y+3	; 0x03
    352c:	fc 81       	ldd	r31, Y+4	; 0x04
    352e:	a6 8a       	std	Z+22, r10	; 0x16
    3530:	b7 8a       	std	Z+23, r11	; 0x17
    3532:	c0 8e       	std	Z+24, r12	; 0x18
    3534:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    3536:	85 81       	ldd	r24, Z+5	; 0x05
    3538:	8f 5f       	subi	r24, 0xFF	; 255
    353a:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    353c:	ab 81       	ldd	r26, Y+3	; 0x03
    353e:	bc 81       	ldd	r27, Y+4	; 0x04
    3540:	16 96       	adiw	r26, 0x06	; 6
    3542:	2d 91       	ld	r18, X+
    3544:	3d 91       	ld	r19, X+
    3546:	4d 91       	ld	r20, X+
    3548:	5c 91       	ld	r21, X
    354a:	19 97       	sbiw	r26, 0x09	; 9
    354c:	c9 01       	movw	r24, r18
    354e:	91 70       	andi	r25, 0x01	; 1
    3550:	e0 e0       	ldi	r30, 0x00	; 0
    3552:	f2 e0       	ldi	r31, 0x02	; 2
    3554:	e8 1b       	sub	r30, r24
    3556:	f9 0b       	sbc	r31, r25
    3558:	b4 01       	movw	r22, r8
    355a:	e8 15       	cp	r30, r8
    355c:	f9 05       	cpc	r31, r9
    355e:	08 f4       	brcc	.+2      	; 0x3562 <f_read+0x354>
    3560:	bf 01       	movw	r22, r30
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    3562:	8b 01       	movw	r16, r22

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    3564:	f9 01       	movw	r30, r18
    3566:	f1 70       	andi	r31, 0x01	; 1
    3568:	b0 96       	adiw	r30, 0x20	; 32
    356a:	8b 81       	ldd	r24, Y+3	; 0x03
    356c:	9c 81       	ldd	r25, Y+4	; 0x04
    356e:	e8 0f       	add	r30, r24
    3570:	f9 1f       	adc	r31, r25
    3572:	92 01       	movw	r18, r4
    3574:	04 c0       	rjmp	.+8      	; 0x357e <f_read+0x370>
	while (cnt--) *d++ = *s++;
    3576:	81 91       	ld	r24, Z+
    3578:	d9 01       	movw	r26, r18
    357a:	8d 93       	st	X+, r24
    357c:	9d 01       	movw	r18, r26
    357e:	01 50       	subi	r16, 0x01	; 1
    3580:	10 40       	sbci	r17, 0x00	; 0
    3582:	bf ef       	ldi	r27, 0xFF	; 255
    3584:	0f 3f       	cpi	r16, 0xFF	; 255
    3586:	1b 07       	cpc	r17, r27
    3588:	b1 f7       	brne	.-20     	; 0x3576 <f_read+0x368>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    358a:	46 0e       	add	r4, r22
    358c:	57 1e       	adc	r5, r23
    358e:	cb 01       	movw	r24, r22
    3590:	a0 e0       	ldi	r26, 0x00	; 0
    3592:	b0 e0       	ldi	r27, 0x00	; 0
    3594:	eb 81       	ldd	r30, Y+3	; 0x03
    3596:	fc 81       	ldd	r31, Y+4	; 0x04
    3598:	26 81       	ldd	r18, Z+6	; 0x06
    359a:	37 81       	ldd	r19, Z+7	; 0x07
    359c:	40 85       	ldd	r20, Z+8	; 0x08
    359e:	51 85       	ldd	r21, Z+9	; 0x09
    35a0:	28 0f       	add	r18, r24
    35a2:	39 1f       	adc	r19, r25
    35a4:	4a 1f       	adc	r20, r26
    35a6:	5b 1f       	adc	r21, r27
    35a8:	26 83       	std	Z+6, r18	; 0x06
    35aa:	37 83       	std	Z+7, r19	; 0x07
    35ac:	40 87       	std	Z+8, r20	; 0x08
    35ae:	51 87       	std	Z+9, r21	; 0x09
    35b0:	e9 81       	ldd	r30, Y+1	; 0x01
    35b2:	fa 81       	ldd	r31, Y+2	; 0x02
    35b4:	80 81       	ld	r24, Z
    35b6:	91 81       	ldd	r25, Z+1	; 0x01
    35b8:	86 0f       	add	r24, r22
    35ba:	97 1f       	adc	r25, r23
    35bc:	80 83       	st	Z, r24
    35be:	91 83       	std	Z+1, r25	; 0x01
    35c0:	86 1a       	sub	r8, r22
    35c2:	97 0a       	sbc	r9, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    35c4:	81 14       	cp	r8, r1
    35c6:	91 04       	cpc	r9, r1
    35c8:	09 f0       	breq	.+2      	; 0x35cc <f_read+0x3be>
    35ca:	7a ce       	rjmp	.-780    	; 0x32c0 <f_read+0xb2>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    35cc:	87 2d       	mov	r24, r7
    35ce:	24 96       	adiw	r28, 0x04	; 4
    35d0:	cd bf       	out	0x3d, r28	; 61
    35d2:	de bf       	out	0x3e, r29	; 62
    35d4:	cf 91       	pop	r28
    35d6:	df 91       	pop	r29
    35d8:	1f 91       	pop	r17
    35da:	0f 91       	pop	r16
    35dc:	ff 90       	pop	r15
    35de:	ef 90       	pop	r14
    35e0:	df 90       	pop	r13
    35e2:	cf 90       	pop	r12
    35e4:	bf 90       	pop	r11
    35e6:	af 90       	pop	r10
    35e8:	9f 90       	pop	r9
    35ea:	8f 90       	pop	r8
    35ec:	7f 90       	pop	r7
    35ee:	6f 90       	pop	r6
    35f0:	5f 90       	pop	r5
    35f2:	4f 90       	pop	r4
    35f4:	3f 90       	pop	r3
    35f6:	2f 90       	pop	r2
    35f8:	08 95       	ret

000035fa <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    35fa:	2f 92       	push	r2
    35fc:	3f 92       	push	r3
    35fe:	4f 92       	push	r4
    3600:	5f 92       	push	r5
    3602:	6f 92       	push	r6
    3604:	7f 92       	push	r7
    3606:	8f 92       	push	r8
    3608:	9f 92       	push	r9
    360a:	af 92       	push	r10
    360c:	bf 92       	push	r11
    360e:	cf 92       	push	r12
    3610:	df 92       	push	r13
    3612:	ef 92       	push	r14
    3614:	ff 92       	push	r15
    3616:	0f 93       	push	r16
    3618:	1f 93       	push	r17
    361a:	df 93       	push	r29
    361c:	cf 93       	push	r28
    361e:	00 d0       	rcall	.+0      	; 0x3620 <f_write+0x26>
    3620:	0f 92       	push	r0
    3622:	cd b7       	in	r28, 0x3d	; 61
    3624:	de b7       	in	r29, 0x3e	; 62
    3626:	8b 83       	std	Y+3, r24	; 0x03
    3628:	9c 83       	std	Y+4, r25	; 0x04
    362a:	16 2f       	mov	r17, r22
    362c:	07 2f       	mov	r16, r23
    362e:	4a 01       	movw	r8, r20
    3630:	29 83       	std	Y+1, r18	; 0x01
    3632:	3a 83       	std	Y+2, r19	; 0x02
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    3634:	d9 01       	movw	r26, r18
    3636:	1d 92       	st	X+, r1
    3638:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    363a:	fc 01       	movw	r30, r24
    363c:	62 81       	ldd	r22, Z+2	; 0x02
    363e:	73 81       	ldd	r23, Z+3	; 0x03
    3640:	80 81       	ld	r24, Z
    3642:	91 81       	ldd	r25, Z+1	; 0x01
    3644:	0e 94 57 17 	call	0x2eae	; 0x2eae <validate>
    3648:	68 2e       	mov	r6, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    364a:	88 23       	and	r24, r24
    364c:	09 f0       	breq	.+2      	; 0x3650 <f_write+0x56>
    364e:	02 c2       	rjmp	.+1028   	; 0x3a54 <f_write+0x45a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    3650:	ab 81       	ldd	r26, Y+3	; 0x03
    3652:	bc 81       	ldd	r27, Y+4	; 0x04
    3654:	14 96       	adiw	r26, 0x04	; 4
    3656:	8c 91       	ld	r24, X
    3658:	87 fd       	sbrc	r24, 7
    365a:	7c c0       	rjmp	.+248    	; 0x3754 <f_write+0x15a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    365c:	81 fd       	sbrc	r24, 1
    365e:	03 c0       	rjmp	.+6      	; 0x3666 <f_write+0x6c>
    3660:	57 e0       	ldi	r21, 0x07	; 7
    3662:	65 2e       	mov	r6, r21
    3664:	f7 c1       	rjmp	.+1006   	; 0x3a54 <f_write+0x45a>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    3666:	eb 81       	ldd	r30, Y+3	; 0x03
    3668:	fc 81       	ldd	r31, Y+4	; 0x04
    366a:	22 85       	ldd	r18, Z+10	; 0x0a
    366c:	33 85       	ldd	r19, Z+11	; 0x0b
    366e:	44 85       	ldd	r20, Z+12	; 0x0c
    3670:	55 85       	ldd	r21, Z+13	; 0x0d
    3672:	c4 01       	movw	r24, r8
    3674:	a0 e0       	ldi	r26, 0x00	; 0
    3676:	b0 e0       	ldi	r27, 0x00	; 0
    3678:	82 0f       	add	r24, r18
    367a:	93 1f       	adc	r25, r19
    367c:	a4 1f       	adc	r26, r20
    367e:	b5 1f       	adc	r27, r21
    3680:	82 17       	cp	r24, r18
    3682:	93 07       	cpc	r25, r19
    3684:	a4 07       	cpc	r26, r20
    3686:	b5 07       	cpc	r27, r21
    3688:	10 f4       	brcc	.+4      	; 0x368e <f_write+0x94>
    368a:	88 24       	eor	r8, r8
    368c:	99 24       	eor	r9, r9
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    368e:	81 2f       	mov	r24, r17
    3690:	90 2f       	mov	r25, r16
    3692:	9c 01       	movw	r18, r24
    3694:	29 01       	movw	r4, r18
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3696:	40 e2       	ldi	r20, 0x20	; 32
    3698:	24 2e       	mov	r2, r20
    369a:	31 2c       	mov	r3, r1
    369c:	6b 81       	ldd	r22, Y+3	; 0x03
    369e:	7c 81       	ldd	r23, Y+4	; 0x04
    36a0:	26 0e       	add	r2, r22
    36a2:	37 1e       	adc	r3, r23
    36a4:	b2 c1       	rjmp	.+868    	; 0x3a0a <f_write+0x410>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    36a6:	ab 81       	ldd	r26, Y+3	; 0x03
    36a8:	bc 81       	ldd	r27, Y+4	; 0x04
    36aa:	16 96       	adiw	r26, 0x06	; 6
    36ac:	2d 91       	ld	r18, X+
    36ae:	3d 91       	ld	r19, X+
    36b0:	4d 91       	ld	r20, X+
    36b2:	5c 91       	ld	r21, X
    36b4:	19 97       	sbiw	r26, 0x09	; 9
    36b6:	da 01       	movw	r26, r20
    36b8:	c9 01       	movw	r24, r18
    36ba:	91 70       	andi	r25, 0x01	; 1
    36bc:	a0 70       	andi	r26, 0x00	; 0
    36be:	b0 70       	andi	r27, 0x00	; 0
    36c0:	00 97       	sbiw	r24, 0x00	; 0
    36c2:	a1 05       	cpc	r26, r1
    36c4:	b1 05       	cpc	r27, r1
    36c6:	09 f0       	breq	.+2      	; 0x36ca <f_write+0xd0>
    36c8:	58 c1       	rjmp	.+688    	; 0x397a <f_write+0x380>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    36ca:	ab 81       	ldd	r26, Y+3	; 0x03
    36cc:	bc 81       	ldd	r27, Y+4	; 0x04
    36ce:	ed 91       	ld	r30, X+
    36d0:	fc 91       	ld	r31, X
    36d2:	11 97       	sbiw	r26, 0x01	; 1
    36d4:	15 96       	adiw	r26, 0x05	; 5
    36d6:	9c 91       	ld	r25, X
    36d8:	15 97       	sbiw	r26, 0x05	; 5
    36da:	82 81       	ldd	r24, Z+2	; 0x02
    36dc:	98 17       	cp	r25, r24
    36de:	08 f4       	brcc	.+2      	; 0x36e2 <f_write+0xe8>
    36e0:	54 c0       	rjmp	.+168    	; 0x378a <f_write+0x190>
				if (fp->fptr == 0) {				/* On the top of the file? */
    36e2:	21 15       	cp	r18, r1
    36e4:	31 05       	cpc	r19, r1
    36e6:	41 05       	cpc	r20, r1
    36e8:	51 05       	cpc	r21, r1
    36ea:	c9 f4       	brne	.+50     	; 0x371e <f_write+0x124>
					clst = fp->org_clust;			/* Follow from the origin */
    36ec:	1e 96       	adiw	r26, 0x0e	; 14
    36ee:	6d 91       	ld	r22, X+
    36f0:	7d 91       	ld	r23, X+
    36f2:	8d 91       	ld	r24, X+
    36f4:	9c 91       	ld	r25, X
    36f6:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    36f8:	61 15       	cp	r22, r1
    36fa:	71 05       	cpc	r23, r1
    36fc:	81 05       	cpc	r24, r1
    36fe:	91 05       	cpc	r25, r1
    3700:	f9 f4       	brne	.+62     	; 0x3740 <f_write+0x146>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    3702:	cf 01       	movw	r24, r30
    3704:	40 e0       	ldi	r20, 0x00	; 0
    3706:	50 e0       	ldi	r21, 0x00	; 0
    3708:	60 e0       	ldi	r22, 0x00	; 0
    370a:	70 e0       	ldi	r23, 0x00	; 0
    370c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <create_chain>
    3710:	eb 81       	ldd	r30, Y+3	; 0x03
    3712:	fc 81       	ldd	r31, Y+4	; 0x04
    3714:	66 87       	std	Z+14, r22	; 0x0e
    3716:	77 87       	std	Z+15, r23	; 0x0f
    3718:	80 8b       	std	Z+16, r24	; 0x10
    371a:	91 8b       	std	Z+17, r25	; 0x11
    371c:	0b c0       	rjmp	.+22     	; 0x3734 <f_write+0x13a>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    371e:	ab 81       	ldd	r26, Y+3	; 0x03
    3720:	bc 81       	ldd	r27, Y+4	; 0x04
    3722:	52 96       	adiw	r26, 0x12	; 18
    3724:	4d 91       	ld	r20, X+
    3726:	5d 91       	ld	r21, X+
    3728:	6d 91       	ld	r22, X+
    372a:	7c 91       	ld	r23, X
    372c:	55 97       	sbiw	r26, 0x15	; 21
    372e:	cf 01       	movw	r24, r30
    3730:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    3734:	61 15       	cp	r22, r1
    3736:	71 05       	cpc	r23, r1
    3738:	81 05       	cpc	r24, r1
    373a:	91 05       	cpc	r25, r1
    373c:	09 f4       	brne	.+2      	; 0x3740 <f_write+0x146>
    373e:	69 c1       	rjmp	.+722    	; 0x3a12 <f_write+0x418>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3740:	61 30       	cpi	r22, 0x01	; 1
    3742:	71 05       	cpc	r23, r1
    3744:	81 05       	cpc	r24, r1
    3746:	91 05       	cpc	r25, r1
    3748:	41 f4       	brne	.+16     	; 0x375a <f_write+0x160>
    374a:	eb 81       	ldd	r30, Y+3	; 0x03
    374c:	fc 81       	ldd	r31, Y+4	; 0x04
    374e:	84 81       	ldd	r24, Z+4	; 0x04
    3750:	80 68       	ori	r24, 0x80	; 128
    3752:	84 83       	std	Z+4, r24	; 0x04
    3754:	32 e0       	ldi	r19, 0x02	; 2
    3756:	63 2e       	mov	r6, r19
    3758:	7d c1       	rjmp	.+762    	; 0x3a54 <f_write+0x45a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    375a:	6f 3f       	cpi	r22, 0xFF	; 255
    375c:	ff ef       	ldi	r31, 0xFF	; 255
    375e:	7f 07       	cpc	r23, r31
    3760:	ff ef       	ldi	r31, 0xFF	; 255
    3762:	8f 07       	cpc	r24, r31
    3764:	ff ef       	ldi	r31, 0xFF	; 255
    3766:	9f 07       	cpc	r25, r31
    3768:	49 f4       	brne	.+18     	; 0x377c <f_write+0x182>
    376a:	ab 81       	ldd	r26, Y+3	; 0x03
    376c:	bc 81       	ldd	r27, Y+4	; 0x04
    376e:	14 96       	adiw	r26, 0x04	; 4
    3770:	8c 91       	ld	r24, X
    3772:	14 97       	sbiw	r26, 0x04	; 4
    3774:	80 68       	ori	r24, 0x80	; 128
    3776:	14 96       	adiw	r26, 0x04	; 4
    3778:	8c 93       	st	X, r24
    377a:	ee c0       	rjmp	.+476    	; 0x3958 <f_write+0x35e>
				fp->curr_clust = clst;				/* Update current cluster */
    377c:	eb 81       	ldd	r30, Y+3	; 0x03
    377e:	fc 81       	ldd	r31, Y+4	; 0x04
    3780:	62 8b       	std	Z+18, r22	; 0x12
    3782:	73 8b       	std	Z+19, r23	; 0x13
    3784:	84 8b       	std	Z+20, r24	; 0x14
    3786:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    3788:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
    378a:	ab 81       	ldd	r26, Y+3	; 0x03
    378c:	bc 81       	ldd	r27, Y+4	; 0x04
    378e:	14 96       	adiw	r26, 0x04	; 4
    3790:	8c 91       	ld	r24, X
    3792:	14 97       	sbiw	r26, 0x04	; 4
    3794:	86 ff       	sbrs	r24, 6
    3796:	1b c0       	rjmp	.+54     	; 0x37ce <f_write+0x1d4>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3798:	ed 91       	ld	r30, X+
    379a:	fc 91       	ld	r31, X
    379c:	11 97       	sbiw	r26, 0x01	; 1
    379e:	56 96       	adiw	r26, 0x16	; 22
    37a0:	2d 91       	ld	r18, X+
    37a2:	3d 91       	ld	r19, X+
    37a4:	4d 91       	ld	r20, X+
    37a6:	5c 91       	ld	r21, X
    37a8:	59 97       	sbiw	r26, 0x19	; 25
    37aa:	81 81       	ldd	r24, Z+1	; 0x01
    37ac:	b1 01       	movw	r22, r2
    37ae:	01 e0       	ldi	r16, 0x01	; 1
    37b0:	0e 94 77 07 	call	0xeee	; 0xeee <disk_write>
    37b4:	eb 81       	ldd	r30, Y+3	; 0x03
    37b6:	fc 81       	ldd	r31, Y+4	; 0x04
    37b8:	94 81       	ldd	r25, Z+4	; 0x04
    37ba:	88 23       	and	r24, r24
    37bc:	19 f0       	breq	.+6      	; 0x37c4 <f_write+0x1ca>
					ABORT(fp->fs, FR_DISK_ERR);
    37be:	90 68       	ori	r25, 0x80	; 128
    37c0:	94 83       	std	Z+4, r25	; 0x04
    37c2:	ca c0       	rjmp	.+404    	; 0x3958 <f_write+0x35e>
				fp->flag &= ~FA__DIRTY;
    37c4:	9f 7b       	andi	r25, 0xBF	; 191
    37c6:	ab 81       	ldd	r26, Y+3	; 0x03
    37c8:	bc 81       	ldd	r27, Y+4	; 0x04
    37ca:	14 96       	adiw	r26, 0x04	; 4
    37cc:	9c 93       	st	X, r25
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    37ce:	eb 81       	ldd	r30, Y+3	; 0x03
    37d0:	fc 81       	ldd	r31, Y+4	; 0x04
    37d2:	00 81       	ld	r16, Z
    37d4:	11 81       	ldd	r17, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    37d6:	22 89       	ldd	r18, Z+18	; 0x12
    37d8:	33 89       	ldd	r19, Z+19	; 0x13
    37da:	44 89       	ldd	r20, Z+20	; 0x14
    37dc:	55 89       	ldd	r21, Z+21	; 0x15
    37de:	22 50       	subi	r18, 0x02	; 2
    37e0:	30 40       	sbci	r19, 0x00	; 0
    37e2:	40 40       	sbci	r20, 0x00	; 0
    37e4:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    37e6:	f8 01       	movw	r30, r16
    37e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    37ea:	93 8d       	ldd	r25, Z+27	; 0x1b
    37ec:	a4 8d       	ldd	r26, Z+28	; 0x1c
    37ee:	b5 8d       	ldd	r27, Z+29	; 0x1d
    37f0:	02 97       	sbiw	r24, 0x02	; 2
    37f2:	a1 09       	sbc	r26, r1
    37f4:	b1 09       	sbc	r27, r1
    37f6:	28 17       	cp	r18, r24
    37f8:	39 07       	cpc	r19, r25
    37fa:	4a 07       	cpc	r20, r26
    37fc:	5b 07       	cpc	r21, r27
    37fe:	b8 f4       	brcc	.+46     	; 0x382e <f_write+0x234>
	return clst * fs->csize + fs->database;
    3800:	72 80       	ldd	r7, Z+2	; 0x02
    3802:	67 2d       	mov	r22, r7
    3804:	70 e0       	ldi	r23, 0x00	; 0
    3806:	80 e0       	ldi	r24, 0x00	; 0
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	0e 94 54 50 	call	0xa0a8	; 0xa0a8 <__mulsi3>
    380e:	9b 01       	movw	r18, r22
    3810:	ac 01       	movw	r20, r24
    3812:	f8 01       	movw	r30, r16
    3814:	86 a1       	ldd	r24, Z+38	; 0x26
    3816:	97 a1       	ldd	r25, Z+39	; 0x27
    3818:	a0 a5       	ldd	r26, Z+40	; 0x28
    381a:	b1 a5       	ldd	r27, Z+41	; 0x29
    381c:	28 0f       	add	r18, r24
    381e:	39 1f       	adc	r19, r25
    3820:	4a 1f       	adc	r20, r26
    3822:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3824:	21 15       	cp	r18, r1
    3826:	31 05       	cpc	r19, r1
    3828:	41 05       	cpc	r20, r1
    382a:	51 05       	cpc	r21, r1
    382c:	49 f4       	brne	.+18     	; 0x3840 <f_write+0x246>
    382e:	ab 81       	ldd	r26, Y+3	; 0x03
    3830:	bc 81       	ldd	r27, Y+4	; 0x04
    3832:	14 96       	adiw	r26, 0x04	; 4
    3834:	8c 91       	ld	r24, X
    3836:	14 97       	sbiw	r26, 0x04	; 4
    3838:	80 68       	ori	r24, 0x80	; 128
    383a:	14 96       	adiw	r26, 0x04	; 4
    383c:	8c 93       	st	X, r24
    383e:	8a cf       	rjmp	.-236    	; 0x3754 <f_write+0x15a>
			sect += fp->csect;
    3840:	eb 81       	ldd	r30, Y+3	; 0x03
    3842:	fc 81       	ldd	r31, Y+4	; 0x04
    3844:	85 81       	ldd	r24, Z+5	; 0x05
    3846:	69 01       	movw	r12, r18
    3848:	7a 01       	movw	r14, r20
    384a:	c8 0e       	add	r12, r24
    384c:	d1 1c       	adc	r13, r1
    384e:	e1 1c       	adc	r14, r1
    3850:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    3852:	54 01       	movw	r10, r8
    3854:	ab 2c       	mov	r10, r11
    3856:	bb 24       	eor	r11, r11
    3858:	a6 94       	lsr	r10
			if (cc) {								/* Write maximum contiguous sectors directly */
    385a:	a1 14       	cp	r10, r1
    385c:	b1 04       	cpc	r11, r1
    385e:	09 f4       	brne	.+2      	; 0x3862 <f_write+0x268>
    3860:	53 c0       	rjmp	.+166    	; 0x3908 <f_write+0x30e>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    3862:	28 2f       	mov	r18, r24
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	c5 01       	movw	r24, r10
    3868:	82 0f       	add	r24, r18
    386a:	93 1f       	adc	r25, r19
    386c:	67 2d       	mov	r22, r7
    386e:	70 e0       	ldi	r23, 0x00	; 0
    3870:	68 17       	cp	r22, r24
    3872:	79 07       	cpc	r23, r25
    3874:	18 f4       	brcc	.+6      	; 0x387c <f_write+0x282>
					cc = fp->fs->csize - fp->csect;
    3876:	5b 01       	movw	r10, r22
    3878:	a2 1a       	sub	r10, r18
    387a:	b3 0a       	sbc	r11, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    387c:	d8 01       	movw	r26, r16
    387e:	11 96       	adiw	r26, 0x01	; 1
    3880:	8c 91       	ld	r24, X
    3882:	b2 01       	movw	r22, r4
    3884:	a7 01       	movw	r20, r14
    3886:	96 01       	movw	r18, r12
    3888:	0a 2d       	mov	r16, r10
    388a:	0e 94 77 07 	call	0xeee	; 0xeee <disk_write>
    388e:	88 23       	and	r24, r24
    3890:	09 f0       	breq	.+2      	; 0x3894 <f_write+0x29a>
    3892:	5d c0       	rjmp	.+186    	; 0x394e <f_write+0x354>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
    3894:	ab 81       	ldd	r26, Y+3	; 0x03
    3896:	bc 81       	ldd	r27, Y+4	; 0x04
    3898:	56 96       	adiw	r26, 0x16	; 22
    389a:	2d 91       	ld	r18, X+
    389c:	3d 91       	ld	r19, X+
    389e:	4d 91       	ld	r20, X+
    38a0:	5c 91       	ld	r21, X
    38a2:	59 97       	sbiw	r26, 0x19	; 25
    38a4:	2c 19       	sub	r18, r12
    38a6:	3d 09       	sbc	r19, r13
    38a8:	4e 09       	sbc	r20, r14
    38aa:	5f 09       	sbc	r21, r15
    38ac:	c5 01       	movw	r24, r10
    38ae:	a0 e0       	ldi	r26, 0x00	; 0
    38b0:	b0 e0       	ldi	r27, 0x00	; 0
    38b2:	28 17       	cp	r18, r24
    38b4:	39 07       	cpc	r19, r25
    38b6:	4a 07       	cpc	r20, r26
    38b8:	5b 07       	cpc	r21, r27
    38ba:	c8 f4       	brcc	.+50     	; 0x38ee <f_write+0x2f4>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    38bc:	99 e0       	ldi	r25, 0x09	; 9
    38be:	22 0f       	add	r18, r18
    38c0:	33 1f       	adc	r19, r19
    38c2:	44 1f       	adc	r20, r20
    38c4:	55 1f       	adc	r21, r21
    38c6:	9a 95       	dec	r25
    38c8:	d1 f7       	brne	.-12     	; 0x38be <f_write+0x2c4>
    38ca:	f2 01       	movw	r30, r4
    38cc:	e2 0f       	add	r30, r18
    38ce:	f3 1f       	adc	r31, r19
    38d0:	d1 01       	movw	r26, r2
	while (cnt--) *d++ = *s++;
    38d2:	9f 01       	movw	r18, r30
    38d4:	20 50       	subi	r18, 0x00	; 0
    38d6:	3e 4f       	sbci	r19, 0xFE	; 254
    38d8:	02 c0       	rjmp	.+4      	; 0x38de <f_write+0x2e4>
    38da:	81 91       	ld	r24, Z+
    38dc:	8d 93       	st	X+, r24
    38de:	e2 17       	cp	r30, r18
    38e0:	f3 07       	cpc	r31, r19
    38e2:	d9 f7       	brne	.-10     	; 0x38da <f_write+0x2e0>
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
    38e4:	eb 81       	ldd	r30, Y+3	; 0x03
    38e6:	fc 81       	ldd	r31, Y+4	; 0x04
    38e8:	84 81       	ldd	r24, Z+4	; 0x04
    38ea:	8f 7b       	andi	r24, 0xBF	; 191
    38ec:	84 83       	std	Z+4, r24	; 0x04
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    38ee:	ab 81       	ldd	r26, Y+3	; 0x03
    38f0:	bc 81       	ldd	r27, Y+4	; 0x04
    38f2:	15 96       	adiw	r26, 0x05	; 5
    38f4:	8c 91       	ld	r24, X
    38f6:	15 97       	sbiw	r26, 0x05	; 5
    38f8:	8a 0d       	add	r24, r10
    38fa:	15 96       	adiw	r26, 0x05	; 5
    38fc:	8c 93       	st	X, r24
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    38fe:	b5 01       	movw	r22, r10
    3900:	76 2f       	mov	r23, r22
    3902:	66 27       	eor	r22, r22
    3904:	77 0f       	add	r23, r23
    3906:	64 c0       	rjmp	.+200    	; 0x39d0 <f_write+0x3d6>
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
    3908:	eb 81       	ldd	r30, Y+3	; 0x03
    390a:	fc 81       	ldd	r31, Y+4	; 0x04
    390c:	86 89       	ldd	r24, Z+22	; 0x16
    390e:	97 89       	ldd	r25, Z+23	; 0x17
    3910:	a0 8d       	ldd	r26, Z+24	; 0x18
    3912:	b1 8d       	ldd	r27, Z+25	; 0x19
    3914:	8c 15       	cp	r24, r12
    3916:	9d 05       	cpc	r25, r13
    3918:	ae 05       	cpc	r26, r14
    391a:	bf 05       	cpc	r27, r15
    391c:	01 f1       	breq	.+64     	; 0x395e <f_write+0x364>
				if (fp->fptr < fp->fsize &&
    391e:	26 81       	ldd	r18, Z+6	; 0x06
    3920:	37 81       	ldd	r19, Z+7	; 0x07
    3922:	40 85       	ldd	r20, Z+8	; 0x08
    3924:	51 85       	ldd	r21, Z+9	; 0x09
    3926:	82 85       	ldd	r24, Z+10	; 0x0a
    3928:	93 85       	ldd	r25, Z+11	; 0x0b
    392a:	a4 85       	ldd	r26, Z+12	; 0x0c
    392c:	b5 85       	ldd	r27, Z+13	; 0x0d
    392e:	28 17       	cp	r18, r24
    3930:	39 07       	cpc	r19, r25
    3932:	4a 07       	cpc	r20, r26
    3934:	5b 07       	cpc	r21, r27
    3936:	98 f4       	brcc	.+38     	; 0x395e <f_write+0x364>
    3938:	d8 01       	movw	r26, r16
    393a:	11 96       	adiw	r26, 0x01	; 1
    393c:	8c 91       	ld	r24, X
    393e:	b1 01       	movw	r22, r2
    3940:	a7 01       	movw	r20, r14
    3942:	96 01       	movw	r18, r12
    3944:	01 e0       	ldi	r16, 0x01	; 1
    3946:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_read>
    394a:	88 23       	and	r24, r24
    394c:	41 f0       	breq	.+16     	; 0x395e <f_write+0x364>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    394e:	eb 81       	ldd	r30, Y+3	; 0x03
    3950:	fc 81       	ldd	r31, Y+4	; 0x04
    3952:	84 81       	ldd	r24, Z+4	; 0x04
    3954:	80 68       	ori	r24, 0x80	; 128
    3956:	84 83       	std	Z+4, r24	; 0x04
    3958:	66 24       	eor	r6, r6
    395a:	63 94       	inc	r6
    395c:	7b c0       	rjmp	.+246    	; 0x3a54 <f_write+0x45a>
			}
#endif
			fp->dsect = sect;
    395e:	ab 81       	ldd	r26, Y+3	; 0x03
    3960:	bc 81       	ldd	r27, Y+4	; 0x04
    3962:	56 96       	adiw	r26, 0x16	; 22
    3964:	cd 92       	st	X+, r12
    3966:	dd 92       	st	X+, r13
    3968:	ed 92       	st	X+, r14
    396a:	fc 92       	st	X, r15
    396c:	59 97       	sbiw	r26, 0x19	; 25
			fp->csect++;							/* Next sector address in the cluster */
    396e:	15 96       	adiw	r26, 0x05	; 5
    3970:	8c 91       	ld	r24, X
    3972:	15 97       	sbiw	r26, 0x05	; 5
    3974:	8f 5f       	subi	r24, 0xFF	; 255
    3976:	15 96       	adiw	r26, 0x05	; 5
    3978:	8c 93       	st	X, r24
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    397a:	eb 81       	ldd	r30, Y+3	; 0x03
    397c:	fc 81       	ldd	r31, Y+4	; 0x04
    397e:	26 81       	ldd	r18, Z+6	; 0x06
    3980:	37 81       	ldd	r19, Z+7	; 0x07
    3982:	40 85       	ldd	r20, Z+8	; 0x08
    3984:	51 85       	ldd	r21, Z+9	; 0x09
    3986:	c9 01       	movw	r24, r18
    3988:	91 70       	andi	r25, 0x01	; 1
    398a:	60 e0       	ldi	r22, 0x00	; 0
    398c:	72 e0       	ldi	r23, 0x02	; 2
    398e:	68 1b       	sub	r22, r24
    3990:	79 0b       	sbc	r23, r25
    3992:	cb 01       	movw	r24, r22
    3994:	b4 01       	movw	r22, r8
    3996:	88 15       	cp	r24, r8
    3998:	99 05       	cpc	r25, r9
    399a:	08 f4       	brcc	.+2      	; 0x399e <f_write+0x3a4>
    399c:	bc 01       	movw	r22, r24
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    399e:	8b 01       	movw	r16, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    39a0:	f9 01       	movw	r30, r18
    39a2:	f1 70       	andi	r31, 0x01	; 1
    39a4:	b0 96       	adiw	r30, 0x20	; 32
    39a6:	8b 81       	ldd	r24, Y+3	; 0x03
    39a8:	9c 81       	ldd	r25, Y+4	; 0x04
    39aa:	e8 0f       	add	r30, r24
    39ac:	f9 1f       	adc	r31, r25
    39ae:	92 01       	movw	r18, r4
    39b0:	04 c0       	rjmp	.+8      	; 0x39ba <f_write+0x3c0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    39b2:	d9 01       	movw	r26, r18
    39b4:	8d 91       	ld	r24, X+
    39b6:	9d 01       	movw	r18, r26
    39b8:	81 93       	st	Z+, r24
    39ba:	01 50       	subi	r16, 0x01	; 1
    39bc:	10 40       	sbci	r17, 0x00	; 0
    39be:	bf ef       	ldi	r27, 0xFF	; 255
    39c0:	0f 3f       	cpi	r16, 0xFF	; 255
    39c2:	1b 07       	cpc	r17, r27
    39c4:	b1 f7       	brne	.-20     	; 0x39b2 <f_write+0x3b8>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
    39c6:	eb 81       	ldd	r30, Y+3	; 0x03
    39c8:	fc 81       	ldd	r31, Y+4	; 0x04
    39ca:	84 81       	ldd	r24, Z+4	; 0x04
    39cc:	80 64       	ori	r24, 0x40	; 64
    39ce:	84 83       	std	Z+4, r24	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    39d0:	46 0e       	add	r4, r22
    39d2:	57 1e       	adc	r5, r23
    39d4:	cb 01       	movw	r24, r22
    39d6:	a0 e0       	ldi	r26, 0x00	; 0
    39d8:	b0 e0       	ldi	r27, 0x00	; 0
    39da:	eb 81       	ldd	r30, Y+3	; 0x03
    39dc:	fc 81       	ldd	r31, Y+4	; 0x04
    39de:	26 81       	ldd	r18, Z+6	; 0x06
    39e0:	37 81       	ldd	r19, Z+7	; 0x07
    39e2:	40 85       	ldd	r20, Z+8	; 0x08
    39e4:	51 85       	ldd	r21, Z+9	; 0x09
    39e6:	28 0f       	add	r18, r24
    39e8:	39 1f       	adc	r19, r25
    39ea:	4a 1f       	adc	r20, r26
    39ec:	5b 1f       	adc	r21, r27
    39ee:	26 83       	std	Z+6, r18	; 0x06
    39f0:	37 83       	std	Z+7, r19	; 0x07
    39f2:	40 87       	std	Z+8, r20	; 0x08
    39f4:	51 87       	std	Z+9, r21	; 0x09
    39f6:	e9 81       	ldd	r30, Y+1	; 0x01
    39f8:	fa 81       	ldd	r31, Y+2	; 0x02
    39fa:	80 81       	ld	r24, Z
    39fc:	91 81       	ldd	r25, Z+1	; 0x01
    39fe:	86 0f       	add	r24, r22
    3a00:	97 1f       	adc	r25, r23
    3a02:	80 83       	st	Z, r24
    3a04:	91 83       	std	Z+1, r25	; 0x01
    3a06:	86 1a       	sub	r8, r22
    3a08:	97 0a       	sbc	r9, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    3a0a:	81 14       	cp	r8, r1
    3a0c:	91 04       	cpc	r9, r1
    3a0e:	09 f0       	breq	.+2      	; 0x3a12 <f_write+0x418>
    3a10:	4a ce       	rjmp	.-876    	; 0x36a6 <f_write+0xac>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    3a12:	ab 81       	ldd	r26, Y+3	; 0x03
    3a14:	bc 81       	ldd	r27, Y+4	; 0x04
    3a16:	16 96       	adiw	r26, 0x06	; 6
    3a18:	2d 91       	ld	r18, X+
    3a1a:	3d 91       	ld	r19, X+
    3a1c:	4d 91       	ld	r20, X+
    3a1e:	5c 91       	ld	r21, X
    3a20:	19 97       	sbiw	r26, 0x09	; 9
    3a22:	1a 96       	adiw	r26, 0x0a	; 10
    3a24:	8d 91       	ld	r24, X+
    3a26:	9d 91       	ld	r25, X+
    3a28:	0d 90       	ld	r0, X+
    3a2a:	bc 91       	ld	r27, X
    3a2c:	a0 2d       	mov	r26, r0
    3a2e:	82 17       	cp	r24, r18
    3a30:	93 07       	cpc	r25, r19
    3a32:	a4 07       	cpc	r26, r20
    3a34:	b5 07       	cpc	r27, r21
    3a36:	30 f4       	brcc	.+12     	; 0x3a44 <f_write+0x44a>
    3a38:	eb 81       	ldd	r30, Y+3	; 0x03
    3a3a:	fc 81       	ldd	r31, Y+4	; 0x04
    3a3c:	22 87       	std	Z+10, r18	; 0x0a
    3a3e:	33 87       	std	Z+11, r19	; 0x0b
    3a40:	44 87       	std	Z+12, r20	; 0x0c
    3a42:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    3a44:	ab 81       	ldd	r26, Y+3	; 0x03
    3a46:	bc 81       	ldd	r27, Y+4	; 0x04
    3a48:	14 96       	adiw	r26, 0x04	; 4
    3a4a:	8c 91       	ld	r24, X
    3a4c:	14 97       	sbiw	r26, 0x04	; 4
    3a4e:	80 62       	ori	r24, 0x20	; 32
    3a50:	14 96       	adiw	r26, 0x04	; 4
    3a52:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    3a54:	86 2d       	mov	r24, r6
    3a56:	24 96       	adiw	r28, 0x04	; 4
    3a58:	cd bf       	out	0x3d, r28	; 61
    3a5a:	de bf       	out	0x3e, r29	; 62
    3a5c:	cf 91       	pop	r28
    3a5e:	df 91       	pop	r29
    3a60:	1f 91       	pop	r17
    3a62:	0f 91       	pop	r16
    3a64:	ff 90       	pop	r15
    3a66:	ef 90       	pop	r14
    3a68:	df 90       	pop	r13
    3a6a:	cf 90       	pop	r12
    3a6c:	bf 90       	pop	r11
    3a6e:	af 90       	pop	r10
    3a70:	9f 90       	pop	r9
    3a72:	8f 90       	pop	r8
    3a74:	7f 90       	pop	r7
    3a76:	6f 90       	pop	r6
    3a78:	5f 90       	pop	r5
    3a7a:	4f 90       	pop	r4
    3a7c:	3f 90       	pop	r3
    3a7e:	2f 90       	pop	r2
    3a80:	08 95       	ret

00003a82 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    3a82:	0f 93       	push	r16
    3a84:	1f 93       	push	r17
    3a86:	cf 93       	push	r28
    3a88:	df 93       	push	r29
    3a8a:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3a8c:	6a 81       	ldd	r22, Y+2	; 0x02
    3a8e:	7b 81       	ldd	r23, Y+3	; 0x03
    3a90:	88 81       	ld	r24, Y
    3a92:	99 81       	ldd	r25, Y+1	; 0x01
    3a94:	0e 94 57 17 	call	0x2eae	; 0x2eae <validate>
    3a98:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    3a9a:	88 23       	and	r24, r24
    3a9c:	09 f0       	breq	.+2      	; 0x3aa0 <f_sync+0x1e>
    3a9e:	72 c0       	rjmp	.+228    	; 0x3b84 <f_sync+0x102>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    3aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    3aa2:	85 ff       	sbrs	r24, 5
    3aa4:	6f c0       	rjmp	.+222    	; 0x3b84 <f_sync+0x102>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    3aa6:	86 ff       	sbrs	r24, 6
    3aa8:	14 c0       	rjmp	.+40     	; 0x3ad2 <f_sync+0x50>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3aaa:	e8 81       	ld	r30, Y
    3aac:	f9 81       	ldd	r31, Y+1	; 0x01
    3aae:	be 01       	movw	r22, r28
    3ab0:	60 5e       	subi	r22, 0xE0	; 224
    3ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ab4:	2e 89       	ldd	r18, Y+22	; 0x16
    3ab6:	3f 89       	ldd	r19, Y+23	; 0x17
    3ab8:	48 8d       	ldd	r20, Y+24	; 0x18
    3aba:	59 8d       	ldd	r21, Y+25	; 0x19
    3abc:	81 81       	ldd	r24, Z+1	; 0x01
    3abe:	01 e0       	ldi	r16, 0x01	; 1
    3ac0:	0e 94 77 07 	call	0xeee	; 0xeee <disk_write>
    3ac4:	88 23       	and	r24, r24
    3ac6:	11 f0       	breq	.+4      	; 0x3acc <f_sync+0x4a>
    3ac8:	91 e0       	ldi	r25, 0x01	; 1
    3aca:	5c c0       	rjmp	.+184    	; 0x3b84 <f_sync+0x102>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    3acc:	8c 81       	ldd	r24, Y+4	; 0x04
    3ace:	8f 7b       	andi	r24, 0xBF	; 191
    3ad0:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    3ad2:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3ad4:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3ad6:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3ad8:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3ada:	88 81       	ld	r24, Y
    3adc:	99 81       	ldd	r25, Y+1	; 0x01
    3ade:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    3ae2:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    3ae4:	88 23       	and	r24, r24
    3ae6:	09 f0       	breq	.+2      	; 0x3aea <f_sync+0x68>
    3ae8:	4d c0       	rjmp	.+154    	; 0x3b84 <f_sync+0x102>
				dir = fp->dir_ptr;
    3aea:	0e 8d       	ldd	r16, Y+30	; 0x1e
    3aec:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    3aee:	f8 01       	movw	r30, r16
    3af0:	83 85       	ldd	r24, Z+11	; 0x0b
    3af2:	80 62       	ori	r24, 0x20	; 32
    3af4:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    3af6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3af8:	84 8f       	std	Z+28, r24	; 0x1c
    3afa:	8b 85       	ldd	r24, Y+11	; 0x0b
    3afc:	85 8f       	std	Z+29, r24	; 0x1d
    3afe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b00:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b02:	ac 85       	ldd	r26, Y+12	; 0x0c
    3b04:	bd 85       	ldd	r27, Y+13	; 0x0d
    3b06:	cd 01       	movw	r24, r26
    3b08:	aa 27       	eor	r26, r26
    3b0a:	bb 27       	eor	r27, r27
    3b0c:	86 8f       	std	Z+30, r24	; 0x1e
    3b0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b10:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b12:	ac 85       	ldd	r26, Y+12	; 0x0c
    3b14:	bd 85       	ldd	r27, Y+13	; 0x0d
    3b16:	8b 2f       	mov	r24, r27
    3b18:	99 27       	eor	r25, r25
    3b1a:	aa 27       	eor	r26, r26
    3b1c:	bb 27       	eor	r27, r27
    3b1e:	87 8f       	std	Z+31, r24	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    3b20:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b22:	82 8f       	std	Z+26, r24	; 0x1a
    3b24:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b26:	83 8f       	std	Z+27, r24	; 0x1b
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    3b28:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b2a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b2c:	a8 89       	ldd	r26, Y+16	; 0x10
    3b2e:	b9 89       	ldd	r27, Y+17	; 0x11
    3b30:	cd 01       	movw	r24, r26
    3b32:	aa 27       	eor	r26, r26
    3b34:	bb 27       	eor	r27, r27
    3b36:	84 8b       	std	Z+20, r24	; 0x14
    3b38:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b3c:	a8 89       	ldd	r26, Y+16	; 0x10
    3b3e:	b9 89       	ldd	r27, Y+17	; 0x11
    3b40:	cd 01       	movw	r24, r26
    3b42:	aa 27       	eor	r26, r26
    3b44:	bb 27       	eor	r27, r27
    3b46:	89 2f       	mov	r24, r25
    3b48:	99 27       	eor	r25, r25
    3b4a:	85 8b       	std	Z+21, r24	; 0x15
				tim = get_fattime();			/* Updated time */
    3b4c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    3b50:	f8 01       	movw	r30, r16
    3b52:	66 8b       	std	Z+22, r22	; 0x16
    3b54:	27 2f       	mov	r18, r23
    3b56:	33 27       	eor	r19, r19
    3b58:	27 8b       	std	Z+23, r18	; 0x17
    3b5a:	9c 01       	movw	r18, r24
    3b5c:	44 27       	eor	r20, r20
    3b5e:	55 27       	eor	r21, r21
    3b60:	20 8f       	std	Z+24, r18	; 0x18
    3b62:	69 2f       	mov	r22, r25
    3b64:	77 27       	eor	r23, r23
    3b66:	88 27       	eor	r24, r24
    3b68:	99 27       	eor	r25, r25
    3b6a:	61 8f       	std	Z+25, r22	; 0x19
				fp->flag &= ~FA__WRITTEN;
    3b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b6e:	8f 7d       	andi	r24, 0xDF	; 223
    3b70:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    3b72:	e8 81       	ld	r30, Y
    3b74:	f9 81       	ldd	r31, Y+1	; 0x01
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    3b7a:	88 81       	ld	r24, Y
    3b7c:	99 81       	ldd	r25, Y+1	; 0x01
    3b7e:	0e 94 c7 0a 	call	0x158e	; 0x158e <sync>
    3b82:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    3b84:	89 2f       	mov	r24, r25
    3b86:	df 91       	pop	r29
    3b88:	cf 91       	pop	r28
    3b8a:	1f 91       	pop	r17
    3b8c:	0f 91       	pop	r16
    3b8e:	08 95       	ret

00003b90 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    3b90:	cf 93       	push	r28
    3b92:	df 93       	push	r29
    3b94:	ec 01       	movw	r28, r24
    FATFS *fs = fp->fs;
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fs, res);
#else
	res = f_sync(fp);
    3b96:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <f_sync>
	if (res == FR_OK) fp->fs = NULL;
    3b9a:	88 23       	and	r24, r24
    3b9c:	11 f4       	brne	.+4      	; 0x3ba2 <f_close+0x12>
    3b9e:	18 82       	st	Y, r1
    3ba0:	19 82       	std	Y+1, r1	; 0x01
	return res;
#endif
}
    3ba2:	df 91       	pop	r29
    3ba4:	cf 91       	pop	r28
    3ba6:	08 95       	ret

00003ba8 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    3ba8:	2f 92       	push	r2
    3baa:	3f 92       	push	r3
    3bac:	4f 92       	push	r4
    3bae:	5f 92       	push	r5
    3bb0:	6f 92       	push	r6
    3bb2:	7f 92       	push	r7
    3bb4:	8f 92       	push	r8
    3bb6:	9f 92       	push	r9
    3bb8:	af 92       	push	r10
    3bba:	bf 92       	push	r11
    3bbc:	cf 92       	push	r12
    3bbe:	df 92       	push	r13
    3bc0:	0f 93       	push	r16
    3bc2:	1f 93       	push	r17
    3bc4:	df 93       	push	r29
    3bc6:	cf 93       	push	r28
    3bc8:	cd b7       	in	r28, 0x3d	; 61
    3bca:	de b7       	in	r29, 0x3e	; 62
    3bcc:	28 97       	sbiw	r28, 0x08	; 8
    3bce:	cd bf       	out	0x3d, r28	; 61
    3bd0:	de bf       	out	0x3e, r29	; 62
    3bd2:	8f 83       	std	Y+7, r24	; 0x07
    3bd4:	98 87       	std	Y+8, r25	; 0x08
    3bd6:	3a 01       	movw	r6, r20
    3bd8:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3bda:	dc 01       	movw	r26, r24
    3bdc:	12 96       	adiw	r26, 0x02	; 2
    3bde:	6d 91       	ld	r22, X+
    3be0:	7c 91       	ld	r23, X
    3be2:	13 97       	sbiw	r26, 0x03	; 3
    3be4:	8d 91       	ld	r24, X+
    3be6:	9c 91       	ld	r25, X
    3be8:	0e 94 57 17 	call	0x2eae	; 0x2eae <validate>
    3bec:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3bee:	88 23       	and	r24, r24
    3bf0:	09 f0       	breq	.+2      	; 0x3bf4 <f_lseek+0x4c>
    3bf2:	f3 c1       	rjmp	.+998    	; 0x3fda <f_lseek+0x432>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    3bf4:	ef 81       	ldd	r30, Y+7	; 0x07
    3bf6:	f8 85       	ldd	r31, Y+8	; 0x08
    3bf8:	84 81       	ldd	r24, Z+4	; 0x04
    3bfa:	87 fd       	sbrc	r24, 7
    3bfc:	98 c0       	rjmp	.+304    	; 0x3d2e <f_lseek+0x186>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    3bfe:	af 81       	ldd	r26, Y+7	; 0x07
    3c00:	b8 85       	ldd	r27, Y+8	; 0x08
    3c02:	1a 96       	adiw	r26, 0x0a	; 10
    3c04:	ad 90       	ld	r10, X+
    3c06:	bd 90       	ld	r11, X+
    3c08:	cd 90       	ld	r12, X+
    3c0a:	dc 90       	ld	r13, X
    3c0c:	1d 97       	sbiw	r26, 0x0d	; 13
    3c0e:	a6 14       	cp	r10, r6
    3c10:	b7 04       	cpc	r11, r7
    3c12:	c8 04       	cpc	r12, r8
    3c14:	d9 04       	cpc	r13, r9
    3c16:	10 f4       	brcc	.+4      	; 0x3c1c <f_lseek+0x74>
    3c18:	81 ff       	sbrs	r24, 1
    3c1a:	02 c0       	rjmp	.+4      	; 0x3c20 <f_lseek+0x78>
    3c1c:	64 01       	movw	r12, r8
    3c1e:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    3c20:	ef 81       	ldd	r30, Y+7	; 0x07
    3c22:	f8 85       	ldd	r31, Y+8	; 0x08
    3c24:	26 81       	ldd	r18, Z+6	; 0x06
    3c26:	37 81       	ldd	r19, Z+7	; 0x07
    3c28:	40 85       	ldd	r20, Z+8	; 0x08
    3c2a:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    3c2c:	16 82       	std	Z+6, r1	; 0x06
    3c2e:	17 82       	std	Z+7, r1	; 0x07
    3c30:	10 86       	std	Z+8, r1	; 0x08
    3c32:	11 86       	std	Z+9, r1	; 0x09
    3c34:	8f ef       	ldi	r24, 0xFF	; 255
    3c36:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    3c38:	a1 14       	cp	r10, r1
    3c3a:	b1 04       	cpc	r11, r1
    3c3c:	c1 04       	cpc	r12, r1
    3c3e:	d1 04       	cpc	r13, r1
    3c40:	09 f4       	brne	.+2      	; 0x3c44 <f_lseek+0x9c>
    3c42:	5f c1       	rjmp	.+702    	; 0x3f02 <f_lseek+0x35a>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    3c44:	01 90       	ld	r0, Z+
    3c46:	f0 81       	ld	r31, Z
    3c48:	e0 2d       	mov	r30, r0
    3c4a:	e9 83       	std	Y+1, r30	; 0x01
    3c4c:	fa 83       	std	Y+2, r31	; 0x02
    3c4e:	82 81       	ldd	r24, Z+2	; 0x02
    3c50:	68 2e       	mov	r6, r24
    3c52:	77 24       	eor	r7, r7
    3c54:	88 24       	eor	r8, r8
    3c56:	99 24       	eor	r9, r9
    3c58:	89 e0       	ldi	r24, 0x09	; 9
    3c5a:	66 0c       	add	r6, r6
    3c5c:	77 1c       	adc	r7, r7
    3c5e:	88 1c       	adc	r8, r8
    3c60:	99 1c       	adc	r9, r9
    3c62:	8a 95       	dec	r24
    3c64:	d1 f7       	brne	.-12     	; 0x3c5a <f_lseek+0xb2>
		if (ifptr > 0 &&
    3c66:	21 15       	cp	r18, r1
    3c68:	31 05       	cpc	r19, r1
    3c6a:	41 05       	cpc	r20, r1
    3c6c:	51 05       	cpc	r21, r1
    3c6e:	f1 f1       	breq	.+124    	; 0x3cec <f_lseek+0x144>
    3c70:	19 01       	movw	r2, r18
    3c72:	2a 01       	movw	r4, r20
    3c74:	08 94       	sec
    3c76:	21 08       	sbc	r2, r1
    3c78:	31 08       	sbc	r3, r1
    3c7a:	41 08       	sbc	r4, r1
    3c7c:	51 08       	sbc	r5, r1
    3c7e:	c6 01       	movw	r24, r12
    3c80:	b5 01       	movw	r22, r10
    3c82:	61 50       	subi	r22, 0x01	; 1
    3c84:	70 40       	sbci	r23, 0x00	; 0
    3c86:	80 40       	sbci	r24, 0x00	; 0
    3c88:	90 40       	sbci	r25, 0x00	; 0
    3c8a:	a4 01       	movw	r20, r8
    3c8c:	93 01       	movw	r18, r6
    3c8e:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    3c92:	2b 83       	std	Y+3, r18	; 0x03
    3c94:	3c 83       	std	Y+4, r19	; 0x04
    3c96:	4d 83       	std	Y+5, r20	; 0x05
    3c98:	5e 83       	std	Y+6, r21	; 0x06
    3c9a:	c2 01       	movw	r24, r4
    3c9c:	b1 01       	movw	r22, r2
    3c9e:	a4 01       	movw	r20, r8
    3ca0:	93 01       	movw	r18, r6
    3ca2:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    3ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    3caa:	ad 81       	ldd	r26, Y+5	; 0x05
    3cac:	be 81       	ldd	r27, Y+6	; 0x06
    3cae:	82 17       	cp	r24, r18
    3cb0:	93 07       	cpc	r25, r19
    3cb2:	a4 07       	cpc	r26, r20
    3cb4:	b5 07       	cpc	r27, r21
    3cb6:	d0 f0       	brcs	.+52     	; 0x3cec <f_lseek+0x144>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    3cb8:	88 27       	eor	r24, r24
    3cba:	99 27       	eor	r25, r25
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	86 19       	sub	r24, r6
    3cc0:	97 09       	sbc	r25, r7
    3cc2:	a8 09       	sbc	r26, r8
    3cc4:	b9 09       	sbc	r27, r9
    3cc6:	82 21       	and	r24, r2
    3cc8:	93 21       	and	r25, r3
    3cca:	a4 21       	and	r26, r4
    3ccc:	b5 21       	and	r27, r5
    3cce:	ef 81       	ldd	r30, Y+7	; 0x07
    3cd0:	f8 85       	ldd	r31, Y+8	; 0x08
    3cd2:	86 83       	std	Z+6, r24	; 0x06
    3cd4:	97 83       	std	Z+7, r25	; 0x07
    3cd6:	a0 87       	std	Z+8, r26	; 0x08
    3cd8:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    3cda:	a8 1a       	sub	r10, r24
    3cdc:	b9 0a       	sbc	r11, r25
    3cde:	ca 0a       	sbc	r12, r26
    3ce0:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    3ce2:	42 89       	ldd	r20, Z+18	; 0x12
    3ce4:	53 89       	ldd	r21, Z+19	; 0x13
    3ce6:	64 89       	ldd	r22, Z+20	; 0x14
    3ce8:	75 89       	ldd	r23, Z+21	; 0x15
    3cea:	39 c0       	rjmp	.+114    	; 0x3d5e <f_lseek+0x1b6>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    3cec:	af 81       	ldd	r26, Y+7	; 0x07
    3cee:	b8 85       	ldd	r27, Y+8	; 0x08
    3cf0:	1e 96       	adiw	r26, 0x0e	; 14
    3cf2:	4d 91       	ld	r20, X+
    3cf4:	5d 91       	ld	r21, X+
    3cf6:	6d 91       	ld	r22, X+
    3cf8:	7c 91       	ld	r23, X
    3cfa:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    3cfc:	41 15       	cp	r20, r1
    3cfe:	51 05       	cpc	r21, r1
    3d00:	61 05       	cpc	r22, r1
    3d02:	71 05       	cpc	r23, r1
    3d04:	21 f5       	brne	.+72     	; 0x3d4e <f_lseek+0x1a6>
				clst = create_chain(fp->fs, 0);
    3d06:	89 81       	ldd	r24, Y+1	; 0x01
    3d08:	9a 81       	ldd	r25, Y+2	; 0x02
    3d0a:	40 e0       	ldi	r20, 0x00	; 0
    3d0c:	50 e0       	ldi	r21, 0x00	; 0
    3d0e:	60 e0       	ldi	r22, 0x00	; 0
    3d10:	70 e0       	ldi	r23, 0x00	; 0
    3d12:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <create_chain>
    3d16:	ab 01       	movw	r20, r22
    3d18:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3d1a:	41 30       	cpi	r20, 0x01	; 1
    3d1c:	51 05       	cpc	r21, r1
    3d1e:	61 05       	cpc	r22, r1
    3d20:	71 05       	cpc	r23, r1
    3d22:	39 f4       	brne	.+14     	; 0x3d32 <f_lseek+0x18a>
    3d24:	ef 81       	ldd	r30, Y+7	; 0x07
    3d26:	f8 85       	ldd	r31, Y+8	; 0x08
    3d28:	84 81       	ldd	r24, Z+4	; 0x04
    3d2a:	80 68       	ori	r24, 0x80	; 128
    3d2c:	84 83       	std	Z+4, r24	; 0x04
    3d2e:	12 e0       	ldi	r17, 0x02	; 2
    3d30:	54 c1       	rjmp	.+680    	; 0x3fda <f_lseek+0x432>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3d32:	4f 3f       	cpi	r20, 0xFF	; 255
    3d34:	ff ef       	ldi	r31, 0xFF	; 255
    3d36:	5f 07       	cpc	r21, r31
    3d38:	ff ef       	ldi	r31, 0xFF	; 255
    3d3a:	6f 07       	cpc	r22, r31
    3d3c:	ff ef       	ldi	r31, 0xFF	; 255
    3d3e:	7f 07       	cpc	r23, r31
    3d40:	b1 f1       	breq	.+108    	; 0x3dae <f_lseek+0x206>
				fp->org_clust = clst;
    3d42:	ef 81       	ldd	r30, Y+7	; 0x07
    3d44:	f8 85       	ldd	r31, Y+8	; 0x08
    3d46:	46 87       	std	Z+14, r20	; 0x0e
    3d48:	57 87       	std	Z+15, r21	; 0x0f
    3d4a:	60 8b       	std	Z+16, r22	; 0x10
    3d4c:	71 8b       	std	Z+17, r23	; 0x11
			}
#endif
			fp->curr_clust = clst;
    3d4e:	af 81       	ldd	r26, Y+7	; 0x07
    3d50:	b8 85       	ldd	r27, Y+8	; 0x08
    3d52:	52 96       	adiw	r26, 0x12	; 18
    3d54:	4d 93       	st	X+, r20
    3d56:	5d 93       	st	X+, r21
    3d58:	6d 93       	st	X+, r22
    3d5a:	7c 93       	st	X, r23
    3d5c:	55 97       	sbiw	r26, 0x15	; 21
		}
		if (clst != 0) {
    3d5e:	41 15       	cp	r20, r1
    3d60:	51 05       	cpc	r21, r1
    3d62:	61 05       	cpc	r22, r1
    3d64:	71 05       	cpc	r23, r1
    3d66:	09 f0       	breq	.+2      	; 0x3d6a <f_lseek+0x1c2>
    3d68:	58 c0       	rjmp	.+176    	; 0x3e1a <f_lseek+0x272>
    3d6a:	cb c0       	rjmp	.+406    	; 0x3f02 <f_lseek+0x35a>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    3d6c:	ef 81       	ldd	r30, Y+7	; 0x07
    3d6e:	f8 85       	ldd	r31, Y+8	; 0x08
    3d70:	84 81       	ldd	r24, Z+4	; 0x04
    3d72:	20 81       	ld	r18, Z
    3d74:	31 81       	ldd	r19, Z+1	; 0x01
    3d76:	81 ff       	sbrs	r24, 1
    3d78:	0d c0       	rjmp	.+26     	; 0x3d94 <f_lseek+0x1ec>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    3d7a:	c9 01       	movw	r24, r18
    3d7c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <create_chain>
    3d80:	ab 01       	movw	r20, r22
    3d82:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    3d84:	41 15       	cp	r20, r1
    3d86:	51 05       	cpc	r21, r1
    3d88:	61 05       	cpc	r22, r1
    3d8a:	71 05       	cpc	r23, r1
    3d8c:	41 f4       	brne	.+16     	; 0x3d9e <f_lseek+0x1f6>
    3d8e:	64 01       	movw	r12, r8
    3d90:	53 01       	movw	r10, r6
    3d92:	49 c0       	rjmp	.+146    	; 0x3e26 <f_lseek+0x27e>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3d94:	c9 01       	movw	r24, r18
    3d96:	0e 94 56 0b 	call	0x16ac	; 0x16ac <get_fat>
    3d9a:	ab 01       	movw	r20, r22
    3d9c:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3d9e:	4f 3f       	cpi	r20, 0xFF	; 255
    3da0:	ff ef       	ldi	r31, 0xFF	; 255
    3da2:	5f 07       	cpc	r21, r31
    3da4:	ff ef       	ldi	r31, 0xFF	; 255
    3da6:	6f 07       	cpc	r22, r31
    3da8:	ff ef       	ldi	r31, 0xFF	; 255
    3daa:	7f 07       	cpc	r23, r31
    3dac:	49 f4       	brne	.+18     	; 0x3dc0 <f_lseek+0x218>
    3dae:	af 81       	ldd	r26, Y+7	; 0x07
    3db0:	b8 85       	ldd	r27, Y+8	; 0x08
    3db2:	14 96       	adiw	r26, 0x04	; 4
    3db4:	8c 91       	ld	r24, X
    3db6:	14 97       	sbiw	r26, 0x04	; 4
    3db8:	80 68       	ori	r24, 0x80	; 128
    3dba:	14 96       	adiw	r26, 0x04	; 4
    3dbc:	8c 93       	st	X, r24
    3dbe:	ed c0       	rjmp	.+474    	; 0x3f9a <f_lseek+0x3f2>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    3dc0:	42 30       	cpi	r20, 0x02	; 2
    3dc2:	51 05       	cpc	r21, r1
    3dc4:	61 05       	cpc	r22, r1
    3dc6:	71 05       	cpc	r23, r1
    3dc8:	08 f4       	brcc	.+2      	; 0x3dcc <f_lseek+0x224>
    3dca:	ac cf       	rjmp	.-168    	; 0x3d24 <f_lseek+0x17c>
    3dcc:	af 81       	ldd	r26, Y+7	; 0x07
    3dce:	b8 85       	ldd	r27, Y+8	; 0x08
    3dd0:	ed 91       	ld	r30, X+
    3dd2:	fc 91       	ld	r31, X
    3dd4:	82 8d       	ldd	r24, Z+26	; 0x1a
    3dd6:	93 8d       	ldd	r25, Z+27	; 0x1b
    3dd8:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3dda:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3ddc:	48 17       	cp	r20, r24
    3dde:	59 07       	cpc	r21, r25
    3de0:	6a 07       	cpc	r22, r26
    3de2:	7b 07       	cpc	r23, r27
    3de4:	08 f0       	brcs	.+2      	; 0x3de8 <f_lseek+0x240>
    3de6:	9e cf       	rjmp	.-196    	; 0x3d24 <f_lseek+0x17c>
				fp->curr_clust = clst;
    3de8:	af 81       	ldd	r26, Y+7	; 0x07
    3dea:	b8 85       	ldd	r27, Y+8	; 0x08
    3dec:	52 96       	adiw	r26, 0x12	; 18
    3dee:	4d 93       	st	X+, r20
    3df0:	5d 93       	st	X+, r21
    3df2:	6d 93       	st	X+, r22
    3df4:	7c 93       	st	X, r23
    3df6:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    3df8:	fd 01       	movw	r30, r26
    3dfa:	86 81       	ldd	r24, Z+6	; 0x06
    3dfc:	97 81       	ldd	r25, Z+7	; 0x07
    3dfe:	a0 85       	ldd	r26, Z+8	; 0x08
    3e00:	b1 85       	ldd	r27, Z+9	; 0x09
    3e02:	86 0d       	add	r24, r6
    3e04:	97 1d       	adc	r25, r7
    3e06:	a8 1d       	adc	r26, r8
    3e08:	b9 1d       	adc	r27, r9
    3e0a:	86 83       	std	Z+6, r24	; 0x06
    3e0c:	97 83       	std	Z+7, r25	; 0x07
    3e0e:	a0 87       	std	Z+8, r26	; 0x08
    3e10:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    3e12:	a6 18       	sub	r10, r6
    3e14:	b7 08       	sbc	r11, r7
    3e16:	c8 08       	sbc	r12, r8
    3e18:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    3e1a:	6a 14       	cp	r6, r10
    3e1c:	7b 04       	cpc	r7, r11
    3e1e:	8c 04       	cpc	r8, r12
    3e20:	9d 04       	cpc	r9, r13
    3e22:	08 f4       	brcc	.+2      	; 0x3e26 <f_lseek+0x27e>
    3e24:	a3 cf       	rjmp	.-186    	; 0x3d6c <f_lseek+0x1c4>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    3e26:	ef 81       	ldd	r30, Y+7	; 0x07
    3e28:	f8 85       	ldd	r31, Y+8	; 0x08
    3e2a:	86 81       	ldd	r24, Z+6	; 0x06
    3e2c:	97 81       	ldd	r25, Z+7	; 0x07
    3e2e:	a0 85       	ldd	r26, Z+8	; 0x08
    3e30:	b1 85       	ldd	r27, Z+9	; 0x09
    3e32:	8a 0d       	add	r24, r10
    3e34:	9b 1d       	adc	r25, r11
    3e36:	ac 1d       	adc	r26, r12
    3e38:	bd 1d       	adc	r27, r13
    3e3a:	86 83       	std	Z+6, r24	; 0x06
    3e3c:	97 83       	std	Z+7, r25	; 0x07
    3e3e:	a0 87       	std	Z+8, r26	; 0x08
    3e40:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    3e42:	d6 01       	movw	r26, r12
    3e44:	c5 01       	movw	r24, r10
    3e46:	09 e0       	ldi	r16, 0x09	; 9
    3e48:	b6 95       	lsr	r27
    3e4a:	a7 95       	ror	r26
    3e4c:	97 95       	ror	r25
    3e4e:	87 95       	ror	r24
    3e50:	0a 95       	dec	r16
    3e52:	d1 f7       	brne	.-12     	; 0x3e48 <f_lseek+0x2a0>
    3e54:	08 2f       	mov	r16, r24
    3e56:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    3e58:	8f ef       	ldi	r24, 0xFF	; 255
    3e5a:	91 e0       	ldi	r25, 0x01	; 1
    3e5c:	a0 e0       	ldi	r26, 0x00	; 0
    3e5e:	b0 e0       	ldi	r27, 0x00	; 0
    3e60:	a8 22       	and	r10, r24
    3e62:	b9 22       	and	r11, r25
    3e64:	ca 22       	and	r12, r26
    3e66:	db 22       	and	r13, r27
    3e68:	a1 14       	cp	r10, r1
    3e6a:	b1 04       	cpc	r11, r1
    3e6c:	c1 04       	cpc	r12, r1
    3e6e:	d1 04       	cpc	r13, r1
    3e70:	09 f4       	brne	.+2      	; 0x3e74 <f_lseek+0x2cc>
    3e72:	47 c0       	rjmp	.+142    	; 0x3f02 <f_lseek+0x35a>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    3e74:	80 80       	ld	r8, Z
    3e76:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3e78:	ee ef       	ldi	r30, 0xFE	; 254
    3e7a:	ae 2e       	mov	r10, r30
    3e7c:	ef ef       	ldi	r30, 0xFF	; 255
    3e7e:	be 2e       	mov	r11, r30
    3e80:	ef ef       	ldi	r30, 0xFF	; 255
    3e82:	ce 2e       	mov	r12, r30
    3e84:	ef ef       	ldi	r30, 0xFF	; 255
    3e86:	de 2e       	mov	r13, r30
    3e88:	a4 0e       	add	r10, r20
    3e8a:	b5 1e       	adc	r11, r21
    3e8c:	c6 1e       	adc	r12, r22
    3e8e:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    3e90:	f4 01       	movw	r30, r8
    3e92:	82 8d       	ldd	r24, Z+26	; 0x1a
    3e94:	93 8d       	ldd	r25, Z+27	; 0x1b
    3e96:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3e98:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3e9a:	02 97       	sbiw	r24, 0x02	; 2
    3e9c:	a1 09       	sbc	r26, r1
    3e9e:	b1 09       	sbc	r27, r1
    3ea0:	a8 16       	cp	r10, r24
    3ea2:	b9 06       	cpc	r11, r25
    3ea4:	ca 06       	cpc	r12, r26
    3ea6:	db 06       	cpc	r13, r27
    3ea8:	c0 f4       	brcc	.+48     	; 0x3eda <f_lseek+0x332>
	return clst * fs->csize + fs->database;
    3eaa:	22 81       	ldd	r18, Z+2	; 0x02
    3eac:	30 e0       	ldi	r19, 0x00	; 0
    3eae:	40 e0       	ldi	r20, 0x00	; 0
    3eb0:	50 e0       	ldi	r21, 0x00	; 0
    3eb2:	c6 01       	movw	r24, r12
    3eb4:	b5 01       	movw	r22, r10
    3eb6:	0e 94 54 50 	call	0xa0a8	; 0xa0a8 <__mulsi3>
    3eba:	9b 01       	movw	r18, r22
    3ebc:	ac 01       	movw	r20, r24
    3ebe:	f4 01       	movw	r30, r8
    3ec0:	86 a1       	ldd	r24, Z+38	; 0x26
    3ec2:	97 a1       	ldd	r25, Z+39	; 0x27
    3ec4:	a0 a5       	ldd	r26, Z+40	; 0x28
    3ec6:	b1 a5       	ldd	r27, Z+41	; 0x29
    3ec8:	28 0f       	add	r18, r24
    3eca:	39 1f       	adc	r19, r25
    3ecc:	4a 1f       	adc	r20, r26
    3ece:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    3ed0:	21 15       	cp	r18, r1
    3ed2:	31 05       	cpc	r19, r1
    3ed4:	41 05       	cpc	r20, r1
    3ed6:	51 05       	cpc	r21, r1
    3ed8:	49 f4       	brne	.+18     	; 0x3eec <f_lseek+0x344>
    3eda:	af 81       	ldd	r26, Y+7	; 0x07
    3edc:	b8 85       	ldd	r27, Y+8	; 0x08
    3ede:	14 96       	adiw	r26, 0x04	; 4
    3ee0:	8c 91       	ld	r24, X
    3ee2:	14 97       	sbiw	r26, 0x04	; 4
    3ee4:	80 68       	ori	r24, 0x80	; 128
    3ee6:	14 96       	adiw	r26, 0x04	; 4
    3ee8:	8c 93       	st	X, r24
    3eea:	21 cf       	rjmp	.-446    	; 0x3d2e <f_lseek+0x186>
				nsect += fp->csect;
    3eec:	59 01       	movw	r10, r18
    3eee:	6a 01       	movw	r12, r20
    3ef0:	a0 0e       	add	r10, r16
    3ef2:	b1 1c       	adc	r11, r1
    3ef4:	c1 1c       	adc	r12, r1
    3ef6:	d1 1c       	adc	r13, r1
				fp->csect++;
    3ef8:	0f 5f       	subi	r16, 0xFF	; 255
    3efa:	ef 81       	ldd	r30, Y+7	; 0x07
    3efc:	f8 85       	ldd	r31, Y+8	; 0x08
    3efe:	05 83       	std	Z+5, r16	; 0x05
    3f00:	03 c0       	rjmp	.+6      	; 0x3f08 <f_lseek+0x360>
    3f02:	aa 24       	eor	r10, r10
    3f04:	bb 24       	eor	r11, r11
    3f06:	65 01       	movw	r12, r10
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    3f08:	ef 81       	ldd	r30, Y+7	; 0x07
    3f0a:	f8 85       	ldd	r31, Y+8	; 0x08
    3f0c:	86 81       	ldd	r24, Z+6	; 0x06
    3f0e:	97 81       	ldd	r25, Z+7	; 0x07
    3f10:	a0 85       	ldd	r26, Z+8	; 0x08
    3f12:	b1 85       	ldd	r27, Z+9	; 0x09
    3f14:	91 70       	andi	r25, 0x01	; 1
    3f16:	a0 70       	andi	r26, 0x00	; 0
    3f18:	b0 70       	andi	r27, 0x00	; 0
    3f1a:	00 97       	sbiw	r24, 0x00	; 0
    3f1c:	a1 05       	cpc	r26, r1
    3f1e:	b1 05       	cpc	r27, r1
    3f20:	09 f4       	brne	.+2      	; 0x3f24 <f_lseek+0x37c>
    3f22:	45 c0       	rjmp	.+138    	; 0x3fae <f_lseek+0x406>
    3f24:	26 89       	ldd	r18, Z+22	; 0x16
    3f26:	37 89       	ldd	r19, Z+23	; 0x17
    3f28:	40 8d       	ldd	r20, Z+24	; 0x18
    3f2a:	51 8d       	ldd	r21, Z+25	; 0x19
    3f2c:	a2 16       	cp	r10, r18
    3f2e:	b3 06       	cpc	r11, r19
    3f30:	c4 06       	cpc	r12, r20
    3f32:	d5 06       	cpc	r13, r21
    3f34:	e1 f1       	breq	.+120    	; 0x3fae <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
    3f36:	84 81       	ldd	r24, Z+4	; 0x04
    3f38:	86 ff       	sbrs	r24, 6
    3f3a:	1a c0       	rjmp	.+52     	; 0x3f70 <f_lseek+0x3c8>
			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
    3f3c:	01 90       	ld	r0, Z+
    3f3e:	f0 81       	ld	r31, Z
    3f40:	e0 2d       	mov	r30, r0
    3f42:	6f 81       	ldd	r22, Y+7	; 0x07
    3f44:	78 85       	ldd	r23, Y+8	; 0x08
    3f46:	60 5e       	subi	r22, 0xE0	; 224
    3f48:	7f 4f       	sbci	r23, 0xFF	; 255
    3f4a:	81 81       	ldd	r24, Z+1	; 0x01
    3f4c:	01 e0       	ldi	r16, 0x01	; 1
    3f4e:	0e 94 77 07 	call	0xeee	; 0xeee <disk_write>
    3f52:	af 81       	ldd	r26, Y+7	; 0x07
    3f54:	b8 85       	ldd	r27, Y+8	; 0x08
    3f56:	14 96       	adiw	r26, 0x04	; 4
    3f58:	9c 91       	ld	r25, X
    3f5a:	14 97       	sbiw	r26, 0x04	; 4
    3f5c:	88 23       	and	r24, r24
    3f5e:	21 f0       	breq	.+8      	; 0x3f68 <f_lseek+0x3c0>
				ABORT(fp->fs, FR_DISK_ERR);
    3f60:	90 68       	ori	r25, 0x80	; 128
    3f62:	14 96       	adiw	r26, 0x04	; 4
    3f64:	9c 93       	st	X, r25
    3f66:	19 c0       	rjmp	.+50     	; 0x3f9a <f_lseek+0x3f2>
			fp->flag &= ~FA__DIRTY;
    3f68:	9f 7b       	andi	r25, 0xBF	; 191
    3f6a:	ef 81       	ldd	r30, Y+7	; 0x07
    3f6c:	f8 85       	ldd	r31, Y+8	; 0x08
    3f6e:	94 83       	std	Z+4, r25	; 0x04
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
    3f70:	af 81       	ldd	r26, Y+7	; 0x07
    3f72:	b8 85       	ldd	r27, Y+8	; 0x08
    3f74:	ed 91       	ld	r30, X+
    3f76:	fc 91       	ld	r31, X
    3f78:	11 97       	sbiw	r26, 0x01	; 1
    3f7a:	bd 01       	movw	r22, r26
    3f7c:	60 5e       	subi	r22, 0xE0	; 224
    3f7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f80:	81 81       	ldd	r24, Z+1	; 0x01
    3f82:	a6 01       	movw	r20, r12
    3f84:	95 01       	movw	r18, r10
    3f86:	01 e0       	ldi	r16, 0x01	; 1
    3f88:	0e 94 17 07 	call	0xe2e	; 0xe2e <disk_read>
    3f8c:	88 23       	and	r24, r24
    3f8e:	39 f0       	breq	.+14     	; 0x3f9e <f_lseek+0x3f6>
			ABORT(fp->fs, FR_DISK_ERR);
    3f90:	ef 81       	ldd	r30, Y+7	; 0x07
    3f92:	f8 85       	ldd	r31, Y+8	; 0x08
    3f94:	84 81       	ldd	r24, Z+4	; 0x04
    3f96:	80 68       	ori	r24, 0x80	; 128
    3f98:	84 83       	std	Z+4, r24	; 0x04
    3f9a:	11 e0       	ldi	r17, 0x01	; 1
    3f9c:	1e c0       	rjmp	.+60     	; 0x3fda <f_lseek+0x432>
#endif
		fp->dsect = nsect;
    3f9e:	af 81       	ldd	r26, Y+7	; 0x07
    3fa0:	b8 85       	ldd	r27, Y+8	; 0x08
    3fa2:	56 96       	adiw	r26, 0x16	; 22
    3fa4:	ad 92       	st	X+, r10
    3fa6:	bd 92       	st	X+, r11
    3fa8:	cd 92       	st	X+, r12
    3faa:	dc 92       	st	X, r13
    3fac:	59 97       	sbiw	r26, 0x19	; 25
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    3fae:	ef 81       	ldd	r30, Y+7	; 0x07
    3fb0:	f8 85       	ldd	r31, Y+8	; 0x08
    3fb2:	26 81       	ldd	r18, Z+6	; 0x06
    3fb4:	37 81       	ldd	r19, Z+7	; 0x07
    3fb6:	40 85       	ldd	r20, Z+8	; 0x08
    3fb8:	51 85       	ldd	r21, Z+9	; 0x09
    3fba:	82 85       	ldd	r24, Z+10	; 0x0a
    3fbc:	93 85       	ldd	r25, Z+11	; 0x0b
    3fbe:	a4 85       	ldd	r26, Z+12	; 0x0c
    3fc0:	b5 85       	ldd	r27, Z+13	; 0x0d
    3fc2:	82 17       	cp	r24, r18
    3fc4:	93 07       	cpc	r25, r19
    3fc6:	a4 07       	cpc	r26, r20
    3fc8:	b5 07       	cpc	r27, r21
    3fca:	38 f4       	brcc	.+14     	; 0x3fda <f_lseek+0x432>
		fp->fsize = fp->fptr;
    3fcc:	22 87       	std	Z+10, r18	; 0x0a
    3fce:	33 87       	std	Z+11, r19	; 0x0b
    3fd0:	44 87       	std	Z+12, r20	; 0x0c
    3fd2:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    3fd4:	84 81       	ldd	r24, Z+4	; 0x04
    3fd6:	80 62       	ori	r24, 0x20	; 32
    3fd8:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    3fda:	81 2f       	mov	r24, r17
    3fdc:	28 96       	adiw	r28, 0x08	; 8
    3fde:	cd bf       	out	0x3d, r28	; 61
    3fe0:	de bf       	out	0x3e, r29	; 62
    3fe2:	cf 91       	pop	r28
    3fe4:	df 91       	pop	r29
    3fe6:	1f 91       	pop	r17
    3fe8:	0f 91       	pop	r16
    3fea:	df 90       	pop	r13
    3fec:	cf 90       	pop	r12
    3fee:	bf 90       	pop	r11
    3ff0:	af 90       	pop	r10
    3ff2:	9f 90       	pop	r9
    3ff4:	8f 90       	pop	r8
    3ff6:	7f 90       	pop	r7
    3ff8:	6f 90       	pop	r6
    3ffa:	5f 90       	pop	r5
    3ffc:	4f 90       	pop	r4
    3ffe:	3f 90       	pop	r3
    4000:	2f 90       	pop	r2
    4002:	08 95       	ret

00004004 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    4004:	0f 93       	push	r16
    4006:	1f 93       	push	r17
    4008:	df 93       	push	r29
    400a:	cf 93       	push	r28
    400c:	cd b7       	in	r28, 0x3d	; 61
    400e:	de b7       	in	r29, 0x3e	; 62
    4010:	2e 97       	sbiw	r28, 0x0e	; 14
    4012:	cd bf       	out	0x3d, r28	; 61
    4014:	de bf       	out	0x3e, r29	; 62
    4016:	8c 01       	movw	r16, r24
    4018:	6d 87       	std	Y+13, r22	; 0x0d
    401a:	7e 87       	std	Y+14, r23	; 0x0e
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
    401c:	ce 01       	movw	r24, r28
    401e:	0d 96       	adiw	r24, 0x0d	; 13
    4020:	b8 01       	movw	r22, r16
    4022:	40 e0       	ldi	r20, 0x00	; 0
    4024:	0e 94 61 14 	call	0x28c2	; 0x28c2 <chk_mounted>
	if (res == FR_OK) {
    4028:	88 23       	and	r24, r24
    402a:	09 f0       	breq	.+2      	; 0x402e <f_opendir+0x2a>
    402c:	46 c0       	rjmp	.+140    	; 0x40ba <f_opendir+0xb6>
		INITBUF((*dj), sfn, lfn);
    402e:	ce 01       	movw	r24, r28
    4030:	01 96       	adiw	r24, 0x01	; 1
    4032:	d8 01       	movw	r26, r16
    4034:	54 96       	adiw	r26, 0x14	; 20
    4036:	8d 93       	st	X+, r24
    4038:	9c 93       	st	X, r25
    403a:	55 97       	sbiw	r26, 0x15	; 21
		res = follow_path(dj, path);			/* Follow the path to the directory */
    403c:	6d 85       	ldd	r22, Y+13	; 0x0d
    403e:	7e 85       	ldd	r23, Y+14	; 0x0e
    4040:	c8 01       	movw	r24, r16
    4042:	0e 94 88 12 	call	0x2510	; 0x2510 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    4046:	88 23       	and	r24, r24
    4048:	a9 f5       	brne	.+106    	; 0x40b4 <f_opendir+0xb0>
			dir = dj->dir;
    404a:	d8 01       	movw	r26, r16
    404c:	52 96       	adiw	r26, 0x12	; 18
    404e:	ed 91       	ld	r30, X+
    4050:	fc 91       	ld	r31, X
    4052:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    4054:	30 97       	sbiw	r30, 0x00	; 0
    4056:	f9 f0       	breq	.+62     	; 0x4096 <f_opendir+0x92>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    4058:	83 85       	ldd	r24, Z+11	; 0x0b
    405a:	84 ff       	sbrs	r24, 4
    405c:	2d c0       	rjmp	.+90     	; 0x40b8 <f_opendir+0xb4>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    405e:	35 89       	ldd	r19, Z+21	; 0x15
    4060:	20 e0       	ldi	r18, 0x00	; 0
    4062:	84 89       	ldd	r24, Z+20	; 0x14
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	28 2b       	or	r18, r24
    4068:	39 2b       	or	r19, r25
    406a:	40 e0       	ldi	r20, 0x00	; 0
    406c:	50 e0       	ldi	r21, 0x00	; 0
    406e:	a9 01       	movw	r20, r18
    4070:	33 27       	eor	r19, r19
    4072:	22 27       	eor	r18, r18
    4074:	93 8d       	ldd	r25, Z+27	; 0x1b
    4076:	80 e0       	ldi	r24, 0x00	; 0
    4078:	62 8d       	ldd	r22, Z+26	; 0x1a
    407a:	70 e0       	ldi	r23, 0x00	; 0
    407c:	86 2b       	or	r24, r22
    407e:	97 2b       	or	r25, r23
    4080:	a0 e0       	ldi	r26, 0x00	; 0
    4082:	b0 e0       	ldi	r27, 0x00	; 0
    4084:	28 2b       	or	r18, r24
    4086:	39 2b       	or	r19, r25
    4088:	4a 2b       	or	r20, r26
    408a:	5b 2b       	or	r21, r27
    408c:	f8 01       	movw	r30, r16
    408e:	26 83       	std	Z+6, r18	; 0x06
    4090:	37 83       	std	Z+7, r19	; 0x07
    4092:	40 87       	std	Z+8, r20	; 0x08
    4094:	51 87       	std	Z+9, r21	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    4096:	d8 01       	movw	r26, r16
    4098:	ed 91       	ld	r30, X+
    409a:	fc 91       	ld	r31, X
    409c:	11 97       	sbiw	r26, 0x01	; 1
    409e:	86 81       	ldd	r24, Z+6	; 0x06
    40a0:	97 81       	ldd	r25, Z+7	; 0x07
    40a2:	12 96       	adiw	r26, 0x02	; 2
    40a4:	8d 93       	st	X+, r24
    40a6:	9c 93       	st	X, r25
    40a8:	13 97       	sbiw	r26, 0x03	; 3
				res = dir_seek(dj, 0);			/* Rewind dir */
    40aa:	c8 01       	movw	r24, r16
    40ac:	60 e0       	ldi	r22, 0x00	; 0
    40ae:	70 e0       	ldi	r23, 0x00	; 0
    40b0:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <dir_seek>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    40b4:	84 30       	cpi	r24, 0x04	; 4
    40b6:	09 f4       	brne	.+2      	; 0x40ba <f_opendir+0xb6>
    40b8:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj->fs, res);
}
    40ba:	2e 96       	adiw	r28, 0x0e	; 14
    40bc:	cd bf       	out	0x3d, r28	; 61
    40be:	de bf       	out	0x3e, r29	; 62
    40c0:	cf 91       	pop	r28
    40c2:	df 91       	pop	r29
    40c4:	1f 91       	pop	r17
    40c6:	0f 91       	pop	r16
    40c8:	08 95       	ret

000040ca <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    40ca:	ef 92       	push	r14
    40cc:	ff 92       	push	r15
    40ce:	0f 93       	push	r16
    40d0:	1f 93       	push	r17
    40d2:	df 93       	push	r29
    40d4:	cf 93       	push	r28
    40d6:	cd b7       	in	r28, 0x3d	; 61
    40d8:	de b7       	in	r29, 0x3e	; 62
    40da:	2c 97       	sbiw	r28, 0x0c	; 12
    40dc:	cd bf       	out	0x3d, r28	; 61
    40de:	de bf       	out	0x3e, r29	; 62
    40e0:	8c 01       	movw	r16, r24
    40e2:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    40e4:	fc 01       	movw	r30, r24
    40e6:	62 81       	ldd	r22, Z+2	; 0x02
    40e8:	73 81       	ldd	r23, Z+3	; 0x03
    40ea:	80 81       	ld	r24, Z
    40ec:	91 81       	ldd	r25, Z+1	; 0x01
    40ee:	0e 94 57 17 	call	0x2eae	; 0x2eae <validate>
	if (res == FR_OK) {
    40f2:	88 23       	and	r24, r24
    40f4:	59 f5       	brne	.+86     	; 0x414c <f_readdir+0x82>
		INITBUF((*dj), sfn, lfn);
    40f6:	ce 01       	movw	r24, r28
    40f8:	01 96       	adiw	r24, 0x01	; 1
    40fa:	f8 01       	movw	r30, r16
    40fc:	84 8b       	std	Z+20, r24	; 0x14
    40fe:	95 8b       	std	Z+21, r25	; 0x15
		if (!fno) {
    4100:	e1 14       	cp	r14, r1
    4102:	f1 04       	cpc	r15, r1
    4104:	31 f4       	brne	.+12     	; 0x4112 <f_readdir+0x48>
			res = dir_seek(dj, 0);
    4106:	c8 01       	movw	r24, r16
    4108:	60 e0       	ldi	r22, 0x00	; 0
    410a:	70 e0       	ldi	r23, 0x00	; 0
    410c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <dir_seek>
    4110:	1d c0       	rjmp	.+58     	; 0x414c <f_readdir+0x82>
		} else {
			res = dir_read(dj);
    4112:	c8 01       	movw	r24, r16
    4114:	0e 94 50 11 	call	0x22a0	; 0x22a0 <dir_read>
			if (res == FR_NO_FILE) {
    4118:	84 30       	cpi	r24, 0x04	; 4
    411a:	31 f4       	brne	.+12     	; 0x4128 <f_readdir+0x5e>
				dj->sect = 0;
    411c:	f8 01       	movw	r30, r16
    411e:	16 86       	std	Z+14, r1	; 0x0e
    4120:	17 86       	std	Z+15, r1	; 0x0f
    4122:	10 8a       	std	Z+16, r1	; 0x10
    4124:	11 8a       	std	Z+17, r1	; 0x11
    4126:	02 c0       	rjmp	.+4      	; 0x412c <f_readdir+0x62>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    4128:	88 23       	and	r24, r24
    412a:	81 f4       	brne	.+32     	; 0x414c <f_readdir+0x82>
				get_fileinfo(dj, fno);		/* Get the object information */
    412c:	c8 01       	movw	r24, r16
    412e:	b7 01       	movw	r22, r14
    4130:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
    4134:	c8 01       	movw	r24, r16
    4136:	60 e0       	ldi	r22, 0x00	; 0
    4138:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <dir_next>
				if (res == FR_NO_FILE) {
    413c:	84 30       	cpi	r24, 0x04	; 4
    413e:	31 f4       	brne	.+12     	; 0x414c <f_readdir+0x82>
					dj->sect = 0;
    4140:	f8 01       	movw	r30, r16
    4142:	16 86       	std	Z+14, r1	; 0x0e
    4144:	17 86       	std	Z+15, r1	; 0x0f
    4146:	10 8a       	std	Z+16, r1	; 0x10
    4148:	11 8a       	std	Z+17, r1	; 0x11
    414a:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    414c:	2c 96       	adiw	r28, 0x0c	; 12
    414e:	cd bf       	out	0x3d, r28	; 61
    4150:	de bf       	out	0x3e, r29	; 62
    4152:	cf 91       	pop	r28
    4154:	df 91       	pop	r29
    4156:	1f 91       	pop	r17
    4158:	0f 91       	pop	r16
    415a:	ff 90       	pop	r15
    415c:	ef 90       	pop	r14
    415e:	08 95       	ret

00004160 <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    4160:	cf 92       	push	r12
    4162:	df 92       	push	r13
    4164:	ef 92       	push	r14
    4166:	ff 92       	push	r15
    4168:	1f 93       	push	r17
    416a:	df 93       	push	r29
    416c:	cf 93       	push	r28
    416e:	cd b7       	in	r28, 0x3d	; 61
    4170:	de b7       	in	r29, 0x3e	; 62
    4172:	a4 97       	sbiw	r28, 0x24	; 36
    4174:	cd bf       	out	0x3d, r28	; 61
    4176:	de bf       	out	0x3e, r29	; 62
    4178:	8b a3       	std	Y+35, r24	; 0x23
    417a:	9c a3       	std	Y+36, r25	; 0x24
    417c:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = chk_mounted(&path, &dj.fs, 0);
    417e:	2d e0       	ldi	r18, 0x0D	; 13
    4180:	e2 2e       	mov	r14, r18
    4182:	f1 2c       	mov	r15, r1
    4184:	ec 0e       	add	r14, r28
    4186:	fd 1e       	adc	r15, r29
    4188:	ce 01       	movw	r24, r28
    418a:	83 96       	adiw	r24, 0x23	; 35
    418c:	b7 01       	movw	r22, r14
    418e:	40 e0       	ldi	r20, 0x00	; 0
    4190:	0e 94 61 14 	call	0x28c2	; 0x28c2 <chk_mounted>
    4194:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    4196:	88 23       	and	r24, r24
    4198:	b1 f4       	brne	.+44     	; 0x41c6 <f_stat+0x66>
		INITBUF(dj, sfn, lfn);
    419a:	ce 01       	movw	r24, r28
    419c:	01 96       	adiw	r24, 0x01	; 1
    419e:	89 a3       	std	Y+33, r24	; 0x21
    41a0:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    41a2:	6b a1       	ldd	r22, Y+35	; 0x23
    41a4:	7c a1       	ldd	r23, Y+36	; 0x24
    41a6:	c7 01       	movw	r24, r14
    41a8:	0e 94 88 12 	call	0x2510	; 0x2510 <follow_path>
    41ac:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follwo completed */
    41ae:	88 23       	and	r24, r24
    41b0:	51 f4       	brne	.+20     	; 0x41c6 <f_stat+0x66>
			if (dj.dir)	/* Found an object */
    41b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    41b4:	98 a1       	ldd	r25, Y+32	; 0x20
    41b6:	89 2b       	or	r24, r25
    41b8:	11 f4       	brne	.+4      	; 0x41be <f_stat+0x5e>
    41ba:	16 e0       	ldi	r17, 0x06	; 6
    41bc:	04 c0       	rjmp	.+8      	; 0x41c6 <f_stat+0x66>
				get_fileinfo(&dj, fno);
    41be:	c7 01       	movw	r24, r14
    41c0:	b6 01       	movw	r22, r12
    41c2:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <get_fileinfo>
				res = FR_INVALID_NAME;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    41c6:	81 2f       	mov	r24, r17
    41c8:	a4 96       	adiw	r28, 0x24	; 36
    41ca:	cd bf       	out	0x3d, r28	; 61
    41cc:	de bf       	out	0x3e, r29	; 62
    41ce:	cf 91       	pop	r28
    41d0:	df 91       	pop	r29
    41d2:	1f 91       	pop	r17
    41d4:	ff 90       	pop	r15
    41d6:	ef 90       	pop	r14
    41d8:	df 90       	pop	r13
    41da:	cf 90       	pop	r12
    41dc:	08 95       	ret

000041de <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    41de:	2f 92       	push	r2
    41e0:	3f 92       	push	r3
    41e2:	4f 92       	push	r4
    41e4:	5f 92       	push	r5
    41e6:	6f 92       	push	r6
    41e8:	7f 92       	push	r7
    41ea:	8f 92       	push	r8
    41ec:	9f 92       	push	r9
    41ee:	af 92       	push	r10
    41f0:	bf 92       	push	r11
    41f2:	cf 92       	push	r12
    41f4:	df 92       	push	r13
    41f6:	ef 92       	push	r14
    41f8:	ff 92       	push	r15
    41fa:	0f 93       	push	r16
    41fc:	1f 93       	push	r17
    41fe:	df 93       	push	r29
    4200:	cf 93       	push	r28
    4202:	cd b7       	in	r28, 0x3d	; 61
    4204:	de b7       	in	r29, 0x3e	; 62
    4206:	29 97       	sbiw	r28, 0x09	; 9
    4208:	cd bf       	out	0x3d, r28	; 61
    420a:	de bf       	out	0x3e, r29	; 62
    420c:	89 83       	std	Y+1, r24	; 0x01
    420e:	9a 83       	std	Y+2, r25	; 0x02
    4210:	6c 83       	std	Y+4, r22	; 0x04
    4212:	7d 83       	std	Y+5, r23	; 0x05
    4214:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    4216:	ce 01       	movw	r24, r28
    4218:	01 96       	adiw	r24, 0x01	; 1
    421a:	ba 01       	movw	r22, r20
    421c:	40 e0       	ldi	r20, 0x00	; 0
    421e:	0e 94 61 14 	call	0x28c2	; 0x28c2 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
    4222:	88 23       	and	r24, r24
    4224:	09 f0       	breq	.+2      	; 0x4228 <f_getfree+0x4a>
    4226:	eb c0       	rjmp	.+470    	; 0x43fe <f_getfree+0x220>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
    4228:	d2 01       	movw	r26, r4
    422a:	ed 91       	ld	r30, X+
    422c:	fc 91       	ld	r31, X
    422e:	26 85       	ldd	r18, Z+14	; 0x0e
    4230:	37 85       	ldd	r19, Z+15	; 0x0f
    4232:	40 89       	ldd	r20, Z+16	; 0x10
    4234:	51 89       	ldd	r21, Z+17	; 0x11
    4236:	e2 8c       	ldd	r14, Z+26	; 0x1a
    4238:	f3 8c       	ldd	r15, Z+27	; 0x1b
    423a:	04 8d       	ldd	r16, Z+28	; 0x1c
    423c:	15 8d       	ldd	r17, Z+29	; 0x1d
    423e:	d8 01       	movw	r26, r16
    4240:	c7 01       	movw	r24, r14
    4242:	02 97       	sbiw	r24, 0x02	; 2
    4244:	a1 09       	sbc	r26, r1
    4246:	b1 09       	sbc	r27, r1
    4248:	82 17       	cp	r24, r18
    424a:	93 07       	cpc	r25, r19
    424c:	a4 07       	cpc	r26, r20
    424e:	b5 07       	cpc	r27, r21
    4250:	38 f0       	brcs	.+14     	; 0x4260 <f_getfree+0x82>
		*nclst = (*fatfs)->free_clust;
    4252:	ec 81       	ldd	r30, Y+4	; 0x04
    4254:	fd 81       	ldd	r31, Y+5	; 0x05
    4256:	20 83       	st	Z, r18
    4258:	31 83       	std	Z+1, r19	; 0x01
    425a:	42 83       	std	Z+2, r20	; 0x02
    425c:	53 83       	std	Z+3, r21	; 0x03
    425e:	ce c0       	rjmp	.+412    	; 0x43fc <f_getfree+0x21e>
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
    4260:	30 80       	ld	r3, Z
    4262:	3b 82       	std	Y+3, r3	; 0x03
	n = 0;
	if (fat == FS_FAT12) {
    4264:	23 2d       	mov	r18, r3
    4266:	21 30       	cpi	r18, 0x01	; 1
    4268:	e1 f5       	brne	.+120    	; 0x42e2 <f_getfree+0x104>
    426a:	aa 24       	eor	r10, r10
    426c:	bb 24       	eor	r11, r11
    426e:	65 01       	movw	r12, r10
    4270:	92 e0       	ldi	r25, 0x02	; 2
    4272:	e9 2e       	mov	r14, r25
    4274:	f1 2c       	mov	r15, r1
    4276:	01 2d       	mov	r16, r1
    4278:	11 2d       	mov	r17, r1
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
    427a:	d2 01       	movw	r26, r4
    427c:	8d 91       	ld	r24, X+
    427e:	9c 91       	ld	r25, X
    4280:	b8 01       	movw	r22, r16
    4282:	a7 01       	movw	r20, r14
    4284:	0e 94 56 0b 	call	0x16ac	; 0x16ac <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
    4288:	6f 3f       	cpi	r22, 0xFF	; 255
    428a:	bf ef       	ldi	r27, 0xFF	; 255
    428c:	7b 07       	cpc	r23, r27
    428e:	bf ef       	ldi	r27, 0xFF	; 255
    4290:	8b 07       	cpc	r24, r27
    4292:	bf ef       	ldi	r27, 0xFF	; 255
    4294:	9b 07       	cpc	r25, r27
    4296:	11 f4       	brne	.+4      	; 0x429c <f_getfree+0xbe>
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	b1 c0       	rjmp	.+354    	; 0x43fe <f_getfree+0x220>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
    429c:	61 30       	cpi	r22, 0x01	; 1
    429e:	71 05       	cpc	r23, r1
    42a0:	81 05       	cpc	r24, r1
    42a2:	91 05       	cpc	r25, r1
    42a4:	11 f4       	brne	.+4      	; 0x42aa <f_getfree+0xcc>
    42a6:	82 e0       	ldi	r24, 0x02	; 2
    42a8:	aa c0       	rjmp	.+340    	; 0x43fe <f_getfree+0x220>
			if (stat == 0) n++;
    42aa:	61 15       	cp	r22, r1
    42ac:	71 05       	cpc	r23, r1
    42ae:	81 05       	cpc	r24, r1
    42b0:	91 05       	cpc	r25, r1
    42b2:	29 f4       	brne	.+10     	; 0x42be <f_getfree+0xe0>
    42b4:	08 94       	sec
    42b6:	a1 1c       	adc	r10, r1
    42b8:	b1 1c       	adc	r11, r1
    42ba:	c1 1c       	adc	r12, r1
    42bc:	d1 1c       	adc	r13, r1
		} while (++clst < (*fatfs)->max_clust);
    42be:	08 94       	sec
    42c0:	e1 1c       	adc	r14, r1
    42c2:	f1 1c       	adc	r15, r1
    42c4:	01 1d       	adc	r16, r1
    42c6:	11 1d       	adc	r17, r1
    42c8:	d2 01       	movw	r26, r4
    42ca:	ed 91       	ld	r30, X+
    42cc:	fc 91       	ld	r31, X
    42ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    42d0:	93 8d       	ldd	r25, Z+27	; 0x1b
    42d2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    42d4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    42d6:	e8 16       	cp	r14, r24
    42d8:	f9 06       	cpc	r15, r25
    42da:	0a 07       	cpc	r16, r26
    42dc:	1b 07       	cpc	r17, r27
    42de:	68 f2       	brcs	.-102    	; 0x427a <f_getfree+0x9c>
    42e0:	7b c0       	rjmp	.+246    	; 0x43d8 <f_getfree+0x1fa>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
    42e2:	66 8c       	ldd	r6, Z+30	; 0x1e
    42e4:	77 8c       	ldd	r7, Z+31	; 0x1f
    42e6:	80 a0       	ldd	r8, Z+32	; 0x20
    42e8:	91 a0       	ldd	r9, Z+33	; 0x21
    42ea:	aa 24       	eor	r10, r10
    42ec:	bb 24       	eor	r11, r11
    42ee:	65 01       	movw	r12, r10
    42f0:	60 e0       	ldi	r22, 0x00	; 0
    42f2:	70 e0       	ldi	r23, 0x00	; 0
    42f4:	e0 e0       	ldi	r30, 0x00	; 0
    42f6:	f0 e0       	ldi	r31, 0x00	; 0
		i = 0; p = 0;
		do {
			if (!i) {
    42f8:	61 15       	cp	r22, r1
    42fa:	71 05       	cpc	r23, r1
    42fc:	a9 f4       	brne	.+42     	; 0x4328 <f_getfree+0x14a>
				res = move_window(*fatfs, sect++);
    42fe:	f2 01       	movw	r30, r4
    4300:	80 81       	ld	r24, Z
    4302:	91 81       	ldd	r25, Z+1	; 0x01
    4304:	b4 01       	movw	r22, r8
    4306:	a3 01       	movw	r20, r6
    4308:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
				if (res != FR_OK)
    430c:	88 23       	and	r24, r24
    430e:	09 f0       	breq	.+2      	; 0x4312 <f_getfree+0x134>
    4310:	76 c0       	rjmp	.+236    	; 0x43fe <f_getfree+0x220>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
    4312:	08 94       	sec
    4314:	61 1c       	adc	r6, r1
    4316:	71 1c       	adc	r7, r1
    4318:	81 1c       	adc	r8, r1
    431a:	91 1c       	adc	r9, r1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
    431c:	d2 01       	movw	r26, r4
    431e:	ed 91       	ld	r30, X+
    4320:	fc 91       	ld	r31, X
    4322:	be 96       	adiw	r30, 0x2e	; 46
    4324:	60 e0       	ldi	r22, 0x00	; 0
    4326:	72 e0       	ldi	r23, 0x02	; 2
    4328:	b1 81       	ldd	r27, Z+1	; 0x01
    432a:	b8 87       	std	Y+8, r27	; 0x08
    432c:	20 81       	ld	r18, Z
    432e:	29 87       	std	Y+9, r18	; 0x09
				i = SS(*fatfs);
			}
			if (fat == FS_FAT16) {
    4330:	3b 81       	ldd	r19, Y+3	; 0x03
    4332:	32 30       	cpi	r19, 0x02	; 2
    4334:	99 f4       	brne	.+38     	; 0x435c <f_getfree+0x17e>
				if (LD_WORD(p) == 0) n++;
    4336:	bf 83       	std	Y+7, r27	; 0x07
    4338:	1e 82       	std	Y+6, r1	; 0x06
    433a:	82 2f       	mov	r24, r18
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	ae 81       	ldd	r26, Y+6	; 0x06
    4340:	bf 81       	ldd	r27, Y+7	; 0x07
    4342:	8a 2b       	or	r24, r26
    4344:	9b 2b       	or	r25, r27
    4346:	89 2b       	or	r24, r25
    4348:	29 f4       	brne	.+10     	; 0x4354 <f_getfree+0x176>
    434a:	08 94       	sec
    434c:	a1 1c       	adc	r10, r1
    434e:	b1 1c       	adc	r11, r1
    4350:	c1 1c       	adc	r12, r1
    4352:	d1 1c       	adc	r13, r1
				p += 2; i -= 2;
    4354:	32 96       	adiw	r30, 0x02	; 2
    4356:	62 50       	subi	r22, 0x02	; 2
    4358:	70 40       	sbci	r23, 0x00	; 0
    435a:	33 c0       	rjmp	.+102    	; 0x43c2 <f_getfree+0x1e4>
			} else {
				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    435c:	23 81       	ldd	r18, Z+3	; 0x03
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	40 e0       	ldi	r20, 0x00	; 0
    4362:	50 e0       	ldi	r21, 0x00	; 0
    4364:	52 2f       	mov	r21, r18
    4366:	44 27       	eor	r20, r20
    4368:	33 27       	eor	r19, r19
    436a:	22 27       	eor	r18, r18
    436c:	82 81       	ldd	r24, Z+2	; 0x02
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	a0 e0       	ldi	r26, 0x00	; 0
    4372:	b0 e0       	ldi	r27, 0x00	; 0
    4374:	dc 01       	movw	r26, r24
    4376:	99 27       	eor	r25, r25
    4378:	88 27       	eor	r24, r24
    437a:	28 2b       	or	r18, r24
    437c:	39 2b       	or	r19, r25
    437e:	4a 2b       	or	r20, r26
    4380:	5b 2b       	or	r21, r27
    4382:	39 84       	ldd	r3, Y+9	; 0x09
    4384:	83 2d       	mov	r24, r3
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	a0 e0       	ldi	r26, 0x00	; 0
    438a:	b0 e0       	ldi	r27, 0x00	; 0
    438c:	28 2b       	or	r18, r24
    438e:	39 2b       	or	r19, r25
    4390:	4a 2b       	or	r20, r26
    4392:	5b 2b       	or	r21, r27
    4394:	38 84       	ldd	r3, Y+8	; 0x08
    4396:	22 24       	eor	r2, r2
    4398:	c1 01       	movw	r24, r2
    439a:	a0 e0       	ldi	r26, 0x00	; 0
    439c:	b0 e0       	ldi	r27, 0x00	; 0
    439e:	28 2b       	or	r18, r24
    43a0:	39 2b       	or	r19, r25
    43a2:	4a 2b       	or	r20, r26
    43a4:	5b 2b       	or	r21, r27
    43a6:	5f 70       	andi	r21, 0x0F	; 15
    43a8:	21 15       	cp	r18, r1
    43aa:	31 05       	cpc	r19, r1
    43ac:	41 05       	cpc	r20, r1
    43ae:	51 05       	cpc	r21, r1
    43b0:	29 f4       	brne	.+10     	; 0x43bc <f_getfree+0x1de>
    43b2:	08 94       	sec
    43b4:	a1 1c       	adc	r10, r1
    43b6:	b1 1c       	adc	r11, r1
    43b8:	c1 1c       	adc	r12, r1
    43ba:	d1 1c       	adc	r13, r1
				p += 4; i -= 4;
    43bc:	34 96       	adiw	r30, 0x04	; 4
    43be:	64 50       	subi	r22, 0x04	; 4
    43c0:	70 40       	sbci	r23, 0x00	; 0
			}
		} while (--clst);
    43c2:	08 94       	sec
    43c4:	e1 08       	sbc	r14, r1
    43c6:	f1 08       	sbc	r15, r1
    43c8:	01 09       	sbc	r16, r1
    43ca:	11 09       	sbc	r17, r1
    43cc:	e1 14       	cp	r14, r1
    43ce:	f1 04       	cpc	r15, r1
    43d0:	01 05       	cpc	r16, r1
    43d2:	11 05       	cpc	r17, r1
    43d4:	09 f0       	breq	.+2      	; 0x43d8 <f_getfree+0x1fa>
    43d6:	90 cf       	rjmp	.-224    	; 0x42f8 <f_getfree+0x11a>
	}
	(*fatfs)->free_clust = n;
    43d8:	d2 01       	movw	r26, r4
    43da:	ed 91       	ld	r30, X+
    43dc:	fc 91       	ld	r31, X
    43de:	a6 86       	std	Z+14, r10	; 0x0e
    43e0:	b7 86       	std	Z+15, r11	; 0x0f
    43e2:	c0 8a       	std	Z+16, r12	; 0x10
    43e4:	d1 8a       	std	Z+17, r13	; 0x11
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    43e6:	bb 81       	ldd	r27, Y+3	; 0x03
    43e8:	b3 30       	cpi	r27, 0x03	; 3
    43ea:	11 f4       	brne	.+4      	; 0x43f0 <f_getfree+0x212>
    43ec:	81 e0       	ldi	r24, 0x01	; 1
    43ee:	85 83       	std	Z+5, r24	; 0x05
	*nclst = n;
    43f0:	ec 81       	ldd	r30, Y+4	; 0x04
    43f2:	fd 81       	ldd	r31, Y+5	; 0x05
    43f4:	a0 82       	st	Z, r10
    43f6:	b1 82       	std	Z+1, r11	; 0x01
    43f8:	c2 82       	std	Z+2, r12	; 0x02
    43fa:	d3 82       	std	Z+3, r13	; 0x03
    43fc:	80 e0       	ldi	r24, 0x00	; 0

	LEAVE_FF(*fatfs, FR_OK);
}
    43fe:	29 96       	adiw	r28, 0x09	; 9
    4400:	cd bf       	out	0x3d, r28	; 61
    4402:	de bf       	out	0x3e, r29	; 62
    4404:	cf 91       	pop	r28
    4406:	df 91       	pop	r29
    4408:	1f 91       	pop	r17
    440a:	0f 91       	pop	r16
    440c:	ff 90       	pop	r15
    440e:	ef 90       	pop	r14
    4410:	df 90       	pop	r13
    4412:	cf 90       	pop	r12
    4414:	bf 90       	pop	r11
    4416:	af 90       	pop	r10
    4418:	9f 90       	pop	r9
    441a:	8f 90       	pop	r8
    441c:	7f 90       	pop	r7
    441e:	6f 90       	pop	r6
    4420:	5f 90       	pop	r5
    4422:	4f 90       	pop	r4
    4424:	3f 90       	pop	r3
    4426:	2f 90       	pop	r2
    4428:	08 95       	ret

0000442a <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    442a:	cf 92       	push	r12
    442c:	df 92       	push	r13
    442e:	ef 92       	push	r14
    4430:	ff 92       	push	r15
    4432:	0f 93       	push	r16
    4434:	1f 93       	push	r17
    4436:	cf 93       	push	r28
    4438:	df 93       	push	r29
    443a:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    443c:	6a 81       	ldd	r22, Y+2	; 0x02
    443e:	7b 81       	ldd	r23, Y+3	; 0x03
    4440:	88 81       	ld	r24, Y
    4442:	99 81       	ldd	r25, Y+1	; 0x01
    4444:	0e 94 57 17 	call	0x2eae	; 0x2eae <validate>
    4448:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    444a:	88 23       	and	r24, r24
    444c:	09 f0       	breq	.+2      	; 0x4450 <f_truncate+0x26>
    444e:	6e c0       	rjmp	.+220    	; 0x452c <f_truncate+0x102>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    4450:	6c 81       	ldd	r22, Y+4	; 0x04
    4452:	67 ff       	sbrs	r22, 7
    4454:	02 c0       	rjmp	.+4      	; 0x445a <f_truncate+0x30>
    4456:	12 e0       	ldi	r17, 0x02	; 2
    4458:	69 c0       	rjmp	.+210    	; 0x452c <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
    445a:	61 fd       	sbrc	r22, 1
    445c:	02 c0       	rjmp	.+4      	; 0x4462 <f_truncate+0x38>
    445e:	17 e0       	ldi	r17, 0x07	; 7
    4460:	65 c0       	rjmp	.+202    	; 0x452c <f_truncate+0x102>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
    4462:	2e 81       	ldd	r18, Y+6	; 0x06
    4464:	3f 81       	ldd	r19, Y+7	; 0x07
    4466:	48 85       	ldd	r20, Y+8	; 0x08
    4468:	59 85       	ldd	r21, Y+9	; 0x09
    446a:	8a 85       	ldd	r24, Y+10	; 0x0a
    446c:	9b 85       	ldd	r25, Y+11	; 0x0b
    446e:	ac 85       	ldd	r26, Y+12	; 0x0c
    4470:	bd 85       	ldd	r27, Y+13	; 0x0d
    4472:	28 17       	cp	r18, r24
    4474:	39 07       	cpc	r19, r25
    4476:	4a 07       	cpc	r20, r26
    4478:	5b 07       	cpc	r21, r27
    447a:	08 f0       	brcs	.+2      	; 0x447e <f_truncate+0x54>
    447c:	57 c0       	rjmp	.+174    	; 0x452c <f_truncate+0x102>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    447e:	2a 87       	std	Y+10, r18	; 0x0a
    4480:	3b 87       	std	Y+11, r19	; 0x0b
    4482:	4c 87       	std	Y+12, r20	; 0x0c
    4484:	5d 87       	std	Y+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    4486:	60 62       	ori	r22, 0x20	; 32
    4488:	6c 83       	std	Y+4, r22	; 0x04
    448a:	88 81       	ld	r24, Y
    448c:	99 81       	ldd	r25, Y+1	; 0x01
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    448e:	21 15       	cp	r18, r1
    4490:	31 05       	cpc	r19, r1
    4492:	41 05       	cpc	r20, r1
    4494:	51 05       	cpc	r21, r1
    4496:	61 f4       	brne	.+24     	; 0x44b0 <f_truncate+0x86>
			res = remove_chain(fp->fs, fp->org_clust);
    4498:	4e 85       	ldd	r20, Y+14	; 0x0e
    449a:	5f 85       	ldd	r21, Y+15	; 0x0f
    449c:	68 89       	ldd	r22, Y+16	; 0x10
    449e:	79 89       	ldd	r23, Y+17	; 0x11
    44a0:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <remove_chain>
    44a4:	18 2f       	mov	r17, r24
			fp->org_clust = 0;
    44a6:	1e 86       	std	Y+14, r1	; 0x0e
    44a8:	1f 86       	std	Y+15, r1	; 0x0f
    44aa:	18 8a       	std	Y+16, r1	; 0x10
    44ac:	19 8a       	std	Y+17, r1	; 0x11
    44ae:	39 c0       	rjmp	.+114    	; 0x4522 <f_truncate+0xf8>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
    44b0:	4a 89       	ldd	r20, Y+18	; 0x12
    44b2:	5b 89       	ldd	r21, Y+19	; 0x13
    44b4:	6c 89       	ldd	r22, Y+20	; 0x14
    44b6:	7d 89       	ldd	r23, Y+21	; 0x15
    44b8:	0e 94 56 0b 	call	0x16ac	; 0x16ac <get_fat>
    44bc:	6b 01       	movw	r12, r22
    44be:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    44c0:	8f ef       	ldi	r24, 0xFF	; 255
    44c2:	c8 16       	cp	r12, r24
    44c4:	8f ef       	ldi	r24, 0xFF	; 255
    44c6:	d8 06       	cpc	r13, r24
    44c8:	8f ef       	ldi	r24, 0xFF	; 255
    44ca:	e8 06       	cpc	r14, r24
    44cc:	8f ef       	ldi	r24, 0xFF	; 255
    44ce:	f8 06       	cpc	r15, r24
    44d0:	b9 f1       	breq	.+110    	; 0x4540 <f_truncate+0x116>
			if (ncl == 1) res = FR_INT_ERR;
    44d2:	81 e0       	ldi	r24, 0x01	; 1
    44d4:	c8 16       	cp	r12, r24
    44d6:	d1 04       	cpc	r13, r1
    44d8:	e1 04       	cpc	r14, r1
    44da:	f1 04       	cpc	r15, r1
    44dc:	11 f4       	brne	.+4      	; 0x44e2 <f_truncate+0xb8>
    44de:	12 e0       	ldi	r17, 0x02	; 2
    44e0:	22 c0       	rjmp	.+68     	; 0x4526 <f_truncate+0xfc>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
    44e2:	e8 81       	ld	r30, Y
    44e4:	f9 81       	ldd	r31, Y+1	; 0x01
    44e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    44e8:	93 8d       	ldd	r25, Z+27	; 0x1b
    44ea:	a4 8d       	ldd	r26, Z+28	; 0x1c
    44ec:	b5 8d       	ldd	r27, Z+29	; 0x1d
    44ee:	c8 16       	cp	r12, r24
    44f0:	d9 06       	cpc	r13, r25
    44f2:	ea 06       	cpc	r14, r26
    44f4:	fb 06       	cpc	r15, r27
    44f6:	d0 f4       	brcc	.+52     	; 0x452c <f_truncate+0x102>
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
    44f8:	4a 89       	ldd	r20, Y+18	; 0x12
    44fa:	5b 89       	ldd	r21, Y+19	; 0x13
    44fc:	6c 89       	ldd	r22, Y+20	; 0x14
    44fe:	7d 89       	ldd	r23, Y+21	; 0x15
    4500:	cf 01       	movw	r24, r30
    4502:	0f ef       	ldi	r16, 0xFF	; 255
    4504:	1f ef       	ldi	r17, 0xFF	; 255
    4506:	2f ef       	ldi	r18, 0xFF	; 255
    4508:	3f e0       	ldi	r19, 0x0F	; 15
    450a:	0e 94 40 0c 	call	0x1880	; 0x1880 <put_fat>
    450e:	18 2f       	mov	r17, r24
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    4510:	88 23       	and	r24, r24
    4512:	49 f4       	brne	.+18     	; 0x4526 <f_truncate+0xfc>
    4514:	88 81       	ld	r24, Y
    4516:	99 81       	ldd	r25, Y+1	; 0x01
    4518:	b7 01       	movw	r22, r14
    451a:	a6 01       	movw	r20, r12
    451c:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <remove_chain>
    4520:	18 2f       	mov	r17, r24
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    4522:	11 23       	and	r17, r17
    4524:	19 f0       	breq	.+6      	; 0x452c <f_truncate+0x102>
    4526:	8c 81       	ldd	r24, Y+4	; 0x04
    4528:	80 68       	ori	r24, 0x80	; 128
    452a:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, res);
}
    452c:	81 2f       	mov	r24, r17
    452e:	df 91       	pop	r29
    4530:	cf 91       	pop	r28
    4532:	1f 91       	pop	r17
    4534:	0f 91       	pop	r16
    4536:	ff 90       	pop	r15
    4538:	ef 90       	pop	r14
    453a:	df 90       	pop	r13
    453c:	cf 90       	pop	r12
    453e:	08 95       	ret
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
    4540:	11 e0       	ldi	r17, 0x01	; 1
    4542:	f1 cf       	rjmp	.-30     	; 0x4526 <f_truncate+0xfc>

00004544 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
    4544:	cf 92       	push	r12
    4546:	df 92       	push	r13
    4548:	ef 92       	push	r14
    454a:	ff 92       	push	r15
    454c:	0f 93       	push	r16
    454e:	1f 93       	push	r17
    4550:	df 93       	push	r29
    4552:	cf 93       	push	r28
    4554:	cd b7       	in	r28, 0x3d	; 61
    4556:	de b7       	in	r29, 0x3e	; 62
    4558:	ea 97       	sbiw	r28, 0x3a	; 58
    455a:	cd bf       	out	0x3d, r28	; 61
    455c:	de bf       	out	0x3e, r29	; 62
    455e:	89 af       	std	Y+57, r24	; 0x39
    4560:	9a af       	std	Y+58, r25	; 0x3a
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = chk_mounted(&path, &dj.fs, 1);
    4562:	4d e0       	ldi	r20, 0x0D	; 13
    4564:	c4 2e       	mov	r12, r20
    4566:	d1 2c       	mov	r13, r1
    4568:	cc 0e       	add	r12, r28
    456a:	dd 1e       	adc	r13, r29
    456c:	ce 01       	movw	r24, r28
    456e:	c9 96       	adiw	r24, 0x39	; 57
    4570:	b6 01       	movw	r22, r12
    4572:	41 e0       	ldi	r20, 0x01	; 1
    4574:	0e 94 61 14 	call	0x28c2	; 0x28c2 <chk_mounted>
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    4578:	88 23       	and	r24, r24
    457a:	09 f0       	breq	.+2      	; 0x457e <f_unlink+0x3a>
    457c:	71 c0       	rjmp	.+226    	; 0x4660 <f_unlink+0x11c>

	INITBUF(dj, sfn, lfn);
    457e:	ce 01       	movw	r24, r28
    4580:	01 96       	adiw	r24, 0x01	; 1
    4582:	89 a3       	std	Y+33, r24	; 0x21
    4584:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    4586:	69 ad       	ldd	r22, Y+57	; 0x39
    4588:	7a ad       	ldd	r23, Y+58	; 0x3a
    458a:	c6 01       	movw	r24, r12
    458c:	0e 94 88 12 	call	0x2510	; 0x2510 <follow_path>
	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
    4590:	88 23       	and	r24, r24
    4592:	09 f0       	breq	.+2      	; 0x4596 <f_unlink+0x52>
    4594:	65 c0       	rjmp	.+202    	; 0x4660 <f_unlink+0x11c>

	dir = dj.dir;
    4596:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4598:	f8 a1       	ldd	r31, Y+32	; 0x20
	if (!dir)								/* Is it the root directory? */
    459a:	30 97       	sbiw	r30, 0x00	; 0
    459c:	11 f4       	brne	.+4      	; 0x45a2 <f_unlink+0x5e>
    459e:	86 e0       	ldi	r24, 0x06	; 6
    45a0:	5f c0       	rjmp	.+190    	; 0x4660 <f_unlink+0x11c>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
    45a2:	83 85       	ldd	r24, Z+11	; 0x0b
    45a4:	48 2f       	mov	r20, r24
    45a6:	80 fd       	sbrc	r24, 0
    45a8:	5a c0       	rjmp	.+180    	; 0x465e <f_unlink+0x11a>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    45aa:	95 89       	ldd	r25, Z+21	; 0x15
    45ac:	80 e0       	ldi	r24, 0x00	; 0
    45ae:	24 89       	ldd	r18, Z+20	; 0x14
    45b0:	30 e0       	ldi	r19, 0x00	; 0
    45b2:	82 2b       	or	r24, r18
    45b4:	93 2b       	or	r25, r19
    45b6:	a0 e0       	ldi	r26, 0x00	; 0
    45b8:	b0 e0       	ldi	r27, 0x00	; 0
    45ba:	8c 01       	movw	r16, r24
    45bc:	ff 24       	eor	r15, r15
    45be:	ee 24       	eor	r14, r14
    45c0:	93 8d       	ldd	r25, Z+27	; 0x1b
    45c2:	80 e0       	ldi	r24, 0x00	; 0
    45c4:	22 8d       	ldd	r18, Z+26	; 0x1a
    45c6:	30 e0       	ldi	r19, 0x00	; 0
    45c8:	82 2b       	or	r24, r18
    45ca:	93 2b       	or	r25, r19
    45cc:	a0 e0       	ldi	r26, 0x00	; 0
    45ce:	b0 e0       	ldi	r27, 0x00	; 0
    45d0:	e8 2a       	or	r14, r24
    45d2:	f9 2a       	or	r15, r25
    45d4:	0a 2b       	or	r16, r26
    45d6:	1b 2b       	or	r17, r27

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
    45d8:	44 ff       	sbrs	r20, 4
    45da:	29 c0       	rjmp	.+82     	; 0x462e <f_unlink+0xea>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
    45dc:	82 e0       	ldi	r24, 0x02	; 2
    45de:	e8 16       	cp	r14, r24
    45e0:	f1 04       	cpc	r15, r1
    45e2:	01 05       	cpc	r16, r1
    45e4:	11 05       	cpc	r17, r1
    45e6:	10 f4       	brcc	.+4      	; 0x45ec <f_unlink+0xa8>
    45e8:	82 e0       	ldi	r24, 0x02	; 2
    45ea:	3a c0       	rjmp	.+116    	; 0x4660 <f_unlink+0x11c>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    45ec:	de 01       	movw	r26, r28
    45ee:	93 96       	adiw	r26, 0x23	; 35
	const char *s = (const char *)src;
    45f0:	f6 01       	movw	r30, r12
	while (cnt--) *d++ = *s++;
    45f2:	9d 01       	movw	r18, r26
    45f4:	02 c0       	rjmp	.+4      	; 0x45fa <f_unlink+0xb6>
    45f6:	81 91       	ld	r24, Z+
    45f8:	8d 93       	st	X+, r24
    45fa:	e2 17       	cp	r30, r18
    45fc:	f3 07       	cpc	r31, r19
    45fe:	d9 f7       	brne	.-10     	; 0x45f6 <f_unlink+0xb2>
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
    4600:	e9 a6       	std	Y+41, r14	; 0x29
    4602:	fa a6       	std	Y+42, r15	; 0x2a
    4604:	0b a7       	std	Y+43, r16	; 0x2b
    4606:	1c a7       	std	Y+44, r17	; 0x2c
		res = dir_seek(&sdj, 2);
    4608:	23 e2       	ldi	r18, 0x23	; 35
    460a:	c2 2e       	mov	r12, r18
    460c:	d1 2c       	mov	r13, r1
    460e:	cc 0e       	add	r12, r28
    4610:	dd 1e       	adc	r13, r29
    4612:	c6 01       	movw	r24, r12
    4614:	62 e0       	ldi	r22, 0x02	; 2
    4616:	70 e0       	ldi	r23, 0x00	; 0
    4618:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <dir_seek>
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
    461c:	88 23       	and	r24, r24
    461e:	01 f5       	brne	.+64     	; 0x4660 <f_unlink+0x11c>
		res = dir_read(&sdj);
    4620:	c6 01       	movw	r24, r12
    4622:	0e 94 50 11 	call	0x22a0	; 0x22a0 <dir_read>
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
    4626:	88 23       	and	r24, r24
    4628:	d1 f0       	breq	.+52     	; 0x465e <f_unlink+0x11a>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
    462a:	84 30       	cpi	r24, 0x04	; 4
    462c:	c9 f4       	brne	.+50     	; 0x4660 <f_unlink+0x11c>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
    462e:	ce 01       	movw	r24, r28
    4630:	0d 96       	adiw	r24, 0x0d	; 13
    4632:	0e 94 db 11 	call	0x23b6	; 0x23b6 <dir_remove>
	if (res == FR_OK) {
    4636:	88 23       	and	r24, r24
    4638:	99 f4       	brne	.+38     	; 0x4660 <f_unlink+0x11c>
		if (dclst)
    463a:	e1 14       	cp	r14, r1
    463c:	f1 04       	cpc	r15, r1
    463e:	01 05       	cpc	r16, r1
    4640:	11 05       	cpc	r17, r1
    4642:	41 f0       	breq	.+16     	; 0x4654 <f_unlink+0x110>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
    4644:	8d 85       	ldd	r24, Y+13	; 0x0d
    4646:	9e 85       	ldd	r25, Y+14	; 0x0e
    4648:	b8 01       	movw	r22, r16
    464a:	a7 01       	movw	r20, r14
    464c:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <remove_chain>
		if (res == FR_OK) res = sync(dj.fs);
    4650:	88 23       	and	r24, r24
    4652:	31 f4       	brne	.+12     	; 0x4660 <f_unlink+0x11c>
    4654:	8d 85       	ldd	r24, Y+13	; 0x0d
    4656:	9e 85       	ldd	r25, Y+14	; 0x0e
    4658:	0e 94 c7 0a 	call	0x158e	; 0x158e <sync>
    465c:	01 c0       	rjmp	.+2      	; 0x4660 <f_unlink+0x11c>
    465e:	87 e0       	ldi	r24, 0x07	; 7
	}

	LEAVE_FF(dj.fs, res);
}
    4660:	ea 96       	adiw	r28, 0x3a	; 58
    4662:	cd bf       	out	0x3d, r28	; 61
    4664:	de bf       	out	0x3e, r29	; 62
    4666:	cf 91       	pop	r28
    4668:	df 91       	pop	r29
    466a:	1f 91       	pop	r17
    466c:	0f 91       	pop	r16
    466e:	ff 90       	pop	r15
    4670:	ef 90       	pop	r14
    4672:	df 90       	pop	r13
    4674:	cf 90       	pop	r12
    4676:	08 95       	ret

00004678 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
    4678:	2f 92       	push	r2
    467a:	3f 92       	push	r3
    467c:	4f 92       	push	r4
    467e:	5f 92       	push	r5
    4680:	6f 92       	push	r6
    4682:	7f 92       	push	r7
    4684:	8f 92       	push	r8
    4686:	9f 92       	push	r9
    4688:	af 92       	push	r10
    468a:	bf 92       	push	r11
    468c:	cf 92       	push	r12
    468e:	df 92       	push	r13
    4690:	ef 92       	push	r14
    4692:	ff 92       	push	r15
    4694:	0f 93       	push	r16
    4696:	1f 93       	push	r17
    4698:	df 93       	push	r29
    469a:	cf 93       	push	r28
    469c:	cd b7       	in	r28, 0x3d	; 61
    469e:	de b7       	in	r29, 0x3e	; 62
    46a0:	ac 97       	sbiw	r28, 0x2c	; 44
    46a2:	cd bf       	out	0x3d, r28	; 61
    46a4:	de bf       	out	0x3e, r29	; 62
    46a6:	8b a3       	std	Y+35, r24	; 0x23
    46a8:	9c a3       	std	Y+36, r25	; 0x24
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = chk_mounted(&path, &dj.fs, 1);
    46aa:	7d e0       	ldi	r23, 0x0D	; 13
    46ac:	e7 2e       	mov	r14, r23
    46ae:	f1 2c       	mov	r15, r1
    46b0:	ec 0e       	add	r14, r28
    46b2:	fd 1e       	adc	r15, r29
    46b4:	ce 01       	movw	r24, r28
    46b6:	83 96       	adiw	r24, 0x23	; 35
    46b8:	b7 01       	movw	r22, r14
    46ba:	41 e0       	ldi	r20, 0x01	; 1
    46bc:	0e 94 61 14 	call	0x28c2	; 0x28c2 <chk_mounted>
    46c0:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    46c2:	88 23       	and	r24, r24
    46c4:	09 f0       	breq	.+2      	; 0x46c8 <f_mkdir+0x50>
    46c6:	4c c1       	rjmp	.+664    	; 0x4960 <f_mkdir+0x2e8>

	INITBUF(dj, sfn, lfn);
    46c8:	ce 01       	movw	r24, r28
    46ca:	01 96       	adiw	r24, 0x01	; 1
    46cc:	89 a3       	std	Y+33, r24	; 0x21
    46ce:	9a a3       	std	Y+34, r25	; 0x22
	res = follow_path(&dj, path);			/* Follow the file path */
    46d0:	6b a1       	ldd	r22, Y+35	; 0x23
    46d2:	7c a1       	ldd	r23, Y+36	; 0x24
    46d4:	c7 01       	movw	r24, r14
    46d6:	0e 94 88 12 	call	0x2510	; 0x2510 <follow_path>
    46da:	18 2f       	mov	r17, r24
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
    46dc:	88 23       	and	r24, r24
    46de:	11 f4       	brne	.+4      	; 0x46e4 <f_mkdir+0x6c>
    46e0:	18 e0       	ldi	r17, 0x08	; 8
    46e2:	3e c1       	rjmp	.+636    	; 0x4960 <f_mkdir+0x2e8>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
    46e4:	84 30       	cpi	r24, 0x04	; 4
    46e6:	09 f0       	breq	.+2      	; 0x46ea <f_mkdir+0x72>
    46e8:	3b c1       	rjmp	.+630    	; 0x4960 <f_mkdir+0x2e8>
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
    46ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    46ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ee:	40 e0       	ldi	r20, 0x00	; 0
    46f0:	50 e0       	ldi	r21, 0x00	; 0
    46f2:	60 e0       	ldi	r22, 0x00	; 0
    46f4:	70 e0       	ldi	r23, 0x00	; 0
    46f6:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <create_chain>
    46fa:	4b 01       	movw	r8, r22
    46fc:	5c 01       	movw	r10, r24
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
    46fe:	61 15       	cp	r22, r1
    4700:	71 05       	cpc	r23, r1
    4702:	81 05       	cpc	r24, r1
    4704:	91 05       	cpc	r25, r1
    4706:	11 f4       	brne	.+4      	; 0x470c <f_mkdir+0x94>
    4708:	17 e0       	ldi	r17, 0x07	; 7
    470a:	2a c1       	rjmp	.+596    	; 0x4960 <f_mkdir+0x2e8>
	if (dclst == 1) res = FR_INT_ERR;
    470c:	61 30       	cpi	r22, 0x01	; 1
    470e:	71 05       	cpc	r23, r1
    4710:	81 05       	cpc	r24, r1
    4712:	91 05       	cpc	r25, r1
    4714:	11 f4       	brne	.+4      	; 0x471a <f_mkdir+0xa2>
    4716:	12 e0       	ldi	r17, 0x02	; 2
    4718:	23 c1       	rjmp	.+582    	; 0x4960 <f_mkdir+0x2e8>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
    471a:	6f 3f       	cpi	r22, 0xFF	; 255
    471c:	3f ef       	ldi	r19, 0xFF	; 255
    471e:	73 07       	cpc	r23, r19
    4720:	3f ef       	ldi	r19, 0xFF	; 255
    4722:	83 07       	cpc	r24, r19
    4724:	3f ef       	ldi	r19, 0xFF	; 255
    4726:	93 07       	cpc	r25, r19
    4728:	09 f4       	brne	.+2      	; 0x472c <f_mkdir+0xb4>
    472a:	31 c1       	rjmp	.+610    	; 0x498e <f_mkdir+0x316>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
    472c:	8d 85       	ldd	r24, Y+13	; 0x0d
    472e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4730:	40 e0       	ldi	r20, 0x00	; 0
    4732:	50 e0       	ldi	r21, 0x00	; 0
    4734:	60 e0       	ldi	r22, 0x00	; 0
    4736:	70 e0       	ldi	r23, 0x00	; 0
    4738:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    473c:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    473e:	88 23       	and	r24, r24
    4740:	09 f0       	breq	.+2      	; 0x4744 <f_mkdir+0xcc>
    4742:	0e c1       	rjmp	.+540    	; 0x4960 <f_mkdir+0x2e8>
	dsect = clust2sect(dj.fs, dclst);
    4744:	0d 85       	ldd	r16, Y+13	; 0x0d
    4746:	1e 85       	ldd	r17, Y+14	; 0x0e
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    4748:	6e ef       	ldi	r22, 0xFE	; 254
    474a:	c6 2e       	mov	r12, r22
    474c:	6f ef       	ldi	r22, 0xFF	; 255
    474e:	d6 2e       	mov	r13, r22
    4750:	6f ef       	ldi	r22, 0xFF	; 255
    4752:	e6 2e       	mov	r14, r22
    4754:	6f ef       	ldi	r22, 0xFF	; 255
    4756:	f6 2e       	mov	r15, r22
    4758:	c8 0c       	add	r12, r8
    475a:	d9 1c       	adc	r13, r9
    475c:	ea 1c       	adc	r14, r10
    475e:	fb 1c       	adc	r15, r11
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    4760:	f8 01       	movw	r30, r16
    4762:	82 8d       	ldd	r24, Z+26	; 0x1a
    4764:	93 8d       	ldd	r25, Z+27	; 0x1b
    4766:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4768:	b5 8d       	ldd	r27, Z+29	; 0x1d
    476a:	02 97       	sbiw	r24, 0x02	; 2
    476c:	a1 09       	sbc	r26, r1
    476e:	b1 09       	sbc	r27, r1
    4770:	c8 16       	cp	r12, r24
    4772:	d9 06       	cpc	r13, r25
    4774:	ea 06       	cpc	r14, r26
    4776:	fb 06       	cpc	r15, r27
    4778:	20 f0       	brcs	.+8      	; 0x4782 <f_mkdir+0x10a>
    477a:	44 24       	eor	r4, r4
    477c:	55 24       	eor	r5, r5
    477e:	32 01       	movw	r6, r4
    4780:	14 c0       	rjmp	.+40     	; 0x47aa <f_mkdir+0x132>
	return clst * fs->csize + fs->database;
    4782:	f8 01       	movw	r30, r16
    4784:	22 81       	ldd	r18, Z+2	; 0x02
    4786:	30 e0       	ldi	r19, 0x00	; 0
    4788:	40 e0       	ldi	r20, 0x00	; 0
    478a:	50 e0       	ldi	r21, 0x00	; 0
    478c:	c7 01       	movw	r24, r14
    478e:	b6 01       	movw	r22, r12
    4790:	0e 94 54 50 	call	0xa0a8	; 0xa0a8 <__mulsi3>
    4794:	2b 01       	movw	r4, r22
    4796:	3c 01       	movw	r6, r24
    4798:	f8 01       	movw	r30, r16
    479a:	86 a1       	ldd	r24, Z+38	; 0x26
    479c:	97 a1       	ldd	r25, Z+39	; 0x27
    479e:	a0 a5       	ldd	r26, Z+40	; 0x28
    47a0:	b1 a5       	ldd	r27, Z+41	; 0x29
    47a2:	48 0e       	add	r4, r24
    47a4:	59 1e       	adc	r5, r25
    47a6:	6a 1e       	adc	r6, r26
    47a8:	7b 1e       	adc	r7, r27
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
    47aa:	5e e2       	ldi	r21, 0x2E	; 46
    47ac:	25 2e       	mov	r2, r21
    47ae:	31 2c       	mov	r3, r1
    47b0:	20 0e       	add	r2, r16
    47b2:	31 1e       	adc	r3, r17
    47b4:	f1 01       	movw	r30, r2
    47b6:	80 e0       	ldi	r24, 0x00	; 0
    47b8:	92 e0       	ldi	r25, 0x02	; 2
    47ba:	01 c0       	rjmp	.+2      	; 0x47be <f_mkdir+0x146>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    47bc:	11 92       	st	Z+, r1
    47be:	01 97       	sbiw	r24, 0x01	; 1
    47c0:	2f ef       	ldi	r18, 0xFF	; 255
    47c2:	8f 3f       	cpi	r24, 0xFF	; 255
    47c4:	92 07       	cpc	r25, r18
    47c6:	d1 f7       	brne	.-12     	; 0x47bc <f_mkdir+0x144>
    47c8:	f1 01       	movw	r30, r2
    47ca:	8b e0       	ldi	r24, 0x0B	; 11
    47cc:	90 e0       	ldi	r25, 0x00	; 0
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
    47ce:	20 e2       	ldi	r18, 0x20	; 32
    47d0:	01 c0       	rjmp	.+2      	; 0x47d4 <f_mkdir+0x15c>
    47d2:	21 93       	st	Z+, r18
    47d4:	01 97       	sbiw	r24, 0x01	; 1
    47d6:	3f ef       	ldi	r19, 0xFF	; 255
    47d8:	8f 3f       	cpi	r24, 0xFF	; 255
    47da:	93 07       	cpc	r25, r19
    47dc:	d1 f7       	brne	.-12     	; 0x47d2 <f_mkdir+0x15a>
    47de:	8e e2       	ldi	r24, 0x2E	; 46
    47e0:	f8 01       	movw	r30, r16
    47e2:	86 a7       	std	Z+46, r24	; 0x2e
	dir[DIR_Attr] = AM_DIR;
    47e4:	80 e1       	ldi	r24, 0x10	; 16
    47e6:	81 af       	std	Z+57, r24	; 0x39
	tim = get_fattime();
    47e8:	0e 94 d6 09 	call	0x13ac	; 0x13ac <get_fattime>
	ST_DWORD(dir+DIR_WrtTime, tim);
    47ec:	6c a7       	std	Y+44, r22	; 0x2c
    47ee:	0c 5b       	subi	r16, 0xBC	; 188
    47f0:	1f 4f       	sbci	r17, 0xFF	; 255
    47f2:	f8 01       	movw	r30, r16
    47f4:	61 93       	st	Z+, r22
    47f6:	27 2f       	mov	r18, r23
    47f8:	33 27       	eor	r19, r19
    47fa:	2b a7       	std	Y+43, r18	; 0x2b
    47fc:	21 93       	st	Z+, r18
    47fe:	9c 01       	movw	r18, r24
    4800:	44 27       	eor	r20, r20
    4802:	55 27       	eor	r21, r21
    4804:	2a a7       	std	Y+42, r18	; 0x2a
    4806:	21 93       	st	Z+, r18
    4808:	69 2f       	mov	r22, r25
    480a:	77 27       	eor	r23, r23
    480c:	88 27       	eor	r24, r24
    480e:	99 27       	eor	r25, r25
    4810:	69 a7       	std	Y+41, r22	; 0x29
    4812:	61 93       	st	Z+, r22
	ST_WORD(dir+DIR_FstClusLO, dclst);
    4814:	88 a6       	std	Y+40, r8	; 0x28
    4816:	81 92       	st	Z+, r8
    4818:	8f 01       	movw	r16, r30
    481a:	89 2d       	mov	r24, r9
    481c:	99 27       	eor	r25, r25
    481e:	8f a3       	std	Y+39, r24	; 0x27
    4820:	80 83       	st	Z, r24
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    4822:	c5 01       	movw	r24, r10
    4824:	aa 27       	eor	r26, r26
    4826:	bb 27       	eor	r27, r27
    4828:	8e a3       	std	Y+38, r24	; 0x26
    482a:	07 50       	subi	r16, 0x07	; 7
    482c:	10 40       	sbci	r17, 0x00	; 0
    482e:	f8 01       	movw	r30, r16
    4830:	81 93       	st	Z+, r24
    4832:	8f 01       	movw	r16, r30
    4834:	89 2f       	mov	r24, r25
    4836:	99 27       	eor	r25, r25
    4838:	8d a3       	std	Y+37, r24	; 0x25
    483a:	80 83       	st	Z, r24
    483c:	03 54       	subi	r16, 0x43	; 67
    483e:	10 40       	sbci	r17, 0x00	; 0
    4840:	f1 01       	movw	r30, r2
    4842:	20 e2       	ldi	r18, 0x20	; 32
    4844:	30 e0       	ldi	r19, 0x00	; 0
    4846:	03 c0       	rjmp	.+6      	; 0x484e <f_mkdir+0x1d6>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4848:	80 81       	ld	r24, Z
    484a:	80 a3       	std	Z+32, r24	; 0x20
    484c:	31 96       	adiw	r30, 0x01	; 1
    484e:	21 50       	subi	r18, 0x01	; 1
    4850:	30 40       	sbci	r19, 0x00	; 0
    4852:	8f ef       	ldi	r24, 0xFF	; 255
    4854:	2f 3f       	cpi	r18, 0xFF	; 255
    4856:	38 07       	cpc	r19, r24
    4858:	b9 f7       	brne	.-18     	; 0x4848 <f_mkdir+0x1d0>
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
    485a:	01 5b       	subi	r16, 0xB1	; 177
    485c:	1f 4f       	sbci	r17, 0xFF	; 255
    485e:	8e e2       	ldi	r24, 0x2E	; 46
    4860:	f8 01       	movw	r30, r16
    4862:	80 83       	st	Z, r24
    4864:	0f 54       	subi	r16, 0x4F	; 79
    4866:	10 40       	sbci	r17, 0x00	; 0
	pclst = dj.sclust;
    4868:	2b 89       	ldd	r18, Y+19	; 0x13
    486a:	3c 89       	ldd	r19, Y+20	; 0x14
    486c:	4d 89       	ldd	r20, Y+21	; 0x15
    486e:	5e 89       	ldd	r21, Y+22	; 0x16
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
    4870:	ed 85       	ldd	r30, Y+13	; 0x0d
    4872:	fe 85       	ldd	r31, Y+14	; 0x0e
    4874:	80 81       	ld	r24, Z
    4876:	83 30       	cpi	r24, 0x03	; 3
    4878:	69 f4       	brne	.+26     	; 0x4894 <f_mkdir+0x21c>
    487a:	82 a1       	ldd	r24, Z+34	; 0x22
    487c:	93 a1       	ldd	r25, Z+35	; 0x23
    487e:	a4 a1       	ldd	r26, Z+36	; 0x24
    4880:	b5 a1       	ldd	r27, Z+37	; 0x25
    4882:	28 17       	cp	r18, r24
    4884:	39 07       	cpc	r19, r25
    4886:	4a 07       	cpc	r20, r26
    4888:	5b 07       	cpc	r21, r27
    488a:	21 f4       	brne	.+8      	; 0x4894 <f_mkdir+0x21c>
    488c:	20 e0       	ldi	r18, 0x00	; 0
    488e:	30 e0       	ldi	r19, 0x00	; 0
    4890:	40 e0       	ldi	r20, 0x00	; 0
    4892:	50 e0       	ldi	r21, 0x00	; 0
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
    4894:	08 59       	subi	r16, 0x98	; 152
    4896:	1f 4f       	sbci	r17, 0xFF	; 255
    4898:	f8 01       	movw	r30, r16
    489a:	21 93       	st	Z+, r18
    489c:	8f 01       	movw	r16, r30
    489e:	83 2f       	mov	r24, r19
    48a0:	99 27       	eor	r25, r25
    48a2:	80 83       	st	Z, r24
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
    48a4:	ca 01       	movw	r24, r20
    48a6:	aa 27       	eor	r26, r26
    48a8:	bb 27       	eor	r27, r27
    48aa:	07 50       	subi	r16, 0x07	; 7
    48ac:	10 40       	sbci	r17, 0x00	; 0
    48ae:	f8 01       	movw	r30, r16
    48b0:	81 93       	st	Z+, r24
    48b2:	89 2f       	mov	r24, r25
    48b4:	99 27       	eor	r25, r25
    48b6:	80 83       	st	Z, r24
    48b8:	73 01       	movw	r14, r6
    48ba:	62 01       	movw	r12, r4
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
		dj.fs->wflag = 1;
    48bc:	01 e0       	ldi	r16, 0x01	; 1
    48be:	1f c0       	rjmp	.+62     	; 0x48fe <f_mkdir+0x286>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    48c0:	c2 a6       	std	Z+42, r12	; 0x2a
    48c2:	d3 a6       	std	Z+43, r13	; 0x2b
    48c4:	e4 a6       	std	Z+44, r14	; 0x2c
    48c6:	f5 a6       	std	Z+45, r15	; 0x2d
		dj.fs->wflag = 1;
    48c8:	04 83       	std	Z+4, r16	; 0x04
		res = move_window(dj.fs, 0);
    48ca:	cf 01       	movw	r24, r30
    48cc:	40 e0       	ldi	r20, 0x00	; 0
    48ce:	50 e0       	ldi	r21, 0x00	; 0
    48d0:	60 e0       	ldi	r22, 0x00	; 0
    48d2:	70 e0       	ldi	r23, 0x00	; 0
    48d4:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
    48d8:	18 2f       	mov	r17, r24
		if (res) LEAVE_FF(dj.fs, res);
    48da:	88 23       	and	r24, r24
    48dc:	09 f0       	breq	.+2      	; 0x48e0 <f_mkdir+0x268>
    48de:	40 c0       	rjmp	.+128    	; 0x4960 <f_mkdir+0x2e8>
    48e0:	f1 01       	movw	r30, r2
    48e2:	80 e0       	ldi	r24, 0x00	; 0
    48e4:	92 e0       	ldi	r25, 0x02	; 2
    48e6:	01 c0       	rjmp	.+2      	; 0x48ea <f_mkdir+0x272>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    48e8:	11 92       	st	Z+, r1
    48ea:	01 97       	sbiw	r24, 0x01	; 1
    48ec:	2f ef       	ldi	r18, 0xFF	; 255
    48ee:	8f 3f       	cpi	r24, 0xFF	; 255
    48f0:	92 07       	cpc	r25, r18
    48f2:	d1 f7       	brne	.-12     	; 0x48e8 <f_mkdir+0x270>
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
    48f4:	08 94       	sec
    48f6:	c1 1c       	adc	r12, r1
    48f8:	d1 1c       	adc	r13, r1
    48fa:	e1 1c       	adc	r14, r1
    48fc:	f1 1c       	adc	r15, r1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
    48fe:	ed 85       	ldd	r30, Y+13	; 0x0d
    4900:	fe 85       	ldd	r31, Y+14	; 0x0e
    4902:	9c 2d       	mov	r25, r12
    4904:	94 19       	sub	r25, r4
    4906:	82 81       	ldd	r24, Z+2	; 0x02
    4908:	98 17       	cp	r25, r24
    490a:	d0 f2       	brcs	.-76     	; 0x48c0 <f_mkdir+0x248>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
    490c:	ce 01       	movw	r24, r28
    490e:	0d 96       	adiw	r24, 0x0d	; 13
    4910:	0e 94 84 11 	call	0x2308	; 0x2308 <dir_register>
    4914:	18 2f       	mov	r17, r24
	if (res != FR_OK) {
    4916:	88 23       	and	r24, r24
    4918:	39 f0       	breq	.+14     	; 0x4928 <f_mkdir+0x2b0>
		remove_chain(dj.fs, dclst);
    491a:	8d 85       	ldd	r24, Y+13	; 0x0d
    491c:	9e 85       	ldd	r25, Y+14	; 0x0e
    491e:	b5 01       	movw	r22, r10
    4920:	a4 01       	movw	r20, r8
    4922:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <remove_chain>
    4926:	1c c0       	rjmp	.+56     	; 0x4960 <f_mkdir+0x2e8>
	} else {
		dir = dj.dir;
    4928:	ef 8d       	ldd	r30, Y+31	; 0x1f
    492a:	f8 a1       	ldd	r31, Y+32	; 0x20
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
    492c:	80 e1       	ldi	r24, 0x10	; 16
    492e:	83 87       	std	Z+11, r24	; 0x0b
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
    4930:	3c a5       	ldd	r19, Y+44	; 0x2c
    4932:	36 8b       	std	Z+22, r19	; 0x16
    4934:	8b a5       	ldd	r24, Y+43	; 0x2b
    4936:	87 8b       	std	Z+23, r24	; 0x17
    4938:	2a a5       	ldd	r18, Y+42	; 0x2a
    493a:	20 8f       	std	Z+24, r18	; 0x18
    493c:	39 a5       	ldd	r19, Y+41	; 0x29
    493e:	31 8f       	std	Z+25, r19	; 0x19
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
    4940:	88 a5       	ldd	r24, Y+40	; 0x28
    4942:	82 8f       	std	Z+26, r24	; 0x1a
    4944:	2f a1       	ldd	r18, Y+39	; 0x27
    4946:	23 8f       	std	Z+27, r18	; 0x1b
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
    4948:	3e a1       	ldd	r19, Y+38	; 0x26
    494a:	34 8b       	std	Z+20, r19	; 0x14
    494c:	8d a1       	ldd	r24, Y+37	; 0x25
    494e:	85 8b       	std	Z+21, r24	; 0x15
		dj.fs->wflag = 1;
    4950:	ed 85       	ldd	r30, Y+13	; 0x0d
    4952:	fe 85       	ldd	r31, Y+14	; 0x0e
    4954:	81 e0       	ldi	r24, 0x01	; 1
    4956:	84 83       	std	Z+4, r24	; 0x04
		res = sync(dj.fs);
    4958:	cf 01       	movw	r24, r30
    495a:	0e 94 c7 0a 	call	0x158e	; 0x158e <sync>
    495e:	18 2f       	mov	r17, r24
	}

	LEAVE_FF(dj.fs, res);
}
    4960:	81 2f       	mov	r24, r17
    4962:	ac 96       	adiw	r28, 0x2c	; 44
    4964:	cd bf       	out	0x3d, r28	; 61
    4966:	de bf       	out	0x3e, r29	; 62
    4968:	cf 91       	pop	r28
    496a:	df 91       	pop	r29
    496c:	1f 91       	pop	r17
    496e:	0f 91       	pop	r16
    4970:	ff 90       	pop	r15
    4972:	ef 90       	pop	r14
    4974:	df 90       	pop	r13
    4976:	cf 90       	pop	r12
    4978:	bf 90       	pop	r11
    497a:	af 90       	pop	r10
    497c:	9f 90       	pop	r9
    497e:	8f 90       	pop	r8
    4980:	7f 90       	pop	r7
    4982:	6f 90       	pop	r6
    4984:	5f 90       	pop	r5
    4986:	4f 90       	pop	r4
    4988:	3f 90       	pop	r3
    498a:	2f 90       	pop	r2
    498c:	08 95       	ret
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
		dj.fs->wflag = 1;
		res = sync(dj.fs);
    498e:	11 e0       	ldi	r17, 0x01	; 1
    4990:	e7 cf       	rjmp	.-50     	; 0x4960 <f_mkdir+0x2e8>

00004992 <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    4992:	ef 92       	push	r14
    4994:	ff 92       	push	r15
    4996:	0f 93       	push	r16
    4998:	1f 93       	push	r17
    499a:	df 93       	push	r29
    499c:	cf 93       	push	r28
    499e:	cd b7       	in	r28, 0x3d	; 61
    49a0:	de b7       	in	r29, 0x3e	; 62
    49a2:	a4 97       	sbiw	r28, 0x24	; 36
    49a4:	cd bf       	out	0x3d, r28	; 61
    49a6:	de bf       	out	0x3e, r29	; 62
    49a8:	8b a3       	std	Y+35, r24	; 0x23
    49aa:	9c a3       	std	Y+36, r25	; 0x24
    49ac:	e6 2e       	mov	r14, r22
    49ae:	f4 2e       	mov	r15, r20
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    49b0:	8e 01       	movw	r16, r28
    49b2:	03 5f       	subi	r16, 0xF3	; 243
    49b4:	1f 4f       	sbci	r17, 0xFF	; 255
    49b6:	ce 01       	movw	r24, r28
    49b8:	83 96       	adiw	r24, 0x23	; 35
    49ba:	b8 01       	movw	r22, r16
    49bc:	41 e0       	ldi	r20, 0x01	; 1
    49be:	0e 94 61 14 	call	0x28c2	; 0x28c2 <chk_mounted>
	if (res == FR_OK) {
    49c2:	88 23       	and	r24, r24
    49c4:	09 f5       	brne	.+66     	; 0x4a08 <f_chmod+0x76>
		INITBUF(dj, sfn, lfn);
    49c6:	ce 01       	movw	r24, r28
    49c8:	01 96       	adiw	r24, 0x01	; 1
    49ca:	89 a3       	std	Y+33, r24	; 0x21
    49cc:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);		/* Follow the file path */
    49ce:	6b a1       	ldd	r22, Y+35	; 0x23
    49d0:	7c a1       	ldd	r23, Y+36	; 0x24
    49d2:	c8 01       	movw	r24, r16
    49d4:	0e 94 88 12 	call	0x2510	; 0x2510 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    49d8:	88 23       	and	r24, r24
    49da:	b1 f4       	brne	.+44     	; 0x4a08 <f_chmod+0x76>
			dir = dj.dir;
    49dc:	ef 8d       	ldd	r30, Y+31	; 0x1f
    49de:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    49e0:	30 97       	sbiw	r30, 0x00	; 0
    49e2:	11 f4       	brne	.+4      	; 0x49e8 <f_chmod+0x56>
    49e4:	86 e0       	ldi	r24, 0x06	; 6
    49e6:	10 c0       	rjmp	.+32     	; 0x4a08 <f_chmod+0x76>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    49e8:	9f 2d       	mov	r25, r15
    49ea:	97 72       	andi	r25, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    49ec:	89 2f       	mov	r24, r25
    49ee:	80 95       	com	r24
    49f0:	23 85       	ldd	r18, Z+11	; 0x0b
    49f2:	82 23       	and	r24, r18
    49f4:	9e 21       	and	r25, r14
    49f6:	89 2b       	or	r24, r25
    49f8:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    49fa:	ed 85       	ldd	r30, Y+13	; 0x0d
    49fc:	fe 85       	ldd	r31, Y+14	; 0x0e
    49fe:	81 e0       	ldi	r24, 0x01	; 1
    4a00:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    4a02:	cf 01       	movw	r24, r30
    4a04:	0e 94 c7 0a 	call	0x158e	; 0x158e <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4a08:	a4 96       	adiw	r28, 0x24	; 36
    4a0a:	cd bf       	out	0x3d, r28	; 61
    4a0c:	de bf       	out	0x3e, r29	; 62
    4a0e:	cf 91       	pop	r28
    4a10:	df 91       	pop	r29
    4a12:	1f 91       	pop	r17
    4a14:	0f 91       	pop	r16
    4a16:	ff 90       	pop	r15
    4a18:	ef 90       	pop	r14
    4a1a:	08 95       	ret

00004a1c <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
    4a1c:	ef 92       	push	r14
    4a1e:	ff 92       	push	r15
    4a20:	0f 93       	push	r16
    4a22:	1f 93       	push	r17
    4a24:	df 93       	push	r29
    4a26:	cf 93       	push	r28
    4a28:	cd b7       	in	r28, 0x3d	; 61
    4a2a:	de b7       	in	r29, 0x3e	; 62
    4a2c:	a4 97       	sbiw	r28, 0x24	; 36
    4a2e:	cd bf       	out	0x3d, r28	; 61
    4a30:	de bf       	out	0x3e, r29	; 62
    4a32:	8b a3       	std	Y+35, r24	; 0x23
    4a34:	9c a3       	std	Y+36, r25	; 0x24
    4a36:	8b 01       	movw	r16, r22
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 1);
    4a38:	ed e0       	ldi	r30, 0x0D	; 13
    4a3a:	ee 2e       	mov	r14, r30
    4a3c:	f1 2c       	mov	r15, r1
    4a3e:	ec 0e       	add	r14, r28
    4a40:	fd 1e       	adc	r15, r29
    4a42:	ce 01       	movw	r24, r28
    4a44:	83 96       	adiw	r24, 0x23	; 35
    4a46:	b7 01       	movw	r22, r14
    4a48:	41 e0       	ldi	r20, 0x01	; 1
    4a4a:	0e 94 61 14 	call	0x28c2	; 0x28c2 <chk_mounted>
	if (res == FR_OK) {
    4a4e:	88 23       	and	r24, r24
    4a50:	41 f5       	brne	.+80     	; 0x4aa2 <f_utime+0x86>
		INITBUF(dj, sfn, lfn);
    4a52:	ce 01       	movw	r24, r28
    4a54:	01 96       	adiw	r24, 0x01	; 1
    4a56:	89 a3       	std	Y+33, r24	; 0x21
    4a58:	9a a3       	std	Y+34, r25	; 0x22
		res = follow_path(&dj, path);	/* Follow the file path */
    4a5a:	6b a1       	ldd	r22, Y+35	; 0x23
    4a5c:	7c a1       	ldd	r23, Y+36	; 0x24
    4a5e:	c7 01       	movw	r24, r14
    4a60:	0e 94 88 12 	call	0x2510	; 0x2510 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    4a64:	88 23       	and	r24, r24
    4a66:	e9 f4       	brne	.+58     	; 0x4aa2 <f_utime+0x86>
			dir = dj.dir;
    4a68:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4a6a:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {				/* Root directory */
    4a6c:	30 97       	sbiw	r30, 0x00	; 0
    4a6e:	11 f4       	brne	.+4      	; 0x4a74 <f_utime+0x58>
    4a70:	86 e0       	ldi	r24, 0x06	; 6
    4a72:	17 c0       	rjmp	.+46     	; 0x4aa2 <f_utime+0x86>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    4a74:	d8 01       	movw	r26, r16
    4a76:	16 96       	adiw	r26, 0x06	; 6
    4a78:	8c 91       	ld	r24, X
    4a7a:	16 97       	sbiw	r26, 0x06	; 6
    4a7c:	86 8b       	std	Z+22, r24	; 0x16
    4a7e:	17 96       	adiw	r26, 0x07	; 7
    4a80:	8c 91       	ld	r24, X
    4a82:	17 97       	sbiw	r26, 0x07	; 7
    4a84:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    4a86:	14 96       	adiw	r26, 0x04	; 4
    4a88:	8c 91       	ld	r24, X
    4a8a:	14 97       	sbiw	r26, 0x04	; 4
    4a8c:	80 8f       	std	Z+24, r24	; 0x18
    4a8e:	15 96       	adiw	r26, 0x05	; 5
    4a90:	8c 91       	ld	r24, X
    4a92:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    4a94:	ed 85       	ldd	r30, Y+13	; 0x0d
    4a96:	fe 85       	ldd	r31, Y+14	; 0x0e
    4a98:	81 e0       	ldi	r24, 0x01	; 1
    4a9a:	84 83       	std	Z+4, r24	; 0x04
				res = sync(dj.fs);
    4a9c:	cf 01       	movw	r24, r30
    4a9e:	0e 94 c7 0a 	call	0x158e	; 0x158e <sync>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4aa2:	a4 96       	adiw	r28, 0x24	; 36
    4aa4:	cd bf       	out	0x3d, r28	; 61
    4aa6:	de bf       	out	0x3e, r29	; 62
    4aa8:	cf 91       	pop	r28
    4aaa:	df 91       	pop	r29
    4aac:	1f 91       	pop	r17
    4aae:	0f 91       	pop	r16
    4ab0:	ff 90       	pop	r15
    4ab2:	ef 90       	pop	r14
    4ab4:	08 95       	ret

00004ab6 <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
    4ab6:	cf 92       	push	r12
    4ab8:	df 92       	push	r13
    4aba:	ef 92       	push	r14
    4abc:	ff 92       	push	r15
    4abe:	0f 93       	push	r16
    4ac0:	1f 93       	push	r17
    4ac2:	df 93       	push	r29
    4ac4:	cf 93       	push	r28
    4ac6:	cd b7       	in	r28, 0x3d	; 61
    4ac8:	de b7       	in	r29, 0x3e	; 62
    4aca:	cf 54       	subi	r28, 0x4F	; 79
    4acc:	d0 40       	sbci	r29, 0x00	; 0
    4ace:	cd bf       	out	0x3d, r28	; 61
    4ad0:	de bf       	out	0x3e, r29	; 62
    4ad2:	8e 01       	movw	r16, r28
    4ad4:	02 5b       	subi	r16, 0xB2	; 178
    4ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad8:	d8 01       	movw	r26, r16
    4ada:	8d 93       	st	X+, r24
    4adc:	9c 93       	st	X, r25
    4ade:	6b 01       	movw	r12, r22
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
    4ae0:	ce 01       	movw	r24, r28
    4ae2:	01 96       	adiw	r24, 0x01	; 1
    4ae4:	8e ab       	std	Y+54, r24	; 0x36
    4ae6:	9f ab       	std	Y+55, r25	; 0x37
	res = chk_mounted(&path_old, &dj_old.fs, 1);
    4ae8:	82 e2       	ldi	r24, 0x22	; 34
    4aea:	e8 2e       	mov	r14, r24
    4aec:	f1 2c       	mov	r15, r1
    4aee:	ec 0e       	add	r14, r28
    4af0:	fd 1e       	adc	r15, r29
    4af2:	c8 01       	movw	r24, r16
    4af4:	b7 01       	movw	r22, r14
    4af6:	41 e0       	ldi	r20, 0x01	; 1
    4af8:	0e 94 61 14 	call	0x28c2	; 0x28c2 <chk_mounted>
	if (res == FR_OK) {
    4afc:	88 23       	and	r24, r24
    4afe:	09 f0       	breq	.+2      	; 0x4b02 <f_rename+0x4c>
    4b00:	f4 c0       	rjmp	.+488    	; 0x4cea <f_rename+0x234>
		dj_new.fs = dj_old.fs;
    4b02:	8a a1       	ldd	r24, Y+34	; 0x22
    4b04:	9b a1       	ldd	r25, Y+35	; 0x23
    4b06:	88 af       	std	Y+56, r24	; 0x38
    4b08:	99 af       	std	Y+57, r25	; 0x39
		res = follow_path(&dj_old, path_old);	/* Check old object */
    4b0a:	f8 01       	movw	r30, r16
    4b0c:	60 81       	ld	r22, Z
    4b0e:	71 81       	ldd	r23, Z+1	; 0x01
    4b10:	c7 01       	movw	r24, r14
    4b12:	0e 94 88 12 	call	0x2510	; 0x2510 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
    4b16:	88 23       	and	r24, r24
    4b18:	09 f0       	breq	.+2      	; 0x4b1c <f_rename+0x66>
    4b1a:	e7 c0       	rjmp	.+462    	; 0x4cea <f_rename+0x234>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
    4b1c:	8c a9       	ldd	r24, Y+52	; 0x34
    4b1e:	9d a9       	ldd	r25, Y+53	; 0x35
    4b20:	00 97       	sbiw	r24, 0x00	; 0
    4b22:	11 f4       	brne	.+4      	; 0x4b28 <f_rename+0x72>
    4b24:	84 e0       	ldi	r24, 0x04	; 4
    4b26:	e1 c0       	rjmp	.+450    	; 0x4cea <f_rename+0x234>
    4b28:	dc 01       	movw	r26, r24
    4b2a:	fe 01       	movw	r30, r28
    4b2c:	3d 96       	adiw	r30, 0x0d	; 13
    4b2e:	04 c0       	rjmp	.+8      	; 0x4b38 <f_rename+0x82>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4b30:	1a 96       	adiw	r26, 0x0a	; 10
    4b32:	8c 91       	ld	r24, X
    4b34:	1a 97       	sbiw	r26, 0x0a	; 10
    4b36:	81 93       	st	Z+, r24
    4b38:	11 96       	adiw	r26, 0x01	; 1
    4b3a:	ee 15       	cp	r30, r14
    4b3c:	ff 05       	cpc	r31, r15
    4b3e:	c1 f7       	brne	.-16     	; 0x4b30 <f_rename+0x7a>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    4b40:	de 01       	movw	r26, r28
    4b42:	d8 96       	adiw	r26, 0x38	; 56
	const char *s = (const char *)src;
    4b44:	f7 01       	movw	r30, r14
	while (cnt--) *d++ = *s++;
    4b46:	9d 01       	movw	r18, r26
    4b48:	02 c0       	rjmp	.+4      	; 0x4b4e <f_rename+0x98>
    4b4a:	81 91       	ld	r24, Z+
    4b4c:	8d 93       	st	X+, r24
    4b4e:	e2 17       	cp	r30, r18
    4b50:	f3 07       	cpc	r31, r19
    4b52:	d9 f7       	brne	.-10     	; 0x4b4a <f_rename+0x94>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
    4b54:	8e 01       	movw	r16, r28
    4b56:	08 5c       	subi	r16, 0xC8	; 200
    4b58:	1f 4f       	sbci	r17, 0xFF	; 255
    4b5a:	c8 01       	movw	r24, r16
    4b5c:	b6 01       	movw	r22, r12
    4b5e:	0e 94 88 12 	call	0x2510	; 0x2510 <follow_path>
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
    4b62:	88 23       	and	r24, r24
    4b64:	11 f4       	brne	.+4      	; 0x4b6a <f_rename+0xb4>
    4b66:	88 e0       	ldi	r24, 0x08	; 8
    4b68:	c0 c0       	rjmp	.+384    	; 0x4cea <f_rename+0x234>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
    4b6a:	84 30       	cpi	r24, 0x04	; 4
    4b6c:	09 f0       	breq	.+2      	; 0x4b70 <f_rename+0xba>
    4b6e:	bd c0       	rjmp	.+378    	; 0x4cea <f_rename+0x234>
		res = dir_register(&dj_new);			/* Register the new object */
    4b70:	c8 01       	movw	r24, r16
    4b72:	0e 94 84 11 	call	0x2308	; 0x2308 <dir_register>
		if (res == FR_OK) {
    4b76:	88 23       	and	r24, r24
    4b78:	09 f0       	breq	.+2      	; 0x4b7c <f_rename+0xc6>
    4b7a:	b7 c0       	rjmp	.+366    	; 0x4cea <f_rename+0x234>
			dir = dj_new.dir;					/* Copy object information into new entry */
    4b7c:	fe 01       	movw	r30, r28
    4b7e:	e6 5b       	subi	r30, 0xB6	; 182
    4b80:	ff 4f       	sbci	r31, 0xFF	; 255
    4b82:	40 81       	ld	r20, Z
    4b84:	51 81       	ldd	r21, Z+1	; 0x01
    4b86:	da 01       	movw	r26, r20
    4b88:	fe 01       	movw	r30, r28
    4b8a:	3f 96       	adiw	r30, 0x0f	; 15
    4b8c:	04 c0       	rjmp	.+8      	; 0x4b96 <f_rename+0xe0>
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    4b8e:	81 91       	ld	r24, Z+
    4b90:	1c 96       	adiw	r26, 0x0c	; 12
    4b92:	8c 93       	st	X, r24
    4b94:	1c 97       	sbiw	r26, 0x0c	; 12
    4b96:	11 96       	adiw	r26, 0x01	; 1
    4b98:	ee 15       	cp	r30, r14
    4b9a:	ff 05       	cpc	r31, r15
    4b9c:	c1 f7       	brne	.-16     	; 0x4b8e <f_rename+0xd8>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
    4b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ba0:	80 62       	ori	r24, 0x20	; 32
    4ba2:	da 01       	movw	r26, r20
    4ba4:	1b 96       	adiw	r26, 0x0b	; 11
    4ba6:	8c 93       	st	X, r24
    4ba8:	1b 97       	sbiw	r26, 0x0b	; 11
			dj_old.fs->wflag = 1;
    4baa:	ea a1       	ldd	r30, Y+34	; 0x22
    4bac:	fb a1       	ldd	r31, Y+35	; 0x23
    4bae:	81 e0       	ldi	r24, 0x01	; 1
    4bb0:	84 83       	std	Z+4, r24	; 0x04
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
    4bb2:	1b 96       	adiw	r26, 0x0b	; 11
    4bb4:	8c 91       	ld	r24, X
    4bb6:	1b 97       	sbiw	r26, 0x0b	; 11
    4bb8:	84 ff       	sbrs	r24, 4
    4bba:	8b c0       	rjmp	.+278    	; 0x4cd2 <f_rename+0x21c>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
    4bbc:	c8 ac       	ldd	r12, Y+56	; 0x38
    4bbe:	d9 ac       	ldd	r13, Y+57	; 0x39
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    4bc0:	5a 96       	adiw	r26, 0x1a	; 26
    4bc2:	2c 91       	ld	r18, X
    4bc4:	5a 97       	sbiw	r26, 0x1a	; 26
    4bc6:	30 e0       	ldi	r19, 0x00	; 0
    4bc8:	54 96       	adiw	r26, 0x14	; 20
    4bca:	8c 91       	ld	r24, X
    4bcc:	54 97       	sbiw	r26, 0x14	; 20
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	28 2b       	or	r18, r24
    4bd2:	39 2b       	or	r19, r25
    4bd4:	55 96       	adiw	r26, 0x15	; 21
    4bd6:	9c 91       	ld	r25, X
    4bd8:	55 97       	sbiw	r26, 0x15	; 21
    4bda:	80 e0       	ldi	r24, 0x00	; 0
    4bdc:	28 2b       	or	r18, r24
    4bde:	39 2b       	or	r19, r25
    4be0:	5b 96       	adiw	r26, 0x1b	; 27
    4be2:	9c 91       	ld	r25, X
    4be4:	80 e0       	ldi	r24, 0x00	; 0
    4be6:	28 2b       	or	r18, r24
    4be8:	39 2b       	or	r19, r25
    4bea:	79 01       	movw	r14, r18
    4bec:	00 e0       	ldi	r16, 0x00	; 0
    4bee:	10 e0       	ldi	r17, 0x00	; 0
    4bf0:	8e ef       	ldi	r24, 0xFE	; 254
    4bf2:	9f ef       	ldi	r25, 0xFF	; 255
    4bf4:	af ef       	ldi	r26, 0xFF	; 255
    4bf6:	bf ef       	ldi	r27, 0xFF	; 255
    4bf8:	e8 0e       	add	r14, r24
    4bfa:	f9 1e       	adc	r15, r25
    4bfc:	0a 1f       	adc	r16, r26
    4bfe:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    4c00:	f6 01       	movw	r30, r12
    4c02:	82 8d       	ldd	r24, Z+26	; 0x1a
    4c04:	93 8d       	ldd	r25, Z+27	; 0x1b
    4c06:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4c08:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4c0a:	02 97       	sbiw	r24, 0x02	; 2
    4c0c:	a1 09       	sbc	r26, r1
    4c0e:	b1 09       	sbc	r27, r1
    4c10:	e8 16       	cp	r14, r24
    4c12:	f9 06       	cpc	r15, r25
    4c14:	0a 07       	cpc	r16, r26
    4c16:	1b 07       	cpc	r17, r27
    4c18:	08 f0       	brcs	.+2      	; 0x4c1c <f_rename+0x166>
    4c1a:	66 c0       	rjmp	.+204    	; 0x4ce8 <f_rename+0x232>
	return clst * fs->csize + fs->database;
    4c1c:	22 81       	ldd	r18, Z+2	; 0x02
    4c1e:	30 e0       	ldi	r19, 0x00	; 0
    4c20:	40 e0       	ldi	r20, 0x00	; 0
    4c22:	50 e0       	ldi	r21, 0x00	; 0
    4c24:	c8 01       	movw	r24, r16
    4c26:	b7 01       	movw	r22, r14
    4c28:	0e 94 54 50 	call	0xa0a8	; 0xa0a8 <__mulsi3>
    4c2c:	ab 01       	movw	r20, r22
    4c2e:	bc 01       	movw	r22, r24
    4c30:	f6 01       	movw	r30, r12
    4c32:	86 a1       	ldd	r24, Z+38	; 0x26
    4c34:	97 a1       	ldd	r25, Z+39	; 0x27
    4c36:	a0 a5       	ldd	r26, Z+40	; 0x28
    4c38:	b1 a5       	ldd	r27, Z+41	; 0x29
    4c3a:	48 0f       	add	r20, r24
    4c3c:	59 1f       	adc	r21, r25
    4c3e:	6a 1f       	adc	r22, r26
    4c40:	7b 1f       	adc	r23, r27
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
    4c42:	41 15       	cp	r20, r1
    4c44:	51 05       	cpc	r21, r1
    4c46:	61 05       	cpc	r22, r1
    4c48:	71 05       	cpc	r23, r1
    4c4a:	09 f4       	brne	.+2      	; 0x4c4e <f_rename+0x198>
    4c4c:	4d c0       	rjmp	.+154    	; 0x4ce8 <f_rename+0x232>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
    4c4e:	c6 01       	movw	r24, r12
    4c50:	0e 94 4e 0a 	call	0x149c	; 0x149c <move_window>
					dir = dj_new.fs->win+32;
    4c54:	a8 ad       	ldd	r26, Y+56	; 0x38
    4c56:	b9 ad       	ldd	r27, Y+57	; 0x39
					if (res == FR_OK && dir[1] == '.') {
    4c58:	88 23       	and	r24, r24
    4c5a:	09 f0       	breq	.+2      	; 0x4c5e <f_rename+0x1a8>
    4c5c:	46 c0       	rjmp	.+140    	; 0x4cea <f_rename+0x234>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
    4c5e:	bd 01       	movw	r22, r26
    4c60:	62 5b       	subi	r22, 0xB2	; 178
    4c62:	7f 4f       	sbci	r23, 0xFF	; 255
					if (res == FR_OK && dir[1] == '.') {
    4c64:	fb 01       	movw	r30, r22
    4c66:	81 81       	ldd	r24, Z+1	; 0x01
    4c68:	8e 32       	cpi	r24, 0x2E	; 46
    4c6a:	99 f5       	brne	.+102    	; 0x4cd2 <f_rename+0x21c>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
    4c6c:	8c 91       	ld	r24, X
    4c6e:	83 30       	cpi	r24, 0x03	; 3
    4c70:	b1 f4       	brne	.+44     	; 0x4c9e <f_rename+0x1e8>
    4c72:	fe 01       	movw	r30, r28
    4c74:	fe 96       	adiw	r30, 0x3e	; 62
    4c76:	20 81       	ld	r18, Z
    4c78:	31 81       	ldd	r19, Z+1	; 0x01
    4c7a:	42 81       	ldd	r20, Z+2	; 0x02
    4c7c:	53 81       	ldd	r21, Z+3	; 0x03
    4c7e:	92 96       	adiw	r26, 0x22	; 34
    4c80:	8d 91       	ld	r24, X+
    4c82:	9d 91       	ld	r25, X+
    4c84:	0d 90       	ld	r0, X+
    4c86:	bc 91       	ld	r27, X
    4c88:	a0 2d       	mov	r26, r0
    4c8a:	28 17       	cp	r18, r24
    4c8c:	39 07       	cpc	r19, r25
    4c8e:	4a 07       	cpc	r20, r26
    4c90:	5b 07       	cpc	r21, r27
    4c92:	29 f4       	brne	.+10     	; 0x4c9e <f_rename+0x1e8>
    4c94:	20 e0       	ldi	r18, 0x00	; 0
    4c96:	30 e0       	ldi	r19, 0x00	; 0
    4c98:	40 e0       	ldi	r20, 0x00	; 0
    4c9a:	50 e0       	ldi	r21, 0x00	; 0
    4c9c:	06 c0       	rjmp	.+12     	; 0x4caa <f_rename+0x1f4>
    4c9e:	fe 01       	movw	r30, r28
    4ca0:	fe 96       	adiw	r30, 0x3e	; 62
    4ca2:	20 81       	ld	r18, Z
    4ca4:	31 81       	ldd	r19, Z+1	; 0x01
    4ca6:	42 81       	ldd	r20, Z+2	; 0x02
    4ca8:	53 81       	ldd	r21, Z+3	; 0x03
						ST_WORD(dir+DIR_FstClusLO, dw);
    4caa:	db 01       	movw	r26, r22
    4cac:	5a 96       	adiw	r26, 0x1a	; 26
    4cae:	2c 93       	st	X, r18
    4cb0:	5a 97       	sbiw	r26, 0x1a	; 26
    4cb2:	83 2f       	mov	r24, r19
    4cb4:	99 27       	eor	r25, r25
    4cb6:	5b 96       	adiw	r26, 0x1b	; 27
    4cb8:	8c 93       	st	X, r24
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
    4cba:	ca 01       	movw	r24, r20
    4cbc:	aa 27       	eor	r26, r26
    4cbe:	bb 27       	eor	r27, r27
    4cc0:	fb 01       	movw	r30, r22
    4cc2:	84 8b       	std	Z+20, r24	; 0x14
    4cc4:	89 2f       	mov	r24, r25
    4cc6:	99 27       	eor	r25, r25
    4cc8:	85 8b       	std	Z+21, r24	; 0x15
						dj_new.fs->wflag = 1;
    4cca:	e8 ad       	ldd	r30, Y+56	; 0x38
    4ccc:	f9 ad       	ldd	r31, Y+57	; 0x39
    4cce:	81 e0       	ldi	r24, 0x01	; 1
    4cd0:	84 83       	std	Z+4, r24	; 0x04
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
    4cd2:	ce 01       	movw	r24, r28
    4cd4:	82 96       	adiw	r24, 0x22	; 34
    4cd6:	0e 94 db 11 	call	0x23b6	; 0x23b6 <dir_remove>
				if (res == FR_OK)
    4cda:	88 23       	and	r24, r24
    4cdc:	31 f4       	brne	.+12     	; 0x4cea <f_rename+0x234>
					res = sync(dj_old.fs);
    4cde:	8a a1       	ldd	r24, Y+34	; 0x22
    4ce0:	9b a1       	ldd	r25, Y+35	; 0x23
    4ce2:	0e 94 c7 0a 	call	0x158e	; 0x158e <sync>
    4ce6:	01 c0       	rjmp	.+2      	; 0x4cea <f_rename+0x234>
    4ce8:	82 e0       	ldi	r24, 0x02	; 2
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
    4cea:	c1 5b       	subi	r28, 0xB1	; 177
    4cec:	df 4f       	sbci	r29, 0xFF	; 255
    4cee:	cd bf       	out	0x3d, r28	; 61
    4cf0:	de bf       	out	0x3e, r29	; 62
    4cf2:	cf 91       	pop	r28
    4cf4:	df 91       	pop	r29
    4cf6:	1f 91       	pop	r17
    4cf8:	0f 91       	pop	r16
    4cfa:	ff 90       	pop	r15
    4cfc:	ef 90       	pop	r14
    4cfe:	df 90       	pop	r13
    4d00:	cf 90       	pop	r12
    4d02:	08 95       	ret

00004d04 <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,			/* Logical drive number */
	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
	WORD allocsize		/* Allocation unit size [bytes] */
)
{
    4d04:	2f 92       	push	r2
    4d06:	3f 92       	push	r3
    4d08:	4f 92       	push	r4
    4d0a:	5f 92       	push	r5
    4d0c:	6f 92       	push	r6
    4d0e:	7f 92       	push	r7
    4d10:	8f 92       	push	r8
    4d12:	9f 92       	push	r9
    4d14:	af 92       	push	r10
    4d16:	bf 92       	push	r11
    4d18:	cf 92       	push	r12
    4d1a:	df 92       	push	r13
    4d1c:	ef 92       	push	r14
    4d1e:	ff 92       	push	r15
    4d20:	0f 93       	push	r16
    4d22:	1f 93       	push	r17
    4d24:	df 93       	push	r29
    4d26:	cf 93       	push	r28
    4d28:	cd b7       	in	r28, 0x3d	; 61
    4d2a:	de b7       	in	r29, 0x3e	; 62
    4d2c:	ae 97       	sbiw	r28, 0x2e	; 46
    4d2e:	cd bf       	out	0x3d, r28	; 61
    4d30:	de bf       	out	0x3e, r29	; 62
    4d32:	36 2e       	mov	r3, r22
    4d34:	3a 01       	movw	r6, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check validity of the parameters */
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    4d36:	82 30       	cpi	r24, 0x02	; 2
    4d38:	10 f0       	brcs	.+4      	; 0x4d3e <f_mkfs+0x3a>
    4d3a:	8b e0       	ldi	r24, 0x0B	; 11
    4d3c:	16 c5       	rjmp	.+2604   	; 0x576a <f_mkfs+0xa66>
	if (partition >= 2) return FR_MKFS_ABORTED;
    4d3e:	21 e0       	ldi	r18, 0x01	; 1
    4d40:	26 17       	cp	r18, r22
    4d42:	08 f4       	brcc	.+2      	; 0x4d46 <f_mkfs+0x42>
    4d44:	0f c5       	rjmp	.+2590   	; 0x5764 <f_mkfs+0xa60>

	/* Check mounted drive and clear work area */
	fs = FatFs[drv];
    4d46:	a8 2f       	mov	r26, r24
    4d48:	b0 e0       	ldi	r27, 0x00	; 0
    4d4a:	aa 0f       	add	r26, r26
    4d4c:	bb 1f       	adc	r27, r27
    4d4e:	fd 01       	movw	r30, r26
    4d50:	e0 5a       	subi	r30, 0xA0	; 160
    4d52:	f2 4d       	sbci	r31, 0xD2	; 210
    4d54:	c0 80       	ld	r12, Z
    4d56:	d1 80       	ldd	r13, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    4d58:	c1 14       	cp	r12, r1
    4d5a:	d1 04       	cpc	r13, r1
    4d5c:	11 f4       	brne	.+4      	; 0x4d62 <f_mkfs+0x5e>
    4d5e:	8c e0       	ldi	r24, 0x0C	; 12
    4d60:	04 c5       	rjmp	.+2568   	; 0x576a <f_mkfs+0xa66>
	fs->fs_type = 0;
    4d62:	f6 01       	movw	r30, r12
    4d64:	10 82       	st	Z, r1
	drv = LD2PD(drv);
    4d66:	a6 5d       	subi	r26, 0xD6	; 214
    4d68:	b9 4d       	sbci	r27, 0xD9	; 217
    4d6a:	fc 91       	ld	r31, X
    4d6c:	fb 8b       	std	Y+19, r31	; 0x13

	/* Get disk statics */
	stat = disk_initialize(drv);
    4d6e:	8f 2f       	mov	r24, r31
    4d70:	0e 94 2a 06 	call	0xc54	; 0xc54 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    4d74:	80 ff       	sbrs	r24, 0
    4d76:	02 c0       	rjmp	.+4      	; 0x4d7c <f_mkfs+0x78>
    4d78:	83 e0       	ldi	r24, 0x03	; 3
    4d7a:	f7 c4       	rjmp	.+2542   	; 0x576a <f_mkfs+0xa66>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    4d7c:	82 ff       	sbrs	r24, 2
    4d7e:	02 c0       	rjmp	.+4      	; 0x4d84 <f_mkfs+0x80>
    4d80:	8a e0       	ldi	r24, 0x0A	; 10
    4d82:	f3 c4       	rjmp	.+2534   	; 0x576a <f_mkfs+0xa66>
#if _MAX_SS != 512						/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) > _MAX_SS)
		return FR_MKFS_ABORTED;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
    4d84:	8b 89       	ldd	r24, Y+19	; 0x13
    4d86:	61 e0       	ldi	r22, 0x01	; 1
    4d88:	ae 01       	movw	r20, r28
    4d8a:	4f 5f       	subi	r20, 0xFF	; 255
    4d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d8e:	0e 94 ef 07 	call	0xfde	; 0xfde <disk_ioctl>
    4d92:	88 23       	and	r24, r24
    4d94:	09 f0       	breq	.+2      	; 0x4d98 <f_mkfs+0x94>
    4d96:	e6 c4       	rjmp	.+2508   	; 0x5764 <f_mkfs+0xa60>
    4d98:	89 81       	ldd	r24, Y+1	; 0x01
    4d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d9c:	ab 81       	ldd	r26, Y+3	; 0x03
    4d9e:	bc 81       	ldd	r27, Y+4	; 0x04
    4da0:	80 3d       	cpi	r24, 0xD0	; 208
    4da2:	27 e0       	ldi	r18, 0x07	; 7
    4da4:	92 07       	cpc	r25, r18
    4da6:	20 e0       	ldi	r18, 0x00	; 0
    4da8:	a2 07       	cpc	r26, r18
    4daa:	20 e0       	ldi	r18, 0x00	; 0
    4dac:	b2 07       	cpc	r27, r18
    4dae:	08 f4       	brcc	.+2      	; 0x4db2 <f_mkfs+0xae>
    4db0:	d9 c4       	rjmp	.+2482   	; 0x5764 <f_mkfs+0xa60>
		return FR_MKFS_ABORTED;
	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
    4db2:	81 50       	subi	r24, 0x01	; 1
    4db4:	90 40       	sbci	r25, 0x00	; 0
    4db6:	a0 4d       	sbci	r26, 0xD0	; 208
    4db8:	b7 40       	sbci	r27, 0x07	; 7
    4dba:	40 f0       	brcs	.+16     	; 0x4dcc <f_mkfs+0xc8>
    4dbc:	80 e0       	ldi	r24, 0x00	; 0
    4dbe:	90 e0       	ldi	r25, 0x00	; 0
    4dc0:	a0 ed       	ldi	r26, 0xD0	; 208
    4dc2:	b7 e0       	ldi	r27, 0x07	; 7
    4dc4:	89 83       	std	Y+1, r24	; 0x01
    4dc6:	9a 83       	std	Y+2, r25	; 0x02
    4dc8:	ab 83       	std	Y+3, r26	; 0x03
    4dca:	bc 83       	std	Y+4, r27	; 0x04
	b_part = (!partition) ? 63 : 0;		/* Boot sector */
    4dcc:	33 20       	and	r3, r3
    4dce:	29 f0       	breq	.+10     	; 0x4dda <f_mkfs+0xd6>
    4dd0:	1d 8e       	std	Y+29, r1	; 0x1d
    4dd2:	1e 8e       	std	Y+30, r1	; 0x1e
    4dd4:	1f 8e       	std	Y+31, r1	; 0x1f
    4dd6:	18 a2       	std	Y+32, r1	; 0x20
    4dd8:	08 c0       	rjmp	.+16     	; 0x4dea <f_mkfs+0xe6>
    4dda:	8f e3       	ldi	r24, 0x3F	; 63
    4ddc:	90 e0       	ldi	r25, 0x00	; 0
    4dde:	a0 e0       	ldi	r26, 0x00	; 0
    4de0:	b0 e0       	ldi	r27, 0x00	; 0
    4de2:	8d 8f       	std	Y+29, r24	; 0x1d
    4de4:	9e 8f       	std	Y+30, r25	; 0x1e
    4de6:	af 8f       	std	Y+31, r26	; 0x1f
    4de8:	b8 a3       	std	Y+32, r27	; 0x20
	n_part -= b_part;
    4dea:	89 80       	ldd	r8, Y+1	; 0x01
    4dec:	9a 80       	ldd	r9, Y+2	; 0x02
    4dee:	ab 80       	ldd	r10, Y+3	; 0x03
    4df0:	bc 80       	ldd	r11, Y+4	; 0x04
    4df2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4df4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4df6:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4df8:	58 a1       	ldd	r21, Y+32	; 0x20
    4dfa:	82 1a       	sub	r8, r18
    4dfc:	93 0a       	sbc	r9, r19
    4dfe:	a4 0a       	sbc	r10, r20
    4e00:	b5 0a       	sbc	r11, r21
    4e02:	89 82       	std	Y+1, r8	; 0x01
    4e04:	9a 82       	std	Y+2, r9	; 0x02
    4e06:	ab 82       	std	Y+3, r10	; 0x03
    4e08:	bc 82       	std	Y+4, r11	; 0x04
    4e0a:	80 e0       	ldi	r24, 0x00	; 0
    4e0c:	92 e0       	ldi	r25, 0x02	; 2
    4e0e:	a0 e0       	ldi	r26, 0x00	; 0
    4e10:	b0 e0       	ldi	r27, 0x00	; 0
    4e12:	20 e0       	ldi	r18, 0x00	; 0
    4e14:	30 e0       	ldi	r19, 0x00	; 0
	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
    4e16:	73 01       	movw	r14, r6
    4e18:	00 e0       	ldi	r16, 0x00	; 0
    4e1a:	10 e0       	ldi	r17, 0x00	; 0
    4e1c:	09 c0       	rjmp	.+18     	; 0x4e30 <f_mkfs+0x12c>
    4e1e:	88 0f       	add	r24, r24
    4e20:	99 1f       	adc	r25, r25
    4e22:	aa 1f       	adc	r26, r26
    4e24:	bb 1f       	adc	r27, r27
    4e26:	2f 5f       	subi	r18, 0xFF	; 255
    4e28:	3f 4f       	sbci	r19, 0xFF	; 255
    4e2a:	27 30       	cpi	r18, 0x07	; 7
    4e2c:	31 05       	cpc	r19, r1
    4e2e:	31 f0       	breq	.+12     	; 0x4e3c <f_mkfs+0x138>
    4e30:	8e 15       	cp	r24, r14
    4e32:	9f 05       	cpc	r25, r15
    4e34:	a0 07       	cpc	r26, r16
    4e36:	b1 07       	cpc	r27, r17
    4e38:	91 f7       	brne	.-28     	; 0x4e1e <f_mkfs+0x11a>
    4e3a:	05 c0       	rjmp	.+10     	; 0x4e46 <f_mkfs+0x142>
	if (d != allocsize) allocsize = 0;
    4e3c:	8e 15       	cp	r24, r14
    4e3e:	9f 05       	cpc	r25, r15
    4e40:	a0 07       	cpc	r26, r16
    4e42:	b1 07       	cpc	r27, r17
    4e44:	19 f4       	brne	.+6      	; 0x4e4c <f_mkfs+0x148>
	if (!allocsize) {					/* Auto selection of cluster size */
    4e46:	61 14       	cp	r6, r1
    4e48:	71 04       	cpc	r7, r1
    4e4a:	11 f5       	brne	.+68     	; 0x4e90 <f_mkfs+0x18c>
		d = n_part;
		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
		for (n = 0; d < sstbl[n]; n++) ;
    4e4c:	e7 ea       	ldi	r30, 0xA7	; 167
    4e4e:	fc e2       	ldi	r31, 0x2C	; 44
    4e50:	20 e0       	ldi	r18, 0x00	; 0
    4e52:	30 e0       	ldi	r19, 0x00	; 0
    4e54:	40 e0       	ldi	r20, 0x00	; 0
    4e56:	50 e0       	ldi	r21, 0x00	; 0
    4e58:	81 91       	ld	r24, Z+
    4e5a:	91 91       	ld	r25, Z+
    4e5c:	a1 91       	ld	r26, Z+
    4e5e:	b1 91       	ld	r27, Z+
    4e60:	b9 01       	movw	r22, r18
    4e62:	14 2f       	mov	r17, r20
    4e64:	05 2f       	mov	r16, r21
    4e66:	2f 5f       	subi	r18, 0xFF	; 255
    4e68:	3f 4f       	sbci	r19, 0xFF	; 255
    4e6a:	4f 4f       	sbci	r20, 0xFF	; 255
    4e6c:	5f 4f       	sbci	r21, 0xFF	; 255
    4e6e:	88 16       	cp	r8, r24
    4e70:	99 06       	cpc	r9, r25
    4e72:	aa 06       	cpc	r10, r26
    4e74:	bb 06       	cpc	r11, r27
    4e76:	80 f3       	brcs	.-32     	; 0x4e58 <f_mkfs+0x154>
    4e78:	cb 01       	movw	r24, r22
    4e7a:	6d 83       	std	Y+5, r22	; 0x05
    4e7c:	9e 83       	std	Y+6, r25	; 0x06
    4e7e:	1f 83       	std	Y+7, r17	; 0x07
    4e80:	08 87       	std	Y+8, r16	; 0x08
		allocsize = cstbl[n];
    4e82:	fb 01       	movw	r30, r22
    4e84:	ee 0f       	add	r30, r30
    4e86:	ff 1f       	adc	r31, r31
    4e88:	ef 56       	subi	r30, 0x6F	; 111
    4e8a:	f3 4d       	sbci	r31, 0xD3	; 211
    4e8c:	60 80       	ld	r6, Z
    4e8e:	71 80       	ldd	r7, Z+1	; 0x01
	}
	if (allocsize < SS(fs)) allocsize = SS(fs);
    4e90:	30 e0       	ldi	r19, 0x00	; 0
    4e92:	63 16       	cp	r6, r19
    4e94:	32 e0       	ldi	r19, 0x02	; 2
    4e96:	73 06       	cpc	r7, r19
    4e98:	18 f4       	brcc	.+6      	; 0x4ea0 <f_mkfs+0x19c>
    4e9a:	61 2c       	mov	r6, r1
    4e9c:	22 e0       	ldi	r18, 0x02	; 2
    4e9e:	72 2e       	mov	r7, r18

	allocsize /= SS(fs);		/* Number of sectors per cluster */
    4ea0:	a3 01       	movw	r20, r6
    4ea2:	45 2f       	mov	r20, r21
    4ea4:	55 27       	eor	r21, r21
    4ea6:	46 95       	lsr	r20
    4ea8:	49 8b       	std	Y+17, r20	; 0x11
    4eaa:	5a 8b       	std	Y+18, r21	; 0x12

	/* Pre-compute number of clusters and FAT type */
	n_clst = n_part / allocsize;
    4eac:	ca 01       	movw	r24, r20
    4eae:	a0 e0       	ldi	r26, 0x00	; 0
    4eb0:	b0 e0       	ldi	r27, 0x00	; 0
    4eb2:	8d 87       	std	Y+13, r24	; 0x0d
    4eb4:	9e 87       	std	Y+14, r25	; 0x0e
    4eb6:	af 87       	std	Y+15, r26	; 0x0f
    4eb8:	b8 8b       	std	Y+16, r27	; 0x10
    4eba:	c5 01       	movw	r24, r10
    4ebc:	b4 01       	movw	r22, r8
    4ebe:	2d 85       	ldd	r18, Y+13	; 0x0d
    4ec0:	3e 85       	ldd	r19, Y+14	; 0x0e
    4ec2:	4f 85       	ldd	r20, Y+15	; 0x0f
    4ec4:	58 89       	ldd	r21, Y+16	; 0x10
    4ec6:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    4eca:	c9 01       	movw	r24, r18
    4ecc:	da 01       	movw	r26, r20
	fmt = FS_FAT12;
	if (n_clst >= 0xFF5) fmt = FS_FAT16;
    4ece:	85 3f       	cpi	r24, 0xF5	; 245
    4ed0:	ef e0       	ldi	r30, 0x0F	; 15
    4ed2:	9e 07       	cpc	r25, r30
    4ed4:	e0 e0       	ldi	r30, 0x00	; 0
    4ed6:	ae 07       	cpc	r26, r30
    4ed8:	e0 e0       	ldi	r30, 0x00	; 0
    4eda:	be 07       	cpc	r27, r30
    4edc:	08 f4       	brcc	.+2      	; 0x4ee0 <f_mkfs+0x1dc>
    4ede:	5b c4       	rjmp	.+2230   	; 0x5796 <f_mkfs+0xa92>
    4ee0:	23 2d       	mov	r18, r3
    4ee2:	30 e0       	ldi	r19, 0x00	; 0
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
    4ee4:	85 3f       	cpi	r24, 0xF5	; 245
    4ee6:	ff ef       	ldi	r31, 0xFF	; 255
    4ee8:	9f 07       	cpc	r25, r31
    4eea:	f0 e0       	ldi	r31, 0x00	; 0
    4eec:	af 07       	cpc	r26, r31
    4eee:	f0 e0       	ldi	r31, 0x00	; 0
    4ef0:	bf 07       	cpc	r27, r31
    4ef2:	50 f5       	brcc	.+84     	; 0x4f48 <f_mkfs+0x244>
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
		n_rsv = 1 + partition;
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	case FS_FAT16:
		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
    4ef4:	7c 01       	movw	r14, r24
    4ef6:	8d 01       	movw	r16, r26
    4ef8:	ee 0c       	add	r14, r14
    4efa:	ff 1c       	adc	r15, r15
    4efc:	00 1f       	adc	r16, r16
    4efe:	11 1f       	adc	r17, r17
    4f00:	83 e0       	ldi	r24, 0x03	; 3
    4f02:	92 e0       	ldi	r25, 0x02	; 2
    4f04:	a0 e0       	ldi	r26, 0x00	; 0
    4f06:	b0 e0       	ldi	r27, 0x00	; 0
    4f08:	e8 0e       	add	r14, r24
    4f0a:	f9 1e       	adc	r15, r25
    4f0c:	0a 1f       	adc	r16, r26
    4f0e:	1b 1f       	adc	r17, r27
    4f10:	b9 e0       	ldi	r27, 0x09	; 9
    4f12:	16 95       	lsr	r17
    4f14:	07 95       	ror	r16
    4f16:	f7 94       	ror	r15
    4f18:	e7 94       	ror	r14
    4f1a:	ba 95       	dec	r27
    4f1c:	d1 f7       	brne	.-12     	; 0x4f12 <f_mkfs+0x20e>
		n_rsv = 1 + partition;
    4f1e:	2f 5f       	subi	r18, 0xFF	; 255
    4f20:	3f 4f       	sbci	r19, 0xFF	; 255
    4f22:	c9 01       	movw	r24, r18
    4f24:	aa 27       	eor	r26, r26
    4f26:	97 fd       	sbrc	r25, 7
    4f28:	a0 95       	com	r26
    4f2a:	ba 2f       	mov	r27, r26
    4f2c:	89 8f       	std	Y+25, r24	; 0x19
    4f2e:	9a 8f       	std	Y+26, r25	; 0x1a
    4f30:	ab 8f       	std	Y+27, r26	; 0x1b
    4f32:	bc 8f       	std	Y+28, r27	; 0x1c
    4f34:	20 e2       	ldi	r18, 0x20	; 32
    4f36:	30 e0       	ldi	r19, 0x00	; 0
    4f38:	40 e0       	ldi	r20, 0x00	; 0
    4f3a:	50 e0       	ldi	r21, 0x00	; 0
    4f3c:	2d 8b       	std	Y+21, r18	; 0x15
    4f3e:	3e 8b       	std	Y+22, r19	; 0x16
    4f40:	4f 8b       	std	Y+23, r20	; 0x17
    4f42:	58 8f       	std	Y+24, r21	; 0x18
    4f44:	32 e0       	ldi	r19, 0x02	; 2
    4f46:	2a c0       	rjmp	.+84     	; 0x4f9c <f_mkfs+0x298>
		n_dir = N_ROOTDIR * 32 / SS(fs);
		break;
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    4f48:	7c 01       	movw	r14, r24
    4f4a:	8d 01       	movw	r16, r26
    4f4c:	a2 e0       	ldi	r26, 0x02	; 2
    4f4e:	ee 0c       	add	r14, r14
    4f50:	ff 1c       	adc	r15, r15
    4f52:	00 1f       	adc	r16, r16
    4f54:	11 1f       	adc	r17, r17
    4f56:	aa 95       	dec	r26
    4f58:	d1 f7       	brne	.-12     	; 0x4f4e <f_mkfs+0x24a>
    4f5a:	87 e0       	ldi	r24, 0x07	; 7
    4f5c:	92 e0       	ldi	r25, 0x02	; 2
    4f5e:	a0 e0       	ldi	r26, 0x00	; 0
    4f60:	b0 e0       	ldi	r27, 0x00	; 0
    4f62:	e8 0e       	add	r14, r24
    4f64:	f9 1e       	adc	r15, r25
    4f66:	0a 1f       	adc	r16, r26
    4f68:	1b 1f       	adc	r17, r27
    4f6a:	f9 e0       	ldi	r31, 0x09	; 9
    4f6c:	16 95       	lsr	r17
    4f6e:	07 95       	ror	r16
    4f70:	f7 94       	ror	r15
    4f72:	e7 94       	ror	r14
    4f74:	fa 95       	dec	r31
    4f76:	d1 f7       	brne	.-12     	; 0x4f6c <f_mkfs+0x268>
		n_rsv = 33 - partition;
    4f78:	81 e2       	ldi	r24, 0x21	; 33
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	82 1b       	sub	r24, r18
    4f7e:	93 0b       	sbc	r25, r19
    4f80:	9c 01       	movw	r18, r24
    4f82:	44 27       	eor	r20, r20
    4f84:	37 fd       	sbrc	r19, 7
    4f86:	40 95       	com	r20
    4f88:	54 2f       	mov	r21, r20
    4f8a:	29 8f       	std	Y+25, r18	; 0x19
    4f8c:	3a 8f       	std	Y+26, r19	; 0x1a
    4f8e:	4b 8f       	std	Y+27, r20	; 0x1b
    4f90:	5c 8f       	std	Y+28, r21	; 0x1c
    4f92:	1d 8a       	std	Y+21, r1	; 0x15
    4f94:	1e 8a       	std	Y+22, r1	; 0x16
    4f96:	1f 8a       	std	Y+23, r1	; 0x17
    4f98:	18 8e       	std	Y+24, r1	; 0x18
    4f9a:	33 e0       	ldi	r19, 0x03	; 3
    4f9c:	3a a3       	std	Y+34, r19	; 0x22
	b_fat = b_part + n_rsv;			/* FATs start sector */
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
    4f9e:	8b 89       	ldd	r24, Y+19	; 0x13
    4fa0:	63 e0       	ldi	r22, 0x03	; 3
    4fa2:	ae 01       	movw	r20, r28
    4fa4:	4b 5f       	subi	r20, 0xFB	; 251
    4fa6:	5f 4f       	sbci	r21, 0xFF	; 255
    4fa8:	0e 94 ef 07 	call	0xfde	; 0xfde <disk_ioctl>
    4fac:	88 23       	and	r24, r24
    4fae:	09 f0       	breq	.+2      	; 0x4fb2 <f_mkfs+0x2ae>
    4fb0:	d9 c3       	rjmp	.+1970   	; 0x5764 <f_mkfs+0xa60>
	default:
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 33 - partition;
		n_dir = 0;
	}
	b_fat = b_part + n_rsv;			/* FATs start sector */
    4fb2:	89 8d       	ldd	r24, Y+25	; 0x19
    4fb4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4fb6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4fb8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    4fba:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4fbc:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4fbe:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4fc0:	58 a1       	ldd	r21, Y+32	; 0x20
    4fc2:	82 0f       	add	r24, r18
    4fc4:	93 1f       	adc	r25, r19
    4fc6:	a4 1f       	adc	r26, r20
    4fc8:	b5 1f       	adc	r27, r21
    4fca:	89 87       	std	Y+9, r24	; 0x09
    4fcc:	9a 87       	std	Y+10, r25	; 0x0a
    4fce:	ab 87       	std	Y+11, r26	; 0x0b
    4fd0:	bc 87       	std	Y+12, r27	; 0x0c
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */
    4fd2:	2d 89       	ldd	r18, Y+21	; 0x15
    4fd4:	3e 89       	ldd	r19, Y+22	; 0x16
    4fd6:	4f 89       	ldd	r20, Y+23	; 0x17
    4fd8:	58 8d       	ldd	r21, Y+24	; 0x18
    4fda:	2e 0d       	add	r18, r14
    4fdc:	3f 1d       	adc	r19, r15
    4fde:	40 1f       	adc	r20, r16
    4fe0:	51 1f       	adc	r21, r17
    4fe2:	28 0f       	add	r18, r24
    4fe4:	39 1f       	adc	r19, r25
    4fe6:	4a 1f       	adc	r20, r26
    4fe8:	5b 1f       	adc	r21, r27

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    4fea:	8d 81       	ldd	r24, Y+5	; 0x05
    4fec:	9e 81       	ldd	r25, Y+6	; 0x06
    4fee:	af 81       	ldd	r26, Y+7	; 0x07
    4ff0:	b8 85       	ldd	r27, Y+8	; 0x08
    4ff2:	4c 01       	movw	r8, r24
    4ff4:	5d 01       	movw	r10, r26
    4ff6:	08 94       	sec
    4ff8:	81 08       	sbc	r8, r1
    4ffa:	91 08       	sbc	r9, r1
    4ffc:	a1 08       	sbc	r10, r1
    4ffe:	b1 08       	sbc	r11, r1
    5000:	82 0e       	add	r8, r18
    5002:	93 1e       	adc	r9, r19
    5004:	a4 1e       	adc	r10, r20
    5006:	b5 1e       	adc	r11, r21
    5008:	b0 95       	com	r27
    500a:	a0 95       	com	r26
    500c:	90 95       	com	r25
    500e:	81 95       	neg	r24
    5010:	9f 4f       	sbci	r25, 0xFF	; 255
    5012:	af 4f       	sbci	r26, 0xFF	; 255
    5014:	bf 4f       	sbci	r27, 0xFF	; 255
    5016:	88 22       	and	r8, r24
    5018:	99 22       	and	r9, r25
    501a:	aa 22       	and	r10, r26
    501c:	bb 22       	and	r11, r27
	n_fat += (n - b_data) / N_FATS;
    501e:	27 01       	movw	r4, r14
    5020:	38 01       	movw	r6, r16
    5022:	42 1a       	sub	r4, r18
    5024:	53 0a       	sbc	r5, r19
    5026:	64 0a       	sbc	r6, r20
    5028:	75 0a       	sbc	r7, r21
    502a:	48 0c       	add	r4, r8
    502c:	59 1c       	adc	r5, r9
    502e:	6a 1c       	adc	r6, r10
    5030:	7b 1c       	adc	r7, r11
	/* b_dir and b_data are no longer used below */

	/* Determine number of cluster and final check of validity of the FAT type */
	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
    5032:	e9 80       	ldd	r14, Y+1	; 0x01
    5034:	fa 80       	ldd	r15, Y+2	; 0x02
    5036:	0b 81       	ldd	r16, Y+3	; 0x03
    5038:	1c 81       	ldd	r17, Y+4	; 0x04
    503a:	c8 01       	movw	r24, r16
    503c:	b7 01       	movw	r22, r14
    503e:	29 8d       	ldd	r18, Y+25	; 0x19
    5040:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5042:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5044:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5046:	62 1b       	sub	r22, r18
    5048:	73 0b       	sbc	r23, r19
    504a:	84 0b       	sbc	r24, r20
    504c:	95 0b       	sbc	r25, r21
    504e:	64 19       	sub	r22, r4
    5050:	75 09       	sbc	r23, r5
    5052:	86 09       	sbc	r24, r6
    5054:	97 09       	sbc	r25, r7
    5056:	2d 89       	ldd	r18, Y+21	; 0x15
    5058:	3e 89       	ldd	r19, Y+22	; 0x16
    505a:	4f 89       	ldd	r20, Y+23	; 0x17
    505c:	58 8d       	ldd	r21, Y+24	; 0x18
    505e:	62 1b       	sub	r22, r18
    5060:	73 0b       	sbc	r23, r19
    5062:	84 0b       	sbc	r24, r20
    5064:	95 0b       	sbc	r25, r21
    5066:	2d 85       	ldd	r18, Y+13	; 0x0d
    5068:	3e 85       	ldd	r19, Y+14	; 0x0e
    506a:	4f 85       	ldd	r20, Y+15	; 0x0f
    506c:	58 89       	ldd	r21, Y+16	; 0x10
    506e:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    5072:	2b a3       	std	Y+35, r18	; 0x23
    5074:	3c a3       	std	Y+36, r19	; 0x24
    5076:	4d a3       	std	Y+37, r20	; 0x25
    5078:	5e a3       	std	Y+38, r21	; 0x26
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
    507a:	3a a1       	ldd	r19, Y+34	; 0x22
    507c:	32 30       	cpi	r19, 0x02	; 2
    507e:	51 f4       	brne	.+20     	; 0x5094 <f_mkfs+0x390>
    5080:	8b a1       	ldd	r24, Y+35	; 0x23
    5082:	9c a1       	ldd	r25, Y+36	; 0x24
    5084:	ad a1       	ldd	r26, Y+37	; 0x25
    5086:	be a1       	ldd	r27, Y+38	; 0x26
    5088:	85 5f       	subi	r24, 0xF5	; 245
    508a:	9f 40       	sbci	r25, 0x0F	; 15
    508c:	a0 40       	sbci	r26, 0x00	; 0
    508e:	b0 40       	sbci	r27, 0x00	; 0
    5090:	70 f4       	brcc	.+28     	; 0x50ae <f_mkfs+0x3aa>
    5092:	68 c3       	rjmp	.+1744   	; 0x5764 <f_mkfs+0xa60>
    5094:	fa a1       	ldd	r31, Y+34	; 0x22
    5096:	f3 30       	cpi	r31, 0x03	; 3
    5098:	51 f4       	brne	.+20     	; 0x50ae <f_mkfs+0x3aa>
    509a:	2b a1       	ldd	r18, Y+35	; 0x23
    509c:	3c a1       	ldd	r19, Y+36	; 0x24
    509e:	4d a1       	ldd	r20, Y+37	; 0x25
    50a0:	5e a1       	ldd	r21, Y+38	; 0x26
    50a2:	25 5f       	subi	r18, 0xF5	; 245
    50a4:	3f 4f       	sbci	r19, 0xFF	; 255
    50a6:	40 40       	sbci	r20, 0x00	; 0
    50a8:	50 40       	sbci	r21, 0x00	; 0
    50aa:	08 f4       	brcc	.+2      	; 0x50ae <f_mkfs+0x3aa>
    50ac:	5b c3       	rjmp	.+1718   	; 0x5764 <f_mkfs+0xa60>
	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
	b_data = b_dir + n_dir;			/* Data start sector */

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
	n = (b_data + n - 1) & ~(n - 1);
    50ae:	8d 82       	std	Y+5, r8	; 0x05
    50b0:	9e 82       	std	Y+6, r9	; 0x06
    50b2:	af 82       	std	Y+7, r10	; 0x07
    50b4:	b8 86       	std	Y+8, r11	; 0x08
	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
		return FR_MKFS_ABORTED;

	/* Create partition table if needed */
	if (!partition) {
    50b6:	33 20       	and	r3, r3
    50b8:	19 f0       	breq	.+6      	; 0x50c0 <f_mkfs+0x3bc>
    50ba:	80 ef       	ldi	r24, 0xF0	; 240
    50bc:	8c 8b       	std	Y+20, r24	; 0x14
    50be:	a2 c0       	rjmp	.+324    	; 0x5204 <f_mkfs+0x500>
		DWORD n_disk = b_part + n_part;
    50c0:	4d 8d       	ldd	r20, Y+29	; 0x1d
    50c2:	5e 8d       	ldd	r21, Y+30	; 0x1e
    50c4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    50c6:	78 a1       	ldd	r23, Y+32	; 0x20
    50c8:	4e 0d       	add	r20, r14
    50ca:	5f 1d       	adc	r21, r15
    50cc:	60 1f       	adc	r22, r16
    50ce:	71 1f       	adc	r23, r17
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    50d0:	ee e2       	ldi	r30, 0x2E	; 46
    50d2:	ee 2e       	mov	r14, r30
    50d4:	f1 2c       	mov	r15, r1
    50d6:	ec 0c       	add	r14, r12
    50d8:	fd 1c       	adc	r15, r13
    50da:	f7 01       	movw	r30, r14
    50dc:	20 e0       	ldi	r18, 0x00	; 0
    50de:	32 e0       	ldi	r19, 0x02	; 2
    50e0:	01 c0       	rjmp	.+2      	; 0x50e4 <f_mkfs+0x3e0>
	while (cnt--) *d++ = (char)val;
    50e2:	11 92       	st	Z+, r1
    50e4:	21 50       	subi	r18, 0x01	; 1
    50e6:	30 40       	sbci	r19, 0x00	; 0
    50e8:	9f ef       	ldi	r25, 0xFF	; 255
    50ea:	2f 3f       	cpi	r18, 0xFF	; 255
    50ec:	39 07       	cpc	r19, r25
    50ee:	c9 f7       	brne	.-14     	; 0x50e2 <f_mkfs+0x3de>
	/* Create partition table if needed */
	if (!partition) {
		DWORD n_disk = b_part + n_part;

		mem_set(fs->win, 0, SS(fs));
		tbl = fs->win+MBR_Table;
    50f0:	86 01       	movw	r16, r12
    50f2:	04 51       	subi	r16, 0x14	; 20
    50f4:	1e 4f       	sbci	r17, 0xFE	; 254
		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
    50f6:	80 e8       	ldi	r24, 0x80	; 128
    50f8:	d8 01       	movw	r26, r16
    50fa:	8c 93       	st	X, r24
    50fc:	81 e0       	ldi	r24, 0x01	; 1
    50fe:	11 96       	adiw	r26, 0x01	; 1
    5100:	8c 93       	st	X, r24
    5102:	11 97       	sbiw	r26, 0x01	; 1
    5104:	12 96       	adiw	r26, 0x02	; 2
    5106:	8c 93       	st	X, r24
    5108:	12 97       	sbiw	r26, 0x02	; 2
    510a:	13 96       	adiw	r26, 0x03	; 3
    510c:	1c 92       	st	X, r1
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
    510e:	40 30       	cpi	r20, 0x00	; 0
    5110:	b4 e0       	ldi	r27, 0x04	; 4
    5112:	5b 07       	cpc	r21, r27
    5114:	bb ef       	ldi	r27, 0xFB	; 251
    5116:	6b 07       	cpc	r22, r27
    5118:	b0 e0       	ldi	r27, 0x00	; 0
    511a:	7b 07       	cpc	r23, r27
    511c:	b0 f4       	brcc	.+44     	; 0x514a <f_mkfs+0x446>
			n_disk = n_disk / 63 / 255;
    511e:	cb 01       	movw	r24, r22
    5120:	ba 01       	movw	r22, r20
    5122:	21 ec       	ldi	r18, 0xC1	; 193
    5124:	3e e3       	ldi	r19, 0x3E	; 62
    5126:	40 e0       	ldi	r20, 0x00	; 0
    5128:	50 e0       	ldi	r21, 0x00	; 0
    512a:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    512e:	c9 01       	movw	r24, r18
    5130:	da 01       	movw	r26, r20
			tbl[7] = (BYTE)n_disk;
    5132:	f8 01       	movw	r30, r16
    5134:	27 83       	std	Z+7, r18	; 0x07
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
    5136:	72 e0       	ldi	r23, 0x02	; 2
    5138:	b6 95       	lsr	r27
    513a:	a7 95       	ror	r26
    513c:	97 95       	ror	r25
    513e:	87 95       	ror	r24
    5140:	7a 95       	dec	r23
    5142:	d1 f7       	brne	.-12     	; 0x5138 <f_mkfs+0x434>
    5144:	8f 63       	ori	r24, 0x3F	; 63
    5146:	86 83       	std	Z+6, r24	; 0x06
    5148:	07 c0       	rjmp	.+14     	; 0x5158 <f_mkfs+0x454>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
    514a:	8f ef       	ldi	r24, 0xFF	; 255
    514c:	d8 01       	movw	r26, r16
    514e:	16 96       	adiw	r26, 0x06	; 6
    5150:	8c 93       	st	X, r24
    5152:	16 97       	sbiw	r26, 0x06	; 6
    5154:	17 96       	adiw	r26, 0x07	; 7
    5156:	8c 93       	st	X, r24
		}
		tbl[5] = 254;
    5158:	8e ef       	ldi	r24, 0xFE	; 254
    515a:	f8 01       	movw	r30, r16
    515c:	85 83       	std	Z+5, r24	; 0x05
		if (fmt != FS_FAT32)			/* System ID */
    515e:	fa a1       	ldd	r31, Y+34	; 0x22
    5160:	f3 30       	cpi	r31, 0x03	; 3
    5162:	81 f0       	breq	.+32     	; 0x5184 <f_mkfs+0x480>
			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
    5164:	89 81       	ldd	r24, Y+1	; 0x01
    5166:	9a 81       	ldd	r25, Y+2	; 0x02
    5168:	ab 81       	ldd	r26, Y+3	; 0x03
    516a:	bc 81       	ldd	r27, Y+4	; 0x04
    516c:	80 50       	subi	r24, 0x00	; 0
    516e:	90 40       	sbci	r25, 0x00	; 0
    5170:	a1 40       	sbci	r26, 0x01	; 1
    5172:	b0 40       	sbci	r27, 0x00	; 0
    5174:	10 f0       	brcs	.+4      	; 0x517a <f_mkfs+0x476>
    5176:	86 e0       	ldi	r24, 0x06	; 6
    5178:	01 c0       	rjmp	.+2      	; 0x517c <f_mkfs+0x478>
    517a:	84 e0       	ldi	r24, 0x04	; 4
    517c:	d8 01       	movw	r26, r16
    517e:	14 96       	adiw	r26, 0x04	; 4
    5180:	8c 93       	st	X, r24
    5182:	03 c0       	rjmp	.+6      	; 0x518a <f_mkfs+0x486>
		else
			tbl[4] = 0x0c;
    5184:	8c e0       	ldi	r24, 0x0C	; 12
    5186:	f8 01       	movw	r30, r16
    5188:	84 83       	std	Z+4, r24	; 0x04
		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
    518a:	8f e3       	ldi	r24, 0x3F	; 63
    518c:	d8 01       	movw	r26, r16
    518e:	18 96       	adiw	r26, 0x08	; 8
    5190:	8c 93       	st	X, r24
    5192:	18 97       	sbiw	r26, 0x08	; 8
    5194:	19 96       	adiw	r26, 0x09	; 9
    5196:	1c 92       	st	X, r1
    5198:	19 97       	sbiw	r26, 0x09	; 9
    519a:	1a 96       	adiw	r26, 0x0a	; 10
    519c:	1c 92       	st	X, r1
    519e:	1a 97       	sbiw	r26, 0x0a	; 10
    51a0:	1b 96       	adiw	r26, 0x0b	; 11
    51a2:	1c 92       	st	X, r1
    51a4:	1b 97       	sbiw	r26, 0x0b	; 11
		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
    51a6:	89 81       	ldd	r24, Y+1	; 0x01
    51a8:	1c 96       	adiw	r26, 0x0c	; 12
    51aa:	8c 93       	st	X, r24
    51ac:	1c 97       	sbiw	r26, 0x0c	; 12
    51ae:	8a 81       	ldd	r24, Y+2	; 0x02
    51b0:	1d 96       	adiw	r26, 0x0d	; 13
    51b2:	8c 93       	st	X, r24
    51b4:	89 81       	ldd	r24, Y+1	; 0x01
    51b6:	9a 81       	ldd	r25, Y+2	; 0x02
    51b8:	ab 81       	ldd	r26, Y+3	; 0x03
    51ba:	bc 81       	ldd	r27, Y+4	; 0x04
    51bc:	cd 01       	movw	r24, r26
    51be:	aa 27       	eor	r26, r26
    51c0:	bb 27       	eor	r27, r27
    51c2:	f8 01       	movw	r30, r16
    51c4:	86 87       	std	Z+14, r24	; 0x0e
    51c6:	89 81       	ldd	r24, Y+1	; 0x01
    51c8:	9a 81       	ldd	r25, Y+2	; 0x02
    51ca:	ab 81       	ldd	r26, Y+3	; 0x03
    51cc:	bc 81       	ldd	r27, Y+4	; 0x04
    51ce:	8b 2f       	mov	r24, r27
    51d0:	99 27       	eor	r25, r25
    51d2:	aa 27       	eor	r26, r26
    51d4:	bb 27       	eor	r27, r27
    51d6:	87 87       	std	Z+15, r24	; 0x0f
		ST_WORD(tbl+64, 0xAA55);		/* Signature */
    51d8:	00 5c       	subi	r16, 0xC0	; 192
    51da:	1f 4f       	sbci	r17, 0xFF	; 255
    51dc:	85 e5       	ldi	r24, 0x55	; 85
    51de:	d8 01       	movw	r26, r16
    51e0:	8d 93       	st	X+, r24
    51e2:	fd 01       	movw	r30, r26
    51e4:	8a ea       	ldi	r24, 0xAA	; 170
    51e6:	80 83       	st	Z, r24
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
    51e8:	8b 89       	ldd	r24, Y+19	; 0x13
    51ea:	b7 01       	movw	r22, r14
    51ec:	20 e0       	ldi	r18, 0x00	; 0
    51ee:	30 e0       	ldi	r19, 0x00	; 0
    51f0:	40 e0       	ldi	r20, 0x00	; 0
    51f2:	50 e0       	ldi	r21, 0x00	; 0
    51f4:	01 e0       	ldi	r16, 0x01	; 1
    51f6:	0e 94 77 07 	call	0xeee	; 0xeee <disk_write>
    51fa:	88 23       	and	r24, r24
    51fc:	09 f0       	breq	.+2      	; 0x5200 <f_mkfs+0x4fc>
    51fe:	b4 c2       	rjmp	.+1384   	; 0x5768 <f_mkfs+0xa64>
    5200:	b8 ef       	ldi	r27, 0xF8	; 248
    5202:	bc 8b       	std	Y+20, r27	; 0x14
	} else {
		partition = 0xF0;
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
    5204:	4e e2       	ldi	r20, 0x2E	; 46
    5206:	24 2e       	mov	r2, r20
    5208:	31 2c       	mov	r3, r1
    520a:	2c 0c       	add	r2, r12
    520c:	3d 1c       	adc	r3, r13
    520e:	f1 01       	movw	r30, r2
    5210:	80 e0       	ldi	r24, 0x00	; 0
    5212:	92 e0       	ldi	r25, 0x02	; 2
    5214:	01 c0       	rjmp	.+2      	; 0x5218 <f_mkfs+0x514>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    5216:	11 92       	st	Z+, r1
    5218:	01 97       	sbiw	r24, 0x01	; 1
    521a:	2f ef       	ldi	r18, 0xFF	; 255
    521c:	8f 3f       	cpi	r24, 0xFF	; 255
    521e:	92 07       	cpc	r25, r18
    5220:	d1 f7       	brne	.-12     	; 0x5216 <f_mkfs+0x512>
	}

	/* Create boot record */
	tbl = fs->win;								/* Clear buffer */
	mem_set(tbl, 0, SS(fs));
	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
    5222:	8b ee       	ldi	r24, 0xEB	; 235
    5224:	d6 01       	movw	r26, r12
    5226:	9e 96       	adiw	r26, 0x2e	; 46
    5228:	8c 93       	st	X, r24
    522a:	9e 97       	sbiw	r26, 0x2e	; 46
    522c:	8e ef       	ldi	r24, 0xFE	; 254
    522e:	9f 96       	adiw	r26, 0x2f	; 47
    5230:	8c 93       	st	X, r24
    5232:	9f 97       	sbiw	r26, 0x2f	; 47
    5234:	80 e9       	ldi	r24, 0x90	; 144
    5236:	d0 96       	adiw	r26, 0x30	; 48
    5238:	8c 93       	st	X, r24
    523a:	d0 97       	sbiw	r26, 0x30	; 48
    523c:	d1 96       	adiw	r26, 0x31	; 49
    523e:	1c 92       	st	X, r1
    5240:	d1 97       	sbiw	r26, 0x31	; 49
	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
    5242:	d9 96       	adiw	r26, 0x39	; 57
    5244:	1c 92       	st	X, r1
    5246:	d9 97       	sbiw	r26, 0x39	; 57
    5248:	82 e0       	ldi	r24, 0x02	; 2
    524a:	da 96       	adiw	r26, 0x3a	; 58
    524c:	8c 93       	st	X, r24
	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
    524e:	b9 89       	ldd	r27, Y+17	; 0x11
    5250:	b9 a3       	std	Y+33, r27	; 0x21
    5252:	f6 01       	movw	r30, r12
    5254:	b3 af       	std	Z+59, r27	; 0x3b
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
    5256:	39 8d       	ldd	r19, Y+25	; 0x19
    5258:	34 af       	std	Z+60, r19	; 0x3c
    525a:	15 ae       	std	Z+61, r1	; 0x3d
	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
    525c:	81 e0       	ldi	r24, 0x01	; 1
    525e:	86 af       	std	Z+62, r24	; 0x3e
	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
    5260:	8d 89       	ldd	r24, Y+21	; 0x15
    5262:	9e 89       	ldd	r25, Y+22	; 0x16
    5264:	af 89       	ldd	r26, Y+23	; 0x17
    5266:	b8 8d       	ldd	r27, Y+24	; 0x18
    5268:	34 e0       	ldi	r19, 0x04	; 4
    526a:	88 0f       	add	r24, r24
    526c:	99 1f       	adc	r25, r25
    526e:	aa 1f       	adc	r26, r26
    5270:	bb 1f       	adc	r27, r27
    5272:	3a 95       	dec	r19
    5274:	d1 f7       	brne	.-12     	; 0x526a <f_mkfs+0x566>
    5276:	87 af       	std	Z+63, r24	; 0x3f
    5278:	40 e4       	ldi	r20, 0x40	; 64
    527a:	50 e0       	ldi	r21, 0x00	; 0
    527c:	c4 0e       	add	r12, r20
    527e:	d5 1e       	adc	r13, r21
    5280:	89 2f       	mov	r24, r25
    5282:	99 27       	eor	r25, r25
    5284:	d6 01       	movw	r26, r12
    5286:	8c 93       	st	X, r24
    5288:	e0 ec       	ldi	r30, 0xC0	; 192
    528a:	ff ef       	ldi	r31, 0xFF	; 255
    528c:	ce 0e       	add	r12, r30
    528e:	df 1e       	adc	r13, r31
	if (n_part < 0x10000) {						/* Number of total sectors */
    5290:	89 81       	ldd	r24, Y+1	; 0x01
    5292:	9a 81       	ldd	r25, Y+2	; 0x02
    5294:	ab 81       	ldd	r26, Y+3	; 0x03
    5296:	bc 81       	ldd	r27, Y+4	; 0x04
    5298:	80 30       	cpi	r24, 0x00	; 0
    529a:	f0 e0       	ldi	r31, 0x00	; 0
    529c:	9f 07       	cpc	r25, r31
    529e:	f1 e0       	ldi	r31, 0x01	; 1
    52a0:	af 07       	cpc	r26, r31
    52a2:	f0 e0       	ldi	r31, 0x00	; 0
    52a4:	bf 07       	cpc	r27, r31
    52a6:	60 f4       	brcc	.+24     	; 0x52c0 <f_mkfs+0x5bc>
		ST_WORD(tbl+BPB_TotSec16, n_part);
    52a8:	21 e4       	ldi	r18, 0x41	; 65
    52aa:	30 e0       	ldi	r19, 0x00	; 0
    52ac:	c2 0e       	add	r12, r18
    52ae:	d3 1e       	adc	r13, r19
    52b0:	f6 01       	movw	r30, r12
    52b2:	81 93       	st	Z+, r24
    52b4:	6f 01       	movw	r12, r30
    52b6:	8a 81       	ldd	r24, Y+2	; 0x02
    52b8:	80 83       	st	Z, r24
    52ba:	2e eb       	ldi	r18, 0xBE	; 190
    52bc:	3f ef       	ldi	r19, 0xFF	; 255
    52be:	1f c0       	rjmp	.+62     	; 0x52fe <f_mkfs+0x5fa>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_part);
    52c0:	4e e4       	ldi	r20, 0x4E	; 78
    52c2:	50 e0       	ldi	r21, 0x00	; 0
    52c4:	c4 0e       	add	r12, r20
    52c6:	d5 1e       	adc	r13, r21
    52c8:	f6 01       	movw	r30, r12
    52ca:	81 93       	st	Z+, r24
    52cc:	8a 81       	ldd	r24, Y+2	; 0x02
    52ce:	df 01       	movw	r26, r30
    52d0:	8d 93       	st	X+, r24
    52d2:	6d 01       	movw	r12, r26
    52d4:	89 81       	ldd	r24, Y+1	; 0x01
    52d6:	9a 81       	ldd	r25, Y+2	; 0x02
    52d8:	ab 81       	ldd	r26, Y+3	; 0x03
    52da:	bc 81       	ldd	r27, Y+4	; 0x04
    52dc:	cd 01       	movw	r24, r26
    52de:	aa 27       	eor	r26, r26
    52e0:	bb 27       	eor	r27, r27
    52e2:	f6 01       	movw	r30, r12
    52e4:	81 93       	st	Z+, r24
    52e6:	6f 01       	movw	r12, r30
    52e8:	89 81       	ldd	r24, Y+1	; 0x01
    52ea:	9a 81       	ldd	r25, Y+2	; 0x02
    52ec:	ab 81       	ldd	r26, Y+3	; 0x03
    52ee:	bc 81       	ldd	r27, Y+4	; 0x04
    52f0:	8b 2f       	mov	r24, r27
    52f2:	99 27       	eor	r25, r25
    52f4:	aa 27       	eor	r26, r26
    52f6:	bb 27       	eor	r27, r27
    52f8:	80 83       	st	Z, r24
    52fa:	2f ea       	ldi	r18, 0xAF	; 175
    52fc:	3f ef       	ldi	r19, 0xFF	; 255
    52fe:	c2 0e       	add	r12, r18
    5300:	d3 1e       	adc	r13, r19
	}
	tbl[BPB_Media] = partition;					/* Media descripter */
    5302:	43 e4       	ldi	r20, 0x43	; 67
    5304:	50 e0       	ldi	r21, 0x00	; 0
    5306:	c4 0e       	add	r12, r20
    5308:	d5 1e       	adc	r13, r21
    530a:	ec 89       	ldd	r30, Y+20	; 0x14
    530c:	d6 01       	movw	r26, r12
    530e:	ec 93       	st	X, r30
	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
    5310:	23 e0       	ldi	r18, 0x03	; 3
    5312:	30 e0       	ldi	r19, 0x00	; 0
    5314:	c2 0e       	add	r12, r18
    5316:	d3 1e       	adc	r13, r19
    5318:	8f e3       	ldi	r24, 0x3F	; 63
    531a:	d6 01       	movw	r26, r12
    531c:	8d 93       	st	X+, r24
    531e:	fd 01       	movw	r30, r26
    5320:	11 92       	st	Z+, r1
	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
    5322:	8f ef       	ldi	r24, 0xFF	; 255
    5324:	df 01       	movw	r26, r30
    5326:	8d 93       	st	X+, r24
    5328:	fd 01       	movw	r30, r26
    532a:	11 92       	st	Z+, r1
	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
    532c:	df 01       	movw	r26, r30
    532e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    5330:	ed 93       	st	X+, r30
    5332:	1d 92       	st	X+, r1
    5334:	fd 01       	movw	r30, r26
    5336:	11 92       	st	Z+, r1
    5338:	6f 01       	movw	r12, r30
    533a:	10 82       	st	Z, r1
    533c:	23 eb       	ldi	r18, 0xB3	; 179
    533e:	3f ef       	ldi	r19, 0xFF	; 255
    5340:	c2 0e       	add	r12, r18
    5342:	d3 1e       	adc	r13, r19
	n = get_fattime();							/* Use current time as a VSN */
    5344:	0e 94 d6 09 	call	0x13ac	; 0x13ac <get_fattime>
    5348:	6d 83       	std	Y+5, r22	; 0x05
    534a:	7e 83       	std	Y+6, r23	; 0x06
    534c:	8f 83       	std	Y+7, r24	; 0x07
    534e:	98 87       	std	Y+8, r25	; 0x08
    5350:	e5 e5       	ldi	r30, 0x55	; 85
    5352:	8e 2e       	mov	r8, r30
    5354:	91 2c       	mov	r9, r1
    5356:	8c 0c       	add	r8, r12
    5358:	9d 1c       	adc	r9, r13
    535a:	47 2f       	mov	r20, r23
    535c:	55 27       	eor	r21, r21
    535e:	49 a7       	std	Y+41, r20	; 0x29
    5360:	5a a7       	std	Y+42, r21	; 0x2a
    5362:	9c 01       	movw	r18, r24
    5364:	44 27       	eor	r20, r20
    5366:	55 27       	eor	r21, r21
    5368:	2b a7       	std	Y+43, r18	; 0x2b
    536a:	3c a7       	std	Y+44, r19	; 0x2c
    536c:	4d a7       	std	Y+45, r20	; 0x2d
    536e:	5e a7       	std	Y+46, r21	; 0x2e
    5370:	e9 2e       	mov	r14, r25
    5372:	ff 24       	eor	r15, r15
    5374:	00 27       	eor	r16, r16
    5376:	11 27       	eor	r17, r17
    5378:	a5 2d       	mov	r26, r5
    537a:	bb 27       	eor	r27, r27
    537c:	92 e5       	ldi	r25, 0x52	; 82
    537e:	a9 2e       	mov	r10, r25
    5380:	b1 2c       	mov	r11, r1
    5382:	ac 0c       	add	r10, r12
    5384:	bd 1c       	adc	r11, r13
    5386:	a6 01       	movw	r20, r12
    5388:	4c 5a       	subi	r20, 0xAC	; 172
    538a:	5f 4f       	sbci	r21, 0xFF	; 255
    538c:	4f a3       	std	Y+39, r20	; 0x27
    538e:	58 a7       	std	Y+40, r21	; 0x28
	if (fmt != FS_FAT32) {
    5390:	5a a1       	ldd	r21, Y+34	; 0x22
    5392:	53 30       	cpi	r21, 0x03	; 3
    5394:	61 f1       	breq	.+88     	; 0x53ee <f_mkfs+0x6ea>
		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
    5396:	f4 01       	movw	r30, r8
    5398:	60 83       	st	Z, r22
    539a:	26 e5       	ldi	r18, 0x56	; 86
    539c:	30 e0       	ldi	r19, 0x00	; 0
    539e:	c2 0e       	add	r12, r18
    53a0:	d3 1e       	adc	r13, r19
    53a2:	f6 01       	movw	r30, r12
    53a4:	29 a5       	ldd	r18, Y+41	; 0x29
    53a6:	21 93       	st	Z+, r18
    53a8:	2b a5       	ldd	r18, Y+43	; 0x2b
    53aa:	21 93       	st	Z+, r18
    53ac:	6f 01       	movw	r12, r30
    53ae:	e0 82       	st	Z, r14
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
    53b0:	4c ee       	ldi	r20, 0xEC	; 236
    53b2:	5f ef       	ldi	r21, 0xFF	; 255
    53b4:	c4 0e       	add	r12, r20
    53b6:	d5 1e       	adc	r13, r21
    53b8:	f6 01       	movw	r30, r12
    53ba:	41 92       	st	Z+, r4
    53bc:	6f 01       	movw	r12, r30
    53be:	a0 83       	st	Z, r26
    53c0:	2b eb       	ldi	r18, 0xBB	; 187
    53c2:	3f ef       	ldi	r19, 0xFF	; 255
    53c4:	c2 0e       	add	r12, r18
    53c6:	d3 1e       	adc	r13, r19
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
    53c8:	80 e8       	ldi	r24, 0x80	; 128
    53ca:	d5 01       	movw	r26, r10
    53cc:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
    53ce:	89 e2       	ldi	r24, 0x29	; 41
    53d0:	ef a1       	ldd	r30, Y+39	; 0x27
    53d2:	f8 a5       	ldd	r31, Y+40	; 0x28
    53d4:	80 83       	st	Z, r24
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    53d6:	d1 01       	movw	r26, r2
    53d8:	9b 96       	adiw	r26, 0x2b	; 43
    53da:	eb e0       	ldi	r30, 0x0B	; 11
    53dc:	f0 e2       	ldi	r31, 0x20	; 32
    53de:	02 c0       	rjmp	.+4      	; 0x53e4 <f_mkfs+0x6e0>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    53e0:	81 91       	ld	r24, Z+
    53e2:	8d 93       	st	X+, r24
    53e4:	20 e2       	ldi	r18, 0x20	; 32
    53e6:	ee 31       	cpi	r30, 0x1E	; 30
    53e8:	f2 07       	cpc	r31, r18
    53ea:	d1 f7       	brne	.-12     	; 0x53e0 <f_mkfs+0x6dc>
    53ec:	55 c0       	rjmp	.+170    	; 0x5498 <f_mkfs+0x794>
		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
		tbl[BS_DrvNum] = 0x80;					/* Drive number */
		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
    53ee:	41 e7       	ldi	r20, 0x71	; 113
    53f0:	50 e0       	ldi	r21, 0x00	; 0
    53f2:	c4 0e       	add	r12, r20
    53f4:	d5 1e       	adc	r13, r21
    53f6:	f6 01       	movw	r30, r12
    53f8:	61 93       	st	Z+, r22
    53fa:	29 a5       	ldd	r18, Y+41	; 0x29
    53fc:	21 93       	st	Z+, r18
    53fe:	2b a5       	ldd	r18, Y+43	; 0x2b
    5400:	21 93       	st	Z+, r18
    5402:	6f 01       	movw	r12, r30
    5404:	e0 82       	st	Z, r14
		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
    5406:	f5 01       	movw	r30, r10
    5408:	40 82       	st	Z, r4
    540a:	2f ed       	ldi	r18, 0xDF	; 223
    540c:	3f ef       	ldi	r19, 0xFF	; 255
    540e:	c2 0e       	add	r12, r18
    5410:	d3 1e       	adc	r13, r19
    5412:	f6 01       	movw	r30, r12
    5414:	a0 83       	st	Z, r26
    5416:	c3 01       	movw	r24, r6
    5418:	aa 27       	eor	r26, r26
    541a:	bb 27       	eor	r27, r27
    541c:	ef a1       	ldd	r30, Y+39	; 0x27
    541e:	f8 a5       	ldd	r31, Y+40	; 0x28
    5420:	80 83       	st	Z, r24
    5422:	87 2d       	mov	r24, r7
    5424:	99 27       	eor	r25, r25
    5426:	aa 27       	eor	r26, r26
    5428:	bb 27       	eor	r27, r27
    542a:	f4 01       	movw	r30, r8
    542c:	80 83       	st	Z, r24
		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
    542e:	27 e0       	ldi	r18, 0x07	; 7
    5430:	30 e0       	ldi	r19, 0x00	; 0
    5432:	c2 0e       	add	r12, r18
    5434:	d3 1e       	adc	r13, r19
    5436:	82 e0       	ldi	r24, 0x02	; 2
    5438:	d6 01       	movw	r26, r12
    543a:	8d 93       	st	X+, r24
    543c:	fd 01       	movw	r30, r26
    543e:	11 92       	st	Z+, r1
    5440:	df 01       	movw	r26, r30
    5442:	1d 92       	st	X+, r1
    5444:	fd 01       	movw	r30, r26
    5446:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
    5448:	81 e0       	ldi	r24, 0x01	; 1
    544a:	df 01       	movw	r26, r30
    544c:	8d 93       	st	X+, r24
    544e:	fd 01       	movw	r30, r26
    5450:	11 92       	st	Z+, r1
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
    5452:	86 e0       	ldi	r24, 0x06	; 6
    5454:	df 01       	movw	r26, r30
    5456:	8d 93       	st	X+, r24
    5458:	6d 01       	movw	r12, r26
    545a:	1c 92       	st	X, r1
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
    545c:	ed e0       	ldi	r30, 0x0D	; 13
    545e:	f0 e0       	ldi	r31, 0x00	; 0
    5460:	ce 0e       	add	r12, r30
    5462:	df 1e       	adc	r13, r31
    5464:	80 e8       	ldi	r24, 0x80	; 128
    5466:	d6 01       	movw	r26, r12
    5468:	8c 93       	st	X, r24
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
    546a:	e2 e0       	ldi	r30, 0x02	; 2
    546c:	f0 e0       	ldi	r31, 0x00	; 0
    546e:	ce 0e       	add	r12, r30
    5470:	df 1e       	adc	r13, r31
    5472:	89 e2       	ldi	r24, 0x29	; 41
    5474:	d6 01       	movw	r26, r12
    5476:	8c 93       	st	X, r24
    5478:	e0 e9       	ldi	r30, 0x90	; 144
    547a:	ff ef       	ldi	r31, 0xFF	; 255
    547c:	ce 0e       	add	r12, r30
    547e:	df 1e       	adc	r13, r31
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    5480:	d1 01       	movw	r26, r2
    5482:	a9 5b       	subi	r26, 0xB9	; 185
    5484:	bf 4f       	sbci	r27, 0xFF	; 255
    5486:	ef e1       	ldi	r30, 0x1F	; 31
    5488:	f0 e2       	ldi	r31, 0x20	; 32
    548a:	02 c0       	rjmp	.+4      	; 0x5490 <f_mkfs+0x78c>
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
    548c:	81 91       	ld	r24, Z+
    548e:	8d 93       	st	X+, r24
    5490:	20 e2       	ldi	r18, 0x20	; 32
    5492:	e2 33       	cpi	r30, 0x32	; 50
    5494:	f2 07       	cpc	r31, r18
    5496:	d1 f7       	brne	.-12     	; 0x548c <f_mkfs+0x788>
		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
    5498:	4c e2       	ldi	r20, 0x2C	; 44
    549a:	52 e0       	ldi	r21, 0x02	; 2
    549c:	c4 0e       	add	r12, r20
    549e:	d5 1e       	adc	r13, r21
    54a0:	85 e5       	ldi	r24, 0x55	; 85
    54a2:	d6 01       	movw	r26, r12
    54a4:	8d 93       	st	X+, r24
    54a6:	6d 01       	movw	r12, r26
    54a8:	8a ea       	ldi	r24, 0xAA	; 170
    54aa:	8c 93       	st	X, r24
    54ac:	e3 ed       	ldi	r30, 0xD3	; 211
    54ae:	fd ef       	ldi	r31, 0xFD	; 253
    54b0:	ce 0e       	add	r12, r30
    54b2:	df 1e       	adc	r13, r31
	if (SS(fs) > 512U) {
		ST_WORD(tbl+SS(fs)-2, 0xAA55);
	}
	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
    54b4:	8b 89       	ldd	r24, Y+19	; 0x13
    54b6:	b1 01       	movw	r22, r2
    54b8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    54ba:	3e 8d       	ldd	r19, Y+30	; 0x1e
    54bc:	4f 8d       	ldd	r20, Y+31	; 0x1f
    54be:	58 a1       	ldd	r21, Y+32	; 0x20
    54c0:	01 e0       	ldi	r16, 0x01	; 1
    54c2:	0e 94 77 07 	call	0xeee	; 0xeee <disk_write>
    54c6:	88 23       	and	r24, r24
    54c8:	09 f0       	breq	.+2      	; 0x54cc <f_mkfs+0x7c8>
    54ca:	4e c1       	rjmp	.+668    	; 0x5768 <f_mkfs+0xa64>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)
    54cc:	fa a1       	ldd	r31, Y+34	; 0x22
    54ce:	f3 30       	cpi	r31, 0x03	; 3
    54d0:	61 f4       	brne	.+24     	; 0x54ea <f_mkfs+0x7e6>
		disk_write(drv, tbl, b_part+6, 1);
    54d2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    54d4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    54d6:	4f 8d       	ldd	r20, Y+31	; 0x1f
    54d8:	58 a1       	ldd	r21, Y+32	; 0x20
    54da:	2a 5f       	subi	r18, 0xFA	; 250
    54dc:	3f 4f       	sbci	r19, 0xFF	; 255
    54de:	4f 4f       	sbci	r20, 0xFF	; 255
    54e0:	5f 4f       	sbci	r21, 0xFF	; 255
    54e2:	8b 89       	ldd	r24, Y+19	; 0x13
    54e4:	b1 01       	movw	r22, r2
    54e6:	0e 94 77 07 	call	0xeee	; 0xeee <disk_write>
    54ea:	f1 01       	movw	r30, r2
    54ec:	80 e0       	ldi	r24, 0x00	; 0
    54ee:	92 e0       	ldi	r25, 0x02	; 2
    54f0:	01 c0       	rjmp	.+2      	; 0x54f4 <f_mkfs+0x7f0>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    54f2:	11 92       	st	Z+, r1
    54f4:	01 97       	sbiw	r24, 0x01	; 1
    54f6:	2f ef       	ldi	r18, 0xFF	; 255
    54f8:	8f 3f       	cpi	r24, 0xFF	; 255
    54fa:	92 07       	cpc	r25, r18
    54fc:	d1 f7       	brne	.-12     	; 0x54f2 <f_mkfs+0x7ee>
		disk_write(drv, tbl, b_part+6, 1);

	/* Initialize FAT area */
	for (m = 0; m < N_FATS; m++) {
		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
		if (fmt != FS_FAT32) {
    54fe:	3a a1       	ldd	r19, Y+34	; 0x22
    5500:	33 30       	cpi	r19, 0x03	; 3
    5502:	39 f1       	breq	.+78     	; 0x5552 <f_mkfs+0x84e>
			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    5504:	31 30       	cpi	r19, 0x01	; 1
    5506:	29 f0       	breq	.+10     	; 0x5512 <f_mkfs+0x80e>
    5508:	20 e0       	ldi	r18, 0x00	; 0
    550a:	3f ef       	ldi	r19, 0xFF	; 255
    550c:	4f ef       	ldi	r20, 0xFF	; 255
    550e:	5f ef       	ldi	r21, 0xFF	; 255
    5510:	04 c0       	rjmp	.+8      	; 0x551a <f_mkfs+0x816>
    5512:	20 e0       	ldi	r18, 0x00	; 0
    5514:	3f ef       	ldi	r19, 0xFF	; 255
    5516:	4f ef       	ldi	r20, 0xFF	; 255
    5518:	50 e0       	ldi	r21, 0x00	; 0
			n |= partition;
    551a:	6c 89       	ldd	r22, Y+20	; 0x14
    551c:	86 2f       	mov	r24, r22
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	a0 e0       	ldi	r26, 0x00	; 0
    5522:	b0 e0       	ldi	r27, 0x00	; 0
    5524:	82 2b       	or	r24, r18
    5526:	93 2b       	or	r25, r19
    5528:	a4 2b       	or	r26, r20
    552a:	b5 2b       	or	r27, r21
    552c:	8d 83       	std	Y+5, r24	; 0x05
    552e:	9e 83       	std	Y+6, r25	; 0x06
    5530:	af 83       	std	Y+7, r26	; 0x07
    5532:	b8 87       	std	Y+8, r27	; 0x08
			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
    5534:	f6 01       	movw	r30, r12
    5536:	86 a7       	std	Z+46, r24	; 0x2e
    5538:	29 2f       	mov	r18, r25
    553a:	33 27       	eor	r19, r19
    553c:	27 a7       	std	Z+47, r18	; 0x2f
    553e:	9d 01       	movw	r18, r26
    5540:	44 27       	eor	r20, r20
    5542:	55 27       	eor	r21, r21
    5544:	20 ab       	std	Z+48, r18	; 0x30
    5546:	8b 2f       	mov	r24, r27
    5548:	99 27       	eor	r25, r25
    554a:	aa 27       	eor	r26, r26
    554c:	bb 27       	eor	r27, r27
    554e:	81 ab       	std	Z+49, r24	; 0x31
    5550:	27 c0       	rjmp	.+78     	; 0x55a0 <f_mkfs+0x89c>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
    5552:	88 ef       	ldi	r24, 0xF8	; 248
    5554:	d6 01       	movw	r26, r12
    5556:	9e 96       	adiw	r26, 0x2e	; 46
    5558:	8c 93       	st	X, r24
    555a:	9e 97       	sbiw	r26, 0x2e	; 46
    555c:	8f ef       	ldi	r24, 0xFF	; 255
    555e:	9f 96       	adiw	r26, 0x2f	; 47
    5560:	8c 93       	st	X, r24
    5562:	9f 97       	sbiw	r26, 0x2f	; 47
    5564:	d0 96       	adiw	r26, 0x30	; 48
    5566:	8c 93       	st	X, r24
    5568:	d0 97       	sbiw	r26, 0x30	; 48
    556a:	d1 96       	adiw	r26, 0x31	; 49
    556c:	8c 93       	st	X, r24
    556e:	d1 97       	sbiw	r26, 0x31	; 49
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    5570:	d2 96       	adiw	r26, 0x32	; 50
    5572:	8c 93       	st	X, r24
    5574:	d2 97       	sbiw	r26, 0x32	; 50
    5576:	d3 96       	adiw	r26, 0x33	; 51
    5578:	8c 93       	st	X, r24
    557a:	d3 97       	sbiw	r26, 0x33	; 51
    557c:	d4 96       	adiw	r26, 0x34	; 52
    557e:	8c 93       	st	X, r24
    5580:	d4 97       	sbiw	r26, 0x34	; 52
    5582:	d5 96       	adiw	r26, 0x35	; 53
    5584:	8c 93       	st	X, r24
    5586:	d5 97       	sbiw	r26, 0x35	; 53
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
    5588:	d6 96       	adiw	r26, 0x36	; 54
    558a:	8c 93       	st	X, r24
    558c:	d6 97       	sbiw	r26, 0x36	; 54
    558e:	d7 96       	adiw	r26, 0x37	; 55
    5590:	8c 93       	st	X, r24
    5592:	d7 97       	sbiw	r26, 0x37	; 55
    5594:	d8 96       	adiw	r26, 0x38	; 56
    5596:	8c 93       	st	X, r24
    5598:	d8 97       	sbiw	r26, 0x38	; 56
    559a:	8f e0       	ldi	r24, 0x0F	; 15
    559c:	d9 96       	adiw	r26, 0x39	; 57
    559e:	8c 93       	st	X, r24
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    55a0:	8b 89       	ldd	r24, Y+19	; 0x13
    55a2:	b1 01       	movw	r22, r2
    55a4:	29 85       	ldd	r18, Y+9	; 0x09
    55a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    55a8:	4b 85       	ldd	r20, Y+11	; 0x0b
    55aa:	5c 85       	ldd	r21, Y+12	; 0x0c
    55ac:	01 e0       	ldi	r16, 0x01	; 1
    55ae:	0e 94 77 07 	call	0xeee	; 0xeee <disk_write>
    55b2:	88 23       	and	r24, r24
    55b4:	09 f0       	breq	.+2      	; 0x55b8 <f_mkfs+0x8b4>
    55b6:	d8 c0       	rjmp	.+432    	; 0x5768 <f_mkfs+0xa64>
    55b8:	f1 01       	movw	r30, r2
    55ba:	80 e0       	ldi	r24, 0x00	; 0
    55bc:	92 e0       	ldi	r25, 0x02	; 2
    55be:	01 c0       	rjmp	.+2      	; 0x55c2 <f_mkfs+0x8be>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    55c0:	11 92       	st	Z+, r1
    55c2:	01 97       	sbiw	r24, 0x01	; 1
    55c4:	bf ef       	ldi	r27, 0xFF	; 255
    55c6:	8f 3f       	cpi	r24, 0xFF	; 255
    55c8:	9b 07       	cpc	r25, r27
    55ca:	d1 f7       	brne	.-12     	; 0x55c0 <f_mkfs+0x8bc>
		} else {
			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    55cc:	89 84       	ldd	r8, Y+9	; 0x09
    55ce:	9a 84       	ldd	r9, Y+10	; 0x0a
    55d0:	ab 84       	ldd	r10, Y+11	; 0x0b
    55d2:	bc 84       	ldd	r11, Y+12	; 0x0c
    55d4:	08 94       	sec
    55d6:	81 1c       	adc	r8, r1
    55d8:	91 1c       	adc	r9, r1
    55da:	a1 1c       	adc	r10, r1
    55dc:	b1 1c       	adc	r11, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    55de:	81 e0       	ldi	r24, 0x01	; 1
    55e0:	90 e0       	ldi	r25, 0x00	; 0
    55e2:	a0 e0       	ldi	r26, 0x00	; 0
    55e4:	b0 e0       	ldi	r27, 0x00	; 0
    55e6:	16 c0       	rjmp	.+44     	; 0x5614 <f_mkfs+0x910>
			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    55e8:	8b 89       	ldd	r24, Y+19	; 0x13
    55ea:	b1 01       	movw	r22, r2
    55ec:	a5 01       	movw	r20, r10
    55ee:	94 01       	movw	r18, r8
    55f0:	01 e0       	ldi	r16, 0x01	; 1
    55f2:	0e 94 77 07 	call	0xeee	; 0xeee <disk_write>
    55f6:	88 23       	and	r24, r24
    55f8:	09 f0       	breq	.+2      	; 0x55fc <f_mkfs+0x8f8>
    55fa:	b6 c0       	rjmp	.+364    	; 0x5768 <f_mkfs+0xa64>
    55fc:	08 94       	sec
    55fe:	81 1c       	adc	r8, r1
    5600:	91 1c       	adc	r9, r1
    5602:	a1 1c       	adc	r10, r1
    5604:	b1 1c       	adc	r11, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
		for (n = 1; n < n_fat; n++) {
    5606:	8d 81       	ldd	r24, Y+5	; 0x05
    5608:	9e 81       	ldd	r25, Y+6	; 0x06
    560a:	af 81       	ldd	r26, Y+7	; 0x07
    560c:	b8 85       	ldd	r27, Y+8	; 0x08
    560e:	01 96       	adiw	r24, 0x01	; 1
    5610:	a1 1d       	adc	r26, r1
    5612:	b1 1d       	adc	r27, r1
    5614:	8d 83       	std	Y+5, r24	; 0x05
    5616:	9e 83       	std	Y+6, r25	; 0x06
    5618:	af 83       	std	Y+7, r26	; 0x07
    561a:	b8 87       	std	Y+8, r27	; 0x08
    561c:	8d 81       	ldd	r24, Y+5	; 0x05
    561e:	9e 81       	ldd	r25, Y+6	; 0x06
    5620:	af 81       	ldd	r26, Y+7	; 0x07
    5622:	b8 85       	ldd	r27, Y+8	; 0x08
    5624:	84 15       	cp	r24, r4
    5626:	95 05       	cpc	r25, r5
    5628:	a6 05       	cpc	r26, r6
    562a:	b7 05       	cpc	r27, r7
    562c:	e8 f2       	brcs	.-70     	; 0x55e8 <f_mkfs+0x8e4>
				return FR_DISK_ERR;
		}
	}

	/* Initialize Root directory */
	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
    562e:	ea a1       	ldd	r30, Y+34	; 0x22
    5630:	e3 30       	cpi	r30, 0x03	; 3
    5632:	11 f0       	breq	.+4      	; 0x5638 <f_mkfs+0x934>
    5634:	fd 89       	ldd	r31, Y+21	; 0x15
    5636:	f9 a3       	std	Y+33, r31	; 0x21
	do {
		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
    5638:	24 01       	movw	r4, r8
    563a:	35 01       	movw	r6, r10
    563c:	08 94       	sec
    563e:	41 1c       	adc	r4, r1
    5640:	51 1c       	adc	r5, r1
    5642:	61 1c       	adc	r6, r1
    5644:	71 1c       	adc	r7, r1
    5646:	8b 89       	ldd	r24, Y+19	; 0x13
    5648:	b1 01       	movw	r22, r2
    564a:	a5 01       	movw	r20, r10
    564c:	94 01       	movw	r18, r8
    564e:	01 e0       	ldi	r16, 0x01	; 1
    5650:	0e 94 77 07 	call	0xeee	; 0xeee <disk_write>
    5654:	88 23       	and	r24, r24
    5656:	09 f0       	breq	.+2      	; 0x565a <f_mkfs+0x956>
    5658:	87 c0       	rjmp	.+270    	; 0x5768 <f_mkfs+0xa64>
			return FR_DISK_ERR;
	} while (--m);
    565a:	29 a1       	ldd	r18, Y+33	; 0x21
    565c:	21 50       	subi	r18, 0x01	; 1
    565e:	29 a3       	std	Y+33, r18	; 0x21
    5660:	22 23       	and	r18, r18
    5662:	19 f0       	breq	.+6      	; 0x566a <f_mkfs+0x966>
    5664:	53 01       	movw	r10, r6
    5666:	42 01       	movw	r8, r4
    5668:	e7 cf       	rjmp	.-50     	; 0x5638 <f_mkfs+0x934>

	/* Create FSInfo record if needed */
	if (fmt == FS_FAT32) {
    566a:	3a a1       	ldd	r19, Y+34	; 0x22
    566c:	33 30       	cpi	r19, 0x03	; 3
    566e:	09 f0       	breq	.+2      	; 0x5672 <f_mkfs+0x96e>
    5670:	70 c0       	rjmp	.+224    	; 0x5752 <f_mkfs+0xa4e>
		ST_WORD(tbl+BS_55AA, 0xAA55);
    5672:	4c e2       	ldi	r20, 0x2C	; 44
    5674:	52 e0       	ldi	r21, 0x02	; 2
    5676:	c4 0e       	add	r12, r20
    5678:	d5 1e       	adc	r13, r21
    567a:	85 e5       	ldi	r24, 0x55	; 85
    567c:	d6 01       	movw	r26, r12
    567e:	8d 93       	st	X+, r24
    5680:	6d 01       	movw	r12, r26
    5682:	8a ea       	ldi	r24, 0xAA	; 170
    5684:	8c 93       	st	X, r24
    5686:	e3 ed       	ldi	r30, 0xD3	; 211
    5688:	fd ef       	ldi	r31, 0xFD	; 253
    568a:	ce 0e       	add	r12, r30
    568c:	df 1e       	adc	r13, r31
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    568e:	82 e5       	ldi	r24, 0x52	; 82
    5690:	d6 01       	movw	r26, r12
    5692:	9e 96       	adiw	r26, 0x2e	; 46
    5694:	8c 93       	st	X, r24
    5696:	9e 97       	sbiw	r26, 0x2e	; 46
    5698:	9f 96       	adiw	r26, 0x2f	; 47
    569a:	8c 93       	st	X, r24
    569c:	9f 97       	sbiw	r26, 0x2f	; 47
    569e:	21 e6       	ldi	r18, 0x61	; 97
    56a0:	d0 96       	adiw	r26, 0x30	; 48
    56a2:	2c 93       	st	X, r18
    56a4:	d0 97       	sbiw	r26, 0x30	; 48
    56a6:	91 e4       	ldi	r25, 0x41	; 65
    56a8:	d1 96       	adiw	r26, 0x31	; 49
    56aa:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    56ac:	e2 e1       	ldi	r30, 0x12	; 18
    56ae:	f2 e0       	ldi	r31, 0x02	; 2
    56b0:	ce 0e       	add	r12, r30
    56b2:	df 1e       	adc	r13, r31
    56b4:	82 e7       	ldi	r24, 0x72	; 114
    56b6:	d6 01       	movw	r26, r12
    56b8:	8d 93       	st	X+, r24
    56ba:	fd 01       	movw	r30, r26
    56bc:	81 93       	st	Z+, r24
    56be:	df 01       	movw	r26, r30
    56c0:	9d 93       	st	X+, r25
    56c2:	fd 01       	movw	r30, r26
    56c4:	21 93       	st	Z+, r18
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
    56c6:	8b a1       	ldd	r24, Y+35	; 0x23
    56c8:	81 50       	subi	r24, 0x01	; 1
    56ca:	df 01       	movw	r26, r30
    56cc:	8d 93       	st	X+, r24
    56ce:	8b a1       	ldd	r24, Y+35	; 0x23
    56d0:	9c a1       	ldd	r25, Y+36	; 0x24
    56d2:	01 97       	sbiw	r24, 0x01	; 1
    56d4:	fd 01       	movw	r30, r26
    56d6:	91 93       	st	Z+, r25
    56d8:	8b a1       	ldd	r24, Y+35	; 0x23
    56da:	9c a1       	ldd	r25, Y+36	; 0x24
    56dc:	ad a1       	ldd	r26, Y+37	; 0x25
    56de:	be a1       	ldd	r27, Y+38	; 0x26
    56e0:	01 97       	sbiw	r24, 0x01	; 1
    56e2:	a1 09       	sbc	r26, r1
    56e4:	b1 09       	sbc	r27, r1
    56e6:	9d 01       	movw	r18, r26
    56e8:	44 27       	eor	r20, r20
    56ea:	55 27       	eor	r21, r21
    56ec:	21 93       	st	Z+, r18
    56ee:	8b 2f       	mov	r24, r27
    56f0:	99 27       	eor	r25, r25
    56f2:	aa 27       	eor	r26, r26
    56f4:	bb 27       	eor	r27, r27
    56f6:	81 93       	st	Z+, r24
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
    56f8:	8f ef       	ldi	r24, 0xFF	; 255
    56fa:	df 01       	movw	r26, r30
    56fc:	8d 93       	st	X+, r24
    56fe:	fd 01       	movw	r30, r26
    5700:	81 93       	st	Z+, r24
    5702:	df 01       	movw	r26, r30
    5704:	8d 93       	st	X+, r24
    5706:	fd 01       	movw	r30, r26
    5708:	80 83       	st	Z, r24
		disk_write(drv, tbl, b_part+1, 1);
    570a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    570c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    570e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5710:	58 a1       	ldd	r21, Y+32	; 0x20
    5712:	2f 5f       	subi	r18, 0xFF	; 255
    5714:	3f 4f       	sbci	r19, 0xFF	; 255
    5716:	4f 4f       	sbci	r20, 0xFF	; 255
    5718:	5f 4f       	sbci	r21, 0xFF	; 255
    571a:	2d 8f       	std	Y+29, r18	; 0x1d
    571c:	3e 8f       	std	Y+30, r19	; 0x1e
    571e:	4f 8f       	std	Y+31, r20	; 0x1f
    5720:	58 a3       	std	Y+32, r21	; 0x20
    5722:	8b 89       	ldd	r24, Y+19	; 0x13
    5724:	b1 01       	movw	r22, r2
    5726:	01 e0       	ldi	r16, 0x01	; 1
    5728:	0e 94 77 07 	call	0xeee	; 0xeee <disk_write>
		disk_write(drv, tbl, b_part+7, 1);
    572c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    572e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5730:	af 8d       	ldd	r26, Y+31	; 0x1f
    5732:	b8 a1       	ldd	r27, Y+32	; 0x20
    5734:	06 96       	adiw	r24, 0x06	; 6
    5736:	a1 1d       	adc	r26, r1
    5738:	b1 1d       	adc	r27, r1
    573a:	8d 8f       	std	Y+29, r24	; 0x1d
    573c:	9e 8f       	std	Y+30, r25	; 0x1e
    573e:	af 8f       	std	Y+31, r26	; 0x1f
    5740:	b8 a3       	std	Y+32, r27	; 0x20
    5742:	8b 89       	ldd	r24, Y+19	; 0x13
    5744:	b1 01       	movw	r22, r2
    5746:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5748:	3e 8d       	ldd	r19, Y+30	; 0x1e
    574a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    574c:	58 a1       	ldd	r21, Y+32	; 0x20
    574e:	0e 94 77 07 	call	0xeee	; 0xeee <disk_write>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
    5752:	8b 89       	ldd	r24, Y+19	; 0x13
    5754:	60 e0       	ldi	r22, 0x00	; 0
    5756:	40 e0       	ldi	r20, 0x00	; 0
    5758:	50 e0       	ldi	r21, 0x00	; 0
    575a:	0e 94 ef 07 	call	0xfde	; 0xfde <disk_ioctl>
    575e:	88 23       	and	r24, r24
    5760:	21 f0       	breq	.+8      	; 0x576a <f_mkfs+0xa66>
    5762:	02 c0       	rjmp	.+4      	; 0x5768 <f_mkfs+0xa64>
    5764:	8e e0       	ldi	r24, 0x0E	; 14
    5766:	01 c0       	rjmp	.+2      	; 0x576a <f_mkfs+0xa66>
    5768:	81 e0       	ldi	r24, 0x01	; 1
}
    576a:	ae 96       	adiw	r28, 0x2e	; 46
    576c:	cd bf       	out	0x3d, r28	; 61
    576e:	de bf       	out	0x3e, r29	; 62
    5770:	cf 91       	pop	r28
    5772:	df 91       	pop	r29
    5774:	1f 91       	pop	r17
    5776:	0f 91       	pop	r16
    5778:	ff 90       	pop	r15
    577a:	ef 90       	pop	r14
    577c:	df 90       	pop	r13
    577e:	cf 90       	pop	r12
    5780:	bf 90       	pop	r11
    5782:	af 90       	pop	r10
    5784:	9f 90       	pop	r9
    5786:	8f 90       	pop	r8
    5788:	7f 90       	pop	r7
    578a:	6f 90       	pop	r6
    578c:	5f 90       	pop	r5
    578e:	4f 90       	pop	r4
    5790:	3f 90       	pop	r3
    5792:	2f 90       	pop	r2
    5794:	08 95       	ret
	if (n_clst >= 0xFFF5) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	switch (fmt) {
	case FS_FAT12:
		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
    5796:	7c 01       	movw	r14, r24
    5798:	8d 01       	movw	r16, r26
    579a:	ee 0c       	add	r14, r14
    579c:	ff 1c       	adc	r15, r15
    579e:	00 1f       	adc	r16, r16
    57a0:	11 1f       	adc	r17, r17
    57a2:	e8 0e       	add	r14, r24
    57a4:	f9 1e       	adc	r15, r25
    57a6:	0a 1f       	adc	r16, r26
    57a8:	1b 1f       	adc	r17, r27
    57aa:	08 94       	sec
    57ac:	e1 1c       	adc	r14, r1
    57ae:	f1 1c       	adc	r15, r1
    57b0:	01 1d       	adc	r16, r1
    57b2:	11 1d       	adc	r17, r1
    57b4:	16 95       	lsr	r17
    57b6:	07 95       	ror	r16
    57b8:	f7 94       	ror	r15
    57ba:	e7 94       	ror	r14
    57bc:	22 e0       	ldi	r18, 0x02	; 2
    57be:	32 e0       	ldi	r19, 0x02	; 2
    57c0:	40 e0       	ldi	r20, 0x00	; 0
    57c2:	50 e0       	ldi	r21, 0x00	; 0
    57c4:	e2 0e       	add	r14, r18
    57c6:	f3 1e       	adc	r15, r19
    57c8:	04 1f       	adc	r16, r20
    57ca:	15 1f       	adc	r17, r21
    57cc:	99 e0       	ldi	r25, 0x09	; 9
    57ce:	16 95       	lsr	r17
    57d0:	07 95       	ror	r16
    57d2:	f7 94       	ror	r15
    57d4:	e7 94       	ror	r14
    57d6:	9a 95       	dec	r25
    57d8:	d1 f7       	brne	.-12     	; 0x57ce <f_mkfs+0xaca>
		n_rsv = 1 + partition;
    57da:	83 2d       	mov	r24, r3
    57dc:	90 e0       	ldi	r25, 0x00	; 0
    57de:	01 96       	adiw	r24, 0x01	; 1
    57e0:	9c 01       	movw	r18, r24
    57e2:	44 27       	eor	r20, r20
    57e4:	37 fd       	sbrc	r19, 7
    57e6:	40 95       	com	r20
    57e8:	54 2f       	mov	r21, r20
    57ea:	29 8f       	std	Y+25, r18	; 0x19
    57ec:	3a 8f       	std	Y+26, r19	; 0x1a
    57ee:	4b 8f       	std	Y+27, r20	; 0x1b
    57f0:	5c 8f       	std	Y+28, r21	; 0x1c
    57f2:	80 e2       	ldi	r24, 0x20	; 32
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	a0 e0       	ldi	r26, 0x00	; 0
    57f8:	b0 e0       	ldi	r27, 0x00	; 0
    57fa:	8d 8b       	std	Y+21, r24	; 0x15
    57fc:	9e 8b       	std	Y+22, r25	; 0x16
    57fe:	af 8b       	std	Y+23, r26	; 0x17
    5800:	b8 8f       	std	Y+24, r27	; 0x18
    5802:	91 e0       	ldi	r25, 0x01	; 1
    5804:	9a a3       	std	Y+34, r25	; 0x22
    5806:	cb cb       	rjmp	.-2154   	; 0x4f9e <f_mkfs+0x29a>

00005808 <f_gets>:
char* f_gets (
	char* buff,	/* Pointer to the string buffer to read */
	int len,	/* Size of string buffer */
	FIL* fil	/* Pointer to the file object */
)
{
    5808:	6f 92       	push	r6
    580a:	7f 92       	push	r7
    580c:	8f 92       	push	r8
    580e:	9f 92       	push	r9
    5810:	af 92       	push	r10
    5812:	bf 92       	push	r11
    5814:	cf 92       	push	r12
    5816:	df 92       	push	r13
    5818:	ef 92       	push	r14
    581a:	ff 92       	push	r15
    581c:	0f 93       	push	r16
    581e:	1f 93       	push	r17
    5820:	df 93       	push	r29
    5822:	cf 93       	push	r28
    5824:	0f 92       	push	r0
    5826:	0f 92       	push	r0
    5828:	cd b7       	in	r28, 0x3d	; 61
    582a:	de b7       	in	r29, 0x3e	; 62
    582c:	5c 01       	movw	r10, r24
    582e:	6b 01       	movw	r12, r22
    5830:	4a 01       	movw	r8, r20
    5832:	8c 01       	movw	r16, r24
    5834:	ee 24       	eor	r14, r14
    5836:	ff 24       	eor	r15, r15
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    5838:	08 94       	sec
    583a:	c1 08       	sbc	r12, r1
    583c:	d1 08       	sbc	r13, r1
		f_read(fil, p, 1, &rc);
    583e:	3e 01       	movw	r6, r28
    5840:	08 94       	sec
    5842:	61 1c       	adc	r6, r1
    5844:	71 1c       	adc	r7, r1
    5846:	13 c0       	rjmp	.+38     	; 0x586e <f_gets+0x66>
    5848:	c4 01       	movw	r24, r8
    584a:	b8 01       	movw	r22, r16
    584c:	41 e0       	ldi	r20, 0x01	; 1
    584e:	50 e0       	ldi	r21, 0x00	; 0
    5850:	93 01       	movw	r18, r6
    5852:	0e 94 07 19 	call	0x320e	; 0x320e <f_read>
		if (rc != 1) break;			/* Break when no data to read */
    5856:	89 81       	ldd	r24, Y+1	; 0x01
    5858:	9a 81       	ldd	r25, Y+2	; 0x02
    585a:	01 97       	sbiw	r24, 0x01	; 1
    585c:	59 f4       	brne	.+22     	; 0x5874 <f_gets+0x6c>
#if _USE_STRFUNC >= 2
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
    585e:	08 94       	sec
    5860:	e1 1c       	adc	r14, r1
    5862:	f1 1c       	adc	r15, r1
		if (*p++ == '\n') break;	/* Break when reached end of line */
    5864:	f8 01       	movw	r30, r16
    5866:	81 91       	ld	r24, Z+
    5868:	8f 01       	movw	r16, r30
    586a:	8a 30       	cpi	r24, 0x0A	; 10
    586c:	19 f0       	breq	.+6      	; 0x5874 <f_gets+0x6c>
	int i = 0;
	char *p = buff;
	UINT rc;


	while (i < len - 1) {			/* Read bytes until buffer gets filled */
    586e:	ec 14       	cp	r14, r12
    5870:	fd 04       	cpc	r15, r13
    5872:	54 f3       	brlt	.-44     	; 0x5848 <f_gets+0x40>
		if (*p == '\r') continue;	/* Strip '\r' */
#endif
		i++;
		if (*p++ == '\n') break;	/* Break when reached end of line */
	}
	*p = 0;
    5874:	f8 01       	movw	r30, r16
    5876:	10 82       	st	Z, r1
	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
    5878:	ef 28       	or	r14, r15
    587a:	11 f4       	brne	.+4      	; 0x5880 <f_gets+0x78>
    587c:	aa 24       	eor	r10, r10
    587e:	bb 24       	eor	r11, r11
}
    5880:	c5 01       	movw	r24, r10
    5882:	0f 90       	pop	r0
    5884:	0f 90       	pop	r0
    5886:	cf 91       	pop	r28
    5888:	df 91       	pop	r29
    588a:	1f 91       	pop	r17
    588c:	0f 91       	pop	r16
    588e:	ff 90       	pop	r15
    5890:	ef 90       	pop	r14
    5892:	df 90       	pop	r13
    5894:	cf 90       	pop	r12
    5896:	bf 90       	pop	r11
    5898:	af 90       	pop	r10
    589a:	9f 90       	pop	r9
    589c:	8f 90       	pop	r8
    589e:	7f 90       	pop	r7
    58a0:	6f 90       	pop	r6
    58a2:	08 95       	ret

000058a4 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	int chr,	/* A character to be output */
	FIL* fil	/* Ponter to the file object */
)
{
    58a4:	0f 93       	push	r16
    58a6:	1f 93       	push	r17
    58a8:	df 93       	push	r29
    58aa:	cf 93       	push	r28
    58ac:	00 d0       	rcall	.+0      	; 0x58ae <f_putc+0xa>
    58ae:	cd b7       	in	r28, 0x3d	; 61
    58b0:	de b7       	in	r29, 0x3e	; 62
    58b2:	8c 01       	movw	r16, r24


#if _USE_STRFUNC >= 2
	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
#endif
	if (!fil) {	/* Special value may be used to switch the destination to any other device */
    58b4:	61 15       	cp	r22, r1
    58b6:	71 05       	cpc	r23, r1
    58b8:	91 f0       	breq	.+36     	; 0x58de <f_putc+0x3a>
	/*	put_console(chr);	*/
		return chr;
	}
	c = (char)chr;
    58ba:	89 83       	std	Y+1, r24	; 0x01
	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
    58bc:	cb 01       	movw	r24, r22
    58be:	be 01       	movw	r22, r28
    58c0:	6f 5f       	subi	r22, 0xFF	; 255
    58c2:	7f 4f       	sbci	r23, 0xFF	; 255
    58c4:	41 e0       	ldi	r20, 0x01	; 1
    58c6:	50 e0       	ldi	r21, 0x00	; 0
    58c8:	9e 01       	movw	r18, r28
    58ca:	2e 5f       	subi	r18, 0xFE	; 254
    58cc:	3f 4f       	sbci	r19, 0xFF	; 255
    58ce:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <f_write>
	return bw ? chr : EOF;		/* Return the result */
    58d2:	8a 81       	ldd	r24, Y+2	; 0x02
    58d4:	9b 81       	ldd	r25, Y+3	; 0x03
    58d6:	89 2b       	or	r24, r25
    58d8:	11 f4       	brne	.+4      	; 0x58de <f_putc+0x3a>
    58da:	0f ef       	ldi	r16, 0xFF	; 255
    58dc:	1f ef       	ldi	r17, 0xFF	; 255
}
    58de:	c8 01       	movw	r24, r16
    58e0:	23 96       	adiw	r28, 0x03	; 3
    58e2:	cd bf       	out	0x3d, r28	; 61
    58e4:	de bf       	out	0x3e, r29	; 62
    58e6:	cf 91       	pop	r28
    58e8:	df 91       	pop	r29
    58ea:	1f 91       	pop	r17
    58ec:	0f 91       	pop	r16
    58ee:	08 95       	ret

000058f0 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const char* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    58f0:	ef 92       	push	r14
    58f2:	ff 92       	push	r15
    58f4:	0f 93       	push	r16
    58f6:	1f 93       	push	r17
    58f8:	cf 93       	push	r28
    58fa:	df 93       	push	r29
    58fc:	8c 01       	movw	r16, r24
    58fe:	7b 01       	movw	r14, r22
    5900:	c0 e0       	ldi	r28, 0x00	; 0
    5902:	d0 e0       	ldi	r29, 0x00	; 0
    5904:	0d c0       	rjmp	.+26     	; 0x5920 <f_puts+0x30>
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
    5906:	90 e0       	ldi	r25, 0x00	; 0
    5908:	b7 01       	movw	r22, r14
    590a:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <f_putc>
    590e:	8f 5f       	subi	r24, 0xFF	; 255
    5910:	9f 4f       	sbci	r25, 0xFF	; 255
    5912:	19 f4       	brne	.+6      	; 0x591a <f_puts+0x2a>
    5914:	cf ef       	ldi	r28, 0xFF	; 255
    5916:	df ef       	ldi	r29, 0xFF	; 255
    5918:	07 c0       	rjmp	.+14     	; 0x5928 <f_puts+0x38>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    591a:	0f 5f       	subi	r16, 0xFF	; 255
    591c:	1f 4f       	sbci	r17, 0xFF	; 255
    591e:	21 96       	adiw	r28, 0x01	; 1
    5920:	f8 01       	movw	r30, r16
    5922:	80 81       	ld	r24, Z
    5924:	88 23       	and	r24, r24
    5926:	79 f7       	brne	.-34     	; 0x5906 <f_puts+0x16>
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
    5928:	ce 01       	movw	r24, r28
    592a:	df 91       	pop	r29
    592c:	cf 91       	pop	r28
    592e:	1f 91       	pop	r17
    5930:	0f 91       	pop	r16
    5932:	ff 90       	pop	r15
    5934:	ef 90       	pop	r14
    5936:	08 95       	ret

00005938 <SD_Close>:

	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
}

void SD_Close(void){
	f_close(&Log_File);
    5938:	8d e9       	ldi	r24, 0x9D	; 157
    593a:	90 e5       	ldi	r25, 0x50	; 80
    593c:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <f_close>
}
    5940:	08 95       	ret

00005942 <SD_Inserted>:

bool SD_Inserted(void){
	return sdValid;
    5942:	80 91 14 2d 	lds	r24, 0x2D14
}
    5946:	08 95       	ret

00005948 <SD_WriteBuffer>:
    for (uint16_t i=0; i<strlen(string); i++){
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }
}

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    5948:	af 92       	push	r10
    594a:	bf 92       	push	r11
    594c:	cf 92       	push	r12
    594e:	df 92       	push	r13
    5950:	ef 92       	push	r14
    5952:	ff 92       	push	r15
    5954:	0f 93       	push	r16
    5956:	1f 93       	push	r17
    5958:	df 93       	push	r29
    595a:	cf 93       	push	r28
    595c:	0f 92       	push	r0
    595e:	0f 92       	push	r0
    5960:	cd b7       	in	r28, 0x3d	; 61
    5962:	de b7       	in	r29, 0x3e	; 62
    5964:	5c 01       	movw	r10, r24
    5966:	6b 01       	movw	r12, r22
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);
    5968:	8d e9       	ldi	r24, 0x9D	; 157
    596a:	90 e5       	ldi	r25, 0x50	; 80
    596c:	b5 01       	movw	r22, r10
    596e:	a6 01       	movw	r20, r12
    5970:	9e 01       	movw	r18, r28
    5972:	2f 5f       	subi	r18, 0xFF	; 255
    5974:	3f 4f       	sbci	r19, 0xFF	; 255
    5976:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <f_write>
    597a:	60 e0       	ldi	r22, 0x00	; 0
    597c:	70 e0       	ldi	r23, 0x00	; 0
    597e:	3b c0       	rjmp	.+118    	; 0x59f6 <SD_WriteBuffer+0xae>

    for (uint16_t i=0; i<length; i++){
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    5980:	e0 90 dc 55 	lds	r14, 0x55DC
    5984:	f0 90 dd 55 	lds	r15, 0x55DD
    5988:	00 91 de 55 	lds	r16, 0x55DE
    598c:	10 91 df 55 	lds	r17, 0x55DF
    5990:	20 91 dc 55 	lds	r18, 0x55DC
    5994:	30 91 dd 55 	lds	r19, 0x55DD
    5998:	40 91 de 55 	lds	r20, 0x55DE
    599c:	50 91 df 55 	lds	r21, 0x55DF
    59a0:	30 70       	andi	r19, 0x00	; 0
    59a2:	40 70       	andi	r20, 0x00	; 0
    59a4:	50 70       	andi	r21, 0x00	; 0
    59a6:	f5 01       	movw	r30, r10
    59a8:	e6 0f       	add	r30, r22
    59aa:	f7 1f       	adc	r31, r23
    59ac:	80 81       	ld	r24, Z
    59ae:	90 e0       	ldi	r25, 0x00	; 0
    59b0:	a0 e0       	ldi	r26, 0x00	; 0
    59b2:	b0 e0       	ldi	r27, 0x00	; 0
    59b4:	28 27       	eor	r18, r24
    59b6:	39 27       	eor	r19, r25
    59b8:	4a 27       	eor	r20, r26
    59ba:	5b 27       	eor	r21, r27
    59bc:	22 0f       	add	r18, r18
    59be:	33 1f       	adc	r19, r19
    59c0:	22 0f       	add	r18, r18
    59c2:	33 1f       	adc	r19, r19
    59c4:	2c 58       	subi	r18, 0x8C	; 140
    59c6:	39 4d       	sbci	r19, 0xD9	; 217
    59c8:	ef 2c       	mov	r14, r15
    59ca:	f0 2e       	mov	r15, r16
    59cc:	01 2f       	mov	r16, r17
    59ce:	11 27       	eor	r17, r17
    59d0:	f9 01       	movw	r30, r18
    59d2:	80 81       	ld	r24, Z
    59d4:	91 81       	ldd	r25, Z+1	; 0x01
    59d6:	a2 81       	ldd	r26, Z+2	; 0x02
    59d8:	b3 81       	ldd	r27, Z+3	; 0x03
    59da:	e8 26       	eor	r14, r24
    59dc:	f9 26       	eor	r15, r25
    59de:	0a 27       	eor	r16, r26
    59e0:	1b 27       	eor	r17, r27
    59e2:	e0 92 dc 55 	sts	0x55DC, r14
    59e6:	f0 92 dd 55 	sts	0x55DD, r15
    59ea:	00 93 de 55 	sts	0x55DE, r16
    59ee:	10 93 df 55 	sts	0x55DF, r17

void SD_WriteBuffer(uint8_t * buffer, uint16_t length){
    uint16_t tmp;
    f_write (&Log_File, buffer, length, &tmp);

    for (uint16_t i=0; i<length; i++){
    59f2:	6f 5f       	subi	r22, 0xFF	; 255
    59f4:	7f 4f       	sbci	r23, 0xFF	; 255
    59f6:	6c 15       	cp	r22, r12
    59f8:	7d 05       	cpc	r23, r13
    59fa:	10 f2       	brcs	.-124    	; 0x5980 <SD_WriteBuffer+0x38>
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}
    59fc:	0f 90       	pop	r0
    59fe:	0f 90       	pop	r0
    5a00:	cf 91       	pop	r28
    5a02:	df 91       	pop	r29
    5a04:	1f 91       	pop	r17
    5a06:	0f 91       	pop	r16
    5a08:	ff 90       	pop	r15
    5a0a:	ef 90       	pop	r14
    5a0c:	df 90       	pop	r13
    5a0e:	cf 90       	pop	r12
    5a10:	bf 90       	pop	r11
    5a12:	af 90       	pop	r10
    5a14:	08 95       	ret

00005a16 <SD_Write32>:
	tmp16[1] = (uint8_t)(var >> 8);
	SD_WriteBuffer(tmp16,2);
}

void SD_Write32(uint32_t var){
	tmp32[0] = (uint8_t)(var >> 0);
    5a16:	60 93 bc 36 	sts	0x36BC, r22
	tmp32[1] = (uint8_t)(var >> 8);
    5a1a:	27 2f       	mov	r18, r23
    5a1c:	38 2f       	mov	r19, r24
    5a1e:	49 2f       	mov	r20, r25
    5a20:	55 27       	eor	r21, r21
    5a22:	20 93 bd 36 	sts	0x36BD, r18
	tmp32[2] = (uint8_t)(var >> 16);
    5a26:	9c 01       	movw	r18, r24
    5a28:	44 27       	eor	r20, r20
    5a2a:	55 27       	eor	r21, r21
    5a2c:	20 93 be 36 	sts	0x36BE, r18
	tmp32[3] = (uint8_t)(var >> 24);
    5a30:	69 2f       	mov	r22, r25
    5a32:	77 27       	eor	r23, r23
    5a34:	88 27       	eor	r24, r24
    5a36:	99 27       	eor	r25, r25
    5a38:	60 93 bf 36 	sts	0x36BF, r22
	SD_WriteBuffer(tmp32,4);
    5a3c:	8c eb       	ldi	r24, 0xBC	; 188
    5a3e:	96 e3       	ldi	r25, 0x36	; 54
    5a40:	64 e0       	ldi	r22, 0x04	; 4
    5a42:	70 e0       	ldi	r23, 0x00	; 0
    5a44:	0e 94 a4 2c 	call	0x5948	; 0x5948 <SD_WriteBuffer>
}
    5a48:	08 95       	ret

00005a4a <SD_Write16>:
	tmp8[0] = (uint8_t)var;
	SD_WriteBuffer(tmp8,1);
}

void SD_Write16(uint16_t var){
	tmp16[0] = (uint8_t)(var >> 0);
    5a4a:	80 93 1e 57 	sts	0x571E, r24
	tmp16[1] = (uint8_t)(var >> 8);
    5a4e:	90 93 1f 57 	sts	0x571F, r25
	SD_WriteBuffer(tmp16,2);
    5a52:	8e e1       	ldi	r24, 0x1E	; 30
    5a54:	97 e5       	ldi	r25, 0x57	; 87
    5a56:	62 e0       	ldi	r22, 0x02	; 2
    5a58:	70 e0       	ldi	r23, 0x00	; 0
    5a5a:	0e 94 a4 2c 	call	0x5948	; 0x5948 <SD_WriteBuffer>
}
    5a5e:	08 95       	ret

00005a60 <SD_Write8>:
	return sdValid;
}

void SD_Write8(uint8_t var){

	tmp8[0] = (uint8_t)var;
    5a60:	80 93 59 38 	sts	0x3859, r24
	SD_WriteBuffer(tmp8,1);
    5a64:	89 e5       	ldi	r24, 0x59	; 89
    5a66:	98 e3       	ldi	r25, 0x38	; 56
    5a68:	61 e0       	ldi	r22, 0x01	; 1
    5a6a:	70 e0       	ldi	r23, 0x00	; 0
    5a6c:	0e 94 a4 2c 	call	0x5948	; 0x5948 <SD_WriteBuffer>
}
    5a70:	08 95       	ret

00005a72 <SD_ClearCRC>:
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    5a72:	8f ef       	ldi	r24, 0xFF	; 255
    5a74:	9f ef       	ldi	r25, 0xFF	; 255
    5a76:	af ef       	ldi	r26, 0xFF	; 255
    5a78:	bf ef       	ldi	r27, 0xFF	; 255
    5a7a:	80 93 dc 55 	sts	0x55DC, r24
    5a7e:	90 93 dd 55 	sts	0x55DD, r25
    5a82:	a0 93 de 55 	sts	0x55DE, r26
    5a86:	b0 93 df 55 	sts	0x55DF, r27
}
    5a8a:	08 95       	ret

00005a8c <SD_WriteCRC>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
    5a8c:	60 91 dc 55 	lds	r22, 0x55DC
    5a90:	70 91 dd 55 	lds	r23, 0x55DD
    5a94:	80 91 de 55 	lds	r24, 0x55DE
    5a98:	90 91 df 55 	lds	r25, 0x55DF
    5a9c:	60 95       	com	r22
    5a9e:	70 95       	com	r23
    5aa0:	80 95       	com	r24
    5aa2:	90 95       	com	r25
    5aa4:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
}
    5aa8:	08 95       	ret

00005aaa <SD_GetSpaceRemaining>:
        wantToRecordFast = true;
    }
}


void SD_GetSpaceRemaining(void){
    5aaa:	ef 92       	push	r14
    5aac:	ff 92       	push	r15
    5aae:	0f 93       	push	r16
    5ab0:	1f 93       	push	r17
    5ab2:	df 93       	push	r29
    5ab4:	cf 93       	push	r28
    5ab6:	00 d0       	rcall	.+0      	; 0x5ab8 <SD_GetSpaceRemaining+0xe>
    5ab8:	0f 92       	push	r0
    5aba:	cd b7       	in	r28, 0x3d	; 61
    5abc:	de b7       	in	r29, 0x3e	; 62
	uint32_t totalDiskSpace;
	uint32_t freeSpace;
	uint32_t percentUsed;
	
	f_getfree("0:",&freeSpace,&fs);
    5abe:	83 e3       	ldi	r24, 0x33	; 51
    5ac0:	90 e2       	ldi	r25, 0x20	; 32
    5ac2:	be 01       	movw	r22, r28
    5ac4:	6f 5f       	subi	r22, 0xFF	; 255
    5ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ac8:	46 e5       	ldi	r20, 0x56	; 86
    5aca:	56 e3       	ldi	r21, 0x36	; 54
    5acc:	0e 94 ef 20 	call	0x41de	; 0x41de <f_getfree>
	totalDiskSpace = fs->max_clust;
    5ad0:	e0 91 56 36 	lds	r30, 0x3656
    5ad4:	f0 91 57 36 	lds	r31, 0x3657
    5ad8:	e2 8c       	ldd	r14, Z+26	; 0x1a
    5ada:	f3 8c       	ldd	r15, Z+27	; 0x1b
    5adc:	04 8d       	ldd	r16, Z+28	; 0x1c
    5ade:	15 8d       	ldd	r17, Z+29	; 0x1d
	
	percentUsed = totalDiskSpace - freeSpace;
    5ae0:	89 81       	ldd	r24, Y+1	; 0x01
    5ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ae4:	ab 81       	ldd	r26, Y+3	; 0x03
    5ae6:	bc 81       	ldd	r27, Y+4	; 0x04
    5ae8:	a8 01       	movw	r20, r16
    5aea:	97 01       	movw	r18, r14
    5aec:	28 1b       	sub	r18, r24
    5aee:	39 0b       	sbc	r19, r25
    5af0:	4a 0b       	sbc	r20, r26
    5af2:	5b 0b       	sbc	r21, r27
    5af4:	ca 01       	movw	r24, r20
    5af6:	b9 01       	movw	r22, r18
	percentUsed *= 1000;
    5af8:	28 ee       	ldi	r18, 0xE8	; 232
    5afa:	33 e0       	ldi	r19, 0x03	; 3
    5afc:	40 e0       	ldi	r20, 0x00	; 0
    5afe:	50 e0       	ldi	r21, 0x00	; 0
    5b00:	0e 94 54 50 	call	0xa0a8	; 0xa0a8 <__mulsi3>
	percentUsed /= totalDiskSpace;
	percentDiskUsed = percentUsed;
    5b04:	a8 01       	movw	r20, r16
    5b06:	97 01       	movw	r18, r14
    5b08:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    5b0c:	20 93 15 2d 	sts	0x2D15, r18
    5b10:	30 93 16 2d 	sts	0x2D16, r19
    5b14:	40 93 17 2d 	sts	0x2D17, r20
    5b18:	50 93 18 2d 	sts	0x2D18, r21
}
    5b1c:	24 96       	adiw	r28, 0x04	; 4
    5b1e:	cd bf       	out	0x3d, r28	; 61
    5b20:	de bf       	out	0x3e, r29	; 62
    5b22:	cf 91       	pop	r28
    5b24:	df 91       	pop	r29
    5b26:	1f 91       	pop	r17
    5b28:	0f 91       	pop	r16
    5b2a:	ff 90       	pop	r15
    5b2c:	ef 90       	pop	r14
    5b2e:	08 95       	ret

00005b30 <SD_Timer_Init>:
	// div  = 256
	// per  = 576
	// => 14745600/256/576 => 100 samples per second
	
	// Set period/TOP value
	SD_Timer.PER = 576;
    5b30:	e0 e0       	ldi	r30, 0x00	; 0
    5b32:	fa e0       	ldi	r31, 0x0A	; 10
    5b34:	80 e4       	ldi	r24, 0x40	; 64
    5b36:	92 e0       	ldi	r25, 0x02	; 2
    5b38:	86 a3       	std	Z+38, r24	; 0x26
    5b3a:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	SD_Timer.CTRLA = (SD_Timer.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV256_gc;
    5b3c:	80 81       	ld	r24, Z
    5b3e:	80 7f       	andi	r24, 0xF0	; 240
    5b40:	86 60       	ori	r24, 0x06	; 6
    5b42:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	SD_Timer.INTCTRLA = (SD_Timer.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    5b44:	86 81       	ldd	r24, Z+6	; 0x06
    5b46:	8c 7f       	andi	r24, 0xFC	; 252
    5b48:	82 60       	ori	r24, 0x02	; 2
    5b4a:	86 83       	std	Z+6, r24	; 0x06
	
}
    5b4c:	08 95       	ret

00005b4e <SD_Init>:
0xbdbdf21c,0xcabac28a,0x53b39330,0x24b4a3a6,0xbad03605,0xcdd70693,0x54de5729,0x23d967bf,
0xb3667a2e,0xc4614ab8,0x5d681b02,0x2a6f2b94,0xb40bbe37,0xc30c8ea1,0x5a05df1b,0x2d02ef8d
};


uint8_t SD_Init(void){
    5b4e:	0f 93       	push	r16
    5b50:	1f 93       	push	r17
	uint8_t tmp;

	SD_CD_Port.DIRCLR = 1 << SD_CD;
    5b52:	01 e0       	ldi	r16, 0x01	; 1
    5b54:	e0 e6       	ldi	r30, 0x60	; 96
    5b56:	f6 e0       	ldi	r31, 0x06	; 6
    5b58:	02 83       	std	Z+2, r16	; 0x02
	SD_Timer_Init();
    5b5a:	0e 94 98 2d 	call	0x5b30	; 0x5b30 <SD_Timer_Init>
	tmp = disk_initialize(0);
    5b5e:	80 e0       	ldi	r24, 0x00	; 0
    5b60:	0e 94 2a 06 	call	0xc54	; 0xc54 <disk_initialize>
    5b64:	18 2f       	mov	r17, r24
	f_mount(0, &fso0);
    5b66:	80 e0       	ldi	r24, 0x00	; 0
    5b68:	66 e6       	ldi	r22, 0x66	; 102
    5b6a:	7d e2       	ldi	r23, 0x2D	; 45
    5b6c:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <f_mount>
	f_mount(1, &fso1);
    5b70:	81 e0       	ldi	r24, 0x01	; 1
    5b72:	64 e9       	ldi	r22, 0x94	; 148
    5b74:	7f e2       	ldi	r23, 0x2F	; 47
    5b76:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <f_mount>
	if(tmp == FR_OK){
    5b7a:	11 23       	and	r17, r17
    5b7c:	29 f4       	brne	.+10     	; 0x5b88 <SD_Init+0x3a>
		sdValid = true;
    5b7e:	00 93 14 2d 	sts	0x2D14, r16
		SD_GetSpaceRemaining();
    5b82:	0e 94 55 2d 	call	0x5aaa	; 0x5aaa <SD_GetSpaceRemaining>
    5b86:	02 c0       	rjmp	.+4      	; 0x5b8c <SD_Init+0x3e>
	} else {
		sdValid = false;
    5b88:	10 92 14 2d 	sts	0x2D14, r1
	}
	Button_Port.PIN4CTRL =  PORT_OPC_WIREDORPULL_gc;
    5b8c:	80 e3       	ldi	r24, 0x30	; 48
    5b8e:	e0 ea       	ldi	r30, 0xA0	; 160
    5b90:	f6 e0       	ldi	r31, 0x06	; 6
    5b92:	84 8b       	std	Z+20, r24	; 0x14
	return tmp;
}
    5b94:	81 2f       	mov	r24, r17
    5b96:	1f 91       	pop	r17
    5b98:	0f 91       	pop	r16
    5b9a:	08 95       	ret

00005b9c <__vector_47>:
}


// Called every 10 ms (100 Hz)
ISR(SD_Timer_vect)
{
    5b9c:	1f 92       	push	r1
    5b9e:	0f 92       	push	r0
    5ba0:	0f b6       	in	r0, 0x3f	; 63
    5ba2:	0f 92       	push	r0
    5ba4:	0b b6       	in	r0, 0x3b	; 59
    5ba6:	0f 92       	push	r0
    5ba8:	11 24       	eor	r1, r1
    5baa:	2f 93       	push	r18
    5bac:	3f 93       	push	r19
    5bae:	4f 93       	push	r20
    5bb0:	5f 93       	push	r21
    5bb2:	6f 93       	push	r22
    5bb4:	7f 93       	push	r23
    5bb6:	8f 93       	push	r24
    5bb8:	9f 93       	push	r25
    5bba:	af 93       	push	r26
    5bbc:	bf 93       	push	r27
    5bbe:	ef 93       	push	r30
    5bc0:	ff 93       	push	r31
	disk_timerproc();
    5bc2:	0e 94 c2 09 	call	0x1384	; 0x1384 <disk_timerproc>
	if(!sdValid){
    5bc6:	80 91 14 2d 	lds	r24, 0x2D14
    5bca:	88 23       	and	r24, r24
    5bcc:	31 f4       	brne	.+12     	; 0x5bda <__vector_47+0x3e>
		if((SD_CD_Port.IN & (1<<SD_CD)) == 0 ){
    5bce:	80 91 68 06 	lds	r24, 0x0668
    5bd2:	80 fd       	sbrc	r24, 0
    5bd4:	02 c0       	rjmp	.+4      	; 0x5bda <__vector_47+0x3e>
			SD_Init();
    5bd6:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <SD_Init>
		}
	}
}
    5bda:	ff 91       	pop	r31
    5bdc:	ef 91       	pop	r30
    5bde:	bf 91       	pop	r27
    5be0:	af 91       	pop	r26
    5be2:	9f 91       	pop	r25
    5be4:	8f 91       	pop	r24
    5be6:	7f 91       	pop	r23
    5be8:	6f 91       	pop	r22
    5bea:	5f 91       	pop	r21
    5bec:	4f 91       	pop	r20
    5bee:	3f 91       	pop	r19
    5bf0:	2f 91       	pop	r18
    5bf2:	0f 90       	pop	r0
    5bf4:	0b be       	out	0x3b, r0	; 59
    5bf6:	0f 90       	pop	r0
    5bf8:	0f be       	out	0x3f, r0	; 63
    5bfa:	0f 90       	pop	r0
    5bfc:	1f 90       	pop	r1
    5bfe:	18 95       	reti

00005c00 <display_setBacklight>:
		display_clearPage(7);
	}
}

void display_setBacklight(bool state){
	if(state){
    5c00:	88 23       	and	r24, r24
    5c02:	39 f0       	breq	.+14     	; 0x5c12 <display_setBacklight+0x12>
		Backlight_Port.OUTSET = 1 << Backlight_Pin;
    5c04:	81 e0       	ldi	r24, 0x01	; 1
    5c06:	e0 ea       	ldi	r30, 0xA0	; 160
    5c08:	f6 e0       	ldi	r31, 0x06	; 6
    5c0a:	85 83       	std	Z+5, r24	; 0x05
		backLightIsOn = true;
    5c0c:	80 93 19 2d 	sts	0x2D19, r24
    5c10:	08 95       	ret
	} else {
		Backlight_Port.OUTCLR = 1 << Backlight_Pin;
    5c12:	81 e0       	ldi	r24, 0x01	; 1
    5c14:	e0 ea       	ldi	r30, 0xA0	; 160
    5c16:	f6 e0       	ldi	r31, 0x06	; 6
    5c18:	86 83       	std	Z+6, r24	; 0x06
		backLightIsOn = false;
    5c1a:	10 92 19 2d 	sts	0x2D19, r1
    5c1e:	08 95       	ret

00005c20 <display_toggleBacklight>:
	}
}

void display_toggleBacklight(void){
	Backlight_Port.OUTTGL = 1 << Backlight_Pin;
    5c20:	91 e0       	ldi	r25, 0x01	; 1
    5c22:	e0 ea       	ldi	r30, 0xA0	; 160
    5c24:	f6 e0       	ldi	r31, 0x06	; 6
    5c26:	97 83       	std	Z+7, r25	; 0x07
	if(backLightIsOn){
    5c28:	80 91 19 2d 	lds	r24, 0x2D19
    5c2c:	88 23       	and	r24, r24
    5c2e:	19 f0       	breq	.+6      	; 0x5c36 <display_toggleBacklight+0x16>
		backLightIsOn = false;
    5c30:	10 92 19 2d 	sts	0x2D19, r1
    5c34:	08 95       	ret
	} else {
		backLightIsOn = true;
    5c36:	90 93 19 2d 	sts	0x2D19, r25
    5c3a:	08 95       	ret

00005c3c <display_sendCommand>:
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c3c:	90 e8       	ldi	r25, 0x80	; 128
    5c3e:	e0 ea       	ldi	r30, 0xA0	; 160
    5c40:	f6 e0       	ldi	r31, 0x06	; 6
    5c42:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    5c44:	e0 ec       	ldi	r30, 0xC0	; 192
    5c46:	f9 e0       	ldi	r31, 0x09	; 9
    5c48:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c4a:	80 91 c2 09 	lds	r24, 0x09C2
    5c4e:	87 ff       	sbrs	r24, 7
    5c50:	fc cf       	rjmp	.-8      	; 0x5c4a <display_sendCommand+0xe>
}
    5c52:	08 95       	ret

00005c54 <display_sendData>:

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5c54:	90 e8       	ldi	r25, 0x80	; 128
    5c56:	e0 ea       	ldi	r30, 0xA0	; 160
    5c58:	f6 e0       	ldi	r31, 0x06	; 6
    5c5a:	95 83       	std	Z+5, r25	; 0x05
	Display_SPI.DATA = dataByte;
    5c5c:	e0 ec       	ldi	r30, 0xC0	; 192
    5c5e:	f9 e0       	ldi	r31, 0x09	; 9
    5c60:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c62:	80 91 c2 09 	lds	r24, 0x09C2
    5c66:	87 ff       	sbrs	r24, 7
    5c68:	fc cf       	rjmp	.-8      	; 0x5c62 <display_sendData+0xe>
}
    5c6a:	08 95       	ret

00005c6c <display_setCursor>:



void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
    5c6c:	80 6b       	ori	r24, 0xB0	; 176
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c6e:	90 e8       	ldi	r25, 0x80	; 128
    5c70:	e0 ea       	ldi	r30, 0xA0	; 160
    5c72:	f6 e0       	ldi	r31, 0x06	; 6
    5c74:	96 83       	std	Z+6, r25	; 0x06
	Display_SPI.DATA = dataByte;
    5c76:	e0 ec       	ldi	r30, 0xC0	; 192
    5c78:	f9 e0       	ldi	r31, 0x09	; 9
    5c7a:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c7c:	80 91 c2 09 	lds	r24, 0x09C2
    5c80:	87 ff       	sbrs	r24, 7
    5c82:	fc cf       	rjmp	.-8      	; 0x5c7c <display_setCursor+0x10>

void display_setCursor(uint8_t page, uint8_t column) {
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
    5c84:	96 2f       	mov	r25, r22
    5c86:	9f 70       	andi	r25, 0x0F	; 15
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5c88:	80 e8       	ldi	r24, 0x80	; 128
    5c8a:	e0 ea       	ldi	r30, 0xA0	; 160
    5c8c:	f6 e0       	ldi	r31, 0x06	; 6
    5c8e:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5c90:	e0 ec       	ldi	r30, 0xC0	; 192
    5c92:	f9 e0       	ldi	r31, 0x09	; 9
    5c94:	93 83       	std	Z+3, r25	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5c96:	80 91 c2 09 	lds	r24, 0x09C2
    5c9a:	87 ff       	sbrs	r24, 7
    5c9c:	fc cf       	rjmp	.-8      	; 0x5c96 <display_setCursor+0x2a>
	//Page
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
    5c9e:	62 95       	swap	r22
    5ca0:	6f 70       	andi	r22, 0x0F	; 15
    5ca2:	60 61       	ori	r22, 0x10	; 16
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5ca4:	80 e8       	ldi	r24, 0x80	; 128
    5ca6:	e0 ea       	ldi	r30, 0xA0	; 160
    5ca8:	f6 e0       	ldi	r31, 0x06	; 6
    5caa:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5cac:	e0 ec       	ldi	r30, 0xC0	; 192
    5cae:	f9 e0       	ldi	r31, 0x09	; 9
    5cb0:	63 83       	std	Z+3, r22	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5cb2:	80 91 c2 09 	lds	r24, 0x09C2
    5cb6:	87 ff       	sbrs	r24, 7
    5cb8:	fc cf       	rjmp	.-8      	; 0x5cb2 <display_setCursor+0x46>
	display_sendCommand(0xB0 | page);
	//Column LSB
	display_sendCommand(0x00 | (column & 0x0F));
	//Column MSB
	display_sendCommand(0x10 | ((column >> 4) & 0x0F));
}
    5cba:	08 95       	ret

00005cbc <display_clearPage>:



void display_clearPage(uint8_t page) {
    5cbc:	df 92       	push	r13
    5cbe:	ef 92       	push	r14
    5cc0:	ff 92       	push	r15
    5cc2:	0f 93       	push	r16
    5cc4:	1f 93       	push	r17
    5cc6:	cf 93       	push	r28
    5cc8:	df 93       	push	r29
    5cca:	08 2f       	mov	r16, r24
    5ccc:	10 e0       	ldi	r17, 0x00	; 0
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5cce:	40 ea       	ldi	r20, 0xA0	; 160
    5cd0:	e4 2e       	mov	r14, r20
    5cd2:	46 e0       	ldi	r20, 0x06	; 6
    5cd4:	f4 2e       	mov	r15, r20
    5cd6:	30 e8       	ldi	r19, 0x80	; 128
    5cd8:	d3 2e       	mov	r13, r19
	Display_SPI.DATA = dataByte;
    5cda:	c0 ec       	ldi	r28, 0xC0	; 192
    5cdc:	d9 e0       	ldi	r29, 0x09	; 9

void display_clearPage(uint8_t page) {
	uint8_t j;
	for (j = 0; j < DISPLAY_COLS; j++) {
	    //displayBuffer[page][j] = 0x00;
	    display_setCursor(page,j);
    5cde:	80 2f       	mov	r24, r16
    5ce0:	61 2f       	mov	r22, r17
    5ce2:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_setCursor>
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5ce6:	f7 01       	movw	r30, r14
    5ce8:	d5 82       	std	Z+5, r13	; 0x05
	Display_SPI.DATA = dataByte;
    5cea:	1b 82       	std	Y+3, r1	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5cec:	80 91 c2 09 	lds	r24, 0x09C2
    5cf0:	87 ff       	sbrs	r24, 7
    5cf2:	fc cf       	rjmp	.-8      	; 0x5cec <display_clearPage+0x30>



void display_clearPage(uint8_t page) {
	uint8_t j;
	for (j = 0; j < DISPLAY_COLS; j++) {
    5cf4:	1f 5f       	subi	r17, 0xFF	; 255
    5cf6:	16 36       	cpi	r17, 0x66	; 102
    5cf8:	91 f7       	brne	.-28     	; 0x5cde <display_clearPage+0x22>
	    //displayBuffer[page][j] = 0x00;
	    display_setCursor(page,j);
 		display_sendData(0x00);
	}
}
    5cfa:	df 91       	pop	r29
    5cfc:	cf 91       	pop	r28
    5cfe:	1f 91       	pop	r17
    5d00:	0f 91       	pop	r16
    5d02:	ff 90       	pop	r15
    5d04:	ef 90       	pop	r14
    5d06:	df 90       	pop	r13
    5d08:	08 95       	ret

00005d0a <display_clearScreen>:


void display_clearScreen() {
    5d0a:	df 92       	push	r13
    5d0c:	ef 92       	push	r14
    5d0e:	ff 92       	push	r15
    5d10:	0f 93       	push	r16
    5d12:	1f 93       	push	r17
    5d14:	cf 93       	push	r28
    5d16:	df 93       	push	r29
    5d18:	00 e0       	ldi	r16, 0x00	; 0
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5d1a:	60 ea       	ldi	r22, 0xA0	; 160
    5d1c:	e6 2e       	mov	r14, r22
    5d1e:	66 e0       	ldi	r22, 0x06	; 6
    5d20:	f6 2e       	mov	r15, r22
    5d22:	50 e8       	ldi	r21, 0x80	; 128
    5d24:	d5 2e       	mov	r13, r21
	Display_SPI.DATA = dataByte;
    5d26:	c0 ec       	ldi	r28, 0xC0	; 192
    5d28:	d9 e0       	ldi	r29, 0x09	; 9
    5d2a:	11 c0       	rjmp	.+34     	; 0x5d4e <display_clearScreen+0x44>

void display_clearScreen() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
		    display_setCursor(i,j);
    5d2c:	80 2f       	mov	r24, r16
    5d2e:	61 2f       	mov	r22, r17
    5d30:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_setCursor>
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    5d34:	f7 01       	movw	r30, r14
    5d36:	d5 82       	std	Z+5, r13	; 0x05
	Display_SPI.DATA = dataByte;
    5d38:	1b 82       	std	Y+3, r1	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5d3a:	80 91 c2 09 	lds	r24, 0x09C2
    5d3e:	87 ff       	sbrs	r24, 7
    5d40:	fc cf       	rjmp	.-8      	; 0x5d3a <display_clearScreen+0x30>


void display_clearScreen() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
		for (j = 0; j < DISPLAY_COLS; j++) {
    5d42:	1f 5f       	subi	r17, 0xFF	; 255
    5d44:	16 36       	cpi	r17, 0x66	; 102
    5d46:	91 f7       	brne	.-28     	; 0x5d2c <display_clearScreen+0x22>
}


void display_clearScreen() {
	uint8_t i, j;
	for (i = 0; i < DISPLAY_PAGES; i++) {
    5d48:	0f 5f       	subi	r16, 0xFF	; 255
    5d4a:	08 30       	cpi	r16, 0x08	; 8
    5d4c:	11 f0       	breq	.+4      	; 0x5d52 <display_clearScreen+0x48>
    5d4e:	10 e0       	ldi	r17, 0x00	; 0
    5d50:	ed cf       	rjmp	.-38     	; 0x5d2c <display_clearScreen+0x22>
		for (j = 0; j < DISPLAY_COLS; j++) {
		    display_setCursor(i,j);
 			display_sendData(0);
		}
	}
}
    5d52:	df 91       	pop	r29
    5d54:	cf 91       	pop	r28
    5d56:	1f 91       	pop	r17
    5d58:	0f 91       	pop	r16
    5d5a:	ff 90       	pop	r15
    5d5c:	ef 90       	pop	r14
    5d5e:	df 90       	pop	r13
    5d60:	08 95       	ret

00005d62 <display_init>:
#define DISPLAY_COLS		102
#define DISPLAY_PAGES		(DISPLAY_ROWS/8)

volatile bool backLightIsOn = false;

void display_init() {
    5d62:	cf 93       	push	r28
    5d64:	df 93       	push	r29
	//Set SS to wired and pull up
	Display_Port.Display_SS_CTRL = PORT_OPC_WIREDANDPULL_gc;
    5d66:	a0 e6       	ldi	r26, 0x60	; 96
    5d68:	b6 e0       	ldi	r27, 0x06	; 6
    5d6a:	88 e3       	ldi	r24, 0x38	; 56
    5d6c:	54 96       	adiw	r26, 0x14	; 20
    5d6e:	8c 93       	st	X, r24
    5d70:	54 97       	sbiw	r26, 0x14	; 20
	Display_CDPort.Display_CD_CTRL = PORT_OPC_WIREDANDPULL_gc;
    5d72:	e0 ea       	ldi	r30, 0xA0	; 160
    5d74:	f6 e0       	ldi	r31, 0x06	; 6
    5d76:	87 8b       	std	Z+23, r24	; 0x17
	Display_Port.OUTSET = Display_SS_bm;
    5d78:	30 e1       	ldi	r19, 0x10	; 16
    5d7a:	15 96       	adiw	r26, 0x05	; 5
    5d7c:	3c 93       	st	X, r19
    5d7e:	15 97       	sbiw	r26, 0x05	; 5
	
	Display_ResetPort.DIRSET = Display_Reset_bm;
    5d80:	20 e4       	ldi	r18, 0x40	; 64
    5d82:	21 83       	std	Z+1, r18	; 0x01

	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    5d84:	25 83       	std	Z+5, r18	; 0x05
    5d86:	80 e0       	ldi	r24, 0x00	; 0
    5d88:	90 e9       	ldi	r25, 0x90	; 144
    5d8a:	ec 01       	movw	r28, r24
    5d8c:	21 97       	sbiw	r28, 0x01	; 1
    5d8e:	f1 f7       	brne	.-4      	; 0x5d8c <display_init+0x2a>

	_delay_ms(10);
	Display_ResetPort.OUTCLR = Display_Reset_bm; 	// reset
    5d90:	26 83       	std	Z+6, r18	; 0x06
    5d92:	ec 01       	movw	r28, r24
    5d94:	21 97       	sbiw	r28, 0x01	; 1
    5d96:	f1 f7       	brne	.-4      	; 0x5d94 <display_init+0x32>

	_delay_ms(10);
	Display_ResetPort.OUTSET = Display_Reset_bm; 	// pull high
    5d98:	25 83       	std	Z+5, r18	; 0x05
    5d9a:	01 97       	sbiw	r24, 0x01	; 1
    5d9c:	f1 f7       	brne	.-4      	; 0x5d9a <display_init+0x38>

	_delay_ms(10);
	//Double clock, enable SPI, MSB sent first, set as master, mode 3, clk/16
	Display_SPI.CTRL = SPI_CLK2X_bm 
    5d9e:	8d ed       	ldi	r24, 0xDD	; 221
    5da0:	80 93 c0 09 	sts	0x09C0, r24
				| SPI_ENABLE_bm 
				| SPI_MASTER_bm 
				| SPI_MODE_3_gc 
				| SPI_PRESCALER_DIV16_gc; //Can be 4, 16, 64 or 128

	Display_Port.DIRSET = Display_MOSI_bm | Display_SCK_bm | Display_SS_bm;
    5da4:	80 eb       	ldi	r24, 0xB0	; 176
    5da6:	11 96       	adiw	r26, 0x01	; 1
    5da8:	8c 93       	st	X, r24
    5daa:	11 97       	sbiw	r26, 0x01	; 1
	Display_CDPort.DIRSET = Display_CD_bm;
    5dac:	80 e8       	ldi	r24, 0x80	; 128
    5dae:	81 83       	std	Z+1, r24	; 0x01

	//Enable display (write a 0 to SS)
	Display_Port.OUTCLR = Display_SS_bm;
    5db0:	16 96       	adiw	r26, 0x06	; 6
    5db2:	3c 93       	st	X, r19
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5db4:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5db6:	82 ee       	ldi	r24, 0xE2	; 226
    5db8:	e0 ec       	ldi	r30, 0xC0	; 192
    5dba:	f9 e0       	ldi	r31, 0x09	; 9
    5dbc:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5dbe:	80 91 c2 09 	lds	r24, 0x09C2
    5dc2:	87 ff       	sbrs	r24, 7
    5dc4:	fc cf       	rjmp	.-8      	; 0x5dbe <display_init+0x5c>
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5dc6:	80 e8       	ldi	r24, 0x80	; 128
    5dc8:	e0 ea       	ldi	r30, 0xA0	; 160
    5dca:	f6 e0       	ldi	r31, 0x06	; 6
    5dcc:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5dce:	80 e4       	ldi	r24, 0x40	; 64
    5dd0:	e0 ec       	ldi	r30, 0xC0	; 192
    5dd2:	f9 e0       	ldi	r31, 0x09	; 9
    5dd4:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5dd6:	80 91 c2 09 	lds	r24, 0x09C2
    5dda:	87 ff       	sbrs	r24, 7
    5ddc:	fc cf       	rjmp	.-8      	; 0x5dd6 <display_init+0x74>
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5dde:	80 e8       	ldi	r24, 0x80	; 128
    5de0:	e0 ea       	ldi	r30, 0xA0	; 160
    5de2:	f6 e0       	ldi	r31, 0x06	; 6
    5de4:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5de6:	81 ea       	ldi	r24, 0xA1	; 161
    5de8:	e0 ec       	ldi	r30, 0xC0	; 192
    5dea:	f9 e0       	ldi	r31, 0x09	; 9
    5dec:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5dee:	80 91 c2 09 	lds	r24, 0x09C2
    5df2:	87 ff       	sbrs	r24, 7
    5df4:	fc cf       	rjmp	.-8      	; 0x5dee <display_init+0x8c>
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5df6:	80 e8       	ldi	r24, 0x80	; 128
    5df8:	e0 ea       	ldi	r30, 0xA0	; 160
    5dfa:	f6 e0       	ldi	r31, 0x06	; 6
    5dfc:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5dfe:	80 ec       	ldi	r24, 0xC0	; 192
    5e00:	e0 ec       	ldi	r30, 0xC0	; 192
    5e02:	f9 e0       	ldi	r31, 0x09	; 9
    5e04:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5e06:	80 91 c2 09 	lds	r24, 0x09C2
    5e0a:	87 ff       	sbrs	r24, 7
    5e0c:	fc cf       	rjmp	.-8      	; 0x5e06 <display_init+0xa4>
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5e0e:	80 e8       	ldi	r24, 0x80	; 128
    5e10:	e0 ea       	ldi	r30, 0xA0	; 160
    5e12:	f6 e0       	ldi	r31, 0x06	; 6
    5e14:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5e16:	84 ea       	ldi	r24, 0xA4	; 164
    5e18:	e0 ec       	ldi	r30, 0xC0	; 192
    5e1a:	f9 e0       	ldi	r31, 0x09	; 9
    5e1c:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5e1e:	80 91 c2 09 	lds	r24, 0x09C2
    5e22:	87 ff       	sbrs	r24, 7
    5e24:	fc cf       	rjmp	.-8      	; 0x5e1e <display_init+0xbc>
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5e26:	80 e8       	ldi	r24, 0x80	; 128
    5e28:	e0 ea       	ldi	r30, 0xA0	; 160
    5e2a:	f6 e0       	ldi	r31, 0x06	; 6
    5e2c:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5e2e:	86 ea       	ldi	r24, 0xA6	; 166
    5e30:	e0 ec       	ldi	r30, 0xC0	; 192
    5e32:	f9 e0       	ldi	r31, 0x09	; 9
    5e34:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5e36:	80 91 c2 09 	lds	r24, 0x09C2
    5e3a:	87 ff       	sbrs	r24, 7
    5e3c:	fc cf       	rjmp	.-8      	; 0x5e36 <display_init+0xd4>
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5e3e:	80 e8       	ldi	r24, 0x80	; 128
    5e40:	e0 ea       	ldi	r30, 0xA0	; 160
    5e42:	f6 e0       	ldi	r31, 0x06	; 6
    5e44:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5e46:	8f e2       	ldi	r24, 0x2F	; 47
    5e48:	e0 ec       	ldi	r30, 0xC0	; 192
    5e4a:	f9 e0       	ldi	r31, 0x09	; 9
    5e4c:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5e4e:	80 91 c2 09 	lds	r24, 0x09C2
    5e52:	87 ff       	sbrs	r24, 7
    5e54:	fc cf       	rjmp	.-8      	; 0x5e4e <display_init+0xec>
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5e56:	80 e8       	ldi	r24, 0x80	; 128
    5e58:	e0 ea       	ldi	r30, 0xA0	; 160
    5e5a:	f6 e0       	ldi	r31, 0x06	; 6
    5e5c:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5e5e:	87 e2       	ldi	r24, 0x27	; 39
    5e60:	e0 ec       	ldi	r30, 0xC0	; 192
    5e62:	f9 e0       	ldi	r31, 0x09	; 9
    5e64:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5e66:	80 91 c2 09 	lds	r24, 0x09C2
    5e6a:	87 ff       	sbrs	r24, 7
    5e6c:	fc cf       	rjmp	.-8      	; 0x5e66 <display_init+0x104>
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5e6e:	80 e8       	ldi	r24, 0x80	; 128
    5e70:	e0 ea       	ldi	r30, 0xA0	; 160
    5e72:	f6 e0       	ldi	r31, 0x06	; 6
    5e74:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5e76:	8a ef       	ldi	r24, 0xFA	; 250
    5e78:	e0 ec       	ldi	r30, 0xC0	; 192
    5e7a:	f9 e0       	ldi	r31, 0x09	; 9
    5e7c:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5e7e:	80 91 c2 09 	lds	r24, 0x09C2
    5e82:	87 ff       	sbrs	r24, 7
    5e84:	fc cf       	rjmp	.-8      	; 0x5e7e <display_init+0x11c>
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5e86:	80 e8       	ldi	r24, 0x80	; 128
    5e88:	e0 ea       	ldi	r30, 0xA0	; 160
    5e8a:	f6 e0       	ldi	r31, 0x06	; 6
    5e8c:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5e8e:	80 e9       	ldi	r24, 0x90	; 144
    5e90:	e0 ec       	ldi	r30, 0xC0	; 192
    5e92:	f9 e0       	ldi	r31, 0x09	; 9
    5e94:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5e96:	80 91 c2 09 	lds	r24, 0x09C2
    5e9a:	87 ff       	sbrs	r24, 7
    5e9c:	fc cf       	rjmp	.-8      	; 0x5e96 <display_init+0x134>
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5e9e:	80 e8       	ldi	r24, 0x80	; 128
    5ea0:	e0 ea       	ldi	r30, 0xA0	; 160
    5ea2:	f6 e0       	ldi	r31, 0x06	; 6
    5ea4:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5ea6:	80 e4       	ldi	r24, 0x40	; 64
    5ea8:	e0 ec       	ldi	r30, 0xC0	; 192
    5eaa:	f9 e0       	ldi	r31, 0x09	; 9
    5eac:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5eae:	80 91 c2 09 	lds	r24, 0x09C2
    5eb2:	87 ff       	sbrs	r24, 7
    5eb4:	fc cf       	rjmp	.-8      	; 0x5eae <display_init+0x14c>
    5eb6:	8c ed       	ldi	r24, 0xDC	; 220
    5eb8:	95 e0       	ldi	r25, 0x05	; 5
    5eba:	20 e7       	ldi	r18, 0x70	; 112
    5ebc:	31 e0       	ldi	r19, 0x01	; 1
    5ebe:	f9 01       	movw	r30, r18
    5ec0:	31 97       	sbiw	r30, 0x01	; 1
    5ec2:	f1 f7       	brne	.-4      	; 0x5ec0 <display_init+0x15e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ec4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ec6:	d9 f7       	brne	.-10     	; 0x5ebe <display_init+0x15c>
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5ec8:	80 e8       	ldi	r24, 0x80	; 128
    5eca:	e0 ea       	ldi	r30, 0xA0	; 160
    5ecc:	f6 e0       	ldi	r31, 0x06	; 6
    5ece:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5ed0:	82 ea       	ldi	r24, 0xA2	; 162
    5ed2:	e0 ec       	ldi	r30, 0xC0	; 192
    5ed4:	f9 e0       	ldi	r31, 0x09	; 9
    5ed6:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5ed8:	80 91 c2 09 	lds	r24, 0x09C2
    5edc:	87 ff       	sbrs	r24, 7
    5ede:	fc cf       	rjmp	.-8      	; 0x5ed8 <display_init+0x176>
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5ee0:	80 e8       	ldi	r24, 0x80	; 128
    5ee2:	e0 ea       	ldi	r30, 0xA0	; 160
    5ee4:	f6 e0       	ldi	r31, 0x06	; 6
    5ee6:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5ee8:	81 e8       	ldi	r24, 0x81	; 129
    5eea:	e0 ec       	ldi	r30, 0xC0	; 192
    5eec:	f9 e0       	ldi	r31, 0x09	; 9
    5eee:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5ef0:	80 91 c2 09 	lds	r24, 0x09C2
    5ef4:	87 ff       	sbrs	r24, 7
    5ef6:	fc cf       	rjmp	.-8      	; 0x5ef0 <display_init+0x18e>
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5ef8:	80 e8       	ldi	r24, 0x80	; 128
    5efa:	e0 ea       	ldi	r30, 0xA0	; 160
    5efc:	f6 e0       	ldi	r31, 0x06	; 6
    5efe:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5f00:	88 e0       	ldi	r24, 0x08	; 8
    5f02:	e0 ec       	ldi	r30, 0xC0	; 192
    5f04:	f9 e0       	ldi	r31, 0x09	; 9
    5f06:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5f08:	80 91 c2 09 	lds	r24, 0x09C2
    5f0c:	87 ff       	sbrs	r24, 7
    5f0e:	fc cf       	rjmp	.-8      	; 0x5f08 <display_init+0x1a6>
	}
}

void display_sendCommand(uint8_t dataByte) {
	//Write 0 to CD
	Display_CDPort.OUTCLR = Display_CD_bm;
    5f10:	80 e8       	ldi	r24, 0x80	; 128
    5f12:	e0 ea       	ldi	r30, 0xA0	; 160
    5f14:	f6 e0       	ldi	r31, 0x06	; 6
    5f16:	86 83       	std	Z+6, r24	; 0x06
	Display_SPI.DATA = dataByte;
    5f18:	8f ea       	ldi	r24, 0xAF	; 175
    5f1a:	e0 ec       	ldi	r30, 0xC0	; 192
    5f1c:	f9 e0       	ldi	r31, 0x09	; 9
    5f1e:	83 83       	std	Z+3, r24	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    5f20:	80 91 c2 09 	lds	r24, 0x09C2
    5f24:	87 ff       	sbrs	r24, 7
    5f26:	fc cf       	rjmp	.-8      	; 0x5f20 <display_init+0x1be>
	display_sendCommand(0x81);	//	set electronic volume
	display_sendCommand(0x08);	//	PM = 8

	display_sendCommand(0xAF);	//	enable display

	display_clearScreen();
    5f28:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <display_clearScreen>
	
	Backlight_Port.DIRSET = 1 << Backlight_Pin;
    5f2c:	81 e0       	ldi	r24, 0x01	; 1
    5f2e:	e0 ea       	ldi	r30, 0xA0	; 160
    5f30:	f6 e0       	ldi	r31, 0x06	; 6
    5f32:	81 83       	std	Z+1, r24	; 0x01

}
    5f34:	df 91       	pop	r29
    5f36:	cf 91       	pop	r28
    5f38:	08 95       	ret

00005f3a <display_putString>:
		}
	}
}


void display_putString(char* text, uint8_t page, uint8_t column, uint8_t* fontTable) {
    5f3a:	2f 92       	push	r2
    5f3c:	3f 92       	push	r3
    5f3e:	4f 92       	push	r4
    5f40:	5f 92       	push	r5
    5f42:	6f 92       	push	r6
    5f44:	7f 92       	push	r7
    5f46:	8f 92       	push	r8
    5f48:	9f 92       	push	r9
    5f4a:	af 92       	push	r10
    5f4c:	bf 92       	push	r11
    5f4e:	cf 92       	push	r12
    5f50:	df 92       	push	r13
    5f52:	ef 92       	push	r14
    5f54:	ff 92       	push	r15
    5f56:	0f 93       	push	r16
    5f58:	1f 93       	push	r17
    5f5a:	df 93       	push	r29
    5f5c:	cf 93       	push	r28
    5f5e:	cd b7       	in	r28, 0x3d	; 61
    5f60:	de b7       	in	r29, 0x3e	; 62
    5f62:	2b 97       	sbiw	r28, 0x0b	; 11
    5f64:	cd bf       	out	0x3d, r28	; 61
    5f66:	de bf       	out	0x3e, r29	; 62
    5f68:	8f 83       	std	Y+7, r24	; 0x07
    5f6a:	98 87       	std	Y+8, r25	; 0x08
    5f6c:	46 2e       	mov	r4, r22
    5f6e:	49 87       	std	Y+9, r20	; 0x09
    5f70:	69 01       	movw	r12, r18
 uint8_t i,j,k, offset;
 uint8_t fontHeight = fontTable[FONT_HEIGHT];
    5f72:	d9 01       	movw	r26, r18
    5f74:	13 96       	adiw	r26, 0x03	; 3
    5f76:	2c 90       	ld	r2, X
    5f78:	13 97       	sbiw	r26, 0x03	; 3
 uint8_t firstChar = fontTable[FONT_FIRST_CHAR];
    5f7a:	14 96       	adiw	r26, 0x04	; 4
    5f7c:	bc 91       	ld	r27, X
    5f7e:	ba 83       	std	Y+2, r27	; 0x02
 uint8_t charCount = fontTable[FONT_CHAR_COUNT];
    5f80:	f9 01       	movw	r30, r18
    5f82:	25 81       	ldd	r18, Z+5	; 0x05
 uint8_t bytes = (fontHeight+7)/8;
    5f84:	82 2c       	mov	r8, r2
    5f86:	99 24       	eor	r9, r9
    5f88:	c4 01       	movw	r24, r8
    5f8a:	07 96       	adiw	r24, 0x07	; 7
    5f8c:	f3 e0       	ldi	r31, 0x03	; 3
    5f8e:	95 95       	asr	r25
    5f90:	87 95       	ror	r24
    5f92:	fa 95       	dec	r31
    5f94:	e1 f7       	brne	.-8      	; 0x5f8e <display_putString+0x54>
    5f96:	89 83       	std	Y+1, r24	; 0x01
    5f98:	33 24       	eor	r3, r3
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    5f9a:	62 2e       	mov	r6, r18
    5f9c:	77 24       	eor	r7, r7
    5f9e:	86 e0       	ldi	r24, 0x06	; 6
    5fa0:	90 e0       	ldi	r25, 0x00	; 0
    5fa2:	68 0e       	add	r6, r24
    5fa4:	79 1e       	adc	r7, r25
    5fa6:	7f c0       	rjmp	.+254    	; 0x60a6 <__stack+0xa7>
 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
 		ch = text[j] - firstChar;
    5fa8:	5e 2f       	mov	r21, r30
    5faa:	9a 81       	ldd	r25, Y+2	; 0x02
    5fac:	59 1b       	sub	r21, r25

 
  		charIndex = 0;
 		if (fontTable[FONT_LENGTH] == 0) {
    5fae:	d6 01       	movw	r26, r12
    5fb0:	8c 91       	ld	r24, X
    5fb2:	88 23       	and	r24, r24
    5fb4:	39 f4       	brne	.+14     	; 0x5fc4 <display_putString+0x8a>
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
    5fb6:	12 96       	adiw	r26, 0x02	; 2
    5fb8:	bc 90       	ld	r11, X
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
    5fba:	5b 9d       	mul	r21, r11
    5fbc:	f0 01       	movw	r30, r0
    5fbe:	11 24       	eor	r1, r1
    5fc0:	36 96       	adiw	r30, 0x06	; 6
    5fc2:	21 c0       	rjmp	.+66     	; 0x6006 <__stack+0x7>
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
    5fc4:	f6 01       	movw	r30, r12
    5fc6:	e5 0f       	add	r30, r21
    5fc8:	f1 1d       	adc	r31, r1
    5fca:	b6 80       	ldd	r11, Z+6	; 0x06
    5fcc:	f6 01       	movw	r30, r12
    5fce:	40 e0       	ldi	r20, 0x00	; 0
    5fd0:	20 e0       	ldi	r18, 0x00	; 0
    5fd2:	30 e0       	ldi	r19, 0x00	; 0
    5fd4:	08 c0       	rjmp	.+16     	; 0x5fe6 <display_putString+0xac>
 			for (k = 0; k<ch; k++) {
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
    5fd6:	85 81       	ldd	r24, Z+5	; 0x05
    5fd8:	b9 81       	ldd	r27, Y+1	; 0x01
    5fda:	b8 9f       	mul	r27, r24
    5fdc:	c0 01       	movw	r24, r0
    5fde:	11 24       	eor	r1, r1
    5fe0:	28 0f       	add	r18, r24
    5fe2:	39 1f       	adc	r19, r25
 		if (fontTable[FONT_LENGTH] == 0) {
 			charWidth = fontTable[FONT_WIDTH]; //Fixed width font
 			charIndex = ch * charWidth + FONT_WIDTH_TABLE;
 		} else {
 			charWidth = fontTable[ch+FONT_WIDTH_TABLE];
 			for (k = 0; k<ch; k++) {
    5fe4:	4f 5f       	subi	r20, 0xFF	; 255
    5fe6:	31 96       	adiw	r30, 0x01	; 1
    5fe8:	45 17       	cp	r20, r21
    5fea:	a8 f3       	brcs	.-22     	; 0x5fd6 <display_putString+0x9c>
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
    5fec:	8b 2d       	mov	r24, r11
    5fee:	90 e0       	ldi	r25, 0x00	; 0
    5ff0:	8e 9d       	mul	r24, r14
    5ff2:	f0 01       	movw	r30, r0
    5ff4:	8f 9d       	mul	r24, r15
    5ff6:	f0 0d       	add	r31, r0
    5ff8:	9e 9d       	mul	r25, r14
    5ffa:	f0 0d       	add	r31, r0
    5ffc:	11 24       	eor	r1, r1
    5ffe:	e6 0d       	add	r30, r6
    6000:	f7 1d       	adc	r31, r7
    6002:	e2 0f       	add	r30, r18
    6004:	f3 1f       	adc	r31, r19
    6006:	c6 01       	movw	r24, r12
    6008:	8e 0f       	add	r24, r30
    600a:	9f 1f       	adc	r25, r31
    600c:	8a 87       	std	Y+10, r24	; 0x0a
    600e:	9b 87       	std	Y+11, r25	; 0x0b
    6010:	00 e0       	ldi	r16, 0x00	; 0
    6012:	26 c0       	rjmp	.+76     	; 0x6060 <__stack+0x61>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
    6014:	aa 85       	ldd	r26, Y+10	; 0x0a
    6016:	bb 85       	ldd	r27, Y+11	; 0x0b
    6018:	1c 91       	ld	r17, X
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    601a:	b8 e0       	ldi	r27, 0x08	; 8
    601c:	b2 15       	cp	r27, r2
    601e:	70 f4       	brcc	.+28     	; 0x603c <__stack+0x3d>
    6020:	ed 81       	ldd	r30, Y+5	; 0x05
    6022:	fe 81       	ldd	r31, Y+6	; 0x06
    6024:	8e 16       	cp	r8, r30
    6026:	9f 06       	cpc	r9, r31
    6028:	4c f4       	brge	.+18     	; 0x603c <__stack+0x3d>
 				data >>= (i+1)*8-fontHeight;
    602a:	81 2f       	mov	r24, r17
    602c:	90 e0       	ldi	r25, 0x00	; 0
    602e:	0b 80       	ldd	r0, Y+3	; 0x03
    6030:	02 c0       	rjmp	.+4      	; 0x6036 <__stack+0x37>
    6032:	95 95       	asr	r25
    6034:	87 95       	ror	r24
    6036:	0a 94       	dec	r0
    6038:	e2 f7       	brpl	.-8      	; 0x6032 <__stack+0x33>
    603a:	18 2f       	mov	r17, r24
 			}
 			display_setCursor(page+i,offset);
    603c:	84 2d       	mov	r24, r4
    603e:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_setCursor>
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    6042:	f0 e8       	ldi	r31, 0x80	; 128
    6044:	f0 93 a5 06 	sts	0x06A5, r31
	Display_SPI.DATA = dataByte;
    6048:	10 93 c3 09 	sts	0x09C3, r17
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    604c:	80 91 c2 09 	lds	r24, 0x09C2
    6050:	87 ff       	sbrs	r24, 7
    6052:	fc cf       	rjmp	.-8      	; 0x604c <__stack+0x4d>
 				charIndex += fontTable[k+FONT_WIDTH_TABLE]*bytes;
 			}
 			charIndex += charCount + FONT_WIDTH_TABLE + i*charWidth;
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
    6054:	0f 5f       	subi	r16, 0xFF	; 255
    6056:	8a 85       	ldd	r24, Y+10	; 0x0a
    6058:	9b 85       	ldd	r25, Y+11	; 0x0b
    605a:	01 96       	adiw	r24, 0x01	; 1
    605c:	8a 87       	std	Y+10, r24	; 0x0a
    605e:	9b 87       	std	Y+11, r25	; 0x0b
    6060:	60 2f       	mov	r22, r16
    6062:	6a 0d       	add	r22, r10
    6064:	0b 15       	cp	r16, r11
    6066:	b0 f2       	brcs	.-84     	; 0x6014 <__stack+0x15>
    6068:	1b 2d       	mov	r17, r11
    606a:	1a 0d       	add	r17, r10
 			//displayBuffer[page+i][offset] = data;
 			offset++;
		}

		//Add a 1px gap between characters
 		if(offset != 101){
    606c:	15 36       	cpi	r17, 0x65	; 101
    606e:	71 f0       	breq	.+28     	; 0x608c <__stack+0x8d>
 			display_setCursor(page+i,offset+1);
    6070:	61 2f       	mov	r22, r17
    6072:	6f 5f       	subi	r22, 0xFF	; 255
    6074:	84 2d       	mov	r24, r4
    6076:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_setCursor>
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    607a:	90 e8       	ldi	r25, 0x80	; 128
    607c:	90 93 a5 06 	sts	0x06A5, r25
	Display_SPI.DATA = dataByte;
    6080:	10 92 c3 09 	sts	0x09C3, r1
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    6084:	80 91 c2 09 	lds	r24, 0x09C2
    6088:	87 ff       	sbrs	r24, 7
    608a:	fc cf       	rjmp	.-8      	; 0x6084 <__stack+0x85>
 		if(offset != 101){
 			display_setCursor(page+i,offset+1);
 			display_sendData(0x00);
 			//displayBuffer[page+i][offset+1] = 0x00;
 		}
		offset++;
    608c:	a1 2e       	mov	r10, r17
    608e:	a3 94       	inc	r10
 	
 		j++;
    6090:	53 94       	inc	r5

 while (i*8 < fontHeight) {
	j = 0;
	offset = column;
 	//display_setCursor(page+i, column);
 	while (text[j] != '\0') {
    6092:	ef 81       	ldd	r30, Y+7	; 0x07
    6094:	f8 85       	ldd	r31, Y+8	; 0x08
    6096:	e5 0d       	add	r30, r5
    6098:	f1 1d       	adc	r31, r1
    609a:	e0 81       	ld	r30, Z
    609c:	ee 23       	and	r30, r30
    609e:	09 f0       	breq	.+2      	; 0x60a2 <__stack+0xa3>
    60a0:	83 cf       	rjmp	.-250    	; 0x5fa8 <display_putString+0x6e>
 		}
		offset++;
 	
 		j++;
 	} 	
 	i++;
    60a2:	33 94       	inc	r3
    60a4:	43 94       	inc	r4
 uint8_t charWidth, ch, data;


 i = 0;

 while (i*8 < fontHeight) {
    60a6:	e3 2c       	mov	r14, r3
    60a8:	ff 24       	eor	r15, r15
    60aa:	c7 01       	movw	r24, r14
    60ac:	e3 e0       	ldi	r30, 0x03	; 3
    60ae:	88 0f       	add	r24, r24
    60b0:	99 1f       	adc	r25, r25
    60b2:	ea 95       	dec	r30
    60b4:	e1 f7       	brne	.-8      	; 0x60ae <__stack+0xaf>
    60b6:	88 15       	cp	r24, r8
    60b8:	99 05       	cpc	r25, r9
    60ba:	ac f4       	brge	.+42     	; 0x60e6 <__stack+0xe7>
 		}
  		//Draw the appropriate portion of the character
 		for (k = 0; k < charWidth; k++) {
 			data = fontTable[charIndex+k];
 			
 			if (fontHeight > 8 && fontHeight < (i+1)*8) {
    60bc:	08 94       	sec
    60be:	e1 1c       	adc	r14, r1
    60c0:	f1 1c       	adc	r15, r1
    60c2:	d7 01       	movw	r26, r14
    60c4:	73 e0       	ldi	r23, 0x03	; 3
    60c6:	aa 0f       	add	r26, r26
    60c8:	bb 1f       	adc	r27, r27
    60ca:	7a 95       	dec	r23
    60cc:	e1 f7       	brne	.-8      	; 0x60c6 <__stack+0xc7>
    60ce:	ad 83       	std	Y+5, r26	; 0x05
    60d0:	be 83       	std	Y+6, r27	; 0x06
    60d2:	08 94       	sec
    60d4:	e1 08       	sbc	r14, r1
    60d6:	f1 08       	sbc	r15, r1
 				data >>= (i+1)*8-fontHeight;
    60d8:	a8 19       	sub	r26, r8
    60da:	b9 09       	sbc	r27, r9
    60dc:	ab 83       	std	Y+3, r26	; 0x03
    60de:	bc 83       	std	Y+4, r27	; 0x04
    60e0:	a9 84       	ldd	r10, Y+9	; 0x09
    60e2:	55 24       	eor	r5, r5
    60e4:	d6 cf       	rjmp	.-84     	; 0x6092 <__stack+0x93>
 		j++;
 	} 	
 	i++;
 }

}
    60e6:	2b 96       	adiw	r28, 0x0b	; 11
    60e8:	cd bf       	out	0x3d, r28	; 61
    60ea:	de bf       	out	0x3e, r29	; 62
    60ec:	cf 91       	pop	r28
    60ee:	df 91       	pop	r29
    60f0:	1f 91       	pop	r17
    60f2:	0f 91       	pop	r16
    60f4:	ff 90       	pop	r15
    60f6:	ef 90       	pop	r14
    60f8:	df 90       	pop	r13
    60fa:	cf 90       	pop	r12
    60fc:	bf 90       	pop	r11
    60fe:	af 90       	pop	r10
    6100:	9f 90       	pop	r9
    6102:	8f 90       	pop	r8
    6104:	7f 90       	pop	r7
    6106:	6f 90       	pop	r6
    6108:	5f 90       	pop	r5
    610a:	4f 90       	pop	r4
    610c:	3f 90       	pop	r3
    610e:	2f 90       	pop	r2
    6110:	08 95       	ret

00006112 <Light_readByte>:
uint8_t Light_readByte(uint8_t location){
	uint8_t tmp;


	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    6112:	30 91 fe 4f 	lds	r19, 0x4FFE
    6116:	93 2f       	mov	r25, r19
    6118:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | location;
    611a:	28 2f       	mov	r18, r24
    611c:	20 68       	ori	r18, 0x80	; 128
    611e:	20 93 09 55 	sts	0x5509, r18


	LightPort.MASTER.ADDR = writeAddress;
    6122:	e0 ea       	ldi	r30, 0xA0	; 160
    6124:	f4 e0       	ldi	r31, 0x04	; 4
    6126:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6128:	80 91 a4 04 	lds	r24, 0x04A4
    612c:	86 ff       	sbrs	r24, 6
    612e:	fc cf       	rjmp	.-8      	; 0x6128 <Light_readByte+0x16>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    6130:	e0 ea       	ldi	r30, 0xA0	; 160
    6132:	f4 e0       	ldi	r31, 0x04	; 4
    6134:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6136:	80 91 a4 04 	lds	r24, 0x04A4
    613a:	86 ff       	sbrs	r24, 6
    613c:	fc cf       	rjmp	.-8      	; 0x6136 <Light_readByte+0x24>
				//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    613e:	83 2f       	mov	r24, r19
    6140:	81 60       	ori	r24, 0x01	; 1
    6142:	80 93 f0 37 	sts	0x37F0, r24
	LightPort.MASTER.ADDR = writeAddress;
    6146:	e0 ea       	ldi	r30, 0xA0	; 160
    6148:	f4 e0       	ldi	r31, 0x04	; 4
    614a:	86 83       	std	Z+6, r24	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    614c:	80 91 a4 04 	lds	r24, 0x04A4
    6150:	87 ff       	sbrs	r24, 7
    6152:	fc cf       	rjmp	.-8      	; 0x614c <Light_readByte+0x3a>
				//Wait for Read flag to come on
	}

	tmp = LightPort.MASTER.DATA;
    6154:	80 91 a7 04 	lds	r24, 0x04A7

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    6158:	97 e0       	ldi	r25, 0x07	; 7
    615a:	e0 ea       	ldi	r30, 0xA0	; 160
    615c:	f4 e0       	ldi	r31, 0x04	; 4
    615e:	93 83       	std	Z+3, r25	; 0x03

	return tmp;
}
    6160:	08 95       	ret

00006162 <Light_readColors>:

void Light_readColors(void){

	while(Light_readByte(Control) && ADC_Valid_bm == 0);
    6162:	80 e0       	ldi	r24, 0x00	; 0
    6164:	0e 94 89 30 	call	0x6112	; 0x6112 <Light_readByte>

	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    6168:	20 91 fe 4f 	lds	r18, 0x4FFE
    616c:	92 2f       	mov	r25, r18
    616e:	9e 7f       	andi	r25, 0xFE	; 254
	commandCode = 0b10000000 | 0x10;
    6170:	80 e9       	ldi	r24, 0x90	; 144
    6172:	80 93 09 55 	sts	0x5509, r24

	LightPort.MASTER.ADDR = writeAddress;
    6176:	e0 ea       	ldi	r30, 0xA0	; 160
    6178:	f4 e0       	ldi	r31, 0x04	; 4
    617a:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    617c:	80 91 a4 04 	lds	r24, 0x04A4
    6180:	86 ff       	sbrs	r24, 6
    6182:	fc cf       	rjmp	.-8      	; 0x617c <Light_readColors+0x1a>
					//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    6184:	80 e9       	ldi	r24, 0x90	; 144
    6186:	e0 ea       	ldi	r30, 0xA0	; 160
    6188:	f4 e0       	ldi	r31, 0x04	; 4
    618a:	87 83       	std	Z+7, r24	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    618c:	80 91 a4 04 	lds	r24, 0x04A4
    6190:	86 ff       	sbrs	r24, 6
    6192:	fc cf       	rjmp	.-8      	; 0x618c <Light_readColors+0x2a>
					//Wait for write flag to turn on
	}

	writeAddress = deviceAddress | 0x01;	// start with address & read
    6194:	82 2f       	mov	r24, r18
    6196:	81 60       	ori	r24, 0x01	; 1
    6198:	80 93 f0 37 	sts	0x37F0, r24
	LightPort.MASTER.ADDR = writeAddress;
    619c:	e0 ea       	ldi	r30, 0xA0	; 160
    619e:	f4 e0       	ldi	r31, 0x04	; 4
    61a0:	86 83       	std	Z+6, r24	; 0x06
    61a2:	ed e4       	ldi	r30, 0x4D	; 77
    61a4:	f8 e3       	ldi	r31, 0x38	; 56
    61a6:	90 e0       	ldi	r25, 0x00	; 0


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    61a8:	a0 ea       	ldi	r26, 0xA0	; 160
    61aa:	b4 e0       	ldi	r27, 0x04	; 4
		}

		colors8[i] = LightPort.MASTER.DATA;
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    61ac:	22 e0       	ldi	r18, 0x02	; 2
	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
		while (!(LightPort.MASTER.STATUS & TWI_MASTER_RIF_bm)) {
    61ae:	80 91 a4 04 	lds	r24, 0x04A4
    61b2:	87 ff       	sbrs	r24, 7
    61b4:	fc cf       	rjmp	.-8      	; 0x61ae <Light_readColors+0x4c>
				//Wait for Read flag to come on
		}

		colors8[i] = LightPort.MASTER.DATA;
    61b6:	80 91 a7 04 	lds	r24, 0x04A7
    61ba:	80 83       	st	Z, r24
		//If more bytes to read, send ACK and start byte read
		if(i < 7){
    61bc:	97 30       	cpi	r25, 0x07	; 7
    61be:	19 f0       	breq	.+6      	; 0x61c6 <Light_readColors+0x64>
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    61c0:	13 96       	adiw	r26, 0x03	; 3
    61c2:	2c 93       	st	X, r18
    61c4:	13 97       	sbiw	r26, 0x03	; 3

	writeAddress = deviceAddress | 0x01;	// start with address & read
	LightPort.MASTER.ADDR = writeAddress;


	for(uint8_t i = 0; i < 8; i++){
    61c6:	9f 5f       	subi	r25, 0xFF	; 255
    61c8:	31 96       	adiw	r30, 0x01	; 1
    61ca:	98 30       	cpi	r25, 0x08	; 8
    61cc:	81 f7       	brne	.-32     	; 0x61ae <Light_readColors+0x4c>
		if(i < 7){
			LightPort.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		}
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    61ce:	87 e0       	ldi	r24, 0x07	; 7
    61d0:	e0 ea       	ldi	r30, 0xA0	; 160
    61d2:	f4 e0       	ldi	r31, 0x04	; 4
    61d4:	83 83       	std	Z+3, r24	; 0x03

	colors[green] = colors8[1]*256 + colors8[0];
    61d6:	90 91 4e 38 	lds	r25, 0x384E
    61da:	80 e0       	ldi	r24, 0x00	; 0
    61dc:	20 91 4d 38 	lds	r18, 0x384D
    61e0:	82 0f       	add	r24, r18
    61e2:	91 1d       	adc	r25, r1
    61e4:	80 93 ea 35 	sts	0x35EA, r24
    61e8:	90 93 eb 35 	sts	0x35EB, r25
	colors[red]   = colors8[3]*256 + colors8[2];
    61ec:	90 91 50 38 	lds	r25, 0x3850
    61f0:	80 e0       	ldi	r24, 0x00	; 0
    61f2:	20 91 4f 38 	lds	r18, 0x384F
    61f6:	82 0f       	add	r24, r18
    61f8:	91 1d       	adc	r25, r1
    61fa:	80 93 ec 35 	sts	0x35EC, r24
    61fe:	90 93 ed 35 	sts	0x35ED, r25
	colors[blue]  = colors8[5]*256 + colors8[4];
    6202:	90 91 52 38 	lds	r25, 0x3852
    6206:	80 e0       	ldi	r24, 0x00	; 0
    6208:	20 91 51 38 	lds	r18, 0x3851
    620c:	82 0f       	add	r24, r18
    620e:	91 1d       	adc	r25, r1
    6210:	80 93 ee 35 	sts	0x35EE, r24
    6214:	90 93 ef 35 	sts	0x35EF, r25
	colors[clear] = colors8[7]*256 + colors8[6];
    6218:	90 91 54 38 	lds	r25, 0x3854
    621c:	80 e0       	ldi	r24, 0x00	; 0
    621e:	20 91 53 38 	lds	r18, 0x3853
    6222:	82 0f       	add	r24, r18
    6224:	91 1d       	adc	r25, r1
    6226:	80 93 f0 35 	sts	0x35F0, r24
    622a:	90 93 f1 35 	sts	0x35F1, r25
}
    622e:	08 95       	ret

00006230 <Light_returnColor>:

uint16_t Light_returnColor(uint8_t color){
    6230:	e8 2f       	mov	r30, r24
    6232:	f0 e0       	ldi	r31, 0x00	; 0
    6234:	ee 0f       	add	r30, r30
    6236:	ff 1f       	adc	r31, r31
    6238:	e6 51       	subi	r30, 0x16	; 22
    623a:	fa 4c       	sbci	r31, 0xCA	; 202
	return colors[color];
}
    623c:	80 81       	ld	r24, Z
    623e:	91 81       	ldd	r25, Z+1	; 0x01
    6240:	08 95       	ret

00006242 <Light_writeByte>:

void Light_writeByte(uint8_t location, uint8_t toSend){
	//Send start condition, and device address + write
	writeAddress = deviceAddress & ~0x01;
    6242:	90 91 fe 4f 	lds	r25, 0x4FFE
    6246:	9e 7f       	andi	r25, 0xFE	; 254
    6248:	90 93 f0 37 	sts	0x37F0, r25
	commandCode = 0b10000000 | location;
    624c:	28 2f       	mov	r18, r24
    624e:	20 68       	ori	r18, 0x80	; 128
    6250:	20 93 09 55 	sts	0x5509, r18

	LightPort.MASTER.ADDR = writeAddress;
    6254:	e0 ea       	ldi	r30, 0xA0	; 160
    6256:	f4 e0       	ldi	r31, 0x04	; 4
    6258:	96 83       	std	Z+6, r25	; 0x06

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    625a:	80 91 a4 04 	lds	r24, 0x04A4
    625e:	86 ff       	sbrs	r24, 6
    6260:	fc cf       	rjmp	.-8      	; 0x625a <Light_writeByte+0x18>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = commandCode;
    6262:	e0 ea       	ldi	r30, 0xA0	; 160
    6264:	f4 e0       	ldi	r31, 0x04	; 4
    6266:	27 83       	std	Z+7, r18	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6268:	80 91 a4 04 	lds	r24, 0x04A4
    626c:	86 ff       	sbrs	r24, 6
    626e:	fc cf       	rjmp	.-8      	; 0x6268 <Light_writeByte+0x26>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.DATA = toSend;
    6270:	e0 ea       	ldi	r30, 0xA0	; 160
    6272:	f4 e0       	ldi	r31, 0x04	; 4
    6274:	67 83       	std	Z+7, r22	; 0x07

	while (!(LightPort.MASTER.STATUS & TWI_MASTER_WIF_bm)) {
    6276:	80 91 a4 04 	lds	r24, 0x04A4
    627a:	86 ff       	sbrs	r24, 6
    627c:	fc cf       	rjmp	.-8      	; 0x6276 <Light_writeByte+0x34>
				//Wait for write flag to turn on
	}

	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;	// stop
    627e:	87 e0       	ldi	r24, 0x07	; 7
    6280:	e0 ea       	ldi	r30, 0xA0	; 160
    6282:	f4 e0       	ldi	r31, 0x04	; 4
    6284:	83 83       	std	Z+3, r24	; 0x03

}
    6286:	08 95       	ret

00006288 <Light_setGain>:


void Light_setGain(void){
	Light_writeByte(Control, Power_bm);
    6288:	80 e0       	ldi	r24, 0x00	; 0
    628a:	61 e0       	ldi	r22, 0x01	; 1
    628c:	0e 94 21 31 	call	0x6242	; 0x6242 <Light_writeByte>
	Light_writeByte(Timing, (integrationTime[gainSelector] | Integ_Mode_Auto_bm));
    6290:	80 91 1a 2d 	lds	r24, 0x2D1A
    6294:	e4 e7       	ldi	r30, 0x74	; 116
    6296:	fa e2       	ldi	r31, 0x2A	; 42
    6298:	e8 0f       	add	r30, r24
    629a:	f1 1d       	adc	r31, r1
    629c:	81 e0       	ldi	r24, 0x01	; 1
    629e:	60 81       	ld	r22, Z
    62a0:	0e 94 21 31 	call	0x6242	; 0x6242 <Light_writeByte>
	Light_writeByte(Gain, (gainSetting[gainSelector]));
    62a4:	80 91 1a 2d 	lds	r24, 0x2D1A
    62a8:	ed e7       	ldi	r30, 0x7D	; 125
    62aa:	fa e2       	ldi	r31, 0x2A	; 42
    62ac:	e8 0f       	add	r30, r24
    62ae:	f1 1d       	adc	r31, r1
    62b0:	87 e0       	ldi	r24, 0x07	; 7
    62b2:	60 81       	ld	r22, Z
    62b4:	0e 94 21 31 	call	0x6242	; 0x6242 <Light_writeByte>
	Light_writeByte(Control, (ADC_En_bm | Power_bm));
    62b8:	80 e0       	ldi	r24, 0x00	; 0
    62ba:	63 e0       	ldi	r22, 0x03	; 3
    62bc:	0e 94 21 31 	call	0x6242	; 0x6242 <Light_writeByte>
}
    62c0:	08 95       	ret

000062c2 <Light_Init>:
uint16_t	colors[4];
uint8_t		colors8[8];


void Light_Init(uint8_t address){
	deviceAddress = address;
    62c2:	80 93 fe 4f 	sts	0x4FFE, r24

	LightPort.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    62c6:	e0 ea       	ldi	r30, 0xA0	; 160
    62c8:	f4 e0       	ldi	r31, 0x04	; 4
    62ca:	88 e0       	ldi	r24, 0x08	; 8
    62cc:	81 83       	std	Z+1, r24	; 0x01

	//Set Master Read Acknowledge Action to ACK
	LightPort.MASTER.CTRLC = TWI_MASTER_ACKACT_bm;
    62ce:	84 e0       	ldi	r24, 0x04	; 4
    62d0:	83 83       	std	Z+3, r24	; 0x03

	//Want 400 kHz I2C signal
	//14.7456Mhz/(2*400kHz) - 5 = 13
	LightPort.MASTER.BAUD = 13;
    62d2:	8d e0       	ldi	r24, 0x0D	; 13
    62d4:	85 83       	std	Z+5, r24	; 0x05

	LightPort.MASTER.STATUS =TWI_MASTER_BUSSTATE_IDLE_gc;
    62d6:	81 e0       	ldi	r24, 0x01	; 1
    62d8:	84 83       	std	Z+4, r24	; 0x04

	gainSelector = 0;
    62da:	10 92 1a 2d 	sts	0x2D1A, r1
	Light_setGain();
    62de:	0e 94 44 31 	call	0x6288	; 0x6288 <Light_setGain>
}
    62e2:	08 95       	ret

000062e4 <Button_Init>:
//				Joshua Schapiro
//___________________________________________

#include "button.h"

void Button_Init(uint8_t button, bool enableInt, uint8_t edge, uint8_t intNumber,uint8_t intLevel){
    62e4:	0f 93       	push	r16
	Button_Port.DIRCLR = (1 << button);
    62e6:	e1 e0       	ldi	r30, 0x01	; 1
    62e8:	f0 e0       	ldi	r31, 0x00	; 0
    62ea:	02 c0       	rjmp	.+4      	; 0x62f0 <Button_Init+0xc>
    62ec:	ee 0f       	add	r30, r30
    62ee:	ff 1f       	adc	r31, r31
    62f0:	8a 95       	dec	r24
    62f2:	e2 f7       	brpl	.-8      	; 0x62ec <Button_Init+0x8>
    62f4:	a0 ea       	ldi	r26, 0xA0	; 160
    62f6:	b6 e0       	ldi	r27, 0x06	; 6
    62f8:	12 96       	adiw	r26, 0x02	; 2
    62fa:	ec 93       	st	X, r30
    62fc:	12 97       	sbiw	r26, 0x02	; 2
	
	PORTCFG.MPCMASK = (1 << button);
    62fe:	e0 93 b0 00 	sts	0x00B0, r30
	Button_Port.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc | edge;
    6302:	48 63       	ori	r20, 0x38	; 56
    6304:	50 96       	adiw	r26, 0x10	; 16
    6306:	4c 93       	st	X, r20
    6308:	50 97       	sbiw	r26, 0x10	; 16
	if(enableInt){
    630a:	66 23       	and	r22, r22
    630c:	a1 f0       	breq	.+40     	; 0x6336 <Button_Init+0x52>
		if(intNumber == 0){
    630e:	22 23       	and	r18, r18
    6310:	31 f4       	brne	.+12     	; 0x631e <Button_Init+0x3a>
			Button_Port.INT0MASK = (1<<button); 
    6312:	1a 96       	adiw	r26, 0x0a	; 10
    6314:	ec 93       	st	X, r30
    6316:	1a 97       	sbiw	r26, 0x0a	; 10
			Button_Port.INTCTRL |= intLevel;
    6318:	80 91 a9 06 	lds	r24, 0x06A9
    631c:	09 c0       	rjmp	.+18     	; 0x6330 <Button_Init+0x4c>
		} else if (intNumber == 1){
    631e:	21 30       	cpi	r18, 0x01	; 1
    6320:	51 f4       	brne	.+20     	; 0x6336 <Button_Init+0x52>
			Button_Port.INT1MASK = (1<<button); 
    6322:	1b 96       	adiw	r26, 0x0b	; 11
    6324:	ec 93       	st	X, r30
    6326:	1b 97       	sbiw	r26, 0x0b	; 11
			Button_Port.INTCTRL |= (intLevel << 2);
    6328:	80 91 a9 06 	lds	r24, 0x06A9
    632c:	00 0f       	add	r16, r16
    632e:	00 0f       	add	r16, r16
    6330:	80 2b       	or	r24, r16
    6332:	19 96       	adiw	r26, 0x09	; 9
    6334:	8c 93       	st	X, r24
		}
	}
}
    6336:	0f 91       	pop	r16
    6338:	08 95       	ret

0000633a <Button_Pressed>:


bool Button_Pressed(uint8_t button){
	if((Button_Port.IN & (1<<button)) >0 ){
    633a:	40 91 a8 06 	lds	r20, 0x06A8
    633e:	90 e0       	ldi	r25, 0x00	; 0
    6340:	21 e0       	ldi	r18, 0x01	; 1
    6342:	30 e0       	ldi	r19, 0x00	; 0
    6344:	02 c0       	rjmp	.+4      	; 0x634a <Button_Pressed+0x10>
    6346:	22 0f       	add	r18, r18
    6348:	33 1f       	adc	r19, r19
    634a:	8a 95       	dec	r24
    634c:	e2 f7       	brpl	.-8      	; 0x6346 <Button_Pressed+0xc>
    634e:	50 e0       	ldi	r21, 0x00	; 0
    6350:	24 23       	and	r18, r20
    6352:	35 23       	and	r19, r21
    6354:	12 16       	cp	r1, r18
    6356:	13 06       	cpc	r1, r19
    6358:	0c f0       	brlt	.+2      	; 0x635c <Button_Pressed+0x22>
    635a:	91 e0       	ldi	r25, 0x01	; 1
		return false;
	} else {
		return true;
	}
} 
    635c:	89 2f       	mov	r24, r25
    635e:	08 95       	ret

00006360 <Sensors_ReadPower>:

}


uint16_t Sensors_ReadPower(void){
	return ADCA.powerResult;
    6360:	e0 e0       	ldi	r30, 0x00	; 0
    6362:	f2 e0       	ldi	r31, 0x02	; 2
    6364:	22 89       	ldd	r18, Z+18	; 0x12
    6366:	33 89       	ldd	r19, Z+19	; 0x13
}
    6368:	c9 01       	movw	r24, r18
    636a:	08 95       	ret

0000636c <Sensors_ReadTemperature>:


uint16_t Sensors_ReadTemperature(void){
    636c:	0f 93       	push	r16
    636e:	1f 93       	push	r17
	uint32_t tmp =  ADCA.temperatureResult - zeroOffsetA ;
    6370:	e0 e0       	ldi	r30, 0x00	; 0
    6372:	f2 e0       	ldi	r31, 0x02	; 2
    6374:	64 89       	ldd	r22, Z+20	; 0x14
    6376:	75 89       	ldd	r23, Z+21	; 0x15
    6378:	00 91 07 55 	lds	r16, 0x5507
    637c:	10 91 08 55 	lds	r17, 0x5508
    6380:	60 1b       	sub	r22, r16
    6382:	71 0b       	sbc	r23, r17
    6384:	80 e0       	ldi	r24, 0x00	; 0
    6386:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t tmp2 = 0;

	tmp *= 11784;
    6388:	28 e0       	ldi	r18, 0x08	; 8
    638a:	3e e2       	ldi	r19, 0x2E	; 46
    638c:	40 e0       	ldi	r20, 0x00	; 0
    638e:	50 e0       	ldi	r21, 0x00	; 0
    6390:	0e 94 54 50 	call	0xa0a8	; 0xa0a8 <__mulsi3>
    6394:	9b 01       	movw	r18, r22
    6396:	ac 01       	movw	r20, r24
	tmp -= 3657728;
    6398:	8d e7       	ldi	r24, 0x7D	; 125
    639a:	93 e0       	ldi	r25, 0x03	; 3
    639c:	08 9f       	mul	r16, r24
    639e:	b0 01       	movw	r22, r0
    63a0:	09 9f       	mul	r16, r25
    63a2:	70 0d       	add	r23, r0
    63a4:	18 9f       	mul	r17, r24
    63a6:	70 0d       	add	r23, r0
    63a8:	11 24       	eor	r1, r1
    63aa:	80 e0       	ldi	r24, 0x00	; 0
    63ac:	90 e0       	ldi	r25, 0x00	; 0
    63ae:	60 50       	subi	r22, 0x00	; 0
    63b0:	70 4d       	sbci	r23, 0xD0	; 208
    63b2:	87 43       	sbci	r24, 0x37	; 55
    63b4:	90 40       	sbci	r25, 0x00	; 0
	tmp += (893*zeroOffsetA);
    63b6:	62 0f       	add	r22, r18
    63b8:	73 1f       	adc	r23, r19
    63ba:	84 1f       	adc	r24, r20
    63bc:	95 1f       	adc	r25, r21
    63be:	2a e0       	ldi	r18, 0x0A	; 10
    63c0:	30 e0       	ldi	r19, 0x00	; 0
    63c2:	40 e0       	ldi	r20, 0x00	; 0
    63c4:	50 e0       	ldi	r21, 0x00	; 0
    63c6:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    63ca:	ca 01       	movw	r24, r20
    63cc:	b9 01       	movw	r22, r18
    63ce:	20 e0       	ldi	r18, 0x00	; 0
    63d0:	30 e1       	ldi	r19, 0x10	; 16
    63d2:	20 1b       	sub	r18, r16
    63d4:	31 0b       	sbc	r19, r17
    63d6:	40 e0       	ldi	r20, 0x00	; 0
    63d8:	50 e0       	ldi	r21, 0x00	; 0
    63da:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    63de:	c9 01       	movw	r24, r18
	tmp /= 10;
	tmp2 = tmp / (4096 - zeroOffsetA);

	return tmp2;
}
    63e0:	1f 91       	pop	r17
    63e2:	0f 91       	pop	r16
    63e4:	08 95       	ret

000063e6 <Sensors_ReadHumidity>:

uint16_t Sensors_ReadHumidity(void){
    63e6:	ef 92       	push	r14
    63e8:	ff 92       	push	r15
    63ea:	0f 93       	push	r16
    63ec:	1f 93       	push	r17
    uint32_t tmp =  ADCA.humidityResult - zeroOffsetA;
    63ee:	e0 e0       	ldi	r30, 0x00	; 0
    63f0:	f2 e0       	ldi	r31, 0x02	; 2
    63f2:	66 89       	ldd	r22, Z+22	; 0x16
    63f4:	77 89       	ldd	r23, Z+23	; 0x17
    63f6:	00 91 07 55 	lds	r16, 0x5507
    63fa:	10 91 08 55 	lds	r17, 0x5508
    63fe:	60 1b       	sub	r22, r16
    6400:	71 0b       	sbc	r23, r17
    6402:	80 e0       	ldi	r24, 0x00	; 0
    6404:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t tmp2 = 0;
    uint32_t tmp3, tmp4;

    tmp *= 19554;
    6406:	22 e6       	ldi	r18, 0x62	; 98
    6408:	3c e4       	ldi	r19, 0x4C	; 76
    640a:	40 e0       	ldi	r20, 0x00	; 0
    640c:	50 e0       	ldi	r21, 0x00	; 0
    640e:	0e 94 54 50 	call	0xa0a8	; 0xa0a8 <__mulsi3>
    6412:	9b 01       	movw	r18, r22
    6414:	ac 01       	movw	r20, r24
    tmp -= 9756672;
    6416:	8e e4       	ldi	r24, 0x4E	; 78
    6418:	99 e0       	ldi	r25, 0x09	; 9
    641a:	08 9f       	mul	r16, r24
    641c:	b0 01       	movw	r22, r0
    641e:	09 9f       	mul	r16, r25
    6420:	70 0d       	add	r23, r0
    6422:	18 9f       	mul	r17, r24
    6424:	70 0d       	add	r23, r0
    6426:	11 24       	eor	r1, r1
    6428:	80 e0       	ldi	r24, 0x00	; 0
    642a:	90 e0       	ldi	r25, 0x00	; 0
    642c:	60 50       	subi	r22, 0x00	; 0
    642e:	70 4e       	sbci	r23, 0xE0	; 224
    6430:	84 49       	sbci	r24, 0x94	; 148
    6432:	90 40       	sbci	r25, 0x00	; 0
    tmp += (2382*zeroOffsetA);
    tmp3 = tmp / (4096 - zeroOffsetA);       // %RH * 100
    6434:	62 0f       	add	r22, r18
    6436:	73 1f       	adc	r23, r19
    6438:	84 1f       	adc	r24, r20
    643a:	95 1f       	adc	r25, r21
    643c:	20 e0       	ldi	r18, 0x00	; 0
    643e:	30 e1       	ldi	r19, 0x10	; 16
    6440:	20 1b       	sub	r18, r16
    6442:	31 0b       	sbc	r19, r17
    6444:	40 e0       	ldi	r20, 0x00	; 0
    6446:	50 e0       	ldi	r21, 0x00	; 0
    6448:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    644c:	ca 01       	movw	r24, r20
    tmp3 *= 10000;                          // %RH * 1000,000

    tmp4 = 216*quickTemperature;                                      // use temp to offset
    644e:	e0 90 1b 2d 	lds	r14, 0x2D1B
    6452:	48 ed       	ldi	r20, 0xD8	; 216
    6454:	e4 9e       	mul	r14, r20
    6456:	70 01       	movw	r14, r0
    6458:	11 24       	eor	r1, r1
    645a:	00 27       	eor	r16, r16
    645c:	f7 fc       	sbrc	r15, 7
    645e:	00 95       	com	r16
    6460:	10 2f       	mov	r17, r16
    6462:	b9 01       	movw	r22, r18
    6464:	20 e1       	ldi	r18, 0x10	; 16
    6466:	37 e2       	ldi	r19, 0x27	; 39
    6468:	40 e0       	ldi	r20, 0x00	; 0
    646a:	50 e0       	ldi	r21, 0x00	; 0
    646c:	0e 94 54 50 	call	0xa0a8	; 0xa0a8 <__mulsi3>
    6470:	24 ef       	ldi	r18, 0xF4	; 244
    6472:	3b e9       	ldi	r19, 0x9B	; 155
    6474:	41 e0       	ldi	r20, 0x01	; 1
    6476:	50 e0       	ldi	r21, 0x00	; 0
    6478:	2e 19       	sub	r18, r14
    647a:	3f 09       	sbc	r19, r15
    647c:	40 0b       	sbc	r20, r16
    647e:	51 0b       	sbc	r21, r17
    6480:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    6484:	c9 01       	movw	r24, r18
    tmp4 = 105460 - tmp4;
    tmp2 = tmp3 / tmp4;

    return tmp2;
}
    6486:	1f 91       	pop	r17
    6488:	0f 91       	pop	r16
    648a:	ff 90       	pop	r15
    648c:	ef 90       	pop	r14
    648e:	08 95       	ret

00006490 <Sensors_ReadMicrophone>:

uint8_t Sensors_ReadMicrophone(void){
	return micCounter++;
    6490:	80 91 2a 2d 	lds	r24, 0x2D2A
    6494:	8f 5f       	subi	r24, 0xFF	; 255
    6496:	80 93 2a 2d 	sts	0x2D2A, r24
    649a:	81 50       	subi	r24, 0x01	; 1
	//return ADCB.microphoneResult/16;
}
    649c:	08 95       	ret

0000649e <Sensors_ReadPressure>:

uint16_t Sensors_ReadPressure(void){
    649e:	0f 93       	push	r16
    64a0:	1f 93       	push	r17
	uint32_t tmp =  ADCB.pressureResult - zeroOffsetB;
    64a2:	e0 e4       	ldi	r30, 0x40	; 64
    64a4:	f2 e0       	ldi	r31, 0x02	; 2
    64a6:	62 89       	ldd	r22, Z+18	; 0x12
    64a8:	73 89       	ldd	r23, Z+19	; 0x13
    64aa:	00 91 f6 31 	lds	r16, 0x31F6
    64ae:	10 91 f7 31 	lds	r17, 0x31F7
    64b2:	60 1b       	sub	r22, r16
    64b4:	71 0b       	sbc	r23, r17
    64b6:	80 e0       	ldi	r24, 0x00	; 0
    64b8:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t tmp2 = 0;

    tmp *= 13889;
    64ba:	21 e4       	ldi	r18, 0x41	; 65
    64bc:	36 e3       	ldi	r19, 0x36	; 54
    64be:	40 e0       	ldi	r20, 0x00	; 0
    64c0:	50 e0       	ldi	r21, 0x00	; 0
    64c2:	0e 94 54 50 	call	0xa0a8	; 0xa0a8 <__mulsi3>
    tmp += 4325376;
    64c6:	20 e2       	ldi	r18, 0x20	; 32
    64c8:	34 e0       	ldi	r19, 0x04	; 4
    64ca:	a9 01       	movw	r20, r18
    64cc:	04 9f       	mul	r16, r20
    64ce:	90 01       	movw	r18, r0
    64d0:	05 9f       	mul	r16, r21
    64d2:	30 0d       	add	r19, r0
    64d4:	14 9f       	mul	r17, r20
    64d6:	30 0d       	add	r19, r0
    64d8:	11 24       	eor	r1, r1
    64da:	40 e0       	ldi	r20, 0x00	; 0
    64dc:	50 e0       	ldi	r21, 0x00	; 0
    64de:	62 1b       	sub	r22, r18
    64e0:	73 0b       	sbc	r23, r19
    64e2:	84 0b       	sbc	r24, r20
    64e4:	95 0b       	sbc	r25, r21
    tmp -= (1056*zeroOffsetB);
    64e6:	60 50       	subi	r22, 0x00	; 0
    64e8:	70 40       	sbci	r23, 0x00	; 0
    64ea:	8e 4b       	sbci	r24, 0xBE	; 190
    64ec:	9f 4f       	sbci	r25, 0xFF	; 255
    64ee:	2a e0       	ldi	r18, 0x0A	; 10
    64f0:	30 e0       	ldi	r19, 0x00	; 0
    64f2:	40 e0       	ldi	r20, 0x00	; 0
    64f4:	50 e0       	ldi	r21, 0x00	; 0
    64f6:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    64fa:	ca 01       	movw	r24, r20
    64fc:	b9 01       	movw	r22, r18
    64fe:	20 e0       	ldi	r18, 0x00	; 0
    6500:	30 e1       	ldi	r19, 0x10	; 16
    6502:	20 1b       	sub	r18, r16
    6504:	31 0b       	sbc	r19, r17
    6506:	40 e0       	ldi	r20, 0x00	; 0
    6508:	50 e0       	ldi	r21, 0x00	; 0
    650a:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    650e:	c9 01       	movw	r24, r18
    tmp /= 10;
    tmp2 = tmp / (4096 - zeroOffsetB);

    return tmp2;
}
    6510:	1f 91       	pop	r17
    6512:	0f 91       	pop	r16
    6514:	08 95       	ret

00006516 <Sensors_ResetTemperatureBuffers>:

void Sensors_ResetTemperatureBuffers(void){
	temperatureBufferCounter = 0;
    6516:	10 92 e3 2c 	sts	0x2CE3, r1
    651a:	10 92 e4 2c 	sts	0x2CE4, r1
  	temperatureBufferToWriteTo = 0;
    651e:	10 92 e2 2c 	sts	0x2CE2, r1
	for(uint8_t i = 0; i < temperatureNumberOfBuffers; i++){
		okToSendTemperatureBuffer[i] = false;
    6522:	10 92 da 55 	sts	0x55DA, r1
    6526:	10 92 db 55 	sts	0x55DB, r1
	}	
}
    652a:	08 95       	ret

0000652c <Sensors_ResetPressureBuffers>:

void Sensors_ResetPressureBuffers(void){
	pressureBufferCounter = 0;
    652c:	10 92 e9 2c 	sts	0x2CE9, r1
    6530:	10 92 ea 2c 	sts	0x2CEA, r1
  	pressureBufferToWriteTo = 0;
    6534:	10 92 e8 2c 	sts	0x2CE8, r1
	for(uint16_t i = 0; i < pressureNumberOfBuffers; i++){
		okToSendPressureBuffer[i] = false;
    6538:	10 92 f2 36 	sts	0x36F2, r1
    653c:	10 92 f3 36 	sts	0x36F3, r1
	}	
}
    6540:	08 95       	ret

00006542 <Sensors_ResetHumidityBuffers>:

void Sensors_ResetHumidityBuffers(void){
	humidityBufferCounter = 0;
    6542:	10 92 e6 2c 	sts	0x2CE6, r1
    6546:	10 92 e7 2c 	sts	0x2CE7, r1
  	humidityBufferToWriteTo = 0;
    654a:	10 92 e5 2c 	sts	0x2CE5, r1
	for(uint16_t i = 0; i < humidityNumberOfBuffers; i++){
		okToSendHumidityBuffer[i] = false;
    654e:	10 92 2b 38 	sts	0x382B, r1
    6552:	10 92 2c 38 	sts	0x382C, r1
	}	
}
    6556:	08 95       	ret

00006558 <Sensors_ResetMicrophoneBuffers>:

void Sensors_ResetMicrophoneBuffers(void){
	microphoneBufferCounter = 0;
    6558:	10 92 ec 2c 	sts	0x2CEC, r1
    655c:	10 92 ed 2c 	sts	0x2CED, r1
  	microphoneBufferToWriteTo = 0;
    6560:	10 92 eb 2c 	sts	0x2CEB, r1
	for(uint16_t i = 0; i < microphoneNumberOfBuffers; i++){
		okToSendMicrophoneBuffer[i] = false;
    6564:	10 92 e9 56 	sts	0x56E9, r1
    6568:	10 92 ea 56 	sts	0x56EA, r1
    656c:	10 92 eb 56 	sts	0x56EB, r1
	}	
}
    6570:	08 95       	ret

00006572 <Sensors_ResetLightBuffers>:

void Sensors_ResetLightBuffers(void){
	lightBufferCounter = 0;
    6572:	10 92 ef 2c 	sts	0x2CEF, r1
    6576:	10 92 f0 2c 	sts	0x2CF0, r1
  	lightBufferToWriteTo = 0;
    657a:	10 92 ee 2c 	sts	0x2CEE, r1
	for(uint16_t i = 0; i < lightNumberOfBuffers; i++){
		okToSendLightBuffer[i] = false;
    657e:	10 92 9e 36 	sts	0x369E, r1
    6582:	10 92 9f 36 	sts	0x369F, r1
	}	
}
    6586:	08 95       	ret

00006588 <Sensors_Init>:


//char				tempDebug [50];      


void Sensors_Init(void){
    6588:	ff 92       	push	r15
    658a:	0f 93       	push	r16
    658c:	1f 93       	push	r17
    658e:	cf 93       	push	r28
    6590:	df 93       	push	r29
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6592:	2a ec       	ldi	r18, 0xCA	; 202
    6594:	31 e0       	ldi	r19, 0x01	; 1
    6596:	62 e0       	ldi	r22, 0x02	; 2
    6598:	d9 01       	movw	r26, r18
    659a:	6c 93       	st	X, r22
 	result = pgm_read_byte(index);
    659c:	e0 e2       	ldi	r30, 0x20	; 32
    659e:	f0 e0       	ldi	r31, 0x00	; 0
    65a0:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    65a2:	1c 92       	st	X, r1

void Sensors_Init(void){
	
	// ADCA
	
	ADCA.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
    65a4:	a0 e0       	ldi	r26, 0x00	; 0
    65a6:	b2 e0       	ldi	r27, 0x02	; 2
    65a8:	1c 96       	adiw	r26, 0x0c	; 12
    65aa:	ec 93       	st	X, r30
    65ac:	1c 97       	sbiw	r26, 0x0c	; 12
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    65ae:	e9 01       	movw	r28, r18
    65b0:	68 83       	st	Y, r22
 	result = pgm_read_byte(index);
    65b2:	e1 e2       	ldi	r30, 0x21	; 33
    65b4:	f0 e0       	ldi	r31, 0x00	; 0
    65b6:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    65b8:	18 82       	st	Y, r1
void Sensors_Init(void){
	
	// ADCA
	
	ADCA.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
	ADCA.CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
    65ba:	1d 96       	adiw	r26, 0x0d	; 13
    65bc:	ec 93       	st	X, r30
    65be:	1d 97       	sbiw	r26, 0x0d	; 13
	
	ADCA.groundChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    65c0:	41 e0       	ldi	r20, 0x01	; 1
    65c2:	90 96       	adiw	r26, 0x20	; 32
    65c4:	4c 93       	st	X, r20
    65c6:	90 97       	sbiw	r26, 0x20	; 32
	ADCA.groundChannel.MUXCTRL = groundMUXPos;
    65c8:	18 e0       	ldi	r17, 0x08	; 8
    65ca:	f1 2e       	mov	r15, r17
    65cc:	91 96       	adiw	r26, 0x21	; 33
    65ce:	fc 92       	st	X, r15
    65d0:	91 97       	sbiw	r26, 0x21	; 33

	ADCA.powerChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    65d2:	98 96       	adiw	r26, 0x28	; 40
    65d4:	4c 93       	st	X, r20
    65d6:	98 97       	sbiw	r26, 0x28	; 40
	ADCA.powerChannel.MUXCTRL = powerMUXPos;
    65d8:	88 e1       	ldi	r24, 0x18	; 24
    65da:	99 96       	adiw	r26, 0x29	; 41
    65dc:	8c 93       	st	X, r24
    65de:	99 97       	sbiw	r26, 0x29	; 41
	
	ADCA.temperatureChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    65e0:	d0 96       	adiw	r26, 0x30	; 48
    65e2:	4c 93       	st	X, r20
    65e4:	d0 97       	sbiw	r26, 0x30	; 48
	ADCA.temperatureChannel.MUXCTRL = temperatureMUXPos;
    65e6:	50 e2       	ldi	r21, 0x20	; 32
    65e8:	d1 96       	adiw	r26, 0x31	; 49
    65ea:	5c 93       	st	X, r21
    65ec:	d1 97       	sbiw	r26, 0x31	; 49

	ADCA.humidityChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    65ee:	d8 96       	adiw	r26, 0x38	; 56
    65f0:	4c 93       	st	X, r20
    65f2:	d8 97       	sbiw	r26, 0x38	; 56
	ADCA.humidityChannel.MUXCTRL = humidityMUXPos;
    65f4:	78 e2       	ldi	r23, 0x28	; 40
    65f6:	d9 96       	adiw	r26, 0x39	; 57
    65f8:	7c 93       	st	X, r23
    65fa:	d9 97       	sbiw	r26, 0x39	; 57
	
	ADCA.PRESCALER = (ADCA.PRESCALER & (~ADC_PRESCALER_gm)) | ADC_PRESCALER_DIV64_gc;
    65fc:	14 96       	adiw	r26, 0x04	; 4
    65fe:	8c 91       	ld	r24, X
    6600:	14 97       	sbiw	r26, 0x04	; 4
    6602:	88 7f       	andi	r24, 0xF8	; 248
    6604:	84 60       	ori	r24, 0x04	; 4
    6606:	14 96       	adiw	r26, 0x04	; 4
    6608:	8c 93       	st	X, r24
    660a:	14 97       	sbiw	r26, 0x04	; 4
	
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    660c:	12 96       	adiw	r26, 0x02	; 2
    660e:	5c 93       	st	X, r21
    6610:	12 97       	sbiw	r26, 0x02	; 2
	ADCA.EVCTRL = (ADCA.EVCTRL & (~ADC_SWEEP_gm)) | ADC_SWEEP_0123_gc;
    6612:	13 96       	adiw	r26, 0x03	; 3
    6614:	8c 91       	ld	r24, X
    6616:	13 97       	sbiw	r26, 0x03	; 3
    6618:	80 6c       	ori	r24, 0xC0	; 192
    661a:	13 96       	adiw	r26, 0x03	; 3
    661c:	8c 93       	st	X, r24
    661e:	13 97       	sbiw	r26, 0x03	; 3
	
	ADCA.CTRLB |= ADC_FREERUN_bm; // free running mode	
    6620:	11 96       	adiw	r26, 0x01	; 1
    6622:	8c 91       	ld	r24, X
    6624:	11 97       	sbiw	r26, 0x01	; 1
    6626:	88 60       	ori	r24, 0x08	; 8
    6628:	11 96       	adiw	r26, 0x01	; 1
    662a:	8c 93       	st	X, r24
    662c:	11 97       	sbiw	r26, 0x01	; 1
	
	
	ADCA.groundChannel.CTRL |= ADC_CH_START_bm;
    662e:	90 96       	adiw	r26, 0x20	; 32
    6630:	8c 91       	ld	r24, X
    6632:	90 97       	sbiw	r26, 0x20	; 32
    6634:	80 68       	ori	r24, 0x80	; 128
    6636:	90 96       	adiw	r26, 0x20	; 32
    6638:	8c 93       	st	X, r24
    663a:	90 97       	sbiw	r26, 0x20	; 32
	ADCA.powerChannel.CTRL |= ADC_CH_START_bm;
    663c:	98 96       	adiw	r26, 0x28	; 40
    663e:	8c 91       	ld	r24, X
    6640:	98 97       	sbiw	r26, 0x28	; 40
    6642:	80 68       	ori	r24, 0x80	; 128
    6644:	98 96       	adiw	r26, 0x28	; 40
    6646:	8c 93       	st	X, r24
    6648:	98 97       	sbiw	r26, 0x28	; 40
	ADCA.temperatureChannel.CTRL |= ADC_CH_START_bm;
    664a:	d0 96       	adiw	r26, 0x30	; 48
    664c:	8c 91       	ld	r24, X
    664e:	d0 97       	sbiw	r26, 0x30	; 48
    6650:	80 68       	ori	r24, 0x80	; 128
    6652:	d0 96       	adiw	r26, 0x30	; 48
    6654:	8c 93       	st	X, r24
    6656:	d0 97       	sbiw	r26, 0x30	; 48
	ADCA.humidityChannel.CTRL |= ADC_CH_START_bm;
    6658:	d8 96       	adiw	r26, 0x38	; 56
    665a:	8c 91       	ld	r24, X
    665c:	d8 97       	sbiw	r26, 0x38	; 56
    665e:	80 68       	ori	r24, 0x80	; 128
    6660:	d8 96       	adiw	r26, 0x38	; 56
    6662:	8c 93       	st	X, r24
    6664:	d8 97       	sbiw	r26, 0x38	; 56
	
	ADCA.CTRLA = ADC_ENABLE_bm;							// enable adc 
    6666:	4c 93       	st	X, r20
    6668:	00 e0       	ldi	r16, 0x00	; 0
    666a:	10 e9       	ldi	r17, 0x90	; 144
    666c:	c8 01       	movw	r24, r16
    666e:	01 97       	sbiw	r24, 0x01	; 1
    6670:	f1 f7       	brne	.-4      	; 0x666e <Sensors_Init+0xe6>
	
	_delay_ms(10);
	zeroOffsetA = ADCA.groundResult;
    6672:	50 96       	adiw	r26, 0x10	; 16
    6674:	8d 91       	ld	r24, X+
    6676:	9c 91       	ld	r25, X
    6678:	51 97       	sbiw	r26, 0x11	; 17
    667a:	80 93 07 55 	sts	0x5507, r24
    667e:	90 93 08 55 	sts	0x5508, r25
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6682:	f9 01       	movw	r30, r18
    6684:	60 83       	st	Z, r22
 	result = pgm_read_byte(index);
    6686:	e4 e2       	ldi	r30, 0x24	; 36
    6688:	f0 e0       	ldi	r31, 0x00	; 0
    668a:	84 91       	lpm	r24, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    668c:	d9 01       	movw	r26, r18
    668e:	1c 92       	st	X, r1
	zeroOffsetA = ADCA.groundResult;
	
	// ADCB
	
	
	ADCB.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
    6690:	c0 e4       	ldi	r28, 0x40	; 64
    6692:	d2 e0       	ldi	r29, 0x02	; 2
    6694:	8c 87       	std	Y+12, r24	; 0x0c
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6696:	6c 93       	st	X, r22
 	result = pgm_read_byte(index);
    6698:	85 e2       	ldi	r24, 0x25	; 37
    669a:	90 e0       	ldi	r25, 0x00	; 0
    669c:	fc 01       	movw	r30, r24
    669e:	84 91       	lpm	r24, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    66a0:	1c 92       	st	X, r1
	
	// ADCB
	
	
	ADCB.CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
	ADCB.CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
    66a2:	8d 87       	std	Y+13, r24	; 0x0d
	
	ADCB.groundChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    66a4:	48 a3       	std	Y+32, r20	; 0x20
	ADCB.groundChannel.MUXCTRL = groundMUXPos;
    66a6:	f9 a2       	std	Y+33, r15	; 0x21
	
	ADCB.pressureChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    66a8:	48 a7       	std	Y+40, r20	; 0x28
	ADCB.pressureChannel.MUXCTRL = pressureMUXPos;
    66aa:	59 a7       	std	Y+41, r21	; 0x29
	
	ADCB.microphoneChannel.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// set input mode
    66ac:	48 ab       	std	Y+48, r20	; 0x30
	ADCB.microphoneChannel.MUXCTRL = microphoneMUXPos;
    66ae:	79 ab       	std	Y+49, r23	; 0x31

	ADCB.PRESCALER = (ADCB.PRESCALER & (~ADC_PRESCALER_gm)) | ADC_PRESCALER_DIV64_gc;
    66b0:	8c 81       	ldd	r24, Y+4	; 0x04
    66b2:	88 7f       	andi	r24, 0xF8	; 248
    66b4:	84 60       	ori	r24, 0x04	; 4
    66b6:	8c 83       	std	Y+4, r24	; 0x04
	
	ADCB.REFCTRL = ADC_REFSEL_AREFA_gc;
    66b8:	5a 83       	std	Y+2, r21	; 0x02
	ADCB.EVCTRL = (ADCB.EVCTRL & (~ADC_SWEEP_gm)) | ADC_SWEEP_0123_gc;
    66ba:	8b 81       	ldd	r24, Y+3	; 0x03
    66bc:	80 6c       	ori	r24, 0xC0	; 192
    66be:	8b 83       	std	Y+3, r24	; 0x03
	
	ADCB.CTRLB |= ADC_FREERUN_bm; // free running mode	
    66c0:	89 81       	ldd	r24, Y+1	; 0x01
    66c2:	88 60       	ori	r24, 0x08	; 8
    66c4:	89 83       	std	Y+1, r24	; 0x01
	
	ADCB.groundChannel.CTRL |= ADC_CH_START_bm;
    66c6:	88 a1       	ldd	r24, Y+32	; 0x20
    66c8:	80 68       	ori	r24, 0x80	; 128
    66ca:	88 a3       	std	Y+32, r24	; 0x20
	ADCB.microphoneChannel.CTRL |= ADC_CH_START_bm;
    66cc:	88 a9       	ldd	r24, Y+48	; 0x30
    66ce:	80 68       	ori	r24, 0x80	; 128
    66d0:	88 ab       	std	Y+48, r24	; 0x30
	ADCB.pressureChannel.CTRL |= ADC_CH_START_bm;
    66d2:	88 a5       	ldd	r24, Y+40	; 0x28
    66d4:	80 68       	ori	r24, 0x80	; 128
    66d6:	88 a7       	std	Y+40, r24	; 0x28

	ADCB.CTRLA = ADC_ENABLE_bm;							// enable adc 
    66d8:	48 83       	st	Y, r20
    66da:	c8 01       	movw	r24, r16
    66dc:	01 97       	sbiw	r24, 0x01	; 1
    66de:	f1 f7       	brne	.-4      	; 0x66dc <Sensors_Init+0x154>
	
	_delay_ms(10);
	zeroOffsetB = ADCB.groundResult;
    66e0:	88 89       	ldd	r24, Y+16	; 0x10
    66e2:	99 89       	ldd	r25, Y+17	; 0x11
    66e4:	80 93 f6 31 	sts	0x31F6, r24
    66e8:	90 93 f7 31 	sts	0x31F7, r25
	// div  = 1024
	// per  = 14400 (remember to subtract 1, so really 14399)
	// => 14745600/14400/1024 => 1 samples per second
	
	// Set period/TOP value
	Sensors_Timer_1HZ.PER = 14399;
    66ec:	e0 e4       	ldi	r30, 0x40	; 64
    66ee:	f9 e0       	ldi	r31, 0x09	; 9
    66f0:	8f e3       	ldi	r24, 0x3F	; 63
    66f2:	98 e3       	ldi	r25, 0x38	; 56
    66f4:	86 a3       	std	Z+38, r24	; 0x26
    66f6:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	Sensors_Timer_1HZ.CTRLA = (Sensors_Timer_1HZ.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    66f8:	80 81       	ld	r24, Z
    66fa:	80 7f       	andi	r24, 0xF0	; 240
    66fc:	87 60       	ori	r24, 0x07	; 7
    66fe:	80 83       	st	Z, r24
	
	// Enable CCA interrupt
	Sensors_Timer_1HZ.INTCTRLA = (Sensors_Timer_1HZ.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    6700:	86 81       	ldd	r24, Z+6	; 0x06
    6702:	8c 7f       	andi	r24, 0xFC	; 252
    6704:	82 60       	ori	r24, 0x02	; 2
    6706:	86 83       	std	Z+6, r24	; 0x06
	// per  = 256 (remember to subtract 1, so really 255)
	// => 14745600/8/256 => 7200 samples per second

	// Set period/TOP value

	Sensors_Timer_7200HZ.PER = 255; 				// 7.2khz
    6708:	e0 e0       	ldi	r30, 0x00	; 0
    670a:	f9 e0       	ldi	r31, 0x09	; 9
    670c:	8f ef       	ldi	r24, 0xFF	; 255
    670e:	90 e0       	ldi	r25, 0x00	; 0
    6710:	86 a3       	std	Z+38, r24	; 0x26
    6712:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	Sensors_Timer_7200HZ.CTRLA = (Sensors_Timer_7200HZ.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV8_gc;
    6714:	80 81       	ld	r24, Z
    6716:	80 7f       	andi	r24, 0xF0	; 240
    6718:	84 60       	ori	r24, 0x04	; 4
    671a:	80 83       	st	Z, r24

	// Enable CCA interrupt
	Sensors_Timer_7200HZ.INTCTRLA = (Sensors_Timer_7200HZ.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_HI_gc;
    671c:	86 81       	ldd	r24, Z+6	; 0x06
    671e:	83 60       	ori	r24, 0x03	; 3
    6720:	86 83       	std	Z+6, r24	; 0x06
	
	Sensors_ResetTemperatureBuffers();
    6722:	0e 94 8b 32 	call	0x6516	; 0x6516 <Sensors_ResetTemperatureBuffers>
	Sensors_ResetPressureBuffers();
    6726:	0e 94 96 32 	call	0x652c	; 0x652c <Sensors_ResetPressureBuffers>
	Sensors_ResetHumidityBuffers();
    672a:	0e 94 a1 32 	call	0x6542	; 0x6542 <Sensors_ResetHumidityBuffers>
	Sensors_ResetLightBuffers();
    672e:	0e 94 b9 32 	call	0x6572	; 0x6572 <Sensors_ResetLightBuffers>
	Sensors_ResetMicrophoneBuffers();
    6732:	0e 94 ac 32 	call	0x6558	; 0x6558 <Sensors_ResetMicrophoneBuffers>

}
    6736:	df 91       	pop	r29
    6738:	cf 91       	pop	r28
    673a:	1f 91       	pop	r17
    673c:	0f 91       	pop	r16
    673e:	ff 90       	pop	r15
    6740:	08 95       	ret

00006742 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6742:	aa ec       	ldi	r26, 0xCA	; 202
    6744:	b1 e0       	ldi	r27, 0x01	; 1
    6746:	92 e0       	ldi	r25, 0x02	; 2
    6748:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
    674a:	e8 2f       	mov	r30, r24
    674c:	f0 e0       	ldi	r31, 0x00	; 0
    674e:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    6750:	1c 92       	st	X, r1

	return result;
}
    6752:	8e 2f       	mov	r24, r30
    6754:	08 95       	ret

00006756 <__vector_83>:


ISR(Sensors_Timer_1HZ_vect)
{
    6756:	1f 92       	push	r1
    6758:	0f 92       	push	r0
    675a:	0f b6       	in	r0, 0x3f	; 63
    675c:	0f 92       	push	r0
    675e:	0b b6       	in	r0, 0x3b	; 59
    6760:	0f 92       	push	r0
    6762:	11 24       	eor	r1, r1
    6764:	4f 92       	push	r4
    6766:	5f 92       	push	r5
    6768:	6f 92       	push	r6
    676a:	7f 92       	push	r7
    676c:	8f 92       	push	r8
    676e:	9f 92       	push	r9
    6770:	af 92       	push	r10
    6772:	bf 92       	push	r11
    6774:	cf 92       	push	r12
    6776:	df 92       	push	r13
    6778:	ef 92       	push	r14
    677a:	ff 92       	push	r15
    677c:	0f 93       	push	r16
    677e:	1f 93       	push	r17
    6780:	2f 93       	push	r18
    6782:	3f 93       	push	r19
    6784:	4f 93       	push	r20
    6786:	5f 93       	push	r21
    6788:	6f 93       	push	r22
    678a:	7f 93       	push	r23
    678c:	8f 93       	push	r24
    678e:	9f 93       	push	r25
    6790:	af 93       	push	r26
    6792:	bf 93       	push	r27
    6794:	cf 93       	push	r28
    6796:	df 93       	push	r29
    6798:	ef 93       	push	r30
    679a:	ff 93       	push	r31
	UNIX_Time++;
    679c:	80 91 0a 2d 	lds	r24, 0x2D0A
    67a0:	90 91 0b 2d 	lds	r25, 0x2D0B
    67a4:	a0 91 0c 2d 	lds	r26, 0x2D0C
    67a8:	b0 91 0d 2d 	lds	r27, 0x2D0D
    67ac:	01 96       	adiw	r24, 0x01	; 1
    67ae:	a1 1d       	adc	r26, r1
    67b0:	b1 1d       	adc	r27, r1
    67b2:	80 93 0a 2d 	sts	0x2D0A, r24
    67b6:	90 93 0b 2d 	sts	0x2D0B, r25
    67ba:	a0 93 0c 2d 	sts	0x2D0C, r26
    67be:	b0 93 0d 2d 	sts	0x2D0D, r27
	
	if(recording){
    67c2:	80 91 e1 2c 	lds	r24, 0x2CE1
    67c6:	88 23       	and	r24, r24
    67c8:	09 f4       	brne	.+2      	; 0x67cc <__vector_83+0x76>
    67ca:	58 c2       	rjmp	.+1200   	; 0x6c7c <__vector_83+0x526>
		rtcBlockCounter++;
    67cc:	80 91 f6 2c 	lds	r24, 0x2CF6
    67d0:	8f 5f       	subi	r24, 0xFF	; 255
    67d2:	80 93 f6 2c 	sts	0x2CF6, r24
		if(rtcBlockCounter == 0){
    67d6:	88 23       	and	r24, r24
    67d8:	19 f4       	brne	.+6      	; 0x67e0 <__vector_83+0x8a>
			okToSendRTCBlock = true;
    67da:	81 e0       	ldi	r24, 0x01	; 1
    67dc:	80 93 f5 2c 	sts	0x2CF5, r24
		}
		
		if(wantToRecordTemperature && !okToSendTemperatureBuffer[temperatureBufferToWriteTo]){ 
    67e0:	80 91 25 26 	lds	r24, 0x2625
    67e4:	88 23       	and	r24, r24
    67e6:	09 f4       	brne	.+2      	; 0x67ea <__vector_83+0x94>
    67e8:	74 c0       	rjmp	.+232    	; 0x68d2 <__vector_83+0x17c>
    67ea:	80 91 e2 2c 	lds	r24, 0x2CE2
    67ee:	c8 2f       	mov	r28, r24
    67f0:	d0 e0       	ldi	r29, 0x00	; 0
    67f2:	fe 01       	movw	r30, r28
    67f4:	e6 52       	subi	r30, 0x26	; 38
    67f6:	fa 4a       	sbci	r31, 0xAA	; 170
    67f8:	80 81       	ld	r24, Z
    67fa:	88 23       	and	r24, r24
    67fc:	09 f0       	breq	.+2      	; 0x6800 <__vector_83+0xaa>
    67fe:	69 c0       	rjmp	.+210    	; 0x68d2 <__vector_83+0x17c>
			if(temperatureBufferCounter == 0){
    6800:	80 91 e3 2c 	lds	r24, 0x2CE3
    6804:	90 91 e4 2c 	lds	r25, 0x2CE4
    6808:	89 2b       	or	r24, r25
    680a:	61 f4       	brne	.+24     	; 0x6824 <__vector_83+0xce>
				temperatureSampleStartTime[temperatureBufferToWriteTo] = Time_Get32BitTimer();
    680c:	0e 94 86 03 	call	0x70c	; 0x70c <Time_Get32BitTimer>
    6810:	cc 0f       	add	r28, r28
    6812:	dd 1f       	adc	r29, r29
    6814:	cc 0f       	add	r28, r28
    6816:	dd 1f       	adc	r29, r29
    6818:	c8 5c       	subi	r28, 0xC8	; 200
    681a:	d9 4c       	sbci	r29, 0xC9	; 201
    681c:	68 83       	st	Y, r22
    681e:	79 83       	std	Y+1, r23	; 0x01
    6820:	8a 83       	std	Y+2, r24	; 0x02
    6822:	9b 83       	std	Y+3, r25	; 0x03
			}
			temperatureBuffer[temperatureBufferToWriteTo][temperatureBufferCounter] = Sensors_ReadTemperature();
    6824:	10 91 e2 2c 	lds	r17, 0x2CE2
    6828:	e0 90 e3 2c 	lds	r14, 0x2CE3
    682c:	f0 90 e4 2c 	lds	r15, 0x2CE4
    6830:	0e 94 b6 31 	call	0x636c	; 0x636c <Sensors_ReadTemperature>
    6834:	21 2f       	mov	r18, r17
    6836:	30 e0       	ldi	r19, 0x00	; 0
    6838:	f9 01       	movw	r30, r18
    683a:	b3 e0       	ldi	r27, 0x03	; 3
    683c:	ee 0f       	add	r30, r30
    683e:	ff 1f       	adc	r31, r31
    6840:	ba 95       	dec	r27
    6842:	e1 f7       	brne	.-8      	; 0x683c <__vector_83+0xe6>
    6844:	22 0f       	add	r18, r18
    6846:	33 1f       	adc	r19, r19
    6848:	e2 0f       	add	r30, r18
    684a:	f3 1f       	adc	r31, r19
    684c:	ee 0d       	add	r30, r14
    684e:	ff 1d       	adc	r31, r15
    6850:	ee 0f       	add	r30, r30
    6852:	ff 1f       	adc	r31, r31
    6854:	ef 5f       	subi	r30, 0xFF	; 255
    6856:	f9 4c       	sbci	r31, 0xC9	; 201
    6858:	80 83       	st	Z, r24
    685a:	91 83       	std	Z+1, r25	; 0x01
			quickTemperature = temperatureBuffer[temperatureBufferToWriteTo][temperatureBufferCounter]/10;
    685c:	40 91 e2 2c 	lds	r20, 0x2CE2
    6860:	c4 2f       	mov	r28, r20
    6862:	d0 e0       	ldi	r29, 0x00	; 0
    6864:	20 91 e3 2c 	lds	r18, 0x2CE3
    6868:	30 91 e4 2c 	lds	r19, 0x2CE4
    686c:	fe 01       	movw	r30, r28
    686e:	ee 0f       	add	r30, r30
    6870:	ff 1f       	adc	r31, r31
    6872:	ce 01       	movw	r24, r28
    6874:	53 e0       	ldi	r21, 0x03	; 3
    6876:	88 0f       	add	r24, r24
    6878:	99 1f       	adc	r25, r25
    687a:	5a 95       	dec	r21
    687c:	e1 f7       	brne	.-8      	; 0x6876 <__vector_83+0x120>
    687e:	e8 0f       	add	r30, r24
    6880:	f9 1f       	adc	r31, r25
    6882:	e2 0f       	add	r30, r18
    6884:	f3 1f       	adc	r31, r19
    6886:	ee 0f       	add	r30, r30
    6888:	ff 1f       	adc	r31, r31
    688a:	ef 5f       	subi	r30, 0xFF	; 255
    688c:	f9 4c       	sbci	r31, 0xC9	; 201
    688e:	80 81       	ld	r24, Z
    6890:	91 81       	ldd	r25, Z+1	; 0x01
    6892:	6a e0       	ldi	r22, 0x0A	; 10
    6894:	70 e0       	ldi	r23, 0x00	; 0
    6896:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <__udivmodhi4>
    689a:	60 93 1b 2d 	sts	0x2D1B, r22
			temperatureBufferCounter++;
    689e:	2f 5f       	subi	r18, 0xFF	; 255
    68a0:	3f 4f       	sbci	r19, 0xFF	; 255
    68a2:	20 93 e3 2c 	sts	0x2CE3, r18
    68a6:	30 93 e4 2c 	sts	0x2CE4, r19
			if(temperatureBufferCounter == temperatureNumberOfSamples){
    68aa:	2a 30       	cpi	r18, 0x0A	; 10
    68ac:	31 05       	cpc	r19, r1
    68ae:	c9 f4       	brne	.+50     	; 0x68e2 <__vector_83+0x18c>
				temperatureBufferCounter=0;
    68b0:	10 92 e3 2c 	sts	0x2CE3, r1
    68b4:	10 92 e4 2c 	sts	0x2CE4, r1
				okToSendTemperatureBuffer[temperatureBufferToWriteTo] = true;
    68b8:	c6 52       	subi	r28, 0x26	; 38
    68ba:	da 4a       	sbci	r29, 0xAA	; 170
    68bc:	81 e0       	ldi	r24, 0x01	; 1
    68be:	88 83       	st	Y, r24
				temperatureBufferToWriteTo++;
    68c0:	84 2f       	mov	r24, r20
    68c2:	8f 5f       	subi	r24, 0xFF	; 255
    68c4:	80 93 e2 2c 	sts	0x2CE2, r24
				if(temperatureBufferToWriteTo == temperatureNumberOfBuffers){
    68c8:	82 30       	cpi	r24, 0x02	; 2
    68ca:	59 f4       	brne	.+22     	; 0x68e2 <__vector_83+0x18c>
					temperatureBufferToWriteTo = 0;
    68cc:	10 92 e2 2c 	sts	0x2CE2, r1
    68d0:	08 c0       	rjmp	.+16     	; 0x68e2 <__vector_83+0x18c>
				}
			}
		} else {
			quickTemperature = Sensors_ReadTemperature()/10;
    68d2:	0e 94 b6 31 	call	0x636c	; 0x636c <Sensors_ReadTemperature>
    68d6:	6a e0       	ldi	r22, 0x0A	; 10
    68d8:	70 e0       	ldi	r23, 0x00	; 0
    68da:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <__udivmodhi4>
    68de:	60 93 1b 2d 	sts	0x2D1B, r22
		}
		
		
		if(wantToRecordHumidity && !okToSendHumidityBuffer[humidityBufferToWriteTo]){ 
    68e2:	80 91 27 26 	lds	r24, 0x2627
    68e6:	88 23       	and	r24, r24
    68e8:	09 f4       	brne	.+2      	; 0x68ec <__vector_83+0x196>
    68ea:	74 c0       	rjmp	.+232    	; 0x69d4 <__vector_83+0x27e>
    68ec:	80 91 e5 2c 	lds	r24, 0x2CE5
    68f0:	c8 2f       	mov	r28, r24
    68f2:	d0 e0       	ldi	r29, 0x00	; 0
    68f4:	fe 01       	movw	r30, r28
    68f6:	e5 5d       	subi	r30, 0xD5	; 213
    68f8:	f7 4c       	sbci	r31, 0xC7	; 199
    68fa:	80 81       	ld	r24, Z
    68fc:	88 23       	and	r24, r24
    68fe:	09 f0       	breq	.+2      	; 0x6902 <__vector_83+0x1ac>
    6900:	69 c0       	rjmp	.+210    	; 0x69d4 <__vector_83+0x27e>
			if(humidityBufferCounter == 0){
    6902:	80 91 e6 2c 	lds	r24, 0x2CE6
    6906:	90 91 e7 2c 	lds	r25, 0x2CE7
    690a:	89 2b       	or	r24, r25
    690c:	61 f4       	brne	.+24     	; 0x6926 <__vector_83+0x1d0>
				humiditySampleStartTime[humidityBufferToWriteTo] = Time_Get32BitTimer();
    690e:	0e 94 86 03 	call	0x70c	; 0x70c <Time_Get32BitTimer>
    6912:	cc 0f       	add	r28, r28
    6914:	dd 1f       	adc	r29, r29
    6916:	cc 0f       	add	r28, r28
    6918:	dd 1f       	adc	r29, r29
    691a:	cd 5d       	subi	r28, 0xDD	; 221
    691c:	d7 4c       	sbci	r29, 0xC7	; 199
    691e:	68 83       	st	Y, r22
    6920:	79 83       	std	Y+1, r23	; 0x01
    6922:	8a 83       	std	Y+2, r24	; 0x02
    6924:	9b 83       	std	Y+3, r25	; 0x03
			}
			humidityBuffer[humidityBufferToWriteTo][humidityBufferCounter] = Sensors_ReadHumidity();
    6926:	10 91 e5 2c 	lds	r17, 0x2CE5
    692a:	e0 90 e6 2c 	lds	r14, 0x2CE6
    692e:	f0 90 e7 2c 	lds	r15, 0x2CE7
    6932:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <Sensors_ReadHumidity>
    6936:	21 2f       	mov	r18, r17
    6938:	30 e0       	ldi	r19, 0x00	; 0
    693a:	f9 01       	movw	r30, r18
    693c:	b3 e0       	ldi	r27, 0x03	; 3
    693e:	ee 0f       	add	r30, r30
    6940:	ff 1f       	adc	r31, r31
    6942:	ba 95       	dec	r27
    6944:	e1 f7       	brne	.-8      	; 0x693e <__vector_83+0x1e8>
    6946:	22 0f       	add	r18, r18
    6948:	33 1f       	adc	r19, r19
    694a:	e2 0f       	add	r30, r18
    694c:	f3 1f       	adc	r31, r19
    694e:	ee 0d       	add	r30, r14
    6950:	ff 1d       	adc	r31, r15
    6952:	ee 0f       	add	r30, r30
    6954:	ff 1f       	adc	r31, r31
    6956:	e4 51       	subi	r30, 0x14	; 20
    6958:	f9 4a       	sbci	r31, 0xA9	; 169
    695a:	80 83       	st	Z, r24
    695c:	91 83       	std	Z+1, r25	; 0x01
			quickHumidity = humidityBuffer[humidityBufferToWriteTo][humidityBufferCounter]/10;
    695e:	40 91 e5 2c 	lds	r20, 0x2CE5
    6962:	c4 2f       	mov	r28, r20
    6964:	d0 e0       	ldi	r29, 0x00	; 0
    6966:	20 91 e6 2c 	lds	r18, 0x2CE6
    696a:	30 91 e7 2c 	lds	r19, 0x2CE7
    696e:	fe 01       	movw	r30, r28
    6970:	ee 0f       	add	r30, r30
    6972:	ff 1f       	adc	r31, r31
    6974:	ce 01       	movw	r24, r28
    6976:	53 e0       	ldi	r21, 0x03	; 3
    6978:	88 0f       	add	r24, r24
    697a:	99 1f       	adc	r25, r25
    697c:	5a 95       	dec	r21
    697e:	e1 f7       	brne	.-8      	; 0x6978 <__vector_83+0x222>
    6980:	e8 0f       	add	r30, r24
    6982:	f9 1f       	adc	r31, r25
    6984:	e2 0f       	add	r30, r18
    6986:	f3 1f       	adc	r31, r19
    6988:	ee 0f       	add	r30, r30
    698a:	ff 1f       	adc	r31, r31
    698c:	e4 51       	subi	r30, 0x14	; 20
    698e:	f9 4a       	sbci	r31, 0xA9	; 169
    6990:	80 81       	ld	r24, Z
    6992:	91 81       	ldd	r25, Z+1	; 0x01
    6994:	6a e0       	ldi	r22, 0x0A	; 10
    6996:	70 e0       	ldi	r23, 0x00	; 0
    6998:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <__udivmodhi4>
    699c:	60 93 1c 2d 	sts	0x2D1C, r22
			humidityBufferCounter++;
    69a0:	2f 5f       	subi	r18, 0xFF	; 255
    69a2:	3f 4f       	sbci	r19, 0xFF	; 255
    69a4:	20 93 e6 2c 	sts	0x2CE6, r18
    69a8:	30 93 e7 2c 	sts	0x2CE7, r19
			if(humidityBufferCounter == humidityNumberOfSamples){
    69ac:	2a 30       	cpi	r18, 0x0A	; 10
    69ae:	31 05       	cpc	r19, r1
    69b0:	c9 f4       	brne	.+50     	; 0x69e4 <__vector_83+0x28e>
				humidityBufferCounter=0;
    69b2:	10 92 e6 2c 	sts	0x2CE6, r1
    69b6:	10 92 e7 2c 	sts	0x2CE7, r1
				okToSendHumidityBuffer[humidityBufferToWriteTo] = true;
    69ba:	c5 5d       	subi	r28, 0xD5	; 213
    69bc:	d7 4c       	sbci	r29, 0xC7	; 199
    69be:	81 e0       	ldi	r24, 0x01	; 1
    69c0:	88 83       	st	Y, r24
				humidityBufferToWriteTo++;
    69c2:	84 2f       	mov	r24, r20
    69c4:	8f 5f       	subi	r24, 0xFF	; 255
    69c6:	80 93 e5 2c 	sts	0x2CE5, r24
				if(humidityBufferToWriteTo == humidityNumberOfBuffers){
    69ca:	82 30       	cpi	r24, 0x02	; 2
    69cc:	59 f4       	brne	.+22     	; 0x69e4 <__vector_83+0x28e>
					humidityBufferToWriteTo = 0;
    69ce:	10 92 e5 2c 	sts	0x2CE5, r1
    69d2:	08 c0       	rjmp	.+16     	; 0x69e4 <__vector_83+0x28e>
				}
			}
		} else {
			quickHumidity = Sensors_ReadHumidity()/10;
    69d4:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <Sensors_ReadHumidity>
    69d8:	6a e0       	ldi	r22, 0x0A	; 10
    69da:	70 e0       	ldi	r23, 0x00	; 0
    69dc:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <__udivmodhi4>
    69e0:	60 93 1c 2d 	sts	0x2D1C, r22
		}
	  
		if(wantToRecordPressure && !okToSendPressureBuffer[pressureBufferToWriteTo]){ 
    69e4:	80 91 26 26 	lds	r24, 0x2626
    69e8:	88 23       	and	r24, r24
    69ea:	09 f4       	brne	.+2      	; 0x69ee <__vector_83+0x298>
    69ec:	74 c0       	rjmp	.+232    	; 0x6ad6 <__vector_83+0x380>
    69ee:	80 91 e8 2c 	lds	r24, 0x2CE8
    69f2:	c8 2f       	mov	r28, r24
    69f4:	d0 e0       	ldi	r29, 0x00	; 0
    69f6:	fe 01       	movw	r30, r28
    69f8:	ee 50       	subi	r30, 0x0E	; 14
    69fa:	f9 4c       	sbci	r31, 0xC9	; 201
    69fc:	80 81       	ld	r24, Z
    69fe:	88 23       	and	r24, r24
    6a00:	09 f0       	breq	.+2      	; 0x6a04 <__vector_83+0x2ae>
    6a02:	69 c0       	rjmp	.+210    	; 0x6ad6 <__vector_83+0x380>
			if(pressureBufferCounter == 0){
    6a04:	80 91 e9 2c 	lds	r24, 0x2CE9
    6a08:	90 91 ea 2c 	lds	r25, 0x2CEA
    6a0c:	89 2b       	or	r24, r25
    6a0e:	61 f4       	brne	.+24     	; 0x6a28 <__vector_83+0x2d2>
				pressureSampleStartTime[pressureBufferToWriteTo] = Time_Get32BitTimer();
    6a10:	0e 94 86 03 	call	0x70c	; 0x70c <Time_Get32BitTimer>
    6a14:	cc 0f       	add	r28, r28
    6a16:	dd 1f       	adc	r29, r29
    6a18:	cc 0f       	add	r28, r28
    6a1a:	dd 1f       	adc	r29, r29
    6a1c:	ce 52       	subi	r28, 0x2E	; 46
    6a1e:	da 4a       	sbci	r29, 0xAA	; 170
    6a20:	68 83       	st	Y, r22
    6a22:	79 83       	std	Y+1, r23	; 0x01
    6a24:	8a 83       	std	Y+2, r24	; 0x02
    6a26:	9b 83       	std	Y+3, r25	; 0x03
			}
			pressureBuffer[pressureBufferToWriteTo][pressureBufferCounter] = Sensors_ReadPressure();
    6a28:	10 91 e8 2c 	lds	r17, 0x2CE8
    6a2c:	e0 90 e9 2c 	lds	r14, 0x2CE9
    6a30:	f0 90 ea 2c 	lds	r15, 0x2CEA
    6a34:	0e 94 4f 32 	call	0x649e	; 0x649e <Sensors_ReadPressure>
    6a38:	21 2f       	mov	r18, r17
    6a3a:	30 e0       	ldi	r19, 0x00	; 0
    6a3c:	f9 01       	movw	r30, r18
    6a3e:	13 e0       	ldi	r17, 0x03	; 3
    6a40:	ee 0f       	add	r30, r30
    6a42:	ff 1f       	adc	r31, r31
    6a44:	1a 95       	dec	r17
    6a46:	e1 f7       	brne	.-8      	; 0x6a40 <__vector_83+0x2ea>
    6a48:	22 0f       	add	r18, r18
    6a4a:	33 1f       	adc	r19, r19
    6a4c:	e2 0f       	add	r30, r18
    6a4e:	f3 1f       	adc	r31, r19
    6a50:	ee 0d       	add	r30, r14
    6a52:	ff 1d       	adc	r31, r15
    6a54:	ee 0f       	add	r30, r30
    6a56:	ff 1f       	adc	r31, r31
    6a58:	e6 5f       	subi	r30, 0xF6	; 246
    6a5a:	fa 4a       	sbci	r31, 0xAA	; 170
    6a5c:	80 83       	st	Z, r24
    6a5e:	91 83       	std	Z+1, r25	; 0x01
			
			quickPressure = pressureBuffer[pressureBufferToWriteTo][pressureBufferCounter]/10;
    6a60:	40 91 e8 2c 	lds	r20, 0x2CE8
    6a64:	c4 2f       	mov	r28, r20
    6a66:	d0 e0       	ldi	r29, 0x00	; 0
    6a68:	20 91 e9 2c 	lds	r18, 0x2CE9
    6a6c:	30 91 ea 2c 	lds	r19, 0x2CEA
    6a70:	fe 01       	movw	r30, r28
    6a72:	ee 0f       	add	r30, r30
    6a74:	ff 1f       	adc	r31, r31
    6a76:	ce 01       	movw	r24, r28
    6a78:	63 e0       	ldi	r22, 0x03	; 3
    6a7a:	88 0f       	add	r24, r24
    6a7c:	99 1f       	adc	r25, r25
    6a7e:	6a 95       	dec	r22
    6a80:	e1 f7       	brne	.-8      	; 0x6a7a <__vector_83+0x324>
    6a82:	e8 0f       	add	r30, r24
    6a84:	f9 1f       	adc	r31, r25
    6a86:	e2 0f       	add	r30, r18
    6a88:	f3 1f       	adc	r31, r19
    6a8a:	ee 0f       	add	r30, r30
    6a8c:	ff 1f       	adc	r31, r31
    6a8e:	e6 5f       	subi	r30, 0xF6	; 246
    6a90:	fa 4a       	sbci	r31, 0xAA	; 170
    6a92:	80 81       	ld	r24, Z
    6a94:	91 81       	ldd	r25, Z+1	; 0x01
    6a96:	6a e0       	ldi	r22, 0x0A	; 10
    6a98:	70 e0       	ldi	r23, 0x00	; 0
    6a9a:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <__udivmodhi4>
    6a9e:	60 93 1d 2d 	sts	0x2D1D, r22
			pressureBufferCounter++;
    6aa2:	2f 5f       	subi	r18, 0xFF	; 255
    6aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    6aa6:	20 93 e9 2c 	sts	0x2CE9, r18
    6aaa:	30 93 ea 2c 	sts	0x2CEA, r19
			if(pressureBufferCounter == pressureNumberOfSamples){
    6aae:	2a 30       	cpi	r18, 0x0A	; 10
    6ab0:	31 05       	cpc	r19, r1
    6ab2:	c9 f4       	brne	.+50     	; 0x6ae6 <__vector_83+0x390>
				pressureBufferCounter=0;
    6ab4:	10 92 e9 2c 	sts	0x2CE9, r1
    6ab8:	10 92 ea 2c 	sts	0x2CEA, r1
				okToSendPressureBuffer[pressureBufferToWriteTo] = true;
    6abc:	ce 50       	subi	r28, 0x0E	; 14
    6abe:	d9 4c       	sbci	r29, 0xC9	; 201
    6ac0:	81 e0       	ldi	r24, 0x01	; 1
    6ac2:	88 83       	st	Y, r24
				pressureBufferToWriteTo++;
    6ac4:	84 2f       	mov	r24, r20
    6ac6:	8f 5f       	subi	r24, 0xFF	; 255
    6ac8:	80 93 e8 2c 	sts	0x2CE8, r24
				if(pressureBufferToWriteTo == pressureNumberOfBuffers){
    6acc:	82 30       	cpi	r24, 0x02	; 2
    6ace:	59 f4       	brne	.+22     	; 0x6ae6 <__vector_83+0x390>
					pressureBufferToWriteTo = 0;
    6ad0:	10 92 e8 2c 	sts	0x2CE8, r1
    6ad4:	08 c0       	rjmp	.+16     	; 0x6ae6 <__vector_83+0x390>
				}
			}
		} else {
			quickPressure = Sensors_ReadPressure()/10;
    6ad6:	0e 94 4f 32 	call	0x649e	; 0x649e <Sensors_ReadPressure>
    6ada:	6a e0       	ldi	r22, 0x0A	; 10
    6adc:	70 e0       	ldi	r23, 0x00	; 0
    6ade:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <__udivmodhi4>
    6ae2:	60 93 1d 2d 	sts	0x2D1D, r22
		}
		

		if(wantToRecordLight&& !okToSendLightBuffer[lightBufferToWriteTo]){
    6ae6:	80 91 28 26 	lds	r24, 0x2628
    6aea:	88 23       	and	r24, r24
    6aec:	09 f4       	brne	.+2      	; 0x6af0 <__vector_83+0x39a>
    6aee:	de c0       	rjmp	.+444    	; 0x6cac <__vector_83+0x556>
    6af0:	e0 91 ee 2c 	lds	r30, 0x2CEE
    6af4:	f0 e0       	ldi	r31, 0x00	; 0
    6af6:	e2 56       	subi	r30, 0x62	; 98
    6af8:	f9 4c       	sbci	r31, 0xC9	; 201
    6afa:	80 81       	ld	r24, Z
    6afc:	88 23       	and	r24, r24
    6afe:	09 f0       	breq	.+2      	; 0x6b02 <__vector_83+0x3ac>
    6b00:	d5 c0       	rjmp	.+426    	; 0x6cac <__vector_83+0x556>

			Light_readColors();
    6b02:	0e 94 b1 30 	call	0x6162	; 0x6162 <Light_readColors>
			Light_readColors();
    6b06:	0e 94 b1 30 	call	0x6162	; 0x6162 <Light_readColors>
			Light_readColors();
    6b0a:	0e 94 b1 30 	call	0x6162	; 0x6162 <Light_readColors>
	colors[blue]  = colors8[5]*256 + colors8[4];
	colors[clear] = colors8[7]*256 + colors8[6];
}

uint16_t Light_returnColor(uint8_t color){
	return colors[color];
    6b0e:	80 91 f0 35 	lds	r24, 0x35F0
    6b12:	90 91 f1 35 	lds	r25, 0x35F1

			quickLight = Light_returnColor(clear);
    6b16:	80 93 1e 2d 	sts	0x2D1E, r24
    6b1a:	90 93 1f 2d 	sts	0x2D1F, r25

			for(uint8_t j = 0; j < 4; j++){
				tempLightResult[j] = 0;
				for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    6b1e:	e0 91 1a 2d 	lds	r30, 0x2D1A
    6b22:	f0 e0       	ldi	r31, 0x00	; 0
    6b24:	ee 0f       	add	r30, r30
    6b26:	ff 1f       	adc	r31, r31
    6b28:	ee 0f       	add	r30, r30
    6b2a:	ff 1f       	adc	r31, r31
    6b2c:	ea 57       	subi	r30, 0x7A	; 122
    6b2e:	f5 4d       	sbci	r31, 0xD5	; 213
    6b30:	a0 80       	ld	r10, Z
    6b32:	b1 80       	ldd	r11, Z+1	; 0x01
    6b34:	c2 80       	ldd	r12, Z+2	; 0x02
    6b36:	d3 80       	ldd	r13, Z+3	; 0x03
    6b38:	3c ea       	ldi	r19, 0xAC	; 172
    6b3a:	43 2e       	mov	r4, r19
    6b3c:	36 e3       	ldi	r19, 0x36	; 54
    6b3e:	53 2e       	mov	r5, r19
    6b40:	ca ee       	ldi	r28, 0xEA	; 234
    6b42:	d5 e3       	ldi	r29, 0x35	; 53
    6b44:	f2 01       	movw	r30, r4
			Light_readColors();

			quickLight = Light_returnColor(clear);

			for(uint8_t j = 0; j < 4; j++){
				tempLightResult[j] = 0;
    6b46:	10 82       	st	Z, r1
    6b48:	11 82       	std	Z+1, r1	; 0x01
    6b4a:	12 82       	std	Z+2, r1	; 0x02
    6b4c:	13 82       	std	Z+3, r1	; 0x03
				for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
					tempLightResult[j] += Light_returnColor(j);
    6b4e:	88 81       	ld	r24, Y
    6b50:	99 81       	ldd	r25, Y+1	; 0x01
    6b52:	3c 01       	movw	r6, r24
    6b54:	88 24       	eor	r8, r8
    6b56:	99 24       	eor	r9, r9
    6b58:	ee 24       	eor	r14, r14
    6b5a:	ff 24       	eor	r15, r15
    6b5c:	87 01       	movw	r16, r14
    6b5e:	a6 01       	movw	r20, r12
    6b60:	95 01       	movw	r18, r10
    6b62:	e6 0c       	add	r14, r6
    6b64:	f7 1c       	adc	r15, r7
    6b66:	08 1d       	adc	r16, r8
    6b68:	19 1d       	adc	r17, r9
    6b6a:	2a 0d       	add	r18, r10
    6b6c:	3b 1d       	adc	r19, r11
    6b6e:	4c 1d       	adc	r20, r12
    6b70:	5d 1d       	adc	r21, r13

			quickLight = Light_returnColor(clear);

			for(uint8_t j = 0; j < 4; j++){
				tempLightResult[j] = 0;
				for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
    6b72:	da 01       	movw	r26, r20
    6b74:	c9 01       	movw	r24, r18
    6b76:	8a 19       	sub	r24, r10
    6b78:	9b 09       	sbc	r25, r11
    6b7a:	ac 09       	sbc	r26, r12
    6b7c:	bd 09       	sbc	r27, r13
    6b7e:	80 50       	subi	r24, 0x00	; 0
    6b80:	9c 42       	sbci	r25, 0x2C	; 44
    6b82:	a1 40       	sbci	r26, 0x01	; 1
    6b84:	b0 40       	sbci	r27, 0x00	; 0
    6b86:	68 f3       	brcs	.-38     	; 0x6b62 <__vector_83+0x40c>
    6b88:	e1 92       	st	Z+, r14
    6b8a:	f1 92       	st	Z+, r15
    6b8c:	01 93       	st	Z+, r16
    6b8e:	11 93       	st	Z+, r17
    6b90:	22 96       	adiw	r28, 0x02	; 2
			Light_readColors();
			Light_readColors();

			quickLight = Light_returnColor(clear);

			for(uint8_t j = 0; j < 4; j++){
    6b92:	86 e3       	ldi	r24, 0x36	; 54
    6b94:	ec 3b       	cpi	r30, 0xBC	; 188
    6b96:	f8 07       	cpc	r31, r24
    6b98:	b1 f6       	brne	.-84     	; 0x6b46 <__vector_83+0x3f0>
				tempLightResult[j] = 0;
				for(uint32_t i = 0; i < 76800; i+=resultMultiplier[gainSelector]){
					tempLightResult[j] += Light_returnColor(j);
				}
			}
			if(lightBufferCounter == 0){
    6b9a:	80 91 ef 2c 	lds	r24, 0x2CEF
    6b9e:	90 91 f0 2c 	lds	r25, 0x2CF0
    6ba2:	89 2b       	or	r24, r25
    6ba4:	81 f4       	brne	.+32     	; 0x6bc6 <__vector_83+0x470>
				lightSampleStartTime[lightBufferToWriteTo] = Time_Get32BitTimer();
    6ba6:	80 91 ee 2c 	lds	r24, 0x2CEE
    6baa:	c8 2f       	mov	r28, r24
    6bac:	d0 e0       	ldi	r29, 0x00	; 0
    6bae:	0e 94 86 03 	call	0x70c	; 0x70c <Time_Get32BitTimer>
    6bb2:	cc 0f       	add	r28, r28
    6bb4:	dd 1f       	adc	r29, r29
    6bb6:	cc 0f       	add	r28, r28
    6bb8:	dd 1f       	adc	r29, r29
    6bba:	c8 51       	subi	r28, 0x18	; 24
    6bbc:	d8 4c       	sbci	r29, 0xC8	; 200
    6bbe:	68 83       	st	Y, r22
    6bc0:	79 83       	std	Y+1, r23	; 0x01
    6bc2:	8a 83       	std	Y+2, r24	; 0x02
    6bc4:	9b 83       	std	Y+3, r25	; 0x03
    6bc6:	40 91 ef 2c 	lds	r20, 0x2CEF
    6bca:	50 91 f0 2c 	lds	r21, 0x2CF0
    6bce:	9a 01       	movw	r18, r20
			}
			for(uint8_t i = 0; i < lightNumberOfChannels; i++){
				
				lightBuffer[lightBufferToWriteTo][lightBufferCounter] = tempLightResult[i];
    6bd0:	68 e2       	ldi	r22, 0x28	; 40
    6bd2:	70 e0       	ldi	r23, 0x00	; 0
    6bd4:	10 91 ee 2c 	lds	r17, 0x2CEE
    6bd8:	a1 2f       	mov	r26, r17
    6bda:	b0 e0       	ldi	r27, 0x00	; 0
    6bdc:	a6 9f       	mul	r26, r22
    6bde:	f0 01       	movw	r30, r0
    6be0:	a7 9f       	mul	r26, r23
    6be2:	f0 0d       	add	r31, r0
    6be4:	b6 9f       	mul	r27, r22
    6be6:	f0 0d       	add	r31, r0
    6be8:	11 24       	eor	r1, r1
    6bea:	e2 0f       	add	r30, r18
    6bec:	f3 1f       	adc	r31, r19
    6bee:	ee 0f       	add	r30, r30
    6bf0:	ff 1f       	adc	r31, r31
    6bf2:	ee 5c       	subi	r30, 0xCE	; 206
    6bf4:	fa 4a       	sbci	r31, 0xAA	; 170
    6bf6:	e2 01       	movw	r28, r4
    6bf8:	88 81       	ld	r24, Y
    6bfa:	99 81       	ldd	r25, Y+1	; 0x01
    6bfc:	80 83       	st	Z, r24
    6bfe:	91 83       	std	Z+1, r25	; 0x01
    6c00:	2f 5f       	subi	r18, 0xFF	; 255
    6c02:	3f 4f       	sbci	r19, 0xFF	; 255
    6c04:	84 e0       	ldi	r24, 0x04	; 4
    6c06:	90 e0       	ldi	r25, 0x00	; 0
    6c08:	48 0e       	add	r4, r24
    6c0a:	59 1e       	adc	r5, r25
				}
			}
			if(lightBufferCounter == 0){
				lightSampleStartTime[lightBufferToWriteTo] = Time_Get32BitTimer();
			}
			for(uint8_t i = 0; i < lightNumberOfChannels; i++){
    6c0c:	9c eb       	ldi	r25, 0xBC	; 188
    6c0e:	49 16       	cp	r4, r25
    6c10:	96 e3       	ldi	r25, 0x36	; 54
    6c12:	59 06       	cpc	r5, r25
    6c14:	f9 f6       	brne	.-66     	; 0x6bd4 <__vector_83+0x47e>
    6c16:	ca 01       	movw	r24, r20
    6c18:	04 96       	adiw	r24, 0x04	; 4
    6c1a:	80 93 ef 2c 	sts	0x2CEF, r24
    6c1e:	90 93 f0 2c 	sts	0x2CF0, r25
				
				lightBuffer[lightBufferToWriteTo][lightBufferCounter] = tempLightResult[i];
				lightBufferCounter++; 
				  
			}
			if(lightBufferCounter == (lightNumberOfSamples*lightNumberOfChannels)){
    6c22:	88 97       	sbiw	r24, 0x28	; 40
    6c24:	81 f4       	brne	.+32     	; 0x6c46 <__vector_83+0x4f0>
				lightBufferCounter=0;
    6c26:	10 92 ef 2c 	sts	0x2CEF, r1
    6c2a:	10 92 f0 2c 	sts	0x2CF0, r1
				okToSendLightBuffer[lightBufferToWriteTo] = true;
    6c2e:	a2 56       	subi	r26, 0x62	; 98
    6c30:	b9 4c       	sbci	r27, 0xC9	; 201
    6c32:	81 e0       	ldi	r24, 0x01	; 1
    6c34:	8c 93       	st	X, r24
				lightBufferToWriteTo++;
    6c36:	81 2f       	mov	r24, r17
    6c38:	8f 5f       	subi	r24, 0xFF	; 255
    6c3a:	80 93 ee 2c 	sts	0x2CEE, r24
				if(lightBufferToWriteTo == lightNumberOfBuffers){
    6c3e:	82 30       	cpi	r24, 0x02	; 2
    6c40:	11 f4       	brne	.+4      	; 0x6c46 <__vector_83+0x4f0>
					lightBufferToWriteTo = 0;
    6c42:	10 92 ee 2c 	sts	0x2CEE, r1
    6c46:	20 91 f0 35 	lds	r18, 0x35F0
    6c4a:	30 91 f1 35 	lds	r19, 0x35F1
				}
			}
		
			if((Light_returnColor(clear) > 49000) && (gainSelector!= 0)){			// saturated -> decrease gain
    6c4e:	6f eb       	ldi	r22, 0xBF	; 191
    6c50:	29 36       	cpi	r18, 0x69	; 105
    6c52:	36 07       	cpc	r19, r22
    6c54:	30 f0       	brcs	.+12     	; 0x6c62 <__vector_83+0x50c>
    6c56:	80 91 1a 2d 	lds	r24, 0x2D1A
    6c5a:	88 23       	and	r24, r24
    6c5c:	11 f0       	breq	.+4      	; 0x6c62 <__vector_83+0x50c>
				gainSelector--;
    6c5e:	81 50       	subi	r24, 0x01	; 1
    6c60:	08 c0       	rjmp	.+16     	; 0x6c72 <__vector_83+0x51c>
				Light_setGain();
			} else if ((Light_returnColor(clear) < 16000) && (gainSelector!= 8)){			// too low  -> increase gain
    6c62:	20 58       	subi	r18, 0x80	; 128
    6c64:	3e 43       	sbci	r19, 0x3E	; 62
    6c66:	60 f5       	brcc	.+88     	; 0x6cc0 <__vector_83+0x56a>
    6c68:	80 91 1a 2d 	lds	r24, 0x2D1A
    6c6c:	88 30       	cpi	r24, 0x08	; 8
    6c6e:	41 f1       	breq	.+80     	; 0x6cc0 <__vector_83+0x56a>
				gainSelector++;
    6c70:	8f 5f       	subi	r24, 0xFF	; 255
    6c72:	80 93 1a 2d 	sts	0x2D1A, r24
				Light_setGain();
    6c76:	0e 94 44 31 	call	0x6288	; 0x6288 <Light_setGain>
    6c7a:	22 c0       	rjmp	.+68     	; 0x6cc0 <__vector_83+0x56a>
			Light_readColors();
			quickLight = Light_returnColor(clear);
		}

	} else {
		quickTemperature = Sensors_ReadTemperature()/10;
    6c7c:	0e 94 b6 31 	call	0x636c	; 0x636c <Sensors_ReadTemperature>
    6c80:	6a e0       	ldi	r22, 0x0A	; 10
    6c82:	70 e0       	ldi	r23, 0x00	; 0
    6c84:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <__udivmodhi4>
    6c88:	60 93 1b 2d 	sts	0x2D1B, r22
		quickHumidity = Sensors_ReadHumidity()/10;
    6c8c:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <Sensors_ReadHumidity>
    6c90:	6a e0       	ldi	r22, 0x0A	; 10
    6c92:	70 e0       	ldi	r23, 0x00	; 0
    6c94:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <__udivmodhi4>
    6c98:	60 93 1c 2d 	sts	0x2D1C, r22
		quickPressure = Sensors_ReadPressure()/10;
    6c9c:	0e 94 4f 32 	call	0x649e	; 0x649e <Sensors_ReadPressure>
    6ca0:	6a e0       	ldi	r22, 0x0A	; 10
    6ca2:	70 e0       	ldi	r23, 0x00	; 0
    6ca4:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <__udivmodhi4>
    6ca8:	60 93 1d 2d 	sts	0x2D1D, r22
		Light_readColors();
    6cac:	0e 94 b1 30 	call	0x6162	; 0x6162 <Light_readColors>
    6cb0:	80 91 f0 35 	lds	r24, 0x35F0
    6cb4:	90 91 f1 35 	lds	r25, 0x35F1
		quickLight = Light_returnColor(clear);
    6cb8:	80 93 1e 2d 	sts	0x2D1E, r24
    6cbc:	90 93 1f 2d 	sts	0x2D1F, r25
	}




}
    6cc0:	ff 91       	pop	r31
    6cc2:	ef 91       	pop	r30
    6cc4:	df 91       	pop	r29
    6cc6:	cf 91       	pop	r28
    6cc8:	bf 91       	pop	r27
    6cca:	af 91       	pop	r26
    6ccc:	9f 91       	pop	r25
    6cce:	8f 91       	pop	r24
    6cd0:	7f 91       	pop	r23
    6cd2:	6f 91       	pop	r22
    6cd4:	5f 91       	pop	r21
    6cd6:	4f 91       	pop	r20
    6cd8:	3f 91       	pop	r19
    6cda:	2f 91       	pop	r18
    6cdc:	1f 91       	pop	r17
    6cde:	0f 91       	pop	r16
    6ce0:	ff 90       	pop	r15
    6ce2:	ef 90       	pop	r14
    6ce4:	df 90       	pop	r13
    6ce6:	cf 90       	pop	r12
    6ce8:	bf 90       	pop	r11
    6cea:	af 90       	pop	r10
    6cec:	9f 90       	pop	r9
    6cee:	8f 90       	pop	r8
    6cf0:	7f 90       	pop	r7
    6cf2:	6f 90       	pop	r6
    6cf4:	5f 90       	pop	r5
    6cf6:	4f 90       	pop	r4
    6cf8:	0f 90       	pop	r0
    6cfa:	0b be       	out	0x3b, r0	; 59
    6cfc:	0f 90       	pop	r0
    6cfe:	0f be       	out	0x3f, r0	; 63
    6d00:	0f 90       	pop	r0
    6d02:	1f 90       	pop	r1
    6d04:	18 95       	reti

00006d06 <__vector_77>:

ISR(Sensors_Timer_7200HZ_vect)
{
    6d06:	1f 92       	push	r1
    6d08:	0f 92       	push	r0
    6d0a:	0f b6       	in	r0, 0x3f	; 63
    6d0c:	0f 92       	push	r0
    6d0e:	0b b6       	in	r0, 0x3b	; 59
    6d10:	0f 92       	push	r0
    6d12:	11 24       	eor	r1, r1
    6d14:	2f 93       	push	r18
    6d16:	3f 93       	push	r19
    6d18:	4f 93       	push	r20
    6d1a:	5f 93       	push	r21
    6d1c:	6f 93       	push	r22
    6d1e:	7f 93       	push	r23
    6d20:	8f 93       	push	r24
    6d22:	9f 93       	push	r25
    6d24:	af 93       	push	r26
    6d26:	bf 93       	push	r27
    6d28:	cf 93       	push	r28
    6d2a:	df 93       	push	r29
    6d2c:	ef 93       	push	r30
    6d2e:	ff 93       	push	r31
	/*if(okToSendMicrophoneBuffer[microphoneBufferToWriteTo]){
		Debug_SendByte(microphoneBufferToWriteTo + '0');
	}*/
	
	
	if(recording && wantToRecordFast && !okToSendMicrophoneBuffer[microphoneBufferToWriteTo]){
    6d30:	80 91 e1 2c 	lds	r24, 0x2CE1
    6d34:	88 23       	and	r24, r24
    6d36:	09 f4       	brne	.+2      	; 0x6d3a <__vector_77+0x34>
    6d38:	69 c0       	rjmp	.+210    	; 0x6e0c <__vector_77+0x106>
    6d3a:	80 91 e0 2c 	lds	r24, 0x2CE0
    6d3e:	88 23       	and	r24, r24
    6d40:	09 f4       	brne	.+2      	; 0x6d44 <__vector_77+0x3e>
    6d42:	64 c0       	rjmp	.+200    	; 0x6e0c <__vector_77+0x106>
    6d44:	80 91 eb 2c 	lds	r24, 0x2CEB
    6d48:	c8 2f       	mov	r28, r24
    6d4a:	d0 e0       	ldi	r29, 0x00	; 0
    6d4c:	fe 01       	movw	r30, r28
    6d4e:	e7 51       	subi	r30, 0x17	; 23
    6d50:	f9 4a       	sbci	r31, 0xA9	; 169
    6d52:	80 81       	ld	r24, Z
    6d54:	88 23       	and	r24, r24
    6d56:	09 f0       	breq	.+2      	; 0x6d5a <__vector_77+0x54>
    6d58:	59 c0       	rjmp	.+178    	; 0x6e0c <__vector_77+0x106>
		if(microphoneBufferCounter == 0){
    6d5a:	80 91 ec 2c 	lds	r24, 0x2CEC
    6d5e:	90 91 ed 2c 	lds	r25, 0x2CED
    6d62:	89 2b       	or	r24, r25
    6d64:	81 f4       	brne	.+32     	; 0x6d86 <__vector_77+0x80>
			microphoneSampleStartTime[microphoneBufferToWriteTo] = Time_Get32BitTimer();
    6d66:	0e 94 86 03 	call	0x70c	; 0x70c <Time_Get32BitTimer>
    6d6a:	cc 0f       	add	r28, r28
    6d6c:	dd 1f       	adc	r29, r29
    6d6e:	cc 0f       	add	r28, r28
    6d70:	dd 1f       	adc	r29, r29
    6d72:	c0 56       	subi	r28, 0x60	; 96
    6d74:	d9 4c       	sbci	r29, 0xC9	; 201
    6d76:	68 83       	st	Y, r22
    6d78:	79 83       	std	Y+1, r23	; 0x01
    6d7a:	8a 83       	std	Y+2, r24	; 0x02
    6d7c:	9b 83       	std	Y+3, r25	; 0x03
			/*if(lastBufferIWroteTo == microphoneBufferToWriteTo){
				sprintf(tempDebug, "Possible Corruption At: %lu", UNIX_Time);		
				Debug_SendString(tempDebug, true);
			}*/
			lastBufferIWroteTo = microphoneBufferToWriteTo;
    6d7e:	80 91 eb 2c 	lds	r24, 0x2CEB
    6d82:	80 93 2b 2d 	sts	0x2D2B, r24
			
		}
		microphoneBuffer[microphoneBufferToWriteTo][microphoneBufferCounter] = Sensors_ReadMicrophone();
    6d86:	30 91 eb 2c 	lds	r19, 0x2CEB
    6d8a:	a3 2f       	mov	r26, r19
    6d8c:	b0 e0       	ldi	r27, 0x00	; 0
    6d8e:	40 91 ec 2c 	lds	r20, 0x2CEC
    6d92:	50 91 ed 2c 	lds	r21, 0x2CED

    return tmp2;
}

uint8_t Sensors_ReadMicrophone(void){
	return micCounter++;
    6d96:	20 91 2a 2d 	lds	r18, 0x2D2A
    6d9a:	2f 5f       	subi	r18, 0xFF	; 255
    6d9c:	20 93 2a 2d 	sts	0x2D2A, r18
    6da0:	21 50       	subi	r18, 0x01	; 1
				Debug_SendString(tempDebug, true);
			}*/
			lastBufferIWroteTo = microphoneBufferToWriteTo;
			
		}
		microphoneBuffer[microphoneBufferToWriteTo][microphoneBufferCounter] = Sensors_ReadMicrophone();
    6da2:	80 ed       	ldi	r24, 0xD0	; 208
    6da4:	97 e0       	ldi	r25, 0x07	; 7
    6da6:	a8 9f       	mul	r26, r24
    6da8:	f0 01       	movw	r30, r0
    6daa:	a9 9f       	mul	r26, r25
    6dac:	f0 0d       	add	r31, r0
    6dae:	b8 9f       	mul	r27, r24
    6db0:	f0 0d       	add	r31, r0
    6db2:	11 24       	eor	r1, r1
    6db4:	e4 0f       	add	r30, r20
    6db6:	f5 1f       	adc	r31, r21
    6db8:	e4 5a       	subi	r30, 0xA4	; 164
    6dba:	f7 4c       	sbci	r31, 0xC7	; 199
    6dbc:	20 83       	st	Z, r18
		
		micSampleCounter++;
    6dbe:	80 91 29 2d 	lds	r24, 0x2D29
    6dc2:	8f 5f       	subi	r24, 0xFF	; 255
    6dc4:	80 93 29 2d 	sts	0x2D29, r24
		if(micSampleCounter > 10){
    6dc8:	80 91 29 2d 	lds	r24, 0x2D29
    6dcc:	8b 30       	cpi	r24, 0x0B	; 11
    6dce:	20 f0       	brcs	.+8      	; 0x6dd8 <__vector_77+0xd2>
			micSampleCounter = 0;
    6dd0:	10 92 29 2d 	sts	0x2D29, r1
			quickMic = microphoneBuffer[microphoneBufferToWriteTo][microphoneBufferCounter];
    6dd4:	20 93 20 2d 	sts	0x2D20, r18
		}
		
		
		
		microphoneBufferCounter++;
    6dd8:	ca 01       	movw	r24, r20
    6dda:	01 96       	adiw	r24, 0x01	; 1
    6ddc:	80 93 ec 2c 	sts	0x2CEC, r24
    6de0:	90 93 ed 2c 	sts	0x2CED, r25
		if(microphoneBufferCounter == microphoneNumberOfSamples){
    6de4:	80 5d       	subi	r24, 0xD0	; 208
    6de6:	97 40       	sbci	r25, 0x07	; 7
    6de8:	e9 f4       	brne	.+58     	; 0x6e24 <__vector_77+0x11e>
			microphoneBufferCounter=0;
    6dea:	10 92 ec 2c 	sts	0x2CEC, r1
    6dee:	10 92 ed 2c 	sts	0x2CED, r1
			okToSendMicrophoneBuffer[microphoneBufferToWriteTo] = true;
    6df2:	a7 51       	subi	r26, 0x17	; 23
    6df4:	b9 4a       	sbci	r27, 0xA9	; 169
    6df6:	81 e0       	ldi	r24, 0x01	; 1
    6df8:	8c 93       	st	X, r24
			microphoneBufferToWriteTo++;
    6dfa:	83 2f       	mov	r24, r19
    6dfc:	8f 5f       	subi	r24, 0xFF	; 255
    6dfe:	80 93 eb 2c 	sts	0x2CEB, r24
			if(microphoneBufferToWriteTo == microphoneNumberOfBuffers){
    6e02:	83 30       	cpi	r24, 0x03	; 3
    6e04:	79 f4       	brne	.+30     	; 0x6e24 <__vector_77+0x11e>
				microphoneBufferToWriteTo = 0;
    6e06:	10 92 eb 2c 	sts	0x2CEB, r1
    6e0a:	0c c0       	rjmp	.+24     	; 0x6e24 <__vector_77+0x11e>
			}
		}

	} else {
		if(micSampleCounter == 0){
    6e0c:	80 91 29 2d 	lds	r24, 0x2D29
    6e10:	88 23       	and	r24, r24
    6e12:	41 f4       	brne	.+16     	; 0x6e24 <__vector_77+0x11e>

    return tmp2;
}

uint8_t Sensors_ReadMicrophone(void){
	return micCounter++;
    6e14:	80 91 2a 2d 	lds	r24, 0x2D2A
    6e18:	8f 5f       	subi	r24, 0xFF	; 255
    6e1a:	80 93 2a 2d 	sts	0x2D2A, r24
    6e1e:	81 50       	subi	r24, 0x01	; 1
			}
		}

	} else {
		if(micSampleCounter == 0){
			quickMic = Sensors_ReadMicrophone();
    6e20:	80 93 20 2d 	sts	0x2D20, r24
		}
	}
	micSampleCounter++;
    6e24:	80 91 29 2d 	lds	r24, 0x2D29
    6e28:	8f 5f       	subi	r24, 0xFF	; 255
    6e2a:	80 93 29 2d 	sts	0x2D29, r24
}
    6e2e:	ff 91       	pop	r31
    6e30:	ef 91       	pop	r30
    6e32:	df 91       	pop	r29
    6e34:	cf 91       	pop	r28
    6e36:	bf 91       	pop	r27
    6e38:	af 91       	pop	r26
    6e3a:	9f 91       	pop	r25
    6e3c:	8f 91       	pop	r24
    6e3e:	7f 91       	pop	r23
    6e40:	6f 91       	pop	r22
    6e42:	5f 91       	pop	r21
    6e44:	4f 91       	pop	r20
    6e46:	3f 91       	pop	r19
    6e48:	2f 91       	pop	r18
    6e4a:	0f 90       	pop	r0
    6e4c:	0b be       	out	0x3b, r0	; 59
    6e4e:	0f 90       	pop	r0
    6e50:	0f be       	out	0x3f, r0	; 63
    6e52:	0f 90       	pop	r0
    6e54:	1f 90       	pop	r1
    6e56:	18 95       	reti

00006e58 <Uploader_getTime>:
		}
	}
	return true;
}

bool Uploader_getTime(void){
    6e58:	0f 93       	push	r16
    6e5a:	1f 93       	push	r17
    6e5c:	cf 93       	push	r28
    6e5e:	df 93       	push	r29
    uint32_t tempTime = 0;
    uint8_t timeOutCounter = 0;
    uint8_t commandCounter = 0;
    if(!Debug_SendByte('T')){
    6e60:	84 e5       	ldi	r24, 0x54	; 84
    6e62:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    6e66:	88 23       	and	r24, r24
    6e68:	09 f4       	brne	.+2      	; 0x6e6c <Uploader_getTime+0x14>
    6e6a:	45 c0       	rjmp	.+138    	; 0x6ef6 <Uploader_getTime+0x9e>
    6e6c:	00 e0       	ldi	r16, 0x00	; 0
    6e6e:	10 e0       	ldi	r17, 0x00	; 0
    6e70:	c6 e6       	ldi	r28, 0x66	; 102
    6e72:	de e0       	ldi	r29, 0x0E	; 14
		return false;
	}
    while(true){
        if(Debug_CharReadyToRead()){
    6e74:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
    6e78:	88 23       	and	r24, r24
    6e7a:	b1 f1       	breq	.+108    	; 0x6ee8 <Uploader_getTime+0x90>
            command[commandCounter+1] = Debug_GetByte(false);
    6e7c:	80 e0       	ldi	r24, 0x00	; 0
    6e7e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Debug_GetByte>
    6e82:	e1 2f       	mov	r30, r17
    6e84:	f0 e0       	ldi	r31, 0x00	; 0
    6e86:	e0 54       	subi	r30, 0x40	; 64
    6e88:	f9 4c       	sbci	r31, 0xC9	; 201
    6e8a:	81 83       	std	Z+1, r24	; 0x01
			if(!Debug_SendByte(command[commandCounter+1])){
    6e8c:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    6e90:	88 23       	and	r24, r24
    6e92:	89 f1       	breq	.+98     	; 0x6ef6 <Uploader_getTime+0x9e>
				return false;
			}
            commandCounter++;
    6e94:	1f 5f       	subi	r17, 0xFF	; 255
            if(commandCounter == 4){
    6e96:	14 30       	cpi	r17, 0x04	; 4
    6e98:	39 f5       	brne	.+78     	; 0x6ee8 <Uploader_getTime+0x90>
                tempTime = command[1];
    6e9a:	60 91 c1 36 	lds	r22, 0x36C1
    6e9e:	70 e0       	ldi	r23, 0x00	; 0
    6ea0:	80 e0       	ldi	r24, 0x00	; 0
    6ea2:	90 e0       	ldi	r25, 0x00	; 0
                tempTime <<= 8;
    6ea4:	98 2f       	mov	r25, r24
    6ea6:	87 2f       	mov	r24, r23
    6ea8:	76 2f       	mov	r23, r22
    6eaa:	66 27       	eor	r22, r22
                tempTime += command[2];
    6eac:	20 91 c2 36 	lds	r18, 0x36C2
    6eb0:	62 0f       	add	r22, r18
    6eb2:	71 1d       	adc	r23, r1
    6eb4:	81 1d       	adc	r24, r1
    6eb6:	91 1d       	adc	r25, r1
                tempTime <<= 8;
    6eb8:	98 2f       	mov	r25, r24
    6eba:	87 2f       	mov	r24, r23
    6ebc:	76 2f       	mov	r23, r22
    6ebe:	66 27       	eor	r22, r22
                tempTime += command[3];
    6ec0:	20 91 c3 36 	lds	r18, 0x36C3
    6ec4:	62 0f       	add	r22, r18
    6ec6:	71 1d       	adc	r23, r1
    6ec8:	81 1d       	adc	r24, r1
    6eca:	91 1d       	adc	r25, r1
                tempTime <<= 8;
    6ecc:	98 2f       	mov	r25, r24
    6ece:	87 2f       	mov	r24, r23
    6ed0:	76 2f       	mov	r23, r22
    6ed2:	66 27       	eor	r22, r22
                tempTime += command[4];
				
                Time_Set(tempTime);
    6ed4:	20 91 c4 36 	lds	r18, 0x36C4
    6ed8:	62 0f       	add	r22, r18
    6eda:	71 1d       	adc	r23, r1
    6edc:	81 1d       	adc	r24, r1
    6ede:	91 1d       	adc	r25, r1
    6ee0:	0e 94 05 03 	call	0x60a	; 0x60a <Time_Set>
    6ee4:	81 e0       	ldi	r24, 0x01	; 1
    6ee6:	08 c0       	rjmp	.+16     	; 0x6ef8 <Uploader_getTime+0xa0>
    6ee8:	ce 01       	movw	r24, r28
    6eea:	01 97       	sbiw	r24, 0x01	; 1
    6eec:	f1 f7       	brne	.-4      	; 0x6eea <Uploader_getTime+0x92>
                return true;
            }
        }
        _delay_ms(1);
        timeOutCounter++;
    6eee:	0f 5f       	subi	r16, 0xFF	; 255
        if(timeOutCounter > 100){
    6ef0:	05 36       	cpi	r16, 0x65	; 101
    6ef2:	09 f0       	breq	.+2      	; 0x6ef6 <Uploader_getTime+0x9e>
    6ef4:	bf cf       	rjmp	.-130    	; 0x6e74 <Uploader_getTime+0x1c>
    6ef6:	80 e0       	ldi	r24, 0x00	; 0
            return false;
        }
    }
	return true;
}
    6ef8:	df 91       	pop	r29
    6efa:	cf 91       	pop	r28
    6efc:	1f 91       	pop	r17
    6efe:	0f 91       	pop	r16
    6f00:	08 95       	ret

00006f02 <Uploader_eraseFile>:
    okToUpload = false;
    uploadPercentBS = 100;
    return true;
}

bool Uploader_eraseFile(void){
    6f02:	ff 92       	push	r15
    6f04:	0f 93       	push	r16
    6f06:	1f 93       	push	r17
    6f08:	cf 93       	push	r28
    6f0a:	df 93       	push	r29
    uint8_t timeOutCounter = 0;
    uint8_t commandCounter = 0;
    uint8_t numBytesToRead = 0;
    if(!Debug_SendByte('E')){
    6f0c:	85 e4       	ldi	r24, 0x45	; 69
    6f0e:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    6f12:	88 23       	and	r24, r24
    6f14:	09 f4       	brne	.+2      	; 0x6f18 <Uploader_eraseFile+0x16>
    6f16:	49 c0       	rjmp	.+146    	; 0x6faa <Uploader_eraseFile+0xa8>
    6f18:	ff 24       	eor	r15, r15
    6f1a:	10 e0       	ldi	r17, 0x00	; 0
    6f1c:	00 e0       	ldi	r16, 0x00	; 0
    6f1e:	c6 e6       	ldi	r28, 0x66	; 102
    6f20:	de e0       	ldi	r29, 0x0E	; 14
		return false;
	}
    while(true){
        if(Debug_CharReadyToRead()){
    6f22:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
    6f26:	88 23       	and	r24, r24
    6f28:	c1 f1       	breq	.+112    	; 0x6f9a <Uploader_eraseFile+0x98>
            if(commandCounter == 0){
    6f2a:	11 23       	and	r17, r17
    6f2c:	49 f4       	brne	.+18     	; 0x6f40 <Uploader_eraseFile+0x3e>
                numBytesToRead = Debug_GetByte(false);
    6f2e:	80 e0       	ldi	r24, 0x00	; 0
    6f30:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Debug_GetByte>
    6f34:	08 2f       	mov	r16, r24
                if(!Debug_SendByte(numBytesToRead)){
    6f36:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    6f3a:	88 23       	and	r24, r24
    6f3c:	69 f5       	brne	.+90     	; 0x6f98 <Uploader_eraseFile+0x96>
    6f3e:	35 c0       	rjmp	.+106    	; 0x6faa <Uploader_eraseFile+0xa8>
					return false;
				}
                commandCounter++;
            } else {
                fileToErase[commandCounter-1] = Debug_GetByte(false);
    6f40:	80 e0       	ldi	r24, 0x00	; 0
    6f42:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Debug_GetByte>
    6f46:	e1 2f       	mov	r30, r17
    6f48:	f0 e0       	ldi	r31, 0x00	; 0
    6f4a:	ee 50       	subi	r30, 0x0E	; 14
    6f4c:	fb 4a       	sbci	r31, 0xAB	; 171
    6f4e:	80 83       	st	Z, r24
                if(!Debug_SendByte(fileToErase[commandCounter-1])){
    6f50:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    6f54:	88 23       	and	r24, r24
    6f56:	49 f1       	breq	.+82     	; 0x6faa <Uploader_eraseFile+0xa8>
					return false;
				}
                commandCounter++;
    6f58:	1f 5f       	subi	r17, 0xFF	; 255
                if(commandCounter == (numBytesToRead+1)){
    6f5a:	80 2f       	mov	r24, r16
    6f5c:	90 e0       	ldi	r25, 0x00	; 0
    6f5e:	01 96       	adiw	r24, 0x01	; 1
    6f60:	e1 2f       	mov	r30, r17
    6f62:	f0 e0       	ldi	r31, 0x00	; 0
    6f64:	e8 17       	cp	r30, r24
    6f66:	f9 07       	cpc	r31, r25
    6f68:	c1 f4       	brne	.+48     	; 0x6f9a <Uploader_eraseFile+0x98>
                    fileToErase[numBytesToRead+1] = 0;
    6f6a:	ed 50       	subi	r30, 0x0D	; 13
    6f6c:	fb 4a       	sbci	r31, 0xAB	; 171
    6f6e:	10 82       	st	Z, r1
                    okToEraseFile = true;
    6f70:	81 e0       	ldi	r24, 0x01	; 1
    6f72:	80 93 4a 2d 	sts	0x2D4A, r24
                    while(okToEraseFile);
    6f76:	80 91 4a 2d 	lds	r24, 0x2D4A
    6f7a:	88 23       	and	r24, r24
    6f7c:	e1 f7       	brne	.-8      	; 0x6f76 <Uploader_eraseFile+0x74>
                    if(eraseFileReturn == FR_OK){
    6f7e:	80 91 5b 38 	lds	r24, 0x385B
    6f82:	88 23       	and	r24, r24
    6f84:	11 f4       	brne	.+4      	; 0x6f8a <Uploader_eraseFile+0x88>
                        if(!Debug_SendByte('T')){
    6f86:	84 e5       	ldi	r24, 0x54	; 84
    6f88:	01 c0       	rjmp	.+2      	; 0x6f8c <Uploader_eraseFile+0x8a>
							return false;
						}
                        return true;
                    } else {
                        if(!Debug_SendByte('F')){
    6f8a:	86 e4       	ldi	r24, 0x46	; 70
    6f8c:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    6f90:	88 23       	and	r24, r24
    6f92:	61 f0       	breq	.+24     	; 0x6fac <Uploader_eraseFile+0xaa>
    6f94:	81 e0       	ldi	r24, 0x01	; 1
    6f96:	0a c0       	rjmp	.+20     	; 0x6fac <Uploader_eraseFile+0xaa>
    6f98:	11 e0       	ldi	r17, 0x01	; 1
    6f9a:	ce 01       	movw	r24, r28
    6f9c:	01 97       	sbiw	r24, 0x01	; 1
    6f9e:	f1 f7       	brne	.-4      	; 0x6f9c <Uploader_eraseFile+0x9a>
                    }
                }
            }
        }
        _delay_ms(1);
        timeOutCounter++;
    6fa0:	f3 94       	inc	r15
        if(timeOutCounter > 100){
    6fa2:	85 e6       	ldi	r24, 0x65	; 101
    6fa4:	f8 16       	cp	r15, r24
    6fa6:	09 f0       	breq	.+2      	; 0x6faa <Uploader_eraseFile+0xa8>
    6fa8:	bc cf       	rjmp	.-136    	; 0x6f22 <Uploader_eraseFile+0x20>
    6faa:	80 e0       	ldi	r24, 0x00	; 0
            return false;
        }
    }
}
    6fac:	df 91       	pop	r29
    6fae:	cf 91       	pop	r28
    6fb0:	1f 91       	pop	r17
    6fb2:	0f 91       	pop	r16
    6fb4:	ff 90       	pop	r15
    6fb6:	08 95       	ret

00006fb8 <Uploader_ClearCRC>:
	return true;
}


void Uploader_ClearCRC(void){
    uploadCRC = 0xFFFFFFFF;
    6fb8:	8f ef       	ldi	r24, 0xFF	; 255
    6fba:	9f ef       	ldi	r25, 0xFF	; 255
    6fbc:	af ef       	ldi	r26, 0xFF	; 255
    6fbe:	bf ef       	ldi	r27, 0xFF	; 255
    6fc0:	80 93 55 38 	sts	0x3855, r24
    6fc4:	90 93 56 38 	sts	0x3856, r25
    6fc8:	a0 93 57 38 	sts	0x3857, r26
    6fcc:	b0 93 58 38 	sts	0x3858, r27
}
    6fd0:	08 95       	ret

00006fd2 <Uploader_WriteCRC>:

bool Uploader_WriteCRC(void){
    6fd2:	ef 92       	push	r14
    6fd4:	ff 92       	push	r15
    6fd6:	0f 93       	push	r16
    6fd8:	1f 93       	push	r17
    uint32_t tmpCRC = uploadCRC^0xFFFFFFFF;
    6fda:	e0 90 55 38 	lds	r14, 0x3855
    6fde:	f0 90 56 38 	lds	r15, 0x3856
    6fe2:	00 91 57 38 	lds	r16, 0x3857
    6fe6:	10 91 58 38 	lds	r17, 0x3858
    6fea:	e0 94       	com	r14
    6fec:	f0 94       	com	r15
    6fee:	00 95       	com	r16
    6ff0:	10 95       	com	r17
    if(!Debug_SendByte((tmpCRC >> 24) & 0xFF)){
    6ff2:	81 2f       	mov	r24, r17
    6ff4:	99 27       	eor	r25, r25
    6ff6:	aa 27       	eor	r26, r26
    6ff8:	bb 27       	eor	r27, r27
    6ffa:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    6ffe:	88 23       	and	r24, r24
    7000:	b1 f0       	breq	.+44     	; 0x702e <Uploader_WriteCRC+0x5c>
		return false;
	}
    if(!Debug_SendByte((tmpCRC >> 16) & 0xFF)){
    7002:	c8 01       	movw	r24, r16
    7004:	aa 27       	eor	r26, r26
    7006:	bb 27       	eor	r27, r27
    7008:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    700c:	88 23       	and	r24, r24
    700e:	79 f0       	breq	.+30     	; 0x702e <Uploader_WriteCRC+0x5c>
		return false;
	}
    if(!Debug_SendByte((tmpCRC >>  8) & 0xFF)){
    7010:	bb 27       	eor	r27, r27
    7012:	a1 2f       	mov	r26, r17
    7014:	90 2f       	mov	r25, r16
    7016:	8f 2d       	mov	r24, r15
    7018:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    701c:	88 23       	and	r24, r24
    701e:	39 f0       	breq	.+14     	; 0x702e <Uploader_WriteCRC+0x5c>
		return false;
	}
    if(!Debug_SendByte((tmpCRC >>  0) & 0xFF)){
    7020:	8e 2d       	mov	r24, r14
    7022:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    7026:	88 23       	and	r24, r24
    7028:	19 f0       	breq	.+6      	; 0x7030 <Uploader_WriteCRC+0x5e>
    702a:	81 e0       	ldi	r24, 0x01	; 1
    702c:	01 c0       	rjmp	.+2      	; 0x7030 <Uploader_WriteCRC+0x5e>
    702e:	80 e0       	ldi	r24, 0x00	; 0
		return false;
	}
	return true;
}
    7030:	1f 91       	pop	r17
    7032:	0f 91       	pop	r16
    7034:	ff 90       	pop	r15
    7036:	ef 90       	pop	r14
    7038:	08 95       	ret

0000703a <Uploader_uploadFile>:





bool Uploader_uploadFile(void){
    703a:	5f 92       	push	r5
    703c:	6f 92       	push	r6
    703e:	7f 92       	push	r7
    7040:	8f 92       	push	r8
    7042:	9f 92       	push	r9
    7044:	af 92       	push	r10
    7046:	bf 92       	push	r11
    7048:	cf 92       	push	r12
    704a:	df 92       	push	r13
    704c:	ef 92       	push	r14
    704e:	ff 92       	push	r15
    7050:	0f 93       	push	r16
    7052:	1f 93       	push	r17
    7054:	cf 93       	push	r28
    7056:	df 93       	push	r29
    uint8_t commandCounter = 0;
    uint8_t numBytesToRead = 0;
    uint32_t responseLength;
    bool gotFileName = false;
	
    uploading = true;
    7058:	81 e0       	ldi	r24, 0x01	; 1
    705a:	80 93 40 2d 	sts	0x2D40, r24
    705e:	88 ee       	ldi	r24, 0xE8	; 232
    7060:	93 e0       	ldi	r25, 0x03	; 3
    7062:	20 e7       	ldi	r18, 0x70	; 112
    7064:	31 e0       	ldi	r19, 0x01	; 1
    7066:	f9 01       	movw	r30, r18
    7068:	31 97       	sbiw	r30, 0x01	; 1
    706a:	f1 f7       	brne	.-4      	; 0x7068 <Uploader_uploadFile+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    706c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    706e:	d9 f7       	brne	.-10     	; 0x7066 <Uploader_uploadFile+0x2c>
    _delay_ms(100);
	
    if(!Debug_SendByte('D')){
    7070:	84 e4       	ldi	r24, 0x44	; 68
    7072:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    7076:	88 23       	and	r24, r24
    7078:	09 f4       	brne	.+2      	; 0x707c <Uploader_uploadFile+0x42>
    707a:	cd c1       	rjmp	.+922    	; 0x7416 <Uploader_uploadFile+0x3dc>
    707c:	ff 24       	eor	r15, r15
    707e:	10 e0       	ldi	r17, 0x00	; 0
    7080:	00 e0       	ldi	r16, 0x00	; 0
    7082:	c6 e6       	ldi	r28, 0x66	; 102
    7084:	de e0       	ldi	r29, 0x0E	; 14
		return false;
	}
	
    while(!gotFileName){
        if(Debug_CharReadyToRead()){
    7086:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
    708a:	88 23       	and	r24, r24
    708c:	49 f1       	breq	.+82     	; 0x70e0 <Uploader_uploadFile+0xa6>
            if(commandCounter == 0){
    708e:	11 23       	and	r17, r17
    7090:	61 f4       	brne	.+24     	; 0x70aa <Uploader_uploadFile+0x70>
                numBytesToRead = Debug_GetByte(false);
    7092:	80 e0       	ldi	r24, 0x00	; 0
    7094:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Debug_GetByte>
    7098:	08 2f       	mov	r16, r24
                if(!Debug_SendByte(numBytesToRead)){
    709a:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    709e:	88 23       	and	r24, r24
    70a0:	09 f4       	brne	.+2      	; 0x70a4 <Uploader_uploadFile+0x6a>
    70a2:	b9 c1       	rjmp	.+882    	; 0x7416 <Uploader_uploadFile+0x3dc>
    70a4:	20 e0       	ldi	r18, 0x00	; 0
    70a6:	11 e0       	ldi	r17, 0x01	; 1
    70a8:	1c c0       	rjmp	.+56     	; 0x70e2 <Uploader_uploadFile+0xa8>
					return false;
				}
                commandCounter++;
            } else {
                fileToUpload[commandCounter-1] = Debug_GetByte(false);
    70aa:	80 e0       	ldi	r24, 0x00	; 0
    70ac:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Debug_GetByte>
    70b0:	e1 2f       	mov	r30, r17
    70b2:	f0 e0       	ldi	r31, 0x00	; 0
    70b4:	ef 50       	subi	r30, 0x0F	; 15
    70b6:	fa 4c       	sbci	r31, 0xCA	; 202
    70b8:	80 83       	st	Z, r24
                if(!Debug_SendByte(fileToUpload[commandCounter-1])){
    70ba:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    70be:	88 23       	and	r24, r24
    70c0:	09 f4       	brne	.+2      	; 0x70c4 <Uploader_uploadFile+0x8a>
    70c2:	a9 c1       	rjmp	.+850    	; 0x7416 <Uploader_uploadFile+0x3dc>
					return false;
				}
                commandCounter++;
    70c4:	1f 5f       	subi	r17, 0xFF	; 255
                if(commandCounter == (numBytesToRead+1)){
    70c6:	e1 2f       	mov	r30, r17
    70c8:	f0 e0       	ldi	r31, 0x00	; 0
    70ca:	80 2f       	mov	r24, r16
    70cc:	90 e0       	ldi	r25, 0x00	; 0
    70ce:	01 96       	adiw	r24, 0x01	; 1
    70d0:	e8 17       	cp	r30, r24
    70d2:	f9 07       	cpc	r31, r25
    70d4:	29 f4       	brne	.+10     	; 0x70e0 <Uploader_uploadFile+0xa6>
                    fileToUpload[numBytesToRead+1] = 0;
    70d6:	ee 50       	subi	r30, 0x0E	; 14
    70d8:	fa 4c       	sbci	r31, 0xCA	; 202
    70da:	10 82       	st	Z, r1
    70dc:	21 e0       	ldi	r18, 0x01	; 1
    70de:	01 c0       	rjmp	.+2      	; 0x70e2 <Uploader_uploadFile+0xa8>
    70e0:	20 e0       	ldi	r18, 0x00	; 0
    70e2:	ce 01       	movw	r24, r28
    70e4:	01 97       	sbiw	r24, 0x01	; 1
    70e6:	f1 f7       	brne	.-4      	; 0x70e4 <Uploader_uploadFile+0xaa>
                    gotFileName = true;
                }
            }
        }
        _delay_ms(1);
        timeOutCounter++;
    70e8:	f3 94       	inc	r15
        if(timeOutCounter > 100){
    70ea:	85 e6       	ldi	r24, 0x65	; 101
    70ec:	f8 16       	cp	r15, r24
    70ee:	09 f4       	brne	.+2      	; 0x70f2 <Uploader_uploadFile+0xb8>
    70f0:	92 c1       	rjmp	.+804    	; 0x7416 <Uploader_uploadFile+0x3dc>
	
    if(!Debug_SendByte('D')){
		return false;
	}
	
    while(!gotFileName){
    70f2:	22 23       	and	r18, r18
    70f4:	41 f2       	breq	.-112    	; 0x7086 <Uploader_uploadFile+0x4c>
        if(timeOutCounter > 100){
            return false;
        }
    }
	
    okToOpenFileToUpload = true;
    70f6:	81 e0       	ldi	r24, 0x01	; 1
    70f8:	80 93 45 2d 	sts	0x2D45, r24
    while(!uploadFileOpened);
    70fc:	80 91 46 2d 	lds	r24, 0x2D46
    7100:	88 23       	and	r24, r24
    7102:	e1 f3       	breq	.-8      	; 0x70fc <Uploader_uploadFile+0xc2>
    7104:	80 e1       	ldi	r24, 0x10	; 16
    7106:	97 e2       	ldi	r25, 0x27	; 39
    7108:	20 e7       	ldi	r18, 0x70	; 112
    710a:	31 e0       	ldi	r19, 0x01	; 1
    710c:	f9 01       	movw	r30, r18
    710e:	31 97       	sbiw	r30, 0x01	; 1
    7110:	f1 f7       	brne	.-4      	; 0x710e <Uploader_uploadFile+0xd4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7112:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7114:	d9 f7       	brne	.-10     	; 0x710c <Uploader_uploadFile+0xd2>
	_delay_ms(1000);
	
	if(!fileExists){
    7116:	80 91 4b 2d 	lds	r24, 0x2D4B
    711a:	88 23       	and	r24, r24
    711c:	19 f5       	brne	.+70     	; 0x7164 <Uploader_uploadFile+0x12a>
        if(!Debug_SendByte(0)){
    711e:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    7122:	88 23       	and	r24, r24
    7124:	09 f4       	brne	.+2      	; 0x7128 <Uploader_uploadFile+0xee>
    7126:	77 c1       	rjmp	.+750    	; 0x7416 <Uploader_uploadFile+0x3dc>
			return false;
		}
        if(!Debug_SendByte(0)){
    7128:	80 e0       	ldi	r24, 0x00	; 0
    712a:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    712e:	88 23       	and	r24, r24
    7130:	09 f4       	brne	.+2      	; 0x7134 <Uploader_uploadFile+0xfa>
    7132:	71 c1       	rjmp	.+738    	; 0x7416 <Uploader_uploadFile+0x3dc>
			return false;
		}
        if(!Debug_SendByte(0)){
    7134:	80 e0       	ldi	r24, 0x00	; 0
    7136:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    713a:	88 23       	and	r24, r24
    713c:	09 f4       	brne	.+2      	; 0x7140 <Uploader_uploadFile+0x106>
    713e:	6b c1       	rjmp	.+726    	; 0x7416 <Uploader_uploadFile+0x3dc>
			return false;
		}
        if(!Debug_SendByte(0)){
    7140:	80 e0       	ldi	r24, 0x00	; 0
    7142:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    7146:	88 23       	and	r24, r24
    7148:	09 f4       	brne	.+2      	; 0x714c <Uploader_uploadFile+0x112>
    714a:	65 c1       	rjmp	.+714    	; 0x7416 <Uploader_uploadFile+0x3dc>
			return false;
		}
        okToCloseUploadFile = true;
    714c:	81 e0       	ldi	r24, 0x01	; 1
    714e:	80 93 49 2d 	sts	0x2D49, r24
        while(okToCloseUploadFile);
    7152:	80 91 49 2d 	lds	r24, 0x2D49
    7156:	88 23       	and	r24, r24
    7158:	e1 f7       	brne	.-8      	; 0x7152 <Uploader_uploadFile+0x118>
        uploading = false;
    715a:	10 92 40 2d 	sts	0x2D40, r1
        okToUpload = false;
    715e:	10 92 43 2d 	sts	0x2D43, r1
    7162:	57 c1       	rjmp	.+686    	; 0x7412 <Uploader_uploadFile+0x3d8>
	return true;
}


void Uploader_ClearCRC(void){
    uploadCRC = 0xFFFFFFFF;
    7164:	8f ef       	ldi	r24, 0xFF	; 255
    7166:	9f ef       	ldi	r25, 0xFF	; 255
    7168:	af ef       	ldi	r26, 0xFF	; 255
    716a:	bf ef       	ldi	r27, 0xFF	; 255
    716c:	80 93 55 38 	sts	0x3855, r24
    7170:	90 93 56 38 	sts	0x3856, r25
    7174:	a0 93 57 38 	sts	0x3857, r26
    7178:	b0 93 58 38 	sts	0x3858, r27
        okToUpload = false;
        return true;
    }
	
    Uploader_ClearCRC();
    responseLength = uploadFileSize + 4;
    717c:	e0 90 32 2d 	lds	r14, 0x2D32
    7180:	f0 90 33 2d 	lds	r15, 0x2D33
    7184:	00 91 34 2d 	lds	r16, 0x2D34
    7188:	10 91 35 2d 	lds	r17, 0x2D35
    718c:	84 e0       	ldi	r24, 0x04	; 4
    718e:	90 e0       	ldi	r25, 0x00	; 0
    7190:	a0 e0       	ldi	r26, 0x00	; 0
    7192:	b0 e0       	ldi	r27, 0x00	; 0
    7194:	e8 0e       	add	r14, r24
    7196:	f9 1e       	adc	r15, r25
    7198:	0a 1f       	adc	r16, r26
    719a:	1b 1f       	adc	r17, r27
	if(!Debug_SendByte((responseLength >> 24) & 0xFF)){
    719c:	81 2f       	mov	r24, r17
    719e:	99 27       	eor	r25, r25
    71a0:	aa 27       	eor	r26, r26
    71a2:	bb 27       	eor	r27, r27
    71a4:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    71a8:	88 23       	and	r24, r24
    71aa:	09 f4       	brne	.+2      	; 0x71ae <Uploader_uploadFile+0x174>
    71ac:	34 c1       	rjmp	.+616    	; 0x7416 <Uploader_uploadFile+0x3dc>
	   return false;
	}
	if(!Debug_SendByte((responseLength >> 16) & 0xFF)){
    71ae:	c8 01       	movw	r24, r16
    71b0:	aa 27       	eor	r26, r26
    71b2:	bb 27       	eor	r27, r27
    71b4:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    71b8:	88 23       	and	r24, r24
    71ba:	09 f4       	brne	.+2      	; 0x71be <Uploader_uploadFile+0x184>
    71bc:	2c c1       	rjmp	.+600    	; 0x7416 <Uploader_uploadFile+0x3dc>
		return false;
	}
	if(!Debug_SendByte((responseLength >>  8) & 0xFF)){
    71be:	bb 27       	eor	r27, r27
    71c0:	a1 2f       	mov	r26, r17
    71c2:	90 2f       	mov	r25, r16
    71c4:	8f 2d       	mov	r24, r15
    71c6:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    71ca:	88 23       	and	r24, r24
    71cc:	09 f4       	brne	.+2      	; 0x71d0 <Uploader_uploadFile+0x196>
    71ce:	23 c1       	rjmp	.+582    	; 0x7416 <Uploader_uploadFile+0x3dc>
		return false;
	}
	if(!Debug_SendByte((responseLength >>  0) & 0xFF)){
    71d0:	8e 2d       	mov	r24, r14
    71d2:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    71d6:	88 23       	and	r24, r24
    71d8:	09 f4       	brne	.+2      	; 0x71dc <Uploader_uploadFile+0x1a2>
    71da:	1d c1       	rjmp	.+570    	; 0x7416 <Uploader_uploadFile+0x3dc>
	   return false;
	}
	
    numberOfPacketsToUpload = uploadFileSize /  1000;
    71dc:	60 91 32 2d 	lds	r22, 0x2D32
    71e0:	70 91 33 2d 	lds	r23, 0x2D33
    71e4:	80 91 34 2d 	lds	r24, 0x2D34
    71e8:	90 91 35 2d 	lds	r25, 0x2D35
    71ec:	28 ee       	ldi	r18, 0xE8	; 232
    71ee:	33 e0       	ldi	r19, 0x03	; 3
    71f0:	40 e0       	ldi	r20, 0x00	; 0
    71f2:	50 e0       	ldi	r21, 0x00	; 0
    71f4:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    71f8:	c9 01       	movw	r24, r18
    71fa:	da 01       	movw	r26, r20
    71fc:	80 93 37 2d 	sts	0x2D37, r24
    7200:	90 93 38 2d 	sts	0x2D38, r25
    7204:	a0 93 39 2d 	sts	0x2D39, r26
    7208:	b0 93 3a 2d 	sts	0x2D3A, r27
    leftOverBytesToUpload   = uploadFileSize %  1000;
    720c:	60 91 32 2d 	lds	r22, 0x2D32
    7210:	70 91 33 2d 	lds	r23, 0x2D33
    7214:	80 91 34 2d 	lds	r24, 0x2D34
    7218:	90 91 35 2d 	lds	r25, 0x2D35
    721c:	28 ee       	ldi	r18, 0xE8	; 232
    721e:	33 e0       	ldi	r19, 0x03	; 3
    7220:	40 e0       	ldi	r20, 0x00	; 0
    7222:	50 e0       	ldi	r21, 0x00	; 0
    7224:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    7228:	9b 01       	movw	r18, r22
    722a:	ac 01       	movw	r20, r24
    722c:	20 93 3b 2d 	sts	0x2D3B, r18
    7230:	30 93 3c 2d 	sts	0x2D3C, r19
    7234:	40 93 3d 2d 	sts	0x2D3D, r20
    7238:	50 93 3e 2d 	sts	0x2D3E, r21
    723c:	66 24       	eor	r6, r6
    723e:	77 24       	eor	r7, r7
    7240:	43 01       	movw	r8, r6
    7242:	aa 24       	eor	r10, r10
    7244:	bb 24       	eor	r11, r11
    7246:	65 01       	movw	r12, r10
	
    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
        uploadFileBufferFull = false;
        okToFillUploadFileBuffer = true;
    7248:	55 24       	eor	r5, r5
    724a:	53 94       	inc	r5
    724c:	66 c0       	rjmp	.+204    	; 0x731a <Uploader_uploadFile+0x2e0>
	
    numberOfPacketsToUpload = uploadFileSize /  1000;
    leftOverBytesToUpload   = uploadFileSize %  1000;
	
    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
        uploadFileBufferFull = false;
    724e:	10 92 48 2d 	sts	0x2D48, r1
        okToFillUploadFileBuffer = true;
    7252:	50 92 47 2d 	sts	0x2D47, r5
		
        uploadPercentBS = (z*100)/numberOfPacketsToUpload;
    7256:	20 91 37 2d 	lds	r18, 0x2D37
    725a:	30 91 38 2d 	lds	r19, 0x2D38
    725e:	40 91 39 2d 	lds	r20, 0x2D39
    7262:	50 91 3a 2d 	lds	r21, 0x2D3A
    7266:	c6 01       	movw	r24, r12
    7268:	b5 01       	movw	r22, r10
    726a:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    726e:	20 93 36 2d 	sts	0x2D36, r18
        while(!uploadFileBufferFull);
    7272:	80 91 48 2d 	lds	r24, 0x2D48
    7276:	88 23       	and	r24, r24
    7278:	e1 f3       	breq	.-8      	; 0x7272 <Uploader_uploadFile+0x238>
    727a:	c8 ef       	ldi	r28, 0xF8	; 248
    727c:	d1 e3       	ldi	r29, 0x31	; 49
		for(uint16_t j = 0; j <  uploadChunkSize; j++){
			if(!Debug_SendByte(uploadFileBuffer[j])){
    727e:	88 81       	ld	r24, Y
    7280:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    7284:	88 23       	and	r24, r24
    7286:	09 f4       	brne	.+2      	; 0x728a <Uploader_uploadFile+0x250>
    7288:	c6 c0       	rjmp	.+396    	; 0x7416 <Uploader_uploadFile+0x3dc>
	return true;
}


void Uploader_UpdateCRC(uint8_t byte){
    uploadCRC = (uploadCRC >> 8) ^ crc_table[byte ^ (uploadCRC & 0xFF)];
    728a:	e0 90 55 38 	lds	r14, 0x3855
    728e:	f0 90 56 38 	lds	r15, 0x3856
    7292:	00 91 57 38 	lds	r16, 0x3857
    7296:	10 91 58 38 	lds	r17, 0x3858
    729a:	80 91 55 38 	lds	r24, 0x3855
    729e:	90 91 56 38 	lds	r25, 0x3856
    72a2:	a0 91 57 38 	lds	r26, 0x3857
    72a6:	b0 91 58 38 	lds	r27, 0x3858
    72aa:	90 70       	andi	r25, 0x00	; 0
    72ac:	a0 70       	andi	r26, 0x00	; 0
    72ae:	b0 70       	andi	r27, 0x00	; 0
    72b0:	29 91       	ld	r18, Y+
    72b2:	30 e0       	ldi	r19, 0x00	; 0
    72b4:	40 e0       	ldi	r20, 0x00	; 0
    72b6:	50 e0       	ldi	r21, 0x00	; 0
    72b8:	82 27       	eor	r24, r18
    72ba:	93 27       	eor	r25, r19
    72bc:	a4 27       	eor	r26, r20
    72be:	b5 27       	eor	r27, r21
    72c0:	88 0f       	add	r24, r24
    72c2:	99 1f       	adc	r25, r25
    72c4:	88 0f       	add	r24, r24
    72c6:	99 1f       	adc	r25, r25
    72c8:	8c 58       	subi	r24, 0x8C	; 140
    72ca:	99 4d       	sbci	r25, 0xD9	; 217
    72cc:	ef 2c       	mov	r14, r15
    72ce:	f0 2e       	mov	r15, r16
    72d0:	01 2f       	mov	r16, r17
    72d2:	11 27       	eor	r17, r17
    72d4:	fc 01       	movw	r30, r24
    72d6:	80 81       	ld	r24, Z
    72d8:	91 81       	ldd	r25, Z+1	; 0x01
    72da:	a2 81       	ldd	r26, Z+2	; 0x02
    72dc:	b3 81       	ldd	r27, Z+3	; 0x03
    72de:	e8 26       	eor	r14, r24
    72e0:	f9 26       	eor	r15, r25
    72e2:	0a 27       	eor	r16, r26
    72e4:	1b 27       	eor	r17, r27
    72e6:	e0 92 55 38 	sts	0x3855, r14
    72ea:	f0 92 56 38 	sts	0x3856, r15
    72ee:	00 93 57 38 	sts	0x3857, r16
    72f2:	10 93 58 38 	sts	0x3858, r17
        uploadFileBufferFull = false;
        okToFillUploadFileBuffer = true;
		
        uploadPercentBS = (z*100)/numberOfPacketsToUpload;
        while(!uploadFileBufferFull);
		for(uint16_t j = 0; j <  uploadChunkSize; j++){
    72f6:	f5 e3       	ldi	r31, 0x35	; 53
    72f8:	c0 3e       	cpi	r28, 0xE0	; 224
    72fa:	df 07       	cpc	r29, r31
    72fc:	09 f0       	breq	.+2      	; 0x7300 <Uploader_uploadFile+0x2c6>
    72fe:	bf cf       	rjmp	.-130    	; 0x727e <Uploader_uploadFile+0x244>
	}
	
    numberOfPacketsToUpload = uploadFileSize /  1000;
    leftOverBytesToUpload   = uploadFileSize %  1000;
	
    for(uint32_t z = 0; z < numberOfPacketsToUpload; z++){
    7300:	08 94       	sec
    7302:	61 1c       	adc	r6, r1
    7304:	71 1c       	adc	r7, r1
    7306:	81 1c       	adc	r8, r1
    7308:	91 1c       	adc	r9, r1
    730a:	84 e6       	ldi	r24, 0x64	; 100
    730c:	90 e0       	ldi	r25, 0x00	; 0
    730e:	a0 e0       	ldi	r26, 0x00	; 0
    7310:	b0 e0       	ldi	r27, 0x00	; 0
    7312:	a8 0e       	add	r10, r24
    7314:	b9 1e       	adc	r11, r25
    7316:	ca 1e       	adc	r12, r26
    7318:	db 1e       	adc	r13, r27
    731a:	80 91 37 2d 	lds	r24, 0x2D37
    731e:	90 91 38 2d 	lds	r25, 0x2D38
    7322:	a0 91 39 2d 	lds	r26, 0x2D39
    7326:	b0 91 3a 2d 	lds	r27, 0x2D3A
    732a:	68 16       	cp	r6, r24
    732c:	79 06       	cpc	r7, r25
    732e:	8a 06       	cpc	r8, r26
    7330:	9b 06       	cpc	r9, r27
    7332:	08 f4       	brcc	.+2      	; 0x7336 <Uploader_uploadFile+0x2fc>
    7334:	8c cf       	rjmp	.-232    	; 0x724e <Uploader_uploadFile+0x214>
			Uploader_UpdateCRC(uploadFileBuffer[j]);
			
			
		}
    }
    uploadFileBufferFull = false;
    7336:	10 92 48 2d 	sts	0x2D48, r1
    okToFillUploadFileBuffer = true;
    733a:	81 e0       	ldi	r24, 0x01	; 1
    733c:	80 93 47 2d 	sts	0x2D47, r24
    while(!uploadFileBufferFull);
    7340:	80 91 48 2d 	lds	r24, 0x2D48
    7344:	88 23       	and	r24, r24
    7346:	e1 f3       	breq	.-8      	; 0x7340 <Uploader_uploadFile+0x306>
    7348:	c8 ef       	ldi	r28, 0xF8	; 248
    734a:	d1 e3       	ldi	r29, 0x31	; 49
    734c:	aa 24       	eor	r10, r10
    734e:	bb 24       	eor	r11, r11
    7350:	65 01       	movw	r12, r10
    7352:	41 c0       	rjmp	.+130    	; 0x73d6 <Uploader_uploadFile+0x39c>
    for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
        if(!Debug_SendByte(uploadFileBuffer[j])){
    7354:	88 81       	ld	r24, Y
    7356:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    735a:	08 94       	sec
    735c:	a1 1c       	adc	r10, r1
    735e:	b1 1c       	adc	r11, r1
    7360:	c1 1c       	adc	r12, r1
    7362:	d1 1c       	adc	r13, r1
    7364:	88 23       	and	r24, r24
    7366:	09 f4       	brne	.+2      	; 0x736a <Uploader_uploadFile+0x330>
    7368:	56 c0       	rjmp	.+172    	; 0x7416 <Uploader_uploadFile+0x3dc>
	return true;
}


void Uploader_UpdateCRC(uint8_t byte){
    uploadCRC = (uploadCRC >> 8) ^ crc_table[byte ^ (uploadCRC & 0xFF)];
    736a:	e0 90 55 38 	lds	r14, 0x3855
    736e:	f0 90 56 38 	lds	r15, 0x3856
    7372:	00 91 57 38 	lds	r16, 0x3857
    7376:	10 91 58 38 	lds	r17, 0x3858
    737a:	80 91 55 38 	lds	r24, 0x3855
    737e:	90 91 56 38 	lds	r25, 0x3856
    7382:	a0 91 57 38 	lds	r26, 0x3857
    7386:	b0 91 58 38 	lds	r27, 0x3858
    738a:	90 70       	andi	r25, 0x00	; 0
    738c:	a0 70       	andi	r26, 0x00	; 0
    738e:	b0 70       	andi	r27, 0x00	; 0
    7390:	29 91       	ld	r18, Y+
    7392:	30 e0       	ldi	r19, 0x00	; 0
    7394:	40 e0       	ldi	r20, 0x00	; 0
    7396:	50 e0       	ldi	r21, 0x00	; 0
    7398:	82 27       	eor	r24, r18
    739a:	93 27       	eor	r25, r19
    739c:	a4 27       	eor	r26, r20
    739e:	b5 27       	eor	r27, r21
    73a0:	88 0f       	add	r24, r24
    73a2:	99 1f       	adc	r25, r25
    73a4:	88 0f       	add	r24, r24
    73a6:	99 1f       	adc	r25, r25
    73a8:	8c 58       	subi	r24, 0x8C	; 140
    73aa:	99 4d       	sbci	r25, 0xD9	; 217
    73ac:	ef 2c       	mov	r14, r15
    73ae:	f0 2e       	mov	r15, r16
    73b0:	01 2f       	mov	r16, r17
    73b2:	11 27       	eor	r17, r17
    73b4:	fc 01       	movw	r30, r24
    73b6:	80 81       	ld	r24, Z
    73b8:	91 81       	ldd	r25, Z+1	; 0x01
    73ba:	a2 81       	ldd	r26, Z+2	; 0x02
    73bc:	b3 81       	ldd	r27, Z+3	; 0x03
    73be:	e8 26       	eor	r14, r24
    73c0:	f9 26       	eor	r15, r25
    73c2:	0a 27       	eor	r16, r26
    73c4:	1b 27       	eor	r17, r27
    73c6:	e0 92 55 38 	sts	0x3855, r14
    73ca:	f0 92 56 38 	sts	0x3856, r15
    73ce:	00 93 57 38 	sts	0x3857, r16
    73d2:	10 93 58 38 	sts	0x3858, r17
		}
    }
    uploadFileBufferFull = false;
    okToFillUploadFileBuffer = true;
    while(!uploadFileBufferFull);
    for(uint16_t j = 0; j < leftOverBytesToUpload; j++){
    73d6:	80 91 3b 2d 	lds	r24, 0x2D3B
    73da:	90 91 3c 2d 	lds	r25, 0x2D3C
    73de:	a0 91 3d 2d 	lds	r26, 0x2D3D
    73e2:	b0 91 3e 2d 	lds	r27, 0x2D3E
    73e6:	a8 16       	cp	r10, r24
    73e8:	b9 06       	cpc	r11, r25
    73ea:	ca 06       	cpc	r12, r26
    73ec:	db 06       	cpc	r13, r27
    73ee:	08 f4       	brcc	.+2      	; 0x73f2 <Uploader_uploadFile+0x3b8>
    73f0:	b1 cf       	rjmp	.-158    	; 0x7354 <Uploader_uploadFile+0x31a>
			return false;
		}
        Uploader_UpdateCRC(uploadFileBuffer[j]);
    }
	
    Uploader_WriteCRC();
    73f2:	0e 94 e9 37 	call	0x6fd2	; 0x6fd2 <Uploader_WriteCRC>
	
    okToCloseUploadFile = true;
    73f6:	81 e0       	ldi	r24, 0x01	; 1
    73f8:	80 93 49 2d 	sts	0x2D49, r24
    while(okToCloseUploadFile);
    73fc:	80 91 49 2d 	lds	r24, 0x2D49
    7400:	88 23       	and	r24, r24
    7402:	e1 f7       	brne	.-8      	; 0x73fc <Uploader_uploadFile+0x3c2>
    uploading = false;
    7404:	10 92 40 2d 	sts	0x2D40, r1
    okToUpload = false;
    7408:	10 92 43 2d 	sts	0x2D43, r1
    uploadPercentBS = 100;
    740c:	84 e6       	ldi	r24, 0x64	; 100
    740e:	80 93 36 2d 	sts	0x2D36, r24
    7412:	81 e0       	ldi	r24, 0x01	; 1
    7414:	01 c0       	rjmp	.+2      	; 0x7418 <Uploader_uploadFile+0x3de>
    return true;
    7416:	80 e0       	ldi	r24, 0x00	; 0
}
    7418:	df 91       	pop	r29
    741a:	cf 91       	pop	r28
    741c:	1f 91       	pop	r17
    741e:	0f 91       	pop	r16
    7420:	ff 90       	pop	r15
    7422:	ef 90       	pop	r14
    7424:	df 90       	pop	r13
    7426:	cf 90       	pop	r12
    7428:	bf 90       	pop	r11
    742a:	af 90       	pop	r10
    742c:	9f 90       	pop	r9
    742e:	8f 90       	pop	r8
    7430:	7f 90       	pop	r7
    7432:	6f 90       	pop	r6
    7434:	5f 90       	pop	r5
    7436:	08 95       	ret

00007438 <Uploader_UpdateCRC>:
	}
	return true;
}


void Uploader_UpdateCRC(uint8_t byte){
    7438:	ef 92       	push	r14
    743a:	ff 92       	push	r15
    743c:	0f 93       	push	r16
    743e:	1f 93       	push	r17
    uploadCRC = (uploadCRC >> 8) ^ crc_table[byte ^ (uploadCRC & 0xFF)];
    7440:	e0 90 55 38 	lds	r14, 0x3855
    7444:	f0 90 56 38 	lds	r15, 0x3856
    7448:	00 91 57 38 	lds	r16, 0x3857
    744c:	10 91 58 38 	lds	r17, 0x3858
    7450:	20 91 55 38 	lds	r18, 0x3855
    7454:	30 91 56 38 	lds	r19, 0x3856
    7458:	40 91 57 38 	lds	r20, 0x3857
    745c:	50 91 58 38 	lds	r21, 0x3858
    7460:	90 e0       	ldi	r25, 0x00	; 0
    7462:	a0 e0       	ldi	r26, 0x00	; 0
    7464:	b0 e0       	ldi	r27, 0x00	; 0
    7466:	30 70       	andi	r19, 0x00	; 0
    7468:	40 70       	andi	r20, 0x00	; 0
    746a:	50 70       	andi	r21, 0x00	; 0
    746c:	82 27       	eor	r24, r18
    746e:	93 27       	eor	r25, r19
    7470:	a4 27       	eor	r26, r20
    7472:	b5 27       	eor	r27, r21
    7474:	88 0f       	add	r24, r24
    7476:	99 1f       	adc	r25, r25
    7478:	88 0f       	add	r24, r24
    747a:	99 1f       	adc	r25, r25
    747c:	8c 58       	subi	r24, 0x8C	; 140
    747e:	99 4d       	sbci	r25, 0xD9	; 217
    7480:	ef 2c       	mov	r14, r15
    7482:	f0 2e       	mov	r15, r16
    7484:	01 2f       	mov	r16, r17
    7486:	11 27       	eor	r17, r17
    7488:	fc 01       	movw	r30, r24
    748a:	80 81       	ld	r24, Z
    748c:	91 81       	ldd	r25, Z+1	; 0x01
    748e:	a2 81       	ldd	r26, Z+2	; 0x02
    7490:	b3 81       	ldd	r27, Z+3	; 0x03
    7492:	e8 26       	eor	r14, r24
    7494:	f9 26       	eor	r15, r25
    7496:	0a 27       	eor	r16, r26
    7498:	1b 27       	eor	r17, r27
    749a:	e0 92 55 38 	sts	0x3855, r14
    749e:	f0 92 56 38 	sts	0x3856, r15
    74a2:	00 93 57 38 	sts	0x3857, r16
    74a6:	10 93 58 38 	sts	0x3858, r17
    74aa:	1f 91       	pop	r17
    74ac:	0f 91       	pop	r16
    74ae:	ff 90       	pop	r15
    74b0:	ef 90       	pop	r14
    74b2:	08 95       	ret

000074b4 <Clock_Init>:


//******************************************************************* init functions *******************************************************************

void Clock_Init(void)
{
    74b4:	0f 93       	push	r16
    74b6:	df 93       	push	r29
    74b8:	cf 93       	push	r28
    74ba:	0f 92       	push	r0
    74bc:	cd b7       	in	r28, 0x3d	; 61
    74be:	de b7       	in	r29, 0x3e	; 62
	OSC.XOSCCTRL = (uint8_t) OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_EXTCLK_gc;
    74c0:	80 ec       	ldi	r24, 0xC0	; 192
    74c2:	e0 e5       	ldi	r30, 0x50	; 80
    74c4:	f0 e0       	ldi	r31, 0x00	; 0
    74c6:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |=  OSC_XOSCEN_bm;
    74c8:	80 91 50 00 	lds	r24, 0x0050
    74cc:	88 60       	ori	r24, 0x08	; 8
    74ce:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));
    74d2:	80 91 51 00 	lds	r24, 0x0051
    74d6:	83 ff       	sbrs	r24, 3
    74d8:	fc cf       	rjmp	.-8      	; 0x74d2 <Clock_Init+0x1e>
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | CLK_SCLKSEL_XOSC_gc;
    74da:	20 91 40 00 	lds	r18, 0x0040
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    74de:	8f b7       	in	r24, 0x3f	; 63
    74e0:	89 83       	std	Y+1, r24	; 0x01
    cli();
    74e2:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    74e4:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    74e6:	28 7f       	andi	r18, 0xF8	; 248
    74e8:	23 60       	ori	r18, 0x03	; 3
    74ea:	80 e4       	ldi	r24, 0x40	; 64
    74ec:	90 e0       	ldi	r25, 0x00	; 0
    74ee:	fc 01       	movw	r30, r24
    74f0:	08 ed       	ldi	r16, 0xD8	; 216
    74f2:	04 bf       	out	0x34, r16	; 52
    74f4:	20 83       	st	Z, r18
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
    74f6:	89 81       	ldd	r24, Y+1	; 0x01
    74f8:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &CLK.CTRL, clkCtrl );
	OSC.CTRL &= ~OSC_RC2MEN_bm;
    74fa:	80 91 50 00 	lds	r24, 0x0050
    74fe:	8e 7f       	andi	r24, 0xFE	; 254
    7500:	80 93 50 00 	sts	0x0050, r24
}
    7504:	0f 90       	pop	r0
    7506:	cf 91       	pop	r28
    7508:	df 91       	pop	r29
    750a:	0f 91       	pop	r16
    750c:	08 95       	ret

0000750e <Disable_JTAG>:

void Disable_JTAG(void){
    750e:	0f 93       	push	r16
    7510:	df 93       	push	r29
    7512:	cf 93       	push	r28
    7514:	0f 92       	push	r0
    7516:	cd b7       	in	r28, 0x3d	; 61
    7518:	de b7       	in	r29, 0x3e	; 62
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    751a:	8f b7       	in	r24, 0x3f	; 63
    751c:	89 83       	std	Y+1, r24	; 0x01
    cli();
    751e:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    7520:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    7522:	21 e0       	ldi	r18, 0x01	; 1
    7524:	86 e9       	ldi	r24, 0x96	; 150
    7526:	90 e0       	ldi	r25, 0x00	; 0
    7528:	fc 01       	movw	r30, r24
    752a:	08 ed       	ldi	r16, 0xD8	; 216
    752c:	04 bf       	out	0x34, r16	; 52
    752e:	20 83       	st	Z, r18
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
    7530:	89 81       	ldd	r24, Y+1	; 0x01
    7532:	8f bf       	out	0x3f, r24	; 63
	CCPWrite( &MCU.MCUCR, 1 );
}
    7534:	0f 90       	pop	r0
    7536:	cf 91       	pop	r28
    7538:	df 91       	pop	r29
    753a:	0f 91       	pop	r16
    753c:	08 95       	ret

0000753e <Interrupt_Init>:


void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    753e:	e0 ea       	ldi	r30, 0xA0	; 160
    7540:	f0 e0       	ldi	r31, 0x00	; 0
    7542:	82 81       	ldd	r24, Z+2	; 0x02
    7544:	87 60       	ori	r24, 0x07	; 7
    7546:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    7548:	78 94       	sei
}
    754a:	08 95       	ret

0000754c <__vector_104>:


ISR(Button_IntVector){
    754c:	1f 92       	push	r1
    754e:	0f 92       	push	r0
    7550:	0f b6       	in	r0, 0x3f	; 63
    7552:	0f 92       	push	r0
    7554:	0b b6       	in	r0, 0x3b	; 59
    7556:	0f 92       	push	r0
    7558:	11 24       	eor	r1, r1
    755a:	2f 93       	push	r18
    755c:	3f 93       	push	r19
    755e:	4f 93       	push	r20
    7560:	5f 93       	push	r21
    7562:	6f 93       	push	r22
    7564:	7f 93       	push	r23
    7566:	8f 93       	push	r24
    7568:	9f 93       	push	r25
    756a:	af 93       	push	r26
    756c:	bf 93       	push	r27
    756e:	ef 93       	push	r30
    7570:	ff 93       	push	r31
	if(okToDisplayGUI){
    7572:	80 91 52 2d 	lds	r24, 0x2D52
    7576:	88 23       	and	r24, r24
    7578:	09 f4       	brne	.+2      	; 0x757c <__vector_104+0x30>
    757a:	3c c0       	rjmp	.+120    	; 0x75f4 <__vector_104+0xa8>
		if(backLightIsOn){
    757c:	80 91 19 2d 	lds	r24, 0x2D19
    7580:	88 23       	and	r24, r24
    7582:	19 f0       	breq	.+6      	; 0x758a <__vector_104+0x3e>
			backlight_Timer = 0;
    7584:	10 92 5a 2d 	sts	0x2D5A, r1
    7588:	46 c0       	rjmp	.+140    	; 0x7616 <__vector_104+0xca>
		} else {
			justSwitchedStated = true;
    758a:	91 e0       	ldi	r25, 0x01	; 1
    758c:	90 93 53 2d 	sts	0x2D53, r25
			if(currentMode == recordMode){													// switch to sensor screen
    7590:	80 91 4e 2d 	lds	r24, 0x2D4E
    7594:	88 23       	and	r24, r24
    7596:	a9 f4       	brne	.+42     	; 0x75c2 <__vector_104+0x76>
				currentMode = sensorMode;
    7598:	90 93 4e 2d 	sts	0x2D4E, r25
	}
}

void display_setBacklight(bool state){
	if(state){
		Backlight_Port.OUTSET = 1 << Backlight_Pin;
    759c:	e0 ea       	ldi	r30, 0xA0	; 160
    759e:	f6 e0       	ldi	r31, 0x06	; 6
    75a0:	95 83       	std	Z+5, r25	; 0x05
		backLightIsOn = true;
    75a2:	90 93 19 2d 	sts	0x2D19, r25
				display_setBacklight(true);
				backlight_Timer = 0;
    75a6:	10 92 5a 2d 	sts	0x2D5A, r1
				display_clearScreen();
    75aa:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <display_clearScreen>
    75ae:	84 ec       	ldi	r24, 0xC4	; 196
    75b0:	99 e0       	ldi	r25, 0x09	; 9
    75b2:	20 e7       	ldi	r18, 0x70	; 112
    75b4:	31 e0       	ldi	r19, 0x01	; 1
    75b6:	f9 01       	movw	r30, r18
    75b8:	31 97       	sbiw	r30, 0x01	; 1
    75ba:	f1 f7       	brne	.-4      	; 0x75b8 <__vector_104+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    75bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    75be:	d9 f7       	brne	.-10     	; 0x75b6 <__vector_104+0x6a>
    75c0:	2a c0       	rjmp	.+84     	; 0x7616 <__vector_104+0xca>
				_delay_ms(250);
			} else if(currentMode == sensorMode){											// switch to system screen
    75c2:	80 91 4e 2d 	lds	r24, 0x2D4E
    75c6:	81 30       	cpi	r24, 0x01	; 1
    75c8:	31 f5       	brne	.+76     	; 0x7616 <__vector_104+0xca>
				currentMode = recordMode;
    75ca:	10 92 4e 2d 	sts	0x2D4E, r1
	}
}

void display_setBacklight(bool state){
	if(state){
		Backlight_Port.OUTSET = 1 << Backlight_Pin;
    75ce:	e0 ea       	ldi	r30, 0xA0	; 160
    75d0:	f6 e0       	ldi	r31, 0x06	; 6
    75d2:	85 83       	std	Z+5, r24	; 0x05
		backLightIsOn = true;
    75d4:	80 93 19 2d 	sts	0x2D19, r24
				display_setBacklight(true);
				backlight_Timer = 0;
    75d8:	10 92 5a 2d 	sts	0x2D5A, r1
				display_clearScreen();
    75dc:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <display_clearScreen>
    75e0:	84 ec       	ldi	r24, 0xC4	; 196
    75e2:	99 e0       	ldi	r25, 0x09	; 9
    75e4:	20 e7       	ldi	r18, 0x70	; 112
    75e6:	31 e0       	ldi	r19, 0x01	; 1
    75e8:	f9 01       	movw	r30, r18
    75ea:	31 97       	sbiw	r30, 0x01	; 1
    75ec:	f1 f7       	brne	.-4      	; 0x75ea <__vector_104+0x9e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    75ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    75f0:	d9 f7       	brne	.-10     	; 0x75e8 <__vector_104+0x9c>
    75f2:	11 c0       	rjmp	.+34     	; 0x7616 <__vector_104+0xca>
				_delay_ms(250);	
			}
		}
	} else {
		backlight_Timer = 0;
    75f4:	10 92 5a 2d 	sts	0x2D5A, r1
	}
}

void display_setBacklight(bool state){
	if(state){
		Backlight_Port.OUTSET = 1 << Backlight_Pin;
    75f8:	81 e0       	ldi	r24, 0x01	; 1
    75fa:	e0 ea       	ldi	r30, 0xA0	; 160
    75fc:	f6 e0       	ldi	r31, 0x06	; 6
    75fe:	85 83       	std	Z+5, r24	; 0x05
		backLightIsOn = true;
    7600:	80 93 19 2d 	sts	0x2D19, r24
    7604:	84 ec       	ldi	r24, 0xC4	; 196
    7606:	99 e0       	ldi	r25, 0x09	; 9
    7608:	20 e7       	ldi	r18, 0x70	; 112
    760a:	31 e0       	ldi	r19, 0x01	; 1
    760c:	f9 01       	movw	r30, r18
    760e:	31 97       	sbiw	r30, 0x01	; 1
    7610:	f1 f7       	brne	.-4      	; 0x760e <__vector_104+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7612:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7614:	d9 f7       	brne	.-10     	; 0x760c <__vector_104+0xc0>
		display_setBacklight(true);
		_delay_ms(250);
	}
}
    7616:	ff 91       	pop	r31
    7618:	ef 91       	pop	r30
    761a:	bf 91       	pop	r27
    761c:	af 91       	pop	r26
    761e:	9f 91       	pop	r25
    7620:	8f 91       	pop	r24
    7622:	7f 91       	pop	r23
    7624:	6f 91       	pop	r22
    7626:	5f 91       	pop	r21
    7628:	4f 91       	pop	r20
    762a:	3f 91       	pop	r19
    762c:	2f 91       	pop	r18
    762e:	0f 90       	pop	r0
    7630:	0b be       	out	0x3b, r0	; 59
    7632:	0f 90       	pop	r0
    7634:	0f be       	out	0x3f, r0	; 63
    7636:	0f 90       	pop	r0
    7638:	1f 90       	pop	r1
    763a:	18 95       	reti

0000763c <__vector_105>:

ISR(Switch_IntVector){
    763c:	1f 92       	push	r1
    763e:	0f 92       	push	r0
    7640:	0f b6       	in	r0, 0x3f	; 63
    7642:	0f 92       	push	r0
    7644:	0b b6       	in	r0, 0x3b	; 59
    7646:	0f 92       	push	r0
    7648:	11 24       	eor	r1, r1
    764a:	2f 93       	push	r18
    764c:	3f 93       	push	r19
    764e:	4f 93       	push	r20
    7650:	5f 93       	push	r21
    7652:	6f 93       	push	r22
    7654:	7f 93       	push	r23
    7656:	8f 93       	push	r24
    7658:	9f 93       	push	r25
    765a:	af 93       	push	r26
    765c:	bf 93       	push	r27
    765e:	ef 93       	push	r30
    7660:	ff 93       	push	r31
	}
}


bool Button_Pressed(uint8_t button){
	if((Button_Port.IN & (1<<button)) >0 ){
    7662:	80 91 a8 06 	lds	r24, 0x06A8
    7666:	82 fd       	sbrc	r24, 2
    7668:	1e c0       	rjmp	.+60     	; 0x76a6 <__vector_105+0x6a>
    766a:	39 c0       	rjmp	.+114    	; 0x76de <__vector_105+0xa2>
	if(Button_Pressed(Switch_Pin) && !okToOpenLogFile && !recording && timeIsValid && SD_Inserted()){		// start recording
    766c:	80 91 e1 2c 	lds	r24, 0x2CE1
    7670:	88 23       	and	r24, r24
    7672:	c9 f4       	brne	.+50     	; 0x76a6 <__vector_105+0x6a>
    7674:	80 91 4c 2d 	lds	r24, 0x2D4C
    7678:	88 23       	and	r24, r24
    767a:	a9 f0       	breq	.+42     	; 0x76a6 <__vector_105+0x6a>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	return sdValid;
    767c:	80 91 14 2d 	lds	r24, 0x2D14
    7680:	88 23       	and	r24, r24
    7682:	89 f0       	breq	.+34     	; 0x76a6 <__vector_105+0x6a>
		if(percentDiskUsed < 950){
    7684:	80 91 15 2d 	lds	r24, 0x2D15
    7688:	90 91 16 2d 	lds	r25, 0x2D16
    768c:	a0 91 17 2d 	lds	r26, 0x2D17
    7690:	b0 91 18 2d 	lds	r27, 0x2D18
    7694:	86 5b       	subi	r24, 0xB6	; 182
    7696:	93 40       	sbci	r25, 0x03	; 3
    7698:	a0 40       	sbci	r26, 0x00	; 0
    769a:	b0 40       	sbci	r27, 0x00	; 0
    769c:	48 f5       	brcc	.+82     	; 0x76f0 <__vector_105+0xb4>
			okToOpenLogFile = true;
    769e:	81 e0       	ldi	r24, 0x01	; 1
    76a0:	80 93 4f 2d 	sts	0x2D4F, r24
    76a4:	25 c0       	rjmp	.+74     	; 0x76f0 <__vector_105+0xb4>
    76a6:	80 91 a8 06 	lds	r24, 0x06A8
    76aa:	82 ff       	sbrs	r24, 2
    76ac:	1d c0       	rjmp	.+58     	; 0x76e8 <__vector_105+0xac>
		}
	} else if((!Button_Pressed(Switch_Pin) || !SD_Inserted()) && recording && !okToCloseLogFile){			// close file
    76ae:	80 91 e1 2c 	lds	r24, 0x2CE1
    76b2:	88 23       	and	r24, r24
    76b4:	e9 f0       	breq	.+58     	; 0x76f0 <__vector_105+0xb4>
    76b6:	80 91 51 2d 	lds	r24, 0x2D51
    76ba:	88 23       	and	r24, r24
    76bc:	c9 f4       	brne	.+50     	; 0x76f0 <__vector_105+0xb4>
		recording = false;
    76be:	10 92 e1 2c 	sts	0x2CE1, r1
		
		Sensors_ResetTemperatureBuffers();
    76c2:	0e 94 8b 32 	call	0x6516	; 0x6516 <Sensors_ResetTemperatureBuffers>
		Sensors_ResetHumidityBuffers();
    76c6:	0e 94 a1 32 	call	0x6542	; 0x6542 <Sensors_ResetHumidityBuffers>
		Sensors_ResetPressureBuffers();
    76ca:	0e 94 96 32 	call	0x652c	; 0x652c <Sensors_ResetPressureBuffers>
		Sensors_ResetMicrophoneBuffers();
    76ce:	0e 94 ac 32 	call	0x6558	; 0x6558 <Sensors_ResetMicrophoneBuffers>
		Sensors_ResetLightBuffers();
    76d2:	0e 94 b9 32 	call	0x6572	; 0x6572 <Sensors_ResetLightBuffers>
		okToCloseLogFile = true;
    76d6:	81 e0       	ldi	r24, 0x01	; 1
    76d8:	80 93 51 2d 	sts	0x2D51, r24
    76dc:	09 c0       	rjmp	.+18     	; 0x76f0 <__vector_105+0xb4>
		_delay_ms(250);
	}
}

ISR(Switch_IntVector){
	if(Button_Pressed(Switch_Pin) && !okToOpenLogFile && !recording && timeIsValid && SD_Inserted()){		// start recording
    76de:	80 91 4f 2d 	lds	r24, 0x2D4F
    76e2:	88 23       	and	r24, r24
    76e4:	01 f7       	brne	.-64     	; 0x76a6 <__vector_105+0x6a>
    76e6:	c2 cf       	rjmp	.-124    	; 0x766c <__vector_105+0x30>
    76e8:	80 91 14 2d 	lds	r24, 0x2D14
		if(percentDiskUsed < 950){
			okToOpenLogFile = true;
		}
	} else if((!Button_Pressed(Switch_Pin) || !SD_Inserted()) && recording && !okToCloseLogFile){			// close file
    76ec:	88 23       	and	r24, r24
    76ee:	f9 f2       	breq	.-66     	; 0x76ae <__vector_105+0x72>
		Sensors_ResetPressureBuffers();
		Sensors_ResetMicrophoneBuffers();
		Sensors_ResetLightBuffers();
		okToCloseLogFile = true;
	}
}
    76f0:	ff 91       	pop	r31
    76f2:	ef 91       	pop	r30
    76f4:	bf 91       	pop	r27
    76f6:	af 91       	pop	r26
    76f8:	9f 91       	pop	r25
    76fa:	8f 91       	pop	r24
    76fc:	7f 91       	pop	r23
    76fe:	6f 91       	pop	r22
    7700:	5f 91       	pop	r21
    7702:	4f 91       	pop	r20
    7704:	3f 91       	pop	r19
    7706:	2f 91       	pop	r18
    7708:	0f 90       	pop	r0
    770a:	0b be       	out	0x3b, r0	; 59
    770c:	0f 90       	pop	r0
    770e:	0f be       	out	0x3f, r0	; 63
    7710:	0f 90       	pop	r0
    7712:	1f 90       	pop	r1
    7714:	18 95       	reti

00007716 <Display_BackgroundWriter_Init>:
	// fclk = 14745600
	// div  = 1440
	// => 14745600/1440/1024 => 10 samples per second

	// Set period/TOP value
	Display_Writer_Timer.PER = 1440;
    7716:	e0 e0       	ldi	r30, 0x00	; 0
    7718:	fb e0       	ldi	r31, 0x0B	; 11
    771a:	80 ea       	ldi	r24, 0xA0	; 160
    771c:	95 e0       	ldi	r25, 0x05	; 5
    771e:	86 a3       	std	Z+38, r24	; 0x26
    7720:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	Display_Writer_Timer.CTRLA = (Display_Writer_Timer.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV1024_gc;
    7722:	80 81       	ld	r24, Z
    7724:	80 7f       	andi	r24, 0xF0	; 240
    7726:	87 60       	ori	r24, 0x07	; 7
    7728:	80 83       	st	Z, r24

	// Enable CCA interrupt
	Display_Writer_Timer.INTCTRLA = (Display_Writer_Timer.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
    772a:	86 81       	ldd	r24, Z+6	; 0x06
    772c:	8c 7f       	andi	r24, 0xFC	; 252
    772e:	81 60       	ori	r24, 0x01	; 1
    7730:	86 83       	std	Z+6, r24	; 0x06
}
    7732:	08 95       	ret

00007734 <SD_BackroundWriter_Init>:
	// div  = 64
	// per  = 2304
	// => 14745600/64/2304 => 100 samples per second

	// Set period/TOP value
	SD_Writer_Timer.PER = 2304;
    7734:	e0 e4       	ldi	r30, 0x40	; 64
    7736:	fa e0       	ldi	r31, 0x0A	; 10
    7738:	80 e0       	ldi	r24, 0x00	; 0
    773a:	99 e0       	ldi	r25, 0x09	; 9
    773c:	86 a3       	std	Z+38, r24	; 0x26
    773e:	97 a3       	std	Z+39, r25	; 0x27

	// Select clock source
	SD_Writer_Timer.CTRLA = (SD_Writer_Timer.CTRLA & ~TC0_CLKSEL_gm) | TC_CLKSEL_DIV64_gc;
    7740:	80 81       	ld	r24, Z
    7742:	80 7f       	andi	r24, 0xF0	; 240
    7744:	85 60       	ori	r24, 0x05	; 5
    7746:	80 83       	st	Z, r24

	// Enable CCA interrupt
	SD_Writer_Timer.INTCTRLA = (SD_Writer_Timer.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;
    7748:	86 81       	ldd	r24, Z+6	; 0x06
    774a:	8c 7f       	andi	r24, 0xFC	; 252
    774c:	82 60       	ori	r24, 0x02	; 2
    774e:	86 83       	std	Z+6, r24	; 0x06

}
    7750:	08 95       	ret

00007752 <SD_WriteRTCBlock>:
	}
	return resp;
}


void SD_WriteRTCBlock(uint32_t ticker, uint32_t time){
    7752:	af 92       	push	r10
    7754:	bf 92       	push	r11
    7756:	cf 92       	push	r12
    7758:	df 92       	push	r13
    775a:	ef 92       	push	r14
    775c:	ff 92       	push	r15
    775e:	0f 93       	push	r16
    7760:	1f 93       	push	r17
    7762:	7b 01       	movw	r14, r22
    7764:	8c 01       	movw	r16, r24
    7766:	59 01       	movw	r10, r18
    7768:	6a 01       	movw	r12, r20
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    776a:	8f ef       	ldi	r24, 0xFF	; 255
    776c:	9f ef       	ldi	r25, 0xFF	; 255
    776e:	af ef       	ldi	r26, 0xFF	; 255
    7770:	bf ef       	ldi	r27, 0xFF	; 255
    7772:	80 93 dc 55 	sts	0x55DC, r24
    7776:	90 93 dd 55 	sts	0x55DD, r25
    777a:	a0 93 de 55 	sts	0x55DE, r26
    777e:	b0 93 df 55 	sts	0x55DF, r27
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);					// magic number 
    7782:	6c e4       	ldi	r22, 0x4C	; 76
    7784:	74 e7       	ldi	r23, 0x74	; 116
    7786:	8e ed       	ldi	r24, 0xDE	; 222
    7788:	90 eb       	ldi	r25, 0xB0	; 176
    778a:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(27);								// record size  
    778e:	6b e1       	ldi	r22, 0x1B	; 27
    7790:	70 e0       	ldi	r23, 0x00	; 0
    7792:	80 e0       	ldi	r24, 0x00	; 0
    7794:	90 e0       	ldi	r25, 0x00	; 0
    7796:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write16(2);								// record type  
    779a:	82 e0       	ldi	r24, 0x02	; 2
    779c:	90 e0       	ldi	r25, 0x00	; 0
    779e:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <SD_Write16>
						// ***** payload *****
	SD_Write32(ticker);							// 32-bit counter
    77a2:	c8 01       	movw	r24, r16
    77a4:	b7 01       	movw	r22, r14
    77a6:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(time);							// UNIX time  (40bit)
    77aa:	c6 01       	movw	r24, r12
    77ac:	b5 01       	movw	r22, r10
    77ae:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write8(0);
    77b2:	80 e0       	ldi	r24, 0x00	; 0
    77b4:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_Write32(0);								// unix time nanoseconds
    77b8:	60 e0       	ldi	r22, 0x00	; 0
    77ba:	70 e0       	ldi	r23, 0x00	; 0
    77bc:	80 e0       	ldi	r24, 0x00	; 0
    77be:	90 e0       	ldi	r25, 0x00	; 0
    77c0:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_WriteCRC();								// CRC			
    77c4:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <SD_WriteCRC>
	if(f_sync(&Log_File) != FR_OK){
    77c8:	8d e9       	ldi	r24, 0x9D	; 157
    77ca:	90 e5       	ldi	r25, 0x50	; 80
    77cc:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <f_sync>
    77d0:	88 23       	and	r24, r24
    77d2:	11 f0       	breq	.+4      	; 0x77d8 <SD_WriteRTCBlock+0x86>
		sdValid = false;
    77d4:	10 92 14 2d 	sts	0x2D14, r1
	}

}
    77d8:	1f 91       	pop	r17
    77da:	0f 91       	pop	r16
    77dc:	ff 90       	pop	r15
    77de:	ef 90       	pop	r14
    77e0:	df 90       	pop	r13
    77e2:	cf 90       	pop	r12
    77e4:	bf 90       	pop	r11
    77e6:	af 90       	pop	r10
    77e8:	08 95       	ret

000077ea <getDeviceID>:
}




void getDeviceID(void){
    77ea:	bf 92       	push	r11
    77ec:	cf 92       	push	r12
    77ee:	df 92       	push	r13
    77f0:	ef 92       	push	r14
    77f2:	ff 92       	push	r15
    77f4:	0f 93       	push	r16
    77f6:	1f 93       	push	r17
    77f8:	df 93       	push	r29
    77fa:	cf 93       	push	r28
    77fc:	cd b7       	in	r28, 0x3d	; 61
    77fe:	de b7       	in	r29, 0x3e	; 62
    7800:	25 97       	sbiw	r28, 0x05	; 5
    7802:	cd bf       	out	0x3d, r28	; 61
    7804:	de bf       	out	0x3e, r29	; 62
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7806:	0a ec       	ldi	r16, 0xCA	; 202
    7808:	11 e0       	ldi	r17, 0x01	; 1
    780a:	f2 e0       	ldi	r31, 0x02	; 2
    780c:	bf 2e       	mov	r11, r31
    780e:	d8 01       	movw	r26, r16
    7810:	bc 92       	st	X, r11
 	result = pgm_read_byte(index);
    7812:	e8 e0       	ldi	r30, 0x08	; 8
    7814:	f0 e0       	ldi	r31, 0x00	; 0
    7816:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7818:	1c 92       	st	X, r1
	
	char tmp [5];
	
	strcpy(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+LOTNUM0_offset),tmp,16));
    781a:	8e 2f       	mov	r24, r30
    781c:	90 e0       	ldi	r25, 0x00	; 0
    781e:	6e 01       	movw	r12, r28
    7820:	08 94       	sec
    7822:	c1 1c       	adc	r12, r1
    7824:	d1 1c       	adc	r13, r1
    7826:	b6 01       	movw	r22, r12
    7828:	40 e1       	ldi	r20, 0x10	; 16
    782a:	50 e0       	ldi	r21, 0x00	; 0
    782c:	0e 94 98 51 	call	0xa330	; 0xa330 <itoa>
    7830:	bc 01       	movw	r22, r24
    7832:	e1 ef       	ldi	r30, 0xF1	; 241
    7834:	ee 2e       	mov	r14, r30
    7836:	e7 e3       	ldi	r30, 0x37	; 55
    7838:	fe 2e       	mov	r15, r30
    783a:	c7 01       	movw	r24, r14
    783c:	0e 94 46 51 	call	0xa28c	; 0xa28c <strcpy>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7840:	f8 01       	movw	r30, r16
    7842:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    7844:	e9 e0       	ldi	r30, 0x09	; 9
    7846:	f0 e0       	ldi	r31, 0x00	; 0
    7848:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    784a:	d8 01       	movw	r26, r16
    784c:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+LOTNUM1_offset),tmp,16));
    784e:	8e 2f       	mov	r24, r30
    7850:	90 e0       	ldi	r25, 0x00	; 0
    7852:	b6 01       	movw	r22, r12
    7854:	40 e1       	ldi	r20, 0x10	; 16
    7856:	50 e0       	ldi	r21, 0x00	; 0
    7858:	0e 94 98 51 	call	0xa330	; 0xa330 <itoa>
    785c:	bc 01       	movw	r22, r24
    785e:	c7 01       	movw	r24, r14
    7860:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7864:	f8 01       	movw	r30, r16
    7866:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    7868:	ea e0       	ldi	r30, 0x0A	; 10
    786a:	f0 e0       	ldi	r31, 0x00	; 0
    786c:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    786e:	d8 01       	movw	r26, r16
    7870:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+LOTNUM2_offset),tmp,16));
    7872:	8e 2f       	mov	r24, r30
    7874:	90 e0       	ldi	r25, 0x00	; 0
    7876:	b6 01       	movw	r22, r12
    7878:	40 e1       	ldi	r20, 0x10	; 16
    787a:	50 e0       	ldi	r21, 0x00	; 0
    787c:	0e 94 98 51 	call	0xa330	; 0xa330 <itoa>
    7880:	bc 01       	movw	r22, r24
    7882:	c7 01       	movw	r24, r14
    7884:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7888:	f8 01       	movw	r30, r16
    788a:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    788c:	eb e0       	ldi	r30, 0x0B	; 11
    788e:	f0 e0       	ldi	r31, 0x00	; 0
    7890:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7892:	d8 01       	movw	r26, r16
    7894:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+LOTNUM3_offset),tmp,16));
    7896:	8e 2f       	mov	r24, r30
    7898:	90 e0       	ldi	r25, 0x00	; 0
    789a:	b6 01       	movw	r22, r12
    789c:	40 e1       	ldi	r20, 0x10	; 16
    789e:	50 e0       	ldi	r21, 0x00	; 0
    78a0:	0e 94 98 51 	call	0xa330	; 0xa330 <itoa>
    78a4:	bc 01       	movw	r22, r24
    78a6:	c7 01       	movw	r24, r14
    78a8:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    78ac:	f8 01       	movw	r30, r16
    78ae:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    78b0:	ec e0       	ldi	r30, 0x0C	; 12
    78b2:	f0 e0       	ldi	r31, 0x00	; 0
    78b4:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    78b6:	d8 01       	movw	r26, r16
    78b8:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+LOTNUM4_offset),tmp,16));
    78ba:	8e 2f       	mov	r24, r30
    78bc:	90 e0       	ldi	r25, 0x00	; 0
    78be:	b6 01       	movw	r22, r12
    78c0:	40 e1       	ldi	r20, 0x10	; 16
    78c2:	50 e0       	ldi	r21, 0x00	; 0
    78c4:	0e 94 98 51 	call	0xa330	; 0xa330 <itoa>
    78c8:	bc 01       	movw	r22, r24
    78ca:	c7 01       	movw	r24, r14
    78cc:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    78d0:	f8 01       	movw	r30, r16
    78d2:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    78d4:	ed e0       	ldi	r30, 0x0D	; 13
    78d6:	f0 e0       	ldi	r31, 0x00	; 0
    78d8:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    78da:	d8 01       	movw	r26, r16
    78dc:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+LOTNUM5_offset),tmp,16));
    78de:	8e 2f       	mov	r24, r30
    78e0:	90 e0       	ldi	r25, 0x00	; 0
    78e2:	b6 01       	movw	r22, r12
    78e4:	40 e1       	ldi	r20, 0x10	; 16
    78e6:	50 e0       	ldi	r21, 0x00	; 0
    78e8:	0e 94 98 51 	call	0xa330	; 0xa330 <itoa>
    78ec:	bc 01       	movw	r22, r24
    78ee:	c7 01       	movw	r24, r14
    78f0:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    78f4:	f8 01       	movw	r30, r16
    78f6:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    78f8:	e0 e1       	ldi	r30, 0x10	; 16
    78fa:	f0 e0       	ldi	r31, 0x00	; 0
    78fc:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    78fe:	d8 01       	movw	r26, r16
    7900:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+WAFNUM_offset) ,tmp,16));
    7902:	8e 2f       	mov	r24, r30
    7904:	90 e0       	ldi	r25, 0x00	; 0
    7906:	b6 01       	movw	r22, r12
    7908:	40 e1       	ldi	r20, 0x10	; 16
    790a:	50 e0       	ldi	r21, 0x00	; 0
    790c:	0e 94 98 51 	call	0xa330	; 0xa330 <itoa>
    7910:	bc 01       	movw	r22, r24
    7912:	c7 01       	movw	r24, r14
    7914:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7918:	f8 01       	movw	r30, r16
    791a:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    791c:	e2 e1       	ldi	r30, 0x12	; 18
    791e:	f0 e0       	ldi	r31, 0x00	; 0
    7920:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7922:	d8 01       	movw	r26, r16
    7924:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+COORDX0_offset),tmp,16));
    7926:	8e 2f       	mov	r24, r30
    7928:	90 e0       	ldi	r25, 0x00	; 0
    792a:	b6 01       	movw	r22, r12
    792c:	40 e1       	ldi	r20, 0x10	; 16
    792e:	50 e0       	ldi	r21, 0x00	; 0
    7930:	0e 94 98 51 	call	0xa330	; 0xa330 <itoa>
    7934:	bc 01       	movw	r22, r24
    7936:	c7 01       	movw	r24, r14
    7938:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    793c:	f8 01       	movw	r30, r16
    793e:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    7940:	e3 e1       	ldi	r30, 0x13	; 19
    7942:	f0 e0       	ldi	r31, 0x00	; 0
    7944:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    7946:	d8 01       	movw	r26, r16
    7948:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+COORDX1_offset),tmp,16));
    794a:	8e 2f       	mov	r24, r30
    794c:	90 e0       	ldi	r25, 0x00	; 0
    794e:	b6 01       	movw	r22, r12
    7950:	40 e1       	ldi	r20, 0x10	; 16
    7952:	50 e0       	ldi	r21, 0x00	; 0
    7954:	0e 94 98 51 	call	0xa330	; 0xa330 <itoa>
    7958:	bc 01       	movw	r22, r24
    795a:	c7 01       	movw	r24, r14
    795c:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7960:	f8 01       	movw	r30, r16
    7962:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    7964:	e4 e1       	ldi	r30, 0x14	; 20
    7966:	f0 e0       	ldi	r31, 0x00	; 0
    7968:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    796a:	d8 01       	movw	r26, r16
    796c:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+COORDY0_offset),tmp,16));
    796e:	8e 2f       	mov	r24, r30
    7970:	90 e0       	ldi	r25, 0x00	; 0
    7972:	b6 01       	movw	r22, r12
    7974:	40 e1       	ldi	r20, 0x10	; 16
    7976:	50 e0       	ldi	r21, 0x00	; 0
    7978:	0e 94 98 51 	call	0xa330	; 0xa330 <itoa>
    797c:	bc 01       	movw	r22, r24
    797e:	c7 01       	movw	r24, r14
    7980:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    7984:	f8 01       	movw	r30, r16
    7986:	b0 82       	st	Z, r11
 	result = pgm_read_byte(index);
    7988:	e5 e1       	ldi	r30, 0x15	; 21
    798a:	f0 e0       	ldi	r31, 0x00	; 0
    798c:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    798e:	d8 01       	movw	r26, r16
    7990:	1c 92       	st	X, r1
	strcat(deviceID,itoa(SP_ReadCalibrationByte( PROD_SIGNATURES_START+COORDY1_offset),tmp,16));
    7992:	8e 2f       	mov	r24, r30
    7994:	90 e0       	ldi	r25, 0x00	; 0
    7996:	b6 01       	movw	r22, r12
    7998:	40 e1       	ldi	r20, 0x10	; 16
    799a:	50 e0       	ldi	r21, 0x00	; 0
    799c:	0e 94 98 51 	call	0xa330	; 0xa330 <itoa>
    79a0:	bc 01       	movw	r22, r24
    79a2:	c7 01       	movw	r24, r14
    79a4:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
}
    79a8:	25 96       	adiw	r28, 0x05	; 5
    79aa:	cd bf       	out	0x3d, r28	; 61
    79ac:	de bf       	out	0x3e, r29	; 62
    79ae:	cf 91       	pop	r28
    79b0:	df 91       	pop	r29
    79b2:	1f 91       	pop	r17
    79b4:	0f 91       	pop	r16
    79b6:	ff 90       	pop	r15
    79b8:	ef 90       	pop	r14
    79ba:	df 90       	pop	r13
    79bc:	cf 90       	pop	r12
    79be:	bf 90       	pop	r11
    79c0:	08 95       	ret

000079c2 <display_showSplashScreen>:
	
	Backlight_Port.DIRSET = 1 << Backlight_Pin;

}

void display_showSplashScreen(bool showsd, bool showconnected, bool demo){
    79c2:	df 92       	push	r13
    79c4:	ef 92       	push	r14
    79c6:	ff 92       	push	r15
    79c8:	0f 93       	push	r16
    79ca:	1f 93       	push	r17
    79cc:	df 93       	push	r29
    79ce:	cf 93       	push	r28
    79d0:	cd b7       	in	r28, 0x3d	; 61
    79d2:	de b7       	in	r29, 0x3e	; 62
    79d4:	e2 97       	sbiw	r28, 0x32	; 50
    79d6:	cd bf       	out	0x3d, r28	; 61
    79d8:	de bf       	out	0x3e, r29	; 62
    79da:	f8 2e       	mov	r15, r24
    79dc:	e6 2e       	mov	r14, r22
    79de:	d4 2e       	mov	r13, r20
	char tmp [50];
	display_putString("   BaseStation   ",1,0,System5x7);
    79e0:	86 e3       	ldi	r24, 0x36	; 54
    79e2:	90 e2       	ldi	r25, 0x20	; 32
    79e4:	61 e0       	ldi	r22, 0x01	; 1
    79e6:	40 e0       	ldi	r20, 0x00	; 0
    79e8:	2b ea       	ldi	r18, 0xAB	; 171
    79ea:	3a e2       	ldi	r19, 0x2A	; 42
    79ec:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>
	strcpy(tmp,"  Hardware: v");
    79f0:	8e 01       	movw	r16, r28
    79f2:	0f 5f       	subi	r16, 0xFF	; 255
    79f4:	1f 4f       	sbci	r17, 0xFF	; 255
    79f6:	c8 01       	movw	r24, r16
    79f8:	68 e4       	ldi	r22, 0x48	; 72
    79fa:	70 e2       	ldi	r23, 0x20	; 32
    79fc:	0e 94 46 51 	call	0xa28c	; 0xa28c <strcpy>
	strcat(tmp,HardwareVersion);
    7a00:	c8 01       	movw	r24, r16
    7a02:	66 e5       	ldi	r22, 0x56	; 86
    7a04:	70 e2       	ldi	r23, 0x20	; 32
    7a06:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
	display_putString(tmp,3,0,System5x7);
    7a0a:	c8 01       	movw	r24, r16
    7a0c:	63 e0       	ldi	r22, 0x03	; 3
    7a0e:	40 e0       	ldi	r20, 0x00	; 0
    7a10:	2b ea       	ldi	r18, 0xAB	; 171
    7a12:	3a e2       	ldi	r19, 0x2A	; 42
    7a14:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>
	tmp[0] = 0;
    7a18:	19 82       	std	Y+1, r1	; 0x01
	strcpy(tmp," Firmware: v");
    7a1a:	c8 01       	movw	r24, r16
    7a1c:	68 e5       	ldi	r22, 0x58	; 88
    7a1e:	70 e2       	ldi	r23, 0x20	; 32
    7a20:	0e 94 46 51 	call	0xa28c	; 0xa28c <strcpy>
	strcat(tmp,FirmwareVersion);
    7a24:	c8 01       	movw	r24, r16
    7a26:	65 e6       	ldi	r22, 0x65	; 101
    7a28:	70 e2       	ldi	r23, 0x20	; 32
    7a2a:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
	display_putString(tmp,5,0,System5x7);
    7a2e:	c8 01       	movw	r24, r16
    7a30:	65 e0       	ldi	r22, 0x05	; 5
    7a32:	40 e0       	ldi	r20, 0x00	; 0
    7a34:	2b ea       	ldi	r18, 0xAB	; 171
    7a36:	3a e2       	ldi	r19, 0x2A	; 42
    7a38:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>
	
	if(showsd){
    7a3c:	ff 20       	and	r15, r15
    7a3e:	19 f0       	breq	.+6      	; 0x7a46 <display_showSplashScreen+0x84>
		display_putString("    SD Removed   ",7,0,System5x7);
    7a40:	8a e6       	ldi	r24, 0x6A	; 106
    7a42:	90 e2       	ldi	r25, 0x20	; 32
    7a44:	09 c0       	rjmp	.+18     	; 0x7a58 <display_showSplashScreen+0x96>
	} else if(showconnected){
    7a46:	ee 20       	and	r14, r14
    7a48:	19 f0       	breq	.+6      	; 0x7a50 <display_showSplashScreen+0x8e>
		display_putString("Waiting for sync ",7,0,System5x7);
    7a4a:	8c e7       	ldi	r24, 0x7C	; 124
    7a4c:	90 e2       	ldi	r25, 0x20	; 32
    7a4e:	04 c0       	rjmp	.+8      	; 0x7a58 <display_showSplashScreen+0x96>
	} else if(demo){
    7a50:	dd 20       	and	r13, r13
    7a52:	49 f0       	breq	.+18     	; 0x7a66 <display_showSplashScreen+0xa4>
		display_putString("    Demo Mode    ",7,0,System5x7);
    7a54:	8e e8       	ldi	r24, 0x8E	; 142
    7a56:	90 e2       	ldi	r25, 0x20	; 32
    7a58:	67 e0       	ldi	r22, 0x07	; 7
    7a5a:	40 e0       	ldi	r20, 0x00	; 0
    7a5c:	2b ea       	ldi	r18, 0xAB	; 171
    7a5e:	3a e2       	ldi	r19, 0x2A	; 42
    7a60:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>
    7a64:	03 c0       	rjmp	.+6      	; 0x7a6c <display_showSplashScreen+0xaa>
	} else {
		display_clearPage(7);
    7a66:	87 e0       	ldi	r24, 0x07	; 7
    7a68:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <display_clearPage>
	}
}
    7a6c:	e2 96       	adiw	r28, 0x32	; 50
    7a6e:	cd bf       	out	0x3d, r28	; 61
    7a70:	de bf       	out	0x3e, r29	; 62
    7a72:	cf 91       	pop	r28
    7a74:	df 91       	pop	r29
    7a76:	1f 91       	pop	r17
    7a78:	0f 91       	pop	r16
    7a7a:	ff 90       	pop	r15
    7a7c:	ef 90       	pop	r14
    7a7e:	df 90       	pop	r13
    7a80:	08 95       	ret

00007a82 <SD_WriteString>:
	tmp32[2] = (uint8_t)(var >> 16);
	tmp32[3] = (uint8_t)(var >> 24);
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
    7a82:	ef 92       	push	r14
    7a84:	ff 92       	push	r15
    7a86:	0f 93       	push	r16
    7a88:	1f 93       	push	r17
    7a8a:	cf 93       	push	r28
    7a8c:	df 93       	push	r29
    7a8e:	ec 01       	movw	r28, r24
	f_puts (string, &Log_File);
    7a90:	6d e9       	ldi	r22, 0x9D	; 157
    7a92:	70 e5       	ldi	r23, 0x50	; 80
    7a94:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <f_puts>
    7a98:	60 e0       	ldi	r22, 0x00	; 0
    7a9a:	70 e0       	ldi	r23, 0x00	; 0
    7a9c:	3b c0       	rjmp	.+118    	; 0x7b14 <SD_WriteString+0x92>
    for (uint16_t i=0; i<strlen(string); i++){
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    7a9e:	e0 90 dc 55 	lds	r14, 0x55DC
    7aa2:	f0 90 dd 55 	lds	r15, 0x55DD
    7aa6:	00 91 de 55 	lds	r16, 0x55DE
    7aaa:	10 91 df 55 	lds	r17, 0x55DF
    7aae:	20 91 dc 55 	lds	r18, 0x55DC
    7ab2:	30 91 dd 55 	lds	r19, 0x55DD
    7ab6:	40 91 de 55 	lds	r20, 0x55DE
    7aba:	50 91 df 55 	lds	r21, 0x55DF
    7abe:	30 70       	andi	r19, 0x00	; 0
    7ac0:	40 70       	andi	r20, 0x00	; 0
    7ac2:	50 70       	andi	r21, 0x00	; 0
    7ac4:	fe 01       	movw	r30, r28
    7ac6:	e6 0f       	add	r30, r22
    7ac8:	f7 1f       	adc	r31, r23
    7aca:	80 81       	ld	r24, Z
    7acc:	90 e0       	ldi	r25, 0x00	; 0
    7ace:	a0 e0       	ldi	r26, 0x00	; 0
    7ad0:	b0 e0       	ldi	r27, 0x00	; 0
    7ad2:	28 27       	eor	r18, r24
    7ad4:	39 27       	eor	r19, r25
    7ad6:	4a 27       	eor	r20, r26
    7ad8:	5b 27       	eor	r21, r27
    7ada:	22 0f       	add	r18, r18
    7adc:	33 1f       	adc	r19, r19
    7ade:	22 0f       	add	r18, r18
    7ae0:	33 1f       	adc	r19, r19
    7ae2:	2c 58       	subi	r18, 0x8C	; 140
    7ae4:	39 4d       	sbci	r19, 0xD9	; 217
    7ae6:	ef 2c       	mov	r14, r15
    7ae8:	f0 2e       	mov	r15, r16
    7aea:	01 2f       	mov	r16, r17
    7aec:	11 27       	eor	r17, r17
    7aee:	f9 01       	movw	r30, r18
    7af0:	80 81       	ld	r24, Z
    7af2:	91 81       	ldd	r25, Z+1	; 0x01
    7af4:	a2 81       	ldd	r26, Z+2	; 0x02
    7af6:	b3 81       	ldd	r27, Z+3	; 0x03
    7af8:	e8 26       	eor	r14, r24
    7afa:	f9 26       	eor	r15, r25
    7afc:	0a 27       	eor	r16, r26
    7afe:	1b 27       	eor	r17, r27
    7b00:	e0 92 dc 55 	sts	0x55DC, r14
    7b04:	f0 92 dd 55 	sts	0x55DD, r15
    7b08:	00 93 de 55 	sts	0x55DE, r16
    7b0c:	10 93 df 55 	sts	0x55DF, r17
	SD_WriteBuffer(tmp32,4);
}

void SD_WriteString(char * string){
	f_puts (string, &Log_File);
    for (uint16_t i=0; i<strlen(string); i++){
    7b10:	6f 5f       	subi	r22, 0xFF	; 255
    7b12:	7f 4f       	sbci	r23, 0xFF	; 255
    7b14:	fe 01       	movw	r30, r28
    7b16:	01 90       	ld	r0, Z+
    7b18:	00 20       	and	r0, r0
    7b1a:	e9 f7       	brne	.-6      	; 0x7b16 <SD_WriteString+0x94>
    7b1c:	31 97       	sbiw	r30, 0x01	; 1
    7b1e:	ec 1b       	sub	r30, r28
    7b20:	fd 0b       	sbc	r31, r29
    7b22:	6e 17       	cp	r22, r30
    7b24:	7f 07       	cpc	r23, r31
    7b26:	08 f4       	brcc	.+2      	; 0x7b2a <SD_WriteString+0xa8>
    7b28:	ba cf       	rjmp	.-140    	; 0x7a9e <SD_WriteString+0x1c>
        CRC = (CRC >> 8) ^ crc_table[string[i] ^ (CRC & 0xFF)];
    }
}
    7b2a:	df 91       	pop	r29
    7b2c:	cf 91       	pop	r28
    7b2e:	1f 91       	pop	r17
    7b30:	0f 91       	pop	r16
    7b32:	ff 90       	pop	r15
    7b34:	ef 90       	pop	r14
    7b36:	08 95       	ret

00007b38 <SD_WriteAirSampleMinute>:
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    7b38:	8f ef       	ldi	r24, 0xFF	; 255
    7b3a:	9f ef       	ldi	r25, 0xFF	; 255
    7b3c:	af ef       	ldi	r26, 0xFF	; 255
    7b3e:	bf ef       	ldi	r27, 0xFF	; 255
    7b40:	80 93 dc 55 	sts	0x55DC, r24
    7b44:	90 93 dd 55 	sts	0x55DD, r25
    7b48:	a0 93 de 55 	sts	0x55DE, r26
    7b4c:	b0 93 df 55 	sts	0x55DF, r27
	length = airNumberOfSlowSamples * airNumberOfSlowChannels;
	length *= 4;
	length += 53;
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);							// magic number
    7b50:	6c e4       	ldi	r22, 0x4C	; 76
    7b52:	74 e7       	ldi	r23, 0x74	; 116
    7b54:	8e ed       	ldi	r24, 0xDE	; 222
    7b56:	90 eb       	ldi	r25, 0xB0	; 176
    7b58:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(length);									// record size
    7b5c:	6d e3       	ldi	r22, 0x3D	; 61
    7b5e:	70 e0       	ldi	r23, 0x00	; 0
    7b60:	80 e0       	ldi	r24, 0x00	; 0
    7b62:	90 e0       	ldi	r25, 0x00	; 0
    7b64:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write16(3);										// record type
    7b68:	83 e0       	ldi	r24, 0x03	; 3
    7b6a:	90 e0       	ldi	r25, 0x00	; 0
    7b6c:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <SD_Write16>
								// ***** payload *****	
	SD_Write32(airSampleTime);							// time
    7b70:	60 91 f1 2c 	lds	r22, 0x2CF1
    7b74:	70 91 f2 2c 	lds	r23, 0x2CF2
    7b78:	80 91 f3 2c 	lds	r24, 0x2CF3
    7b7c:	90 91 f4 2c 	lds	r25, 0x2CF4
    7b80:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(airTicksPerSampleSlowHZ);				// sample period (0.01667hz)
    7b84:	60 e0       	ldi	r22, 0x00	; 0
    7b86:	70 e8       	ldi	r23, 0x80	; 128
    7b88:	87 e9       	ldi	r24, 0x97	; 151
    7b8a:	96 e0       	ldi	r25, 0x06	; 6
    7b8c:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(airNumberOfSlowSamples);					// number of samples
    7b90:	61 e0       	ldi	r22, 0x01	; 1
    7b92:	70 e0       	ldi	r23, 0x00	; 0
    7b94:	80 e0       	ldi	r24, 0x00	; 0
    7b96:	90 e0       	ldi	r25, 0x00	; 0
    7b98:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	
	SD_WriteString("Air_Small");
    7b9c:	80 ea       	ldi	r24, 0xA0	; 160
    7b9e:	90 e2       	ldi	r25, 0x20	; 32
    7ba0:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);
    7ba4:	89 e0       	ldi	r24, 0x09	; 9
    7ba6:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("32");
    7baa:	8a ea       	ldi	r24, 0xAA	; 170
    7bac:	90 e2       	ldi	r25, 0x20	; 32
    7bae:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);
    7bb2:	8a e0       	ldi	r24, 0x0A	; 10
    7bb4:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("Air_Large");
    7bb8:	8d ea       	ldi	r24, 0xAD	; 173
    7bba:	90 e2       	ldi	r25, 0x20	; 32
    7bbc:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);
    7bc0:	89 e0       	ldi	r24, 0x09	; 9
    7bc2:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("32");
    7bc6:	8a ea       	ldi	r24, 0xAA	; 170
    7bc8:	90 e2       	ldi	r25, 0x20	; 32
    7bca:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);
    7bce:	8a e0       	ldi	r24, 0x0A	; 10
    7bd0:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_Write8(0x00);
    7bd4:	80 e0       	ldi	r24, 0x00	; 0
    7bd6:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	
	SD_Write32(airCount[0]);
    7bda:	60 91 8a 37 	lds	r22, 0x378A
    7bde:	70 91 8b 37 	lds	r23, 0x378B
    7be2:	80 91 8c 37 	lds	r24, 0x378C
    7be6:	90 91 8d 37 	lds	r25, 0x378D
    7bea:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(airCount[1]);
    7bee:	60 91 8e 37 	lds	r22, 0x378E
    7bf2:	70 91 8f 37 	lds	r23, 0x378F
    7bf6:	80 91 90 37 	lds	r24, 0x3790
    7bfa:	90 91 91 37 	lds	r25, 0x3791
    7bfe:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_WriteCRC();			
    7c02:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <SD_WriteCRC>
	if(f_sync(&Log_File) != FR_OK){
    7c06:	8d e9       	ldi	r24, 0x9D	; 157
    7c08:	90 e5       	ldi	r25, 0x50	; 80
    7c0a:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <f_sync>
    7c0e:	88 23       	and	r24, r24
    7c10:	11 f0       	breq	.+4      	; 0x7c16 <SD_WriteAirSampleMinute+0xde>
		sdValid = false;
    7c12:	10 92 14 2d 	sts	0x2D14, r1
    7c16:	08 95       	ret

00007c18 <SD_WriteAirSampleSecond>:
    7c18:	8f ef       	ldi	r24, 0xFF	; 255
    7c1a:	9f ef       	ldi	r25, 0xFF	; 255
    7c1c:	af ef       	ldi	r26, 0xFF	; 255
    7c1e:	bf ef       	ldi	r27, 0xFF	; 255
    7c20:	80 93 dc 55 	sts	0x55DC, r24
    7c24:	90 93 dd 55 	sts	0x55DD, r25
    7c28:	a0 93 de 55 	sts	0x55DE, r26
    7c2c:	b0 93 df 55 	sts	0x55DF, r27
	length = airNumberOfFastSamples * airNumberOfFastChannels;
	length *= 4;
	length += 81;
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);							// magic number
    7c30:	6c e4       	ldi	r22, 0x4C	; 76
    7c32:	74 e7       	ldi	r23, 0x74	; 116
    7c34:	8e ed       	ldi	r24, 0xDE	; 222
    7c36:	90 eb       	ldi	r25, 0xB0	; 176
    7c38:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(length);									// record size
    7c3c:	69 e6       	ldi	r22, 0x69	; 105
    7c3e:	70 e0       	ldi	r23, 0x00	; 0
    7c40:	80 e0       	ldi	r24, 0x00	; 0
    7c42:	90 e0       	ldi	r25, 0x00	; 0
    7c44:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write16(3);										// record type
    7c48:	83 e0       	ldi	r24, 0x03	; 3
    7c4a:	90 e0       	ldi	r25, 0x00	; 0
    7c4c:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <SD_Write16>
								// ***** payload *****
	SD_Write32(airSampleTime);							// time
    7c50:	60 91 f1 2c 	lds	r22, 0x2CF1
    7c54:	70 91 f2 2c 	lds	r23, 0x2CF2
    7c58:	80 91 f3 2c 	lds	r24, 0x2CF3
    7c5c:	90 91 f4 2c 	lds	r25, 0x2CF4
    7c60:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(airTicksPerSampleFastHZ);				// sample period (1hz)
    7c64:	60 e0       	ldi	r22, 0x00	; 0
    7c66:	70 e2       	ldi	r23, 0x20	; 32
    7c68:	8c e1       	ldi	r24, 0x1C	; 28
    7c6a:	90 e0       	ldi	r25, 0x00	; 0
    7c6c:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(airNumberOfFastSamples);					// number of samples
    7c70:	61 e0       	ldi	r22, 0x01	; 1
    7c72:	70 e0       	ldi	r23, 0x00	; 0
    7c74:	80 e0       	ldi	r24, 0x00	; 0
    7c76:	90 e0       	ldi	r25, 0x00	; 0
    7c78:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	
	SD_WriteString("Air_1");
    7c7c:	87 eb       	ldi	r24, 0xB7	; 183
    7c7e:	90 e2       	ldi	r25, 0x20	; 32
    7c80:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);
    7c84:	89 e0       	ldi	r24, 0x09	; 9
    7c86:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("32");
    7c8a:	8a ea       	ldi	r24, 0xAA	; 170
    7c8c:	90 e2       	ldi	r25, 0x20	; 32
    7c8e:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);
    7c92:	8a e0       	ldi	r24, 0x0A	; 10
    7c94:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("Air_2");
    7c98:	8d eb       	ldi	r24, 0xBD	; 189
    7c9a:	90 e2       	ldi	r25, 0x20	; 32
    7c9c:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);
    7ca0:	89 e0       	ldi	r24, 0x09	; 9
    7ca2:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("32");
    7ca6:	8a ea       	ldi	r24, 0xAA	; 170
    7ca8:	90 e2       	ldi	r25, 0x20	; 32
    7caa:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);
    7cae:	8a e0       	ldi	r24, 0x0A	; 10
    7cb0:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("Air_3");
    7cb4:	83 ec       	ldi	r24, 0xC3	; 195
    7cb6:	90 e2       	ldi	r25, 0x20	; 32
    7cb8:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);
    7cbc:	89 e0       	ldi	r24, 0x09	; 9
    7cbe:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("32");
    7cc2:	8a ea       	ldi	r24, 0xAA	; 170
    7cc4:	90 e2       	ldi	r25, 0x20	; 32
    7cc6:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);
    7cca:	8a e0       	ldi	r24, 0x0A	; 10
    7ccc:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("Air_4");
    7cd0:	89 ec       	ldi	r24, 0xC9	; 201
    7cd2:	90 e2       	ldi	r25, 0x20	; 32
    7cd4:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);
    7cd8:	89 e0       	ldi	r24, 0x09	; 9
    7cda:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("32");
    7cde:	8a ea       	ldi	r24, 0xAA	; 170
    7ce0:	90 e2       	ldi	r25, 0x20	; 32
    7ce2:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);
    7ce6:	8a e0       	ldi	r24, 0x0A	; 10
    7ce8:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("Air_5");
    7cec:	8f ec       	ldi	r24, 0xCF	; 207
    7cee:	90 e2       	ldi	r25, 0x20	; 32
    7cf0:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);
    7cf4:	89 e0       	ldi	r24, 0x09	; 9
    7cf6:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("32");
    7cfa:	8a ea       	ldi	r24, 0xAA	; 170
    7cfc:	90 e2       	ldi	r25, 0x20	; 32
    7cfe:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);
    7d02:	8a e0       	ldi	r24, 0x0A	; 10
    7d04:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("Air_6");
    7d08:	85 ed       	ldi	r24, 0xD5	; 213
    7d0a:	90 e2       	ldi	r25, 0x20	; 32
    7d0c:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);
    7d10:	89 e0       	ldi	r24, 0x09	; 9
    7d12:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("32");
    7d16:	8a ea       	ldi	r24, 0xAA	; 170
    7d18:	90 e2       	ldi	r25, 0x20	; 32
    7d1a:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);
    7d1e:	8a e0       	ldi	r24, 0x0A	; 10
    7d20:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_Write8(0x00);
    7d24:	80 e0       	ldi	r24, 0x00	; 0
    7d26:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	
	SD_Write32(airCount[0]);
    7d2a:	60 91 8a 37 	lds	r22, 0x378A
    7d2e:	70 91 8b 37 	lds	r23, 0x378B
    7d32:	80 91 8c 37 	lds	r24, 0x378C
    7d36:	90 91 8d 37 	lds	r25, 0x378D
    7d3a:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(airCount[1]);
    7d3e:	60 91 8e 37 	lds	r22, 0x378E
    7d42:	70 91 8f 37 	lds	r23, 0x378F
    7d46:	80 91 90 37 	lds	r24, 0x3790
    7d4a:	90 91 91 37 	lds	r25, 0x3791
    7d4e:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(airCount[2]);
    7d52:	60 91 92 37 	lds	r22, 0x3792
    7d56:	70 91 93 37 	lds	r23, 0x3793
    7d5a:	80 91 94 37 	lds	r24, 0x3794
    7d5e:	90 91 95 37 	lds	r25, 0x3795
    7d62:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(airCount[3]);
    7d66:	60 91 96 37 	lds	r22, 0x3796
    7d6a:	70 91 97 37 	lds	r23, 0x3797
    7d6e:	80 91 98 37 	lds	r24, 0x3798
    7d72:	90 91 99 37 	lds	r25, 0x3799
    7d76:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(airCount[4]);
    7d7a:	60 91 9a 37 	lds	r22, 0x379A
    7d7e:	70 91 9b 37 	lds	r23, 0x379B
    7d82:	80 91 9c 37 	lds	r24, 0x379C
    7d86:	90 91 9d 37 	lds	r25, 0x379D
    7d8a:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(airCount[5]);
    7d8e:	60 91 9e 37 	lds	r22, 0x379E
    7d92:	70 91 9f 37 	lds	r23, 0x379F
    7d96:	80 91 a0 37 	lds	r24, 0x37A0
    7d9a:	90 91 a1 37 	lds	r25, 0x37A1
    7d9e:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_WriteCRC();			
    7da2:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <SD_WriteCRC>
	if(f_sync(&Log_File) != FR_OK){
    7da6:	8d e9       	ldi	r24, 0x9D	; 157
    7da8:	90 e5       	ldi	r25, 0x50	; 80
    7daa:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <f_sync>
    7dae:	88 23       	and	r24, r24
    7db0:	11 f0       	breq	.+4      	; 0x7db6 <SD_WriteAirSampleSecond+0x19e>
		sdValid = false;
    7db2:	10 92 14 2d 	sts	0x2D14, r1
    7db6:	08 95       	ret

00007db8 <SD_WriteLightBuffer>:
	if(f_sync(&Log_File) != FR_OK){
		sdValid = false;
	}
}

void SD_WriteLightBuffer(uint8_t bufferNumber){
    7db8:	0f 93       	push	r16
    7dba:	1f 93       	push	r17
    7dbc:	cf 93       	push	r28
    7dbe:	df 93       	push	r29
    7dc0:	08 2f       	mov	r16, r24
    7dc2:	8f ef       	ldi	r24, 0xFF	; 255
    7dc4:	9f ef       	ldi	r25, 0xFF	; 255
    7dc6:	af ef       	ldi	r26, 0xFF	; 255
    7dc8:	bf ef       	ldi	r27, 0xFF	; 255
    7dca:	80 93 dc 55 	sts	0x55DC, r24
    7dce:	90 93 dd 55 	sts	0x55DD, r25
    7dd2:	a0 93 de 55 	sts	0x55DE, r26
    7dd6:	b0 93 df 55 	sts	0x55DF, r27
	length = lightNumberOfSamples*lightNumberOfChannels;
	length *= 4;
	length += 84; 

	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);									// magic number
    7dda:	6c e4       	ldi	r22, 0x4C	; 76
    7ddc:	74 e7       	ldi	r23, 0x74	; 116
    7dde:	8e ed       	ldi	r24, 0xDE	; 222
    7de0:	90 eb       	ldi	r25, 0xB0	; 176
    7de2:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(length);											// record size
    7de6:	64 ef       	ldi	r22, 0xF4	; 244
    7de8:	70 e0       	ldi	r23, 0x00	; 0
    7dea:	80 e0       	ldi	r24, 0x00	; 0
    7dec:	90 e0       	ldi	r25, 0x00	; 0
    7dee:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write16(3);												// record type
    7df2:	83 e0       	ldi	r24, 0x03	; 3
    7df4:	90 e0       	ldi	r25, 0x00	; 0
    7df6:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <SD_Write16>

								// ***** payload *****

	SD_Write32(lightSampleStartTime[bufferNumber]);				// time
    7dfa:	10 e0       	ldi	r17, 0x00	; 0
    7dfc:	f8 01       	movw	r30, r16
    7dfe:	ee 0f       	add	r30, r30
    7e00:	ff 1f       	adc	r31, r31
    7e02:	ee 0f       	add	r30, r30
    7e04:	ff 1f       	adc	r31, r31
    7e06:	e8 51       	subi	r30, 0x18	; 24
    7e08:	f8 4c       	sbci	r31, 0xC8	; 200
    7e0a:	60 81       	ld	r22, Z
    7e0c:	71 81       	ldd	r23, Z+1	; 0x01
    7e0e:	82 81       	ldd	r24, Z+2	; 0x02
    7e10:	93 81       	ldd	r25, Z+3	; 0x03
    7e12:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(lightTicksPerSample);							// sample period (1hz)
    7e16:	60 e0       	ldi	r22, 0x00	; 0
    7e18:	70 e2       	ldi	r23, 0x20	; 32
    7e1a:	8c e1       	ldi	r24, 0x1C	; 28
    7e1c:	90 e0       	ldi	r25, 0x00	; 0
    7e1e:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(lightNumberOfSamples);							// number of samples
    7e22:	6a e0       	ldi	r22, 0x0A	; 10
    7e24:	70 e0       	ldi	r23, 0x00	; 0
    7e26:	80 e0       	ldi	r24, 0x00	; 0
    7e28:	90 e0       	ldi	r25, 0x00	; 0
    7e2a:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>

	SD_WriteString("Light_Green");
    7e2e:	8b ed       	ldi	r24, 0xDB	; 219
    7e30:	90 e2       	ldi	r25, 0x20	; 32
    7e32:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);
    7e36:	89 e0       	ldi	r24, 0x09	; 9
    7e38:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("32");
    7e3c:	8a ea       	ldi	r24, 0xAA	; 170
    7e3e:	90 e2       	ldi	r25, 0x20	; 32
    7e40:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);
    7e44:	8a e0       	ldi	r24, 0x0A	; 10
    7e46:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("Light_Red");
    7e4a:	87 ee       	ldi	r24, 0xE7	; 231
    7e4c:	90 e2       	ldi	r25, 0x20	; 32
    7e4e:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);
    7e52:	89 e0       	ldi	r24, 0x09	; 9
    7e54:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("32");
    7e58:	8a ea       	ldi	r24, 0xAA	; 170
    7e5a:	90 e2       	ldi	r25, 0x20	; 32
    7e5c:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);
    7e60:	8a e0       	ldi	r24, 0x0A	; 10
    7e62:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("Light_Blue");
    7e66:	81 ef       	ldi	r24, 0xF1	; 241
    7e68:	90 e2       	ldi	r25, 0x20	; 32
    7e6a:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);
    7e6e:	89 e0       	ldi	r24, 0x09	; 9
    7e70:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("32");
    7e74:	8a ea       	ldi	r24, 0xAA	; 170
    7e76:	90 e2       	ldi	r25, 0x20	; 32
    7e78:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);
    7e7c:	8a e0       	ldi	r24, 0x0A	; 10
    7e7e:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("Light_Clear");
    7e82:	8c ef       	ldi	r24, 0xFC	; 252
    7e84:	90 e2       	ldi	r25, 0x20	; 32
    7e86:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);
    7e8a:	89 e0       	ldi	r24, 0x09	; 9
    7e8c:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("32");
    7e90:	8a ea       	ldi	r24, 0xAA	; 170
    7e92:	90 e2       	ldi	r25, 0x20	; 32
    7e94:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);
    7e98:	8a e0       	ldi	r24, 0x0A	; 10
    7e9a:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_Write8(0x00);
    7e9e:	80 e0       	ldi	r24, 0x00	; 0
    7ea0:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
    7ea4:	80 e5       	ldi	r24, 0x50	; 80
    7ea6:	90 e0       	ldi	r25, 0x00	; 0
    7ea8:	08 9f       	mul	r16, r24
    7eaa:	e0 01       	movw	r28, r0
    7eac:	09 9f       	mul	r16, r25
    7eae:	d0 0d       	add	r29, r0
    7eb0:	18 9f       	mul	r17, r24
    7eb2:	d0 0d       	add	r29, r0
    7eb4:	11 24       	eor	r1, r1
    7eb6:	ce 5c       	subi	r28, 0xCE	; 206
    7eb8:	da 4a       	sbci	r29, 0xAA	; 170
    7eba:	00 e0       	ldi	r16, 0x00	; 0

	for(uint8_t i = 0; i < (lightNumberOfSamples*lightNumberOfChannels); i++){
		SD_Write32(lightBuffer[bufferNumber][i]);
    7ebc:	69 91       	ld	r22, Y+
    7ebe:	79 91       	ld	r23, Y+
    7ec0:	80 e0       	ldi	r24, 0x00	; 0
    7ec2:	90 e0       	ldi	r25, 0x00	; 0
    7ec4:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write8(0x09);
	SD_WriteString("32");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	for(uint8_t i = 0; i < (lightNumberOfSamples*lightNumberOfChannels); i++){
    7ec8:	0f 5f       	subi	r16, 0xFF	; 255
    7eca:	08 32       	cpi	r16, 0x28	; 40
    7ecc:	b9 f7       	brne	.-18     	; 0x7ebc <SD_WriteLightBuffer+0x104>
		SD_Write32(lightBuffer[bufferNumber][i]);
	}
	
	SD_WriteCRC();			
    7ece:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <SD_WriteCRC>
	if(f_sync(&Log_File) != FR_OK){
    7ed2:	8d e9       	ldi	r24, 0x9D	; 157
    7ed4:	90 e5       	ldi	r25, 0x50	; 80
    7ed6:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <f_sync>
    7eda:	88 23       	and	r24, r24
    7edc:	11 f0       	breq	.+4      	; 0x7ee2 <SD_WriteLightBuffer+0x12a>
		sdValid = false;
    7ede:	10 92 14 2d 	sts	0x2D14, r1
	}
}
    7ee2:	df 91       	pop	r29
    7ee4:	cf 91       	pop	r28
    7ee6:	1f 91       	pop	r17
    7ee8:	0f 91       	pop	r16
    7eea:	08 95       	ret

00007eec <SD_WriteMicrophoneBuffer>:
	if(f_sync(&Log_File) != FR_OK){
		sdValid = false;
	}
}

void SD_WriteMicrophoneBuffer(uint8_t bufferNumber){
    7eec:	ef 92       	push	r14
    7eee:	ff 92       	push	r15
    7ef0:	0f 93       	push	r16
    7ef2:	1f 93       	push	r17
    7ef4:	cf 93       	push	r28
    7ef6:	df 93       	push	r29
    7ef8:	08 2f       	mov	r16, r24
    7efa:	8f ef       	ldi	r24, 0xFF	; 255
    7efc:	9f ef       	ldi	r25, 0xFF	; 255
    7efe:	af ef       	ldi	r26, 0xFF	; 255
    7f00:	bf ef       	ldi	r27, 0xFF	; 255
    7f02:	80 93 dc 55 	sts	0x55DC, r24
    7f06:	90 93 dd 55 	sts	0x55DD, r25
    7f0a:	a0 93 de 55 	sts	0x55DE, r26
    7f0e:	b0 93 df 55 	sts	0x55DF, r27
	uint16_t length;
	length = 40+microphoneNumberOfSamples;
	

	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);									// magic number
    7f12:	6c e4       	ldi	r22, 0x4C	; 76
    7f14:	74 e7       	ldi	r23, 0x74	; 116
    7f16:	8e ed       	ldi	r24, 0xDE	; 222
    7f18:	90 eb       	ldi	r25, 0xB0	; 176
    7f1a:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(length);											// record size
    7f1e:	68 ef       	ldi	r22, 0xF8	; 248
    7f20:	77 e0       	ldi	r23, 0x07	; 7
    7f22:	80 e0       	ldi	r24, 0x00	; 0
    7f24:	90 e0       	ldi	r25, 0x00	; 0
    7f26:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write16(3);												// record type
    7f2a:	83 e0       	ldi	r24, 0x03	; 3
    7f2c:	90 e0       	ldi	r25, 0x00	; 0
    7f2e:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <SD_Write16>

								// ***** payload *****

	SD_Write32(microphoneSampleStartTime[bufferNumber]);		// time
    7f32:	10 e0       	ldi	r17, 0x00	; 0
    7f34:	f8 01       	movw	r30, r16
    7f36:	ee 0f       	add	r30, r30
    7f38:	ff 1f       	adc	r31, r31
    7f3a:	ee 0f       	add	r30, r30
    7f3c:	ff 1f       	adc	r31, r31
    7f3e:	e0 56       	subi	r30, 0x60	; 96
    7f40:	f9 4c       	sbci	r31, 0xC9	; 201
    7f42:	60 81       	ld	r22, Z
    7f44:	71 81       	ldd	r23, Z+1	; 0x01
    7f46:	82 81       	ldd	r24, Z+2	; 0x02
    7f48:	93 81       	ldd	r25, Z+3	; 0x03
    7f4a:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(microphoneTicksPerSample);						// sample period (7.2khz)
    7f4e:	60 e0       	ldi	r22, 0x00	; 0
    7f50:	71 e0       	ldi	r23, 0x01	; 1
    7f52:	80 e0       	ldi	r24, 0x00	; 0
    7f54:	90 e0       	ldi	r25, 0x00	; 0
    7f56:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(microphoneNumberOfSamples);						// number of samples
    7f5a:	60 ed       	ldi	r22, 0xD0	; 208
    7f5c:	77 e0       	ldi	r23, 0x07	; 7
    7f5e:	80 e0       	ldi	r24, 0x00	; 0
    7f60:	90 e0       	ldi	r25, 0x00	; 0
    7f62:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>

	SD_WriteString("Microphone");
    7f66:	88 e0       	ldi	r24, 0x08	; 8
    7f68:	91 e2       	ldi	r25, 0x21	; 33
    7f6a:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);
    7f6e:	89 e0       	ldi	r24, 0x09	; 9
    7f70:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("8");
    7f74:	83 e1       	ldi	r24, 0x13	; 19
    7f76:	91 e2       	ldi	r25, 0x21	; 33
    7f78:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);
    7f7c:	8a e0       	ldi	r24, 0x0A	; 10
    7f7e:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_Write8(0x00);
    7f82:	80 e0       	ldi	r24, 0x00	; 0
    7f84:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
    7f88:	80 ed       	ldi	r24, 0xD0	; 208
    7f8a:	97 e0       	ldi	r25, 0x07	; 7
    7f8c:	08 9f       	mul	r16, r24
    7f8e:	70 01       	movw	r14, r0
    7f90:	09 9f       	mul	r16, r25
    7f92:	f0 0c       	add	r15, r0
    7f94:	18 9f       	mul	r17, r24
    7f96:	f0 0c       	add	r15, r0
    7f98:	11 24       	eor	r1, r1
    7f9a:	8c e5       	ldi	r24, 0x5C	; 92
    7f9c:	98 e3       	ldi	r25, 0x38	; 56
    7f9e:	e8 0e       	add	r14, r24
    7fa0:	f9 1e       	adc	r15, r25
    7fa2:	c0 e0       	ldi	r28, 0x00	; 0
    7fa4:	d0 e0       	ldi	r29, 0x00	; 0

	for(uint16_t i = 0; i < microphoneNumberOfSamples; i++){
		SD_Write8(microphoneBuffer[bufferNumber][i]);
    7fa6:	f7 01       	movw	r30, r14
    7fa8:	81 91       	ld	r24, Z+
    7faa:	7f 01       	movw	r14, r30
    7fac:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_Write8(0x09);
	SD_WriteString("8");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	for(uint16_t i = 0; i < microphoneNumberOfSamples; i++){
    7fb0:	21 96       	adiw	r28, 0x01	; 1
    7fb2:	f7 e0       	ldi	r31, 0x07	; 7
    7fb4:	c0 3d       	cpi	r28, 0xD0	; 208
    7fb6:	df 07       	cpc	r29, r31
    7fb8:	b1 f7       	brne	.-20     	; 0x7fa6 <SD_WriteMicrophoneBuffer+0xba>
		SD_Write8(microphoneBuffer[bufferNumber][i]);
	}
	
	SD_WriteCRC();									
    7fba:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <SD_WriteCRC>
	if(f_sync(&Log_File) != FR_OK){
    7fbe:	8d e9       	ldi	r24, 0x9D	; 157
    7fc0:	90 e5       	ldi	r25, 0x50	; 80
    7fc2:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <f_sync>
    7fc6:	88 23       	and	r24, r24
    7fc8:	11 f0       	breq	.+4      	; 0x7fce <SD_WriteMicrophoneBuffer+0xe2>
		sdValid = false;
    7fca:	10 92 14 2d 	sts	0x2D14, r1
	}
}
    7fce:	df 91       	pop	r29
    7fd0:	cf 91       	pop	r28
    7fd2:	1f 91       	pop	r17
    7fd4:	0f 91       	pop	r16
    7fd6:	ff 90       	pop	r15
    7fd8:	ef 90       	pop	r14
    7fda:	08 95       	ret

00007fdc <SD_WritePressureBuffer>:
		sdValid = false;
	}
}


void SD_WritePressureBuffer(uint8_t bufferNumber){
    7fdc:	0f 93       	push	r16
    7fde:	1f 93       	push	r17
    7fe0:	cf 93       	push	r28
    7fe2:	df 93       	push	r29
    7fe4:	08 2f       	mov	r16, r24
    7fe6:	8f ef       	ldi	r24, 0xFF	; 255
    7fe8:	9f ef       	ldi	r25, 0xFF	; 255
    7fea:	af ef       	ldi	r26, 0xFF	; 255
    7fec:	bf ef       	ldi	r27, 0xFF	; 255
    7fee:	80 93 dc 55 	sts	0x55DC, r24
    7ff2:	90 93 dd 55 	sts	0x55DD, r25
    7ff6:	a0 93 de 55 	sts	0x55DE, r26
    7ffa:	b0 93 df 55 	sts	0x55DF, r27
	uint16_t length;
	length = pressureNumberOfSamples*2;
	length += 39;
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);									// magic number
    7ffe:	6c e4       	ldi	r22, 0x4C	; 76
    8000:	74 e7       	ldi	r23, 0x74	; 116
    8002:	8e ed       	ldi	r24, 0xDE	; 222
    8004:	90 eb       	ldi	r25, 0xB0	; 176
    8006:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(length);											// record size
    800a:	6b e3       	ldi	r22, 0x3B	; 59
    800c:	70 e0       	ldi	r23, 0x00	; 0
    800e:	80 e0       	ldi	r24, 0x00	; 0
    8010:	90 e0       	ldi	r25, 0x00	; 0
    8012:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write16(3);												// record type
    8016:	83 e0       	ldi	r24, 0x03	; 3
    8018:	90 e0       	ldi	r25, 0x00	; 0
    801a:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <SD_Write16>

								// ***** payload *****

	SD_Write32(pressureSampleStartTime[bufferNumber]);			// time
    801e:	10 e0       	ldi	r17, 0x00	; 0
    8020:	f8 01       	movw	r30, r16
    8022:	ee 0f       	add	r30, r30
    8024:	ff 1f       	adc	r31, r31
    8026:	ee 0f       	add	r30, r30
    8028:	ff 1f       	adc	r31, r31
    802a:	ee 52       	subi	r30, 0x2E	; 46
    802c:	fa 4a       	sbci	r31, 0xAA	; 170
    802e:	60 81       	ld	r22, Z
    8030:	71 81       	ldd	r23, Z+1	; 0x01
    8032:	82 81       	ldd	r24, Z+2	; 0x02
    8034:	93 81       	ldd	r25, Z+3	; 0x03
    8036:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(pressureTicksPerSample);							// sample period (1hz)
    803a:	60 e0       	ldi	r22, 0x00	; 0
    803c:	70 e2       	ldi	r23, 0x20	; 32
    803e:	8c e1       	ldi	r24, 0x1C	; 28
    8040:	90 e0       	ldi	r25, 0x00	; 0
    8042:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(pressureNumberOfSamples);						// number of samples
    8046:	6a e0       	ldi	r22, 0x0A	; 10
    8048:	70 e0       	ldi	r23, 0x00	; 0
    804a:	80 e0       	ldi	r24, 0x00	; 0
    804c:	90 e0       	ldi	r25, 0x00	; 0
    804e:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>

	SD_WriteString("Pressure");
    8052:	85 e1       	ldi	r24, 0x15	; 21
    8054:	91 e2       	ldi	r25, 0x21	; 33
    8056:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);
    805a:	89 e0       	ldi	r24, 0x09	; 9
    805c:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("16");
    8060:	8e e1       	ldi	r24, 0x1E	; 30
    8062:	91 e2       	ldi	r25, 0x21	; 33
    8064:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);
    8068:	8a e0       	ldi	r24, 0x0A	; 10
    806a:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_Write8(0x00);
    806e:	80 e0       	ldi	r24, 0x00	; 0
    8070:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
    8074:	84 e1       	ldi	r24, 0x14	; 20
    8076:	90 e0       	ldi	r25, 0x00	; 0
    8078:	08 9f       	mul	r16, r24
    807a:	e0 01       	movw	r28, r0
    807c:	09 9f       	mul	r16, r25
    807e:	d0 0d       	add	r29, r0
    8080:	18 9f       	mul	r17, r24
    8082:	d0 0d       	add	r29, r0
    8084:	11 24       	eor	r1, r1
    8086:	c6 5f       	subi	r28, 0xF6	; 246
    8088:	da 4a       	sbci	r29, 0xAA	; 170
    808a:	00 e0       	ldi	r16, 0x00	; 0

	for(uint8_t i = 0; i < pressureNumberOfSamples; i++){
		SD_Write16(pressureBuffer[bufferNumber][i]);
    808c:	89 91       	ld	r24, Y+
    808e:	99 91       	ld	r25, Y+
    8090:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <SD_Write16>
	SD_Write8(0x09);
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);

	for(uint8_t i = 0; i < pressureNumberOfSamples; i++){
    8094:	0f 5f       	subi	r16, 0xFF	; 255
    8096:	0a 30       	cpi	r16, 0x0A	; 10
    8098:	c9 f7       	brne	.-14     	; 0x808c <SD_WritePressureBuffer+0xb0>
		SD_Write16(pressureBuffer[bufferNumber][i]);
	}
	
	SD_WriteCRC();			
    809a:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <SD_WriteCRC>
	if(f_sync(&Log_File) != FR_OK){
    809e:	8d e9       	ldi	r24, 0x9D	; 157
    80a0:	90 e5       	ldi	r25, 0x50	; 80
    80a2:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <f_sync>
    80a6:	88 23       	and	r24, r24
    80a8:	11 f0       	breq	.+4      	; 0x80ae <SD_WritePressureBuffer+0xd2>
		sdValid = false;
    80aa:	10 92 14 2d 	sts	0x2D14, r1
	}
}
    80ae:	df 91       	pop	r29
    80b0:	cf 91       	pop	r28
    80b2:	1f 91       	pop	r17
    80b4:	0f 91       	pop	r16
    80b6:	08 95       	ret

000080b8 <SD_WriteHumidityBuffer>:
	if(f_sync(&Log_File) != FR_OK){
		sdValid = false;
	}
}

void SD_WriteHumidityBuffer(uint8_t bufferNumber){
    80b8:	0f 93       	push	r16
    80ba:	1f 93       	push	r17
    80bc:	cf 93       	push	r28
    80be:	df 93       	push	r29
    80c0:	08 2f       	mov	r16, r24
    80c2:	8f ef       	ldi	r24, 0xFF	; 255
    80c4:	9f ef       	ldi	r25, 0xFF	; 255
    80c6:	af ef       	ldi	r26, 0xFF	; 255
    80c8:	bf ef       	ldi	r27, 0xFF	; 255
    80ca:	80 93 dc 55 	sts	0x55DC, r24
    80ce:	90 93 dd 55 	sts	0x55DD, r25
    80d2:	a0 93 de 55 	sts	0x55DE, r26
    80d6:	b0 93 df 55 	sts	0x55DF, r27
	uint16_t length;
	length = humidityNumberOfSamples*2;
	length += 39;
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);									// magic number
    80da:	6c e4       	ldi	r22, 0x4C	; 76
    80dc:	74 e7       	ldi	r23, 0x74	; 116
    80de:	8e ed       	ldi	r24, 0xDE	; 222
    80e0:	90 eb       	ldi	r25, 0xB0	; 176
    80e2:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(length);											// record size
    80e6:	6b e3       	ldi	r22, 0x3B	; 59
    80e8:	70 e0       	ldi	r23, 0x00	; 0
    80ea:	80 e0       	ldi	r24, 0x00	; 0
    80ec:	90 e0       	ldi	r25, 0x00	; 0
    80ee:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write16(3);												// record type
    80f2:	83 e0       	ldi	r24, 0x03	; 3
    80f4:	90 e0       	ldi	r25, 0x00	; 0
    80f6:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <SD_Write16>
	
	// ***** payload *****
	
	SD_Write32(humiditySampleStartTime[bufferNumber]);			// time
    80fa:	10 e0       	ldi	r17, 0x00	; 0
    80fc:	f8 01       	movw	r30, r16
    80fe:	ee 0f       	add	r30, r30
    8100:	ff 1f       	adc	r31, r31
    8102:	ee 0f       	add	r30, r30
    8104:	ff 1f       	adc	r31, r31
    8106:	ed 5d       	subi	r30, 0xDD	; 221
    8108:	f7 4c       	sbci	r31, 0xC7	; 199
    810a:	60 81       	ld	r22, Z
    810c:	71 81       	ldd	r23, Z+1	; 0x01
    810e:	82 81       	ldd	r24, Z+2	; 0x02
    8110:	93 81       	ldd	r25, Z+3	; 0x03
    8112:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(humidityTicksPerSample);							// sample period 
    8116:	60 e0       	ldi	r22, 0x00	; 0
    8118:	70 e2       	ldi	r23, 0x20	; 32
    811a:	8c e1       	ldi	r24, 0x1C	; 28
    811c:	90 e0       	ldi	r25, 0x00	; 0
    811e:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(humidityNumberOfSamples);						// number of samples
    8122:	6a e0       	ldi	r22, 0x0A	; 10
    8124:	70 e0       	ldi	r23, 0x00	; 0
    8126:	80 e0       	ldi	r24, 0x00	; 0
    8128:	90 e0       	ldi	r25, 0x00	; 0
    812a:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	
	SD_WriteString("Humidity");
    812e:	81 e2       	ldi	r24, 0x21	; 33
    8130:	91 e2       	ldi	r25, 0x21	; 33
    8132:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);
    8136:	89 e0       	ldi	r24, 0x09	; 9
    8138:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("16");
    813c:	8e e1       	ldi	r24, 0x1E	; 30
    813e:	91 e2       	ldi	r25, 0x21	; 33
    8140:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);
    8144:	8a e0       	ldi	r24, 0x0A	; 10
    8146:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_Write8(0x00);
    814a:	80 e0       	ldi	r24, 0x00	; 0
    814c:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
    8150:	84 e1       	ldi	r24, 0x14	; 20
    8152:	90 e0       	ldi	r25, 0x00	; 0
    8154:	08 9f       	mul	r16, r24
    8156:	e0 01       	movw	r28, r0
    8158:	09 9f       	mul	r16, r25
    815a:	d0 0d       	add	r29, r0
    815c:	18 9f       	mul	r17, r24
    815e:	d0 0d       	add	r29, r0
    8160:	11 24       	eor	r1, r1
    8162:	c4 51       	subi	r28, 0x14	; 20
    8164:	d9 4a       	sbci	r29, 0xA9	; 169
    8166:	00 e0       	ldi	r16, 0x00	; 0
	
	
	for(uint8_t i = 0; i < humidityNumberOfSamples; i++){
		SD_Write16(humidityBuffer[bufferNumber][i]);
    8168:	89 91       	ld	r24, Y+
    816a:	99 91       	ld	r25, Y+
    816c:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <SD_Write16>
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);
	
	
	for(uint8_t i = 0; i < humidityNumberOfSamples; i++){
    8170:	0f 5f       	subi	r16, 0xFF	; 255
    8172:	0a 30       	cpi	r16, 0x0A	; 10
    8174:	c9 f7       	brne	.-14     	; 0x8168 <SD_WriteHumidityBuffer+0xb0>
		SD_Write16(humidityBuffer[bufferNumber][i]);
	}
	
	SD_WriteCRC();			// CRC
    8176:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <SD_WriteCRC>
	if(f_sync(&Log_File) != FR_OK){
    817a:	8d e9       	ldi	r24, 0x9D	; 157
    817c:	90 e5       	ldi	r25, 0x50	; 80
    817e:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <f_sync>
    8182:	88 23       	and	r24, r24
    8184:	11 f0       	breq	.+4      	; 0x818a <SD_WriteHumidityBuffer+0xd2>
		sdValid = false;
    8186:	10 92 14 2d 	sts	0x2D14, r1
	}
}
    818a:	df 91       	pop	r29
    818c:	cf 91       	pop	r28
    818e:	1f 91       	pop	r17
    8190:	0f 91       	pop	r16
    8192:	08 95       	ret

00008194 <SD_WriteTemperatureBuffer>:
	}

}


void SD_WriteTemperatureBuffer(uint8_t bufferNumber){
    8194:	0f 93       	push	r16
    8196:	1f 93       	push	r17
    8198:	cf 93       	push	r28
    819a:	df 93       	push	r29
    819c:	08 2f       	mov	r16, r24
    819e:	8f ef       	ldi	r24, 0xFF	; 255
    81a0:	9f ef       	ldi	r25, 0xFF	; 255
    81a2:	af ef       	ldi	r26, 0xFF	; 255
    81a4:	bf ef       	ldi	r27, 0xFF	; 255
    81a6:	80 93 dc 55 	sts	0x55DC, r24
    81aa:	90 93 dd 55 	sts	0x55DD, r25
    81ae:	a0 93 de 55 	sts	0x55DE, r26
    81b2:	b0 93 df 55 	sts	0x55DF, r27
	uint16_t length;
	length = temperatureNumberOfSamples*2;
	length += 42;
	
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);									// magic number 
    81b6:	6c e4       	ldi	r22, 0x4C	; 76
    81b8:	74 e7       	ldi	r23, 0x74	; 116
    81ba:	8e ed       	ldi	r24, 0xDE	; 222
    81bc:	90 eb       	ldi	r25, 0xB0	; 176
    81be:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(length);											// record size  
    81c2:	6e e3       	ldi	r22, 0x3E	; 62
    81c4:	70 e0       	ldi	r23, 0x00	; 0
    81c6:	80 e0       	ldi	r24, 0x00	; 0
    81c8:	90 e0       	ldi	r25, 0x00	; 0
    81ca:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write16(3);												// record type
    81ce:	83 e0       	ldi	r24, 0x03	; 3
    81d0:	90 e0       	ldi	r25, 0x00	; 0
    81d2:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <SD_Write16>
	
	// ***** payload *****
	
	SD_Write32(temperatureSampleStartTime[bufferNumber]);		// time	
    81d6:	10 e0       	ldi	r17, 0x00	; 0
    81d8:	f8 01       	movw	r30, r16
    81da:	ee 0f       	add	r30, r30
    81dc:	ff 1f       	adc	r31, r31
    81de:	ee 0f       	add	r30, r30
    81e0:	ff 1f       	adc	r31, r31
    81e2:	e8 5c       	subi	r30, 0xC8	; 200
    81e4:	f9 4c       	sbci	r31, 0xC9	; 201
    81e6:	60 81       	ld	r22, Z
    81e8:	71 81       	ldd	r23, Z+1	; 0x01
    81ea:	82 81       	ldd	r24, Z+2	; 0x02
    81ec:	93 81       	ldd	r25, Z+3	; 0x03
    81ee:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(temperatureTicksPerSample);						// sample period 
    81f2:	60 e0       	ldi	r22, 0x00	; 0
    81f4:	70 e2       	ldi	r23, 0x20	; 32
    81f6:	8c e1       	ldi	r24, 0x1C	; 28
    81f8:	90 e0       	ldi	r25, 0x00	; 0
    81fa:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(temperatureNumberOfSamples);						// number of samples
    81fe:	6a e0       	ldi	r22, 0x0A	; 10
    8200:	70 e0       	ldi	r23, 0x00	; 0
    8202:	80 e0       	ldi	r24, 0x00	; 0
    8204:	90 e0       	ldi	r25, 0x00	; 0
    8206:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	
	SD_WriteString("Temperature");
    820a:	8a e2       	ldi	r24, 0x2A	; 42
    820c:	91 e2       	ldi	r25, 0x21	; 33
    820e:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);
    8212:	89 e0       	ldi	r24, 0x09	; 9
    8214:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("16");
    8218:	8e e1       	ldi	r24, 0x1E	; 30
    821a:	91 e2       	ldi	r25, 0x21	; 33
    821c:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);
    8220:	8a e0       	ldi	r24, 0x0A	; 10
    8222:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_Write8(0x00);	
    8226:	80 e0       	ldi	r24, 0x00	; 0
    8228:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
    822c:	84 e1       	ldi	r24, 0x14	; 20
    822e:	90 e0       	ldi	r25, 0x00	; 0
    8230:	08 9f       	mul	r16, r24
    8232:	e0 01       	movw	r28, r0
    8234:	09 9f       	mul	r16, r25
    8236:	d0 0d       	add	r29, r0
    8238:	18 9f       	mul	r17, r24
    823a:	d0 0d       	add	r29, r0
    823c:	11 24       	eor	r1, r1
    823e:	cf 5f       	subi	r28, 0xFF	; 255
    8240:	d9 4c       	sbci	r29, 0xC9	; 201
    8242:	00 e0       	ldi	r16, 0x00	; 0
	
	for(uint8_t i = 0; i < temperatureNumberOfSamples; i++){
		SD_Write16(temperatureBuffer[bufferNumber][i]);
    8244:	89 91       	ld	r24, Y+
    8246:	99 91       	ld	r25, Y+
    8248:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <SD_Write16>
	SD_Write8(0x09);
	SD_WriteString("16");
	SD_Write8(0x0A);
	SD_Write8(0x00);	
	
	for(uint8_t i = 0; i < temperatureNumberOfSamples; i++){
    824c:	0f 5f       	subi	r16, 0xFF	; 255
    824e:	0a 30       	cpi	r16, 0x0A	; 10
    8250:	c9 f7       	brne	.-14     	; 0x8244 <SD_WriteTemperatureBuffer+0xb0>
		SD_Write16(temperatureBuffer[bufferNumber][i]);
	}
	
	SD_WriteCRC();					
    8252:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <SD_WriteCRC>
	if(f_sync(&Log_File) != FR_OK){
    8256:	8d e9       	ldi	r24, 0x9D	; 157
    8258:	90 e5       	ldi	r25, 0x50	; 80
    825a:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <f_sync>
    825e:	88 23       	and	r24, r24
    8260:	11 f0       	breq	.+4      	; 0x8266 <SD_WriteTemperatureBuffer+0xd2>
		sdValid = false;
    8262:	10 92 14 2d 	sts	0x2D14, r1
	}
}
    8266:	df 91       	pop	r29
    8268:	cf 91       	pop	r28
    826a:	1f 91       	pop	r17
    826c:	0f 91       	pop	r16
    826e:	08 95       	ret

00008270 <Rs232_SendString>:
void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
	Rs232_Usart.DATA = data;	
}

void Rs232_SendString(char string [],bool CR){
    8270:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < strlen(string); i++){
    8272:	dc 01       	movw	r26, r24
    8274:	0d 90       	ld	r0, X+
    8276:	00 20       	and	r0, r0
    8278:	e9 f7       	brne	.-6      	; 0x8274 <Rs232_SendString+0x4>
    827a:	11 97       	sbiw	r26, 0x01	; 1
    827c:	a8 1b       	sub	r26, r24
    827e:	b9 0b       	sbc	r27, r25
    8280:	90 e0       	ldi	r25, 0x00	; 0
    8282:	0a c0       	rjmp	.+20     	; 0x8298 <Rs232_SendString+0x28>
		Rs232_SendByte(string[i]);
    8284:	e2 0f       	add	r30, r18
    8286:	f3 1f       	adc	r31, r19
    8288:	40 81       	ld	r20, Z
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    828a:	80 91 a1 09 	lds	r24, 0x09A1
    828e:	85 ff       	sbrs	r24, 5
    8290:	fc cf       	rjmp	.-8      	; 0x828a <Rs232_SendString+0x1a>
	Rs232_Usart.DATA = data;	
    8292:	40 93 a0 09 	sts	0x09A0, r20
}

void Rs232_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    8296:	9f 5f       	subi	r25, 0xFF	; 255
    8298:	e9 2f       	mov	r30, r25
    829a:	f0 e0       	ldi	r31, 0x00	; 0
    829c:	ea 17       	cp	r30, r26
    829e:	fb 07       	cpc	r31, r27
    82a0:	88 f3       	brcs	.-30     	; 0x8284 <Rs232_SendString+0x14>
		Rs232_SendByte(string[i]);
	}

  if(CR){
    82a2:	66 23       	and	r22, r22
    82a4:	71 f0       	breq	.+28     	; 0x82c2 <Rs232_SendString+0x52>
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    82a6:	80 91 a1 09 	lds	r24, 0x09A1
    82aa:	85 ff       	sbrs	r24, 5
    82ac:	fc cf       	rjmp	.-8      	; 0x82a6 <Rs232_SendString+0x36>
	Rs232_Usart.DATA = data;	
    82ae:	8d e0       	ldi	r24, 0x0D	; 13
    82b0:	80 93 a0 09 	sts	0x09A0, r24
void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
}

void Rs232_SendByte(uint8_t data){
	while(!(Rs232_Usart.STATUS & USART_DREIF_bm));
    82b4:	80 91 a1 09 	lds	r24, 0x09A1
    82b8:	85 ff       	sbrs	r24, 5
    82ba:	fc cf       	rjmp	.-8      	; 0x82b4 <Rs232_SendString+0x44>
	Rs232_Usart.DATA = data;	
    82bc:	8a e0       	ldi	r24, 0x0A	; 10
    82be:	80 93 a0 09 	sts	0x09A0, r24
    82c2:	08 95       	ret

000082c4 <Debug_SendString>:

bool Debug_SendString(char string [],bool CR){
    82c4:	ef 92       	push	r14
    82c6:	ff 92       	push	r15
    82c8:	0f 93       	push	r16
    82ca:	1f 93       	push	r17
    82cc:	cf 93       	push	r28
    82ce:	df 93       	push	r29
    82d0:	8c 01       	movw	r16, r24
    82d2:	e6 2e       	mov	r14, r22
    82d4:	ff 24       	eor	r15, r15
    82d6:	08 c0       	rjmp	.+16     	; 0x82e8 <Debug_SendString+0x24>
	for(uint8_t i = 0; i < strlen(string); i++){
		if(!Debug_SendByte(string[i])){
    82d8:	c0 0f       	add	r28, r16
    82da:	d1 1f       	adc	r29, r17
    82dc:	88 81       	ld	r24, Y
    82de:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    82e2:	88 23       	and	r24, r24
    82e4:	d9 f0       	breq	.+54     	; 0x831c <Debug_SendString+0x58>
	Debug_Usart.DATA = data;
	return true;
}

bool Debug_SendString(char string [],bool CR){
	for(uint8_t i = 0; i < strlen(string); i++){
    82e6:	f3 94       	inc	r15
    82e8:	cf 2d       	mov	r28, r15
    82ea:	d0 e0       	ldi	r29, 0x00	; 0
    82ec:	f8 01       	movw	r30, r16
    82ee:	01 90       	ld	r0, Z+
    82f0:	00 20       	and	r0, r0
    82f2:	e9 f7       	brne	.-6      	; 0x82ee <Debug_SendString+0x2a>
    82f4:	31 97       	sbiw	r30, 0x01	; 1
    82f6:	e0 1b       	sub	r30, r16
    82f8:	f1 0b       	sbc	r31, r17
    82fa:	ce 17       	cp	r28, r30
    82fc:	df 07       	cpc	r29, r31
    82fe:	60 f3       	brcs	.-40     	; 0x82d8 <Debug_SendString+0x14>
		if(!Debug_SendByte(string[i])){
			return false;
		}
	}

	if(CR){
    8300:	ee 20       	and	r14, r14
    8302:	51 f0       	breq	.+20     	; 0x8318 <Debug_SendString+0x54>
		if(!Debug_SendByte(13)){
    8304:	8d e0       	ldi	r24, 0x0D	; 13
    8306:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    830a:	88 23       	and	r24, r24
    830c:	39 f0       	breq	.+14     	; 0x831c <Debug_SendString+0x58>
			return false;
		}
		if(!Debug_SendByte(10)){
    830e:	8a e0       	ldi	r24, 0x0A	; 10
    8310:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    8314:	88 23       	and	r24, r24
    8316:	19 f0       	breq	.+6      	; 0x831e <Debug_SendString+0x5a>
    8318:	81 e0       	ldi	r24, 0x01	; 1
    831a:	01 c0       	rjmp	.+2      	; 0x831e <Debug_SendString+0x5a>
    831c:	80 e0       	ldi	r24, 0x00	; 0
			return false;
		}
	}
	return true;
}
    831e:	df 91       	pop	r29
    8320:	cf 91       	pop	r28
    8322:	1f 91       	pop	r17
    8324:	0f 91       	pop	r16
    8326:	ff 90       	pop	r15
    8328:	ef 90       	pop	r14
    832a:	08 95       	ret

0000832c <Uploader_connectToComputer>:
		return false;
	}
	return true;
}

bool Uploader_connectToComputer(void){
    832c:	df 92       	push	r13
    832e:	ef 92       	push	r14
    8330:	ff 92       	push	r15
    8332:	0f 93       	push	r16
    8334:	1f 93       	push	r17
    8336:	cf 93       	push	r28
    8338:	df 93       	push	r29
	uint16_t singCounter;
	uint8_t  char1;
	uint8_t  char2;
	
	connected = false;
    833a:	10 92 3f 2d 	sts	0x2D3F, r1
	Debug_ClearBuffer();
    833e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Debug_ClearBuffer>
    8342:	e1 2c       	mov	r14, r1
    8344:	58 e4       	ldi	r21, 0x48	; 72
    8346:	f5 2e       	mov	r15, r21
					if(char2 == 'T'){
						if(!Debug_SendString("BT",false)){
							return false;
						}
						
						connected = true;
    8348:	06 e6       	ldi	r16, 0x66	; 102
    834a:	1e e0       	ldi	r17, 0x0E	; 14
    834c:	dd 24       	eor	r13, r13
    834e:	d3 94       	inc	r13
    8350:	2f c0       	rjmp	.+94     	; 0x83b0 <Uploader_connectToComputer+0x84>
	uint8_t  char2;
	
	connected = false;
	Debug_ClearBuffer();
	while(!connected){
		if(!Debug_SendString("BS",false)){
    8352:	86 e3       	ldi	r24, 0x36	; 54
    8354:	91 e2       	ldi	r25, 0x21	; 33
    8356:	60 e0       	ldi	r22, 0x00	; 0
    8358:	0e 94 62 41 	call	0x82c4	; 0x82c4 <Debug_SendString>
    835c:	88 23       	and	r24, r24
    835e:	71 f1       	breq	.+92     	; 0x83bc <Uploader_connectToComputer+0x90>
    8360:	ce ee       	ldi	r28, 0xEE	; 238
    8362:	d2 e0       	ldi	r29, 0x02	; 2
			return false;
		}
		singCounter = 750;
		while(singCounter > 0){
			if(Debug_CharReadyToRead()){
    8364:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
    8368:	88 23       	and	r24, r24
    836a:	e9 f0       	breq	.+58     	; 0x83a6 <Uploader_connectToComputer+0x7a>
				char1 = Debug_GetByte(false);
    836c:	80 e0       	ldi	r24, 0x00	; 0
    836e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Debug_GetByte>
				if(char1 == 'B'){
    8372:	82 34       	cpi	r24, 0x42	; 66
    8374:	c1 f4       	brne	.+48     	; 0x83a6 <Uploader_connectToComputer+0x7a>
    8376:	c7 01       	movw	r24, r14
    8378:	01 97       	sbiw	r24, 0x01	; 1
    837a:	f1 f7       	brne	.-4      	; 0x8378 <Uploader_connectToComputer+0x4c>
					_delay_ms(5);
					char2 = Debug_GetByte(false);
    837c:	80 e0       	ldi	r24, 0x00	; 0
    837e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Debug_GetByte>
					if(char2 == 'T'){
    8382:	84 35       	cpi	r24, 0x54	; 84
    8384:	81 f4       	brne	.+32     	; 0x83a6 <Uploader_connectToComputer+0x7a>
						if(!Debug_SendString("BT",false)){
    8386:	89 e3       	ldi	r24, 0x39	; 57
    8388:	91 e2       	ldi	r25, 0x21	; 33
    838a:	60 e0       	ldi	r22, 0x00	; 0
    838c:	0e 94 62 41 	call	0x82c4	; 0x82c4 <Debug_SendString>
    8390:	88 23       	and	r24, r24
    8392:	a1 f0       	breq	.+40     	; 0x83bc <Uploader_connectToComputer+0x90>
							return false;
						}
						
						connected = true;
    8394:	d0 92 3f 2d 	sts	0x2D3F, r13
						timeOutCounter = 0;
    8398:	10 92 30 2d 	sts	0x2D30, r1
    839c:	10 92 31 2d 	sts	0x2D31, r1
						Debug_ClearBuffer();
    83a0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Debug_ClearBuffer>
    83a4:	05 c0       	rjmp	.+10     	; 0x83b0 <Uploader_connectToComputer+0x84>
    83a6:	c8 01       	movw	r24, r16
    83a8:	01 97       	sbiw	r24, 0x01	; 1
    83aa:	f1 f7       	brne	.-4      	; 0x83a8 <Uploader_connectToComputer+0x7c>
						break;
					}
				}
			}
			_delay_ms(1);
			singCounter--;
    83ac:	21 97       	sbiw	r28, 0x01	; 1
	while(!connected){
		if(!Debug_SendString("BS",false)){
			return false;
		}
		singCounter = 750;
		while(singCounter > 0){
    83ae:	d1 f6       	brne	.-76     	; 0x8364 <Uploader_connectToComputer+0x38>
	uint8_t  char1;
	uint8_t  char2;
	
	connected = false;
	Debug_ClearBuffer();
	while(!connected){
    83b0:	80 91 3f 2d 	lds	r24, 0x2D3F
    83b4:	88 23       	and	r24, r24
    83b6:	69 f2       	breq	.-102    	; 0x8352 <Uploader_connectToComputer+0x26>
    83b8:	81 e0       	ldi	r24, 0x01	; 1
    83ba:	01 c0       	rjmp	.+2      	; 0x83be <Uploader_connectToComputer+0x92>
    83bc:	80 e0       	ldi	r24, 0x00	; 0
			_delay_ms(1);
			singCounter--;
		}
	}
	return true;
}
    83be:	df 91       	pop	r29
    83c0:	cf 91       	pop	r28
    83c2:	1f 91       	pop	r17
    83c4:	0f 91       	pop	r16
    83c6:	ff 90       	pop	r15
    83c8:	ef 90       	pop	r14
    83ca:	df 90       	pop	r13
    83cc:	08 95       	ret

000083ce <Uploader_sendPort>:
		return false;
	}
	return true;
}

bool Uploader_sendPort(void){
    83ce:	cf 93       	push	r28
    83d0:	df 93       	push	r29
	if(!Debug_SendByte('O')){
    83d2:	8f e4       	ldi	r24, 0x4F	; 79
    83d4:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    83d8:	88 23       	and	r24, r24
    83da:	09 f1       	breq	.+66     	; 0x841e <Uploader_sendPort+0x50>
		return false;
	}
	if(port[strlen(port)-1] < 32){
    83dc:	e5 e8       	ldi	r30, 0x85	; 133
    83de:	f6 e5       	ldi	r31, 0x56	; 86
    83e0:	01 90       	ld	r0, Z+
    83e2:	00 20       	and	r0, r0
    83e4:	e9 f7       	brne	.-6      	; 0x83e0 <Uploader_sendPort+0x12>
    83e6:	32 97       	sbiw	r30, 0x02	; 2
    83e8:	80 81       	ld	r24, Z
    83ea:	80 32       	cpi	r24, 0x20	; 32
    83ec:	08 f4       	brcc	.+2      	; 0x83f0 <Uploader_sendPort+0x22>
        port[strlen(port)-1] = 0;
    83ee:	10 82       	st	Z, r1
    }
	   if(!Debug_SendByte(strlen(port)+2)){
    83f0:	c5 e8       	ldi	r28, 0x85	; 133
    83f2:	d6 e5       	ldi	r29, 0x56	; 86
    83f4:	fe 01       	movw	r30, r28
    83f6:	01 90       	ld	r0, Z+
    83f8:	00 20       	and	r0, r0
    83fa:	e9 f7       	brne	.-6      	; 0x83f6 <Uploader_sendPort+0x28>
    83fc:	31 97       	sbiw	r30, 0x01	; 1
    83fe:	ec 1b       	sub	r30, r28
    8400:	fd 0b       	sbc	r31, r29
    8402:	8e 2f       	mov	r24, r30
    8404:	8e 5f       	subi	r24, 0xFE	; 254
    8406:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    840a:	88 23       	and	r24, r24
    840c:	41 f0       	breq	.+16     	; 0x841e <Uploader_sendPort+0x50>
		return false;
	}
	if(!Debug_SendString(port,true)){
    840e:	ce 01       	movw	r24, r28
    8410:	61 e0       	ldi	r22, 0x01	; 1
    8412:	0e 94 62 41 	call	0x82c4	; 0x82c4 <Debug_SendString>
    8416:	88 23       	and	r24, r24
    8418:	19 f0       	breq	.+6      	; 0x8420 <Uploader_sendPort+0x52>
    841a:	81 e0       	ldi	r24, 0x01	; 1
    841c:	01 c0       	rjmp	.+2      	; 0x8420 <Uploader_sendPort+0x52>
    841e:	80 e0       	ldi	r24, 0x00	; 0
		return false;
	}
	return true;
}
    8420:	df 91       	pop	r29
    8422:	cf 91       	pop	r28
    8424:	08 95       	ret

00008426 <Uploader_sendServer>:
            return false;
        }
    }
}

bool Uploader_sendServer(void){
    8426:	cf 93       	push	r28
    8428:	df 93       	push	r29
	if(!Debug_SendByte('V')){
    842a:	86 e5       	ldi	r24, 0x56	; 86
    842c:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    8430:	88 23       	and	r24, r24
    8432:	09 f1       	breq	.+66     	; 0x8476 <Uploader_sendServer+0x50>
		return false;
	}
	if(server[strlen(server)-1] < 32){
    8434:	e6 eb       	ldi	r30, 0xB6	; 182
    8436:	f7 e3       	ldi	r31, 0x37	; 55
    8438:	01 90       	ld	r0, Z+
    843a:	00 20       	and	r0, r0
    843c:	e9 f7       	brne	.-6      	; 0x8438 <Uploader_sendServer+0x12>
    843e:	32 97       	sbiw	r30, 0x02	; 2
    8440:	80 81       	ld	r24, Z
    8442:	80 32       	cpi	r24, 0x20	; 32
    8444:	08 f4       	brcc	.+2      	; 0x8448 <Uploader_sendServer+0x22>
        server[strlen(server)-1] = 0;
    8446:	10 82       	st	Z, r1
    }
	if(!Debug_SendByte(strlen(server)+2)){
    8448:	c6 eb       	ldi	r28, 0xB6	; 182
    844a:	d7 e3       	ldi	r29, 0x37	; 55
    844c:	fe 01       	movw	r30, r28
    844e:	01 90       	ld	r0, Z+
    8450:	00 20       	and	r0, r0
    8452:	e9 f7       	brne	.-6      	; 0x844e <Uploader_sendServer+0x28>
    8454:	31 97       	sbiw	r30, 0x01	; 1
    8456:	ec 1b       	sub	r30, r28
    8458:	fd 0b       	sbc	r31, r29
    845a:	8e 2f       	mov	r24, r30
    845c:	8e 5f       	subi	r24, 0xFE	; 254
    845e:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    8462:	88 23       	and	r24, r24
    8464:	41 f0       	breq	.+16     	; 0x8476 <Uploader_sendServer+0x50>
		return false;
	}
	if(!Debug_SendString(server,true)){
    8466:	ce 01       	movw	r24, r28
    8468:	61 e0       	ldi	r22, 0x01	; 1
    846a:	0e 94 62 41 	call	0x82c4	; 0x82c4 <Debug_SendString>
    846e:	88 23       	and	r24, r24
    8470:	19 f0       	breq	.+6      	; 0x8478 <Uploader_sendServer+0x52>
    8472:	81 e0       	ldi	r24, 0x01	; 1
    8474:	01 c0       	rjmp	.+2      	; 0x8478 <Uploader_sendServer+0x52>
    8476:	80 e0       	ldi	r24, 0x00	; 0
		return false;
	}
	return true;
}
    8478:	df 91       	pop	r29
    847a:	cf 91       	pop	r28
    847c:	08 95       	ret

0000847e <Uploader_sendNickname>:
		return false;
	}
	return true;
}

bool Uploader_sendNickname(void){
    847e:	cf 93       	push	r28
    8480:	df 93       	push	r29
	if(!Debug_SendByte('N')){
    8482:	8e e4       	ldi	r24, 0x4E	; 78
    8484:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    8488:	88 23       	and	r24, r24
    848a:	09 f1       	breq	.+66     	; 0x84ce <Uploader_sendNickname+0x50>
		return false;
	}
	if(nickname[strlen(nickname)-1] < 32){
    848c:	e7 eb       	ldi	r30, 0xB7	; 183
    848e:	f6 e5       	ldi	r31, 0x56	; 86
    8490:	01 90       	ld	r0, Z+
    8492:	00 20       	and	r0, r0
    8494:	e9 f7       	brne	.-6      	; 0x8490 <Uploader_sendNickname+0x12>
    8496:	32 97       	sbiw	r30, 0x02	; 2
    8498:	80 81       	ld	r24, Z
    849a:	80 32       	cpi	r24, 0x20	; 32
    849c:	08 f4       	brcc	.+2      	; 0x84a0 <Uploader_sendNickname+0x22>
		nickname[strlen(nickname)-1] = 0;
    849e:	10 82       	st	Z, r1
    }
	if(!Debug_SendByte(strlen(nickname)+2)){
    84a0:	c7 eb       	ldi	r28, 0xB7	; 183
    84a2:	d6 e5       	ldi	r29, 0x56	; 86
    84a4:	fe 01       	movw	r30, r28
    84a6:	01 90       	ld	r0, Z+
    84a8:	00 20       	and	r0, r0
    84aa:	e9 f7       	brne	.-6      	; 0x84a6 <Uploader_sendNickname+0x28>
    84ac:	31 97       	sbiw	r30, 0x01	; 1
    84ae:	ec 1b       	sub	r30, r28
    84b0:	fd 0b       	sbc	r31, r29
    84b2:	8e 2f       	mov	r24, r30
    84b4:	8e 5f       	subi	r24, 0xFE	; 254
    84b6:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    84ba:	88 23       	and	r24, r24
    84bc:	41 f0       	breq	.+16     	; 0x84ce <Uploader_sendNickname+0x50>
		return false;
	}
	if(!Debug_SendString(nickname,true)){
    84be:	ce 01       	movw	r24, r28
    84c0:	61 e0       	ldi	r22, 0x01	; 1
    84c2:	0e 94 62 41 	call	0x82c4	; 0x82c4 <Debug_SendString>
    84c6:	88 23       	and	r24, r24
    84c8:	19 f0       	breq	.+6      	; 0x84d0 <Uploader_sendNickname+0x52>
    84ca:	81 e0       	ldi	r24, 0x01	; 1
    84cc:	01 c0       	rjmp	.+2      	; 0x84d0 <Uploader_sendNickname+0x52>
    84ce:	80 e0       	ldi	r24, 0x00	; 0
		return false;
	}
	return true;
}
    84d0:	df 91       	pop	r29
    84d2:	cf 91       	pop	r28
    84d4:	08 95       	ret

000084d6 <Uploader_sendUser>:
		}
	}
	return true;
}

bool Uploader_sendUser(void){
    84d6:	cf 93       	push	r28
    84d8:	df 93       	push	r29
	if(!Debug_SendByte('U')){
    84da:	85 e5       	ldi	r24, 0x55	; 85
    84dc:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    84e0:	88 23       	and	r24, r24
    84e2:	09 f1       	breq	.+66     	; 0x8526 <Uploader_sendUser+0x50>
		return false;
	}
	if(user[strlen(user)-1] < 32){
    84e4:	e2 ea       	ldi	r30, 0xA2	; 162
    84e6:	f7 e3       	ldi	r31, 0x37	; 55
    84e8:	01 90       	ld	r0, Z+
    84ea:	00 20       	and	r0, r0
    84ec:	e9 f7       	brne	.-6      	; 0x84e8 <Uploader_sendUser+0x12>
    84ee:	32 97       	sbiw	r30, 0x02	; 2
    84f0:	80 81       	ld	r24, Z
    84f2:	80 32       	cpi	r24, 0x20	; 32
    84f4:	08 f4       	brcc	.+2      	; 0x84f8 <Uploader_sendUser+0x22>
        user[strlen(user)-1] = 0;
    84f6:	10 82       	st	Z, r1
    }
	if(!Debug_SendByte(strlen(user)+2)){
    84f8:	c2 ea       	ldi	r28, 0xA2	; 162
    84fa:	d7 e3       	ldi	r29, 0x37	; 55
    84fc:	fe 01       	movw	r30, r28
    84fe:	01 90       	ld	r0, Z+
    8500:	00 20       	and	r0, r0
    8502:	e9 f7       	brne	.-6      	; 0x84fe <Uploader_sendUser+0x28>
    8504:	31 97       	sbiw	r30, 0x01	; 1
    8506:	ec 1b       	sub	r30, r28
    8508:	fd 0b       	sbc	r31, r29
    850a:	8e 2f       	mov	r24, r30
    850c:	8e 5f       	subi	r24, 0xFE	; 254
    850e:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    8512:	88 23       	and	r24, r24
    8514:	41 f0       	breq	.+16     	; 0x8526 <Uploader_sendUser+0x50>
		return false;
	}
	if(!Debug_SendString(user,true)){
    8516:	ce 01       	movw	r24, r28
    8518:	61 e0       	ldi	r22, 0x01	; 1
    851a:	0e 94 62 41 	call	0x82c4	; 0x82c4 <Debug_SendString>
    851e:	88 23       	and	r24, r24
    8520:	19 f0       	breq	.+6      	; 0x8528 <Uploader_sendUser+0x52>
    8522:	81 e0       	ldi	r24, 0x01	; 1
    8524:	01 c0       	rjmp	.+2      	; 0x8528 <Uploader_sendUser+0x52>
    8526:	80 e0       	ldi	r24, 0x00	; 0
		return false;
	}
	return true;
}
    8528:	df 91       	pop	r29
    852a:	cf 91       	pop	r28
    852c:	08 95       	ret

0000852e <Uploader_sendKey>:
		}
	}
	return true;
}

bool Uploader_sendKey(void){
    852e:	cf 93       	push	r28
    8530:	df 93       	push	r29
	if(phraseRead){
    8532:	80 91 10 2d 	lds	r24, 0x2D10
    8536:	88 23       	and	r24, r24
    8538:	91 f0       	breq	.+36     	; 0x855e <Uploader_sendKey+0x30>
		if(phrase[strlen(phrase)-1] < 32){
    853a:	ec ec       	ldi	r30, 0xCC	; 204
    853c:	ff e4       	ldi	r31, 0x4F	; 79
    853e:	01 90       	ld	r0, Z+
    8540:	00 20       	and	r0, r0
    8542:	e9 f7       	brne	.-6      	; 0x853e <Uploader_sendKey+0x10>
    8544:	32 97       	sbiw	r30, 0x02	; 2
    8546:	80 81       	ld	r24, Z
    8548:	80 32       	cpi	r24, 0x20	; 32
    854a:	08 f4       	brcc	.+2      	; 0x854e <Uploader_sendKey+0x20>
			phrase[strlen(phrase)-1] = 0;
    854c:	10 82       	st	Z, r1
		}
		if(!Debug_SendByte('K')){
    854e:	8b e4       	ldi	r24, 0x4B	; 75
    8550:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    8554:	88 23       	and	r24, r24
    8556:	d1 f1       	breq	.+116    	; 0x85cc <Uploader_sendKey+0x9e>
			return false;
		}		
		if(!Debug_SendByte(strlen(phrase)+2)){
    8558:	cc ec       	ldi	r28, 0xCC	; 204
    855a:	df e4       	ldi	r29, 0x4F	; 79
    855c:	15 c0       	rjmp	.+42     	; 0x8588 <Uploader_sendKey+0x5a>
			return false;
		}		
		if(!Debug_SendString(phrase,true)){
			return false;
		}
	} else if(keyRead){
    855e:	80 91 11 2d 	lds	r24, 0x2D11
    8562:	88 23       	and	r24, r24
    8564:	01 f1       	breq	.+64     	; 0x85a6 <Uploader_sendKey+0x78>
		if(key[strlen(key)-1] < 32){
    8566:	eb e6       	ldi	r30, 0x6B	; 107
    8568:	f0 e5       	ldi	r31, 0x50	; 80
    856a:	01 90       	ld	r0, Z+
    856c:	00 20       	and	r0, r0
    856e:	e9 f7       	brne	.-6      	; 0x856a <Uploader_sendKey+0x3c>
    8570:	32 97       	sbiw	r30, 0x02	; 2
    8572:	80 81       	ld	r24, Z
    8574:	80 32       	cpi	r24, 0x20	; 32
    8576:	08 f4       	brcc	.+2      	; 0x857a <Uploader_sendKey+0x4c>
			key[strlen(key)-1] = 0;
    8578:	10 82       	st	Z, r1
		}
		if(!Debug_SendByte('K')){
    857a:	8b e4       	ldi	r24, 0x4B	; 75
    857c:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    8580:	88 23       	and	r24, r24
    8582:	21 f1       	breq	.+72     	; 0x85cc <Uploader_sendKey+0x9e>
			return false;
		}		
		if(!Debug_SendByte(strlen(key)+2)){
    8584:	cb e6       	ldi	r28, 0x6B	; 107
    8586:	d0 e5       	ldi	r29, 0x50	; 80
    8588:	fe 01       	movw	r30, r28
    858a:	01 90       	ld	r0, Z+
    858c:	00 20       	and	r0, r0
    858e:	e9 f7       	brne	.-6      	; 0x858a <Uploader_sendKey+0x5c>
    8590:	31 97       	sbiw	r30, 0x01	; 1
    8592:	ec 1b       	sub	r30, r28
    8594:	fd 0b       	sbc	r31, r29
    8596:	8e 2f       	mov	r24, r30
    8598:	8e 5f       	subi	r24, 0xFE	; 254
    859a:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    859e:	88 23       	and	r24, r24
    85a0:	a9 f0       	breq	.+42     	; 0x85cc <Uploader_sendKey+0x9e>
			return false;
		}		
		if(!Debug_SendString(key,true)){
    85a2:	ce 01       	movw	r24, r28
    85a4:	0c c0       	rjmp	.+24     	; 0x85be <Uploader_sendKey+0x90>
			return false;
		}
	} else {
		if(!Debug_SendByte('K')){
    85a6:	8b e4       	ldi	r24, 0x4B	; 75
    85a8:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    85ac:	88 23       	and	r24, r24
    85ae:	71 f0       	breq	.+28     	; 0x85cc <Uploader_sendKey+0x9e>
			return false;
		}		
		if(!Debug_SendByte(0)){
    85b0:	80 e0       	ldi	r24, 0x00	; 0
    85b2:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    85b6:	88 23       	and	r24, r24
    85b8:	49 f0       	breq	.+18     	; 0x85cc <Uploader_sendKey+0x9e>
			return false;
		}		
		if(!Debug_SendString("",true)){
    85ba:	8c e3       	ldi	r24, 0x3C	; 60
    85bc:	91 e2       	ldi	r25, 0x21	; 33
    85be:	61 e0       	ldi	r22, 0x01	; 1
    85c0:	0e 94 62 41 	call	0x82c4	; 0x82c4 <Debug_SendString>
    85c4:	88 23       	and	r24, r24
    85c6:	19 f0       	breq	.+6      	; 0x85ce <Uploader_sendKey+0xa0>
    85c8:	81 e0       	ldi	r24, 0x01	; 1
    85ca:	01 c0       	rjmp	.+2      	; 0x85ce <Uploader_sendKey+0xa0>
    85cc:	80 e0       	ldi	r24, 0x00	; 0
			return false;
		}
	}
	return true;
}
    85ce:	df 91       	pop	r29
    85d0:	cf 91       	pop	r28
    85d2:	08 95       	ret

000085d4 <Uploader_sendAuthType>:
		}
	}
	return true;
}

bool Uploader_sendAuthType(void){
    85d4:	cf 93       	push	r28
    85d6:	df 93       	push	r29
	if(authRead){
    85d8:	80 91 0f 2d 	lds	r24, 0x2D0F
    85dc:	88 23       	and	r24, r24
    85de:	01 f1       	breq	.+64     	; 0x8620 <Uploader_sendAuthType+0x4c>
		if(auth[strlen(auth)-1] < 32){
    85e0:	ec e6       	ldi	r30, 0x6C	; 108
    85e2:	f6 e3       	ldi	r31, 0x36	; 54
    85e4:	01 90       	ld	r0, Z+
    85e6:	00 20       	and	r0, r0
    85e8:	e9 f7       	brne	.-6      	; 0x85e4 <Uploader_sendAuthType+0x10>
    85ea:	32 97       	sbiw	r30, 0x02	; 2
    85ec:	80 81       	ld	r24, Z
    85ee:	80 32       	cpi	r24, 0x20	; 32
    85f0:	08 f4       	brcc	.+2      	; 0x85f4 <Uploader_sendAuthType+0x20>
			auth[strlen(auth)-1] = 0;
    85f2:	10 82       	st	Z, r1
		}
		if(!Debug_SendByte('A')){
    85f4:	81 e4       	ldi	r24, 0x41	; 65
    85f6:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    85fa:	88 23       	and	r24, r24
    85fc:	21 f1       	breq	.+72     	; 0x8646 <Uploader_sendAuthType+0x72>
			return false;
		}		
		if(!Debug_SendByte(strlen(auth)+2)){
    85fe:	cc e6       	ldi	r28, 0x6C	; 108
    8600:	d6 e3       	ldi	r29, 0x36	; 54
    8602:	fe 01       	movw	r30, r28
    8604:	01 90       	ld	r0, Z+
    8606:	00 20       	and	r0, r0
    8608:	e9 f7       	brne	.-6      	; 0x8604 <Uploader_sendAuthType+0x30>
    860a:	31 97       	sbiw	r30, 0x01	; 1
    860c:	ec 1b       	sub	r30, r28
    860e:	fd 0b       	sbc	r31, r29
    8610:	8e 2f       	mov	r24, r30
    8612:	8e 5f       	subi	r24, 0xFE	; 254
    8614:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    8618:	88 23       	and	r24, r24
    861a:	a9 f0       	breq	.+42     	; 0x8646 <Uploader_sendAuthType+0x72>
			return false;
		}		
		if(!Debug_SendString(auth,true)){
    861c:	ce 01       	movw	r24, r28
    861e:	0c c0       	rjmp	.+24     	; 0x8638 <Uploader_sendAuthType+0x64>
			return false;
		}
	} else {
		if(!Debug_SendByte('A')){
    8620:	81 e4       	ldi	r24, 0x41	; 65
    8622:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    8626:	88 23       	and	r24, r24
    8628:	71 f0       	breq	.+28     	; 0x8646 <Uploader_sendAuthType+0x72>
			return false;
		}		
		if(!Debug_SendByte(0)){
    862a:	80 e0       	ldi	r24, 0x00	; 0
    862c:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    8630:	88 23       	and	r24, r24
    8632:	49 f0       	breq	.+18     	; 0x8646 <Uploader_sendAuthType+0x72>
			return false;
		}		
		if(!Debug_SendString("",true)){
    8634:	8c e3       	ldi	r24, 0x3C	; 60
    8636:	91 e2       	ldi	r25, 0x21	; 33
    8638:	61 e0       	ldi	r22, 0x01	; 1
    863a:	0e 94 62 41 	call	0x82c4	; 0x82c4 <Debug_SendString>
    863e:	88 23       	and	r24, r24
    8640:	19 f0       	breq	.+6      	; 0x8648 <Uploader_sendAuthType+0x74>
    8642:	81 e0       	ldi	r24, 0x01	; 1
    8644:	01 c0       	rjmp	.+2      	; 0x8648 <Uploader_sendAuthType+0x74>
    8646:	80 e0       	ldi	r24, 0x00	; 0
			return false;
		}
	}
	return true;
}
    8648:	df 91       	pop	r29
    864a:	cf 91       	pop	r28
    864c:	08 95       	ret

0000864e <Uploader_sendSSID>:
    }
	return true;
}


bool Uploader_sendSSID(void){
    864e:	cf 93       	push	r28
    8650:	df 93       	push	r29
	if(ssidRead){
    8652:	80 91 12 2d 	lds	r24, 0x2D12
    8656:	88 23       	and	r24, r24
    8658:	01 f1       	breq	.+64     	; 0x869a <Uploader_sendSSID+0x4c>
		if(ssid[strlen(ssid)-1] < 32){
    865a:	e4 ec       	ldi	r30, 0xC4	; 196
    865c:	f1 e3       	ldi	r31, 0x31	; 49
    865e:	01 90       	ld	r0, Z+
    8660:	00 20       	and	r0, r0
    8662:	e9 f7       	brne	.-6      	; 0x865e <Uploader_sendSSID+0x10>
    8664:	32 97       	sbiw	r30, 0x02	; 2
    8666:	80 81       	ld	r24, Z
    8668:	80 32       	cpi	r24, 0x20	; 32
    866a:	08 f4       	brcc	.+2      	; 0x866e <Uploader_sendSSID+0x20>
			ssid[strlen(ssid)-1] = 0;
    866c:	10 82       	st	Z, r1
		}
		if(!Debug_SendByte('S')){
    866e:	83 e5       	ldi	r24, 0x53	; 83
    8670:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    8674:	88 23       	and	r24, r24
    8676:	21 f1       	breq	.+72     	; 0x86c0 <Uploader_sendSSID+0x72>
			return false;
		}
		if(!Debug_SendByte(strlen(ssid)+2)){
    8678:	c4 ec       	ldi	r28, 0xC4	; 196
    867a:	d1 e3       	ldi	r29, 0x31	; 49
    867c:	fe 01       	movw	r30, r28
    867e:	01 90       	ld	r0, Z+
    8680:	00 20       	and	r0, r0
    8682:	e9 f7       	brne	.-6      	; 0x867e <Uploader_sendSSID+0x30>
    8684:	31 97       	sbiw	r30, 0x01	; 1
    8686:	ec 1b       	sub	r30, r28
    8688:	fd 0b       	sbc	r31, r29
    868a:	8e 2f       	mov	r24, r30
    868c:	8e 5f       	subi	r24, 0xFE	; 254
    868e:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    8692:	88 23       	and	r24, r24
    8694:	a9 f0       	breq	.+42     	; 0x86c0 <Uploader_sendSSID+0x72>
			return false;
		}
		if(!Debug_SendString(ssid,true)){
    8696:	ce 01       	movw	r24, r28
    8698:	0c c0       	rjmp	.+24     	; 0x86b2 <Uploader_sendSSID+0x64>
			return false;
		}
	} else {
		if(!Debug_SendByte('S')){
    869a:	83 e5       	ldi	r24, 0x53	; 83
    869c:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    86a0:	88 23       	and	r24, r24
    86a2:	71 f0       	breq	.+28     	; 0x86c0 <Uploader_sendSSID+0x72>
			return false;
		}
		if(!Debug_SendByte(0)){
    86a4:	80 e0       	ldi	r24, 0x00	; 0
    86a6:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    86aa:	88 23       	and	r24, r24
    86ac:	49 f0       	breq	.+18     	; 0x86c0 <Uploader_sendSSID+0x72>
			return false;
		}
		if(!Debug_SendString("",true)){
    86ae:	8c e3       	ldi	r24, 0x3C	; 60
    86b0:	91 e2       	ldi	r25, 0x21	; 33
    86b2:	61 e0       	ldi	r22, 0x01	; 1
    86b4:	0e 94 62 41 	call	0x82c4	; 0x82c4 <Debug_SendString>
    86b8:	88 23       	and	r24, r24
    86ba:	19 f0       	breq	.+6      	; 0x86c2 <Uploader_sendSSID+0x74>
    86bc:	81 e0       	ldi	r24, 0x01	; 1
    86be:	01 c0       	rjmp	.+2      	; 0x86c2 <Uploader_sendSSID+0x74>
    86c0:	80 e0       	ldi	r24, 0x00	; 0
			return false;
		}
	}
	return true;
}
    86c2:	df 91       	pop	r29
    86c4:	cf 91       	pop	r28
    86c6:	08 95       	ret

000086c8 <__vector_108>:

	// Enable CCA interrupt
	Display_Writer_Timer.INTCTRLA = (Display_Writer_Timer.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_LO_gc;
}

ISR(Display_Writer_Timer_vect){
    86c8:	1f 92       	push	r1
    86ca:	0f 92       	push	r0
    86cc:	0f b6       	in	r0, 0x3f	; 63
    86ce:	0f 92       	push	r0
    86d0:	0b b6       	in	r0, 0x3b	; 59
    86d2:	0f 92       	push	r0
    86d4:	11 24       	eor	r1, r1
    86d6:	cf 92       	push	r12
    86d8:	df 92       	push	r13
    86da:	ef 92       	push	r14
    86dc:	ff 92       	push	r15
    86de:	0f 93       	push	r16
    86e0:	1f 93       	push	r17
    86e2:	2f 93       	push	r18
    86e4:	3f 93       	push	r19
    86e6:	4f 93       	push	r20
    86e8:	5f 93       	push	r21
    86ea:	6f 93       	push	r22
    86ec:	7f 93       	push	r23
    86ee:	8f 93       	push	r24
    86f0:	9f 93       	push	r25
    86f2:	af 93       	push	r26
    86f4:	bf 93       	push	r27
    86f6:	cf 93       	push	r28
    86f8:	df 93       	push	r29
    86fa:	ef 93       	push	r30
    86fc:	ff 93       	push	r31
	
	if(backlight_Timer > 20){
    86fe:	80 91 5a 2d 	lds	r24, 0x2D5A
    8702:	85 31       	cpi	r24, 0x15	; 21
    8704:	30 f0       	brcs	.+12     	; 0x8712 <__vector_108+0x4a>
void display_setBacklight(bool state){
	if(state){
		Backlight_Port.OUTSET = 1 << Backlight_Pin;
		backLightIsOn = true;
	} else {
		Backlight_Port.OUTCLR = 1 << Backlight_Pin;
    8706:	81 e0       	ldi	r24, 0x01	; 1
    8708:	e0 ea       	ldi	r30, 0xA0	; 160
    870a:	f6 e0       	ldi	r31, 0x06	; 6
    870c:	86 83       	std	Z+6, r24	; 0x06
		backLightIsOn = false;
    870e:	10 92 19 2d 	sts	0x2D19, r1
		display_setBacklight(false);
	}
	backlight_Timer++;
    8712:	80 91 5a 2d 	lds	r24, 0x2D5A
    8716:	8f 5f       	subi	r24, 0xFF	; 255
    8718:	80 93 5a 2d 	sts	0x2D5A, r24
	

	if(backLightIsOn && okToDisplayGUI && Button_Pressed(Button_Pin)){
    871c:	80 91 19 2d 	lds	r24, 0x2D19
    8720:	88 23       	and	r24, r24
    8722:	41 f0       	breq	.+16     	; 0x8734 <__vector_108+0x6c>
    8724:	80 91 52 2d 	lds	r24, 0x2D52
    8728:	88 23       	and	r24, r24
    872a:	21 f0       	breq	.+8      	; 0x8734 <__vector_108+0x6c>
    872c:	80 91 a8 06 	lds	r24, 0x06A8
    8730:	81 ff       	sbrs	r24, 1
    8732:	3e c3       	rjmp	.+1660   	; 0x8db0 <__vector_108+0x6e8>
		backlight_Timer = 0;
	}
	
	if(recording){
    8734:	80 91 e1 2c 	lds	r24, 0x2CE1
    8738:	88 23       	and	r24, r24
    873a:	89 f1       	breq	.+98     	; 0x879e <__vector_108+0xd6>
		lengthOfCurrentFile++;
    873c:	80 91 57 2d 	lds	r24, 0x2D57
    8740:	90 91 58 2d 	lds	r25, 0x2D58
    8744:	01 96       	adiw	r24, 0x01	; 1
    8746:	80 93 57 2d 	sts	0x2D57, r24
    874a:	90 93 58 2d 	sts	0x2D58, r25
		if(lengthOfCurrentFile > maxFileLength){
    874e:	80 91 57 2d 	lds	r24, 0x2D57
    8752:	90 91 58 2d 	lds	r25, 0x2D58
    8756:	89 52       	subi	r24, 0x29	; 41
    8758:	93 42       	sbci	r25, 0x23	; 35
    875a:	08 f1       	brcs	.+66     	; 0x879e <__vector_108+0xd6>
			restartingFile = true;
    875c:	81 e0       	ldi	r24, 0x01	; 1
    875e:	80 93 54 2d 	sts	0x2D54, r24
			recording = false;
    8762:	10 92 e1 2c 	sts	0x2CE1, r1
			okToCloseLogFile = true;
    8766:	80 93 51 2d 	sts	0x2D51, r24
			while(okToCloseLogFile);
    876a:	80 91 51 2d 	lds	r24, 0x2D51
    876e:	88 23       	and	r24, r24
    8770:	e1 f7       	brne	.-8      	; 0x876a <__vector_108+0xa2>
			if(percentDiskUsed < 950){
    8772:	80 91 15 2d 	lds	r24, 0x2D15
    8776:	90 91 16 2d 	lds	r25, 0x2D16
    877a:	a0 91 17 2d 	lds	r26, 0x2D17
    877e:	b0 91 18 2d 	lds	r27, 0x2D18
    8782:	86 5b       	subi	r24, 0xB6	; 182
    8784:	93 40       	sbci	r25, 0x03	; 3
    8786:	a0 40       	sbci	r26, 0x00	; 0
    8788:	b0 40       	sbci	r27, 0x00	; 0
    878a:	38 f4       	brcc	.+14     	; 0x879a <__vector_108+0xd2>
				okToOpenLogFile = true;
    878c:	81 e0       	ldi	r24, 0x01	; 1
    878e:	80 93 4f 2d 	sts	0x2D4F, r24
				while(!recording);
    8792:	80 91 e1 2c 	lds	r24, 0x2CE1
    8796:	88 23       	and	r24, r24
    8798:	e1 f3       	breq	.-8      	; 0x8792 <__vector_108+0xca>
			}
			restartingFile = false;
    879a:	10 92 54 2d 	sts	0x2D54, r1
		}
	}
	
	if(timeIsValid && !okToSendRTCBlock){
    879e:	80 91 4c 2d 	lds	r24, 0x2D4C
    87a2:	88 23       	and	r24, r24
    87a4:	91 f1       	breq	.+100    	; 0x880a <__vector_108+0x142>
    87a6:	80 91 f5 2c 	lds	r24, 0x2CF5
    87aa:	88 23       	and	r24, r24
    87ac:	71 f5       	brne	.+92     	; 0x880a <__vector_108+0x142>
		syncCounter++;
    87ae:	80 91 5b 2d 	lds	r24, 0x2D5B
    87b2:	90 91 5c 2d 	lds	r25, 0x2D5C
    87b6:	01 96       	adiw	r24, 0x01	; 1
    87b8:	80 93 5b 2d 	sts	0x2D5B, r24
    87bc:	90 93 5c 2d 	sts	0x2D5C, r25
	   if(syncCounter > 6000){
    87c0:	80 91 5b 2d 	lds	r24, 0x2D5B
    87c4:	90 91 5c 2d 	lds	r25, 0x2D5C
    87c8:	81 57       	subi	r24, 0x71	; 113
    87ca:	97 41       	sbci	r25, 0x17	; 23
    87cc:	f0 f0       	brcs	.+60     	; 0x880a <__vector_108+0x142>
		   syncCounter = 0;
    87ce:	10 92 5b 2d 	sts	0x2D5B, r1
    87d2:	10 92 5c 2d 	sts	0x2D5C, r1
	return true;
}

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
    87d6:	80 91 21 04 	lds	r24, 0x0421
    87da:	80 61       	ori	r24, 0x10	; 16
    87dc:	e0 e2       	ldi	r30, 0x20	; 32
    87de:	f4 e0       	ldi	r31, 0x04	; 4
    87e0:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
    87e2:	80 91 21 04 	lds	r24, 0x0421
    87e6:	84 fd       	sbrc	r24, 4
    87e8:	fc cf       	rjmp	.-8      	; 0x87e2 <__vector_108+0x11a>
	return RTC32.CNT;
    87ea:	80 91 24 04 	lds	r24, 0x0424
    87ee:	90 91 25 04 	lds	r25, 0x0425
    87f2:	a0 91 26 04 	lds	r26, 0x0426
    87f6:	b0 91 27 04 	lds	r27, 0x0427
		   UNIX_Time = Time_Get();
    87fa:	80 93 0a 2d 	sts	0x2D0A, r24
    87fe:	90 93 0b 2d 	sts	0x2D0B, r25
    8802:	a0 93 0c 2d 	sts	0x2D0C, r26
    8806:	b0 93 0d 2d 	sts	0x2D0D, r27
	   }
	}
	
	spaceRemainingCounter++;														// every 25 seconds, refresh space remaining on disk
    880a:	80 91 59 2d 	lds	r24, 0x2D59
    880e:	8f 5f       	subi	r24, 0xFF	; 255
    8810:	80 93 59 2d 	sts	0x2D59, r24
	if(spaceRemainingCounter == 0){
    8814:	80 91 59 2d 	lds	r24, 0x2D59
    8818:	88 23       	and	r24, r24
    881a:	39 f4       	brne	.+14     	; 0x882a <__vector_108+0x162>
		okToGetRemainingSpace = true;
    881c:	81 e0       	ldi	r24, 0x01	; 1
    881e:	80 93 5a 38 	sts	0x385A, r24
		while(okToGetRemainingSpace);
    8822:	80 91 5a 38 	lds	r24, 0x385A
    8826:	88 23       	and	r24, r24
    8828:	e1 f7       	brne	.-8      	; 0x8822 <__vector_108+0x15a>
	}
	
	if(okToDisplayGUI){
    882a:	80 91 52 2d 	lds	r24, 0x2D52
    882e:	88 23       	and	r24, r24
    8830:	09 f4       	brne	.+2      	; 0x8834 <__vector_108+0x16c>
    8832:	c7 c2       	rjmp	.+1422   	; 0x8dc2 <__vector_108+0x6fa>
    8834:	80 91 a8 06 	lds	r24, 0x06A8
    8838:	82 fd       	sbrc	r24, 2
    883a:	1d c0       	rjmp	.+58     	; 0x8876 <__vector_108+0x1ae>
    883c:	bc c2       	rjmp	.+1400   	; 0x8db6 <__vector_108+0x6ee>
		
		if(Button_Pressed(Switch_Pin) && !okToOpenLogFile && !recording && timeIsValid && SD_Inserted()){		// start recording
    883e:	80 91 e1 2c 	lds	r24, 0x2CE1
    8842:	88 23       	and	r24, r24
    8844:	c1 f4       	brne	.+48     	; 0x8876 <__vector_108+0x1ae>
    8846:	80 91 4c 2d 	lds	r24, 0x2D4C
    884a:	88 23       	and	r24, r24
    884c:	a1 f0       	breq	.+40     	; 0x8876 <__vector_108+0x1ae>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	return sdValid;
    884e:	80 91 14 2d 	lds	r24, 0x2D14
    8852:	88 23       	and	r24, r24
    8854:	81 f0       	breq	.+32     	; 0x8876 <__vector_108+0x1ae>
			if(percentDiskUsed < 950){
    8856:	80 91 15 2d 	lds	r24, 0x2D15
    885a:	90 91 16 2d 	lds	r25, 0x2D16
    885e:	a0 91 17 2d 	lds	r26, 0x2D17
    8862:	b0 91 18 2d 	lds	r27, 0x2D18
    8866:	86 5b       	subi	r24, 0xB6	; 182
    8868:	93 40       	sbci	r25, 0x03	; 3
    886a:	a0 40       	sbci	r26, 0x00	; 0
    886c:	b0 40       	sbci	r27, 0x00	; 0
    886e:	18 f4       	brcc	.+6      	; 0x8876 <__vector_108+0x1ae>
				okToOpenLogFile = true;
    8870:	81 e0       	ldi	r24, 0x01	; 1
    8872:	80 93 4f 2d 	sts	0x2D4F, r24
			}
		}
		
		
		if(currentMode == recordMode){
    8876:	80 91 4e 2d 	lds	r24, 0x2D4E
    887a:	88 23       	and	r24, r24
    887c:	09 f0       	breq	.+2      	; 0x8880 <__vector_108+0x1b8>
    887e:	90 c1       	rjmp	.+800    	; 0x8ba0 <__vector_108+0x4d8>
			

			
			if(recording && !sdValid){														// write failed, so stop recording
    8880:	80 91 e1 2c 	lds	r24, 0x2CE1
    8884:	88 23       	and	r24, r24
    8886:	31 f0       	breq	.+12     	; 0x8894 <__vector_108+0x1cc>
    8888:	80 91 14 2d 	lds	r24, 0x2D14
    888c:	88 23       	and	r24, r24
    888e:	11 f4       	brne	.+4      	; 0x8894 <__vector_108+0x1cc>
				recording = false;
    8890:	10 92 e1 2c 	sts	0x2CE1, r1
			}
			
			if(recording){
    8894:	80 91 e1 2c 	lds	r24, 0x2CE1
    8898:	88 23       	and	r24, r24
    889a:	09 f4       	brne	.+2      	; 0x889e <__vector_108+0x1d6>
    889c:	43 c0       	rjmp	.+134    	; 0x8924 <__vector_108+0x25c>
				sprintf(tempDisplay, "Recording   %4lum", (UNIX_Time - timeRecordingStarted)/60);		// load recording screen
    889e:	2d b7       	in	r18, 0x3d	; 61
    88a0:	3e b7       	in	r19, 0x3e	; 62
    88a2:	28 50       	subi	r18, 0x08	; 8
    88a4:	30 40       	sbci	r19, 0x00	; 0
    88a6:	2d bf       	out	0x3d, r18	; 61
    88a8:	3e bf       	out	0x3e, r19	; 62
    88aa:	0d b7       	in	r16, 0x3d	; 61
    88ac:	1e b7       	in	r17, 0x3e	; 62
    88ae:	0f 5f       	subi	r16, 0xFF	; 255
    88b0:	1f 4f       	sbci	r17, 0xFF	; 255
    88b2:	74 e4       	ldi	r23, 0x44	; 68
    88b4:	e7 2e       	mov	r14, r23
    88b6:	76 e5       	ldi	r23, 0x56	; 86
    88b8:	f7 2e       	mov	r15, r23
    88ba:	ad b7       	in	r26, 0x3d	; 61
    88bc:	be b7       	in	r27, 0x3e	; 62
    88be:	11 96       	adiw	r26, 0x01	; 1
    88c0:	ed 92       	st	X+, r14
    88c2:	fc 92       	st	X, r15
    88c4:	12 97       	sbiw	r26, 0x02	; 2
    88c6:	8d e3       	ldi	r24, 0x3D	; 61
    88c8:	91 e2       	ldi	r25, 0x21	; 33
    88ca:	f8 01       	movw	r30, r16
    88cc:	82 83       	std	Z+2, r24	; 0x02
    88ce:	93 83       	std	Z+3, r25	; 0x03
    88d0:	60 91 0a 2d 	lds	r22, 0x2D0A
    88d4:	70 91 0b 2d 	lds	r23, 0x2D0B
    88d8:	80 91 0c 2d 	lds	r24, 0x2D0C
    88dc:	90 91 0d 2d 	lds	r25, 0x2D0D
    88e0:	20 91 f7 2c 	lds	r18, 0x2CF7
    88e4:	30 91 f8 2c 	lds	r19, 0x2CF8
    88e8:	40 91 f9 2c 	lds	r20, 0x2CF9
    88ec:	50 91 fa 2c 	lds	r21, 0x2CFA
    88f0:	62 1b       	sub	r22, r18
    88f2:	73 0b       	sbc	r23, r19
    88f4:	84 0b       	sbc	r24, r20
    88f6:	95 0b       	sbc	r25, r21
    88f8:	2c e3       	ldi	r18, 0x3C	; 60
    88fa:	30 e0       	ldi	r19, 0x00	; 0
    88fc:	40 e0       	ldi	r20, 0x00	; 0
    88fe:	50 e0       	ldi	r21, 0x00	; 0
    8900:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    8904:	d8 01       	movw	r26, r16
    8906:	14 96       	adiw	r26, 0x04	; 4
    8908:	2d 93       	st	X+, r18
    890a:	3d 93       	st	X+, r19
    890c:	4d 93       	st	X+, r20
    890e:	5c 93       	st	X, r21
    8910:	17 97       	sbiw	r26, 0x07	; 7
    8912:	0e 94 02 52 	call	0xa404	; 0xa404 <sprintf>
				display_putString(tempDisplay,0,0,System5x7);
    8916:	ed b7       	in	r30, 0x3d	; 61
    8918:	fe b7       	in	r31, 0x3e	; 62
    891a:	38 96       	adiw	r30, 0x08	; 8
    891c:	ed bf       	out	0x3d, r30	; 61
    891e:	fe bf       	out	0x3e, r31	; 62
    8920:	c7 01       	movw	r24, r14
    8922:	02 c0       	rjmp	.+4      	; 0x8928 <__vector_108+0x260>
			} else {
				display_putString("Paused           ",0,0,System5x7);
    8924:	8f e4       	ldi	r24, 0x4F	; 79
    8926:	91 e2       	ldi	r25, 0x21	; 33
    8928:	60 e0       	ldi	r22, 0x00	; 0
    892a:	40 e0       	ldi	r20, 0x00	; 0
    892c:	2b ea       	ldi	r18, 0xAB	; 171
    892e:	3a e2       	ldi	r19, 0x2A	; 42
    8930:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>
			}


			sprintf(tempDisplay, "Uploading    %3u", uploadPercentBS);
    8934:	20 91 36 2d 	lds	r18, 0x2D36
    8938:	00 d0       	rcall	.+0      	; 0x893a <__vector_108+0x272>
    893a:	00 d0       	rcall	.+0      	; 0x893c <__vector_108+0x274>
    893c:	ed b7       	in	r30, 0x3d	; 61
    893e:	fe b7       	in	r31, 0x3e	; 62
    8940:	31 96       	adiw	r30, 0x01	; 1
    8942:	c4 e4       	ldi	r28, 0x44	; 68
    8944:	d6 e5       	ldi	r29, 0x56	; 86
    8946:	ad b7       	in	r26, 0x3d	; 61
    8948:	be b7       	in	r27, 0x3e	; 62
    894a:	11 96       	adiw	r26, 0x01	; 1
    894c:	cd 93       	st	X+, r28
    894e:	dc 93       	st	X, r29
    8950:	12 97       	sbiw	r26, 0x02	; 2
    8952:	81 e6       	ldi	r24, 0x61	; 97
    8954:	91 e2       	ldi	r25, 0x21	; 33
    8956:	82 83       	std	Z+2, r24	; 0x02
    8958:	93 83       	std	Z+3, r25	; 0x03
    895a:	24 83       	std	Z+4, r18	; 0x04
    895c:	15 82       	std	Z+5, r1	; 0x05
    895e:	0e 94 02 52 	call	0xa404	; 0xa404 <sprintf>
			strcat(tempDisplay,"%");
    8962:	ed b7       	in	r30, 0x3d	; 61
    8964:	fe b7       	in	r31, 0x3e	; 62
    8966:	36 96       	adiw	r30, 0x06	; 6
    8968:	ed bf       	out	0x3d, r30	; 61
    896a:	fe bf       	out	0x3e, r31	; 62
    896c:	ce 01       	movw	r24, r28
    896e:	62 e7       	ldi	r22, 0x72	; 114
    8970:	71 e2       	ldi	r23, 0x21	; 33
    8972:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
			display_putString(tempDisplay,1,0,System5x7);
    8976:	ce 01       	movw	r24, r28
    8978:	61 e0       	ldi	r22, 0x01	; 1
    897a:	40 e0       	ldi	r20, 0x00	; 0
    897c:	2b ea       	ldi	r18, 0xAB	; 171
    897e:	3a e2       	ldi	r19, 0x2A	; 42
    8980:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>
    8984:	80 91 14 2d 	lds	r24, 0x2D14
			if(SD_Inserted()){
    8988:	88 23       	and	r24, r24
    898a:	09 f4       	brne	.+2      	; 0x898e <__vector_108+0x2c6>
    898c:	48 c0       	rjmp	.+144    	; 0x8a1e <__vector_108+0x356>
				sprintf(tempDisplay,"Disk Used: %3lu.%lu",percentDiskUsed/10,percentDiskUsed%10);
    898e:	c0 90 15 2d 	lds	r12, 0x2D15
    8992:	d0 90 16 2d 	lds	r13, 0x2D16
    8996:	e0 90 17 2d 	lds	r14, 0x2D17
    899a:	f0 90 18 2d 	lds	r15, 0x2D18
    899e:	2d b7       	in	r18, 0x3d	; 61
    89a0:	3e b7       	in	r19, 0x3e	; 62
    89a2:	2c 50       	subi	r18, 0x0C	; 12
    89a4:	30 40       	sbci	r19, 0x00	; 0
    89a6:	2d bf       	out	0x3d, r18	; 61
    89a8:	3e bf       	out	0x3e, r19	; 62
    89aa:	0d b7       	in	r16, 0x3d	; 61
    89ac:	1e b7       	in	r17, 0x3e	; 62
    89ae:	0f 5f       	subi	r16, 0xFF	; 255
    89b0:	1f 4f       	sbci	r17, 0xFF	; 255
    89b2:	ad b7       	in	r26, 0x3d	; 61
    89b4:	be b7       	in	r27, 0x3e	; 62
    89b6:	11 96       	adiw	r26, 0x01	; 1
    89b8:	cd 93       	st	X+, r28
    89ba:	dc 93       	st	X, r29
    89bc:	12 97       	sbiw	r26, 0x02	; 2
    89be:	84 e7       	ldi	r24, 0x74	; 116
    89c0:	91 e2       	ldi	r25, 0x21	; 33
    89c2:	f8 01       	movw	r30, r16
    89c4:	82 83       	std	Z+2, r24	; 0x02
    89c6:	93 83       	std	Z+3, r25	; 0x03
    89c8:	c7 01       	movw	r24, r14
    89ca:	b6 01       	movw	r22, r12
    89cc:	2a e0       	ldi	r18, 0x0A	; 10
    89ce:	30 e0       	ldi	r19, 0x00	; 0
    89d0:	40 e0       	ldi	r20, 0x00	; 0
    89d2:	50 e0       	ldi	r21, 0x00	; 0
    89d4:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    89d8:	d8 01       	movw	r26, r16
    89da:	14 96       	adiw	r26, 0x04	; 4
    89dc:	2d 93       	st	X+, r18
    89de:	3d 93       	st	X+, r19
    89e0:	4d 93       	st	X+, r20
    89e2:	5c 93       	st	X, r21
    89e4:	17 97       	sbiw	r26, 0x07	; 7
    89e6:	c7 01       	movw	r24, r14
    89e8:	b6 01       	movw	r22, r12
    89ea:	2a e0       	ldi	r18, 0x0A	; 10
    89ec:	30 e0       	ldi	r19, 0x00	; 0
    89ee:	40 e0       	ldi	r20, 0x00	; 0
    89f0:	50 e0       	ldi	r21, 0x00	; 0
    89f2:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    89f6:	f8 01       	movw	r30, r16
    89f8:	60 87       	std	Z+8, r22	; 0x08
    89fa:	71 87       	std	Z+9, r23	; 0x09
    89fc:	82 87       	std	Z+10, r24	; 0x0a
    89fe:	93 87       	std	Z+11, r25	; 0x0b
    8a00:	0e 94 02 52 	call	0xa404	; 0xa404 <sprintf>
				strcat(tempDisplay,"%");
    8a04:	2d b7       	in	r18, 0x3d	; 61
    8a06:	3e b7       	in	r19, 0x3e	; 62
    8a08:	24 5f       	subi	r18, 0xF4	; 244
    8a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    8a0c:	2d bf       	out	0x3d, r18	; 61
    8a0e:	3e bf       	out	0x3e, r19	; 62
    8a10:	ce 01       	movw	r24, r28
    8a12:	62 e7       	ldi	r22, 0x72	; 114
    8a14:	71 e2       	ldi	r23, 0x21	; 33
    8a16:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
				display_putString(tempDisplay,2,0,System5x7);
    8a1a:	ce 01       	movw	r24, r28
    8a1c:	02 c0       	rjmp	.+4      	; 0x8a22 <__vector_108+0x35a>
			} else {
				display_putString("Disk Used:  ??.?%",2,0,System5x7);
    8a1e:	88 e8       	ldi	r24, 0x88	; 136
    8a20:	91 e2       	ldi	r25, 0x21	; 33
    8a22:	62 e0       	ldi	r22, 0x02	; 2
    8a24:	40 e0       	ldi	r20, 0x00	; 0
    8a26:	2b ea       	ldi	r18, 0xAB	; 171
    8a28:	3a e2       	ldi	r19, 0x2A	; 42
    8a2a:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>
			}



			display_putString("                 ",3,0,System5x7);
    8a2e:	8a e9       	ldi	r24, 0x9A	; 154
    8a30:	91 e2       	ldi	r25, 0x21	; 33
    8a32:	63 e0       	ldi	r22, 0x03	; 3
    8a34:	40 e0       	ldi	r20, 0x00	; 0
    8a36:	2b ea       	ldi	r18, 0xAB	; 171
    8a38:	3a e2       	ldi	r19, 0x2A	; 42
    8a3a:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>
			display_putString("                 ",4,0,System5x7);
    8a3e:	8a e9       	ldi	r24, 0x9A	; 154
    8a40:	91 e2       	ldi	r25, 0x21	; 33
    8a42:	64 e0       	ldi	r22, 0x04	; 4
    8a44:	40 e0       	ldi	r20, 0x00	; 0
    8a46:	2b ea       	ldi	r18, 0xAB	; 171
    8a48:	3a e2       	ldi	r19, 0x2A	; 42
    8a4a:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>
			display_putString("                 ",5,0,System5x7);
    8a4e:	8a e9       	ldi	r24, 0x9A	; 154
    8a50:	91 e2       	ldi	r25, 0x21	; 33
    8a52:	65 e0       	ldi	r22, 0x05	; 5
    8a54:	40 e0       	ldi	r20, 0x00	; 0
    8a56:	2b ea       	ldi	r18, 0xAB	; 171
    8a58:	3a e2       	ldi	r19, 0x2A	; 42
    8a5a:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>



			Time_UTCSecsToTime(UNIX_Time,&time);
    8a5e:	60 91 0a 2d 	lds	r22, 0x2D0A
    8a62:	70 91 0b 2d 	lds	r23, 0x2D0B
    8a66:	80 91 0c 2d 	lds	r24, 0x2D0C
    8a6a:	90 91 0d 2d 	lds	r25, 0x2D0D
    8a6e:	43 e6       	ldi	r20, 0x63	; 99
    8a70:	50 e5       	ldi	r21, 0x50	; 80
    8a72:	0e 94 ae 03 	call	0x75c	; 0x75c <Time_UTCSecsToTime>
			clockHour = time.Hour + 24;
			clockHour -= timeZoneShift;
    8a76:	90 91 66 50 	lds	r25, 0x5066
    8a7a:	98 5e       	subi	r25, 0xE8	; 232
    8a7c:	80 91 0e 2d 	lds	r24, 0x2D0E
    8a80:	98 1b       	sub	r25, r24
    8a82:	90 93 4d 2d 	sts	0x2D4D, r25
			if(clockHour > 24){
    8a86:	99 31       	cpi	r25, 0x19	; 25
    8a88:	18 f0       	brcs	.+6      	; 0x8a90 <__vector_108+0x3c8>
				clockHour -= 24;
    8a8a:	98 51       	subi	r25, 0x18	; 24
    8a8c:	90 93 4d 2d 	sts	0x2D4D, r25
			}

			if(clockHour == 0){
    8a90:	90 91 4d 2d 	lds	r25, 0x2D4D
    8a94:	99 23       	and	r25, r25
    8a96:	49 f4       	brne	.+18     	; 0x8aaa <__vector_108+0x3e2>
				displayAM = true;
    8a98:	81 e0       	ldi	r24, 0x01	; 1
    8a9a:	80 93 55 2d 	sts	0x2D55, r24
				displayPM = false;
    8a9e:	10 92 56 2d 	sts	0x2D56, r1
				clockHour += 12;
    8aa2:	8c e0       	ldi	r24, 0x0C	; 12
    8aa4:	80 93 4d 2d 	sts	0x2D4D, r24
    8aa8:	18 c0       	rjmp	.+48     	; 0x8ada <__vector_108+0x412>
			} else if(clockHour == 12){
    8aaa:	9c 30       	cpi	r25, 0x0C	; 12
    8aac:	31 f4       	brne	.+12     	; 0x8aba <__vector_108+0x3f2>
				displayAM = false;
    8aae:	10 92 55 2d 	sts	0x2D55, r1
				displayPM = true;
    8ab2:	81 e0       	ldi	r24, 0x01	; 1
    8ab4:	80 93 56 2d 	sts	0x2D56, r24
    8ab8:	10 c0       	rjmp	.+32     	; 0x8ada <__vector_108+0x412>
			} else if(clockHour > 12){
    8aba:	9d 30       	cpi	r25, 0x0D	; 13
    8abc:	48 f0       	brcs	.+18     	; 0x8ad0 <__vector_108+0x408>
				displayAM = false;
    8abe:	10 92 55 2d 	sts	0x2D55, r1
				displayPM = true;
    8ac2:	81 e0       	ldi	r24, 0x01	; 1
    8ac4:	80 93 56 2d 	sts	0x2D56, r24
				clockHour -= 12;
    8ac8:	9c 50       	subi	r25, 0x0C	; 12
    8aca:	90 93 4d 2d 	sts	0x2D4D, r25
    8ace:	05 c0       	rjmp	.+10     	; 0x8ada <__vector_108+0x412>
			}  else {
				displayAM = true;
    8ad0:	81 e0       	ldi	r24, 0x01	; 1
    8ad2:	80 93 55 2d 	sts	0x2D55, r24
				displayPM = false;
    8ad6:	10 92 56 2d 	sts	0x2D56, r1
			}
			if(timeIsValid){
    8ada:	80 91 4c 2d 	lds	r24, 0x2D4C
    8ade:	c4 e4       	ldi	r28, 0x44	; 68
    8ae0:	d6 e5       	ldi	r29, 0x56	; 86
    8ae2:	88 23       	and	r24, r24
    8ae4:	b9 f1       	breq	.+110    	; 0x8b54 <__vector_108+0x48c>
				
				
				sprintf(tempDisplay,"Time  %2u:%02u:%02u ", clockHour, time.Minute, time.Second);
    8ae6:	8d b7       	in	r24, 0x3d	; 61
    8ae8:	9e b7       	in	r25, 0x3e	; 62
    8aea:	0a 97       	sbiw	r24, 0x0a	; 10
    8aec:	8d bf       	out	0x3d, r24	; 61
    8aee:	9e bf       	out	0x3e, r25	; 62
    8af0:	ed b7       	in	r30, 0x3d	; 61
    8af2:	fe b7       	in	r31, 0x3e	; 62
    8af4:	31 96       	adiw	r30, 0x01	; 1
    8af6:	ad b7       	in	r26, 0x3d	; 61
    8af8:	be b7       	in	r27, 0x3e	; 62
    8afa:	11 96       	adiw	r26, 0x01	; 1
    8afc:	cd 93       	st	X+, r28
    8afe:	dc 93       	st	X, r29
    8b00:	12 97       	sbiw	r26, 0x02	; 2
    8b02:	8c ea       	ldi	r24, 0xAC	; 172
    8b04:	91 e2       	ldi	r25, 0x21	; 33
    8b06:	82 83       	std	Z+2, r24	; 0x02
    8b08:	93 83       	std	Z+3, r25	; 0x03
    8b0a:	80 91 4d 2d 	lds	r24, 0x2D4D
    8b0e:	84 83       	std	Z+4, r24	; 0x04
    8b10:	15 82       	std	Z+5, r1	; 0x05
    8b12:	80 91 65 50 	lds	r24, 0x5065
    8b16:	86 83       	std	Z+6, r24	; 0x06
    8b18:	17 82       	std	Z+7, r1	; 0x07
    8b1a:	80 91 64 50 	lds	r24, 0x5064
    8b1e:	80 87       	std	Z+8, r24	; 0x08
    8b20:	11 86       	std	Z+9, r1	; 0x09
    8b22:	0e 94 02 52 	call	0xa404	; 0xa404 <sprintf>
				if(displayAM){
    8b26:	80 91 55 2d 	lds	r24, 0x2D55
    8b2a:	ed b7       	in	r30, 0x3d	; 61
    8b2c:	fe b7       	in	r31, 0x3e	; 62
    8b2e:	3a 96       	adiw	r30, 0x0a	; 10
    8b30:	ed bf       	out	0x3d, r30	; 61
    8b32:	fe bf       	out	0x3e, r31	; 62
    8b34:	88 23       	and	r24, r24
    8b36:	21 f0       	breq	.+8      	; 0x8b40 <__vector_108+0x478>
					strcat(tempDisplay,am);
    8b38:	ce 01       	movw	r24, r28
    8b3a:	6a e6       	ldi	r22, 0x6A	; 106
    8b3c:	76 e2       	ldi	r23, 0x26	; 38
    8b3e:	07 c0       	rjmp	.+14     	; 0x8b4e <__vector_108+0x486>
				} else if(displayPM){
    8b40:	80 91 56 2d 	lds	r24, 0x2D56
    8b44:	88 23       	and	r24, r24
    8b46:	59 f0       	breq	.+22     	; 0x8b5e <__vector_108+0x496>
					strcat(tempDisplay,pm);
    8b48:	ce 01       	movw	r24, r28
    8b4a:	6f e6       	ldi	r22, 0x6F	; 111
    8b4c:	76 e2       	ldi	r23, 0x26	; 38
    8b4e:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
    8b52:	05 c0       	rjmp	.+10     	; 0x8b5e <__vector_108+0x496>
				}
			} else {
				strcpy(tempDisplay,"Time  ??:??:??   ");
    8b54:	ce 01       	movw	r24, r28
    8b56:	61 ec       	ldi	r22, 0xC1	; 193
    8b58:	71 e2       	ldi	r23, 0x21	; 33
    8b5a:	0e 94 46 51 	call	0xa28c	; 0xa28c <strcpy>
			}
			display_putString(tempDisplay,6,0,System5x7);
    8b5e:	84 e4       	ldi	r24, 0x44	; 68
    8b60:	96 e5       	ldi	r25, 0x56	; 86
    8b62:	66 e0       	ldi	r22, 0x06	; 6
    8b64:	40 e0       	ldi	r20, 0x00	; 0
    8b66:	2b ea       	ldi	r18, 0xAB	; 171
    8b68:	3a e2       	ldi	r19, 0x2A	; 42
    8b6a:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>
			if(justSwitchedStated){
    8b6e:	80 91 53 2d 	lds	r24, 0x2D53
    8b72:	88 23       	and	r24, r24
    8b74:	29 f0       	breq	.+10     	; 0x8b80 <__vector_108+0x4b8>
				justSwitchedStated = false;
    8b76:	10 92 53 2d 	sts	0x2D53, r1
				display_clearPage(7);
    8b7a:	87 e0       	ldi	r24, 0x07	; 7
    8b7c:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <display_clearPage>
			}
			if(connected){
    8b80:	80 91 3f 2d 	lds	r24, 0x2D3F
    8b84:	88 23       	and	r24, r24
    8b86:	19 f0       	breq	.+6      	; 0x8b8e <__vector_108+0x4c6>
				display_putString("Host Connected   ",7,0,System5x7);
    8b88:	83 ed       	ldi	r24, 0xD3	; 211
    8b8a:	91 e2       	ldi	r25, 0x21	; 33
    8b8c:	02 c0       	rjmp	.+4      	; 0x8b92 <__vector_108+0x4ca>
			} else {
				display_putString("Host Missing     ",7,0,System5x7);
    8b8e:	85 ee       	ldi	r24, 0xE5	; 229
    8b90:	91 e2       	ldi	r25, 0x21	; 33
    8b92:	67 e0       	ldi	r22, 0x07	; 7
    8b94:	40 e0       	ldi	r20, 0x00	; 0
    8b96:	2b ea       	ldi	r18, 0xAB	; 171
    8b98:	3a e2       	ldi	r19, 0x2A	; 42
    8b9a:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>
    8b9e:	11 c1       	rjmp	.+546    	; 0x8dc2 <__vector_108+0x6fa>
			}


		} else if(currentMode == sensorMode){
    8ba0:	80 91 4e 2d 	lds	r24, 0x2D4E
    8ba4:	81 30       	cpi	r24, 0x01	; 1
    8ba6:	09 f0       	breq	.+2      	; 0x8baa <__vector_108+0x4e2>
    8ba8:	0c c1       	rjmp	.+536    	; 0x8dc2 <__vector_108+0x6fa>
			display_putString("     Sensors     ",0,0,System5x7);
    8baa:	87 ef       	ldi	r24, 0xF7	; 247
    8bac:	91 e2       	ldi	r25, 0x21	; 33
    8bae:	60 e0       	ldi	r22, 0x00	; 0
    8bb0:	40 e0       	ldi	r20, 0x00	; 0
    8bb2:	2b ea       	ldi	r18, 0xAB	; 171
    8bb4:	3a e2       	ldi	r19, 0x2A	; 42
    8bb6:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>
			sprintf(tempDisplay,"Temperature: %3uC", quickTemperature);
    8bba:	20 91 1b 2d 	lds	r18, 0x2D1B
    8bbe:	00 d0       	rcall	.+0      	; 0x8bc0 <__vector_108+0x4f8>
    8bc0:	00 d0       	rcall	.+0      	; 0x8bc2 <__vector_108+0x4fa>
    8bc2:	ed b7       	in	r30, 0x3d	; 61
    8bc4:	fe b7       	in	r31, 0x3e	; 62
    8bc6:	31 96       	adiw	r30, 0x01	; 1
    8bc8:	64 e4       	ldi	r22, 0x44	; 68
    8bca:	c6 2e       	mov	r12, r22
    8bcc:	66 e5       	ldi	r22, 0x56	; 86
    8bce:	d6 2e       	mov	r13, r22
    8bd0:	ad b7       	in	r26, 0x3d	; 61
    8bd2:	be b7       	in	r27, 0x3e	; 62
    8bd4:	11 96       	adiw	r26, 0x01	; 1
    8bd6:	cd 92       	st	X+, r12
    8bd8:	dc 92       	st	X, r13
    8bda:	12 97       	sbiw	r26, 0x02	; 2
    8bdc:	89 e0       	ldi	r24, 0x09	; 9
    8bde:	92 e2       	ldi	r25, 0x22	; 34
    8be0:	82 83       	std	Z+2, r24	; 0x02
    8be2:	93 83       	std	Z+3, r25	; 0x03
    8be4:	24 83       	std	Z+4, r18	; 0x04
    8be6:	15 82       	std	Z+5, r1	; 0x05
    8be8:	0e 94 02 52 	call	0xa404	; 0xa404 <sprintf>
			display_putString(tempDisplay,2,0,System5x7);
    8bec:	ed b7       	in	r30, 0x3d	; 61
    8bee:	fe b7       	in	r31, 0x3e	; 62
    8bf0:	36 96       	adiw	r30, 0x06	; 6
    8bf2:	ed bf       	out	0x3d, r30	; 61
    8bf4:	fe bf       	out	0x3e, r31	; 62
    8bf6:	c6 01       	movw	r24, r12
    8bf8:	62 e0       	ldi	r22, 0x02	; 2
    8bfa:	40 e0       	ldi	r20, 0x00	; 0
    8bfc:	2b ea       	ldi	r18, 0xAB	; 171
    8bfe:	3a e2       	ldi	r19, 0x2A	; 42
    8c00:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>
			sprintf(tempDisplay,"Humidity:  %3u", quickHumidity);
    8c04:	20 91 1c 2d 	lds	r18, 0x2D1C
    8c08:	00 d0       	rcall	.+0      	; 0x8c0a <__vector_108+0x542>
    8c0a:	00 d0       	rcall	.+0      	; 0x8c0c <__vector_108+0x544>
    8c0c:	ed b7       	in	r30, 0x3d	; 61
    8c0e:	fe b7       	in	r31, 0x3e	; 62
    8c10:	31 96       	adiw	r30, 0x01	; 1
    8c12:	ad b7       	in	r26, 0x3d	; 61
    8c14:	be b7       	in	r27, 0x3e	; 62
    8c16:	11 96       	adiw	r26, 0x01	; 1
    8c18:	cd 92       	st	X+, r12
    8c1a:	dc 92       	st	X, r13
    8c1c:	12 97       	sbiw	r26, 0x02	; 2
    8c1e:	8b e1       	ldi	r24, 0x1B	; 27
    8c20:	92 e2       	ldi	r25, 0x22	; 34
    8c22:	82 83       	std	Z+2, r24	; 0x02
    8c24:	93 83       	std	Z+3, r25	; 0x03
    8c26:	24 83       	std	Z+4, r18	; 0x04
    8c28:	15 82       	std	Z+5, r1	; 0x05
    8c2a:	0e 94 02 52 	call	0xa404	; 0xa404 <sprintf>
			strcat(tempDisplay, "%RH");
    8c2e:	ed b7       	in	r30, 0x3d	; 61
    8c30:	fe b7       	in	r31, 0x3e	; 62
    8c32:	36 96       	adiw	r30, 0x06	; 6
    8c34:	ed bf       	out	0x3d, r30	; 61
    8c36:	fe bf       	out	0x3e, r31	; 62
    8c38:	c6 01       	movw	r24, r12
    8c3a:	6a e2       	ldi	r22, 0x2A	; 42
    8c3c:	72 e2       	ldi	r23, 0x22	; 34
    8c3e:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
			display_putString(tempDisplay,3,0,System5x7);
    8c42:	c6 01       	movw	r24, r12
    8c44:	63 e0       	ldi	r22, 0x03	; 3
    8c46:	40 e0       	ldi	r20, 0x00	; 0
    8c48:	2b ea       	ldi	r18, 0xAB	; 171
    8c4a:	3a e2       	ldi	r19, 0x2A	; 42
    8c4c:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>
			sprintf(tempDisplay,"Pressure:  %3ukPa", quickPressure);
    8c50:	20 91 1d 2d 	lds	r18, 0x2D1D
    8c54:	00 d0       	rcall	.+0      	; 0x8c56 <__vector_108+0x58e>
    8c56:	00 d0       	rcall	.+0      	; 0x8c58 <__vector_108+0x590>
    8c58:	ed b7       	in	r30, 0x3d	; 61
    8c5a:	fe b7       	in	r31, 0x3e	; 62
    8c5c:	31 96       	adiw	r30, 0x01	; 1
    8c5e:	ad b7       	in	r26, 0x3d	; 61
    8c60:	be b7       	in	r27, 0x3e	; 62
    8c62:	11 96       	adiw	r26, 0x01	; 1
    8c64:	cd 92       	st	X+, r12
    8c66:	dc 92       	st	X, r13
    8c68:	12 97       	sbiw	r26, 0x02	; 2
    8c6a:	8e e2       	ldi	r24, 0x2E	; 46
    8c6c:	92 e2       	ldi	r25, 0x22	; 34
    8c6e:	82 83       	std	Z+2, r24	; 0x02
    8c70:	93 83       	std	Z+3, r25	; 0x03
    8c72:	24 83       	std	Z+4, r18	; 0x04
    8c74:	15 82       	std	Z+5, r1	; 0x05
    8c76:	0e 94 02 52 	call	0xa404	; 0xa404 <sprintf>
			display_putString(tempDisplay,4,0,System5x7);
    8c7a:	ed b7       	in	r30, 0x3d	; 61
    8c7c:	fe b7       	in	r31, 0x3e	; 62
    8c7e:	36 96       	adiw	r30, 0x06	; 6
    8c80:	ed bf       	out	0x3d, r30	; 61
    8c82:	fe bf       	out	0x3e, r31	; 62
    8c84:	c6 01       	movw	r24, r12
    8c86:	64 e0       	ldi	r22, 0x04	; 4
    8c88:	40 e0       	ldi	r20, 0x00	; 0
    8c8a:	2b ea       	ldi	r18, 0xAB	; 171
    8c8c:	3a e2       	ldi	r19, 0x2A	; 42
    8c8e:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>
			sprintf(tempDisplay,"Light:      %5u", quickLight);
    8c92:	20 91 1e 2d 	lds	r18, 0x2D1E
    8c96:	30 91 1f 2d 	lds	r19, 0x2D1F
    8c9a:	00 d0       	rcall	.+0      	; 0x8c9c <__vector_108+0x5d4>
    8c9c:	00 d0       	rcall	.+0      	; 0x8c9e <__vector_108+0x5d6>
    8c9e:	ed b7       	in	r30, 0x3d	; 61
    8ca0:	fe b7       	in	r31, 0x3e	; 62
    8ca2:	31 96       	adiw	r30, 0x01	; 1
    8ca4:	ad b7       	in	r26, 0x3d	; 61
    8ca6:	be b7       	in	r27, 0x3e	; 62
    8ca8:	11 96       	adiw	r26, 0x01	; 1
    8caa:	cd 92       	st	X+, r12
    8cac:	dc 92       	st	X, r13
    8cae:	12 97       	sbiw	r26, 0x02	; 2
    8cb0:	80 e4       	ldi	r24, 0x40	; 64
    8cb2:	92 e2       	ldi	r25, 0x22	; 34
    8cb4:	82 83       	std	Z+2, r24	; 0x02
    8cb6:	93 83       	std	Z+3, r25	; 0x03
    8cb8:	24 83       	std	Z+4, r18	; 0x04
    8cba:	35 83       	std	Z+5, r19	; 0x05
    8cbc:	0e 94 02 52 	call	0xa404	; 0xa404 <sprintf>
			display_putString(tempDisplay,5,0,System5x7);
    8cc0:	ed b7       	in	r30, 0x3d	; 61
    8cc2:	fe b7       	in	r31, 0x3e	; 62
    8cc4:	36 96       	adiw	r30, 0x06	; 6
    8cc6:	ed bf       	out	0x3d, r30	; 61
    8cc8:	fe bf       	out	0x3e, r31	; 62
    8cca:	c6 01       	movw	r24, r12
    8ccc:	65 e0       	ldi	r22, 0x05	; 5
    8cce:	40 e0       	ldi	r20, 0x00	; 0
    8cd0:	2b ea       	ldi	r18, 0xAB	; 171
    8cd2:	3a e2       	ldi	r19, 0x2A	; 42
    8cd4:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>

			sprintf(tempDisplay,"Air: %5lu, %5lu", quickSmall, quickLarge);
    8cd8:	20 91 25 2d 	lds	r18, 0x2D25
    8cdc:	30 91 26 2d 	lds	r19, 0x2D26
    8ce0:	40 91 27 2d 	lds	r20, 0x2D27
    8ce4:	50 91 28 2d 	lds	r21, 0x2D28
    8ce8:	e0 90 21 2d 	lds	r14, 0x2D21
    8cec:	f0 90 22 2d 	lds	r15, 0x2D22
    8cf0:	00 91 23 2d 	lds	r16, 0x2D23
    8cf4:	10 91 24 2d 	lds	r17, 0x2D24
    8cf8:	8d b7       	in	r24, 0x3d	; 61
    8cfa:	9e b7       	in	r25, 0x3e	; 62
    8cfc:	0c 97       	sbiw	r24, 0x0c	; 12
    8cfe:	8d bf       	out	0x3d, r24	; 61
    8d00:	9e bf       	out	0x3e, r25	; 62
    8d02:	ed b7       	in	r30, 0x3d	; 61
    8d04:	fe b7       	in	r31, 0x3e	; 62
    8d06:	31 96       	adiw	r30, 0x01	; 1
    8d08:	ad b7       	in	r26, 0x3d	; 61
    8d0a:	be b7       	in	r27, 0x3e	; 62
    8d0c:	11 96       	adiw	r26, 0x01	; 1
    8d0e:	cd 92       	st	X+, r12
    8d10:	dc 92       	st	X, r13
    8d12:	12 97       	sbiw	r26, 0x02	; 2
    8d14:	80 e5       	ldi	r24, 0x50	; 80
    8d16:	92 e2       	ldi	r25, 0x22	; 34
    8d18:	82 83       	std	Z+2, r24	; 0x02
    8d1a:	93 83       	std	Z+3, r25	; 0x03
    8d1c:	24 83       	std	Z+4, r18	; 0x04
    8d1e:	35 83       	std	Z+5, r19	; 0x05
    8d20:	46 83       	std	Z+6, r20	; 0x06
    8d22:	57 83       	std	Z+7, r21	; 0x07
    8d24:	e0 86       	std	Z+8, r14	; 0x08
    8d26:	f1 86       	std	Z+9, r15	; 0x09
    8d28:	02 87       	std	Z+10, r16	; 0x0a
    8d2a:	13 87       	std	Z+11, r17	; 0x0b
    8d2c:	0e 94 02 52 	call	0xa404	; 0xa404 <sprintf>
			display_putString(tempDisplay,6,0,System5x7);
    8d30:	ed b7       	in	r30, 0x3d	; 61
    8d32:	fe b7       	in	r31, 0x3e	; 62
    8d34:	3c 96       	adiw	r30, 0x0c	; 12
    8d36:	ed bf       	out	0x3d, r30	; 61
    8d38:	fe bf       	out	0x3e, r31	; 62
    8d3a:	c6 01       	movw	r24, r12
    8d3c:	66 e0       	ldi	r22, 0x06	; 6
    8d3e:	40 e0       	ldi	r20, 0x00	; 0
    8d40:	2b ea       	ldi	r18, 0xAB	; 171
    8d42:	3a e2       	ldi	r19, 0x2A	; 42
    8d44:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>
			display_putString("Sound:           ",7,0,System5x7);
    8d48:	80 e6       	ldi	r24, 0x60	; 96
    8d4a:	92 e2       	ldi	r25, 0x22	; 34
    8d4c:	67 e0       	ldi	r22, 0x07	; 7
    8d4e:	40 e0       	ldi	r20, 0x00	; 0
    8d50:	2b ea       	ldi	r18, 0xAB	; 171
    8d52:	3a e2       	ldi	r19, 0x2A	; 42
    8d54:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <display_putString>

			uint8_t i = 50;
			display_setCursor(7,i);
    8d58:	87 e0       	ldi	r24, 0x07	; 7
    8d5a:	62 e3       	ldi	r22, 0x32	; 50
    8d5c:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <display_setCursor>
    8d60:	22 e3       	ldi	r18, 0x32	; 50
    8d62:	30 e0       	ldi	r19, 0x00	; 0
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    8d64:	a0 ea       	ldi	r26, 0xA0	; 160
    8d66:	b6 e0       	ldi	r27, 0x06	; 6
    8d68:	40 e8       	ldi	r20, 0x80	; 128
	Display_SPI.DATA = dataByte;
    8d6a:	e0 ec       	ldi	r30, 0xC0	; 192
    8d6c:	f9 e0       	ldi	r31, 0x09	; 9
			while(i < 102){
				if(i < (quickMic/4 + 50)){
    8d6e:	5f ef       	ldi	r21, 0xFF	; 255
    8d70:	80 91 20 2d 	lds	r24, 0x2D20
    8d74:	86 95       	lsr	r24
    8d76:	86 95       	lsr	r24
    8d78:	90 e0       	ldi	r25, 0x00	; 0
    8d7a:	c1 96       	adiw	r24, 0x31	; 49
    8d7c:	82 17       	cp	r24, r18
    8d7e:	93 07       	cpc	r25, r19
    8d80:	4c f0       	brlt	.+18     	; 0x8d94 <__vector_108+0x6cc>
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    8d82:	15 96       	adiw	r26, 0x05	; 5
    8d84:	4c 93       	st	X, r20
    8d86:	15 97       	sbiw	r26, 0x05	; 5
	Display_SPI.DATA = dataByte;
    8d88:	53 83       	std	Z+3, r21	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    8d8a:	80 91 c2 09 	lds	r24, 0x09C2
    8d8e:	87 ff       	sbrs	r24, 7
    8d90:	fc cf       	rjmp	.-8      	; 0x8d8a <__vector_108+0x6c2>
    8d92:	08 c0       	rjmp	.+16     	; 0x8da4 <__vector_108+0x6dc>
	while(!(Display_SPI.STATUS & SPI_IF_bm));
}

void display_sendData(uint8_t dataByte) {
	//Write 1 to CD
	Display_CDPort.OUTSET = Display_CD_bm;
    8d94:	15 96       	adiw	r26, 0x05	; 5
    8d96:	4c 93       	st	X, r20
    8d98:	15 97       	sbiw	r26, 0x05	; 5
	Display_SPI.DATA = dataByte;
    8d9a:	13 82       	std	Z+3, r1	; 0x03
	while(!(Display_SPI.STATUS & SPI_IF_bm));
    8d9c:	80 91 c2 09 	lds	r24, 0x09C2
    8da0:	87 ff       	sbrs	r24, 7
    8da2:	fc cf       	rjmp	.-8      	; 0x8d9c <__vector_108+0x6d4>
    8da4:	2f 5f       	subi	r18, 0xFF	; 255
    8da6:	3f 4f       	sbci	r19, 0xFF	; 255
			display_putString(tempDisplay,6,0,System5x7);
			display_putString("Sound:           ",7,0,System5x7);

			uint8_t i = 50;
			display_setCursor(7,i);
			while(i < 102){
    8da8:	26 36       	cpi	r18, 0x66	; 102
    8daa:	31 05       	cpc	r19, r1
    8dac:	09 f7       	brne	.-62     	; 0x8d70 <__vector_108+0x6a8>
    8dae:	09 c0       	rjmp	.+18     	; 0x8dc2 <__vector_108+0x6fa>
	}
	backlight_Timer++;
	

	if(backLightIsOn && okToDisplayGUI && Button_Pressed(Button_Pin)){
		backlight_Timer = 0;
    8db0:	10 92 5a 2d 	sts	0x2D5A, r1
    8db4:	bf cc       	rjmp	.-1666   	; 0x8734 <__vector_108+0x6c>
		while(okToGetRemainingSpace);
	}
	
	if(okToDisplayGUI){
		
		if(Button_Pressed(Switch_Pin) && !okToOpenLogFile && !recording && timeIsValid && SD_Inserted()){		// start recording
    8db6:	80 91 4f 2d 	lds	r24, 0x2D4F
    8dba:	88 23       	and	r24, r24
    8dbc:	09 f4       	brne	.+2      	; 0x8dc0 <__vector_108+0x6f8>
    8dbe:	3f cd       	rjmp	.-1410   	; 0x883e <__vector_108+0x176>
    8dc0:	5a cd       	rjmp	.-1356   	; 0x8876 <__vector_108+0x1ae>
			}

			
		}
    }
}
    8dc2:	ff 91       	pop	r31
    8dc4:	ef 91       	pop	r30
    8dc6:	df 91       	pop	r29
    8dc8:	cf 91       	pop	r28
    8dca:	bf 91       	pop	r27
    8dcc:	af 91       	pop	r26
    8dce:	9f 91       	pop	r25
    8dd0:	8f 91       	pop	r24
    8dd2:	7f 91       	pop	r23
    8dd4:	6f 91       	pop	r22
    8dd6:	5f 91       	pop	r21
    8dd8:	4f 91       	pop	r20
    8dda:	3f 91       	pop	r19
    8ddc:	2f 91       	pop	r18
    8dde:	1f 91       	pop	r17
    8de0:	0f 91       	pop	r16
    8de2:	ff 90       	pop	r15
    8de4:	ef 90       	pop	r14
    8de6:	df 90       	pop	r13
    8de8:	cf 90       	pop	r12
    8dea:	0f 90       	pop	r0
    8dec:	0b be       	out	0x3b, r0	; 59
    8dee:	0f 90       	pop	r0
    8df0:	0f be       	out	0x3f, r0	; 63
    8df2:	0f 90       	pop	r0
    8df4:	1f 90       	pop	r1
    8df6:	18 95       	reti

00008df8 <Uploader_sendFilename>:
		return false;
	}
	return true;
}

bool Uploader_sendFilename(void){
    8df8:	1f 93       	push	r17
    if(!Debug_SendByte('F')){
    8dfa:	86 e4       	ldi	r24, 0x46	; 70
    8dfc:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    8e00:	88 23       	and	r24, r24
    8e02:	09 f4       	brne	.+2      	; 0x8e06 <Uploader_sendFilename+0xe>
    8e04:	42 c0       	rjmp	.+132    	; 0x8e8a <Uploader_sendFilename+0x92>
		return false;
	}
	
    okToOpenDirectory = true;
    8e06:	81 e0       	ldi	r24, 0x01	; 1
    8e08:	80 93 41 2d 	sts	0x2D41, r24
    while(okToOpenDirectory);
    8e0c:	80 91 41 2d 	lds	r24, 0x2D41
    8e10:	88 23       	and	r24, r24
    8e12:	e1 f7       	brne	.-8      	; 0x8e0c <Uploader_sendFilename+0x14>
	
    while(true){
        okToGrabNextFileName = true;
    8e14:	11 e0       	ldi	r17, 0x01	; 1
    8e16:	10 93 42 2d 	sts	0x2D42, r17
        while(okToGrabNextFileName);
    8e1a:	80 91 42 2d 	lds	r24, 0x2D42
    8e1e:	88 23       	and	r24, r24
    8e20:	e1 f7       	brne	.-8      	; 0x8e1a <Uploader_sendFilename+0x22>
		if(availableFileName[0] == 0){
    8e22:	80 91 76 56 	lds	r24, 0x5676
    8e26:	88 23       	and	r24, r24
    8e28:	49 f4       	brne	.+18     	; 0x8e3c <Uploader_sendFilename+0x44>
            if(!Debug_SendString("",true)){
    8e2a:	8c e3       	ldi	r24, 0x3C	; 60
    8e2c:	91 e2       	ldi	r25, 0x21	; 33
    8e2e:	61 e0       	ldi	r22, 0x01	; 1
    8e30:	0e 94 62 41 	call	0x82c4	; 0x82c4 <Debug_SendString>
    8e34:	88 23       	and	r24, r24
    8e36:	51 f1       	breq	.+84     	; 0x8e8c <Uploader_sendFilename+0x94>
    8e38:	81 e0       	ldi	r24, 0x01	; 1
    8e3a:	28 c0       	rjmp	.+80     	; 0x8e8c <Uploader_sendFilename+0x94>
				return false;
			}
            return true;
        } else {
			if(recording){
    8e3c:	80 91 e1 2c 	lds	r24, 0x2CE1
    8e40:	88 23       	and	r24, r24
    8e42:	79 f0       	breq	.+30     	; 0x8e62 <Uploader_sendFilename+0x6a>
				if((strcasecmp(currentLogFile,availableFileName)) != 0){		// file is NOT the current file
    8e44:	89 e2       	ldi	r24, 0x29	; 41
    8e46:	96 e3       	ldi	r25, 0x36	; 54
    8e48:	66 e7       	ldi	r22, 0x76	; 118
    8e4a:	76 e5       	ldi	r23, 0x56	; 86
    8e4c:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <strcasecmp>
    8e50:	89 2b       	or	r24, r25
    8e52:	09 f3       	breq	.-62     	; 0x8e16 <Uploader_sendFilename+0x1e>
			    	if(strcasestr(availableFileName,".BT") != NULL){						// file has .bt extension
    8e54:	86 e7       	ldi	r24, 0x76	; 118
    8e56:	96 e5       	ldi	r25, 0x56	; 86
    8e58:	62 e7       	ldi	r22, 0x72	; 114
    8e5a:	72 e2       	ldi	r23, 0x22	; 34
    8e5c:	0e 94 0d 51 	call	0xa21a	; 0xa21a <strcasestr>
    8e60:	06 c0       	rjmp	.+12     	; 0x8e6e <Uploader_sendFilename+0x76>
							return false;
						}
					}
				}
			} else {
				if(strcasestr(availableFileName,".BT") != NULL){						// file has .bt extension
    8e62:	86 e7       	ldi	r24, 0x76	; 118
    8e64:	96 e5       	ldi	r25, 0x56	; 86
    8e66:	62 e7       	ldi	r22, 0x72	; 114
    8e68:	72 e2       	ldi	r23, 0x22	; 34
    8e6a:	0e 94 0d 51 	call	0xa21a	; 0xa21a <strcasestr>
    8e6e:	89 2b       	or	r24, r25
    8e70:	91 f2       	breq	.-92     	; 0x8e16 <Uploader_sendFilename+0x1e>
					if(!Debug_SendString(availableFileName,false)){
    8e72:	86 e7       	ldi	r24, 0x76	; 118
    8e74:	96 e5       	ldi	r25, 0x56	; 86
    8e76:	60 e0       	ldi	r22, 0x00	; 0
    8e78:	0e 94 62 41 	call	0x82c4	; 0x82c4 <Debug_SendString>
    8e7c:	88 23       	and	r24, r24
    8e7e:	29 f0       	breq	.+10     	; 0x8e8a <Uploader_sendFilename+0x92>
						return false;
					}
					if(!Debug_SendByte(',')){
    8e80:	8c e2       	ldi	r24, 0x2C	; 44
    8e82:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    8e86:	88 23       	and	r24, r24
    8e88:	31 f6       	brne	.-116    	; 0x8e16 <Uploader_sendFilename+0x1e>
    8e8a:	80 e0       	ldi	r24, 0x00	; 0
					}
				}
			}
        }
    }
}
    8e8c:	1f 91       	pop	r17
    8e8e:	08 95       	ret

00008e90 <Uploader_Update>:
volatile bool fileExists				= false;
volatile bool timeIsValid				= false;


bool Uploader_Update(void){
	if(Debug_CharReadyToRead()){
    8e90:	0e 94 2c 01 	call	0x258	; 0x258 <Debug_CharReadyToRead>
    8e94:	88 23       	and	r24, r24
    8e96:	09 f4       	brne	.+2      	; 0x8e9a <Uploader_Update+0xa>
    8e98:	6e c0       	rjmp	.+220    	; 0x8f76 <Uploader_Update+0xe6>
		
		timeOutCounter = 0;
    8e9a:	10 92 30 2d 	sts	0x2D30, r1
    8e9e:	10 92 31 2d 	sts	0x2D31, r1
		command[0] = Debug_GetByte(false);
    8ea2:	80 e0       	ldi	r24, 0x00	; 0
    8ea4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Debug_GetByte>
    8ea8:	80 93 c0 36 	sts	0x36C0, r24
		
		if(command[0] == 'T'){									// supply the time
    8eac:	84 35       	cpi	r24, 0x54	; 84
    8eae:	29 f5       	brne	.+74     	; 0x8efa <Uploader_Update+0x6a>
			if(Uploader_getTime()){
    8eb0:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <Uploader_getTime>
    8eb4:	88 23       	and	r24, r24
    8eb6:	f1 f0       	breq	.+60     	; 0x8ef4 <Uploader_Update+0x64>
	return true;
}

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
    8eb8:	80 91 21 04 	lds	r24, 0x0421
    8ebc:	80 61       	ori	r24, 0x10	; 16
    8ebe:	e0 e2       	ldi	r30, 0x20	; 32
    8ec0:	f4 e0       	ldi	r31, 0x04	; 4
    8ec2:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
    8ec4:	80 91 21 04 	lds	r24, 0x0421
    8ec8:	84 fd       	sbrc	r24, 4
    8eca:	fc cf       	rjmp	.-8      	; 0x8ec4 <Uploader_Update+0x34>
	return RTC32.CNT;
    8ecc:	80 91 24 04 	lds	r24, 0x0424
    8ed0:	90 91 25 04 	lds	r25, 0x0425
    8ed4:	a0 91 26 04 	lds	r26, 0x0426
    8ed8:	b0 91 27 04 	lds	r27, 0x0427
				UNIX_Time = Time_Get();
    8edc:	80 93 0a 2d 	sts	0x2D0A, r24
    8ee0:	90 93 0b 2d 	sts	0x2D0B, r25
    8ee4:	a0 93 0c 2d 	sts	0x2D0C, r26
    8ee8:	b0 93 0d 2d 	sts	0x2D0D, r27
				timeIsValid = true;				
    8eec:	81 e0       	ldi	r24, 0x01	; 1
    8eee:	80 93 4c 2d 	sts	0x2D4C, r24
    8ef2:	41 c0       	rjmp	.+130    	; 0x8f76 <Uploader_Update+0xe6>
			} else {
				timeIsValid = false;
    8ef4:	10 92 4c 2d 	sts	0x2D4C, r1
    8ef8:	55 c0       	rjmp	.+170    	; 0x8fa4 <Uploader_Update+0x114>
				return false;
			}
		} else if(command[0] == 'S'){                          // request SSID
    8efa:	83 35       	cpi	r24, 0x53	; 83
    8efc:	19 f4       	brne	.+6      	; 0x8f04 <Uploader_Update+0x74>
			if(!Uploader_sendSSID()){
    8efe:	0e 94 27 43 	call	0x864e	; 0x864e <Uploader_sendSSID>
    8f02:	2c c0       	rjmp	.+88     	; 0x8f5c <Uploader_Update+0xcc>
				return false;
			}
		} else if(command[0] == 'A'){                          // request authorization type
    8f04:	81 34       	cpi	r24, 0x41	; 65
    8f06:	19 f4       	brne	.+6      	; 0x8f0e <Uploader_Update+0x7e>
			if(!Uploader_sendAuthType()){
    8f08:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Uploader_sendAuthType>
    8f0c:	27 c0       	rjmp	.+78     	; 0x8f5c <Uploader_Update+0xcc>
				return false;
			}
		} else if(command[0] == 'K'){                          // request authorisation key
    8f0e:	8b 34       	cpi	r24, 0x4B	; 75
    8f10:	19 f4       	brne	.+6      	; 0x8f18 <Uploader_Update+0x88>
			if(!Uploader_sendKey()){
    8f12:	0e 94 97 42 	call	0x852e	; 0x852e <Uploader_sendKey>
    8f16:	22 c0       	rjmp	.+68     	; 0x8f5c <Uploader_Update+0xcc>
				return false;
			}
		} else if(command[0] == 'U'){                          // request user
    8f18:	85 35       	cpi	r24, 0x55	; 85
    8f1a:	19 f4       	brne	.+6      	; 0x8f22 <Uploader_Update+0x92>
			if(!Uploader_sendUser()){
    8f1c:	0e 94 6b 42 	call	0x84d6	; 0x84d6 <Uploader_sendUser>
    8f20:	1d c0       	rjmp	.+58     	; 0x8f5c <Uploader_Update+0xcc>
				return false;
			}
		} else if(command[0] == 'N'){                           // request nickname
    8f22:	8e 34       	cpi	r24, 0x4E	; 78
    8f24:	19 f4       	brne	.+6      	; 0x8f2c <Uploader_Update+0x9c>
			if(!Uploader_sendNickname()){
    8f26:	0e 94 3f 42 	call	0x847e	; 0x847e <Uploader_sendNickname>
    8f2a:	18 c0       	rjmp	.+48     	; 0x8f5c <Uploader_Update+0xcc>
				return false;
			}
		} else if(command[0] == 'F'){                           // request filename
    8f2c:	86 34       	cpi	r24, 0x46	; 70
    8f2e:	19 f4       	brne	.+6      	; 0x8f36 <Uploader_Update+0xa6>
			if(!Uploader_sendFilename()){
    8f30:	0e 94 fc 46 	call	0x8df8	; 0x8df8 <Uploader_sendFilename>
    8f34:	13 c0       	rjmp	.+38     	; 0x8f5c <Uploader_Update+0xcc>
				return false;
			}
		} else if(command[0] == 'D'){                           // request data from file
    8f36:	84 34       	cpi	r24, 0x44	; 68
    8f38:	19 f4       	brne	.+6      	; 0x8f40 <Uploader_Update+0xb0>
			if(!Uploader_uploadFile()){
    8f3a:	0e 94 1d 38 	call	0x703a	; 0x703a <Uploader_uploadFile>
    8f3e:	0e c0       	rjmp	.+28     	; 0x8f5c <Uploader_Update+0xcc>
				return false;
			}
		} else if(command[0] == 'E'){							// erase file
    8f40:	85 34       	cpi	r24, 0x45	; 69
    8f42:	19 f4       	brne	.+6      	; 0x8f4a <Uploader_Update+0xba>
			if(!Uploader_eraseFile()){
    8f44:	0e 94 81 37 	call	0x6f02	; 0x6f02 <Uploader_eraseFile>
    8f48:	09 c0       	rjmp	.+18     	; 0x8f5c <Uploader_Update+0xcc>
				return false;
			}
		} else if(command[0] == 'V'){							// request server for post
    8f4a:	86 35       	cpi	r24, 0x56	; 86
    8f4c:	19 f4       	brne	.+6      	; 0x8f54 <Uploader_Update+0xc4>
			if(!Uploader_sendServer()){
    8f4e:	0e 94 13 42 	call	0x8426	; 0x8426 <Uploader_sendServer>
    8f52:	04 c0       	rjmp	.+8      	; 0x8f5c <Uploader_Update+0xcc>
				return false;
			}
		} else if(command[0] == 'O'){							// request port for post
    8f54:	8f 34       	cpi	r24, 0x4F	; 79
    8f56:	29 f4       	brne	.+10     	; 0x8f62 <Uploader_Update+0xd2>
			if(!Uploader_sendPort()){
    8f58:	0e 94 e7 41 	call	0x83ce	; 0x83ce <Uploader_sendPort>
    8f5c:	88 23       	and	r24, r24
    8f5e:	59 f4       	brne	.+22     	; 0x8f76 <Uploader_Update+0xe6>
    8f60:	21 c0       	rjmp	.+66     	; 0x8fa4 <Uploader_Update+0x114>
				return false;
			}
		}  else if(command[0] == 'R'){							// reset
    8f62:	82 35       	cpi	r24, 0x52	; 82
    8f64:	41 f4       	brne	.+16     	; 0x8f76 <Uploader_Update+0xe6>
    8f66:	80 e0       	ldi	r24, 0x00	; 0
    8f68:	98 e4       	ldi	r25, 0x48	; 72
    8f6a:	01 97       	sbiw	r24, 0x01	; 1
    8f6c:	f1 f7       	brne	.-4      	; 0x8f6a <Uploader_Update+0xda>
			_delay_ms(5);
			Debug_SendByte('R');
    8f6e:	82 e5       	ldi	r24, 0x52	; 82
    8f70:	0e 94 16 02 	call	0x42c	; 0x42c <Debug_SendByte>
    8f74:	17 c0       	rjmp	.+46     	; 0x8fa4 <Uploader_Update+0x114>
    8f76:	86 e6       	ldi	r24, 0x66	; 102
    8f78:	9e e0       	ldi	r25, 0x0E	; 14
    8f7a:	01 97       	sbiw	r24, 0x01	; 1
    8f7c:	f1 f7       	brne	.-4      	; 0x8f7a <Uploader_Update+0xea>
			return false;
		}
	}
	_delay_ms(1);
	timeOutCounter++;
    8f7e:	80 91 30 2d 	lds	r24, 0x2D30
    8f82:	90 91 31 2d 	lds	r25, 0x2D31
    8f86:	01 96       	adiw	r24, 0x01	; 1
    8f88:	80 93 30 2d 	sts	0x2D30, r24
    8f8c:	90 93 31 2d 	sts	0x2D31, r25
	if(timeOutCounter > 30000){
    8f90:	80 91 30 2d 	lds	r24, 0x2D30
    8f94:	90 91 31 2d 	lds	r25, 0x2D31
    8f98:	20 e0       	ldi	r18, 0x00	; 0
    8f9a:	81 53       	subi	r24, 0x31	; 49
    8f9c:	95 47       	sbci	r25, 0x75	; 117
    8f9e:	18 f4       	brcc	.+6      	; 0x8fa6 <Uploader_Update+0x116>
    8fa0:	21 e0       	ldi	r18, 0x01	; 1
    8fa2:	01 c0       	rjmp	.+2      	; 0x8fa6 <Uploader_Update+0x116>
    8fa4:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}
	return true;
}
    8fa6:	82 2f       	mov	r24, r18
    8fa8:	08 95       	ret

00008faa <SD_MakeFileName>:

void SD_WriteCRC(void){
	SD_Write32(CRC^0xFFFFFFFF);
}

void SD_MakeFileName(uint32_t var){
    8faa:	0f 93       	push	r16
    8fac:	1f 93       	push	r17
	fileName[0] = '/';
    8fae:	08 e5       	ldi	r16, 0x58	; 88
    8fb0:	16 e3       	ldi	r17, 0x36	; 54
    8fb2:	2f e2       	ldi	r18, 0x2F	; 47
    8fb4:	20 93 58 36 	sts	0x3658, r18
	ltoa(var, fileName+1, 16);
    8fb8:	a8 01       	movw	r20, r16
    8fba:	4f 5f       	subi	r20, 0xFF	; 255
    8fbc:	5f 4f       	sbci	r21, 0xFF	; 255
    8fbe:	20 e1       	ldi	r18, 0x10	; 16
    8fc0:	30 e0       	ldi	r19, 0x00	; 0
    8fc2:	0e 94 b9 51 	call	0xa372	; 0xa372 <ltoa>
	strcat(fileName, ".bt");
    8fc6:	c8 01       	movw	r24, r16
    8fc8:	66 e7       	ldi	r22, 0x76	; 118
    8fca:	72 e2       	ldi	r23, 0x22	; 34
    8fcc:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
}
    8fd0:	1f 91       	pop	r17
    8fd2:	0f 91       	pop	r16
    8fd4:	08 95       	ret

00008fd6 <SD_Open>:
	Button_Port.PIN4CTRL =  PORT_OPC_WIREDORPULL_gc;
	return tmp;
}


uint8_t SD_Open(char string []){
    8fd6:	cf 93       	push	r28
    8fd8:	df 93       	push	r29
    8fda:	ec 01       	movw	r28, r24
	strcpy(currentLogFile,string);
    8fdc:	89 e2       	ldi	r24, 0x29	; 41
    8fde:	96 e3       	ldi	r25, 0x36	; 54
    8fe0:	be 01       	movw	r22, r28
    8fe2:	0e 94 46 51 	call	0xa28c	; 0xa28c <strcpy>
	strupr(currentLogFile);
    8fe6:	89 e2       	ldi	r24, 0x29	; 41
    8fe8:	96 e3       	ldi	r25, 0x36	; 54
    8fea:	0e 94 8e 51 	call	0xa31c	; 0xa31c <strupr>
    8fee:	21 e0       	ldi	r18, 0x01	; 1
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    8ff0:	a9 e2       	ldi	r26, 0x29	; 41
    8ff2:	b6 e3       	ldi	r27, 0x36	; 54
    8ff4:	07 c0       	rjmp	.+14     	; 0x9004 <SD_Open+0x2e>
		currentLogFile[i-1] = currentLogFile[i];
    8ff6:	fc 01       	movw	r30, r24
    8ff8:	e7 5d       	subi	r30, 0xD7	; 215
    8ffa:	f9 4c       	sbci	r31, 0xC9	; 201
    8ffc:	80 81       	ld	r24, Z
    8ffe:	31 97       	sbiw	r30, 0x01	; 1
    9000:	80 83       	st	Z, r24


uint8_t SD_Open(char string []){
	strcpy(currentLogFile,string);
	strupr(currentLogFile);
	for(uint8_t i = 1; i < strlen(currentLogFile); i++){
    9002:	2f 5f       	subi	r18, 0xFF	; 255
    9004:	fd 01       	movw	r30, r26
    9006:	01 90       	ld	r0, Z+
    9008:	00 20       	and	r0, r0
    900a:	e9 f7       	brne	.-6      	; 0x9006 <SD_Open+0x30>
    900c:	31 97       	sbiw	r30, 0x01	; 1
    900e:	e9 52       	subi	r30, 0x29	; 41
    9010:	f6 43       	sbci	r31, 0x36	; 54
    9012:	82 2f       	mov	r24, r18
    9014:	90 e0       	ldi	r25, 0x00	; 0
    9016:	8e 17       	cp	r24, r30
    9018:	9f 07       	cpc	r25, r31
    901a:	68 f3       	brcs	.-38     	; 0x8ff6 <SD_Open+0x20>
		currentLogFile[i-1] = currentLogFile[i];
	}
	currentLogFile[strlen(currentLogFile) - 1] = 0;
    901c:	e8 5d       	subi	r30, 0xD8	; 216
    901e:	f9 4c       	sbci	r31, 0xC9	; 201
    9020:	10 82       	st	Z, r1

	return f_open(&Log_File, string, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    9022:	8d e9       	ldi	r24, 0x9D	; 157
    9024:	90 e5       	ldi	r25, 0x50	; 80
    9026:	be 01       	movw	r22, r28
    9028:	43 e1       	ldi	r20, 0x13	; 19
    902a:	0e 94 92 17 	call	0x2f24	; 0x2f24 <f_open>
}
    902e:	df 91       	pop	r29
    9030:	cf 91       	pop	r28
    9032:	08 95       	ret

00009034 <SD_StartLogFile>:
	
	
	
}

uint8_t SD_StartLogFile(uint32_t time){
    9034:	ff 92       	push	r15
    9036:	0f 93       	push	r16
    9038:	1f 93       	push	r17
    903a:	cf 93       	push	r28
    903c:	df 93       	push	r29
	uint8_t resp;
	uint16_t length;
	
	length = StartFileLength;
	length += strlen(DeviceClass);
	length += strlen(deviceID);
    903e:	01 ef       	ldi	r16, 0xF1	; 241
    9040:	17 e3       	ldi	r17, 0x37	; 55
    9042:	e8 01       	movw	r28, r16
    9044:	09 90       	ld	r0, Y+
    9046:	00 20       	and	r0, r0
    9048:	e9 f7       	brne	.-6      	; 0x9044 <SD_StartLogFile+0x10>
    904a:	21 97       	sbiw	r28, 0x01	; 1
    904c:	c0 1b       	sub	r28, r16
    904e:	d1 0b       	sbc	r29, r17
	length += strlen(FirmwareVersion);
	length += strlen(HardwareVersion);
	
	SD_MakeFileName(time);
    9050:	0e 94 d5 47 	call	0x8faa	; 0x8faa <SD_MakeFileName>
	resp = SD_Open(fileName);
    9054:	88 e5       	ldi	r24, 0x58	; 88
    9056:	96 e3       	ldi	r25, 0x36	; 54
    9058:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <SD_Open>
    905c:	f8 2e       	mov	r15, r24
	if(resp != FR_OK){
    905e:	88 23       	and	r24, r24
    9060:	09 f0       	breq	.+2      	; 0x9064 <SD_StartLogFile+0x30>
    9062:	be c0       	rjmp	.+380    	; 0x91e0 <SD_StartLogFile+0x1ac>
        CRC = (CRC >> 8) ^ crc_table[buffer[i] ^ (CRC & 0xFF)];
    }
}

void SD_ClearCRC(void){
	CRC = 0xFFFFFFFF;
    9064:	8f ef       	ldi	r24, 0xFF	; 255
    9066:	9f ef       	ldi	r25, 0xFF	; 255
    9068:	af ef       	ldi	r26, 0xFF	; 255
    906a:	bf ef       	ldi	r27, 0xFF	; 255
    906c:	80 93 dc 55 	sts	0x55DC, r24
    9070:	90 93 dd 55 	sts	0x55DD, r25
    9074:	a0 93 de 55 	sts	0x55DE, r26
    9078:	b0 93 df 55 	sts	0x55DF, r27
		sdValid = false;
	    return resp;
	}
	SD_ClearCRC();
	SD_Write32(MAGIC_NUMBER);               // magic number
    907c:	6c e4       	ldi	r22, 0x4C	; 76
    907e:	74 e7       	ldi	r23, 0x74	; 116
    9080:	8e ed       	ldi	r24, 0xDE	; 222
    9082:	90 eb       	ldi	r25, 0xB0	; 176
    9084:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(length);						// record size
    9088:	be 01       	movw	r22, r28
    908a:	64 5c       	subi	r22, 0xC4	; 196
    908c:	7c 4f       	sbci	r23, 0xFC	; 252
    908e:	80 e0       	ldi	r24, 0x00	; 0
    9090:	90 e0       	ldi	r25, 0x00	; 0
    9092:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write16(RTYPE_START_OF_FILE); 		// record type
    9096:	81 e0       	ldi	r24, 0x01	; 1
    9098:	90 e0       	ldi	r25, 0x00	; 0
    909a:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <SD_Write16>
	
						// **** payload ****
	SD_Write16(0x0100);						// protocol version
    909e:	80 e0       	ldi	r24, 0x00	; 0
    90a0:	91 e0       	ldi	r25, 0x01	; 1
    90a2:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <SD_Write16>
	SD_Write8(0x02);						// time protocol
    90a6:	82 e0       	ldi	r24, 0x02	; 2
    90a8:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_Write32(Time_Get32BitTimer());		// time
    90ac:	0e 94 86 03 	call	0x70c	; 0x70c <Time_Get32BitTimer>
    90b0:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write32(542535);						// picoseconds per tick (48bit) (truly is 542534.722)
    90b4:	67 e4       	ldi	r22, 0x47	; 71
    90b6:	77 e4       	ldi	r23, 0x47	; 71
    90b8:	88 e0       	ldi	r24, 0x08	; 8
    90ba:	90 e0       	ldi	r25, 0x00	; 0
    90bc:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <SD_Write32>
	SD_Write16(0);
    90c0:	80 e0       	ldi	r24, 0x00	; 0
    90c2:	90 e0       	ldi	r25, 0x00	; 0
    90c4:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <SD_Write16>
	
	SD_WriteString("device_class");		
    90c8:	8a e7       	ldi	r24, 0x7A	; 122
    90ca:	92 e2       	ldi	r25, 0x22	; 34
    90cc:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);					
    90d0:	89 e0       	ldi	r24, 0x09	; 9
    90d2:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString(DeviceClass);		
    90d6:	87 e8       	ldi	r24, 0x87	; 135
    90d8:	92 e2       	ldi	r25, 0x22	; 34
    90da:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);					
    90de:	8a e0       	ldi	r24, 0x0A	; 10
    90e0:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	
	SD_WriteString("device_id");		
    90e4:	83 e9       	ldi	r24, 0x93	; 147
    90e6:	92 e2       	ldi	r25, 0x22	; 34
    90e8:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);					
    90ec:	89 e0       	ldi	r24, 0x09	; 9
    90ee:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString(deviceID);
    90f2:	c8 01       	movw	r24, r16
    90f4:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);					
    90f8:	8a e0       	ldi	r24, 0x0A	; 10
    90fa:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	
	SD_WriteString("firmware_version");	
    90fe:	8d e9       	ldi	r24, 0x9D	; 157
    9100:	92 e2       	ldi	r25, 0x22	; 34
    9102:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);					
    9106:	89 e0       	ldi	r24, 0x09	; 9
    9108:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString(FirmwareVersion);	
    910c:	85 e6       	ldi	r24, 0x65	; 101
    910e:	90 e2       	ldi	r25, 0x20	; 32
    9110:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);					
    9114:	8a e0       	ldi	r24, 0x0A	; 10
    9116:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	
	SD_WriteString("hardware_version");	
    911a:	8e ea       	ldi	r24, 0xAE	; 174
    911c:	92 e2       	ldi	r25, 0x22	; 34
    911e:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);					
    9122:	89 e0       	ldi	r24, 0x09	; 9
    9124:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString(HardwareVersion);	
    9128:	86 e5       	ldi	r24, 0x56	; 86
    912a:	90 e2       	ldi	r25, 0x20	; 32
    912c:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);					
    9130:	8a e0       	ldi	r24, 0x0A	; 10
    9132:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	
	SD_WriteString("channel_specs");	
    9136:	8f eb       	ldi	r24, 0xBF	; 191
    9138:	92 e2       	ldi	r25, 0x22	; 34
    913a:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x09);					
    913e:	89 e0       	ldi	r24, 0x09	; 9
    9140:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_WriteString("{\"Temperature\":{\"units\": \"deg C\", \"scale\": 0.1},");			
    9144:	8d ec       	ldi	r24, 0xCD	; 205
    9146:	92 e2       	ldi	r25, 0x22	; 34
    9148:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_WriteString("\"Humidity\":{\"units\": \"%RH\", \"scale\": 0.1},");				
    914c:	8e ef       	ldi	r24, 0xFE	; 254
    914e:	92 e2       	ldi	r25, 0x22	; 34
    9150:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_WriteString("\"Pressure\":{\"units\": \"kPa\", \"scale\": 0.1},");				
    9154:	89 e2       	ldi	r24, 0x29	; 41
    9156:	93 e2       	ldi	r25, 0x23	; 35
    9158:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_WriteString("\"Light_Green\":{\"units\": \"bits\", \"scale\": 1},");				
    915c:	84 e5       	ldi	r24, 0x54	; 84
    915e:	93 e2       	ldi	r25, 0x23	; 35
    9160:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_WriteString("\"Light_Red\":{\"units\": \"bits\", \"scale\": 1},");				
    9164:	81 e8       	ldi	r24, 0x81	; 129
    9166:	93 e2       	ldi	r25, 0x23	; 35
    9168:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_WriteString("\"Light_Blue\":{\"units\": \"bits\", \"scale\": 1},");				 
    916c:	8c ea       	ldi	r24, 0xAC	; 172
    916e:	93 e2       	ldi	r25, 0x23	; 35
    9170:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_WriteString("\"Light_Clear\":{\"units\": \"bits\", \"scale\": 1},");				
    9174:	88 ed       	ldi	r24, 0xD8	; 216
    9176:	93 e2       	ldi	r25, 0x23	; 35
    9178:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_WriteString("\"Air_1\":{\"units\": \"#particles\", \"scale\": 1},");				
    917c:	85 e0       	ldi	r24, 0x05	; 5
    917e:	94 e2       	ldi	r25, 0x24	; 36
    9180:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_WriteString("\"Air_2\":{\"units\": \"#particles\", \"scale\": 1},");				
    9184:	82 e3       	ldi	r24, 0x32	; 50
    9186:	94 e2       	ldi	r25, 0x24	; 36
    9188:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_WriteString("\"Air_3\":{\"units\": \"#particles\", \"scale\": 1},");				
    918c:	8f e5       	ldi	r24, 0x5F	; 95
    918e:	94 e2       	ldi	r25, 0x24	; 36
    9190:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_WriteString("\"Air_4\":{\"units\": \"#particles\", \"scale\": 1},");				
    9194:	8c e8       	ldi	r24, 0x8C	; 140
    9196:	94 e2       	ldi	r25, 0x24	; 36
    9198:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_WriteString("\"Air_5\":{\"units\": \"#particles\", \"scale\": 1},");				
    919c:	89 eb       	ldi	r24, 0xB9	; 185
    919e:	94 e2       	ldi	r25, 0x24	; 36
    91a0:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_WriteString("\"Air_6\":{\"units\": \"#particles\", \"scale\": 1},");				
    91a4:	86 ee       	ldi	r24, 0xE6	; 230
    91a6:	94 e2       	ldi	r25, 0x24	; 36
    91a8:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_WriteString("\"Air_Small\":{\"units\": \"#particles\", \"scale\": 1},");			
    91ac:	83 e1       	ldi	r24, 0x13	; 19
    91ae:	95 e2       	ldi	r25, 0x25	; 37
    91b0:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_WriteString("\"Air_Large\":{\"units\": \"#particles\", \"scale\": 1},");			
    91b4:	84 e4       	ldi	r24, 0x44	; 68
    91b6:	95 e2       	ldi	r25, 0x25	; 37
    91b8:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_WriteString("\"Microphone\":{\"units\": \"bits\", \"scale\": 1}}");				
    91bc:	85 e7       	ldi	r24, 0x75	; 117
    91be:	95 e2       	ldi	r25, 0x25	; 37
    91c0:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <SD_WriteString>
	SD_Write8(0x0A);																	
    91c4:	8a e0       	ldi	r24, 0x0A	; 10
    91c6:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	SD_Write8(0x00);																	
    91ca:	80 e0       	ldi	r24, 0x00	; 0
    91cc:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <SD_Write8>
	
	SD_WriteCRC();																		
    91d0:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <SD_WriteCRC>
	
	if(f_sync(&Log_File) != FR_OK){
    91d4:	8d e9       	ldi	r24, 0x9D	; 157
    91d6:	90 e5       	ldi	r25, 0x50	; 80
    91d8:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <f_sync>
    91dc:	88 23       	and	r24, r24
    91de:	11 f0       	breq	.+4      	; 0x91e4 <SD_StartLogFile+0x1b0>
		sdValid = false;
    91e0:	10 92 14 2d 	sts	0x2D14, r1
	}
	return resp;
}
    91e4:	8f 2d       	mov	r24, r15
    91e6:	df 91       	pop	r29
    91e8:	cf 91       	pop	r28
    91ea:	1f 91       	pop	r17
    91ec:	0f 91       	pop	r16
    91ee:	ff 90       	pop	r15
    91f0:	08 95       	ret

000091f2 <__vector_53>:
	SD_Writer_Timer.INTCTRLA = (SD_Writer_Timer.INTCTRLA & ~TC0_OVFINTLVL_gm) | TC_CCAINTLVL_MED_gc;

}

ISR(SD_Writer_Timer_vect)
{
    91f2:	1f 92       	push	r1
    91f4:	0f 92       	push	r0
    91f6:	0f b6       	in	r0, 0x3f	; 63
    91f8:	0f 92       	push	r0
    91fa:	0b b6       	in	r0, 0x3b	; 59
    91fc:	0f 92       	push	r0
    91fe:	11 24       	eor	r1, r1
    9200:	df 92       	push	r13
    9202:	ef 92       	push	r14
    9204:	ff 92       	push	r15
    9206:	0f 93       	push	r16
    9208:	1f 93       	push	r17
    920a:	2f 93       	push	r18
    920c:	3f 93       	push	r19
    920e:	4f 93       	push	r20
    9210:	5f 93       	push	r21
    9212:	6f 93       	push	r22
    9214:	7f 93       	push	r23
    9216:	8f 93       	push	r24
    9218:	9f 93       	push	r25
    921a:	af 93       	push	r26
    921c:	bf 93       	push	r27
    921e:	ef 93       	push	r30
    9220:	ff 93       	push	r31
    9222:	df 93       	push	r29
    9224:	cf 93       	push	r28
    9226:	0f 92       	push	r0
    9228:	0f 92       	push	r0
    922a:	cd b7       	in	r28, 0x3d	; 61
    922c:	de b7       	in	r29, 0x3e	; 62
	
	if(recording){
    922e:	80 91 e1 2c 	lds	r24, 0x2CE1
    9232:	88 23       	and	r24, r24
    9234:	09 f4       	brne	.+2      	; 0x9238 <__vector_53+0x46>
    9236:	67 c1       	rjmp	.+718    	; 0x9506 <__vector_53+0x314>
		
		for(uint8_t i = 0; i < microphoneNumberOfBuffers; i++){
			if(okToSendMicrophoneBuffer[i]){
    9238:	80 91 e9 56 	lds	r24, 0x56E9
    923c:	88 23       	and	r24, r24
    923e:	29 f0       	breq	.+10     	; 0x924a <__vector_53+0x58>
				SD_WriteMicrophoneBuffer(i);
    9240:	80 e0       	ldi	r24, 0x00	; 0
    9242:	0e 94 76 3f 	call	0x7eec	; 0x7eec <SD_WriteMicrophoneBuffer>
				okToSendMicrophoneBuffer[i] = false;
    9246:	10 92 e9 56 	sts	0x56E9, r1
{
	
	if(recording){
		
		for(uint8_t i = 0; i < microphoneNumberOfBuffers; i++){
			if(okToSendMicrophoneBuffer[i]){
    924a:	80 91 ea 56 	lds	r24, 0x56EA
    924e:	88 23       	and	r24, r24
    9250:	29 f0       	breq	.+10     	; 0x925c <__vector_53+0x6a>
				SD_WriteMicrophoneBuffer(i);
    9252:	81 e0       	ldi	r24, 0x01	; 1
    9254:	0e 94 76 3f 	call	0x7eec	; 0x7eec <SD_WriteMicrophoneBuffer>
				okToSendMicrophoneBuffer[i] = false;
    9258:	10 92 ea 56 	sts	0x56EA, r1
{
	
	if(recording){
		
		for(uint8_t i = 0; i < microphoneNumberOfBuffers; i++){
			if(okToSendMicrophoneBuffer[i]){
    925c:	80 91 eb 56 	lds	r24, 0x56EB
    9260:	88 23       	and	r24, r24
    9262:	29 f0       	breq	.+10     	; 0x926e <__vector_53+0x7c>
				SD_WriteMicrophoneBuffer(i);
    9264:	82 e0       	ldi	r24, 0x02	; 2
    9266:	0e 94 76 3f 	call	0x7eec	; 0x7eec <SD_WriteMicrophoneBuffer>
				okToSendMicrophoneBuffer[i] = false;
    926a:	10 92 eb 56 	sts	0x56EB, r1
			}
		}
		
		for(uint8_t i = 0; i < temperatureNumberOfBuffers; i++){
			if(okToSendTemperatureBuffer[i]){
    926e:	80 91 da 55 	lds	r24, 0x55DA
    9272:	88 23       	and	r24, r24
    9274:	29 f0       	breq	.+10     	; 0x9280 <__vector_53+0x8e>
				SD_WriteTemperatureBuffer(i);
    9276:	80 e0       	ldi	r24, 0x00	; 0
    9278:	0e 94 ca 40 	call	0x8194	; 0x8194 <SD_WriteTemperatureBuffer>
				okToSendTemperatureBuffer[i] = false;
    927c:	10 92 da 55 	sts	0x55DA, r1
				okToSendMicrophoneBuffer[i] = false;
			}
		}
		
		for(uint8_t i = 0; i < temperatureNumberOfBuffers; i++){
			if(okToSendTemperatureBuffer[i]){
    9280:	80 91 db 55 	lds	r24, 0x55DB
    9284:	88 23       	and	r24, r24
    9286:	29 f0       	breq	.+10     	; 0x9292 <__vector_53+0xa0>
				SD_WriteTemperatureBuffer(i);
    9288:	81 e0       	ldi	r24, 0x01	; 1
    928a:	0e 94 ca 40 	call	0x8194	; 0x8194 <SD_WriteTemperatureBuffer>
				okToSendTemperatureBuffer[i] = false;
    928e:	10 92 db 55 	sts	0x55DB, r1
			}
		}
		
		for(uint8_t i = 0; i < humidityNumberOfBuffers; i++){
			if(okToSendHumidityBuffer[i]){
    9292:	80 91 2b 38 	lds	r24, 0x382B
    9296:	88 23       	and	r24, r24
    9298:	29 f0       	breq	.+10     	; 0x92a4 <__vector_53+0xb2>
				SD_WriteHumidityBuffer(i);
    929a:	80 e0       	ldi	r24, 0x00	; 0
    929c:	0e 94 5c 40 	call	0x80b8	; 0x80b8 <SD_WriteHumidityBuffer>
				okToSendHumidityBuffer[i] = false;
    92a0:	10 92 2b 38 	sts	0x382B, r1
				okToSendTemperatureBuffer[i] = false;
			}
		}
		
		for(uint8_t i = 0; i < humidityNumberOfBuffers; i++){
			if(okToSendHumidityBuffer[i]){
    92a4:	80 91 2c 38 	lds	r24, 0x382C
    92a8:	88 23       	and	r24, r24
    92aa:	29 f0       	breq	.+10     	; 0x92b6 <__vector_53+0xc4>
				SD_WriteHumidityBuffer(i);
    92ac:	81 e0       	ldi	r24, 0x01	; 1
    92ae:	0e 94 5c 40 	call	0x80b8	; 0x80b8 <SD_WriteHumidityBuffer>
				okToSendHumidityBuffer[i] = false;
    92b2:	10 92 2c 38 	sts	0x382C, r1
			}
		}
		
		for(uint8_t i = 0; i < pressureNumberOfBuffers; i++){
			if(okToSendPressureBuffer[i]){
    92b6:	80 91 f2 36 	lds	r24, 0x36F2
    92ba:	88 23       	and	r24, r24
    92bc:	29 f0       	breq	.+10     	; 0x92c8 <__vector_53+0xd6>
				SD_WritePressureBuffer(i);
    92be:	80 e0       	ldi	r24, 0x00	; 0
    92c0:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <SD_WritePressureBuffer>
				okToSendPressureBuffer[i] = false;
    92c4:	10 92 f2 36 	sts	0x36F2, r1
				okToSendHumidityBuffer[i] = false;
			}
		}
		
		for(uint8_t i = 0; i < pressureNumberOfBuffers; i++){
			if(okToSendPressureBuffer[i]){
    92c8:	80 91 f3 36 	lds	r24, 0x36F3
    92cc:	88 23       	and	r24, r24
    92ce:	29 f0       	breq	.+10     	; 0x92da <__vector_53+0xe8>
				SD_WritePressureBuffer(i);
    92d0:	81 e0       	ldi	r24, 0x01	; 1
    92d2:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <SD_WritePressureBuffer>
				okToSendPressureBuffer[i] = false;
    92d6:	10 92 f3 36 	sts	0x36F3, r1
			}
		}
		
		for(uint8_t i = 0; i < lightNumberOfBuffers; i++){
			if(okToSendLightBuffer[i]){
    92da:	80 91 9e 36 	lds	r24, 0x369E
    92de:	88 23       	and	r24, r24
    92e0:	29 f0       	breq	.+10     	; 0x92ec <__vector_53+0xfa>
				SD_WriteLightBuffer(i);
    92e2:	80 e0       	ldi	r24, 0x00	; 0
    92e4:	0e 94 dc 3e 	call	0x7db8	; 0x7db8 <SD_WriteLightBuffer>
				okToSendLightBuffer[i] = false;
    92e8:	10 92 9e 36 	sts	0x369E, r1
				okToSendPressureBuffer[i] = false;
			}
		}
		
		for(uint8_t i = 0; i < lightNumberOfBuffers; i++){
			if(okToSendLightBuffer[i]){
    92ec:	80 91 9f 36 	lds	r24, 0x369F
    92f0:	88 23       	and	r24, r24
    92f2:	29 f0       	breq	.+10     	; 0x92fe <__vector_53+0x10c>
				SD_WriteLightBuffer(i);
    92f4:	81 e0       	ldi	r24, 0x01	; 1
    92f6:	0e 94 dc 3e 	call	0x7db8	; 0x7db8 <SD_WriteLightBuffer>
				okToSendLightBuffer[i] = false;
    92fa:	10 92 9f 36 	sts	0x369F, r1
			}
		}
		
		
		
		if(okToSendAirQuality && !restartingFile){
    92fe:	80 91 09 2d 	lds	r24, 0x2D09
    9302:	88 23       	and	r24, r24
    9304:	09 f4       	brne	.+2      	; 0x9308 <__vector_53+0x116>
    9306:	d3 c0       	rjmp	.+422    	; 0x94ae <__vector_53+0x2bc>
    9308:	80 91 54 2d 	lds	r24, 0x2D54
    930c:	88 23       	and	r24, r24
    930e:	09 f0       	breq	.+2      	; 0x9312 <__vector_53+0x120>
    9310:	ce c0       	rjmp	.+412    	; 0x94ae <__vector_53+0x2bc>
    9312:	dd 24       	eor	r13, r13
    9314:	d3 94       	inc	r13
    9316:	10 e0       	ldi	r17, 0x00	; 0
    9318:	02 c0       	rjmp	.+4      	; 0x931e <__vector_53+0x12c>
			uint8_t numberOfBins = 1;
			uint8_t counter = 0;
			while(Rs232_CharReadyToRead()){
				airQualityString[counter] = Rs232_GetByte(false);
				if(airQualityString[counter] == ','){
					numberOfBins++;
    931a:	d3 94       	inc	r13
				}
				counter++;
    931c:	1f 5f       	subi	r17, 0xFF	; 255
}



bool Rs232_CharReadyToRead(void){
	if(Rs232_writeLocation == Rs232_readLocation){
    931e:	20 91 07 2d 	lds	r18, 0x2D07
    9322:	30 91 08 2d 	lds	r19, 0x2D08
    9326:	80 91 05 2d 	lds	r24, 0x2D05
    932a:	90 91 06 2d 	lds	r25, 0x2D06
    932e:	28 17       	cp	r18, r24
    9330:	39 07       	cpc	r19, r25
    9332:	09 f0       	breq	.+2      	; 0x9336 <__vector_53+0x144>
    9334:	f8 c1       	rjmp	.+1008   	; 0x9726 <__vector_53+0x534>
			}
			if(strstr(airQualityString,"Dylos") == NULL){
    9336:	86 e2       	ldi	r24, 0x26	; 38
    9338:	97 e3       	ldi	r25, 0x37	; 55
    933a:	61 ea       	ldi	r22, 0xA1	; 161
    933c:	75 e2       	ldi	r23, 0x25	; 37
    933e:	0e 94 4d 51 	call	0xa29a	; 0xa29a <strstr>
    9342:	00 97       	sbiw	r24, 0x00	; 0
    9344:	09 f0       	breq	.+2      	; 0x9348 <__vector_53+0x156>
    9346:	b3 c0       	rjmp	.+358    	; 0x94ae <__vector_53+0x2bc>
				airSampleTime = Time_Get32BitTimer();
    9348:	0e 94 86 03 	call	0x70c	; 0x70c <Time_Get32BitTimer>
    934c:	60 93 f1 2c 	sts	0x2CF1, r22
    9350:	70 93 f2 2c 	sts	0x2CF2, r23
    9354:	80 93 f3 2c 	sts	0x2CF3, r24
    9358:	90 93 f4 2c 	sts	0x2CF4, r25
				airCount[0] = atol(strtok(airQualityString,","));
    935c:	86 e2       	ldi	r24, 0x26	; 38
    935e:	97 e3       	ldi	r25, 0x37	; 55
    9360:	67 ea       	ldi	r22, 0xA7	; 167
    9362:	75 e2       	ldi	r23, 0x25	; 37
    9364:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
    9368:	0e 94 bc 50 	call	0xa178	; 0xa178 <atol>
    936c:	60 93 8a 37 	sts	0x378A, r22
    9370:	70 93 8b 37 	sts	0x378B, r23
    9374:	80 93 8c 37 	sts	0x378C, r24
    9378:	90 93 8d 37 	sts	0x378D, r25
    937c:	fe e8       	ldi	r31, 0x8E	; 142
    937e:	ef 2e       	mov	r14, r31
    9380:	f7 e3       	ldi	r31, 0x37	; 55
    9382:	ff 2e       	mov	r15, r31
				for(uint8_t i = 0; i < numberOfBins; i++){
    9384:	0d 2d       	mov	r16, r13
    9386:	10 e0       	ldi	r17, 0x00	; 0
    9388:	00 0f       	add	r16, r16
    938a:	11 1f       	adc	r17, r17
    938c:	00 0f       	add	r16, r16
    938e:	11 1f       	adc	r17, r17
    9390:	0e 0d       	add	r16, r14
    9392:	1f 1d       	adc	r17, r15
    9394:	0e c0       	rjmp	.+28     	; 0x93b2 <__vector_53+0x1c0>
					airCount[i+1] = atol(strtok(NULL,","));
    9396:	80 e0       	ldi	r24, 0x00	; 0
    9398:	90 e0       	ldi	r25, 0x00	; 0
    939a:	67 ea       	ldi	r22, 0xA7	; 167
    939c:	75 e2       	ldi	r23, 0x25	; 37
    939e:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
    93a2:	0e 94 bc 50 	call	0xa178	; 0xa178 <atol>
    93a6:	f7 01       	movw	r30, r14
    93a8:	61 93       	st	Z+, r22
    93aa:	71 93       	st	Z+, r23
    93ac:	81 93       	st	Z+, r24
    93ae:	91 93       	st	Z+, r25
    93b0:	7f 01       	movw	r14, r30
				counter++;
			}
			if(strstr(airQualityString,"Dylos") == NULL){
				airSampleTime = Time_Get32BitTimer();
				airCount[0] = atol(strtok(airQualityString,","));
				for(uint8_t i = 0; i < numberOfBins; i++){
    93b2:	e0 16       	cp	r14, r16
    93b4:	f1 06       	cpc	r15, r17
    93b6:	79 f7       	brne	.-34     	; 0x9396 <__vector_53+0x1a4>
    93b8:	20 91 8a 37 	lds	r18, 0x378A
    93bc:	30 91 8b 37 	lds	r19, 0x378B
    93c0:	40 91 8c 37 	lds	r20, 0x378C
    93c4:	50 91 8d 37 	lds	r21, 0x378D
					airCount[i+1] = atol(strtok(NULL,","));
				}
				if(numberOfBins == 2){
    93c8:	f2 e0       	ldi	r31, 0x02	; 2
    93ca:	df 16       	cp	r13, r31
    93cc:	01 f5       	brne	.+64     	; 0x940e <__vector_53+0x21c>
					
					quickSmall = airCount[0];
    93ce:	20 93 25 2d 	sts	0x2D25, r18
    93d2:	30 93 26 2d 	sts	0x2D26, r19
    93d6:	40 93 27 2d 	sts	0x2D27, r20
    93da:	50 93 28 2d 	sts	0x2D28, r21
					quickLarge = airCount[1];
    93de:	80 91 8e 37 	lds	r24, 0x378E
    93e2:	90 91 8f 37 	lds	r25, 0x378F
    93e6:	a0 91 90 37 	lds	r26, 0x3790
    93ea:	b0 91 91 37 	lds	r27, 0x3791
    93ee:	80 93 21 2d 	sts	0x2D21, r24
    93f2:	90 93 22 2d 	sts	0x2D22, r25
    93f6:	a0 93 23 2d 	sts	0x2D23, r26
    93fa:	b0 93 24 2d 	sts	0x2D24, r27
					if(recording){
    93fe:	80 91 e1 2c 	lds	r24, 0x2CE1
    9402:	88 23       	and	r24, r24
    9404:	09 f4       	brne	.+2      	; 0x9408 <__vector_53+0x216>
    9406:	51 c0       	rjmp	.+162    	; 0x94aa <__vector_53+0x2b8>
						SD_WriteAirSampleMinute();
    9408:	0e 94 9c 3d 	call	0x7b38	; 0x7b38 <SD_WriteAirSampleMinute>
    940c:	4e c0       	rjmp	.+156    	; 0x94aa <__vector_53+0x2b8>
					}
					okToSendAirQuality = false;
				} else {
					quickSmall = airCount[0] + airCount[1];
    940e:	80 91 8e 37 	lds	r24, 0x378E
    9412:	90 91 8f 37 	lds	r25, 0x378F
    9416:	a0 91 90 37 	lds	r26, 0x3790
    941a:	b0 91 91 37 	lds	r27, 0x3791
    941e:	82 0f       	add	r24, r18
    9420:	93 1f       	adc	r25, r19
    9422:	a4 1f       	adc	r26, r20
    9424:	b5 1f       	adc	r27, r21
    9426:	80 93 25 2d 	sts	0x2D25, r24
    942a:	90 93 26 2d 	sts	0x2D26, r25
    942e:	a0 93 27 2d 	sts	0x2D27, r26
    9432:	b0 93 28 2d 	sts	0x2D28, r27
					quickLarge = airCount[2] + airCount[3] + airCount[4] + airCount[5];
    9436:	80 91 96 37 	lds	r24, 0x3796
    943a:	90 91 97 37 	lds	r25, 0x3797
    943e:	a0 91 98 37 	lds	r26, 0x3798
    9442:	b0 91 99 37 	lds	r27, 0x3799
    9446:	20 91 92 37 	lds	r18, 0x3792
    944a:	30 91 93 37 	lds	r19, 0x3793
    944e:	40 91 94 37 	lds	r20, 0x3794
    9452:	50 91 95 37 	lds	r21, 0x3795
    9456:	82 0f       	add	r24, r18
    9458:	93 1f       	adc	r25, r19
    945a:	a4 1f       	adc	r26, r20
    945c:	b5 1f       	adc	r27, r21
    945e:	20 91 9a 37 	lds	r18, 0x379A
    9462:	30 91 9b 37 	lds	r19, 0x379B
    9466:	40 91 9c 37 	lds	r20, 0x379C
    946a:	50 91 9d 37 	lds	r21, 0x379D
    946e:	82 0f       	add	r24, r18
    9470:	93 1f       	adc	r25, r19
    9472:	a4 1f       	adc	r26, r20
    9474:	b5 1f       	adc	r27, r21
    9476:	20 91 9e 37 	lds	r18, 0x379E
    947a:	30 91 9f 37 	lds	r19, 0x379F
    947e:	40 91 a0 37 	lds	r20, 0x37A0
    9482:	50 91 a1 37 	lds	r21, 0x37A1
    9486:	82 0f       	add	r24, r18
    9488:	93 1f       	adc	r25, r19
    948a:	a4 1f       	adc	r26, r20
    948c:	b5 1f       	adc	r27, r21
    948e:	80 93 21 2d 	sts	0x2D21, r24
    9492:	90 93 22 2d 	sts	0x2D22, r25
    9496:	a0 93 23 2d 	sts	0x2D23, r26
    949a:	b0 93 24 2d 	sts	0x2D24, r27
					
					if(recording){
    949e:	80 91 e1 2c 	lds	r24, 0x2CE1
    94a2:	88 23       	and	r24, r24
    94a4:	11 f0       	breq	.+4      	; 0x94aa <__vector_53+0x2b8>
						SD_WriteAirSampleSecond();
    94a6:	0e 94 0c 3e 	call	0x7c18	; 0x7c18 <SD_WriteAirSampleSecond>
						
					}
					okToSendAirQuality = false;
    94aa:	10 92 09 2d 	sts	0x2D09, r1
				}
			} 
		}
		
		if(okToSendRTCBlock){
    94ae:	80 91 f5 2c 	lds	r24, 0x2CF5
    94b2:	88 23       	and	r24, r24
    94b4:	41 f1       	breq	.+80     	; 0x9506 <__vector_53+0x314>
	return true;
}

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
    94b6:	80 91 21 04 	lds	r24, 0x0421
    94ba:	80 61       	ori	r24, 0x10	; 16
    94bc:	e0 e2       	ldi	r30, 0x20	; 32
    94be:	f4 e0       	ldi	r31, 0x04	; 4
    94c0:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
    94c2:	80 91 21 04 	lds	r24, 0x0421
    94c6:	84 fd       	sbrc	r24, 4
    94c8:	fc cf       	rjmp	.-8      	; 0x94c2 <__vector_53+0x2d0>
	return RTC32.CNT;
    94ca:	80 91 24 04 	lds	r24, 0x0424
    94ce:	90 91 25 04 	lds	r25, 0x0425
    94d2:	a0 91 26 04 	lds	r26, 0x0426
    94d6:	b0 91 27 04 	lds	r27, 0x0427
			UNIX_Time = Time_Get();
    94da:	80 93 0a 2d 	sts	0x2D0A, r24
    94de:	90 93 0b 2d 	sts	0x2D0B, r25
    94e2:	a0 93 0c 2d 	sts	0x2D0C, r26
    94e6:	b0 93 0d 2d 	sts	0x2D0D, r27
			SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_Time);
    94ea:	0e 94 86 03 	call	0x70c	; 0x70c <Time_Get32BitTimer>
    94ee:	20 91 0a 2d 	lds	r18, 0x2D0A
    94f2:	30 91 0b 2d 	lds	r19, 0x2D0B
    94f6:	40 91 0c 2d 	lds	r20, 0x2D0C
    94fa:	50 91 0d 2d 	lds	r21, 0x2D0D
    94fe:	0e 94 a9 3b 	call	0x7752	; 0x7752 <SD_WriteRTCBlock>
			okToSendRTCBlock = false;
    9502:	10 92 f5 2c 	sts	0x2CF5, r1
		}
	}

	if(okToOpenLogFile){
    9506:	80 91 4f 2d 	lds	r24, 0x2D4F
    950a:	88 23       	and	r24, r24
    950c:	09 f4       	brne	.+2      	; 0x9510 <__vector_53+0x31e>
    950e:	45 c0       	rjmp	.+138    	; 0x959a <__vector_53+0x3a8>
		if(SD_StartLogFile(UNIX_Time) == FR_OK){  // open file
    9510:	60 91 0a 2d 	lds	r22, 0x2D0A
    9514:	70 91 0b 2d 	lds	r23, 0x2D0B
    9518:	80 91 0c 2d 	lds	r24, 0x2D0C
    951c:	90 91 0d 2d 	lds	r25, 0x2D0D
    9520:	0e 94 1a 48 	call	0x9034	; 0x9034 <SD_StartLogFile>
    9524:	88 23       	and	r24, r24
    9526:	a9 f5       	brne	.+106    	; 0x9592 <__vector_53+0x3a0>
    9528:	88 ee       	ldi	r24, 0xE8	; 232
    952a:	93 e0       	ldi	r25, 0x03	; 3
    952c:	20 e7       	ldi	r18, 0x70	; 112
    952e:	31 e0       	ldi	r19, 0x01	; 1
    9530:	f9 01       	movw	r30, r18
    9532:	31 97       	sbiw	r30, 0x01	; 1
    9534:	f1 f7       	brne	.-4      	; 0x9532 <__vector_53+0x340>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9536:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9538:	d9 f7       	brne	.-10     	; 0x9530 <__vector_53+0x33e>
			_delay_ms(100);
			lengthOfCurrentFile = 0;	
    953a:	10 92 57 2d 	sts	0x2D57, r1
    953e:	10 92 58 2d 	sts	0x2D58, r1

		    timeRecordingStarted = UNIX_Time;
    9542:	80 91 0a 2d 	lds	r24, 0x2D0A
    9546:	90 91 0b 2d 	lds	r25, 0x2D0B
    954a:	a0 91 0c 2d 	lds	r26, 0x2D0C
    954e:	b0 91 0d 2d 	lds	r27, 0x2D0D
    9552:	80 93 f7 2c 	sts	0x2CF7, r24
    9556:	90 93 f8 2c 	sts	0x2CF8, r25
    955a:	a0 93 f9 2c 	sts	0x2CF9, r26
    955e:	b0 93 fa 2c 	sts	0x2CFA, r27
		    SD_WriteRTCBlock(Time_Get32BitTimer(),UNIX_Time);
    9562:	0e 94 86 03 	call	0x70c	; 0x70c <Time_Get32BitTimer>
    9566:	20 91 0a 2d 	lds	r18, 0x2D0A
    956a:	30 91 0b 2d 	lds	r19, 0x2D0B
    956e:	40 91 0c 2d 	lds	r20, 0x2D0C
    9572:	50 91 0d 2d 	lds	r21, 0x2D0D
    9576:	0e 94 a9 3b 	call	0x7752	; 0x7752 <SD_WriteRTCBlock>
	}
	return tmp;
}

void Rs232_ClearBuffer(void){
	Rs232_readLocation = Rs232_writeLocation;
    957a:	80 91 07 2d 	lds	r24, 0x2D07
    957e:	90 91 08 2d 	lds	r25, 0x2D08
    9582:	80 93 05 2d 	sts	0x2D05, r24
    9586:	90 93 06 2d 	sts	0x2D06, r25

		    Rs232_ClearBuffer();
		    recording = true;
    958a:	81 e0       	ldi	r24, 0x01	; 1
    958c:	80 93 e1 2c 	sts	0x2CE1, r24
    9590:	02 c0       	rjmp	.+4      	; 0x9596 <__vector_53+0x3a4>
		} else {
		    sdValid = false;
    9592:	10 92 14 2d 	sts	0x2D14, r1
		}
		okToOpenLogFile = false;
    9596:	10 92 4f 2d 	sts	0x2D4F, r1
	}
	
	if(okToCloseLogFile){
    959a:	80 91 51 2d 	lds	r24, 0x2D51
    959e:	88 23       	and	r24, r24
    95a0:	21 f0       	breq	.+8      	; 0x95aa <__vector_53+0x3b8>
		SD_Close();
    95a2:	0e 94 9c 2c 	call	0x5938	; 0x5938 <SD_Close>
		okToCloseLogFile = false;
    95a6:	10 92 51 2d 	sts	0x2D51, r1
	}

	if(okToOpenDirectory){
    95aa:	80 91 41 2d 	lds	r24, 0x2D41
    95ae:	88 23       	and	r24, r24
    95b0:	61 f0       	breq	.+24     	; 0x95ca <__vector_53+0x3d8>
        if(f_opendir(&dir, "/") != FR_OK){
    95b2:	8d eb       	ldi	r24, 0xBD	; 189
    95b4:	92 e5       	ldi	r25, 0x52	; 82
    95b6:	69 ea       	ldi	r22, 0xA9	; 169
    95b8:	75 e2       	ldi	r23, 0x25	; 37
    95ba:	0e 94 02 20 	call	0x4004	; 0x4004 <f_opendir>
    95be:	88 23       	and	r24, r24
    95c0:	11 f0       	breq	.+4      	; 0x95c6 <__vector_53+0x3d4>
			sdValid = false;
    95c2:	10 92 14 2d 	sts	0x2D14, r1
		}
        okToOpenDirectory = false;
    95c6:	10 92 41 2d 	sts	0x2D41, r1
	}

	if(okToGrabNextFileName){
    95ca:	80 91 42 2d 	lds	r24, 0x2D42
    95ce:	88 23       	and	r24, r24
    95d0:	19 f1       	breq	.+70     	; 0x9618 <__vector_53+0x426>
        availableFileName[0] = 0;
    95d2:	10 92 76 56 	sts	0x5676, r1
        if((f_readdir(&dir, &fno) == FR_OK)){
    95d6:	8d eb       	ldi	r24, 0xBD	; 189
    95d8:	92 e5       	ldi	r25, 0x52	; 82
    95da:	60 e4       	ldi	r22, 0x40	; 64
    95dc:	76 e3       	ldi	r23, 0x36	; 54
    95de:	0e 94 65 20 	call	0x40ca	; 0x40ca <f_readdir>
    95e2:	88 23       	and	r24, r24
    95e4:	69 f4       	brne	.+26     	; 0x9600 <__vector_53+0x40e>
            if(fno.fname[0] != 0){
    95e6:	80 91 49 36 	lds	r24, 0x3649
    95ea:	88 23       	and	r24, r24
    95ec:	31 f0       	breq	.+12     	; 0x95fa <__vector_53+0x408>
                strcpy(availableFileName,fno.fname);
    95ee:	86 e7       	ldi	r24, 0x76	; 118
    95f0:	96 e5       	ldi	r25, 0x56	; 86
    95f2:	69 e4       	ldi	r22, 0x49	; 73
    95f4:	76 e3       	ldi	r23, 0x36	; 54
    95f6:	0e 94 46 51 	call	0xa28c	; 0xa28c <strcpy>
	        }
	        okToGrabNextFileName = false;
    95fa:	10 92 42 2d 	sts	0x2D42, r1
    95fe:	0c c0       	rjmp	.+24     	; 0x9618 <__vector_53+0x426>
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	return sdValid;
    9600:	80 91 14 2d 	lds	r24, 0x2D14
        } else if(SD_Inserted()){
    9604:	88 23       	and	r24, r24
    9606:	41 f0       	breq	.+16     	; 0x9618 <__vector_53+0x426>
            SD_Init();			
    9608:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <SD_Init>
            f_opendir(&dir, "/");
    960c:	8d eb       	ldi	r24, 0xBD	; 189
    960e:	92 e5       	ldi	r25, 0x52	; 82
    9610:	69 ea       	ldi	r22, 0xA9	; 169
    9612:	75 e2       	ldi	r23, 0x25	; 37
    9614:	0e 94 02 20 	call	0x4004	; 0x4004 <f_opendir>
        }
	}

	if(okToOpenFileToUpload){
    9618:	80 91 45 2d 	lds	r24, 0x2D45
    961c:	88 23       	and	r24, r24
    961e:	91 f1       	breq	.+100    	; 0x9684 <__vector_53+0x492>
	   f_stat(fileToUpload,&fno);
    9620:	82 ef       	ldi	r24, 0xF2	; 242
    9622:	95 e3       	ldi	r25, 0x35	; 53
    9624:	60 e4       	ldi	r22, 0x40	; 64
    9626:	76 e3       	ldi	r23, 0x36	; 54
    9628:	0e 94 b0 20 	call	0x4160	; 0x4160 <f_stat>
	   uploadFileSize = fno.fsize;
    962c:	80 91 40 36 	lds	r24, 0x3640
    9630:	90 91 41 36 	lds	r25, 0x3641
    9634:	a0 91 42 36 	lds	r26, 0x3642
    9638:	b0 91 43 36 	lds	r27, 0x3643
    963c:	80 93 32 2d 	sts	0x2D32, r24
    9640:	90 93 33 2d 	sts	0x2D33, r25
    9644:	a0 93 34 2d 	sts	0x2D34, r26
    9648:	b0 93 35 2d 	sts	0x2D35, r27

	   if(f_open(&Upload_File, fileToUpload, FA_READ | FA_WRITE | FA_OPEN_EXISTING) == FR_OK){
    964c:	83 ed       	ldi	r24, 0xD3	; 211
    964e:	92 e5       	ldi	r25, 0x52	; 82
    9650:	62 ef       	ldi	r22, 0xF2	; 242
    9652:	75 e3       	ldi	r23, 0x35	; 53
    9654:	43 e0       	ldi	r20, 0x03	; 3
    9656:	0e 94 92 17 	call	0x2f24	; 0x2f24 <f_open>
    965a:	88 23       	and	r24, r24
    965c:	21 f4       	brne	.+8      	; 0x9666 <__vector_53+0x474>
	      fileExists = true;
    965e:	81 e0       	ldi	r24, 0x01	; 1
    9660:	80 93 4b 2d 	sts	0x2D4B, r24
    9664:	02 c0       	rjmp	.+4      	; 0x966a <__vector_53+0x478>
	   } else {
	      fileExists = false;
    9666:	10 92 4b 2d 	sts	0x2D4B, r1
	   }
	   f_lseek(&Upload_File, 0);
    966a:	83 ed       	ldi	r24, 0xD3	; 211
    966c:	92 e5       	ldi	r25, 0x52	; 82
    966e:	40 e0       	ldi	r20, 0x00	; 0
    9670:	50 e0       	ldi	r21, 0x00	; 0
    9672:	60 e0       	ldi	r22, 0x00	; 0
    9674:	70 e0       	ldi	r23, 0x00	; 0
    9676:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <f_lseek>
	   uploadFileOpened = true;
    967a:	81 e0       	ldi	r24, 0x01	; 1
    967c:	80 93 46 2d 	sts	0x2D46, r24
	   okToOpenFileToUpload = false;
    9680:	10 92 45 2d 	sts	0x2D45, r1
	}

    if(okToFillUploadFileBuffer){
    9684:	80 91 47 2d 	lds	r24, 0x2D47
    9688:	88 23       	and	r24, r24
    968a:	a1 f0       	breq	.+40     	; 0x96b4 <__vector_53+0x4c2>
        uint16_t tmp;
        if(f_read(&Upload_File,&uploadFileBuffer,uploadChunkSize,&tmp) != FR_OK){
    968c:	83 ed       	ldi	r24, 0xD3	; 211
    968e:	92 e5       	ldi	r25, 0x52	; 82
    9690:	68 ef       	ldi	r22, 0xF8	; 248
    9692:	71 e3       	ldi	r23, 0x31	; 49
    9694:	48 ee       	ldi	r20, 0xE8	; 232
    9696:	53 e0       	ldi	r21, 0x03	; 3
    9698:	9e 01       	movw	r18, r28
    969a:	2f 5f       	subi	r18, 0xFF	; 255
    969c:	3f 4f       	sbci	r19, 0xFF	; 255
    969e:	0e 94 07 19 	call	0x320e	; 0x320e <f_read>
    96a2:	88 23       	and	r24, r24
    96a4:	11 f0       	breq	.+4      	; 0x96aa <__vector_53+0x4b8>
			sdValid = false;
    96a6:	10 92 14 2d 	sts	0x2D14, r1
		}
        okToFillUploadFileBuffer = false;
    96aa:	10 92 47 2d 	sts	0x2D47, r1
        uploadFileBufferFull = true;
    96ae:	81 e0       	ldi	r24, 0x01	; 1
    96b0:	80 93 48 2d 	sts	0x2D48, r24
    }


	if(okToCloseUploadFile){
    96b4:	80 91 49 2d 	lds	r24, 0x2D49
    96b8:	88 23       	and	r24, r24
    96ba:	a1 f0       	breq	.+40     	; 0x96e4 <__vector_53+0x4f2>
	    if(f_sync(&Upload_File) != FR_OK){
    96bc:	83 ed       	ldi	r24, 0xD3	; 211
    96be:	92 e5       	ldi	r25, 0x52	; 82
    96c0:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <f_sync>
    96c4:	88 23       	and	r24, r24
    96c6:	11 f0       	breq	.+4      	; 0x96cc <__vector_53+0x4da>
			sdValid = false;
    96c8:	10 92 14 2d 	sts	0x2D14, r1
		}
	    f_close(&Upload_File);
    96cc:	83 ed       	ldi	r24, 0xD3	; 211
    96ce:	92 e5       	ldi	r25, 0x52	; 82
    96d0:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <f_close>
	    strcpy(fileToUpload,"");
    96d4:	82 ef       	ldi	r24, 0xF2	; 242
    96d6:	95 e3       	ldi	r25, 0x35	; 53
    96d8:	6c e3       	ldi	r22, 0x3C	; 60
    96da:	71 e2       	ldi	r23, 0x21	; 33
    96dc:	0e 94 46 51 	call	0xa28c	; 0xa28c <strcpy>
		okToCloseUploadFile = false;
    96e0:	10 92 49 2d 	sts	0x2D49, r1
	}

	if(okToGetRemainingSpace){
    96e4:	80 91 5a 38 	lds	r24, 0x385A
    96e8:	88 23       	and	r24, r24
    96ea:	21 f0       	breq	.+8      	; 0x96f4 <__vector_53+0x502>
		SD_GetSpaceRemaining();
    96ec:	0e 94 55 2d 	call	0x5aaa	; 0x5aaa <SD_GetSpaceRemaining>
		okToGetRemainingSpace = false;
    96f0:	10 92 5a 38 	sts	0x385A, r1
	}

	if(okToEraseFile){
    96f4:	80 91 4a 2d 	lds	r24, 0x2D4A
    96f8:	88 23       	and	r24, r24
    96fa:	09 f1       	breq	.+66     	; 0x973e <__vector_53+0x54c>
        eraseFileReturn = f_unlink(fileToErase);
    96fc:	83 ef       	ldi	r24, 0xF3	; 243
    96fe:	94 e5       	ldi	r25, 0x54	; 84
    9700:	0e 94 a2 22 	call	0x4544	; 0x4544 <f_unlink>
    9704:	80 93 5b 38 	sts	0x385B, r24
		if(eraseFileReturn != FR_OK){
    9708:	80 91 5b 38 	lds	r24, 0x385B
    970c:	88 23       	and	r24, r24
    970e:	11 f0       	breq	.+4      	; 0x9714 <__vector_53+0x522>
			sdValid = false;
    9710:	10 92 14 2d 	sts	0x2D14, r1
		}
        strcpy(fileToUpload,"");
    9714:	82 ef       	ldi	r24, 0xF2	; 242
    9716:	95 e3       	ldi	r25, 0x35	; 53
    9718:	6c e3       	ldi	r22, 0x3C	; 60
    971a:	71 e2       	ldi	r23, 0x21	; 33
    971c:	0e 94 46 51 	call	0xa28c	; 0xa28c <strcpy>
        okToEraseFile = false;
    9720:	10 92 4a 2d 	sts	0x2D4A, r1
    9724:	0c c0       	rjmp	.+24     	; 0x973e <__vector_53+0x54c>
		
		if(okToSendAirQuality && !restartingFile){
			uint8_t numberOfBins = 1;
			uint8_t counter = 0;
			while(Rs232_CharReadyToRead()){
				airQualityString[counter] = Rs232_GetByte(false);
    9726:	80 e0       	ldi	r24, 0x00	; 0
    9728:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <Rs232_GetByte>
    972c:	e1 2f       	mov	r30, r17
    972e:	f0 e0       	ldi	r31, 0x00	; 0
    9730:	ea 5d       	subi	r30, 0xDA	; 218
    9732:	f8 4c       	sbci	r31, 0xC8	; 200
    9734:	80 83       	st	Z, r24
				if(airQualityString[counter] == ','){
    9736:	8c 32       	cpi	r24, 0x2C	; 44
    9738:	09 f0       	breq	.+2      	; 0x973c <__vector_53+0x54a>
    973a:	f0 cd       	rjmp	.-1056   	; 0x931c <__vector_53+0x12a>
    973c:	ee cd       	rjmp	.-1060   	; 0x931a <__vector_53+0x128>
        okToEraseFile = false;
	}
	
	
	
}
    973e:	0f 90       	pop	r0
    9740:	0f 90       	pop	r0
    9742:	cf 91       	pop	r28
    9744:	df 91       	pop	r29
    9746:	ff 91       	pop	r31
    9748:	ef 91       	pop	r30
    974a:	bf 91       	pop	r27
    974c:	af 91       	pop	r26
    974e:	9f 91       	pop	r25
    9750:	8f 91       	pop	r24
    9752:	7f 91       	pop	r23
    9754:	6f 91       	pop	r22
    9756:	5f 91       	pop	r21
    9758:	4f 91       	pop	r20
    975a:	3f 91       	pop	r19
    975c:	2f 91       	pop	r18
    975e:	1f 91       	pop	r17
    9760:	0f 91       	pop	r16
    9762:	ff 90       	pop	r15
    9764:	ef 90       	pop	r14
    9766:	df 90       	pop	r13
    9768:	0f 90       	pop	r0
    976a:	0b be       	out	0x3b, r0	; 59
    976c:	0f 90       	pop	r0
    976e:	0f be       	out	0x3f, r0	; 63
    9770:	0f 90       	pop	r0
    9772:	1f 90       	pop	r1
    9774:	18 95       	reti

00009776 <SD_Read_config_file>:
	fileName[0] = '/';
	ltoa(var, fileName+1, 16);
	strcat(fileName, ".bt");
}

void SD_Read_config_file(void){
    9776:	af 92       	push	r10
    9778:	bf 92       	push	r11
    977a:	cf 92       	push	r12
    977c:	df 92       	push	r13
    977e:	ef 92       	push	r14
    9780:	ff 92       	push	r15
    9782:	0f 93       	push	r16
    9784:	1f 93       	push	r17
    9786:	df 93       	push	r29
    9788:	cf 93       	push	r28
    978a:	cd b7       	in	r28, 0x3d	; 61
    978c:	de b7       	in	r29, 0x3e	; 62
    978e:	e2 97       	sbiw	r28, 0x32	; 50
    9790:	cd bf       	out	0x3d, r28	; 61
    9792:	de bf       	out	0x3e, r29	; 62
	char temp [50];
	
	SD_Open("/config.txt");
    9794:	8b ea       	ldi	r24, 0xAB	; 171
    9796:	95 e2       	ldi	r25, 0x25	; 37
    9798:	0e 94 eb 47 	call	0x8fd6	; 0x8fd6 <SD_Open>
    f_lseek(&Log_File, 0);
    979c:	8d e9       	ldi	r24, 0x9D	; 157
    979e:	90 e5       	ldi	r25, 0x50	; 80
    97a0:	40 e0       	ldi	r20, 0x00	; 0
    97a2:	50 e0       	ldi	r21, 0x00	; 0
    97a4:	60 e0       	ldi	r22, 0x00	; 0
    97a6:	70 e0       	ldi	r23, 0x00	; 0
    97a8:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <f_lseek>
	
	while(true){
        f_gets(temp,50,&Log_File);
    97ac:	8e 01       	movw	r16, r28
    97ae:	0f 5f       	subi	r16, 0xFF	; 255
    97b0:	1f 4f       	sbci	r17, 0xFF	; 255
            } else if(strstr(temp,"recordFast") != 0){
                strtok(temp,"=");
                strcpy(fastString,strtok(NULL,"="));
            } else if(strstr(temp,"zone") != 0){
				strtok(temp,"=");
                memmove(zone,strtok(NULL,"="),4);
    97b2:	80 e6       	ldi	r24, 0x60	; 96
    97b4:	e8 2e       	mov	r14, r24
    97b6:	86 e2       	ldi	r24, 0x26	; 38
    97b8:	f8 2e       	mov	r15, r24
                        break;
                    }
                }
            } else if(strstr(temp,"nickname") != 0){
                strtok(temp,"=");
	            strcpy(nickname,strtok(NULL,"="));
    97ba:	b7 eb       	ldi	r27, 0xB7	; 183
    97bc:	cb 2e       	mov	r12, r27
    97be:	b6 e5       	ldi	r27, 0x56	; 86
    97c0:	db 2e       	mov	r13, r27
				strtok(temp,"=");
                strcpy(auth,strtok(NULL,"="));
				authRead = true;
            } else if(strstr(temp,"user") != 0){
                strtok(temp,"=");
                strcpy(user,strtok(NULL,"="));
    97c2:	a2 ea       	ldi	r26, 0xA2	; 162
    97c4:	aa 2e       	mov	r10, r26
    97c6:	a7 e3       	ldi	r26, 0x37	; 55
    97c8:	ba 2e       	mov	r11, r26
	
	SD_Open("/config.txt");
    f_lseek(&Log_File, 0);
	
	while(true){
        f_gets(temp,50,&Log_File);
    97ca:	c8 01       	movw	r24, r16
    97cc:	62 e3       	ldi	r22, 0x32	; 50
    97ce:	70 e0       	ldi	r23, 0x00	; 0
    97d0:	4d e9       	ldi	r20, 0x9D	; 157
    97d2:	50 e5       	ldi	r21, 0x50	; 80
    97d4:	0e 94 04 2c 	call	0x5808	; 0x5808 <f_gets>
        if(temp[0] != 0){
    97d8:	89 81       	ldd	r24, Y+1	; 0x01
    97da:	88 23       	and	r24, r24
    97dc:	09 f4       	brne	.+2      	; 0x97e0 <SD_Read_config_file+0x6a>
    97de:	96 c1       	rjmp	.+812    	; 0x9b0c <SD_Read_config_file+0x396>
            if(strstr(temp,"ssid") != 0){
    97e0:	c8 01       	movw	r24, r16
    97e2:	67 eb       	ldi	r22, 0xB7	; 183
    97e4:	75 e2       	ldi	r23, 0x25	; 37
    97e6:	0e 94 4d 51 	call	0xa29a	; 0xa29a <strstr>
    97ea:	00 97       	sbiw	r24, 0x00	; 0
    97ec:	a1 f0       	breq	.+40     	; 0x9816 <SD_Read_config_file+0xa0>
                strtok(temp,"=");
    97ee:	c8 01       	movw	r24, r16
    97f0:	6c eb       	ldi	r22, 0xBC	; 188
    97f2:	75 e2       	ldi	r23, 0x25	; 37
    97f4:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
                strcpy(ssid,strtok(NULL,"="));
    97f8:	80 e0       	ldi	r24, 0x00	; 0
    97fa:	90 e0       	ldi	r25, 0x00	; 0
    97fc:	6c eb       	ldi	r22, 0xBC	; 188
    97fe:	75 e2       	ldi	r23, 0x25	; 37
    9800:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
    9804:	bc 01       	movw	r22, r24
    9806:	84 ec       	ldi	r24, 0xC4	; 196
    9808:	91 e3       	ldi	r25, 0x31	; 49
    980a:	0e 94 46 51 	call	0xa28c	; 0xa28c <strcpy>
                ssidRead = true;
    980e:	81 e0       	ldi	r24, 0x01	; 1
    9810:	80 93 12 2d 	sts	0x2D12, r24
    9814:	da cf       	rjmp	.-76     	; 0x97ca <SD_Read_config_file+0x54>
            } else if(strstr(temp,"phrase") != 0){
    9816:	c8 01       	movw	r24, r16
    9818:	6e eb       	ldi	r22, 0xBE	; 190
    981a:	75 e2       	ldi	r23, 0x25	; 37
    981c:	0e 94 4d 51 	call	0xa29a	; 0xa29a <strstr>
    9820:	00 97       	sbiw	r24, 0x00	; 0
    9822:	a1 f0       	breq	.+40     	; 0x984c <SD_Read_config_file+0xd6>
                strtok(temp,"=");
    9824:	c8 01       	movw	r24, r16
    9826:	6c eb       	ldi	r22, 0xBC	; 188
    9828:	75 e2       	ldi	r23, 0x25	; 37
    982a:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
                strcpy(phrase,strtok(NULL,"="));
    982e:	80 e0       	ldi	r24, 0x00	; 0
    9830:	90 e0       	ldi	r25, 0x00	; 0
    9832:	6c eb       	ldi	r22, 0xBC	; 188
    9834:	75 e2       	ldi	r23, 0x25	; 37
    9836:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
    983a:	bc 01       	movw	r22, r24
    983c:	8c ec       	ldi	r24, 0xCC	; 204
    983e:	9f e4       	ldi	r25, 0x4F	; 79
    9840:	0e 94 46 51 	call	0xa28c	; 0xa28c <strcpy>
                phraseRead = true;
    9844:	81 e0       	ldi	r24, 0x01	; 1
    9846:	80 93 10 2d 	sts	0x2D10, r24
    984a:	bf cf       	rjmp	.-130    	; 0x97ca <SD_Read_config_file+0x54>
            } else if(strstr(temp,"key") != 0){
    984c:	c8 01       	movw	r24, r16
    984e:	65 ec       	ldi	r22, 0xC5	; 197
    9850:	75 e2       	ldi	r23, 0x25	; 37
    9852:	0e 94 4d 51 	call	0xa29a	; 0xa29a <strstr>
    9856:	00 97       	sbiw	r24, 0x00	; 0
    9858:	a1 f0       	breq	.+40     	; 0x9882 <SD_Read_config_file+0x10c>
                strtok(temp,"=");
    985a:	c8 01       	movw	r24, r16
    985c:	6c eb       	ldi	r22, 0xBC	; 188
    985e:	75 e2       	ldi	r23, 0x25	; 37
    9860:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
                strcpy(key,strtok(NULL,"="));
    9864:	80 e0       	ldi	r24, 0x00	; 0
    9866:	90 e0       	ldi	r25, 0x00	; 0
    9868:	6c eb       	ldi	r22, 0xBC	; 188
    986a:	75 e2       	ldi	r23, 0x25	; 37
    986c:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
    9870:	bc 01       	movw	r22, r24
    9872:	8b e6       	ldi	r24, 0x6B	; 107
    9874:	90 e5       	ldi	r25, 0x50	; 80
    9876:	0e 94 46 51 	call	0xa28c	; 0xa28c <strcpy>
                keyRead = true;
    987a:	81 e0       	ldi	r24, 0x01	; 1
    987c:	80 93 11 2d 	sts	0x2D11, r24
    9880:	a4 cf       	rjmp	.-184    	; 0x97ca <SD_Read_config_file+0x54>
            } else if(strstr(temp,"port") != 0){
    9882:	c8 01       	movw	r24, r16
    9884:	69 ec       	ldi	r22, 0xC9	; 201
    9886:	75 e2       	ldi	r23, 0x25	; 37
    9888:	0e 94 4d 51 	call	0xa29a	; 0xa29a <strstr>
    988c:	00 97       	sbiw	r24, 0x00	; 0
    988e:	79 f0       	breq	.+30     	; 0x98ae <SD_Read_config_file+0x138>
                strtok(temp,"=");
    9890:	c8 01       	movw	r24, r16
    9892:	6c eb       	ldi	r22, 0xBC	; 188
    9894:	75 e2       	ldi	r23, 0x25	; 37
    9896:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
				strcpy(port,strtok(NULL,"="));
    989a:	80 e0       	ldi	r24, 0x00	; 0
    989c:	90 e0       	ldi	r25, 0x00	; 0
    989e:	6c eb       	ldi	r22, 0xBC	; 188
    98a0:	75 e2       	ldi	r23, 0x25	; 37
    98a2:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
    98a6:	bc 01       	movw	r22, r24
    98a8:	85 e8       	ldi	r24, 0x85	; 133
    98aa:	96 e5       	ldi	r25, 0x56	; 86
    98ac:	8c c0       	rjmp	.+280    	; 0x99c6 <SD_Read_config_file+0x250>
            } else if(strstr(temp,"auth") != 0){
    98ae:	c8 01       	movw	r24, r16
    98b0:	6e ec       	ldi	r22, 0xCE	; 206
    98b2:	75 e2       	ldi	r23, 0x25	; 37
    98b4:	0e 94 4d 51 	call	0xa29a	; 0xa29a <strstr>
    98b8:	00 97       	sbiw	r24, 0x00	; 0
    98ba:	a1 f0       	breq	.+40     	; 0x98e4 <SD_Read_config_file+0x16e>
				strtok(temp,"=");
    98bc:	c8 01       	movw	r24, r16
    98be:	6c eb       	ldi	r22, 0xBC	; 188
    98c0:	75 e2       	ldi	r23, 0x25	; 37
    98c2:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
                strcpy(auth,strtok(NULL,"="));
    98c6:	80 e0       	ldi	r24, 0x00	; 0
    98c8:	90 e0       	ldi	r25, 0x00	; 0
    98ca:	6c eb       	ldi	r22, 0xBC	; 188
    98cc:	75 e2       	ldi	r23, 0x25	; 37
    98ce:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
    98d2:	bc 01       	movw	r22, r24
    98d4:	8c e6       	ldi	r24, 0x6C	; 108
    98d6:	96 e3       	ldi	r25, 0x36	; 54
    98d8:	0e 94 46 51 	call	0xa28c	; 0xa28c <strcpy>
				authRead = true;
    98dc:	81 e0       	ldi	r24, 0x01	; 1
    98de:	80 93 0f 2d 	sts	0x2D0F, r24
    98e2:	73 cf       	rjmp	.-282    	; 0x97ca <SD_Read_config_file+0x54>
            } else if(strstr(temp,"user") != 0){
    98e4:	c8 01       	movw	r24, r16
    98e6:	63 ed       	ldi	r22, 0xD3	; 211
    98e8:	75 e2       	ldi	r23, 0x25	; 37
    98ea:	0e 94 4d 51 	call	0xa29a	; 0xa29a <strstr>
    98ee:	00 97       	sbiw	r24, 0x00	; 0
    98f0:	31 f1       	breq	.+76     	; 0x993e <SD_Read_config_file+0x1c8>
                strtok(temp,"=");
    98f2:	c8 01       	movw	r24, r16
    98f4:	6c eb       	ldi	r22, 0xBC	; 188
    98f6:	75 e2       	ldi	r23, 0x25	; 37
    98f8:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
                strcpy(user,strtok(NULL,"="));
    98fc:	80 e0       	ldi	r24, 0x00	; 0
    98fe:	90 e0       	ldi	r25, 0x00	; 0
    9900:	6c eb       	ldi	r22, 0xBC	; 188
    9902:	75 e2       	ldi	r23, 0x25	; 37
    9904:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
    9908:	bc 01       	movw	r22, r24
    990a:	82 ea       	ldi	r24, 0xA2	; 162
    990c:	97 e3       	ldi	r25, 0x37	; 55
    990e:	0e 94 46 51 	call	0xa28c	; 0xa28c <strcpy>
                for(uint8_t i = 0; i < strlen(user); i++){
    9912:	f5 01       	movw	r30, r10
    9914:	01 90       	ld	r0, Z+
    9916:	00 20       	and	r0, r0
    9918:	e9 f7       	brne	.-6      	; 0x9914 <SD_Read_config_file+0x19e>
    991a:	31 97       	sbiw	r30, 0x01	; 1
    991c:	e2 5a       	subi	r30, 0xA2	; 162
    991e:	f7 43       	sbci	r31, 0x37	; 55
    9920:	20 e0       	ldi	r18, 0x00	; 0
    9922:	07 c0       	rjmp	.+14     	; 0x9932 <SD_Read_config_file+0x1bc>
                    if(user[i] < ' '){
    9924:	dc 01       	movw	r26, r24
    9926:	ae 55       	subi	r26, 0x5E	; 94
    9928:	b8 4c       	sbci	r27, 0xC8	; 200
    992a:	8c 91       	ld	r24, X
    992c:	80 32       	cpi	r24, 0x20	; 32
    992e:	68 f1       	brcs	.+90     	; 0x998a <SD_Read_config_file+0x214>
                strcpy(auth,strtok(NULL,"="));
				authRead = true;
            } else if(strstr(temp,"user") != 0){
                strtok(temp,"=");
                strcpy(user,strtok(NULL,"="));
                for(uint8_t i = 0; i < strlen(user); i++){
    9930:	2f 5f       	subi	r18, 0xFF	; 255
    9932:	82 2f       	mov	r24, r18
    9934:	90 e0       	ldi	r25, 0x00	; 0
    9936:	8e 17       	cp	r24, r30
    9938:	9f 07       	cpc	r25, r31
    993a:	a0 f3       	brcs	.-24     	; 0x9924 <SD_Read_config_file+0x1ae>
    993c:	46 cf       	rjmp	.-372    	; 0x97ca <SD_Read_config_file+0x54>
                    if(user[i] < ' '){
                        user[i] = 0;
                        break;
                    }
                }
            } else if(strstr(temp,"nickname") != 0){
    993e:	c8 01       	movw	r24, r16
    9940:	68 ed       	ldi	r22, 0xD8	; 216
    9942:	75 e2       	ldi	r23, 0x25	; 37
    9944:	0e 94 4d 51 	call	0xa29a	; 0xa29a <strstr>
    9948:	00 97       	sbiw	r24, 0x00	; 0
    994a:	41 f1       	breq	.+80     	; 0x999c <SD_Read_config_file+0x226>
                strtok(temp,"=");
    994c:	c8 01       	movw	r24, r16
    994e:	6c eb       	ldi	r22, 0xBC	; 188
    9950:	75 e2       	ldi	r23, 0x25	; 37
    9952:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
	            strcpy(nickname,strtok(NULL,"="));
    9956:	80 e0       	ldi	r24, 0x00	; 0
    9958:	90 e0       	ldi	r25, 0x00	; 0
    995a:	6c eb       	ldi	r22, 0xBC	; 188
    995c:	75 e2       	ldi	r23, 0x25	; 37
    995e:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
    9962:	bc 01       	movw	r22, r24
    9964:	87 eb       	ldi	r24, 0xB7	; 183
    9966:	96 e5       	ldi	r25, 0x56	; 86
    9968:	0e 94 46 51 	call	0xa28c	; 0xa28c <strcpy>
                for(uint8_t i = 0; i < strlen(nickname); i++){
    996c:	f6 01       	movw	r30, r12
    996e:	01 90       	ld	r0, Z+
    9970:	00 20       	and	r0, r0
    9972:	e9 f7       	brne	.-6      	; 0x996e <SD_Read_config_file+0x1f8>
    9974:	31 97       	sbiw	r30, 0x01	; 1
    9976:	e7 5b       	subi	r30, 0xB7	; 183
    9978:	f6 45       	sbci	r31, 0x56	; 86
    997a:	20 e0       	ldi	r18, 0x00	; 0
    997c:	09 c0       	rjmp	.+18     	; 0x9990 <SD_Read_config_file+0x21a>
                    if(nickname[i] < ' '){
    997e:	dc 01       	movw	r26, r24
    9980:	a9 54       	subi	r26, 0x49	; 73
    9982:	b9 4a       	sbci	r27, 0xA9	; 169
    9984:	8c 91       	ld	r24, X
    9986:	80 32       	cpi	r24, 0x20	; 32
    9988:	10 f4       	brcc	.+4      	; 0x998e <SD_Read_config_file+0x218>
                        nickname[i] = 0;
    998a:	1c 92       	st	X, r1
    998c:	1e cf       	rjmp	.-452    	; 0x97ca <SD_Read_config_file+0x54>
                    }
                }
            } else if(strstr(temp,"nickname") != 0){
                strtok(temp,"=");
	            strcpy(nickname,strtok(NULL,"="));
                for(uint8_t i = 0; i < strlen(nickname); i++){
    998e:	2f 5f       	subi	r18, 0xFF	; 255
    9990:	82 2f       	mov	r24, r18
    9992:	90 e0       	ldi	r25, 0x00	; 0
    9994:	8e 17       	cp	r24, r30
    9996:	9f 07       	cpc	r25, r31
    9998:	90 f3       	brcs	.-28     	; 0x997e <SD_Read_config_file+0x208>
    999a:	17 cf       	rjmp	.-466    	; 0x97ca <SD_Read_config_file+0x54>
                        nickname[i] = 0;
                        break;
                    }
                }
				
            } else if(strstr(temp,"server") != 0){
    999c:	c8 01       	movw	r24, r16
    999e:	61 ee       	ldi	r22, 0xE1	; 225
    99a0:	75 e2       	ldi	r23, 0x25	; 37
    99a2:	0e 94 4d 51 	call	0xa29a	; 0xa29a <strstr>
    99a6:	00 97       	sbiw	r24, 0x00	; 0
    99a8:	89 f0       	breq	.+34     	; 0x99cc <SD_Read_config_file+0x256>
                strtok(temp,"=");
    99aa:	c8 01       	movw	r24, r16
    99ac:	6c eb       	ldi	r22, 0xBC	; 188
    99ae:	75 e2       	ldi	r23, 0x25	; 37
    99b0:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
                strcpy(server,strtok(NULL,"="));
    99b4:	80 e0       	ldi	r24, 0x00	; 0
    99b6:	90 e0       	ldi	r25, 0x00	; 0
    99b8:	6c eb       	ldi	r22, 0xBC	; 188
    99ba:	75 e2       	ldi	r23, 0x25	; 37
    99bc:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
    99c0:	bc 01       	movw	r22, r24
    99c2:	86 eb       	ldi	r24, 0xB6	; 182
    99c4:	97 e3       	ldi	r25, 0x37	; 55
    99c6:	0e 94 46 51 	call	0xa28c	; 0xa28c <strcpy>
    99ca:	ff ce       	rjmp	.-514    	; 0x97ca <SD_Read_config_file+0x54>
            } else if(strstr(temp,"daylightTime") != 0){
    99cc:	c8 01       	movw	r24, r16
    99ce:	68 ee       	ldi	r22, 0xE8	; 232
    99d0:	75 e2       	ldi	r23, 0x25	; 37
    99d2:	0e 94 4d 51 	call	0xa29a	; 0xa29a <strstr>
    99d6:	00 97       	sbiw	r24, 0x00	; 0
    99d8:	79 f0       	breq	.+30     	; 0x99f8 <SD_Read_config_file+0x282>
                strtok(temp,"=");
    99da:	c8 01       	movw	r24, r16
    99dc:	6c eb       	ldi	r22, 0xBC	; 188
    99de:	75 e2       	ldi	r23, 0x25	; 37
    99e0:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
                strcpy(daylightTime,strtok(NULL,"="));
    99e4:	80 e0       	ldi	r24, 0x00	; 0
    99e6:	90 e0       	ldi	r25, 0x00	; 0
    99e8:	6c eb       	ldi	r22, 0xBC	; 188
    99ea:	75 e2       	ldi	r23, 0x25	; 37
    99ec:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
    99f0:	bc 01       	movw	r22, r24
    99f2:	83 e4       	ldi	r24, 0x43	; 67
    99f4:	98 e3       	ldi	r25, 0x38	; 56
    99f6:	e7 cf       	rjmp	.-50     	; 0x99c6 <SD_Read_config_file+0x250>
            } else if(strstr(temp,"demoMode") != 0){
    99f8:	c8 01       	movw	r24, r16
    99fa:	65 ef       	ldi	r22, 0xF5	; 245
    99fc:	75 e2       	ldi	r23, 0x25	; 37
    99fe:	0e 94 4d 51 	call	0xa29a	; 0xa29a <strstr>
    9a02:	00 97       	sbiw	r24, 0x00	; 0
    9a04:	79 f0       	breq	.+30     	; 0x9a24 <SD_Read_config_file+0x2ae>
                strtok(temp,"=");
    9a06:	c8 01       	movw	r24, r16
    9a08:	6c eb       	ldi	r22, 0xBC	; 188
    9a0a:	75 e2       	ldi	r23, 0x25	; 37
    9a0c:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
                strcpy(demoModeString,strtok(NULL,"="));
    9a10:	80 e0       	ldi	r24, 0x00	; 0
    9a12:	90 e0       	ldi	r25, 0x00	; 0
    9a14:	6c eb       	ldi	r22, 0xBC	; 188
    9a16:	75 e2       	ldi	r23, 0x25	; 37
    9a18:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
    9a1c:	bc 01       	movw	r22, r24
    9a1e:	8c ea       	ldi	r24, 0xAC	; 172
    9a20:	97 e3       	ldi	r25, 0x37	; 55
    9a22:	d1 cf       	rjmp	.-94     	; 0x99c6 <SD_Read_config_file+0x250>
            } else if(strstr(temp,"recordFast") != 0){
    9a24:	c8 01       	movw	r24, r16
    9a26:	6e ef       	ldi	r22, 0xFE	; 254
    9a28:	75 e2       	ldi	r23, 0x25	; 37
    9a2a:	0e 94 4d 51 	call	0xa29a	; 0xa29a <strstr>
    9a2e:	00 97       	sbiw	r24, 0x00	; 0
    9a30:	79 f0       	breq	.+30     	; 0x9a50 <SD_Read_config_file+0x2da>
                strtok(temp,"=");
    9a32:	c8 01       	movw	r24, r16
    9a34:	6c eb       	ldi	r22, 0xBC	; 188
    9a36:	75 e2       	ldi	r23, 0x25	; 37
    9a38:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
                strcpy(fastString,strtok(NULL,"="));
    9a3c:	80 e0       	ldi	r24, 0x00	; 0
    9a3e:	90 e0       	ldi	r25, 0x00	; 0
    9a40:	6c eb       	ldi	r22, 0xBC	; 188
    9a42:	75 e2       	ldi	r23, 0x25	; 37
    9a44:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
    9a48:	bc 01       	movw	r22, r24
    9a4a:	84 e1       	ldi	r24, 0x14	; 20
    9a4c:	97 e5       	ldi	r25, 0x57	; 87
    9a4e:	bb cf       	rjmp	.-138    	; 0x99c6 <SD_Read_config_file+0x250>
            } else if(strstr(temp,"zone") != 0){
    9a50:	c8 01       	movw	r24, r16
    9a52:	69 e0       	ldi	r22, 0x09	; 9
    9a54:	76 e2       	ldi	r23, 0x26	; 38
    9a56:	0e 94 4d 51 	call	0xa29a	; 0xa29a <strstr>
    9a5a:	00 97       	sbiw	r24, 0x00	; 0
    9a5c:	09 f4       	brne	.+2      	; 0x9a60 <SD_Read_config_file+0x2ea>
    9a5e:	b5 ce       	rjmp	.-662    	; 0x97ca <SD_Read_config_file+0x54>
				strtok(temp,"=");
    9a60:	c8 01       	movw	r24, r16
    9a62:	6c eb       	ldi	r22, 0xBC	; 188
    9a64:	75 e2       	ldi	r23, 0x25	; 37
    9a66:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
                memmove(zone,strtok(NULL,"="),4);
    9a6a:	80 e0       	ldi	r24, 0x00	; 0
    9a6c:	90 e0       	ldi	r25, 0x00	; 0
    9a6e:	6c eb       	ldi	r22, 0xBC	; 188
    9a70:	75 e2       	ldi	r23, 0x25	; 37
    9a72:	0e 94 e3 50 	call	0xa1c6	; 0xa1c6 <strtok>
    9a76:	bc 01       	movw	r22, r24
    9a78:	80 e6       	ldi	r24, 0x60	; 96
    9a7a:	96 e2       	ldi	r25, 0x26	; 38
    9a7c:	44 e0       	ldi	r20, 0x04	; 4
    9a7e:	50 e0       	ldi	r21, 0x00	; 0
    9a80:	0e 94 e8 50 	call	0xa1d0	; 0xa1d0 <memmove>
    9a84:	20 e0       	ldi	r18, 0x00	; 0
    9a86:	08 c0       	rjmp	.+16     	; 0x9a98 <SD_Read_config_file+0x322>
                for(uint8_t i = 0;  i < strlen(zone); i++){
                    if(zone[i] < ' '){
    9a88:	fc 01       	movw	r30, r24
    9a8a:	e0 5a       	subi	r30, 0xA0	; 160
    9a8c:	f9 4d       	sbci	r31, 0xD9	; 217
    9a8e:	80 81       	ld	r24, Z
    9a90:	80 32       	cpi	r24, 0x20	; 32
    9a92:	08 f4       	brcc	.+2      	; 0x9a96 <SD_Read_config_file+0x320>
                        zone[i] = 0;
    9a94:	10 82       	st	Z, r1
                strtok(temp,"=");
                strcpy(fastString,strtok(NULL,"="));
            } else if(strstr(temp,"zone") != 0){
				strtok(temp,"=");
                memmove(zone,strtok(NULL,"="),4);
                for(uint8_t i = 0;  i < strlen(zone); i++){
    9a96:	2f 5f       	subi	r18, 0xFF	; 255
    9a98:	f7 01       	movw	r30, r14
    9a9a:	01 90       	ld	r0, Z+
    9a9c:	00 20       	and	r0, r0
    9a9e:	e9 f7       	brne	.-6      	; 0x9a9a <SD_Read_config_file+0x324>
    9aa0:	31 97       	sbiw	r30, 0x01	; 1
    9aa2:	e0 56       	subi	r30, 0x60	; 96
    9aa4:	f6 42       	sbci	r31, 0x26	; 38
    9aa6:	82 2f       	mov	r24, r18
    9aa8:	90 e0       	ldi	r25, 0x00	; 0
    9aaa:	8e 17       	cp	r24, r30
    9aac:	9f 07       	cpc	r25, r31
    9aae:	60 f3       	brcs	.-40     	; 0x9a88 <SD_Read_config_file+0x312>
                    if(zone[i] < ' '){
                        zone[i] = 0;
                    }
                }
                if(strcmp(zone,"EST") == 0){
    9ab0:	80 e6       	ldi	r24, 0x60	; 96
    9ab2:	96 e2       	ldi	r25, 0x26	; 38
    9ab4:	6e e0       	ldi	r22, 0x0E	; 14
    9ab6:	76 e2       	ldi	r23, 0x26	; 38
    9ab8:	0e 94 3d 51 	call	0xa27a	; 0xa27a <strcmp>
    9abc:	00 97       	sbiw	r24, 0x00	; 0
    9abe:	11 f4       	brne	.+4      	; 0x9ac4 <SD_Read_config_file+0x34e>
                    timeZoneShift = 5;
    9ac0:	85 e0       	ldi	r24, 0x05	; 5
    9ac2:	1e c0       	rjmp	.+60     	; 0x9b00 <SD_Read_config_file+0x38a>
                    zoneChanged = true;
                } else if(strcmp(zone,"CST") == 0){
    9ac4:	80 e6       	ldi	r24, 0x60	; 96
    9ac6:	96 e2       	ldi	r25, 0x26	; 38
    9ac8:	62 e1       	ldi	r22, 0x12	; 18
    9aca:	76 e2       	ldi	r23, 0x26	; 38
    9acc:	0e 94 3d 51 	call	0xa27a	; 0xa27a <strcmp>
    9ad0:	00 97       	sbiw	r24, 0x00	; 0
    9ad2:	11 f4       	brne	.+4      	; 0x9ad8 <SD_Read_config_file+0x362>
                    timeZoneShift = 6;
    9ad4:	86 e0       	ldi	r24, 0x06	; 6
    9ad6:	14 c0       	rjmp	.+40     	; 0x9b00 <SD_Read_config_file+0x38a>
                    zoneChanged = true;
                } else if(strcmp(zone,"MST") == 0){
    9ad8:	80 e6       	ldi	r24, 0x60	; 96
    9ada:	96 e2       	ldi	r25, 0x26	; 38
    9adc:	66 e1       	ldi	r22, 0x16	; 22
    9ade:	76 e2       	ldi	r23, 0x26	; 38
    9ae0:	0e 94 3d 51 	call	0xa27a	; 0xa27a <strcmp>
    9ae4:	00 97       	sbiw	r24, 0x00	; 0
    9ae6:	11 f4       	brne	.+4      	; 0x9aec <SD_Read_config_file+0x376>
                    timeZoneShift = 7;
    9ae8:	87 e0       	ldi	r24, 0x07	; 7
    9aea:	0a c0       	rjmp	.+20     	; 0x9b00 <SD_Read_config_file+0x38a>
                    zoneChanged = true;
                } else if(strcmp(zone,"PST") == 0){
    9aec:	80 e6       	ldi	r24, 0x60	; 96
    9aee:	96 e2       	ldi	r25, 0x26	; 38
    9af0:	6a e1       	ldi	r22, 0x1A	; 26
    9af2:	76 e2       	ldi	r23, 0x26	; 38
    9af4:	0e 94 3d 51 	call	0xa27a	; 0xa27a <strcmp>
    9af8:	00 97       	sbiw	r24, 0x00	; 0
    9afa:	09 f0       	breq	.+2      	; 0x9afe <SD_Read_config_file+0x388>
    9afc:	66 ce       	rjmp	.-820    	; 0x97ca <SD_Read_config_file+0x54>
                    timeZoneShift = 8;
    9afe:	88 e0       	ldi	r24, 0x08	; 8
    9b00:	80 93 0e 2d 	sts	0x2D0E, r24
                    zoneChanged = true;
    9b04:	81 e0       	ldi	r24, 0x01	; 1
    9b06:	80 93 13 2d 	sts	0x2D13, r24
    9b0a:	5f ce       	rjmp	.-834    	; 0x97ca <SD_Read_config_file+0x54>
	        }
	    } else {
	        break;
	    }
	}
    if(server[strlen(server)-1] < 32){
    9b0c:	e6 eb       	ldi	r30, 0xB6	; 182
    9b0e:	f7 e3       	ldi	r31, 0x37	; 55
    9b10:	01 90       	ld	r0, Z+
    9b12:	00 20       	and	r0, r0
    9b14:	e9 f7       	brne	.-6      	; 0x9b10 <SD_Read_config_file+0x39a>
    9b16:	32 97       	sbiw	r30, 0x02	; 2
    9b18:	80 81       	ld	r24, Z
    9b1a:	80 32       	cpi	r24, 0x20	; 32
    9b1c:	08 f4       	brcc	.+2      	; 0x9b20 <SD_Read_config_file+0x3aa>
        server[strlen(server)-1] = 0;
    9b1e:	10 82       	st	Z, r1
    }
	strcat(serverOpenCommand,server);
    9b20:	8e e2       	ldi	r24, 0x2E	; 46
    9b22:	96 e2       	ldi	r25, 0x26	; 38
    9b24:	66 eb       	ldi	r22, 0xB6	; 182
    9b26:	77 e3       	ldi	r23, 0x37	; 55
    9b28:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
	strcat(serverOpenCommand," ");
    9b2c:	8e e2       	ldi	r24, 0x2E	; 46
    9b2e:	96 e2       	ldi	r25, 0x26	; 38
    9b30:	6e e1       	ldi	r22, 0x1E	; 30
    9b32:	76 e2       	ldi	r23, 0x26	; 38
    9b34:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
	strcat(serverOpenCommand,port);
    9b38:	8e e2       	ldi	r24, 0x2E	; 46
    9b3a:	96 e2       	ldi	r25, 0x26	; 38
    9b3c:	65 e8       	ldi	r22, 0x85	; 133
    9b3e:	76 e5       	ldi	r23, 0x56	; 86
    9b40:	0e 94 32 51 	call	0xa264	; 0xa264 <strcat>
	
    if((strstr(daylightTime,"true") != 0) && (zoneChanged)){
    9b44:	83 e4       	ldi	r24, 0x43	; 67
    9b46:	98 e3       	ldi	r25, 0x38	; 56
    9b48:	60 e2       	ldi	r22, 0x20	; 32
    9b4a:	76 e2       	ldi	r23, 0x26	; 38
    9b4c:	0e 94 4d 51 	call	0xa29a	; 0xa29a <strstr>
    9b50:	00 97       	sbiw	r24, 0x00	; 0
    9b52:	49 f0       	breq	.+18     	; 0x9b66 <SD_Read_config_file+0x3f0>
    9b54:	80 91 13 2d 	lds	r24, 0x2D13
    9b58:	88 23       	and	r24, r24
    9b5a:	29 f0       	breq	.+10     	; 0x9b66 <SD_Read_config_file+0x3f0>
        timeZoneShift--;
    9b5c:	80 91 0e 2d 	lds	r24, 0x2D0E
    9b60:	81 50       	subi	r24, 0x01	; 1
    9b62:	80 93 0e 2d 	sts	0x2D0E, r24
    }
    if((strstr(demoModeString,"true") != 0)){
    9b66:	8c ea       	ldi	r24, 0xAC	; 172
    9b68:	97 e3       	ldi	r25, 0x37	; 55
    9b6a:	60 e2       	ldi	r22, 0x20	; 32
    9b6c:	76 e2       	ldi	r23, 0x26	; 38
    9b6e:	0e 94 4d 51 	call	0xa29a	; 0xa29a <strstr>
    9b72:	00 97       	sbiw	r24, 0x00	; 0
    9b74:	19 f0       	breq	.+6      	; 0x9b7c <SD_Read_config_file+0x406>
        demoMode = true;
    9b76:	81 e0       	ldi	r24, 0x01	; 1
    9b78:	80 93 fb 2c 	sts	0x2CFB, r24
    }
    if((strstr(fastString,"true") != 0)){
    9b7c:	84 e1       	ldi	r24, 0x14	; 20
    9b7e:	97 e5       	ldi	r25, 0x57	; 87
    9b80:	60 e2       	ldi	r22, 0x20	; 32
    9b82:	76 e2       	ldi	r23, 0x26	; 38
    9b84:	0e 94 4d 51 	call	0xa29a	; 0xa29a <strstr>
    9b88:	00 97       	sbiw	r24, 0x00	; 0
    9b8a:	19 f0       	breq	.+6      	; 0x9b92 <SD_Read_config_file+0x41c>
        wantToRecordFast = true;
    9b8c:	81 e0       	ldi	r24, 0x01	; 1
    9b8e:	80 93 e0 2c 	sts	0x2CE0, r24
    }
}
    9b92:	e2 96       	adiw	r28, 0x32	; 50
    9b94:	cd bf       	out	0x3d, r28	; 61
    9b96:	de bf       	out	0x3e, r29	; 62
    9b98:	cf 91       	pop	r28
    9b9a:	df 91       	pop	r29
    9b9c:	1f 91       	pop	r17
    9b9e:	0f 91       	pop	r16
    9ba0:	ff 90       	pop	r15
    9ba2:	ef 90       	pop	r14
    9ba4:	df 90       	pop	r13
    9ba6:	cf 90       	pop	r12
    9ba8:	bf 90       	pop	r11
    9baa:	af 90       	pop	r10
    9bac:	08 95       	ret

00009bae <main>:


// ********************************** Main Program *********************************


int main(void){
    9bae:	ff 92       	push	r15
    9bb0:	0f 93       	push	r16
    9bb2:	1f 93       	push	r17
    9bb4:	df 93       	push	r29
    9bb6:	cf 93       	push	r28
    9bb8:	0f 92       	push	r0
    9bba:	cd b7       	in	r28, 0x3d	; 61
    9bbc:	de b7       	in	r29, 0x3e	; 62
	Clock_Init();
    9bbe:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <Clock_Init>
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    9bc2:	8f b7       	in	r24, 0x3f	; 63
    9bc4:	89 83       	std	Y+1, r24	; 0x01
    cli();
    9bc6:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    9bc8:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    9bca:	21 e0       	ldi	r18, 0x01	; 1
    9bcc:	86 e9       	ldi	r24, 0x96	; 150
    9bce:	90 e0       	ldi	r25, 0x00	; 0
    9bd0:	fc 01       	movw	r30, r24
    9bd2:	08 ed       	ldi	r16, 0xD8	; 216
    9bd4:	04 bf       	out	0x34, r16	; 52
    9bd6:	20 83       	st	Z, r18
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
    9bd8:	89 81       	ldd	r24, Y+1	; 0x01
    9bda:	8f bf       	out	0x3f, r24	; 63
	Disable_JTAG();
	getDeviceID();
    9bdc:	0e 94 f5 3b 	call	0x77ea	; 0x77ea <getDeviceID>
	display_init();
    9be0:	0e 94 b1 2e 	call	0x5d62	; 0x5d62 <display_init>
	Time_Init();
    9be4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Time_Init>
	Sensors_Init();
    9be8:	0e 94 c4 32 	call	0x6588	; 0x6588 <Sensors_Init>
	Debug_Init(460800);
    9bec:	60 e0       	ldi	r22, 0x00	; 0
    9bee:	78 e0       	ldi	r23, 0x08	; 8
    9bf0:	87 e0       	ldi	r24, 0x07	; 7
    9bf2:	90 e0       	ldi	r25, 0x00	; 0
    9bf4:	0e 94 84 01 	call	0x308	; 0x308 <Debug_Init>
	Button_Init(Button_Pin,true,falling,0,high);
    9bf8:	81 e0       	ldi	r24, 0x01	; 1
    9bfa:	61 e0       	ldi	r22, 0x01	; 1
    9bfc:	42 e0       	ldi	r20, 0x02	; 2
    9bfe:	20 e0       	ldi	r18, 0x00	; 0
    9c00:	03 e0       	ldi	r16, 0x03	; 3
    9c02:	0e 94 72 31 	call	0x62e4	; 0x62e4 <Button_Init>
	Button_Init(Switch_Pin,true,both,1,high);
    9c06:	82 e0       	ldi	r24, 0x02	; 2
    9c08:	61 e0       	ldi	r22, 0x01	; 1
    9c0a:	40 e0       	ldi	r20, 0x00	; 0
    9c0c:	21 e0       	ldi	r18, 0x01	; 1
    9c0e:	0e 94 72 31 	call	0x62e4	; 0x62e4 <Button_Init>
	Rs232_Init();
    9c12:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Rs232_Init>
	Light_Init(LightAddress);
    9c16:	82 e7       	ldi	r24, 0x72	; 114
    9c18:	0e 94 61 31 	call	0x62c2	; 0x62c2 <Light_Init>
	Display_BackgroundWriter_Init();
    9c1c:	0e 94 8b 3b 	call	0x7716	; 0x7716 <Display_BackgroundWriter_Init>
	SD_BackroundWriter_Init();
    9c20:	0e 94 9a 3b 	call	0x7734	; 0x7734 <SD_BackroundWriter_Init>
    SD_Init();
    9c24:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <SD_Init>
}


void Interrupt_Init(void)
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;	// enable low level interrupts
    9c28:	80 91 a2 00 	lds	r24, 0x00A2
    9c2c:	87 60       	ori	r24, 0x07	; 7
    9c2e:	e0 ea       	ldi	r30, 0xA0	; 160
    9c30:	f0 e0       	ldi	r31, 0x00	; 0
    9c32:	82 83       	std	Z+2, r24	; 0x02
	sei();							// enable all interrupts
    9c34:	78 94       	sei
	SD_BackroundWriter_Init();
    SD_Init();
	Interrupt_Init();
	
	
	if(Time_CheckVBatSystem() && (Time_Get() > 1000000)){				// grab time from rtc32 if enabled and valid
    9c36:	0e 94 59 03 	call	0x6b2	; 0x6b2 <Time_CheckVBatSystem>
    9c3a:	88 23       	and	r24, r24
    9c3c:	d1 f1       	breq	.+116    	; 0x9cb2 <main+0x104>
	return true;
}

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
    9c3e:	80 91 21 04 	lds	r24, 0x0421
    9c42:	80 61       	ori	r24, 0x10	; 16
    9c44:	e0 e2       	ldi	r30, 0x20	; 32
    9c46:	f4 e0       	ldi	r31, 0x04	; 4
    9c48:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
    9c4a:	e0 e2       	ldi	r30, 0x20	; 32
    9c4c:	f4 e0       	ldi	r31, 0x04	; 4
    9c4e:	80 91 21 04 	lds	r24, 0x0421
    9c52:	84 fd       	sbrc	r24, 4
    9c54:	fa cf       	rjmp	.-12     	; 0x9c4a <main+0x9c>
	return RTC32.CNT;
    9c56:	80 91 24 04 	lds	r24, 0x0424
    9c5a:	90 91 25 04 	lds	r25, 0x0425
    9c5e:	a0 91 26 04 	lds	r26, 0x0426
    9c62:	b0 91 27 04 	lds	r27, 0x0427
    9c66:	81 54       	subi	r24, 0x41	; 65
    9c68:	92 44       	sbci	r25, 0x42	; 66
    9c6a:	af 40       	sbci	r26, 0x0F	; 15
    9c6c:	b0 40       	sbci	r27, 0x00	; 0
    9c6e:	08 f1       	brcs	.+66     	; 0x9cb2 <main+0x104>
		timeIsValid = true;
    9c70:	81 e0       	ldi	r24, 0x01	; 1
    9c72:	80 93 4c 2d 	sts	0x2D4C, r24
		RTC32.INTCTRL = ( RTC32.INTCTRL & ~RTC32_COMPINTLVL_gm ) | RTC32_COMPINTLVL_LO_gc;
    9c76:	80 91 22 04 	lds	r24, 0x0422
    9c7a:	83 7f       	andi	r24, 0xF3	; 243
    9c7c:	84 60       	ori	r24, 0x04	; 4
    9c7e:	82 83       	std	Z+2, r24	; 0x02
	return true;
}

uint32_t Time_Get(void){
	//cli();
	RTC32.SYNCCTRL |= RTC32_SYNCCNT_bm;
    9c80:	80 91 21 04 	lds	r24, 0x0421
    9c84:	80 61       	ori	r24, 0x10	; 16
    9c86:	81 83       	std	Z+1, r24	; 0x01
	while ( RTC32.SYNCCTRL & RTC32_SYNCCNT_bm );
    9c88:	80 91 21 04 	lds	r24, 0x0421
    9c8c:	84 fd       	sbrc	r24, 4
    9c8e:	fc cf       	rjmp	.-8      	; 0x9c88 <main+0xda>
	return RTC32.CNT;
    9c90:	80 91 24 04 	lds	r24, 0x0424
    9c94:	90 91 25 04 	lds	r25, 0x0425
    9c98:	a0 91 26 04 	lds	r26, 0x0426
    9c9c:	b0 91 27 04 	lds	r27, 0x0427
		UNIX_Time = Time_Get();
    9ca0:	80 93 0a 2d 	sts	0x2D0A, r24
    9ca4:	90 93 0b 2d 	sts	0x2D0B, r25
    9ca8:	a0 93 0c 2d 	sts	0x2D0C, r26
    9cac:	b0 93 0d 2d 	sts	0x2D0D, r27
    9cb0:	15 c0       	rjmp	.+42     	; 0x9cdc <main+0x12e>
	} else {
		VBAT.CTRL = VBAT_ACCEN_bm;
    9cb2:	82 e0       	ldi	r24, 0x02	; 2
    9cb4:	80 93 f0 00 	sts	0x00F0, r24
bool useWifiForUploading = false;

// From Application Note AVR1003
// Used to slow down clock in disk_initialize()
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    uint8_t volatile saved_sreg = SREG;
    9cb8:	8f b7       	in	r24, 0x3f	; 63
    9cba:	89 83       	std	Y+1, r24	; 0x01
    cli();
    9cbc:	f8 94       	cli
#endif /* __MEMORY_MODEL__ */
	
#elif defined __GNUC__
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    9cbe:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    9cc0:	21 e0       	ldi	r18, 0x01	; 1
    9cc2:	80 ef       	ldi	r24, 0xF0	; 240
    9cc4:	90 e0       	ldi	r25, 0x00	; 0
    9cc6:	fc 01       	movw	r30, r24
    9cc8:	08 ed       	ldi	r16, 0xD8	; 216
    9cca:	04 bf       	out	0x34, r16	; 52
    9ccc:	20 83       	st	Z, r18
				 : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
				 : "r16", "r30", "r31"
				 );
	
#endif
	SREG = saved_sreg;
    9cce:	89 81       	ldd	r24, Y+1	; 0x01
    9cd0:	8f bf       	out	0x3f, r24	; 63
		CCPWrite(&VBAT.CTRL, VBAT_RESET_bm);		// Reset battery backup
		RTC32.CTRL = 0;								// disable RTC32
    9cd2:	10 92 20 04 	sts	0x0420, r1
		RTC32.INTCTRL = 0;
    9cd6:	e0 e2       	ldi	r30, 0x20	; 32
    9cd8:	f4 e0       	ldi	r31, 0x04	; 4
    9cda:	12 82       	std	Z+2, r1	; 0x02
	
	}
	
	display_showSplashScreen(false,false,false);
    9cdc:	80 e0       	ldi	r24, 0x00	; 0
    9cde:	60 e0       	ldi	r22, 0x00	; 0
    9ce0:	40 e0       	ldi	r20, 0x00	; 0
    9ce2:	0e 94 e1 3c 	call	0x79c2	; 0x79c2 <display_showSplashScreen>
    9ce6:	88 e8       	ldi	r24, 0x88	; 136
    9ce8:	93 e1       	ldi	r25, 0x13	; 19
    9cea:	20 e7       	ldi	r18, 0x70	; 112
    9cec:	31 e0       	ldi	r19, 0x01	; 1
    9cee:	f9 01       	movw	r30, r18
    9cf0:	31 97       	sbiw	r30, 0x01	; 1
    9cf2:	f1 f7       	brne	.-4      	; 0x9cf0 <main+0x142>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9cf4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9cf6:	d9 f7       	brne	.-10     	; 0x9cee <main+0x140>
    9cf8:	0f c0       	rjmp	.+30     	; 0x9d18 <main+0x16a>
	_delay_ms(500);
	
	while(!SD_Inserted()){
		SD_Init();
    9cfa:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <SD_Init>
		display_showSplashScreen(true,false,false);			// waiting for SD card
    9cfe:	81 e0       	ldi	r24, 0x01	; 1
    9d00:	60 e0       	ldi	r22, 0x00	; 0
    9d02:	40 e0       	ldi	r20, 0x00	; 0
    9d04:	0e 94 e1 3c 	call	0x79c2	; 0x79c2 <display_showSplashScreen>
    9d08:	84 ec       	ldi	r24, 0xC4	; 196
    9d0a:	99 e0       	ldi	r25, 0x09	; 9
    9d0c:	f8 01       	movw	r30, r16
    9d0e:	31 97       	sbiw	r30, 0x01	; 1
    9d10:	f1 f7       	brne	.-4      	; 0x9d0e <main+0x160>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9d12:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9d14:	d9 f7       	brne	.-10     	; 0x9d0c <main+0x15e>
    9d16:	02 c0       	rjmp	.+4      	; 0x9d1c <main+0x16e>
    9d18:	00 e7       	ldi	r16, 0x70	; 112
    9d1a:	11 e0       	ldi	r17, 0x01	; 1
void SD_Close(void){
	f_close(&Log_File);
}

bool SD_Inserted(void){
	return sdValid;
    9d1c:	80 91 14 2d 	lds	r24, 0x2D14
	}
	
	display_showSplashScreen(false,false,false);
	_delay_ms(500);
	
	while(!SD_Inserted()){
    9d20:	88 23       	and	r24, r24
    9d22:	59 f3       	breq	.-42     	; 0x9cfa <main+0x14c>
    9d24:	80 e1       	ldi	r24, 0x10	; 16
    9d26:	97 e2       	ldi	r25, 0x27	; 39
    9d28:	20 e7       	ldi	r18, 0x70	; 112
    9d2a:	31 e0       	ldi	r19, 0x01	; 1
    9d2c:	f9 01       	movw	r30, r18
    9d2e:	31 97       	sbiw	r30, 0x01	; 1
    9d30:	f1 f7       	brne	.-4      	; 0x9d2e <main+0x180>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9d32:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9d34:	d9 f7       	brne	.-10     	; 0x9d2c <main+0x17e>
		SD_Init();
		display_showSplashScreen(true,false,false);			// waiting for SD card
		_delay_ms(250);
	}
	_delay_ms(1000);
	SD_Read_config_file();
    9d36:	0e 94 bb 4b 	call	0x9776	; 0x9776 <SD_Read_config_file>

    if(demoMode){
    9d3a:	80 91 fb 2c 	lds	r24, 0x2CFB
    9d3e:	88 23       	and	r24, r24
    9d40:	89 f0       	breq	.+34     	; 0x9d64 <main+0x1b6>
		display_showSplashScreen(false,false,true);
    9d42:	80 e0       	ldi	r24, 0x00	; 0
    9d44:	60 e0       	ldi	r22, 0x00	; 0
    9d46:	41 e0       	ldi	r20, 0x01	; 1
    9d48:	0e 94 e1 3c 	call	0x79c2	; 0x79c2 <display_showSplashScreen>
    9d4c:	80 e1       	ldi	r24, 0x10	; 16
    9d4e:	97 e2       	ldi	r25, 0x27	; 39
    9d50:	20 e7       	ldi	r18, 0x70	; 112
    9d52:	31 e0       	ldi	r19, 0x01	; 1
    9d54:	f9 01       	movw	r30, r18
    9d56:	31 97       	sbiw	r30, 0x01	; 1
    9d58:	f1 f7       	brne	.-4      	; 0x9d56 <main+0x1a8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9d5a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9d5c:	d9 f7       	brne	.-10     	; 0x9d54 <main+0x1a6>
		_delay_ms(1000);
		display_clearScreen();
    9d5e:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <display_clearScreen>
    9d62:	ff cf       	rjmp	.-2      	; 0x9d62 <main+0x1b4>
    9d64:	00 e7       	ldi	r16, 0x70	; 112
    9d66:	11 e0       	ldi	r17, 0x01	; 1
	}
	
Reset:
	uploadPercentBS = 0;
	_delay_ms(500);
	okToDisplayGUI = true;
    9d68:	ff 24       	eor	r15, r15
    9d6a:	f3 94       	inc	r15
		display_clearScreen();
		while(true);
	}
	
Reset:
	uploadPercentBS = 0;
    9d6c:	10 92 36 2d 	sts	0x2D36, r1
    9d70:	88 e8       	ldi	r24, 0x88	; 136
    9d72:	93 e1       	ldi	r25, 0x13	; 19
    9d74:	f8 01       	movw	r30, r16
    9d76:	31 97       	sbiw	r30, 0x01	; 1
    9d78:	f1 f7       	brne	.-4      	; 0x9d76 <main+0x1c8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9d7a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9d7c:	d9 f7       	brne	.-10     	; 0x9d74 <main+0x1c6>
	_delay_ms(500);
	okToDisplayGUI = true;
    9d7e:	f0 92 52 2d 	sts	0x2D52, r15
    9d82:	88 ee       	ldi	r24, 0xE8	; 232
    9d84:	93 e0       	ldi	r25, 0x03	; 3
    9d86:	f8 01       	movw	r30, r16
    9d88:	31 97       	sbiw	r30, 0x01	; 1
    9d8a:	f1 f7       	brne	.-4      	; 0x9d88 <main+0x1da>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9d8c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9d8e:	d9 f7       	brne	.-10     	; 0x9d86 <main+0x1d8>
	_delay_ms(100);	
	
	okToGetRemainingSpace = true;
    9d90:	f0 92 5a 38 	sts	0x385A, r15
	while(okToGetRemainingSpace);
    9d94:	80 91 5a 38 	lds	r24, 0x385A
    9d98:	88 23       	and	r24, r24
    9d9a:	e1 f7       	brne	.-8      	; 0x9d94 <main+0x1e6>
    9d9c:	80 91 a8 06 	lds	r24, 0x06A8
    9da0:	82 fd       	sbrc	r24, 2
    9da2:	17 c0       	rjmp	.+46     	; 0x9dd2 <main+0x224>
    9da4:	23 c0       	rjmp	.+70     	; 0x9dec <main+0x23e>
	if(Button_Pressed(Switch_Pin) && timeIsValid){		// start recording
		if(percentDiskUsed < 950){
    9da6:	80 91 15 2d 	lds	r24, 0x2D15
    9daa:	90 91 16 2d 	lds	r25, 0x2D16
    9dae:	a0 91 17 2d 	lds	r26, 0x2D17
    9db2:	b0 91 18 2d 	lds	r27, 0x2D18
    9db6:	86 5b       	subi	r24, 0xB6	; 182
    9db8:	93 40       	sbci	r25, 0x03	; 3
    9dba:	a0 40       	sbci	r26, 0x00	; 0
    9dbc:	b0 40       	sbci	r27, 0x00	; 0
    9dbe:	48 f4       	brcc	.+18     	; 0x9dd2 <main+0x224>
			okToOpenLogFile = true;
    9dc0:	f0 92 4f 2d 	sts	0x2D4F, r15
    9dc4:	84 ec       	ldi	r24, 0xC4	; 196
    9dc6:	99 e0       	ldi	r25, 0x09	; 9
    9dc8:	f8 01       	movw	r30, r16
    9dca:	31 97       	sbiw	r30, 0x01	; 1
    9dcc:	f1 f7       	brne	.-4      	; 0x9dca <main+0x21c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9dce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9dd0:	d9 f7       	brne	.-10     	; 0x9dc8 <main+0x21a>
			_delay_ms(250);
		}
	}
	
	connected = false;
    9dd2:	10 92 3f 2d 	sts	0x2D3F, r1
	while(!Uploader_connectToComputer());
    9dd6:	0e 94 96 41 	call	0x832c	; 0x832c <Uploader_connectToComputer>
    9dda:	88 23       	and	r24, r24
    9ddc:	e1 f3       	breq	.-8      	; 0x9dd6 <main+0x228>
	connected = true;
    9dde:	f0 92 3f 2d 	sts	0x2D3F, r15
    
	 while(true){
		if(!Uploader_Update()){
    9de2:	0e 94 48 47 	call	0x8e90	; 0x8e90 <Uploader_Update>
    9de6:	88 23       	and	r24, r24
    9de8:	e1 f7       	brne	.-8      	; 0x9de2 <main+0x234>
    9dea:	c0 cf       	rjmp	.-128    	; 0x9d6c <main+0x1be>
	okToDisplayGUI = true;
	_delay_ms(100);	
	
	okToGetRemainingSpace = true;
	while(okToGetRemainingSpace);
	if(Button_Pressed(Switch_Pin) && timeIsValid){		// start recording
    9dec:	80 91 4c 2d 	lds	r24, 0x2D4C
    9df0:	88 23       	and	r24, r24
    9df2:	c9 f6       	brne	.-78     	; 0x9da6 <main+0x1f8>
    9df4:	ee cf       	rjmp	.-36     	; 0x9dd2 <main+0x224>

00009df6 <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const char* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    9df6:	2f 92       	push	r2
    9df8:	3f 92       	push	r3
    9dfa:	4f 92       	push	r4
    9dfc:	5f 92       	push	r5
    9dfe:	6f 92       	push	r6
    9e00:	7f 92       	push	r7
    9e02:	8f 92       	push	r8
    9e04:	9f 92       	push	r9
    9e06:	af 92       	push	r10
    9e08:	bf 92       	push	r11
    9e0a:	cf 92       	push	r12
    9e0c:	df 92       	push	r13
    9e0e:	ef 92       	push	r14
    9e10:	ff 92       	push	r15
    9e12:	0f 93       	push	r16
    9e14:	1f 93       	push	r17
    9e16:	df 93       	push	r29
    9e18:	cf 93       	push	r28
    9e1a:	cd b7       	in	r28, 0x3d	; 61
    9e1c:	de b7       	in	r29, 0x3e	; 62
    9e1e:	63 97       	sbiw	r28, 0x13	; 19
    9e20:	cd bf       	out	0x3d, r28	; 61
    9e22:	de bf       	out	0x3e, r29	; 62
    9e24:	6b a4       	ldd	r6, Y+43	; 0x2b
    9e26:	7c a4       	ldd	r7, Y+44	; 0x2c
    9e28:	8e 01       	movw	r16, r28
    9e2a:	03 5d       	subi	r16, 0xD3	; 211
    9e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    9e2e:	19 8a       	std	Y+17, r1	; 0x11
    9e30:	1a 8a       	std	Y+18, r1	; 0x12
    9e32:	20 e0       	ldi	r18, 0x00	; 0
    9e34:	30 e0       	ldi	r19, 0x00	; 0


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    9e36:	d3 01       	movw	r26, r6
    9e38:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    9e3a:	88 23       	and	r24, r24
    9e3c:	09 f4       	brne	.+2      	; 0x9e40 <f_printf+0x4a>
    9e3e:	17 c1       	rjmp	.+558    	; 0xa06e <f_printf+0x278>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    9e40:	08 94       	sec
    9e42:	61 1c       	adc	r6, r1
    9e44:	71 1c       	adc	r7, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape cahracter */
    9e46:	85 32       	cpi	r24, 0x25	; 37
    9e48:	71 f0       	breq	.+28     	; 0x9e66 <f_printf+0x70>
			cc = f_putc(c, fil);
    9e4a:	90 e0       	ldi	r25, 0x00	; 0
    9e4c:	69 a5       	ldd	r22, Y+41	; 0x29
    9e4e:	7a a5       	ldd	r23, Y+42	; 0x2a
    9e50:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <f_putc>
    9e54:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    9e56:	bf ef       	ldi	r27, 0xFF	; 255
    9e58:	8f 3f       	cpi	r24, 0xFF	; 255
    9e5a:	9b 07       	cpc	r25, r27
    9e5c:	11 f4       	brne	.+4      	; 0x9e62 <f_printf+0x6c>
    9e5e:	48 01       	movw	r8, r16
    9e60:	fa c0       	rjmp	.+500    	; 0xa056 <f_printf+0x260>
    9e62:	48 01       	movw	r8, r16
    9e64:	4c c0       	rjmp	.+152    	; 0x9efe <f_printf+0x108>
			continue;
		}
		w = f = 0;
		c = *str++;
    9e66:	d3 01       	movw	r26, r6
    9e68:	ed 91       	ld	r30, X+
    9e6a:	3d 01       	movw	r6, r26
		if (c == '0') {				/* Flag: '0' padding */
    9e6c:	e0 33       	cpi	r30, 0x30	; 48
    9e6e:	11 f0       	breq	.+4      	; 0x9e74 <f_printf+0x7e>
    9e70:	1b 8a       	std	Y+19, r1	; 0x13
    9e72:	04 c0       	rjmp	.+8      	; 0x9e7c <f_printf+0x86>
			f = 1; c = *str++;
    9e74:	ed 91       	ld	r30, X+
    9e76:	3d 01       	movw	r6, r26
    9e78:	b1 e0       	ldi	r27, 0x01	; 1
    9e7a:	bb 8b       	std	Y+19, r27	; 0x13
    9e7c:	aa 24       	eor	r10, r10
    9e7e:	bb 24       	eor	r11, r11
    9e80:	13 c0       	rjmp	.+38     	; 0x9ea8 <f_printf+0xb2>
		}
		while (c >= '0' && c <= '9') {	/* Precision */
			w = w * 10 + (c - '0');
    9e82:	c5 01       	movw	r24, r10
    9e84:	73 e0       	ldi	r23, 0x03	; 3
    9e86:	88 0f       	add	r24, r24
    9e88:	99 1f       	adc	r25, r25
    9e8a:	7a 95       	dec	r23
    9e8c:	e1 f7       	brne	.-8      	; 0x9e86 <f_printf+0x90>
    9e8e:	aa 0c       	add	r10, r10
    9e90:	bb 1c       	adc	r11, r11
    9e92:	a8 0e       	add	r10, r24
    9e94:	b9 1e       	adc	r11, r25
    9e96:	ae 0e       	add	r10, r30
    9e98:	b1 1c       	adc	r11, r1
    9e9a:	e0 ed       	ldi	r30, 0xD0	; 208
    9e9c:	ff ef       	ldi	r31, 0xFF	; 255
    9e9e:	ae 0e       	add	r10, r30
    9ea0:	bf 1e       	adc	r11, r31
			c = *str++;
    9ea2:	d3 01       	movw	r26, r6
    9ea4:	ed 91       	ld	r30, X+
    9ea6:	3d 01       	movw	r6, r26
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (c >= '0' && c <= '9') {	/* Precision */
    9ea8:	8e 2f       	mov	r24, r30
    9eaa:	80 53       	subi	r24, 0x30	; 48
    9eac:	8a 30       	cpi	r24, 0x0A	; 10
    9eae:	48 f3       	brcs	.-46     	; 0x9e82 <f_printf+0x8c>
			w = w * 10 + (c - '0');
			c = *str++;
		}
		if (c == 'l') {				/* Prefix: Size is long int */
    9eb0:	ec 36       	cpi	r30, 0x6C	; 108
    9eb2:	31 f4       	brne	.+12     	; 0x9ec0 <f_printf+0xca>
			f |= 2; c = *str++;
    9eb4:	bb 89       	ldd	r27, Y+19	; 0x13
    9eb6:	b2 60       	ori	r27, 0x02	; 2
    9eb8:	bb 8b       	std	Y+19, r27	; 0x13
    9eba:	d3 01       	movw	r26, r6
    9ebc:	ed 91       	ld	r30, X+
    9ebe:	3d 01       	movw	r6, r26
		}
		if (c == 's') {				/* Type is string */
    9ec0:	e3 37       	cpi	r30, 0x73	; 115
    9ec2:	49 f4       	brne	.+18     	; 0x9ed6 <f_printf+0xe0>
			cc = f_puts(va_arg(arp, char*), fil);
    9ec4:	52 e0       	ldi	r21, 0x02	; 2
    9ec6:	85 2e       	mov	r8, r21
    9ec8:	91 2c       	mov	r9, r1
    9eca:	80 0e       	add	r8, r16
    9ecc:	91 1e       	adc	r9, r17
    9ece:	f8 01       	movw	r30, r16
    9ed0:	80 81       	ld	r24, Z
    9ed2:	91 81       	ldd	r25, Z+1	; 0x01
    9ed4:	bb c0       	rjmp	.+374    	; 0xa04c <f_printf+0x256>
			continue;
		}
		if (c == 'c') {				/* Type is character */
    9ed6:	e3 36       	cpi	r30, 0x63	; 99
    9ed8:	a9 f4       	brne	.+42     	; 0x9f04 <f_printf+0x10e>
			cc = f_putc(va_arg(arp, int), fil);
    9eda:	42 e0       	ldi	r20, 0x02	; 2
    9edc:	84 2e       	mov	r8, r20
    9ede:	91 2c       	mov	r9, r1
    9ee0:	80 0e       	add	r8, r16
    9ee2:	91 1e       	adc	r9, r17
    9ee4:	d8 01       	movw	r26, r16
    9ee6:	8d 91       	ld	r24, X+
    9ee8:	9c 91       	ld	r25, X
    9eea:	69 a5       	ldd	r22, Y+41	; 0x29
    9eec:	7a a5       	ldd	r23, Y+42	; 0x2a
    9eee:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <f_putc>
    9ef2:	9c 01       	movw	r18, r24
			if (cc != EOF) cc = 1;
    9ef4:	bf ef       	ldi	r27, 0xFF	; 255
    9ef6:	8f 3f       	cpi	r24, 0xFF	; 255
    9ef8:	9b 07       	cpc	r25, r27
    9efa:	09 f4       	brne	.+2      	; 0x9efe <f_printf+0x108>
    9efc:	ac c0       	rjmp	.+344    	; 0xa056 <f_printf+0x260>
    9efe:	21 e0       	ldi	r18, 0x01	; 1
    9f00:	30 e0       	ldi	r19, 0x00	; 0
    9f02:	a9 c0       	rjmp	.+338    	; 0xa056 <f_printf+0x260>
			continue;
		}
		r = 0;
		if (c == 'd') r = 10;		/* Type is signed decimal */
    9f04:	e4 36       	cpi	r30, 0x64	; 100
    9f06:	39 f0       	breq	.+14     	; 0x9f16 <f_printf+0x120>
		if (c == 'u') r = 10;		/* Type is unsigned decimal */
    9f08:	e5 37       	cpi	r30, 0x75	; 117
    9f0a:	29 f0       	breq	.+10     	; 0x9f16 <f_printf+0x120>
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
    9f0c:	e8 35       	cpi	r30, 0x58	; 88
    9f0e:	09 f0       	breq	.+2      	; 0x9f12 <f_printf+0x11c>
    9f10:	ae c0       	rjmp	.+348    	; 0xa06e <f_printf+0x278>
    9f12:	20 e1       	ldi	r18, 0x10	; 16
    9f14:	01 c0       	rjmp	.+2      	; 0x9f18 <f_printf+0x122>
    9f16:	2a e0       	ldi	r18, 0x0A	; 10
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
    9f18:	fb 89       	ldd	r31, Y+19	; 0x13
    9f1a:	f1 ff       	sbrs	r31, 1
    9f1c:	0d c0       	rjmp	.+26     	; 0x9f38 <f_printf+0x142>
			val = (ULONG)va_arg(arp, long);
    9f1e:	34 e0       	ldi	r19, 0x04	; 4
    9f20:	83 2e       	mov	r8, r19
    9f22:	91 2c       	mov	r9, r1
    9f24:	80 0e       	add	r8, r16
    9f26:	91 1e       	adc	r9, r17
    9f28:	d8 01       	movw	r26, r16
    9f2a:	ed 90       	ld	r14, X+
    9f2c:	fd 90       	ld	r15, X+
    9f2e:	0d 91       	ld	r16, X+
    9f30:	1c 91       	ld	r17, X
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
		}
		/* Put numeral string */
		if (c == 'd') {
    9f32:	e4 36       	cpi	r30, 0x64	; 100
    9f34:	09 f5       	brne	.+66     	; 0x9f78 <f_printf+0x182>
    9f36:	13 c0       	rjmp	.+38     	; 0x9f5e <f_printf+0x168>
    9f38:	c8 01       	movw	r24, r16
    9f3a:	02 96       	adiw	r24, 0x02	; 2
    9f3c:	d8 01       	movw	r26, r16
    9f3e:	6d 91       	ld	r22, X+
    9f40:	7c 91       	ld	r23, X
		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
		if (r == 0) break;			/* Unknown type */
		if (f & 2) {				/* Get the value */
			val = (ULONG)va_arg(arp, long);
		} else {
			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
    9f42:	e4 36       	cpi	r30, 0x64	; 100
    9f44:	39 f4       	brne	.+14     	; 0x9f54 <f_printf+0x15e>
    9f46:	4c 01       	movw	r8, r24
    9f48:	7b 01       	movw	r14, r22
    9f4a:	00 27       	eor	r16, r16
    9f4c:	f7 fc       	sbrc	r15, 7
    9f4e:	00 95       	com	r16
    9f50:	10 2f       	mov	r17, r16
    9f52:	05 c0       	rjmp	.+10     	; 0x9f5e <f_printf+0x168>
    9f54:	4c 01       	movw	r8, r24
    9f56:	7b 01       	movw	r14, r22
    9f58:	00 e0       	ldi	r16, 0x00	; 0
    9f5a:	10 e0       	ldi	r17, 0x00	; 0
    9f5c:	0d c0       	rjmp	.+26     	; 0x9f78 <f_printf+0x182>
		}
		/* Put numeral string */
		if (c == 'd') {
			if (val & 0x80000000) {
    9f5e:	17 ff       	sbrs	r17, 7
    9f60:	0b c0       	rjmp	.+22     	; 0x9f78 <f_printf+0x182>
				val = 0 - val;
    9f62:	10 95       	com	r17
    9f64:	00 95       	com	r16
    9f66:	f0 94       	com	r15
    9f68:	e0 94       	com	r14
    9f6a:	e1 1c       	adc	r14, r1
    9f6c:	f1 1c       	adc	r15, r1
    9f6e:	01 1d       	adc	r16, r1
    9f70:	11 1d       	adc	r17, r1
				f |= 4;
    9f72:	bb 89       	ldd	r27, Y+19	; 0x13
    9f74:	b4 60       	ori	r27, 0x04	; 4
    9f76:	bb 8b       	std	Y+19, r27	; 0x13
			}
		}
		i = sizeof(s) - 1; s[i] = 0;
    9f78:	18 8a       	std	Y+16, r1	; 0x10
    9f7a:	9f e0       	ldi	r25, 0x0F	; 15
    9f7c:	c9 2e       	mov	r12, r25
    9f7e:	d1 2c       	mov	r13, r1
		do {
			c = (UCHAR)(val % r + '0');
    9f80:	22 2e       	mov	r2, r18
    9f82:	33 24       	eor	r3, r3
    9f84:	44 24       	eor	r4, r4
    9f86:	55 24       	eor	r5, r5
    9f88:	c8 01       	movw	r24, r16
    9f8a:	b7 01       	movw	r22, r14
    9f8c:	a2 01       	movw	r20, r4
    9f8e:	91 01       	movw	r18, r2
    9f90:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    9f94:	86 2f       	mov	r24, r22
    9f96:	80 5d       	subi	r24, 0xD0	; 208
			if (c > '9') c += 7;
    9f98:	8a 33       	cpi	r24, 0x3A	; 58
    9f9a:	08 f0       	brcs	.+2      	; 0x9f9e <f_printf+0x1a8>
    9f9c:	89 5f       	subi	r24, 0xF9	; 249
			s[--i] = c;
    9f9e:	08 94       	sec
    9fa0:	c1 08       	sbc	r12, r1
    9fa2:	d1 08       	sbc	r13, r1
    9fa4:	e1 e0       	ldi	r30, 0x01	; 1
    9fa6:	f0 e0       	ldi	r31, 0x00	; 0
    9fa8:	ec 0f       	add	r30, r28
    9faa:	fd 1f       	adc	r31, r29
    9fac:	ec 0d       	add	r30, r12
    9fae:	fd 1d       	adc	r31, r13
    9fb0:	80 83       	st	Z, r24
			val /= r;
		} while (i && val);
    9fb2:	c1 14       	cp	r12, r1
    9fb4:	d1 04       	cpc	r13, r1
    9fb6:	e9 f0       	breq	.+58     	; 0x9ff2 <f_printf+0x1fc>
		i = sizeof(s) - 1; s[i] = 0;
		do {
			c = (UCHAR)(val % r + '0');
			if (c > '9') c += 7;
			s[--i] = c;
			val /= r;
    9fb8:	c8 01       	movw	r24, r16
    9fba:	b7 01       	movw	r22, r14
    9fbc:	a2 01       	movw	r20, r4
    9fbe:	91 01       	movw	r18, r2
    9fc0:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    9fc4:	c9 01       	movw	r24, r18
    9fc6:	da 01       	movw	r26, r20
    9fc8:	7c 01       	movw	r14, r24
    9fca:	8d 01       	movw	r16, r26
		} while (i && val);
    9fcc:	e1 14       	cp	r14, r1
    9fce:	f1 04       	cpc	r15, r1
    9fd0:	01 05       	cpc	r16, r1
    9fd2:	11 05       	cpc	r17, r1
    9fd4:	c9 f6       	brne	.-78     	; 0x9f88 <f_printf+0x192>
		if (i && (f & 4)) s[--i] = '-';
    9fd6:	eb 89       	ldd	r30, Y+19	; 0x13
    9fd8:	e2 ff       	sbrs	r30, 2
    9fda:	0b c0       	rjmp	.+22     	; 0x9ff2 <f_printf+0x1fc>
    9fdc:	08 94       	sec
    9fde:	c1 08       	sbc	r12, r1
    9fe0:	d1 08       	sbc	r13, r1
    9fe2:	e1 e0       	ldi	r30, 0x01	; 1
    9fe4:	f0 e0       	ldi	r31, 0x00	; 0
    9fe6:	ec 0f       	add	r30, r28
    9fe8:	fd 1f       	adc	r31, r29
    9fea:	ec 0d       	add	r30, r12
    9fec:	fd 1d       	adc	r31, r13
    9fee:	4d e2       	ldi	r20, 0x2D	; 45
    9ff0:	40 83       	st	Z, r20
		w = sizeof(s) - 1 - w;
    9ff2:	8f e0       	ldi	r24, 0x0F	; 15
    9ff4:	90 e0       	ldi	r25, 0x00	; 0
    9ff6:	8a 19       	sub	r24, r10
    9ff8:	9b 09       	sbc	r25, r11
    9ffa:	08 94       	sec
    9ffc:	c1 08       	sbc	r12, r1
    9ffe:	d1 08       	sbc	r13, r1
    a000:	e1 e0       	ldi	r30, 0x01	; 1
    a002:	f0 e0       	ldi	r31, 0x00	; 0
    a004:	ec 0f       	add	r30, r28
    a006:	fd 1f       	adc	r31, r29
    a008:	ec 0d       	add	r30, r12
    a00a:	fd 1d       	adc	r31, r13
    a00c:	08 94       	sec
    a00e:	c1 1c       	adc	r12, r1
    a010:	d1 1c       	adc	r13, r1
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
    a012:	ab 89       	ldd	r26, Y+19	; 0x13
    a014:	2a 2f       	mov	r18, r26
    a016:	30 e0       	ldi	r19, 0x00	; 0
    a018:	21 70       	andi	r18, 0x01	; 1
    a01a:	30 70       	andi	r19, 0x00	; 0
    a01c:	0b c0       	rjmp	.+22     	; 0xa034 <f_printf+0x23e>
    a01e:	08 94       	sec
    a020:	c1 08       	sbc	r12, r1
    a022:	d1 08       	sbc	r13, r1
    a024:	21 15       	cp	r18, r1
    a026:	31 05       	cpc	r19, r1
    a028:	11 f4       	brne	.+4      	; 0xa02e <f_printf+0x238>
    a02a:	40 e2       	ldi	r20, 0x20	; 32
    a02c:	01 c0       	rjmp	.+2      	; 0xa030 <f_printf+0x23a>
    a02e:	40 e3       	ldi	r20, 0x30	; 48
    a030:	40 83       	st	Z, r20
    a032:	31 97       	sbiw	r30, 0x01	; 1
    a034:	c1 14       	cp	r12, r1
    a036:	d1 04       	cpc	r13, r1
    a038:	19 f0       	breq	.+6      	; 0xa040 <f_printf+0x24a>
    a03a:	8c 15       	cp	r24, r12
    a03c:	9d 05       	cpc	r25, r13
    a03e:	7c f3       	brlt	.-34     	; 0xa01e <f_printf+0x228>
		cc = f_puts(&s[i], fil);
    a040:	81 e0       	ldi	r24, 0x01	; 1
    a042:	90 e0       	ldi	r25, 0x00	; 0
    a044:	8c 0f       	add	r24, r28
    a046:	9d 1f       	adc	r25, r29
    a048:	8c 0d       	add	r24, r12
    a04a:	9d 1d       	adc	r25, r13
    a04c:	69 a5       	ldd	r22, Y+41	; 0x29
    a04e:	7a a5       	ldd	r23, Y+42	; 0x2a
    a050:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <f_puts>
    a054:	9c 01       	movw	r18, r24
	int i, w, res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    a056:	e9 89       	ldd	r30, Y+17	; 0x11
    a058:	fa 89       	ldd	r31, Y+18	; 0x12
    a05a:	e2 0f       	add	r30, r18
    a05c:	f3 1f       	adc	r31, r19
    a05e:	e9 8b       	std	Y+17, r30	; 0x11
    a060:	fa 8b       	std	Y+18, r31	; 0x12
    a062:	ff ef       	ldi	r31, 0xFF	; 255
    a064:	2f 3f       	cpi	r18, 0xFF	; 255
    a066:	3f 07       	cpc	r19, r31
    a068:	41 f0       	breq	.+16     	; 0xa07a <f_printf+0x284>
    a06a:	84 01       	movw	r16, r8
    a06c:	e4 ce       	rjmp	.-568    	; 0x9e36 <f_printf+0x40>
		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
		cc = f_puts(&s[i], fil);
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    a06e:	4f ef       	ldi	r20, 0xFF	; 255
    a070:	2f 3f       	cpi	r18, 0xFF	; 255
    a072:	34 07       	cpc	r19, r20
    a074:	11 f0       	breq	.+4      	; 0xa07a <f_printf+0x284>
    a076:	29 89       	ldd	r18, Y+17	; 0x11
    a078:	3a 89       	ldd	r19, Y+18	; 0x12
}
    a07a:	c9 01       	movw	r24, r18
    a07c:	63 96       	adiw	r28, 0x13	; 19
    a07e:	cd bf       	out	0x3d, r28	; 61
    a080:	de bf       	out	0x3e, r29	; 62
    a082:	cf 91       	pop	r28
    a084:	df 91       	pop	r29
    a086:	1f 91       	pop	r17
    a088:	0f 91       	pop	r16
    a08a:	ff 90       	pop	r15
    a08c:	ef 90       	pop	r14
    a08e:	df 90       	pop	r13
    a090:	cf 90       	pop	r12
    a092:	bf 90       	pop	r11
    a094:	af 90       	pop	r10
    a096:	9f 90       	pop	r9
    a098:	8f 90       	pop	r8
    a09a:	7f 90       	pop	r7
    a09c:	6f 90       	pop	r6
    a09e:	5f 90       	pop	r5
    a0a0:	4f 90       	pop	r4
    a0a2:	3f 90       	pop	r3
    a0a4:	2f 90       	pop	r2
    a0a6:	08 95       	ret

0000a0a8 <__mulsi3>:
    a0a8:	62 9f       	mul	r22, r18
    a0aa:	d0 01       	movw	r26, r0
    a0ac:	73 9f       	mul	r23, r19
    a0ae:	f0 01       	movw	r30, r0
    a0b0:	82 9f       	mul	r24, r18
    a0b2:	e0 0d       	add	r30, r0
    a0b4:	f1 1d       	adc	r31, r1
    a0b6:	64 9f       	mul	r22, r20
    a0b8:	e0 0d       	add	r30, r0
    a0ba:	f1 1d       	adc	r31, r1
    a0bc:	92 9f       	mul	r25, r18
    a0be:	f0 0d       	add	r31, r0
    a0c0:	83 9f       	mul	r24, r19
    a0c2:	f0 0d       	add	r31, r0
    a0c4:	74 9f       	mul	r23, r20
    a0c6:	f0 0d       	add	r31, r0
    a0c8:	65 9f       	mul	r22, r21
    a0ca:	f0 0d       	add	r31, r0
    a0cc:	99 27       	eor	r25, r25
    a0ce:	72 9f       	mul	r23, r18
    a0d0:	b0 0d       	add	r27, r0
    a0d2:	e1 1d       	adc	r30, r1
    a0d4:	f9 1f       	adc	r31, r25
    a0d6:	63 9f       	mul	r22, r19
    a0d8:	b0 0d       	add	r27, r0
    a0da:	e1 1d       	adc	r30, r1
    a0dc:	f9 1f       	adc	r31, r25
    a0de:	bd 01       	movw	r22, r26
    a0e0:	cf 01       	movw	r24, r30
    a0e2:	11 24       	eor	r1, r1
    a0e4:	08 95       	ret

0000a0e6 <__udivmodhi4>:
    a0e6:	aa 1b       	sub	r26, r26
    a0e8:	bb 1b       	sub	r27, r27
    a0ea:	51 e1       	ldi	r21, 0x11	; 17
    a0ec:	07 c0       	rjmp	.+14     	; 0xa0fc <__udivmodhi4_ep>

0000a0ee <__udivmodhi4_loop>:
    a0ee:	aa 1f       	adc	r26, r26
    a0f0:	bb 1f       	adc	r27, r27
    a0f2:	a6 17       	cp	r26, r22
    a0f4:	b7 07       	cpc	r27, r23
    a0f6:	10 f0       	brcs	.+4      	; 0xa0fc <__udivmodhi4_ep>
    a0f8:	a6 1b       	sub	r26, r22
    a0fa:	b7 0b       	sbc	r27, r23

0000a0fc <__udivmodhi4_ep>:
    a0fc:	88 1f       	adc	r24, r24
    a0fe:	99 1f       	adc	r25, r25
    a100:	5a 95       	dec	r21
    a102:	a9 f7       	brne	.-22     	; 0xa0ee <__udivmodhi4_loop>
    a104:	80 95       	com	r24
    a106:	90 95       	com	r25
    a108:	bc 01       	movw	r22, r24
    a10a:	cd 01       	movw	r24, r26
    a10c:	08 95       	ret

0000a10e <__divmodhi4>:
    a10e:	97 fb       	bst	r25, 7
    a110:	09 2e       	mov	r0, r25
    a112:	07 26       	eor	r0, r23
    a114:	0a d0       	rcall	.+20     	; 0xa12a <__divmodhi4_neg1>
    a116:	77 fd       	sbrc	r23, 7
    a118:	04 d0       	rcall	.+8      	; 0xa122 <__divmodhi4_neg2>
    a11a:	e5 df       	rcall	.-54     	; 0xa0e6 <__udivmodhi4>
    a11c:	06 d0       	rcall	.+12     	; 0xa12a <__divmodhi4_neg1>
    a11e:	00 20       	and	r0, r0
    a120:	1a f4       	brpl	.+6      	; 0xa128 <__divmodhi4_exit>

0000a122 <__divmodhi4_neg2>:
    a122:	70 95       	com	r23
    a124:	61 95       	neg	r22
    a126:	7f 4f       	sbci	r23, 0xFF	; 255

0000a128 <__divmodhi4_exit>:
    a128:	08 95       	ret

0000a12a <__divmodhi4_neg1>:
    a12a:	f6 f7       	brtc	.-4      	; 0xa128 <__divmodhi4_exit>
    a12c:	90 95       	com	r25
    a12e:	81 95       	neg	r24
    a130:	9f 4f       	sbci	r25, 0xFF	; 255
    a132:	08 95       	ret

0000a134 <__udivmodsi4>:
    a134:	a1 e2       	ldi	r26, 0x21	; 33
    a136:	1a 2e       	mov	r1, r26
    a138:	aa 1b       	sub	r26, r26
    a13a:	bb 1b       	sub	r27, r27
    a13c:	fd 01       	movw	r30, r26
    a13e:	0d c0       	rjmp	.+26     	; 0xa15a <__udivmodsi4_ep>

0000a140 <__udivmodsi4_loop>:
    a140:	aa 1f       	adc	r26, r26
    a142:	bb 1f       	adc	r27, r27
    a144:	ee 1f       	adc	r30, r30
    a146:	ff 1f       	adc	r31, r31
    a148:	a2 17       	cp	r26, r18
    a14a:	b3 07       	cpc	r27, r19
    a14c:	e4 07       	cpc	r30, r20
    a14e:	f5 07       	cpc	r31, r21
    a150:	20 f0       	brcs	.+8      	; 0xa15a <__udivmodsi4_ep>
    a152:	a2 1b       	sub	r26, r18
    a154:	b3 0b       	sbc	r27, r19
    a156:	e4 0b       	sbc	r30, r20
    a158:	f5 0b       	sbc	r31, r21

0000a15a <__udivmodsi4_ep>:
    a15a:	66 1f       	adc	r22, r22
    a15c:	77 1f       	adc	r23, r23
    a15e:	88 1f       	adc	r24, r24
    a160:	99 1f       	adc	r25, r25
    a162:	1a 94       	dec	r1
    a164:	69 f7       	brne	.-38     	; 0xa140 <__udivmodsi4_loop>
    a166:	60 95       	com	r22
    a168:	70 95       	com	r23
    a16a:	80 95       	com	r24
    a16c:	90 95       	com	r25
    a16e:	9b 01       	movw	r18, r22
    a170:	ac 01       	movw	r20, r24
    a172:	bd 01       	movw	r22, r26
    a174:	cf 01       	movw	r24, r30
    a176:	08 95       	ret

0000a178 <atol>:
    a178:	1f 93       	push	r17
    a17a:	fc 01       	movw	r30, r24
    a17c:	99 27       	eor	r25, r25
    a17e:	88 27       	eor	r24, r24
    a180:	bc 01       	movw	r22, r24
    a182:	e8 94       	clt
    a184:	11 91       	ld	r17, Z+
    a186:	10 32       	cpi	r17, 0x20	; 32
    a188:	e9 f3       	breq	.-6      	; 0xa184 <atol+0xc>
    a18a:	19 30       	cpi	r17, 0x09	; 9
    a18c:	10 f0       	brcs	.+4      	; 0xa192 <atol+0x1a>
    a18e:	1e 30       	cpi	r17, 0x0E	; 14
    a190:	c8 f3       	brcs	.-14     	; 0xa184 <atol+0xc>
    a192:	1b 32       	cpi	r17, 0x2B	; 43
    a194:	51 f0       	breq	.+20     	; 0xa1aa <atol+0x32>
    a196:	1d 32       	cpi	r17, 0x2D	; 45
    a198:	49 f4       	brne	.+18     	; 0xa1ac <atol+0x34>
    a19a:	68 94       	set
    a19c:	06 c0       	rjmp	.+12     	; 0xa1aa <atol+0x32>
    a19e:	0e 94 ed 51 	call	0xa3da	; 0xa3da <__mulsi_const_10>
    a1a2:	61 0f       	add	r22, r17
    a1a4:	71 1d       	adc	r23, r1
    a1a6:	81 1d       	adc	r24, r1
    a1a8:	91 1d       	adc	r25, r1
    a1aa:	11 91       	ld	r17, Z+
    a1ac:	10 53       	subi	r17, 0x30	; 48
    a1ae:	1a 30       	cpi	r17, 0x0A	; 10
    a1b0:	b0 f3       	brcs	.-20     	; 0xa19e <atol+0x26>
    a1b2:	3e f4       	brtc	.+14     	; 0xa1c2 <atol+0x4a>
    a1b4:	90 95       	com	r25
    a1b6:	80 95       	com	r24
    a1b8:	70 95       	com	r23
    a1ba:	61 95       	neg	r22
    a1bc:	7f 4f       	sbci	r23, 0xFF	; 255
    a1be:	8f 4f       	sbci	r24, 0xFF	; 255
    a1c0:	9f 4f       	sbci	r25, 0xFF	; 255
    a1c2:	1f 91       	pop	r17
    a1c4:	08 95       	ret

0000a1c6 <strtok>:
    a1c6:	42 ec       	ldi	r20, 0xC2	; 194
    a1c8:	51 e3       	ldi	r21, 0x31	; 49
    a1ca:	0e 94 67 51 	call	0xa2ce	; 0xa2ce <strtok_r>
    a1ce:	08 95       	ret

0000a1d0 <memmove>:
    a1d0:	68 17       	cp	r22, r24
    a1d2:	79 07       	cpc	r23, r25
    a1d4:	68 f4       	brcc	.+26     	; 0xa1f0 <memmove+0x20>
    a1d6:	fb 01       	movw	r30, r22
    a1d8:	dc 01       	movw	r26, r24
    a1da:	e4 0f       	add	r30, r20
    a1dc:	f5 1f       	adc	r31, r21
    a1de:	a4 0f       	add	r26, r20
    a1e0:	b5 1f       	adc	r27, r21
    a1e2:	02 c0       	rjmp	.+4      	; 0xa1e8 <memmove+0x18>
    a1e4:	02 90       	ld	r0, -Z
    a1e6:	0e 92       	st	-X, r0
    a1e8:	41 50       	subi	r20, 0x01	; 1
    a1ea:	50 40       	sbci	r21, 0x00	; 0
    a1ec:	d8 f7       	brcc	.-10     	; 0xa1e4 <memmove+0x14>
    a1ee:	08 95       	ret
    a1f0:	0c 94 38 54 	jmp	0xa870	; 0xa870 <memcpy>

0000a1f4 <strcasecmp>:
    a1f4:	fb 01       	movw	r30, r22
    a1f6:	dc 01       	movw	r26, r24
    a1f8:	8d 91       	ld	r24, X+
    a1fa:	81 34       	cpi	r24, 0x41	; 65
    a1fc:	1c f0       	brlt	.+6      	; 0xa204 <strcasecmp+0x10>
    a1fe:	8b 35       	cpi	r24, 0x5B	; 91
    a200:	0c f4       	brge	.+2      	; 0xa204 <strcasecmp+0x10>
    a202:	80 5e       	subi	r24, 0xE0	; 224
    a204:	61 91       	ld	r22, Z+
    a206:	61 34       	cpi	r22, 0x41	; 65
    a208:	1c f0       	brlt	.+6      	; 0xa210 <strcasecmp+0x1c>
    a20a:	6b 35       	cpi	r22, 0x5B	; 91
    a20c:	0c f4       	brge	.+2      	; 0xa210 <strcasecmp+0x1c>
    a20e:	60 5e       	subi	r22, 0xE0	; 224
    a210:	86 1b       	sub	r24, r22
    a212:	61 11       	cpse	r22, r1
    a214:	89 f3       	breq	.-30     	; 0xa1f8 <strcasecmp+0x4>
    a216:	99 0b       	sbc	r25, r25
    a218:	08 95       	ret

0000a21a <strcasestr>:
    a21a:	fb 01       	movw	r30, r22
    a21c:	51 91       	ld	r21, Z+
    a21e:	55 23       	and	r21, r21
    a220:	b1 f0       	breq	.+44     	; 0xa24e <strcasestr+0x34>
    a222:	bf 01       	movw	r22, r30
    a224:	dc 01       	movw	r26, r24
    a226:	05 2e       	mov	r0, r21
    a228:	4d 91       	ld	r20, X+
    a22a:	44 23       	and	r20, r20
    a22c:	69 f0       	breq	.+26     	; 0xa248 <strcasestr+0x2e>
    a22e:	10 d0       	rcall	.+32     	; 0xa250 <strcasestr+0x36>
    a230:	d9 f7       	brne	.-10     	; 0xa228 <strcasestr+0xe>
    a232:	cd 01       	movw	r24, r26
    a234:	01 90       	ld	r0, Z+
    a236:	00 20       	and	r0, r0
    a238:	49 f0       	breq	.+18     	; 0xa24c <strcasestr+0x32>
    a23a:	4d 91       	ld	r20, X+
    a23c:	41 11       	cpse	r20, r1
    a23e:	08 d0       	rcall	.+16     	; 0xa250 <strcasestr+0x36>
    a240:	c9 f3       	breq	.-14     	; 0xa234 <strcasestr+0x1a>
    a242:	fb 01       	movw	r30, r22
    a244:	41 11       	cpse	r20, r1
    a246:	ee cf       	rjmp	.-36     	; 0xa224 <strcasestr+0xa>
    a248:	81 e0       	ldi	r24, 0x01	; 1
    a24a:	90 e0       	ldi	r25, 0x00	; 0
    a24c:	01 97       	sbiw	r24, 0x01	; 1
    a24e:	08 95       	ret
    a250:	40 25       	eor	r20, r0
    a252:	39 f0       	breq	.+14     	; 0xa262 <strcasestr+0x48>
    a254:	40 32       	cpi	r20, 0x20	; 32
    a256:	29 f4       	brne	.+10     	; 0xa262 <strcasestr+0x48>
    a258:	40 29       	or	r20, r0
    a25a:	4b 57       	subi	r20, 0x7B	; 123
    a25c:	46 5e       	subi	r20, 0xE6	; 230
    a25e:	08 f0       	brcs	.+2      	; 0xa262 <strcasestr+0x48>
    a260:	18 94       	sez
    a262:	08 95       	ret

0000a264 <strcat>:
    a264:	fb 01       	movw	r30, r22
    a266:	dc 01       	movw	r26, r24
    a268:	0d 90       	ld	r0, X+
    a26a:	00 20       	and	r0, r0
    a26c:	e9 f7       	brne	.-6      	; 0xa268 <strcat+0x4>
    a26e:	11 97       	sbiw	r26, 0x01	; 1
    a270:	01 90       	ld	r0, Z+
    a272:	0d 92       	st	X+, r0
    a274:	00 20       	and	r0, r0
    a276:	e1 f7       	brne	.-8      	; 0xa270 <strcat+0xc>
    a278:	08 95       	ret

0000a27a <strcmp>:
    a27a:	fb 01       	movw	r30, r22
    a27c:	dc 01       	movw	r26, r24
    a27e:	8d 91       	ld	r24, X+
    a280:	01 90       	ld	r0, Z+
    a282:	80 19       	sub	r24, r0
    a284:	01 10       	cpse	r0, r1
    a286:	d9 f3       	breq	.-10     	; 0xa27e <strcmp+0x4>
    a288:	99 0b       	sbc	r25, r25
    a28a:	08 95       	ret

0000a28c <strcpy>:
    a28c:	fb 01       	movw	r30, r22
    a28e:	dc 01       	movw	r26, r24
    a290:	01 90       	ld	r0, Z+
    a292:	0d 92       	st	X+, r0
    a294:	00 20       	and	r0, r0
    a296:	e1 f7       	brne	.-8      	; 0xa290 <strcpy+0x4>
    a298:	08 95       	ret

0000a29a <strstr>:
    a29a:	fb 01       	movw	r30, r22
    a29c:	51 91       	ld	r21, Z+
    a29e:	55 23       	and	r21, r21
    a2a0:	a9 f0       	breq	.+42     	; 0xa2cc <strstr+0x32>
    a2a2:	bf 01       	movw	r22, r30
    a2a4:	dc 01       	movw	r26, r24
    a2a6:	4d 91       	ld	r20, X+
    a2a8:	45 17       	cp	r20, r21
    a2aa:	41 11       	cpse	r20, r1
    a2ac:	e1 f7       	brne	.-8      	; 0xa2a6 <strstr+0xc>
    a2ae:	59 f4       	brne	.+22     	; 0xa2c6 <strstr+0x2c>
    a2b0:	cd 01       	movw	r24, r26
    a2b2:	01 90       	ld	r0, Z+
    a2b4:	00 20       	and	r0, r0
    a2b6:	49 f0       	breq	.+18     	; 0xa2ca <strstr+0x30>
    a2b8:	4d 91       	ld	r20, X+
    a2ba:	40 15       	cp	r20, r0
    a2bc:	41 11       	cpse	r20, r1
    a2be:	c9 f3       	breq	.-14     	; 0xa2b2 <strstr+0x18>
    a2c0:	fb 01       	movw	r30, r22
    a2c2:	41 11       	cpse	r20, r1
    a2c4:	ef cf       	rjmp	.-34     	; 0xa2a4 <strstr+0xa>
    a2c6:	81 e0       	ldi	r24, 0x01	; 1
    a2c8:	90 e0       	ldi	r25, 0x00	; 0
    a2ca:	01 97       	sbiw	r24, 0x01	; 1
    a2cc:	08 95       	ret

0000a2ce <strtok_r>:
    a2ce:	fa 01       	movw	r30, r20
    a2d0:	a1 91       	ld	r26, Z+
    a2d2:	b0 81       	ld	r27, Z
    a2d4:	00 97       	sbiw	r24, 0x00	; 0
    a2d6:	19 f4       	brne	.+6      	; 0xa2de <strtok_r+0x10>
    a2d8:	10 97       	sbiw	r26, 0x00	; 0
    a2da:	e1 f0       	breq	.+56     	; 0xa314 <strtok_r+0x46>
    a2dc:	cd 01       	movw	r24, r26
    a2de:	dc 01       	movw	r26, r24
    a2e0:	cd 01       	movw	r24, r26
    a2e2:	0d 90       	ld	r0, X+
    a2e4:	00 20       	and	r0, r0
    a2e6:	11 f4       	brne	.+4      	; 0xa2ec <strtok_r+0x1e>
    a2e8:	c0 01       	movw	r24, r0
    a2ea:	13 c0       	rjmp	.+38     	; 0xa312 <strtok_r+0x44>
    a2ec:	fb 01       	movw	r30, r22
    a2ee:	21 91       	ld	r18, Z+
    a2f0:	22 23       	and	r18, r18
    a2f2:	19 f0       	breq	.+6      	; 0xa2fa <strtok_r+0x2c>
    a2f4:	20 15       	cp	r18, r0
    a2f6:	d9 f7       	brne	.-10     	; 0xa2ee <strtok_r+0x20>
    a2f8:	f3 cf       	rjmp	.-26     	; 0xa2e0 <strtok_r+0x12>
    a2fa:	fb 01       	movw	r30, r22
    a2fc:	21 91       	ld	r18, Z+
    a2fe:	20 15       	cp	r18, r0
    a300:	19 f4       	brne	.+6      	; 0xa308 <strtok_r+0x3a>
    a302:	1e 92       	st	-X, r1
    a304:	11 96       	adiw	r26, 0x01	; 1
    a306:	06 c0       	rjmp	.+12     	; 0xa314 <strtok_r+0x46>
    a308:	22 23       	and	r18, r18
    a30a:	c1 f7       	brne	.-16     	; 0xa2fc <strtok_r+0x2e>
    a30c:	0d 90       	ld	r0, X+
    a30e:	00 20       	and	r0, r0
    a310:	a1 f7       	brne	.-24     	; 0xa2fa <strtok_r+0x2c>
    a312:	d0 01       	movw	r26, r0
    a314:	fa 01       	movw	r30, r20
    a316:	a1 93       	st	Z+, r26
    a318:	b0 83       	st	Z, r27
    a31a:	08 95       	ret

0000a31c <strupr>:
    a31c:	dc 01       	movw	r26, r24
    a31e:	6c 91       	ld	r22, X
    a320:	61 56       	subi	r22, 0x61	; 97
    a322:	6a 31       	cpi	r22, 0x1A	; 26
    a324:	08 f0       	brcs	.+2      	; 0xa328 <strupr+0xc>
    a326:	60 5e       	subi	r22, 0xE0	; 224
    a328:	6f 5b       	subi	r22, 0xBF	; 191
    a32a:	6d 93       	st	X+, r22
    a32c:	c1 f7       	brne	.-16     	; 0xa31e <strupr+0x2>
    a32e:	08 95       	ret

0000a330 <itoa>:
    a330:	fb 01       	movw	r30, r22
    a332:	9f 01       	movw	r18, r30
    a334:	e8 94       	clt
    a336:	42 30       	cpi	r20, 0x02	; 2
    a338:	c4 f0       	brlt	.+48     	; 0xa36a <itoa+0x3a>
    a33a:	45 32       	cpi	r20, 0x25	; 37
    a33c:	b4 f4       	brge	.+44     	; 0xa36a <itoa+0x3a>
    a33e:	4a 30       	cpi	r20, 0x0A	; 10
    a340:	29 f4       	brne	.+10     	; 0xa34c <itoa+0x1c>
    a342:	97 fb       	bst	r25, 7
    a344:	1e f4       	brtc	.+6      	; 0xa34c <itoa+0x1c>
    a346:	90 95       	com	r25
    a348:	81 95       	neg	r24
    a34a:	9f 4f       	sbci	r25, 0xFF	; 255
    a34c:	64 2f       	mov	r22, r20
    a34e:	77 27       	eor	r23, r23
    a350:	0e 94 73 50 	call	0xa0e6	; 0xa0e6 <__udivmodhi4>
    a354:	80 5d       	subi	r24, 0xD0	; 208
    a356:	8a 33       	cpi	r24, 0x3A	; 58
    a358:	0c f0       	brlt	.+2      	; 0xa35c <itoa+0x2c>
    a35a:	89 5d       	subi	r24, 0xD9	; 217
    a35c:	81 93       	st	Z+, r24
    a35e:	cb 01       	movw	r24, r22
    a360:	00 97       	sbiw	r24, 0x00	; 0
    a362:	a1 f7       	brne	.-24     	; 0xa34c <itoa+0x1c>
    a364:	16 f4       	brtc	.+4      	; 0xa36a <itoa+0x3a>
    a366:	5d e2       	ldi	r21, 0x2D	; 45
    a368:	51 93       	st	Z+, r21
    a36a:	10 82       	st	Z, r1
    a36c:	c9 01       	movw	r24, r18
    a36e:	0c 94 4c 54 	jmp	0xa898	; 0xa898 <strrev>

0000a372 <ltoa>:
    a372:	fa 01       	movw	r30, r20
    a374:	cf 93       	push	r28
    a376:	ff 93       	push	r31
    a378:	ef 93       	push	r30
    a37a:	22 30       	cpi	r18, 0x02	; 2
    a37c:	44 f1       	brlt	.+80     	; 0xa3ce <ltoa+0x5c>
    a37e:	25 32       	cpi	r18, 0x25	; 37
    a380:	34 f5       	brge	.+76     	; 0xa3ce <ltoa+0x5c>
    a382:	c2 2f       	mov	r28, r18
    a384:	e8 94       	clt
    a386:	ca 30       	cpi	r28, 0x0A	; 10
    a388:	49 f4       	brne	.+18     	; 0xa39c <ltoa+0x2a>
    a38a:	97 fb       	bst	r25, 7
    a38c:	3e f4       	brtc	.+14     	; 0xa39c <ltoa+0x2a>
    a38e:	90 95       	com	r25
    a390:	80 95       	com	r24
    a392:	70 95       	com	r23
    a394:	61 95       	neg	r22
    a396:	7f 4f       	sbci	r23, 0xFF	; 255
    a398:	8f 4f       	sbci	r24, 0xFF	; 255
    a39a:	9f 4f       	sbci	r25, 0xFF	; 255
    a39c:	2c 2f       	mov	r18, r28
    a39e:	33 27       	eor	r19, r19
    a3a0:	44 27       	eor	r20, r20
    a3a2:	55 27       	eor	r21, r21
    a3a4:	ff 93       	push	r31
    a3a6:	ef 93       	push	r30
    a3a8:	0e 94 9a 50 	call	0xa134	; 0xa134 <__udivmodsi4>
    a3ac:	ef 91       	pop	r30
    a3ae:	ff 91       	pop	r31
    a3b0:	60 5d       	subi	r22, 0xD0	; 208
    a3b2:	6a 33       	cpi	r22, 0x3A	; 58
    a3b4:	0c f0       	brlt	.+2      	; 0xa3b8 <ltoa+0x46>
    a3b6:	69 5d       	subi	r22, 0xD9	; 217
    a3b8:	61 93       	st	Z+, r22
    a3ba:	b9 01       	movw	r22, r18
    a3bc:	ca 01       	movw	r24, r20
    a3be:	60 50       	subi	r22, 0x00	; 0
    a3c0:	70 40       	sbci	r23, 0x00	; 0
    a3c2:	80 40       	sbci	r24, 0x00	; 0
    a3c4:	90 40       	sbci	r25, 0x00	; 0
    a3c6:	51 f7       	brne	.-44     	; 0xa39c <ltoa+0x2a>
    a3c8:	16 f4       	brtc	.+4      	; 0xa3ce <ltoa+0x5c>
    a3ca:	cd e2       	ldi	r28, 0x2D	; 45
    a3cc:	c1 93       	st	Z+, r28
    a3ce:	10 82       	st	Z, r1
    a3d0:	8f 91       	pop	r24
    a3d2:	9f 91       	pop	r25
    a3d4:	cf 91       	pop	r28
    a3d6:	0c 94 4c 54 	jmp	0xa898	; 0xa898 <strrev>

0000a3da <__mulsi_const_10>:
    a3da:	59 2f       	mov	r21, r25
    a3dc:	48 2f       	mov	r20, r24
    a3de:	37 2f       	mov	r19, r23
    a3e0:	26 2f       	mov	r18, r22
    a3e2:	66 0f       	add	r22, r22
    a3e4:	77 1f       	adc	r23, r23
    a3e6:	88 1f       	adc	r24, r24
    a3e8:	99 1f       	adc	r25, r25
    a3ea:	66 0f       	add	r22, r22
    a3ec:	77 1f       	adc	r23, r23
    a3ee:	88 1f       	adc	r24, r24
    a3f0:	99 1f       	adc	r25, r25
    a3f2:	62 0f       	add	r22, r18
    a3f4:	73 1f       	adc	r23, r19
    a3f6:	84 1f       	adc	r24, r20
    a3f8:	95 1f       	adc	r25, r21
    a3fa:	66 0f       	add	r22, r22
    a3fc:	77 1f       	adc	r23, r23
    a3fe:	88 1f       	adc	r24, r24
    a400:	99 1f       	adc	r25, r25
    a402:	08 95       	ret

0000a404 <sprintf>:
    a404:	0f 93       	push	r16
    a406:	1f 93       	push	r17
    a408:	df 93       	push	r29
    a40a:	cf 93       	push	r28
    a40c:	cd b7       	in	r28, 0x3d	; 61
    a40e:	de b7       	in	r29, 0x3e	; 62
    a410:	2e 97       	sbiw	r28, 0x0e	; 14
    a412:	cd bf       	out	0x3d, r28	; 61
    a414:	de bf       	out	0x3e, r29	; 62
    a416:	0e 89       	ldd	r16, Y+22	; 0x16
    a418:	1f 89       	ldd	r17, Y+23	; 0x17
    a41a:	86 e0       	ldi	r24, 0x06	; 6
    a41c:	8c 83       	std	Y+4, r24	; 0x04
    a41e:	09 83       	std	Y+1, r16	; 0x01
    a420:	1a 83       	std	Y+2, r17	; 0x02
    a422:	8f ef       	ldi	r24, 0xFF	; 255
    a424:	9f e7       	ldi	r25, 0x7F	; 127
    a426:	8d 83       	std	Y+5, r24	; 0x05
    a428:	9e 83       	std	Y+6, r25	; 0x06
    a42a:	9e 01       	movw	r18, r28
    a42c:	26 5e       	subi	r18, 0xE6	; 230
    a42e:	3f 4f       	sbci	r19, 0xFF	; 255
    a430:	ce 01       	movw	r24, r28
    a432:	01 96       	adiw	r24, 0x01	; 1
    a434:	68 8d       	ldd	r22, Y+24	; 0x18
    a436:	79 8d       	ldd	r23, Y+25	; 0x19
    a438:	a9 01       	movw	r20, r18
    a43a:	0e 94 2d 52 	call	0xa45a	; 0xa45a <vfprintf>
    a43e:	2f 81       	ldd	r18, Y+7	; 0x07
    a440:	38 85       	ldd	r19, Y+8	; 0x08
    a442:	02 0f       	add	r16, r18
    a444:	13 1f       	adc	r17, r19
    a446:	f8 01       	movw	r30, r16
    a448:	10 82       	st	Z, r1
    a44a:	2e 96       	adiw	r28, 0x0e	; 14
    a44c:	cd bf       	out	0x3d, r28	; 61
    a44e:	de bf       	out	0x3e, r29	; 62
    a450:	cf 91       	pop	r28
    a452:	df 91       	pop	r29
    a454:	1f 91       	pop	r17
    a456:	0f 91       	pop	r16
    a458:	08 95       	ret

0000a45a <vfprintf>:
    a45a:	2f 92       	push	r2
    a45c:	3f 92       	push	r3
    a45e:	4f 92       	push	r4
    a460:	5f 92       	push	r5
    a462:	6f 92       	push	r6
    a464:	7f 92       	push	r7
    a466:	8f 92       	push	r8
    a468:	9f 92       	push	r9
    a46a:	af 92       	push	r10
    a46c:	bf 92       	push	r11
    a46e:	cf 92       	push	r12
    a470:	df 92       	push	r13
    a472:	ef 92       	push	r14
    a474:	ff 92       	push	r15
    a476:	0f 93       	push	r16
    a478:	1f 93       	push	r17
    a47a:	df 93       	push	r29
    a47c:	cf 93       	push	r28
    a47e:	cd b7       	in	r28, 0x3d	; 61
    a480:	de b7       	in	r29, 0x3e	; 62
    a482:	2b 97       	sbiw	r28, 0x0b	; 11
    a484:	cd bf       	out	0x3d, r28	; 61
    a486:	de bf       	out	0x3e, r29	; 62
    a488:	3c 01       	movw	r6, r24
    a48a:	2b 01       	movw	r4, r22
    a48c:	5a 01       	movw	r10, r20
    a48e:	fc 01       	movw	r30, r24
    a490:	16 82       	std	Z+6, r1	; 0x06
    a492:	17 82       	std	Z+7, r1	; 0x07
    a494:	83 81       	ldd	r24, Z+3	; 0x03
    a496:	81 fd       	sbrc	r24, 1
    a498:	03 c0       	rjmp	.+6      	; 0xa4a0 <vfprintf+0x46>
    a49a:	6f ef       	ldi	r22, 0xFF	; 255
    a49c:	7f ef       	ldi	r23, 0xFF	; 255
    a49e:	c6 c1       	rjmp	.+908    	; 0xa82c <vfprintf+0x3d2>
    a4a0:	9a e0       	ldi	r25, 0x0A	; 10
    a4a2:	89 2e       	mov	r8, r25
    a4a4:	1e 01       	movw	r2, r28
    a4a6:	08 94       	sec
    a4a8:	21 1c       	adc	r2, r1
    a4aa:	31 1c       	adc	r3, r1
    a4ac:	f3 01       	movw	r30, r6
    a4ae:	23 81       	ldd	r18, Z+3	; 0x03
    a4b0:	f2 01       	movw	r30, r4
    a4b2:	23 fd       	sbrc	r18, 3
    a4b4:	85 91       	lpm	r24, Z+
    a4b6:	23 ff       	sbrs	r18, 3
    a4b8:	81 91       	ld	r24, Z+
    a4ba:	2f 01       	movw	r4, r30
    a4bc:	88 23       	and	r24, r24
    a4be:	09 f4       	brne	.+2      	; 0xa4c2 <vfprintf+0x68>
    a4c0:	b2 c1       	rjmp	.+868    	; 0xa826 <vfprintf+0x3cc>
    a4c2:	85 32       	cpi	r24, 0x25	; 37
    a4c4:	39 f4       	brne	.+14     	; 0xa4d4 <vfprintf+0x7a>
    a4c6:	23 fd       	sbrc	r18, 3
    a4c8:	85 91       	lpm	r24, Z+
    a4ca:	23 ff       	sbrs	r18, 3
    a4cc:	81 91       	ld	r24, Z+
    a4ce:	2f 01       	movw	r4, r30
    a4d0:	85 32       	cpi	r24, 0x25	; 37
    a4d2:	29 f4       	brne	.+10     	; 0xa4de <vfprintf+0x84>
    a4d4:	90 e0       	ldi	r25, 0x00	; 0
    a4d6:	b3 01       	movw	r22, r6
    a4d8:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <fputc>
    a4dc:	e7 cf       	rjmp	.-50     	; 0xa4ac <vfprintf+0x52>
    a4de:	98 2f       	mov	r25, r24
    a4e0:	ff 24       	eor	r15, r15
    a4e2:	ee 24       	eor	r14, r14
    a4e4:	99 24       	eor	r9, r9
    a4e6:	ff e1       	ldi	r31, 0x1F	; 31
    a4e8:	ff 15       	cp	r31, r15
    a4ea:	d0 f0       	brcs	.+52     	; 0xa520 <vfprintf+0xc6>
    a4ec:	9b 32       	cpi	r25, 0x2B	; 43
    a4ee:	69 f0       	breq	.+26     	; 0xa50a <vfprintf+0xb0>
    a4f0:	9c 32       	cpi	r25, 0x2C	; 44
    a4f2:	28 f4       	brcc	.+10     	; 0xa4fe <vfprintf+0xa4>
    a4f4:	90 32       	cpi	r25, 0x20	; 32
    a4f6:	59 f0       	breq	.+22     	; 0xa50e <vfprintf+0xb4>
    a4f8:	93 32       	cpi	r25, 0x23	; 35
    a4fa:	91 f4       	brne	.+36     	; 0xa520 <vfprintf+0xc6>
    a4fc:	0e c0       	rjmp	.+28     	; 0xa51a <vfprintf+0xc0>
    a4fe:	9d 32       	cpi	r25, 0x2D	; 45
    a500:	49 f0       	breq	.+18     	; 0xa514 <vfprintf+0xba>
    a502:	90 33       	cpi	r25, 0x30	; 48
    a504:	69 f4       	brne	.+26     	; 0xa520 <vfprintf+0xc6>
    a506:	41 e0       	ldi	r20, 0x01	; 1
    a508:	24 c0       	rjmp	.+72     	; 0xa552 <vfprintf+0xf8>
    a50a:	52 e0       	ldi	r21, 0x02	; 2
    a50c:	f5 2a       	or	r15, r21
    a50e:	84 e0       	ldi	r24, 0x04	; 4
    a510:	f8 2a       	or	r15, r24
    a512:	28 c0       	rjmp	.+80     	; 0xa564 <vfprintf+0x10a>
    a514:	98 e0       	ldi	r25, 0x08	; 8
    a516:	f9 2a       	or	r15, r25
    a518:	25 c0       	rjmp	.+74     	; 0xa564 <vfprintf+0x10a>
    a51a:	e0 e1       	ldi	r30, 0x10	; 16
    a51c:	fe 2a       	or	r15, r30
    a51e:	22 c0       	rjmp	.+68     	; 0xa564 <vfprintf+0x10a>
    a520:	f7 fc       	sbrc	r15, 7
    a522:	29 c0       	rjmp	.+82     	; 0xa576 <vfprintf+0x11c>
    a524:	89 2f       	mov	r24, r25
    a526:	80 53       	subi	r24, 0x30	; 48
    a528:	8a 30       	cpi	r24, 0x0A	; 10
    a52a:	70 f4       	brcc	.+28     	; 0xa548 <vfprintf+0xee>
    a52c:	f6 fe       	sbrs	r15, 6
    a52e:	05 c0       	rjmp	.+10     	; 0xa53a <vfprintf+0xe0>
    a530:	98 9c       	mul	r9, r8
    a532:	90 2c       	mov	r9, r0
    a534:	11 24       	eor	r1, r1
    a536:	98 0e       	add	r9, r24
    a538:	15 c0       	rjmp	.+42     	; 0xa564 <vfprintf+0x10a>
    a53a:	e8 9c       	mul	r14, r8
    a53c:	e0 2c       	mov	r14, r0
    a53e:	11 24       	eor	r1, r1
    a540:	e8 0e       	add	r14, r24
    a542:	f0 e2       	ldi	r31, 0x20	; 32
    a544:	ff 2a       	or	r15, r31
    a546:	0e c0       	rjmp	.+28     	; 0xa564 <vfprintf+0x10a>
    a548:	9e 32       	cpi	r25, 0x2E	; 46
    a54a:	29 f4       	brne	.+10     	; 0xa556 <vfprintf+0xfc>
    a54c:	f6 fc       	sbrc	r15, 6
    a54e:	6b c1       	rjmp	.+726    	; 0xa826 <vfprintf+0x3cc>
    a550:	40 e4       	ldi	r20, 0x40	; 64
    a552:	f4 2a       	or	r15, r20
    a554:	07 c0       	rjmp	.+14     	; 0xa564 <vfprintf+0x10a>
    a556:	9c 36       	cpi	r25, 0x6C	; 108
    a558:	19 f4       	brne	.+6      	; 0xa560 <vfprintf+0x106>
    a55a:	50 e8       	ldi	r21, 0x80	; 128
    a55c:	f5 2a       	or	r15, r21
    a55e:	02 c0       	rjmp	.+4      	; 0xa564 <vfprintf+0x10a>
    a560:	98 36       	cpi	r25, 0x68	; 104
    a562:	49 f4       	brne	.+18     	; 0xa576 <vfprintf+0x11c>
    a564:	f2 01       	movw	r30, r4
    a566:	23 fd       	sbrc	r18, 3
    a568:	95 91       	lpm	r25, Z+
    a56a:	23 ff       	sbrs	r18, 3
    a56c:	91 91       	ld	r25, Z+
    a56e:	2f 01       	movw	r4, r30
    a570:	99 23       	and	r25, r25
    a572:	09 f0       	breq	.+2      	; 0xa576 <vfprintf+0x11c>
    a574:	b8 cf       	rjmp	.-144    	; 0xa4e6 <vfprintf+0x8c>
    a576:	89 2f       	mov	r24, r25
    a578:	85 54       	subi	r24, 0x45	; 69
    a57a:	83 30       	cpi	r24, 0x03	; 3
    a57c:	18 f0       	brcs	.+6      	; 0xa584 <vfprintf+0x12a>
    a57e:	80 52       	subi	r24, 0x20	; 32
    a580:	83 30       	cpi	r24, 0x03	; 3
    a582:	38 f4       	brcc	.+14     	; 0xa592 <vfprintf+0x138>
    a584:	44 e0       	ldi	r20, 0x04	; 4
    a586:	50 e0       	ldi	r21, 0x00	; 0
    a588:	a4 0e       	add	r10, r20
    a58a:	b5 1e       	adc	r11, r21
    a58c:	5f e3       	ldi	r21, 0x3F	; 63
    a58e:	59 83       	std	Y+1, r21	; 0x01
    a590:	0f c0       	rjmp	.+30     	; 0xa5b0 <vfprintf+0x156>
    a592:	93 36       	cpi	r25, 0x63	; 99
    a594:	31 f0       	breq	.+12     	; 0xa5a2 <vfprintf+0x148>
    a596:	93 37       	cpi	r25, 0x73	; 115
    a598:	79 f0       	breq	.+30     	; 0xa5b8 <vfprintf+0x15e>
    a59a:	93 35       	cpi	r25, 0x53	; 83
    a59c:	09 f0       	breq	.+2      	; 0xa5a0 <vfprintf+0x146>
    a59e:	56 c0       	rjmp	.+172    	; 0xa64c <vfprintf+0x1f2>
    a5a0:	20 c0       	rjmp	.+64     	; 0xa5e2 <vfprintf+0x188>
    a5a2:	f5 01       	movw	r30, r10
    a5a4:	80 81       	ld	r24, Z
    a5a6:	89 83       	std	Y+1, r24	; 0x01
    a5a8:	42 e0       	ldi	r20, 0x02	; 2
    a5aa:	50 e0       	ldi	r21, 0x00	; 0
    a5ac:	a4 0e       	add	r10, r20
    a5ae:	b5 1e       	adc	r11, r21
    a5b0:	61 01       	movw	r12, r2
    a5b2:	01 e0       	ldi	r16, 0x01	; 1
    a5b4:	10 e0       	ldi	r17, 0x00	; 0
    a5b6:	12 c0       	rjmp	.+36     	; 0xa5dc <vfprintf+0x182>
    a5b8:	f5 01       	movw	r30, r10
    a5ba:	c0 80       	ld	r12, Z
    a5bc:	d1 80       	ldd	r13, Z+1	; 0x01
    a5be:	f6 fc       	sbrc	r15, 6
    a5c0:	03 c0       	rjmp	.+6      	; 0xa5c8 <vfprintf+0x16e>
    a5c2:	6f ef       	ldi	r22, 0xFF	; 255
    a5c4:	7f ef       	ldi	r23, 0xFF	; 255
    a5c6:	02 c0       	rjmp	.+4      	; 0xa5cc <vfprintf+0x172>
    a5c8:	69 2d       	mov	r22, r9
    a5ca:	70 e0       	ldi	r23, 0x00	; 0
    a5cc:	42 e0       	ldi	r20, 0x02	; 2
    a5ce:	50 e0       	ldi	r21, 0x00	; 0
    a5d0:	a4 0e       	add	r10, r20
    a5d2:	b5 1e       	adc	r11, r21
    a5d4:	c6 01       	movw	r24, r12
    a5d6:	0e 94 41 54 	call	0xa882	; 0xa882 <strnlen>
    a5da:	8c 01       	movw	r16, r24
    a5dc:	5f e7       	ldi	r21, 0x7F	; 127
    a5de:	f5 22       	and	r15, r21
    a5e0:	14 c0       	rjmp	.+40     	; 0xa60a <vfprintf+0x1b0>
    a5e2:	f5 01       	movw	r30, r10
    a5e4:	c0 80       	ld	r12, Z
    a5e6:	d1 80       	ldd	r13, Z+1	; 0x01
    a5e8:	f6 fc       	sbrc	r15, 6
    a5ea:	03 c0       	rjmp	.+6      	; 0xa5f2 <vfprintf+0x198>
    a5ec:	6f ef       	ldi	r22, 0xFF	; 255
    a5ee:	7f ef       	ldi	r23, 0xFF	; 255
    a5f0:	02 c0       	rjmp	.+4      	; 0xa5f6 <vfprintf+0x19c>
    a5f2:	69 2d       	mov	r22, r9
    a5f4:	70 e0       	ldi	r23, 0x00	; 0
    a5f6:	42 e0       	ldi	r20, 0x02	; 2
    a5f8:	50 e0       	ldi	r21, 0x00	; 0
    a5fa:	a4 0e       	add	r10, r20
    a5fc:	b5 1e       	adc	r11, r21
    a5fe:	c6 01       	movw	r24, r12
    a600:	0e 94 2d 54 	call	0xa85a	; 0xa85a <strnlen_P>
    a604:	8c 01       	movw	r16, r24
    a606:	50 e8       	ldi	r21, 0x80	; 128
    a608:	f5 2a       	or	r15, r21
    a60a:	f3 fe       	sbrs	r15, 3
    a60c:	07 c0       	rjmp	.+14     	; 0xa61c <vfprintf+0x1c2>
    a60e:	1a c0       	rjmp	.+52     	; 0xa644 <vfprintf+0x1ea>
    a610:	80 e2       	ldi	r24, 0x20	; 32
    a612:	90 e0       	ldi	r25, 0x00	; 0
    a614:	b3 01       	movw	r22, r6
    a616:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <fputc>
    a61a:	ea 94       	dec	r14
    a61c:	8e 2d       	mov	r24, r14
    a61e:	90 e0       	ldi	r25, 0x00	; 0
    a620:	08 17       	cp	r16, r24
    a622:	19 07       	cpc	r17, r25
    a624:	a8 f3       	brcs	.-22     	; 0xa610 <vfprintf+0x1b6>
    a626:	0e c0       	rjmp	.+28     	; 0xa644 <vfprintf+0x1ea>
    a628:	f6 01       	movw	r30, r12
    a62a:	f7 fc       	sbrc	r15, 7
    a62c:	85 91       	lpm	r24, Z+
    a62e:	f7 fe       	sbrs	r15, 7
    a630:	81 91       	ld	r24, Z+
    a632:	6f 01       	movw	r12, r30
    a634:	90 e0       	ldi	r25, 0x00	; 0
    a636:	b3 01       	movw	r22, r6
    a638:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <fputc>
    a63c:	e1 10       	cpse	r14, r1
    a63e:	ea 94       	dec	r14
    a640:	01 50       	subi	r16, 0x01	; 1
    a642:	10 40       	sbci	r17, 0x00	; 0
    a644:	01 15       	cp	r16, r1
    a646:	11 05       	cpc	r17, r1
    a648:	79 f7       	brne	.-34     	; 0xa628 <vfprintf+0x1ce>
    a64a:	ea c0       	rjmp	.+468    	; 0xa820 <vfprintf+0x3c6>
    a64c:	94 36       	cpi	r25, 0x64	; 100
    a64e:	11 f0       	breq	.+4      	; 0xa654 <vfprintf+0x1fa>
    a650:	99 36       	cpi	r25, 0x69	; 105
    a652:	69 f5       	brne	.+90     	; 0xa6ae <vfprintf+0x254>
    a654:	f7 fe       	sbrs	r15, 7
    a656:	08 c0       	rjmp	.+16     	; 0xa668 <vfprintf+0x20e>
    a658:	f5 01       	movw	r30, r10
    a65a:	20 81       	ld	r18, Z
    a65c:	31 81       	ldd	r19, Z+1	; 0x01
    a65e:	42 81       	ldd	r20, Z+2	; 0x02
    a660:	53 81       	ldd	r21, Z+3	; 0x03
    a662:	84 e0       	ldi	r24, 0x04	; 4
    a664:	90 e0       	ldi	r25, 0x00	; 0
    a666:	0a c0       	rjmp	.+20     	; 0xa67c <vfprintf+0x222>
    a668:	f5 01       	movw	r30, r10
    a66a:	80 81       	ld	r24, Z
    a66c:	91 81       	ldd	r25, Z+1	; 0x01
    a66e:	9c 01       	movw	r18, r24
    a670:	44 27       	eor	r20, r20
    a672:	37 fd       	sbrc	r19, 7
    a674:	40 95       	com	r20
    a676:	54 2f       	mov	r21, r20
    a678:	82 e0       	ldi	r24, 0x02	; 2
    a67a:	90 e0       	ldi	r25, 0x00	; 0
    a67c:	a8 0e       	add	r10, r24
    a67e:	b9 1e       	adc	r11, r25
    a680:	9f e6       	ldi	r25, 0x6F	; 111
    a682:	f9 22       	and	r15, r25
    a684:	57 ff       	sbrs	r21, 7
    a686:	09 c0       	rjmp	.+18     	; 0xa69a <vfprintf+0x240>
    a688:	50 95       	com	r21
    a68a:	40 95       	com	r20
    a68c:	30 95       	com	r19
    a68e:	21 95       	neg	r18
    a690:	3f 4f       	sbci	r19, 0xFF	; 255
    a692:	4f 4f       	sbci	r20, 0xFF	; 255
    a694:	5f 4f       	sbci	r21, 0xFF	; 255
    a696:	e0 e8       	ldi	r30, 0x80	; 128
    a698:	fe 2a       	or	r15, r30
    a69a:	ca 01       	movw	r24, r20
    a69c:	b9 01       	movw	r22, r18
    a69e:	a1 01       	movw	r20, r2
    a6a0:	2a e0       	ldi	r18, 0x0A	; 10
    a6a2:	30 e0       	ldi	r19, 0x00	; 0
    a6a4:	0e 94 88 54 	call	0xa910	; 0xa910 <__ultoa_invert>
    a6a8:	d8 2e       	mov	r13, r24
    a6aa:	d2 18       	sub	r13, r2
    a6ac:	40 c0       	rjmp	.+128    	; 0xa72e <vfprintf+0x2d4>
    a6ae:	95 37       	cpi	r25, 0x75	; 117
    a6b0:	29 f4       	brne	.+10     	; 0xa6bc <vfprintf+0x262>
    a6b2:	1f 2d       	mov	r17, r15
    a6b4:	1f 7e       	andi	r17, 0xEF	; 239
    a6b6:	2a e0       	ldi	r18, 0x0A	; 10
    a6b8:	30 e0       	ldi	r19, 0x00	; 0
    a6ba:	1d c0       	rjmp	.+58     	; 0xa6f6 <vfprintf+0x29c>
    a6bc:	1f 2d       	mov	r17, r15
    a6be:	19 7f       	andi	r17, 0xF9	; 249
    a6c0:	9f 36       	cpi	r25, 0x6F	; 111
    a6c2:	61 f0       	breq	.+24     	; 0xa6dc <vfprintf+0x282>
    a6c4:	90 37       	cpi	r25, 0x70	; 112
    a6c6:	20 f4       	brcc	.+8      	; 0xa6d0 <vfprintf+0x276>
    a6c8:	98 35       	cpi	r25, 0x58	; 88
    a6ca:	09 f0       	breq	.+2      	; 0xa6ce <vfprintf+0x274>
    a6cc:	ac c0       	rjmp	.+344    	; 0xa826 <vfprintf+0x3cc>
    a6ce:	0f c0       	rjmp	.+30     	; 0xa6ee <vfprintf+0x294>
    a6d0:	90 37       	cpi	r25, 0x70	; 112
    a6d2:	39 f0       	breq	.+14     	; 0xa6e2 <vfprintf+0x288>
    a6d4:	98 37       	cpi	r25, 0x78	; 120
    a6d6:	09 f0       	breq	.+2      	; 0xa6da <vfprintf+0x280>
    a6d8:	a6 c0       	rjmp	.+332    	; 0xa826 <vfprintf+0x3cc>
    a6da:	04 c0       	rjmp	.+8      	; 0xa6e4 <vfprintf+0x28a>
    a6dc:	28 e0       	ldi	r18, 0x08	; 8
    a6de:	30 e0       	ldi	r19, 0x00	; 0
    a6e0:	0a c0       	rjmp	.+20     	; 0xa6f6 <vfprintf+0x29c>
    a6e2:	10 61       	ori	r17, 0x10	; 16
    a6e4:	14 fd       	sbrc	r17, 4
    a6e6:	14 60       	ori	r17, 0x04	; 4
    a6e8:	20 e1       	ldi	r18, 0x10	; 16
    a6ea:	30 e0       	ldi	r19, 0x00	; 0
    a6ec:	04 c0       	rjmp	.+8      	; 0xa6f6 <vfprintf+0x29c>
    a6ee:	14 fd       	sbrc	r17, 4
    a6f0:	16 60       	ori	r17, 0x06	; 6
    a6f2:	20 e1       	ldi	r18, 0x10	; 16
    a6f4:	32 e0       	ldi	r19, 0x02	; 2
    a6f6:	17 ff       	sbrs	r17, 7
    a6f8:	08 c0       	rjmp	.+16     	; 0xa70a <vfprintf+0x2b0>
    a6fa:	f5 01       	movw	r30, r10
    a6fc:	60 81       	ld	r22, Z
    a6fe:	71 81       	ldd	r23, Z+1	; 0x01
    a700:	82 81       	ldd	r24, Z+2	; 0x02
    a702:	93 81       	ldd	r25, Z+3	; 0x03
    a704:	44 e0       	ldi	r20, 0x04	; 4
    a706:	50 e0       	ldi	r21, 0x00	; 0
    a708:	08 c0       	rjmp	.+16     	; 0xa71a <vfprintf+0x2c0>
    a70a:	f5 01       	movw	r30, r10
    a70c:	80 81       	ld	r24, Z
    a70e:	91 81       	ldd	r25, Z+1	; 0x01
    a710:	bc 01       	movw	r22, r24
    a712:	80 e0       	ldi	r24, 0x00	; 0
    a714:	90 e0       	ldi	r25, 0x00	; 0
    a716:	42 e0       	ldi	r20, 0x02	; 2
    a718:	50 e0       	ldi	r21, 0x00	; 0
    a71a:	a4 0e       	add	r10, r20
    a71c:	b5 1e       	adc	r11, r21
    a71e:	a1 01       	movw	r20, r2
    a720:	0e 94 88 54 	call	0xa910	; 0xa910 <__ultoa_invert>
    a724:	d8 2e       	mov	r13, r24
    a726:	d2 18       	sub	r13, r2
    a728:	8f e7       	ldi	r24, 0x7F	; 127
    a72a:	f8 2e       	mov	r15, r24
    a72c:	f1 22       	and	r15, r17
    a72e:	f6 fe       	sbrs	r15, 6
    a730:	0b c0       	rjmp	.+22     	; 0xa748 <vfprintf+0x2ee>
    a732:	5e ef       	ldi	r21, 0xFE	; 254
    a734:	f5 22       	and	r15, r21
    a736:	d9 14       	cp	r13, r9
    a738:	38 f4       	brcc	.+14     	; 0xa748 <vfprintf+0x2ee>
    a73a:	f4 fe       	sbrs	r15, 4
    a73c:	07 c0       	rjmp	.+14     	; 0xa74c <vfprintf+0x2f2>
    a73e:	f2 fc       	sbrc	r15, 2
    a740:	05 c0       	rjmp	.+10     	; 0xa74c <vfprintf+0x2f2>
    a742:	8f ee       	ldi	r24, 0xEF	; 239
    a744:	f8 22       	and	r15, r24
    a746:	02 c0       	rjmp	.+4      	; 0xa74c <vfprintf+0x2f2>
    a748:	1d 2d       	mov	r17, r13
    a74a:	01 c0       	rjmp	.+2      	; 0xa74e <vfprintf+0x2f4>
    a74c:	19 2d       	mov	r17, r9
    a74e:	f4 fe       	sbrs	r15, 4
    a750:	0d c0       	rjmp	.+26     	; 0xa76c <vfprintf+0x312>
    a752:	fe 01       	movw	r30, r28
    a754:	ed 0d       	add	r30, r13
    a756:	f1 1d       	adc	r31, r1
    a758:	80 81       	ld	r24, Z
    a75a:	80 33       	cpi	r24, 0x30	; 48
    a75c:	19 f4       	brne	.+6      	; 0xa764 <vfprintf+0x30a>
    a75e:	99 ee       	ldi	r25, 0xE9	; 233
    a760:	f9 22       	and	r15, r25
    a762:	08 c0       	rjmp	.+16     	; 0xa774 <vfprintf+0x31a>
    a764:	1f 5f       	subi	r17, 0xFF	; 255
    a766:	f2 fe       	sbrs	r15, 2
    a768:	05 c0       	rjmp	.+10     	; 0xa774 <vfprintf+0x31a>
    a76a:	03 c0       	rjmp	.+6      	; 0xa772 <vfprintf+0x318>
    a76c:	8f 2d       	mov	r24, r15
    a76e:	86 78       	andi	r24, 0x86	; 134
    a770:	09 f0       	breq	.+2      	; 0xa774 <vfprintf+0x31a>
    a772:	1f 5f       	subi	r17, 0xFF	; 255
    a774:	0f 2d       	mov	r16, r15
    a776:	f3 fc       	sbrc	r15, 3
    a778:	14 c0       	rjmp	.+40     	; 0xa7a2 <vfprintf+0x348>
    a77a:	f0 fe       	sbrs	r15, 0
    a77c:	0f c0       	rjmp	.+30     	; 0xa79c <vfprintf+0x342>
    a77e:	1e 15       	cp	r17, r14
    a780:	10 f0       	brcs	.+4      	; 0xa786 <vfprintf+0x32c>
    a782:	9d 2c       	mov	r9, r13
    a784:	0b c0       	rjmp	.+22     	; 0xa79c <vfprintf+0x342>
    a786:	9d 2c       	mov	r9, r13
    a788:	9e 0c       	add	r9, r14
    a78a:	91 1a       	sub	r9, r17
    a78c:	1e 2d       	mov	r17, r14
    a78e:	06 c0       	rjmp	.+12     	; 0xa79c <vfprintf+0x342>
    a790:	80 e2       	ldi	r24, 0x20	; 32
    a792:	90 e0       	ldi	r25, 0x00	; 0
    a794:	b3 01       	movw	r22, r6
    a796:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <fputc>
    a79a:	1f 5f       	subi	r17, 0xFF	; 255
    a79c:	1e 15       	cp	r17, r14
    a79e:	c0 f3       	brcs	.-16     	; 0xa790 <vfprintf+0x336>
    a7a0:	04 c0       	rjmp	.+8      	; 0xa7aa <vfprintf+0x350>
    a7a2:	1e 15       	cp	r17, r14
    a7a4:	10 f4       	brcc	.+4      	; 0xa7aa <vfprintf+0x350>
    a7a6:	e1 1a       	sub	r14, r17
    a7a8:	01 c0       	rjmp	.+2      	; 0xa7ac <vfprintf+0x352>
    a7aa:	ee 24       	eor	r14, r14
    a7ac:	04 ff       	sbrs	r16, 4
    a7ae:	0f c0       	rjmp	.+30     	; 0xa7ce <vfprintf+0x374>
    a7b0:	80 e3       	ldi	r24, 0x30	; 48
    a7b2:	90 e0       	ldi	r25, 0x00	; 0
    a7b4:	b3 01       	movw	r22, r6
    a7b6:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <fputc>
    a7ba:	02 ff       	sbrs	r16, 2
    a7bc:	1d c0       	rjmp	.+58     	; 0xa7f8 <vfprintf+0x39e>
    a7be:	01 fd       	sbrc	r16, 1
    a7c0:	03 c0       	rjmp	.+6      	; 0xa7c8 <vfprintf+0x36e>
    a7c2:	88 e7       	ldi	r24, 0x78	; 120
    a7c4:	90 e0       	ldi	r25, 0x00	; 0
    a7c6:	0e c0       	rjmp	.+28     	; 0xa7e4 <vfprintf+0x38a>
    a7c8:	88 e5       	ldi	r24, 0x58	; 88
    a7ca:	90 e0       	ldi	r25, 0x00	; 0
    a7cc:	0b c0       	rjmp	.+22     	; 0xa7e4 <vfprintf+0x38a>
    a7ce:	80 2f       	mov	r24, r16
    a7d0:	86 78       	andi	r24, 0x86	; 134
    a7d2:	91 f0       	breq	.+36     	; 0xa7f8 <vfprintf+0x39e>
    a7d4:	01 ff       	sbrs	r16, 1
    a7d6:	02 c0       	rjmp	.+4      	; 0xa7dc <vfprintf+0x382>
    a7d8:	8b e2       	ldi	r24, 0x2B	; 43
    a7da:	01 c0       	rjmp	.+2      	; 0xa7de <vfprintf+0x384>
    a7dc:	80 e2       	ldi	r24, 0x20	; 32
    a7de:	f7 fc       	sbrc	r15, 7
    a7e0:	8d e2       	ldi	r24, 0x2D	; 45
    a7e2:	90 e0       	ldi	r25, 0x00	; 0
    a7e4:	b3 01       	movw	r22, r6
    a7e6:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <fputc>
    a7ea:	06 c0       	rjmp	.+12     	; 0xa7f8 <vfprintf+0x39e>
    a7ec:	80 e3       	ldi	r24, 0x30	; 48
    a7ee:	90 e0       	ldi	r25, 0x00	; 0
    a7f0:	b3 01       	movw	r22, r6
    a7f2:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <fputc>
    a7f6:	9a 94       	dec	r9
    a7f8:	d9 14       	cp	r13, r9
    a7fa:	c0 f3       	brcs	.-16     	; 0xa7ec <vfprintf+0x392>
    a7fc:	da 94       	dec	r13
    a7fe:	f1 01       	movw	r30, r2
    a800:	ed 0d       	add	r30, r13
    a802:	f1 1d       	adc	r31, r1
    a804:	80 81       	ld	r24, Z
    a806:	90 e0       	ldi	r25, 0x00	; 0
    a808:	b3 01       	movw	r22, r6
    a80a:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <fputc>
    a80e:	dd 20       	and	r13, r13
    a810:	a9 f7       	brne	.-22     	; 0xa7fc <vfprintf+0x3a2>
    a812:	06 c0       	rjmp	.+12     	; 0xa820 <vfprintf+0x3c6>
    a814:	80 e2       	ldi	r24, 0x20	; 32
    a816:	90 e0       	ldi	r25, 0x00	; 0
    a818:	b3 01       	movw	r22, r6
    a81a:	0e 94 5c 54 	call	0xa8b8	; 0xa8b8 <fputc>
    a81e:	ea 94       	dec	r14
    a820:	ee 20       	and	r14, r14
    a822:	c1 f7       	brne	.-16     	; 0xa814 <vfprintf+0x3ba>
    a824:	43 ce       	rjmp	.-890    	; 0xa4ac <vfprintf+0x52>
    a826:	f3 01       	movw	r30, r6
    a828:	66 81       	ldd	r22, Z+6	; 0x06
    a82a:	77 81       	ldd	r23, Z+7	; 0x07
    a82c:	cb 01       	movw	r24, r22
    a82e:	2b 96       	adiw	r28, 0x0b	; 11
    a830:	cd bf       	out	0x3d, r28	; 61
    a832:	de bf       	out	0x3e, r29	; 62
    a834:	cf 91       	pop	r28
    a836:	df 91       	pop	r29
    a838:	1f 91       	pop	r17
    a83a:	0f 91       	pop	r16
    a83c:	ff 90       	pop	r15
    a83e:	ef 90       	pop	r14
    a840:	df 90       	pop	r13
    a842:	cf 90       	pop	r12
    a844:	bf 90       	pop	r11
    a846:	af 90       	pop	r10
    a848:	9f 90       	pop	r9
    a84a:	8f 90       	pop	r8
    a84c:	7f 90       	pop	r7
    a84e:	6f 90       	pop	r6
    a850:	5f 90       	pop	r5
    a852:	4f 90       	pop	r4
    a854:	3f 90       	pop	r3
    a856:	2f 90       	pop	r2
    a858:	08 95       	ret

0000a85a <strnlen_P>:
    a85a:	fc 01       	movw	r30, r24
    a85c:	05 90       	lpm	r0, Z+
    a85e:	61 50       	subi	r22, 0x01	; 1
    a860:	70 40       	sbci	r23, 0x00	; 0
    a862:	01 10       	cpse	r0, r1
    a864:	d8 f7       	brcc	.-10     	; 0xa85c <strnlen_P+0x2>
    a866:	80 95       	com	r24
    a868:	90 95       	com	r25
    a86a:	8e 0f       	add	r24, r30
    a86c:	9f 1f       	adc	r25, r31
    a86e:	08 95       	ret

0000a870 <memcpy>:
    a870:	fb 01       	movw	r30, r22
    a872:	dc 01       	movw	r26, r24
    a874:	02 c0       	rjmp	.+4      	; 0xa87a <memcpy+0xa>
    a876:	01 90       	ld	r0, Z+
    a878:	0d 92       	st	X+, r0
    a87a:	41 50       	subi	r20, 0x01	; 1
    a87c:	50 40       	sbci	r21, 0x00	; 0
    a87e:	d8 f7       	brcc	.-10     	; 0xa876 <memcpy+0x6>
    a880:	08 95       	ret

0000a882 <strnlen>:
    a882:	fc 01       	movw	r30, r24
    a884:	61 50       	subi	r22, 0x01	; 1
    a886:	70 40       	sbci	r23, 0x00	; 0
    a888:	01 90       	ld	r0, Z+
    a88a:	01 10       	cpse	r0, r1
    a88c:	d8 f7       	brcc	.-10     	; 0xa884 <strnlen+0x2>
    a88e:	80 95       	com	r24
    a890:	90 95       	com	r25
    a892:	8e 0f       	add	r24, r30
    a894:	9f 1f       	adc	r25, r31
    a896:	08 95       	ret

0000a898 <strrev>:
    a898:	dc 01       	movw	r26, r24
    a89a:	fc 01       	movw	r30, r24
    a89c:	67 2f       	mov	r22, r23
    a89e:	71 91       	ld	r23, Z+
    a8a0:	77 23       	and	r23, r23
    a8a2:	e1 f7       	brne	.-8      	; 0xa89c <strrev+0x4>
    a8a4:	32 97       	sbiw	r30, 0x02	; 2
    a8a6:	04 c0       	rjmp	.+8      	; 0xa8b0 <strrev+0x18>
    a8a8:	7c 91       	ld	r23, X
    a8aa:	6d 93       	st	X+, r22
    a8ac:	70 83       	st	Z, r23
    a8ae:	62 91       	ld	r22, -Z
    a8b0:	ae 17       	cp	r26, r30
    a8b2:	bf 07       	cpc	r27, r31
    a8b4:	c8 f3       	brcs	.-14     	; 0xa8a8 <strrev+0x10>
    a8b6:	08 95       	ret

0000a8b8 <fputc>:
    a8b8:	0f 93       	push	r16
    a8ba:	1f 93       	push	r17
    a8bc:	cf 93       	push	r28
    a8be:	df 93       	push	r29
    a8c0:	8c 01       	movw	r16, r24
    a8c2:	eb 01       	movw	r28, r22
    a8c4:	8b 81       	ldd	r24, Y+3	; 0x03
    a8c6:	81 ff       	sbrs	r24, 1
    a8c8:	1b c0       	rjmp	.+54     	; 0xa900 <fputc+0x48>
    a8ca:	82 ff       	sbrs	r24, 2
    a8cc:	0d c0       	rjmp	.+26     	; 0xa8e8 <fputc+0x30>
    a8ce:	2e 81       	ldd	r18, Y+6	; 0x06
    a8d0:	3f 81       	ldd	r19, Y+7	; 0x07
    a8d2:	8c 81       	ldd	r24, Y+4	; 0x04
    a8d4:	9d 81       	ldd	r25, Y+5	; 0x05
    a8d6:	28 17       	cp	r18, r24
    a8d8:	39 07       	cpc	r19, r25
    a8da:	64 f4       	brge	.+24     	; 0xa8f4 <fputc+0x3c>
    a8dc:	e8 81       	ld	r30, Y
    a8de:	f9 81       	ldd	r31, Y+1	; 0x01
    a8e0:	01 93       	st	Z+, r16
    a8e2:	e8 83       	st	Y, r30
    a8e4:	f9 83       	std	Y+1, r31	; 0x01
    a8e6:	06 c0       	rjmp	.+12     	; 0xa8f4 <fputc+0x3c>
    a8e8:	e8 85       	ldd	r30, Y+8	; 0x08
    a8ea:	f9 85       	ldd	r31, Y+9	; 0x09
    a8ec:	80 2f       	mov	r24, r16
    a8ee:	19 95       	eicall
    a8f0:	89 2b       	or	r24, r25
    a8f2:	31 f4       	brne	.+12     	; 0xa900 <fputc+0x48>
    a8f4:	8e 81       	ldd	r24, Y+6	; 0x06
    a8f6:	9f 81       	ldd	r25, Y+7	; 0x07
    a8f8:	01 96       	adiw	r24, 0x01	; 1
    a8fa:	8e 83       	std	Y+6, r24	; 0x06
    a8fc:	9f 83       	std	Y+7, r25	; 0x07
    a8fe:	02 c0       	rjmp	.+4      	; 0xa904 <fputc+0x4c>
    a900:	0f ef       	ldi	r16, 0xFF	; 255
    a902:	1f ef       	ldi	r17, 0xFF	; 255
    a904:	c8 01       	movw	r24, r16
    a906:	df 91       	pop	r29
    a908:	cf 91       	pop	r28
    a90a:	1f 91       	pop	r17
    a90c:	0f 91       	pop	r16
    a90e:	08 95       	ret

0000a910 <__ultoa_invert>:
    a910:	fa 01       	movw	r30, r20
    a912:	aa 27       	eor	r26, r26
    a914:	28 30       	cpi	r18, 0x08	; 8
    a916:	51 f1       	breq	.+84     	; 0xa96c <__ultoa_invert+0x5c>
    a918:	20 31       	cpi	r18, 0x10	; 16
    a91a:	81 f1       	breq	.+96     	; 0xa97c <__ultoa_invert+0x6c>
    a91c:	e8 94       	clt
    a91e:	6f 93       	push	r22
    a920:	6e 7f       	andi	r22, 0xFE	; 254
    a922:	6e 5f       	subi	r22, 0xFE	; 254
    a924:	7f 4f       	sbci	r23, 0xFF	; 255
    a926:	8f 4f       	sbci	r24, 0xFF	; 255
    a928:	9f 4f       	sbci	r25, 0xFF	; 255
    a92a:	af 4f       	sbci	r26, 0xFF	; 255
    a92c:	b1 e0       	ldi	r27, 0x01	; 1
    a92e:	3e d0       	rcall	.+124    	; 0xa9ac <__ultoa_invert+0x9c>
    a930:	b4 e0       	ldi	r27, 0x04	; 4
    a932:	3c d0       	rcall	.+120    	; 0xa9ac <__ultoa_invert+0x9c>
    a934:	67 0f       	add	r22, r23
    a936:	78 1f       	adc	r23, r24
    a938:	89 1f       	adc	r24, r25
    a93a:	9a 1f       	adc	r25, r26
    a93c:	a1 1d       	adc	r26, r1
    a93e:	68 0f       	add	r22, r24
    a940:	79 1f       	adc	r23, r25
    a942:	8a 1f       	adc	r24, r26
    a944:	91 1d       	adc	r25, r1
    a946:	a1 1d       	adc	r26, r1
    a948:	6a 0f       	add	r22, r26
    a94a:	71 1d       	adc	r23, r1
    a94c:	81 1d       	adc	r24, r1
    a94e:	91 1d       	adc	r25, r1
    a950:	a1 1d       	adc	r26, r1
    a952:	20 d0       	rcall	.+64     	; 0xa994 <__ultoa_invert+0x84>
    a954:	09 f4       	brne	.+2      	; 0xa958 <__ultoa_invert+0x48>
    a956:	68 94       	set
    a958:	3f 91       	pop	r19
    a95a:	2a e0       	ldi	r18, 0x0A	; 10
    a95c:	26 9f       	mul	r18, r22
    a95e:	11 24       	eor	r1, r1
    a960:	30 19       	sub	r19, r0
    a962:	30 5d       	subi	r19, 0xD0	; 208
    a964:	31 93       	st	Z+, r19
    a966:	de f6       	brtc	.-74     	; 0xa91e <__ultoa_invert+0xe>
    a968:	cf 01       	movw	r24, r30
    a96a:	08 95       	ret
    a96c:	46 2f       	mov	r20, r22
    a96e:	47 70       	andi	r20, 0x07	; 7
    a970:	40 5d       	subi	r20, 0xD0	; 208
    a972:	41 93       	st	Z+, r20
    a974:	b3 e0       	ldi	r27, 0x03	; 3
    a976:	0f d0       	rcall	.+30     	; 0xa996 <__ultoa_invert+0x86>
    a978:	c9 f7       	brne	.-14     	; 0xa96c <__ultoa_invert+0x5c>
    a97a:	f6 cf       	rjmp	.-20     	; 0xa968 <__ultoa_invert+0x58>
    a97c:	46 2f       	mov	r20, r22
    a97e:	4f 70       	andi	r20, 0x0F	; 15
    a980:	40 5d       	subi	r20, 0xD0	; 208
    a982:	4a 33       	cpi	r20, 0x3A	; 58
    a984:	18 f0       	brcs	.+6      	; 0xa98c <__ultoa_invert+0x7c>
    a986:	49 5d       	subi	r20, 0xD9	; 217
    a988:	31 fd       	sbrc	r19, 1
    a98a:	40 52       	subi	r20, 0x20	; 32
    a98c:	41 93       	st	Z+, r20
    a98e:	02 d0       	rcall	.+4      	; 0xa994 <__ultoa_invert+0x84>
    a990:	a9 f7       	brne	.-22     	; 0xa97c <__ultoa_invert+0x6c>
    a992:	ea cf       	rjmp	.-44     	; 0xa968 <__ultoa_invert+0x58>
    a994:	b4 e0       	ldi	r27, 0x04	; 4
    a996:	a6 95       	lsr	r26
    a998:	97 95       	ror	r25
    a99a:	87 95       	ror	r24
    a99c:	77 95       	ror	r23
    a99e:	67 95       	ror	r22
    a9a0:	ba 95       	dec	r27
    a9a2:	c9 f7       	brne	.-14     	; 0xa996 <__ultoa_invert+0x86>
    a9a4:	00 97       	sbiw	r24, 0x00	; 0
    a9a6:	61 05       	cpc	r22, r1
    a9a8:	71 05       	cpc	r23, r1
    a9aa:	08 95       	ret
    a9ac:	9b 01       	movw	r18, r22
    a9ae:	ac 01       	movw	r20, r24
    a9b0:	0a 2e       	mov	r0, r26
    a9b2:	06 94       	lsr	r0
    a9b4:	57 95       	ror	r21
    a9b6:	47 95       	ror	r20
    a9b8:	37 95       	ror	r19
    a9ba:	27 95       	ror	r18
    a9bc:	ba 95       	dec	r27
    a9be:	c9 f7       	brne	.-14     	; 0xa9b2 <__ultoa_invert+0xa2>
    a9c0:	62 0f       	add	r22, r18
    a9c2:	73 1f       	adc	r23, r19
    a9c4:	84 1f       	adc	r24, r20
    a9c6:	95 1f       	adc	r25, r21
    a9c8:	a0 1d       	adc	r26, r0
    a9ca:	08 95       	ret

0000a9cc <_exit>:
    a9cc:	f8 94       	cli

0000a9ce <__stop_program>:
    a9ce:	ff cf       	rjmp	.-2      	; 0xa9ce <__stop_program>
